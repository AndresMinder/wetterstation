
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003e2  00800200  000041d4  00004268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000387  008005e2  008005e2  0000464a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000464a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000467c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa0  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00025ad0  00000000  00000000  0000515c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052a5  00000000  00000000  0002ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cb1  00000000  00000000  0002fed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029e0  00000000  00000000  00036b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005907  00000000  00000000  00039564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000102a4  00000000  00000000  0003ee6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  0004f10f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	91 c1       	rjmp	.+802    	; 0x324 <__dtors_end>
       2:	00 00       	nop
       4:	04 c6       	rjmp	.+3080   	; 0xc0e <__vector_1>
       6:	00 00       	nop
       8:	2d c6       	rjmp	.+3162   	; 0xc64 <__vector_2>
       a:	00 00       	nop
       c:	56 c6       	rjmp	.+3244   	; 0xcba <__vector_3>
       e:	00 00       	nop
      10:	7f c6       	rjmp	.+3326   	; 0xd10 <__vector_4>
      12:	00 00       	nop
      14:	a8 c6       	rjmp	.+3408   	; 0xd66 <__vector_5>
      16:	00 00       	nop
      18:	d1 c6       	rjmp	.+3490   	; 0xdbc <__vector_6>
      1a:	00 00       	nop
      1c:	fa c6       	rjmp	.+3572   	; 0xe12 <__vector_7>
      1e:	00 00       	nop
      20:	23 c7       	rjmp	.+3654   	; 0xe68 <__vector_8>
      22:	00 00       	nop
      24:	af c1       	rjmp	.+862    	; 0x384 <__bad_interrupt>
      26:	00 00       	nop
      28:	ad c1       	rjmp	.+858    	; 0x384 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ab c1       	rjmp	.+854    	; 0x384 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a9 c1       	rjmp	.+850    	; 0x384 <__bad_interrupt>
      32:	00 00       	nop
      34:	a7 c1       	rjmp	.+846    	; 0x384 <__bad_interrupt>
      36:	00 00       	nop
      38:	a5 c1       	rjmp	.+842    	; 0x384 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c1       	rjmp	.+838    	; 0x384 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c1       	rjmp	.+834    	; 0x384 <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c1       	rjmp	.+830    	; 0x384 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c1       	rjmp	.+826    	; 0x384 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c1       	rjmp	.+822    	; 0x384 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c1       	rjmp	.+818    	; 0x384 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c1       	rjmp	.+814    	; 0x384 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c1       	rjmp	.+810    	; 0x384 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	30 c7       	rjmp	.+3680   	; 0xebe <__vector_23>
      5e:	00 00       	nop
      60:	91 c1       	rjmp	.+802    	; 0x384 <__bad_interrupt>
      62:	00 00       	nop
      64:	bc c4       	rjmp	.+2424   	; 0x9de <__vector_25>
      66:	00 00       	nop
      68:	f0 c4       	rjmp	.+2528   	; 0xa4a <__vector_26>
      6a:	00 00       	nop
      6c:	8b c1       	rjmp	.+790    	; 0x384 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c1       	rjmp	.+786    	; 0x384 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c1       	rjmp	.+782    	; 0x384 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c1       	rjmp	.+778    	; 0x384 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c1       	rjmp	.+774    	; 0x384 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c1       	rjmp	.+770    	; 0x384 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c1       	rjmp	.+766    	; 0x384 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c1       	rjmp	.+762    	; 0x384 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c1       	rjmp	.+758    	; 0x384 <__bad_interrupt>
      8e:	00 00       	nop
      90:	79 c1       	rjmp	.+754    	; 0x384 <__bad_interrupt>
      92:	00 00       	nop
      94:	77 c1       	rjmp	.+750    	; 0x384 <__bad_interrupt>
      96:	00 00       	nop
      98:	75 c1       	rjmp	.+746    	; 0x384 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	73 c1       	rjmp	.+742    	; 0x384 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	71 c1       	rjmp	.+738    	; 0x384 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6f c1       	rjmp	.+734    	; 0x384 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6d c1       	rjmp	.+730    	; 0x384 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6b c1       	rjmp	.+726    	; 0x384 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	69 c1       	rjmp	.+722    	; 0x384 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	67 c1       	rjmp	.+718    	; 0x384 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	65 c1       	rjmp	.+714    	; 0x384 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	63 c1       	rjmp	.+710    	; 0x384 <__bad_interrupt>
      be:	00 00       	nop
      c0:	61 c1       	rjmp	.+706    	; 0x384 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5f c1       	rjmp	.+702    	; 0x384 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5d c1       	rjmp	.+698    	; 0x384 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5b c1       	rjmp	.+694    	; 0x384 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	59 c1       	rjmp	.+690    	; 0x384 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	57 c1       	rjmp	.+686    	; 0x384 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	55 c1       	rjmp	.+682    	; 0x384 <__bad_interrupt>
      da:	00 00       	nop
      dc:	53 c1       	rjmp	.+678    	; 0x384 <__bad_interrupt>
      de:	00 00       	nop
      e0:	51 c1       	rjmp	.+674    	; 0x384 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	32 08       	sbc	r3, r2
      e6:	35 08       	sbc	r3, r5
      e8:	24 08       	sbc	r2, r4
      ea:	28 08       	sbc	r2, r8
      ec:	2e 08       	sbc	r2, r14
      ee:	6c 08       	sbc	r6, r12
      f0:	39 08       	sbc	r3, r9
      f2:	3d 08       	sbc	r3, r13
      f4:	43 08       	sbc	r4, r3
      f6:	47 08       	sbc	r4, r7
      f8:	4b 08       	sbc	r4, r11
      fa:	51 08       	sbc	r5, r1
      fc:	55 08       	sbc	r5, r5
      fe:	59 08       	sbc	r5, r9
     100:	6c 08       	sbc	r6, r12
     102:	5f 08       	sbc	r5, r15
     104:	63 08       	sbc	r6, r3
     106:	67 08       	sbc	r6, r7

00000108 <__trampolines_end>:
     108:	00 40       	sbci	r16, 0x00	; 0
     10a:	7a 10       	cpse	r7, r10
     10c:	f3 5a       	subi	r31, 0xA3	; 163
     10e:	00 a0       	ldd	r0, Z+32	; 0x20
     110:	72 4e       	sbci	r23, 0xE2	; 226
     112:	18 09       	sbc	r17, r8
     114:	00 10       	cpse	r0, r0
     116:	a5 d4       	rcall	.+2378   	; 0xa62 <__vector_26+0x18>
     118:	e8 00       	.word	0x00e8	; ????
     11a:	00 e8       	ldi	r16, 0x80	; 128
     11c:	76 48       	sbci	r23, 0x86	; 134
     11e:	17 00       	.word	0x0017	; ????
     120:	00 e4       	ldi	r16, 0x40	; 64
     122:	0b 54       	subi	r16, 0x4B	; 75
     124:	02 00       	.word	0x0002	; ????
     126:	00 ca       	rjmp	.-3072   	; 0xfffff528 <__eeprom_end+0xff7ef528>
     128:	9a 3b       	cpi	r25, 0xBA	; 186
     12a:	00 00       	nop
     12c:	00 e1       	ldi	r16, 0x10	; 16
     12e:	f5 05       	cpc	r31, r5
     130:	00 00       	nop
     132:	80 96       	adiw	r24, 0x20	; 32
     134:	98 00       	.word	0x0098	; ????
     136:	00 00       	nop
     138:	40 42       	sbci	r20, 0x20	; 32
     13a:	0f 00       	.word	0x000f	; ????
     13c:	00 00       	nop
     13e:	a0 86       	std	Z+8, r10	; 0x08
     140:	01 00       	.word	0x0001	; ????
     142:	00 00       	nop
     144:	10 27       	eor	r17, r16
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	e8 03       	fmulsu	r22, r16
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	64 00       	.word	0x0064	; ????
     152:	00 00       	nop
     154:	00 00       	nop
     156:	0a 00       	.word	0x000a	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	01 00       	.word	0x0001	; ????
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	2c 76       	andi	r18, 0x6C	; 108
     164:	d8 88       	ldd	r13, Y+16	; 0x10
     166:	dc 67       	ori	r29, 0x7C	; 124
     168:	4f 08       	sbc	r4, r15
     16a:	23 df       	rcall	.-442    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     16c:	c1 df       	rcall	.-126    	; 0xf0 <__SREG__+0xb1>
     16e:	ae 59       	subi	r26, 0x9E	; 158
     170:	e1 b1       	in	r30, 0x01	; 1
     172:	b7 96       	adiw	r30, 0x27	; 39
     174:	e5 e3       	ldi	r30, 0x35	; 53
     176:	e4 53       	subi	r30, 0x34	; 52
     178:	c6 3a       	cpi	r28, 0xA6	; 166
     17a:	e6 51       	subi	r30, 0x16	; 22
     17c:	99 76       	andi	r25, 0x69	; 105
     17e:	96 e8       	ldi	r25, 0x86	; 134
     180:	e6 c2       	rjmp	.+1484   	; 0x74e <_ZN14HardwareSerial4readEv+0x1e>
     182:	84 26       	eor	r8, r20
     184:	eb 89       	ldd	r30, Y+19	; 0x13
     186:	8c 9b       	sbis	0x11, 4	; 17
     188:	62 ed       	ldi	r22, 0xD2	; 210
     18a:	40 7c       	andi	r20, 0xC0	; 192
     18c:	6f fc       	.word	0xfc6f	; ????
     18e:	ef bc       	out	0x2f, r14	; 47
     190:	9c 9f       	mul	r25, r28
     192:	40 f2       	brcs	.-112    	; 0x124 <__trampolines_end+0x1c>
     194:	ba a5       	ldd	r27, Y+42	; 0x2a
     196:	6f a5       	ldd	r22, Y+47	; 0x2f
     198:	f4 90       	lpm	r15, Z
     19a:	05 5a       	subi	r16, 0xA5	; 165
     19c:	2a f7       	brpl	.-54     	; 0x168 <__trampolines_end+0x60>
     19e:	5c 93       	st	X, r21
     1a0:	6b 6c       	ori	r22, 0xCB	; 203
     1a2:	f9 67       	ori	r31, 0x79	; 121
     1a4:	6d c1       	rjmp	.+730    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     1a6:	1b fc       	.word	0xfc1b	; ????
     1a8:	e0 e4       	ldi	r30, 0x40	; 64
     1aa:	0d 47       	sbci	r16, 0x7D	; 125
     1ac:	fe f5       	brtc	.+126    	; 0x22c <digital_pin_to_timer_PGM+0x2a>
     1ae:	20 e6       	ldi	r18, 0x60	; 96
     1b0:	b5 00       	.word	0x00b5	; ????
     1b2:	d0 ed       	ldi	r29, 0xD0	; 208
     1b4:	90 2e       	mov	r9, r16
     1b6:	03 00       	.word	0x0003	; ????
     1b8:	94 35       	cpi	r25, 0x54	; 84
     1ba:	77 05       	cpc	r23, r7
     1bc:	00 80       	ld	r0, Z
     1be:	84 1e       	adc	r8, r20
     1c0:	08 00       	.word	0x0008	; ????
     1c2:	00 20       	and	r0, r0
     1c4:	4e 0a       	sbc	r4, r30
     1c6:	00 00       	nop
     1c8:	00 c8       	rjmp	.-4096   	; 0xfffff1ca <__eeprom_end+0xff7ef1ca>
     1ca:	0c 33       	cpi	r16, 0x3C	; 60
     1cc:	33 33       	cpi	r19, 0x33	; 51
     1ce:	33 0f       	add	r19, r19
     1d0:	98 6e       	ori	r25, 0xE8	; 232
     1d2:	12 83       	std	Z+2, r17	; 0x02
     1d4:	11 41       	sbci	r17, 0x11	; 17
     1d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d8:	21 14       	cp	r2, r1
     1da:	89 3b       	cpi	r24, 0xB9	; 185
     1dc:	e6 55       	subi	r30, 0x56	; 86
     1de:	16 cf       	rjmp	.-468    	; 0xc <__FUSE_REGION_LENGTH__+0x9>
     1e0:	fe e6       	ldi	r31, 0x6E	; 110
     1e2:	db 18       	sub	r13, r11
     1e4:	d1 84       	ldd	r13, Z+9	; 0x09
     1e6:	4b 38       	cpi	r20, 0x8B	; 139
     1e8:	1b f7       	brvc	.-58     	; 0x1b0 <__trampolines_end+0xa8>
     1ea:	7c 1d       	adc	r23, r12
     1ec:	90 1d       	adc	r25, r0
     1ee:	a4 bb       	out	0x14, r26	; 20
     1f0:	e4 24       	eor	r14, r4
     1f2:	20 32       	cpi	r18, 0x20	; 32
     1f4:	84 72       	andi	r24, 0x24	; 36
     1f6:	5e 22       	and	r5, r30
     1f8:	81 00       	.word	0x0081	; ????
     1fa:	c9 f1       	breq	.+114    	; 0x26e <digital_pin_to_bit_mask_PGM+0x26>
     1fc:	24 ec       	ldi	r18, 0xC4	; 196
     1fe:	a1 e5       	ldi	r26, 0x51	; 81
     200:	3d 27       	eor	r19, r29

00000202 <digital_pin_to_timer_PGM>:
     202:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     22e:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000248 <digital_pin_to_bit_mask_PGM>:
     248:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     258:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     268:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     278:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     288:	04 08 10 20 40 80                                   ... @.

0000028e <digital_pin_to_port_PGM>:
     28e:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     29e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2ae:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     2be:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2ce:	0b 0b 0b 0b 0b 0b                                   ......

000002d4 <port_to_output_PGM>:
     2d4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2e4:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002ee <port_to_mode_PGM>:
     2ee:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2fe:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000308 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     308:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000318 <__ctors_start>:
     318:	cd 01       	movw	r24, r26
     31a:	36 03       	mulsu	r19, r22
     31c:	57 05       	cpc	r21, r7
     31e:	d1 0c       	add	r13, r1
     320:	1b 10       	cpse	r1, r11

00000322 <__ctors_end>:
     322:	e6 01       	movw	r28, r12

00000324 <__dtors_end>:
     324:	11 24       	eor	r1, r1
     326:	1f be       	out	0x3f, r1	; 63
     328:	cf ef       	ldi	r28, 0xFF	; 255
     32a:	d1 e2       	ldi	r29, 0x21	; 33
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	00 e0       	ldi	r16, 0x00	; 0
     332:	0c bf       	out	0x3c, r16	; 60

00000334 <__do_copy_data>:
     334:	15 e0       	ldi	r17, 0x05	; 5
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b2 e0       	ldi	r27, 0x02	; 2
     33a:	e4 ed       	ldi	r30, 0xD4	; 212
     33c:	f1 e4       	ldi	r31, 0x41	; 65
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	0b bf       	out	0x3b, r16	; 59
     342:	02 c0       	rjmp	.+4      	; 0x348 <__do_copy_data+0x14>
     344:	07 90       	elpm	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	a2 3e       	cpi	r26, 0xE2	; 226
     34a:	b1 07       	cpc	r27, r17
     34c:	d9 f7       	brne	.-10     	; 0x344 <__do_copy_data+0x10>

0000034e <__do_clear_bss>:
     34e:	29 e0       	ldi	r18, 0x09	; 9
     350:	a2 ee       	ldi	r26, 0xE2	; 226
     352:	b5 e0       	ldi	r27, 0x05	; 5
     354:	01 c0       	rjmp	.+2      	; 0x358 <.do_clear_bss_start>

00000356 <.do_clear_bss_loop>:
     356:	1d 92       	st	X+, r1

00000358 <.do_clear_bss_start>:
     358:	a9 36       	cpi	r26, 0x69	; 105
     35a:	b2 07       	cpc	r27, r18
     35c:	e1 f7       	brne	.-8      	; 0x356 <.do_clear_bss_loop>

0000035e <__do_global_ctors>:
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	c1 e9       	ldi	r28, 0x91	; 145
     362:	d1 e0       	ldi	r29, 0x01	; 1
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	06 c0       	rjmp	.+12     	; 0x374 <__do_global_ctors+0x16>
     368:	21 97       	sbiw	r28, 0x01	; 1
     36a:	01 09       	sbc	r16, r1
     36c:	80 2f       	mov	r24, r16
     36e:	fe 01       	movw	r30, r28
     370:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__tablejump2__>
     374:	cc 38       	cpi	r28, 0x8C	; 140
     376:	d1 07       	cpc	r29, r17
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 07       	cpc	r16, r24
     37c:	a9 f7       	brne	.-22     	; 0x368 <__do_global_ctors+0xa>
     37e:	c5 d3       	rcall	.+1930   	; 0xb0a <main>
     380:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <__do_global_dtors>

00000384 <__bad_interrupt>:
     384:	3d ce       	rjmp	.-902    	; 0x0 <__vectors>

00000386 <_Z14initAnemometerv>:
float wind = 0.0;
unsigned long time = 0;

void initAnemometer()
{	
	time = millis();
     386:	e5 d5       	rcall	.+3018   	; 0xf52 <millis>
     388:	60 93 e2 05 	sts	0x05E2, r22	; 0x8005e2 <__data_end>
     38c:	70 93 e3 05 	sts	0x05E3, r23	; 0x8005e3 <__data_end+0x1>
     390:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__data_end+0x2>
     394:	90 93 e5 05 	sts	0x05E5, r25	; 0x8005e5 <__data_end+0x3>
     398:	08 95       	ret

0000039a <_GLOBAL__sub_I_command_help>:
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     39a:	6a e1       	ldi	r22, 0x1A	; 26
     39c:	72 e0       	ldi	r23, 0x02	; 2
     39e:	8e ef       	ldi	r24, 0xFE	; 254
     3a0:	95 e0       	ldi	r25, 0x05	; 5
     3a2:	70 d7       	rcall	.+3808   	; 0x1284 <_ZN6StringC1EPKc>
String command_config = "config\r";
     3a4:	60 e2       	ldi	r22, 0x20	; 32
     3a6:	72 e0       	ldi	r23, 0x02	; 2
     3a8:	88 ef       	ldi	r24, 0xF8	; 248
     3aa:	95 e0       	ldi	r25, 0x05	; 5
     3ac:	6b d7       	rcall	.+3798   	; 0x1284 <_ZN6StringC1EPKc>
String command_exit = "exit\r";
     3ae:	68 e2       	ldi	r22, 0x28	; 40
     3b0:	72 e0       	ldi	r23, 0x02	; 2
     3b2:	82 ef       	ldi	r24, 0xF2	; 242
     3b4:	95 e0       	ldi	r25, 0x05	; 5
     3b6:	66 d7       	rcall	.+3788   	; 0x1284 <_ZN6StringC1EPKc>
String command_show = "show\r";
     3b8:	6e e2       	ldi	r22, 0x2E	; 46
     3ba:	72 e0       	ldi	r23, 0x02	; 2
     3bc:	8c ee       	ldi	r24, 0xEC	; 236
     3be:	95 e0       	ldi	r25, 0x05	; 5
     3c0:	61 d7       	rcall	.+3778   	; 0x1284 <_ZN6StringC1EPKc>
String show_sdCardInfo = "sd card informations\r";
     3c2:	64 e3       	ldi	r22, 0x34	; 52
     3c4:	72 e0       	ldi	r23, 0x02	; 2
     3c6:	86 ee       	ldi	r24, 0xE6	; 230
     3c8:	95 e0       	ldi	r25, 0x05	; 5
     3ca:	5c c7       	rjmp	.+3768   	; 0x1284 <_ZN6StringC1EPKc>

000003cc <_GLOBAL__sub_D_command_help>:
     3cc:	86 ee       	ldi	r24, 0xE6	; 230
     3ce:	95 e0       	ldi	r25, 0x05	; 5
     3d0:	ee d6       	rcall	.+3548   	; 0x11ae <_ZN6StringD1Ev>
#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
String command_show = "show\r";
     3d2:	8c ee       	ldi	r24, 0xEC	; 236
     3d4:	95 e0       	ldi	r25, 0x05	; 5
     3d6:	eb d6       	rcall	.+3542   	; 0x11ae <_ZN6StringD1Ev>

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
     3d8:	82 ef       	ldi	r24, 0xF2	; 242
     3da:	95 e0       	ldi	r25, 0x05	; 5
     3dc:	e8 d6       	rcall	.+3536   	; 0x11ae <_ZN6StringD1Ev>
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
     3de:	88 ef       	ldi	r24, 0xF8	; 248
     3e0:	95 e0       	ldi	r25, 0x05	; 5
     3e2:	e5 d6       	rcall	.+3530   	; 0x11ae <_ZN6StringD1Ev>
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     3e4:	8e ef       	ldi	r24, 0xFE	; 254
     3e6:	95 e0       	ldi	r25, 0x05	; 5
     3e8:	e2 c6       	rjmp	.+3524   	; 0x11ae <_ZN6StringD1Ev>

000003ea <_Z15read_string_cliv>:
     3ea:	af 92       	push	r10
		Serial.println("***Unknown command, enter 'help' for more informations!***");
	}
}

String read_string_cli()
{
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	c4 56       	subi	r28, 0x64	; 100
     404:	d1 09       	sbc	r29, r1
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	6c 01       	movw	r12, r24
	char buffer_char[INDEX_CLI];
	Serial.print('>');
     412:	6e e3       	ldi	r22, 0x3E	; 62
     414:	86 e6       	ldi	r24, 0x66	; 102
     416:	96 e0       	ldi	r25, 0x06	; 6
     418:	cf d3       	rcall	.+1950   	; 0xbb8 <_ZN5Print5printEc>
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	7c 01       	movw	r14, r24
	for (int i = 0; i < INDEX_CLI; i++)
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	5c 01       	movw	r10, r24
	{
		while (!Serial.available()){}
     426:	86 e6       	ldi	r24, 0x66	; 102
     428:	96 e0       	ldi	r25, 0x06	; 6
     42a:	68 d1       	rcall	.+720    	; 0x6fc <_ZN14HardwareSerial9availableEv>
     42c:	89 2b       	or	r24, r25
     42e:	d9 f3       	breq	.-10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		buffer_char[i] = Serial.read();
     430:	86 e6       	ldi	r24, 0x66	; 102
     432:	96 e0       	ldi	r25, 0x06	; 6
     434:	7d d1       	rcall	.+762    	; 0x730 <_ZN14HardwareSerial4readEv>
     436:	f7 01       	movw	r30, r14
     438:	81 93       	st	Z+, r24
     43a:	7f 01       	movw	r14, r30
		if (buffer_char[i] == '\r')						// if carriage return
     43c:	8d 30       	cpi	r24, 0x0D	; 13
     43e:	41 f4       	brne	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			buffer_char[i+1] = '\0';
     440:	fe 01       	movw	r30, r28
     442:	e0 0f       	add	r30, r16
     444:	f1 1f       	adc	r31, r17
			Serial.println();
     446:	12 82       	std	Z+2, r1	; 0x02
     448:	86 e6       	ldi	r24, 0x66	; 102
     44a:	96 e0       	ldi	r25, 0x06	; 6
     44c:	bc d3       	rcall	.+1912   	; 0xbc6 <_ZN5Print7printlnEv>
			break;
		}
		else
		{
			Serial.print(buffer_char[i]);
     44e:	09 c0       	rjmp	.+18     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     450:	68 2f       	mov	r22, r24
     452:	86 e6       	ldi	r24, 0x66	; 102
     454:	96 e0       	ldi	r25, 0x06	; 6
     456:	b0 d3       	rcall	.+1888   	; 0xbb8 <_ZN5Print5printEc>

String read_string_cli()
{
	char buffer_char[INDEX_CLI];
	Serial.print('>');
	for (int i = 0; i < INDEX_CLI; i++)
     458:	0f 5f       	subi	r16, 0xFF	; 255
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	04 36       	cpi	r16, 0x64	; 100
     45e:	11 05       	cpc	r17, r1
		else
		{
			Serial.print(buffer_char[i]);
		}
	}
	String buffer_string(buffer_char);					// cast from char array to string
     460:	11 f7       	brne	.-60     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     462:	b5 01       	movw	r22, r10
     464:	c6 01       	movw	r24, r12
     466:	0e d7       	rcall	.+3612   	; 0x1284 <_ZN6StringC1EPKc>
	
	return buffer_string;
     468:	c6 01       	movw	r24, r12
     46a:	cc 59       	subi	r28, 0x9C	; 156
     46c:	df 4f       	sbci	r29, 0xFF	; 255
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	bf 90       	pop	r11
     48a:	af 90       	pop	r10
     48c:	08 95       	ret

0000048e <_Z7initCLIv>:
String command_exit = "exit\r";
String command_show = "show\r";
String show_sdCardInfo = "sd card informations\r";

void initCLI()
{	
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	00 d0       	rcall	.+0      	; 0x498 <_Z7initCLIv+0xa>
     498:	00 d0       	rcall	.+0      	; 0x49a <_Z7initCLIv+0xc>
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
	Serial.println("*************************");
     49e:	6a e4       	ldi	r22, 0x4A	; 74
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	86 e6       	ldi	r24, 0x66	; 102
     4a4:	96 e0       	ldi	r25, 0x06	; 6
     4a6:	a2 d3       	rcall	.+1860   	; 0xbec <_ZN5Print7printlnEPKc>
	Serial.println("Authorized Access Only !!");
     4a8:	64 e6       	ldi	r22, 0x64	; 100
     4aa:	72 e0       	ldi	r23, 0x02	; 2
     4ac:	86 e6       	ldi	r24, 0x66	; 102
     4ae:	96 e0       	ldi	r25, 0x06	; 6
     4b0:	9d d3       	rcall	.+1850   	; 0xbec <_ZN5Print7printlnEPKc>
	Serial.println("*************************");
     4b2:	6a e4       	ldi	r22, 0x4A	; 74
     4b4:	72 e0       	ldi	r23, 0x02	; 2
     4b6:	86 e6       	ldi	r24, 0x66	; 102
     4b8:	96 e0       	ldi	r25, 0x06	; 6
     4ba:	98 d3       	rcall	.+1840   	; 0xbec <_ZN5Print7printlnEPKc>
     4bc:	05 e0       	ldi	r16, 0x05	; 5
     4be:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++)
	{
		Serial.println();
     4c0:	86 e6       	ldi	r24, 0x66	; 102
     4c2:	96 e0       	ldi	r25, 0x06	; 6
     4c4:	80 d3       	rcall	.+1792   	; 0xbc6 <_ZN5Print7printlnEv>
     4c6:	01 50       	subi	r16, 0x01	; 1
     4c8:	11 09       	sbc	r17, r1
     4ca:	d1 f7       	brne	.-12     	; 0x4c0 <_Z7initCLIv+0x32>
void initCLI()
{	
	Serial.println("*************************");
	Serial.println("Authorized Access Only !!");
	Serial.println("*************************");
	for (int i = 0; i < 5; i++)
     4cc:	6e e7       	ldi	r22, 0x7E	; 126
	{
		Serial.println();
	}
	while (1)
	{
		Serial.println("Password:");		
     4ce:	72 e0       	ldi	r23, 0x02	; 2
     4d0:	86 e6       	ldi	r24, 0x66	; 102
     4d2:	96 e0       	ldi	r25, 0x06	; 6
     4d4:	8b d3       	rcall	.+1814   	; 0xbec <_ZN5Print7printlnEPKc>
		String buffer = read_string_cli();
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	87 df       	rcall	.-242    	; 0x3ea <_Z15read_string_cliv>
		if (buffer.equals("asdf\r"))
     4dc:	68 e8       	ldi	r22, 0x88	; 136
     4de:	72 e0       	ldi	r23, 0x02	; 2
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	65 d7       	rcall	.+3786   	; 0x13b0 <_ZNK6String6equalsEPKc>
     4e6:	88 23       	and	r24, r24
     4e8:	59 f0       	breq	.+22     	; 0x500 <_Z7initCLIv+0x72>
		{
			Serial.println("Successfully logged in..");
     4ea:	6e e8       	ldi	r22, 0x8E	; 142
     4ec:	72 e0       	ldi	r23, 0x02	; 2
     4ee:	86 e6       	ldi	r24, 0x66	; 102
     4f0:	96 e0       	ldi	r25, 0x06	; 6
     4f2:	7c d3       	rcall	.+1784   	; 0xbec <_ZN5Print7printlnEPKc>
			break;
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	5a d6       	rcall	.+3252   	; 0x11ae <_ZN6StringD1Ev>
     4fa:	05 e0       	ldi	r16, 0x05	; 5
     4fc:	10 e0       	ldi	r17, 0x00	; 0
		} 
		else
		{
			Serial.println("False");
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <_Z7initCLIv+0x84>
     500:	67 ea       	ldi	r22, 0xA7	; 167
     502:	72 e0       	ldi	r23, 0x02	; 2
     504:	86 e6       	ldi	r24, 0x66	; 102
     506:	96 e0       	ldi	r25, 0x06	; 6
			continue;
     508:	71 d3       	rcall	.+1762   	; 0xbec <_ZN5Print7printlnEPKc>
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	4f d6       	rcall	.+3230   	; 0x11ae <_ZN6StringD1Ev>
     510:	dd cf       	rjmp	.-70     	; 0x4cc <_Z7initCLIv+0x3e>
		}
	}
	for (int i = 0; i < 5; i++)
	{
		Serial.println();
     512:	86 e6       	ldi	r24, 0x66	; 102
     514:	96 e0       	ldi	r25, 0x06	; 6
     516:	57 d3       	rcall	.+1710   	; 0xbc6 <_ZN5Print7printlnEv>
     518:	01 50       	subi	r16, 0x01	; 1
     51a:	11 09       	sbc	r17, r1
     51c:	d1 f7       	brne	.-12     	; 0x512 <_Z7initCLIv+0x84>
		{
			Serial.println("False");
			continue;
		}
	}
	for (int i = 0; i < 5; i++)
     51e:	26 96       	adiw	r28, 0x06	; 6
	{
		Serial.println();
	}
}
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <_ZN5SDLib4FileaSEOS0_>:
     534:	cf 93       	push	r28
	{
		SD.remove(filename);
	}
	else
	{
		Serial.println("File doesn't exist!");
     536:	df 93       	push	r29
     538:	fb 01       	movw	r30, r22
     53a:	22 81       	ldd	r18, Z+2	; 0x02
     53c:	33 81       	ldd	r19, Z+3	; 0x03
     53e:	dc 01       	movw	r26, r24
     540:	13 96       	adiw	r26, 0x03	; 3
     542:	3c 93       	st	X, r19
     544:	2e 93       	st	-X, r18
     546:	12 97       	sbiw	r26, 0x02	; 2
     548:	44 81       	ldd	r20, Z+4	; 0x04
     54a:	55 81       	ldd	r21, Z+5	; 0x05
     54c:	66 81       	ldd	r22, Z+6	; 0x06
     54e:	77 81       	ldd	r23, Z+7	; 0x07
     550:	14 96       	adiw	r26, 0x04	; 4
     552:	4d 93       	st	X+, r20
     554:	5d 93       	st	X+, r21
     556:	6d 93       	st	X+, r22
     558:	7c 93       	st	X, r23
     55a:	17 97       	sbiw	r26, 0x07	; 7
     55c:	40 85       	ldd	r20, Z+8	; 0x08
     55e:	51 85       	ldd	r21, Z+9	; 0x09
     560:	62 85       	ldd	r22, Z+10	; 0x0a
     562:	73 85       	ldd	r23, Z+11	; 0x0b
     564:	18 96       	adiw	r26, 0x08	; 8
     566:	4d 93       	st	X+, r20
     568:	5d 93       	st	X+, r21
     56a:	6d 93       	st	X+, r22
     56c:	7c 93       	st	X, r23
     56e:	1b 97       	sbiw	r26, 0x0b	; 11
     570:	1c 96       	adiw	r26, 0x0c	; 12
     572:	ef 01       	movw	r28, r30
     574:	2c 96       	adiw	r28, 0x0c	; 12
     576:	9c 01       	movw	r18, r24
     578:	27 5e       	subi	r18, 0xE7	; 231
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	49 91       	ld	r20, Y+
     57e:	4d 93       	st	X+, r20
     580:	a2 17       	cp	r26, r18
     582:	b3 07       	cpc	r27, r19
     584:	d9 f7       	brne	.-10     	; 0x57c <_ZN5SDLib4FileaSEOS0_+0x48>
     586:	21 8d       	ldd	r18, Z+25	; 0x19
     588:	32 8d       	ldd	r19, Z+26	; 0x1a
     58a:	fc 01       	movw	r30, r24
     58c:	32 8f       	std	Z+26, r19	; 0x1a
     58e:	21 8f       	std	Z+25, r18	; 0x19
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <_Z15writeFileSDCardd6String>:
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	6b 97       	sbiw	r28, 0x1b	; 27
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	6b 01       	movw	r12, r22
     5b8:	7c 01       	movw	r14, r24
     5ba:	8a 01       	movw	r16, r20
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	85 e3       	ldi	r24, 0x35	; 53
     5c0:	8c d5       	rcall	.+2840   	; 0x10da <pinMode>
     5c2:	65 e3       	ldi	r22, 0x35	; 53
     5c4:	8c e0       	ldi	r24, 0x0C	; 12
     5c6:	97 e0       	ldi	r25, 0x07	; 7
     5c8:	0e 94 47 0b 	call	0x168e	; 0x168e <_ZN5SDLib7SDClass5beginEh>
     5cc:	81 11       	cpse	r24, r1
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <_Z15writeFileSDCardd6String+0x46>
     5d0:	65 e3       	ldi	r22, 0x35	; 53
     5d2:	75 e0       	ldi	r23, 0x05	; 5
     5d4:	86 e6       	ldi	r24, 0x66	; 102
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	09 d3       	rcall	.+1554   	; 0xbec <_ZN5Print7printlnEPKc>
     5da:	39 c0       	rjmp	.+114    	; 0x64e <_Z15writeFileSDCardd6String+0xb8>
     5dc:	f8 01       	movw	r30, r16
     5de:	40 81       	ld	r20, Z
     5e0:	51 81       	ldd	r21, Z+1	; 0x01
     5e2:	27 e1       	ldi	r18, 0x17	; 23
     5e4:	6c e0       	ldi	r22, 0x0C	; 12
     5e6:	77 e0       	ldi	r23, 0x07	; 7
     5e8:	ce 01       	movw	r24, r28
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN5SDLib7SDClass4openEPKch>
     5f0:	be 01       	movw	r22, r28
     5f2:	6f 5f       	subi	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	8b e4       	ldi	r24, 0x4B	; 75
     5f8:	96 e0       	ldi	r25, 0x06	; 6
     5fa:	9c df       	rcall	.-200    	; 0x534 <_ZN5SDLib4FileaSEOS0_>
     5fc:	8b e4       	ldi	r24, 0x4B	; 75
     5fe:	96 e0       	ldi	r25, 0x06	; 6
     600:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN5SDLib4FilecvbEv>
     604:	88 23       	and	r24, r24
     606:	99 f0       	breq	.+38     	; 0x62e <_Z15writeFileSDCardd6String+0x98>
     608:	22 e0       	ldi	r18, 0x02	; 2
     60a:	b7 01       	movw	r22, r14
     60c:	a6 01       	movw	r20, r12
     60e:	ce 01       	movw	r24, r28
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	61 d6       	rcall	.+3266   	; 0x12d6 <_ZN6StringC1Edh>
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8b e4       	ldi	r24, 0x4B	; 75
     61c:	96 e0       	ldi	r25, 0x06	; 6
     61e:	d6 d2       	rcall	.+1452   	; 0xbcc <_ZN5Print7printlnERK6String>
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	c4 d5       	rcall	.+2952   	; 0x11ae <_ZN6StringD1Ev>
     626:	8b e4       	ldi	r24, 0x4B	; 75
     628:	96 e0       	ldi	r25, 0x06	; 6
     62a:	f8 d7       	rcall	.+4080   	; 0x161c <_ZN5SDLib4File5closeEv>
     62c:	10 c0       	rjmp	.+32     	; 0x64e <_Z15writeFileSDCardd6String+0xb8>
     62e:	6c e4       	ldi	r22, 0x4C	; 76
     630:	75 e0       	ldi	r23, 0x05	; 5
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	26 d6       	rcall	.+3148   	; 0x1284 <_ZN6StringC1EPKc>
     638:	b8 01       	movw	r22, r16
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	a7 d6       	rcall	.+3406   	; 0x138e <_ZplRK15StringSumHelperRK6String>
     640:	bc 01       	movw	r22, r24
     642:	86 e6       	ldi	r24, 0x66	; 102
     644:	96 e0       	ldi	r25, 0x06	; 6
     646:	c2 d2       	rcall	.+1412   	; 0xbcc <_ZN5Print7printlnERK6String>
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b0 d5       	rcall	.+2912   	; 0x11ae <_ZN6StringD1Ev>
     64e:	6b 96       	adiw	r28, 0x1b	; 27
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	08 95       	ret

0000066c <_GLOBAL__sub_I_myFile>:

#include "SDCard.h"

const int chipSelect = 53;

File myFile;
     66c:	8b e4       	ldi	r24, 0x4B	; 75
     66e:	96 e0       	ldi	r25, 0x06	; 6
     670:	75 d7       	rcall	.+3818   	; 0x155c <_ZN5SDLib4FileC1Ev>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     672:	ef e3       	ldi	r30, 0x3F	; 63
     674:	f6 e0       	ldi	r31, 0x06	; 6
     676:	15 82       	std	Z+5, r1	; 0x05
     678:	16 82       	std	Z+6, r1	; 0x06
     67a:	11 86       	std	Z+9, r1	; 0x09
     67c:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     67e:	e1 e2       	ldi	r30, 0x21	; 33
     680:	f6 e0       	ldi	r31, 0x06	; 6
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	80 83       	st	Z, r24
     68c:	91 83       	std	Z+1, r25	; 0x01
     68e:	a2 83       	std	Z+2, r26	; 0x02
     690:	b3 83       	std	Z+3, r27	; 0x03
     692:	17 8a       	std	Z+23, r1	; 0x17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     694:	e4 e0       	ldi	r30, 0x04	; 4
     696:	f6 e0       	ldi	r31, 0x06	; 6
     698:	13 82       	std	Z+3, r1	; 0x03
     69a:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     69c:	89 ed       	ldi	r24, 0xD9	; 217
     69e:	95 e0       	ldi	r25, 0x05	; 5
     6a0:	91 83       	std	Z+1, r25	; 0x01
     6a2:	80 83       	st	Z, r24
     6a4:	15 82       	std	Z+5, r1	; 0x05
     6a6:	08 95       	ret

000006a8 <setup>:
#include "SDCard.h"
#include "Anemometer.h"
#include "CLI.h"

void setup()
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <setup+0x6>
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <setup+0x8>
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6b4:	26 e0       	ldi	r18, 0x06	; 6
     6b6:	40 e8       	ldi	r20, 0x80	; 128
     6b8:	55 e2       	ldi	r21, 0x25	; 37
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	86 e6       	ldi	r24, 0x66	; 102
     6c0:	96 e0       	ldi	r25, 0x06	; 6
     6c2:	24 d1       	rcall	.+584    	; 0x90c <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	initAnemometer();
     6c4:	60 de       	rcall	.-832    	; 0x386 <_Z14initAnemometerv>
	initCLI();
     6c6:	e3 de       	rcall	.-570    	; 0x48e <_Z7initCLIv>
     6c8:	6f e3       	ldi	r22, 0x3F	; 63
	writeFileSDCard(1345, "data.txt");
     6ca:	73 e0       	ldi	r23, 0x03	; 3
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	d9 d5       	rcall	.+2994   	; 0x1284 <_ZN6StringC1EPKc>
     6d2:	ae 01       	movw	r20, r28
     6d4:	4f 5f       	subi	r20, 0xFF	; 255
     6d6:	5f 4f       	sbci	r21, 0xFF	; 255
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e2       	ldi	r23, 0x20	; 32
     6dc:	88 ea       	ldi	r24, 0xA8	; 168
     6de:	94 e4       	ldi	r25, 0x44	; 68
     6e0:	5a df       	rcall	.-332    	; 0x596 <_Z15writeFileSDCardd6String>
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	63 d5       	rcall	.+2758   	; 0x11ae <_ZN6StringD1Ev>
     6e8:	26 96       	adiw	r28, 0x06	; 6
}
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <loop>:
     6fa:	08 95       	ret

000006fc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     6fc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     6fe:	91 8d       	ldd	r25, Z+25	; 0x19
     700:	22 8d       	ldd	r18, Z+26	; 0x1a
     702:	89 2f       	mov	r24, r25
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	80 5c       	subi	r24, 0xC0	; 192
     708:	9f 4f       	sbci	r25, 0xFF	; 255
     70a:	82 1b       	sub	r24, r18
     70c:	91 09       	sbc	r25, r1
}
     70e:	8f 73       	andi	r24, 0x3F	; 63
     710:	99 27       	eor	r25, r25
     712:	08 95       	ret

00000714 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     714:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     716:	91 8d       	ldd	r25, Z+25	; 0x19
     718:	82 8d       	ldd	r24, Z+26	; 0x1a
     71a:	98 17       	cp	r25, r24
     71c:	31 f0       	breq	.+12     	; 0x72a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     71e:	82 8d       	ldd	r24, Z+26	; 0x1a
     720:	e8 0f       	add	r30, r24
     722:	f1 1d       	adc	r31, r1
     724:	85 8d       	ldd	r24, Z+29	; 0x1d
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     72e:	08 95       	ret

00000730 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     730:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     732:	91 8d       	ldd	r25, Z+25	; 0x19
     734:	82 8d       	ldd	r24, Z+26	; 0x1a
     736:	98 17       	cp	r25, r24
     738:	61 f0       	breq	.+24     	; 0x752 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     73a:	82 8d       	ldd	r24, Z+26	; 0x1a
     73c:	df 01       	movw	r26, r30
     73e:	a8 0f       	add	r26, r24
     740:	b1 1d       	adc	r27, r1
     742:	5d 96       	adiw	r26, 0x1d	; 29
     744:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     746:	92 8d       	ldd	r25, Z+26	; 0x1a
     748:	9f 5f       	subi	r25, 0xFF	; 255
     74a:	9f 73       	andi	r25, 0x3F	; 63
     74c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     756:	08 95       	ret

00000758 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     758:	fc 01       	movw	r30, r24
     75a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     75c:	44 8d       	ldd	r20, Z+28	; 0x1c
     75e:	25 2f       	mov	r18, r21
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	84 2f       	mov	r24, r20
     764:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     766:	82 1b       	sub	r24, r18
     768:	93 0b       	sbc	r25, r19
     76a:	54 17       	cp	r21, r20
     76c:	10 f0       	brcs	.+4      	; 0x772 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     76e:	cf 96       	adiw	r24, 0x3f	; 63
     770:	08 95       	ret
  return tail - head - 1;
     772:	01 97       	sbiw	r24, 0x01	; 1
}
     774:	08 95       	ret

00000776 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     776:	8e e4       	ldi	r24, 0x4E	; 78
     778:	95 e0       	ldi	r25, 0x05	; 5
     77a:	89 2b       	or	r24, r25
     77c:	39 f0       	breq	.+14     	; 0x78c <_Z14serialEventRunv+0x16>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	89 2b       	or	r24, r25
     784:	19 f0       	breq	.+6      	; 0x78c <_Z14serialEventRunv+0x16>
     786:	8a d1       	rcall	.+788    	; 0xa9c <_Z17Serial0_availablev>
     788:	81 11       	cpse	r24, r1
     78a:	25 c0       	rjmp	.+74     	; 0x7d6 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	89 2b       	or	r24, r25
     792:	41 f0       	breq	.+16     	; 0x7a4 <_Z14serialEventRunv+0x2e>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	89 2b       	or	r24, r25
     79a:	21 f0       	breq	.+8      	; 0x7a4 <_Z14serialEventRunv+0x2e>
     79c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7a0:	81 11       	cpse	r24, r1
     7a2:	1c c0       	rjmp	.+56     	; 0x7dc <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	89 2b       	or	r24, r25
     7aa:	41 f0       	breq	.+16     	; 0x7bc <_Z14serialEventRunv+0x46>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	89 2b       	or	r24, r25
     7b2:	21 f0       	breq	.+8      	; 0x7bc <_Z14serialEventRunv+0x46>
     7b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7b8:	81 11       	cpse	r24, r1
     7ba:	13 c0       	rjmp	.+38     	; 0x7e2 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	89 2b       	or	r24, r25
     7c2:	a1 f0       	breq	.+40     	; 0x7ec <_Z14serialEventRunv+0x76>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	89 2b       	or	r24, r25
     7ca:	81 f0       	breq	.+32     	; 0x7ec <_Z14serialEventRunv+0x76>
     7cc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7d0:	81 11       	cpse	r24, r1
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <_Z14serialEventRunv+0x72>
     7d4:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7da:	d8 cf       	rjmp	.-80     	; 0x78c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     7dc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7e0:	e1 cf       	rjmp	.-62     	; 0x7a4 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     7e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7e6:	ea cf       	rjmp	.-44     	; 0x7bc <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     7e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     7ec:	08 95       	ret

000007ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     7ee:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7f0:	84 8d       	ldd	r24, Z+28	; 0x1c
     7f2:	df 01       	movw	r26, r30
     7f4:	a8 0f       	add	r26, r24
     7f6:	b1 1d       	adc	r27, r1
     7f8:	a3 5a       	subi	r26, 0xA3	; 163
     7fa:	bf 4f       	sbci	r27, 0xFF	; 255
     7fc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7fe:	84 8d       	ldd	r24, Z+28	; 0x1c
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	8f 73       	andi	r24, 0x3F	; 63
     806:	99 27       	eor	r25, r25
     808:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     80a:	a6 89       	ldd	r26, Z+22	; 0x16
     80c:	b7 89       	ldd	r27, Z+23	; 0x17
     80e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     810:	a0 89       	ldd	r26, Z+16	; 0x10
     812:	b1 89       	ldd	r27, Z+17	; 0x11
     814:	8c 91       	ld	r24, X
     816:	83 70       	andi	r24, 0x03	; 3
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     81c:	93 8d       	ldd	r25, Z+27	; 0x1b
     81e:	84 8d       	ldd	r24, Z+28	; 0x1c
     820:	98 13       	cpse	r25, r24
     822:	06 c0       	rjmp	.+12     	; 0x830 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     824:	02 88       	ldd	r0, Z+18	; 0x12
     826:	f3 89       	ldd	r31, Z+19	; 0x13
     828:	e0 2d       	mov	r30, r0
     82a:	80 81       	ld	r24, Z
     82c:	8f 7d       	andi	r24, 0xDF	; 223
     82e:	80 83       	st	Z, r24
     830:	08 95       	ret

00000832 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ec 01       	movw	r28, r24
  _written = true;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     844:	9b 8d       	ldd	r25, Y+27	; 0x1b
     846:	8c 8d       	ldd	r24, Y+28	; 0x1c
     848:	98 13       	cpse	r25, r24
     84a:	05 c0       	rjmp	.+10     	; 0x856 <_ZN14HardwareSerial5writeEh+0x24>
     84c:	e8 89       	ldd	r30, Y+16	; 0x10
     84e:	f9 89       	ldd	r31, Y+17	; 0x11
     850:	80 81       	ld	r24, Z
     852:	85 fd       	sbrc	r24, 5
     854:	25 c0       	rjmp	.+74     	; 0x8a0 <_ZN14HardwareSerial5writeEh+0x6e>
     856:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     858:	0b 8d       	ldd	r16, Y+27	; 0x1b
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	0f 73       	andi	r16, 0x3F	; 63
     862:	11 27       	eor	r17, r17
     864:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     866:	8c 8d       	ldd	r24, Y+28	; 0x1c
     868:	e8 12       	cpse	r14, r24
     86a:	0b c0       	rjmp	.+22     	; 0x882 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	07 fc       	sbrc	r0, 7
     870:	fa cf       	rjmp	.-12     	; 0x866 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     872:	e8 89       	ldd	r30, Y+16	; 0x10
     874:	f9 89       	ldd	r31, Y+17	; 0x11
     876:	80 81       	ld	r24, Z
     878:	85 ff       	sbrs	r24, 5
     87a:	f5 cf       	rjmp	.-22     	; 0x866 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     87c:	ce 01       	movw	r24, r28
     87e:	b7 df       	rcall	.-146    	; 0x7ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     880:	f2 cf       	rjmp	.-28     	; 0x866 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     882:	8b 8d       	ldd	r24, Y+27	; 0x1b
     884:	fe 01       	movw	r30, r28
     886:	e8 0f       	add	r30, r24
     888:	f1 1d       	adc	r31, r1
     88a:	e3 5a       	subi	r30, 0xA3	; 163
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     890:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     892:	f8 94       	cli
    _tx_buffer_head = i;
     894:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     896:	ea 89       	ldd	r30, Y+18	; 0x12
     898:	fb 89       	ldd	r31, Y+19	; 0x13
     89a:	80 81       	ld	r24, Z
     89c:	80 62       	ori	r24, 0x20	; 32
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8a0:	9f b7       	in	r25, 0x3f	; 63
     8a2:	f8 94       	cli
      *_udr = c;
     8a4:	ee 89       	ldd	r30, Y+22	; 0x16
     8a6:	ff 89       	ldd	r31, Y+23	; 0x17
     8a8:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8aa:	e8 89       	ldd	r30, Y+16	; 0x10
     8ac:	f9 89       	ldd	r31, Y+17	; 0x11
     8ae:	80 81       	ld	r24, Z
     8b0:	83 70       	andi	r24, 0x03	; 3
     8b2:	80 64       	ori	r24, 0x40	; 64
     8b4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8b6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     8d0:	88 8d       	ldd	r24, Y+24	; 0x18
     8d2:	88 23       	and	r24, r24
     8d4:	c1 f0       	breq	.+48     	; 0x906 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     8d6:	ea 89       	ldd	r30, Y+18	; 0x12
     8d8:	fb 89       	ldd	r31, Y+19	; 0x13
     8da:	80 81       	ld	r24, Z
     8dc:	85 fd       	sbrc	r24, 5
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <_ZN14HardwareSerial5flushEv+0x20>
     8e0:	a8 89       	ldd	r26, Y+16	; 0x10
     8e2:	b9 89       	ldd	r27, Y+17	; 0x11
     8e4:	8c 91       	ld	r24, X
     8e6:	86 fd       	sbrc	r24, 6
     8e8:	0e c0       	rjmp	.+28     	; 0x906 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	07 fc       	sbrc	r0, 7
     8ee:	f5 cf       	rjmp	.-22     	; 0x8da <_ZN14HardwareSerial5flushEv+0x10>
     8f0:	80 81       	ld	r24, Z
     8f2:	85 ff       	sbrs	r24, 5
     8f4:	f2 cf       	rjmp	.-28     	; 0x8da <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     8f6:	a8 89       	ldd	r26, Y+16	; 0x10
     8f8:	b9 89       	ldd	r27, Y+17	; 0x11
     8fa:	8c 91       	ld	r24, X
     8fc:	85 ff       	sbrs	r24, 5
     8fe:	ed cf       	rjmp	.-38     	; 0x8da <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     900:	ce 01       	movw	r24, r28
     902:	75 df       	rcall	.-278    	; 0x7ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     904:	e8 cf       	rjmp	.-48     	; 0x8d6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	6a 01       	movw	r12, r20
     91e:	7b 01       	movw	r14, r22
     920:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     922:	e8 89       	ldd	r30, Y+16	; 0x10
     924:	f9 89       	ldd	r31, Y+17	; 0x11
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     92a:	41 15       	cp	r20, r1
     92c:	51 4e       	sbci	r21, 0xE1	; 225
     92e:	61 05       	cpc	r22, r1
     930:	71 05       	cpc	r23, r1
     932:	b1 f0       	breq	.+44     	; 0x960 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	79 e0       	ldi	r23, 0x09	; 9
     938:	8d e3       	ldi	r24, 0x3D	; 61
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a7 01       	movw	r20, r14
     93e:	96 01       	movw	r18, r12
     940:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__udivmodsi4>
     944:	da 01       	movw	r26, r20
     946:	c9 01       	movw	r24, r18
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	a1 09       	sbc	r26, r1
     94c:	b1 09       	sbc	r27, r1
     94e:	b6 95       	lsr	r27
     950:	a7 95       	ror	r26
     952:	97 95       	ror	r25
     954:	87 95       	ror	r24
     956:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     958:	21 15       	cp	r18, r1
     95a:	80 e1       	ldi	r24, 0x10	; 16
     95c:	38 07       	cpc	r19, r24
     95e:	a8 f0       	brcs	.+42     	; 0x98a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     960:	e8 89       	ldd	r30, Y+16	; 0x10
     962:	f9 89       	ldd	r31, Y+17	; 0x11
     964:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     966:	60 e8       	ldi	r22, 0x80	; 128
     968:	74 e8       	ldi	r23, 0x84	; 132
     96a:	8e e1       	ldi	r24, 0x1E	; 30
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a7 01       	movw	r20, r14
     970:	96 01       	movw	r18, r12
     972:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__udivmodsi4>
     976:	da 01       	movw	r26, r20
     978:	c9 01       	movw	r24, r18
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	a1 09       	sbc	r26, r1
     97e:	b1 09       	sbc	r27, r1
     980:	b6 95       	lsr	r27
     982:	a7 95       	ror	r26
     984:	97 95       	ror	r25
     986:	87 95       	ror	r24
     988:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     98a:	ec 85       	ldd	r30, Y+12	; 0x0c
     98c:	fd 85       	ldd	r31, Y+13	; 0x0d
     98e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     990:	ee 85       	ldd	r30, Y+14	; 0x0e
     992:	ff 85       	ldd	r31, Y+15	; 0x0f
     994:	20 83       	st	Z, r18

  _written = false;
     996:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     998:	ec 89       	ldd	r30, Y+20	; 0x14
     99a:	fd 89       	ldd	r31, Y+21	; 0x15
     99c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     99e:	ea 89       	ldd	r30, Y+18	; 0x12
     9a0:	fb 89       	ldd	r31, Y+19	; 0x13
     9a2:	80 81       	ld	r24, Z
     9a4:	80 61       	ori	r24, 0x10	; 16
     9a6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     9a8:	ea 89       	ldd	r30, Y+18	; 0x12
     9aa:	fb 89       	ldd	r31, Y+19	; 0x13
     9ac:	80 81       	ld	r24, Z
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     9b2:	ea 89       	ldd	r30, Y+18	; 0x12
     9b4:	fb 89       	ldd	r31, Y+19	; 0x13
     9b6:	80 81       	ld	r24, Z
     9b8:	80 68       	ori	r24, 0x80	; 128
     9ba:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     9bc:	ea 89       	ldd	r30, Y+18	; 0x12
     9be:	fb 89       	ldd	r31, Y+19	; 0x13
     9c0:	80 81       	ld	r24, Z
     9c2:	8f 7d       	andi	r24, 0xDF	; 223
     9c4:	80 83       	st	Z, r24
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	08 95       	ret

000009dc <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     9dc:	08 95       	ret

000009de <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	0b b6       	in	r0, 0x3b	; 59
     9ea:	0f 92       	push	r0
     9ec:	2f 93       	push	r18
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     9f6:	e0 91 76 06 	lds	r30, 0x0676	; 0x800676 <Serial+0x10>
     9fa:	f0 91 77 06 	lds	r31, 0x0677	; 0x800677 <Serial+0x11>
     9fe:	80 81       	ld	r24, Z
     a00:	e0 91 7c 06 	lds	r30, 0x067C	; 0x80067c <Serial+0x16>
     a04:	f0 91 7d 06 	lds	r31, 0x067D	; 0x80067d <Serial+0x17>
     a08:	82 fd       	sbrc	r24, 2
     a0a:	12 c0       	rjmp	.+36     	; 0xa30 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a0c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a0e:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <Serial+0x19>
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     a16:	20 91 80 06 	lds	r18, 0x0680	; 0x800680 <Serial+0x1a>
     a1a:	82 17       	cp	r24, r18
     a1c:	51 f0       	breq	.+20     	; 0xa32 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     a1e:	e0 91 7f 06 	lds	r30, 0x067F	; 0x80067f <Serial+0x19>
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ea 59       	subi	r30, 0x9A	; 154
     a26:	f9 4f       	sbci	r31, 0xF9	; 249
     a28:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     a2a:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <Serial+0x19>
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     a30:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0b be       	out	0x3b, r0	; 59
     a40:	0f 90       	pop	r0
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	0f 90       	pop	r0
     a46:	1f 90       	pop	r1
     a48:	18 95       	reti

00000a4a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a4a:	1f 92       	push	r1
     a4c:	0f 92       	push	r0
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	0f 92       	push	r0
     a52:	11 24       	eor	r1, r1
     a54:	0b b6       	in	r0, 0x3b	; 59
     a56:	0f 92       	push	r0
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a70:	86 e6       	ldi	r24, 0x66	; 102
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	bc de       	rcall	.-648    	; 0x7ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a76:	ff 91       	pop	r31
     a78:	ef 91       	pop	r30
     a7a:	bf 91       	pop	r27
     a7c:	af 91       	pop	r26
     a7e:	9f 91       	pop	r25
     a80:	8f 91       	pop	r24
     a82:	7f 91       	pop	r23
     a84:	6f 91       	pop	r22
     a86:	5f 91       	pop	r21
     a88:	4f 91       	pop	r20
     a8a:	3f 91       	pop	r19
     a8c:	2f 91       	pop	r18
     a8e:	0f 90       	pop	r0
     a90:	0b be       	out	0x3b, r0	; 59
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a9c:	86 e6       	ldi	r24, 0x66	; 102
     a9e:	96 e0       	ldi	r25, 0x06	; 6
     aa0:	2d de       	rcall	.-934    	; 0x6fc <_ZN14HardwareSerial9availableEv>
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	89 2b       	or	r24, r25
     aa6:	09 f4       	brne	.+2      	; 0xaaa <_Z17Serial0_availablev+0xe>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
}
     aaa:	82 2f       	mov	r24, r18
     aac:	08 95       	ret

00000aae <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     aae:	e6 e6       	ldi	r30, 0x66	; 102
     ab0:	f6 e0       	ldi	r31, 0x06	; 6
     ab2:	13 82       	std	Z+3, r1	; 0x03
     ab4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     ab6:	88 ee       	ldi	r24, 0xE8	; 232
     ab8:	93 e0       	ldi	r25, 0x03	; 3
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	84 83       	std	Z+4, r24	; 0x04
     ac0:	95 83       	std	Z+5, r25	; 0x05
     ac2:	a6 83       	std	Z+6, r26	; 0x06
     ac4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ac6:	84 ea       	ldi	r24, 0xA4	; 164
     ac8:	95 e0       	ldi	r25, 0x05	; 5
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	85 ec       	ldi	r24, 0xC5	; 197
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	95 87       	std	Z+13, r25	; 0x0d
     ad4:	84 87       	std	Z+12, r24	; 0x0c
     ad6:	84 ec       	ldi	r24, 0xC4	; 196
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	97 87       	std	Z+15, r25	; 0x0f
     adc:	86 87       	std	Z+14, r24	; 0x0e
     ade:	80 ec       	ldi	r24, 0xC0	; 192
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	91 8b       	std	Z+17, r25	; 0x11
     ae4:	80 8b       	std	Z+16, r24	; 0x10
     ae6:	81 ec       	ldi	r24, 0xC1	; 193
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	93 8b       	std	Z+19, r25	; 0x13
     aec:	82 8b       	std	Z+18, r24	; 0x12
     aee:	82 ec       	ldi	r24, 0xC2	; 194
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	95 8b       	std	Z+21, r25	; 0x15
     af4:	84 8b       	std	Z+20, r24	; 0x14
     af6:	86 ec       	ldi	r24, 0xC6	; 198
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	97 8b       	std	Z+23, r25	; 0x17
     afc:	86 8b       	std	Z+22, r24	; 0x16
     afe:	11 8e       	std	Z+25, r1	; 0x19
     b00:	12 8e       	std	Z+26, r1	; 0x1a
     b02:	13 8e       	std	Z+27, r1	; 0x1b
     b04:	14 8e       	std	Z+28, r1	; 0x1c
     b06:	08 95       	ret

00000b08 <initVariant>:
     b08:	08 95       	ret

00000b0a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     b0a:	2f d2       	rcall	.+1118   	; 0xf6a <init>

	initVariant();
     b0c:	fd df       	rcall	.-6      	; 0xb08 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     b0e:	cc dd       	rcall	.-1128   	; 0x6a8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b10:	cb eb       	ldi	r28, 0xBB	; 187
     b12:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     b14:	f2 dd       	rcall	.-1052   	; 0x6fa <loop>
		if (serialEventRun) serialEventRun();
     b16:	20 97       	sbiw	r28, 0x00	; 0
     b18:	e9 f3       	breq	.-6      	; 0xb14 <main+0xa>
     b1a:	2d de       	rcall	.-934    	; 0x776 <_Z14serialEventRunv>
     b1c:	fb cf       	rjmp	.-10     	; 0xb14 <main+0xa>

00000b1e <_ZN5Print5writeEPKhj>:
     b1e:	cf 92       	push	r12
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	6c 01       	movw	r12, r24
     b30:	7a 01       	movw	r14, r20
     b32:	8b 01       	movw	r16, r22
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	ce 15       	cp	r28, r14
     b3a:	df 05       	cpc	r29, r15
     b3c:	81 f0       	breq	.+32     	; 0xb5e <_ZN5Print5writeEPKhj+0x40>
     b3e:	d8 01       	movw	r26, r16
     b40:	6d 91       	ld	r22, X+
     b42:	8d 01       	movw	r16, r26
     b44:	d6 01       	movw	r26, r12
     b46:	ed 91       	ld	r30, X+
     b48:	fc 91       	ld	r31, X
     b4a:	01 90       	ld	r0, Z+
     b4c:	f0 81       	ld	r31, Z
     b4e:	e0 2d       	mov	r30, r0
     b50:	c6 01       	movw	r24, r12
     b52:	19 95       	eicall
     b54:	89 2b       	or	r24, r25
     b56:	11 f0       	breq	.+4      	; 0xb5c <_ZN5Print5writeEPKhj+0x3e>
     b58:	21 96       	adiw	r28, 0x01	; 1
     b5a:	ee cf       	rjmp	.-36     	; 0xb38 <_ZN5Print5writeEPKhj+0x1a>
     b5c:	7e 01       	movw	r14, r28
     b5e:	c7 01       	movw	r24, r14
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <_ZN5Print5writeEPKc>:
     b72:	61 15       	cp	r22, r1
     b74:	71 05       	cpc	r23, r1
     b76:	79 f0       	breq	.+30     	; 0xb96 <_ZN5Print5writeEPKc+0x24>
     b78:	fb 01       	movw	r30, r22
     b7a:	01 90       	ld	r0, Z+
     b7c:	00 20       	and	r0, r0
     b7e:	e9 f7       	brne	.-6      	; 0xb7a <_ZN5Print5writeEPKc+0x8>
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	af 01       	movw	r20, r30
     b84:	46 1b       	sub	r20, r22
     b86:	57 0b       	sbc	r21, r23
     b88:	dc 01       	movw	r26, r24
     b8a:	ed 91       	ld	r30, X+
     b8c:	fc 91       	ld	r31, X
     b8e:	02 80       	ldd	r0, Z+2	; 0x02
     b90:	f3 81       	ldd	r31, Z+3	; 0x03
     b92:	e0 2d       	mov	r30, r0
     b94:	19 94       	eijmp
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	08 95       	ret

00000b9c <_ZN5Print5printERK6String>:
     b9c:	db 01       	movw	r26, r22
     b9e:	14 96       	adiw	r26, 0x04	; 4
     ba0:	4d 91       	ld	r20, X+
     ba2:	5c 91       	ld	r21, X
     ba4:	15 97       	sbiw	r26, 0x05	; 5
     ba6:	6d 91       	ld	r22, X+
     ba8:	7c 91       	ld	r23, X
     baa:	dc 01       	movw	r26, r24
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	02 80       	ldd	r0, Z+2	; 0x02
     bb2:	f3 81       	ldd	r31, Z+3	; 0x03
     bb4:	e0 2d       	mov	r30, r0
     bb6:	19 94       	eijmp

00000bb8 <_ZN5Print5printEc>:
     bb8:	dc 01       	movw	r26, r24
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	01 90       	ld	r0, Z+
     bc0:	f0 81       	ld	r31, Z
     bc2:	e0 2d       	mov	r30, r0
     bc4:	19 94       	eijmp

00000bc6 <_ZN5Print7printlnEv>:
     bc6:	62 eb       	ldi	r22, 0xB2	; 178
     bc8:	75 e0       	ldi	r23, 0x05	; 5
     bca:	d3 cf       	rjmp	.-90     	; 0xb72 <_ZN5Print5writeEPKc>

00000bcc <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
  size_t n = print(s);
     bd6:	e2 df       	rcall	.-60     	; 0xb9c <_ZN5Print5printERK6String>
     bd8:	8c 01       	movw	r16, r24
  n += println();
     bda:	ce 01       	movw	r24, r28
     bdc:	f4 df       	rcall	.-24     	; 0xbc6 <_ZN5Print7printlnEv>
  return n;
}
     bde:	80 0f       	add	r24, r16
     be0:	91 1f       	adc	r25, r17
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bf6:	bd df       	rcall	.-134    	; 0xb72 <_ZN5Print5writeEPKc>
     bf8:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     bfa:	ce 01       	movw	r24, r28
     bfc:	e4 df       	rcall	.-56     	; 0xbc6 <_ZN5Print7printlnEv>
  return n;
}
     bfe:	80 0f       	add	r24, r16
     c00:	91 1f       	adc	r25, r17
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     c0c:	08 95       	ret

00000c0e <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
     c38:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
     c3c:	19 95       	eicall
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	7f 91       	pop	r23
     c4c:	6f 91       	pop	r22
     c4e:	5f 91       	pop	r21
     c50:	4f 91       	pop	r20
     c52:	3f 91       	pop	r19
     c54:	2f 91       	pop	r18
     c56:	0f 90       	pop	r0
     c58:	0b be       	out	0x3b, r0	; 59
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	0b b6       	in	r0, 0x3b	; 59
     c70:	0f 92       	push	r0
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
     c8e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
     c92:	19 95       	eicall
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0b be       	out	0x3b, r0	; 59
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     cba:	1f 92       	push	r1
     cbc:	0f 92       	push	r0
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	0b b6       	in	r0, 0x3b	; 59
     cc6:	0f 92       	push	r0
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
     ce0:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
     ce4:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
     ce8:	19 95       	eicall
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	0b b6       	in	r0, 0x3b	; 59
     d1c:	0f 92       	push	r0
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
     d36:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
     d3a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
     d3e:	19 95       	eicall
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	7f 91       	pop	r23
     d4e:	6f 91       	pop	r22
     d50:	5f 91       	pop	r21
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0b be       	out	0x3b, r0	; 59
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	0b b6       	in	r0, 0x3b	; 59
     d72:	0f 92       	push	r0
     d74:	2f 93       	push	r18
     d76:	3f 93       	push	r19
     d78:	4f 93       	push	r20
     d7a:	5f 93       	push	r21
     d7c:	6f 93       	push	r22
     d7e:	7f 93       	push	r23
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
     d8c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
     d90:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
     d94:	19 95       	eicall
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	0b b6       	in	r0, 0x3b	; 59
     dc8:	0f 92       	push	r0
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
     de6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
     dea:	19 95       	eicall
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0b be       	out	0x3b, r0	; 59
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	0b b6       	in	r0, 0x3b	; 59
     e1e:	0f 92       	push	r0
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
     e3c:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
     e40:	19 95       	eicall
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0b be       	out	0x3b, r0	; 59
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	0b b6       	in	r0, 0x3b	; 59
     e74:	0f 92       	push	r0
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
     e8e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
     e92:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
     e96:	19 95       	eicall
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <timer0_millis>
     ed8:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <timer0_millis+0x1>
     edc:	a0 91 06 07 	lds	r26, 0x0706	; 0x800706 <timer0_millis+0x2>
     ee0:	b0 91 07 07 	lds	r27, 0x0707	; 0x800707 <timer0_millis+0x3>
     ee4:	30 91 03 07 	lds	r19, 0x0703	; 0x800703 <timer0_fract>
     ee8:	23 e0       	ldi	r18, 0x03	; 3
     eea:	23 0f       	add	r18, r19
     eec:	2d 37       	cpi	r18, 0x7D	; 125
     eee:	20 f4       	brcc	.+8      	; 0xef8 <__vector_23+0x3a>
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	a1 1d       	adc	r26, r1
     ef4:	b1 1d       	adc	r27, r1
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <__vector_23+0x44>
     ef8:	26 e8       	ldi	r18, 0x86	; 134
     efa:	23 0f       	add	r18, r19
     efc:	02 96       	adiw	r24, 0x02	; 2
     efe:	a1 1d       	adc	r26, r1
     f00:	b1 1d       	adc	r27, r1
     f02:	20 93 03 07 	sts	0x0703, r18	; 0x800703 <timer0_fract>
     f06:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <timer0_millis>
     f0a:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <timer0_millis+0x1>
     f0e:	a0 93 06 07 	sts	0x0706, r26	; 0x800706 <timer0_millis+0x2>
     f12:	b0 93 07 07 	sts	0x0707, r27	; 0x800707 <timer0_millis+0x3>
     f16:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <timer0_overflow_count>
     f1a:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <timer0_overflow_count+0x1>
     f1e:	a0 91 0a 07 	lds	r26, 0x070A	; 0x80070a <timer0_overflow_count+0x2>
     f22:	b0 91 0b 07 	lds	r27, 0x070B	; 0x80070b <timer0_overflow_count+0x3>
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	a1 1d       	adc	r26, r1
     f2a:	b1 1d       	adc	r27, r1
     f2c:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <timer0_overflow_count>
     f30:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <timer0_overflow_count+0x1>
     f34:	a0 93 0a 07 	sts	0x070A, r26	; 0x80070a <timer0_overflow_count+0x2>
     f38:	b0 93 0b 07 	sts	0x070B, r27	; 0x80070b <timer0_overflow_count+0x3>
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <millis>:
     f52:	2f b7       	in	r18, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	60 91 04 07 	lds	r22, 0x0704	; 0x800704 <timer0_millis>
     f5a:	70 91 05 07 	lds	r23, 0x0705	; 0x800705 <timer0_millis+0x1>
     f5e:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <timer0_millis+0x2>
     f62:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <timer0_millis+0x3>
     f66:	2f bf       	out	0x3f, r18	; 63
     f68:	08 95       	ret

00000f6a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f6a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f6c:	84 b5       	in	r24, 0x24	; 36
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f72:	84 b5       	in	r24, 0x24	; 36
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f78:	85 b5       	in	r24, 0x25	; 37
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f7e:	85 b5       	in	r24, 0x25	; 37
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f84:	ee e6       	ldi	r30, 0x6E	; 110
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	81 60       	ori	r24, 0x01	; 1
     f8c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f8e:	e1 e8       	ldi	r30, 0x81	; 129
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f94:	80 81       	ld	r24, Z
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f9a:	80 81       	ld	r24, Z
     f9c:	81 60       	ori	r24, 0x01	; 1
     f9e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     fa0:	e0 e8       	ldi	r30, 0x80	; 128
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     faa:	e1 eb       	ldi	r30, 0xB1	; 177
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     fb4:	e0 eb       	ldi	r30, 0xB0	; 176
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	81 60       	ori	r24, 0x01	; 1
     fbc:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     fbe:	e1 e9       	ldi	r30, 0x91	; 145
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     fce:	e0 e9       	ldi	r30, 0x90	; 144
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     fd8:	e1 ea       	ldi	r30, 0xA1	; 161
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     fe8:	e0 ea       	ldi	r30, 0xA0	; 160
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     ff2:	e1 e2       	ldi	r30, 0x21	; 33
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	80 81       	ld	r24, Z
     ff8:	82 60       	ori	r24, 0x02	; 2
     ffa:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     ffc:	80 81       	ld	r24, Z
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1002:	e0 e2       	ldi	r30, 0x20	; 32
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	80 81       	ld	r24, Z
    1008:	81 60       	ori	r24, 0x01	; 1
    100a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    100c:	ea e7       	ldi	r30, 0x7A	; 122
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    101c:	80 81       	ld	r24, Z
    101e:	81 60       	ori	r24, 0x01	; 1
    1020:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1022:	80 81       	ld	r24, Z
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1028:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    102c:	08 95       	ret

0000102e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	e2 31       	cpi	r30, 0x12	; 18
    1036:	f1 05       	cpc	r31, r1
    1038:	08 f0       	brcs	.+2      	; 0x103c <turnOffPWM+0xe>
    103a:	4e c0       	rjmp	.+156    	; 0x10d8 <turnOffPWM+0xaa>
    103c:	88 27       	eor	r24, r24
    103e:	ee 58       	subi	r30, 0x8E	; 142
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	8f 4f       	sbci	r24, 0xFF	; 255
    1044:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1048:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    104c:	8f 77       	andi	r24, 0x7F	; 127
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1050:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1054:	8f 7d       	andi	r24, 0xDF	; 223
    1056:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    105a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    105c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	f9 cf       	rjmp	.-14     	; 0x1056 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1064:	84 b5       	in	r24, 0x24	; 36
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	02 c0       	rjmp	.+4      	; 0x106e <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    106a:	84 b5       	in	r24, 0x24	; 36
    106c:	8f 7d       	andi	r24, 0xDF	; 223
    106e:	84 bd       	out	0x24, r24	; 36
    1070:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1072:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1076:	8f 77       	andi	r24, 0x7F	; 127
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    107a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    107e:	8f 7d       	andi	r24, 0xDF	; 223
    1080:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1084:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1086:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    108a:	8f 77       	andi	r24, 0x7F	; 127
    108c:	07 c0       	rjmp	.+14     	; 0x109c <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    108e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1092:	8f 7d       	andi	r24, 0xDF	; 223
    1094:	03 c0       	rjmp	.+6      	; 0x109c <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1096:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    109a:	87 7f       	andi	r24, 0xF7	; 247
    109c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10a0:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    10a2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    10aa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10ae:	8f 7d       	andi	r24, 0xDF	; 223
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    10b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10b6:	87 7f       	andi	r24, 0xF7	; 247
    10b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10bc:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    10be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    10c2:	8f 77       	andi	r24, 0x7F	; 127
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    10c6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    10ca:	8f 7d       	andi	r24, 0xDF	; 223
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    10ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    10d2:	87 7f       	andi	r24, 0xF7	; 247
    10d4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    10d8:	08 95       	ret

000010da <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	fc 01       	movw	r30, r24
    10e2:	e8 5b       	subi	r30, 0xB8	; 184
    10e4:	fd 4f       	sbci	r31, 0xFD	; 253
    10e6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 57       	subi	r30, 0x72	; 114
    10ec:	fd 4f       	sbci	r31, 0xFD	; 253
    10ee:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    10f0:	88 23       	and	r24, r24
    10f2:	61 f1       	breq	.+88     	; 0x114c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 51       	subi	r30, 0x12	; 18
    10fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1100:	c5 91       	lpm	r28, Z+
    1102:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1104:	fc 01       	movw	r30, r24
    1106:	ec 52       	subi	r30, 0x2C	; 44
    1108:	fd 4f       	sbci	r31, 0xFD	; 253
    110a:	a5 91       	lpm	r26, Z+
    110c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    110e:	61 11       	cpse	r22, r1
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1112:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1114:	f8 94       	cli
		*reg &= ~bit;
    1116:	88 81       	ld	r24, Y
    1118:	20 95       	com	r18
    111a:	82 23       	and	r24, r18
    111c:	88 83       	st	Y, r24
		*out &= ~bit;
    111e:	ec 91       	ld	r30, X
    1120:	2e 23       	and	r18, r30
    1122:	0b c0       	rjmp	.+22     	; 0x113a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1124:	62 30       	cpi	r22, 0x02	; 2
    1126:	61 f4       	brne	.+24     	; 0x1140 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1128:	9f b7       	in	r25, 0x3f	; 63
                cli();
    112a:	f8 94       	cli
		*reg &= ~bit;
    112c:	88 81       	ld	r24, Y
    112e:	32 2f       	mov	r19, r18
    1130:	30 95       	com	r19
    1132:	83 23       	and	r24, r19
    1134:	88 83       	st	Y, r24
		*out |= bit;
    1136:	ec 91       	ld	r30, X
    1138:	2e 2b       	or	r18, r30
    113a:	2c 93       	st	X, r18
		SREG = oldSREG;
    113c:	9f bf       	out	0x3f, r25	; 63
    113e:	06 c0       	rjmp	.+12     	; 0x114c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1140:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1142:	f8 94       	cli
		*reg |= bit;
    1144:	e8 81       	ld	r30, Y
    1146:	2e 2b       	or	r18, r30
    1148:	28 83       	st	Y, r18
		SREG = oldSREG;
    114a:	8f bf       	out	0x3f, r24	; 63
	}
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	f9 01       	movw	r30, r18
    115e:	ee 5f       	subi	r30, 0xFE	; 254
    1160:	fd 4f       	sbci	r31, 0xFD	; 253
    1162:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1164:	f9 01       	movw	r30, r18
    1166:	e8 5b       	subi	r30, 0xB8	; 184
    1168:	fd 4f       	sbci	r31, 0xFD	; 253
    116a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    116c:	f9 01       	movw	r30, r18
    116e:	e2 57       	subi	r30, 0x72	; 114
    1170:	fd 4f       	sbci	r31, 0xFD	; 253
    1172:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1174:	cc 23       	and	r28, r28
    1176:	b9 f0       	breq	.+46     	; 0x11a6 <digitalWrite+0x54>
    1178:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    117a:	81 11       	cpse	r24, r1
    117c:	58 df       	rcall	.-336    	; 0x102e <turnOffPWM>

	out = portOutputRegister(port);
    117e:	ec 2f       	mov	r30, r28
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	ec 52       	subi	r30, 0x2C	; 44
    1188:	fd 4f       	sbci	r31, 0xFD	; 253
    118a:	a5 91       	lpm	r26, Z+
    118c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    118e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1190:	f8 94       	cli

	if (val == LOW) {
    1192:	11 11       	cpse	r17, r1
    1194:	04 c0       	rjmp	.+8      	; 0x119e <digitalWrite+0x4c>
		*out &= ~bit;
    1196:	8c 91       	ld	r24, X
    1198:	d0 95       	com	r29
    119a:	d8 23       	and	r29, r24
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    119e:	ec 91       	ld	r30, X
    11a0:	de 2b       	or	r29, r30
    11a2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11a4:	9f bf       	out	0x3f, r25	; 63
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	08 95       	ret

000011ae <_ZN6StringD1Ev>:
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <free>

000011b8 <_ZN6String10invalidateEv>:
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
    11be:	88 81       	ld	r24, Y
    11c0:	99 81       	ldd	r25, Y+1	; 0x01
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	11 f0       	breq	.+4      	; 0x11ca <_ZN6String10invalidateEv+0x12>
    11c6:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <free>
    11ca:	19 82       	std	Y+1, r1	; 0x01
    11cc:	18 82       	st	Y, r1
    11ce:	1d 82       	std	Y+5, r1	; 0x05
    11d0:	1c 82       	std	Y+4, r1	; 0x04
    11d2:	1b 82       	std	Y+3, r1	; 0x03
    11d4:	1a 82       	std	Y+2, r1	; 0x02
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <_ZN6String12changeBufferEj>:
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	ec 01       	movw	r28, r24
    11e6:	8b 01       	movw	r16, r22
    11e8:	6f 5f       	subi	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	88 81       	ld	r24, Y
    11ee:	99 81       	ldd	r25, Y+1	; 0x01
    11f0:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <realloc>
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	31 f0       	breq	.+12     	; 0x1204 <_ZN6String12changeBufferEj+0x28>
    11f8:	99 83       	std	Y+1, r25	; 0x01
    11fa:	88 83       	st	Y, r24
    11fc:	1b 83       	std	Y+3, r17	; 0x03
    11fe:	0a 83       	std	Y+2, r16	; 0x02
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <_ZN6String12changeBufferEj+0x2a>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <_ZN6String7reserveEj>:
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	88 81       	ld	r24, Y
    1218:	99 81       	ldd	r25, Y+1	; 0x01
    121a:	89 2b       	or	r24, r25
    121c:	29 f0       	breq	.+10     	; 0x1228 <_ZN6String7reserveEj+0x18>
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	9b 81       	ldd	r25, Y+3	; 0x03
    1222:	86 17       	cp	r24, r22
    1224:	97 07       	cpc	r25, r23
    1226:	58 f4       	brcc	.+22     	; 0x123e <_ZN6String7reserveEj+0x2e>
    1228:	ce 01       	movw	r24, r28
    122a:	d8 df       	rcall	.-80     	; 0x11dc <_ZN6String12changeBufferEj>
    122c:	88 23       	and	r24, r24
    122e:	41 f0       	breq	.+16     	; 0x1240 <_ZN6String7reserveEj+0x30>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	89 2b       	or	r24, r25
    1236:	19 f4       	brne	.+6      	; 0x123e <_ZN6String7reserveEj+0x2e>
    1238:	e8 81       	ld	r30, Y
    123a:	f9 81       	ldd	r31, Y+1	; 0x01
    123c:	10 82       	st	Z, r1
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <_ZN6String4copyEPKcj>:
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	7b 01       	movw	r14, r22
    1256:	8a 01       	movw	r16, r20
    1258:	ba 01       	movw	r22, r20
    125a:	da df       	rcall	.-76     	; 0x1210 <_ZN6String7reserveEj>
    125c:	81 11       	cpse	r24, r1
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <_ZN6String4copyEPKcj+0x20>
    1260:	ce 01       	movw	r24, r28
    1262:	aa df       	rcall	.-172    	; 0x11b8 <_ZN6String10invalidateEv>
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <_ZN6String4copyEPKcj+0x2e>
    1266:	1d 83       	std	Y+5, r17	; 0x05
    1268:	0c 83       	std	Y+4, r16	; 0x04
    126a:	b7 01       	movw	r22, r14
    126c:	88 81       	ld	r24, Y
    126e:	99 81       	ldd	r25, Y+1	; 0x01
    1270:	0e 94 75 1e 	call	0x3cea	; 0x3cea <strcpy>
    1274:	ce 01       	movw	r24, r28
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	08 95       	ret

00001284 <_ZN6StringC1EPKc>:
    1284:	fc 01       	movw	r30, r24
    1286:	11 82       	std	Z+1, r1	; 0x01
    1288:	10 82       	st	Z, r1
    128a:	13 82       	std	Z+3, r1	; 0x03
    128c:	12 82       	std	Z+2, r1	; 0x02
    128e:	15 82       	std	Z+5, r1	; 0x05
    1290:	14 82       	std	Z+4, r1	; 0x04
    1292:	61 15       	cp	r22, r1
    1294:	71 05       	cpc	r23, r1
    1296:	49 f0       	breq	.+18     	; 0x12aa <_ZN6StringC1EPKc+0x26>
    1298:	fb 01       	movw	r30, r22
    129a:	01 90       	ld	r0, Z+
    129c:	00 20       	and	r0, r0
    129e:	e9 f7       	brne	.-6      	; 0x129a <_ZN6StringC1EPKc+0x16>
    12a0:	31 97       	sbiw	r30, 0x01	; 1
    12a2:	af 01       	movw	r20, r30
    12a4:	46 1b       	sub	r20, r22
    12a6:	57 0b       	sbc	r21, r23
    12a8:	ce cf       	rjmp	.-100    	; 0x1246 <_ZN6String4copyEPKcj>
    12aa:	08 95       	ret

000012ac <_ZN6StringaSEPKc>:
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	ec 01       	movw	r28, r24
    12b2:	61 15       	cp	r22, r1
    12b4:	71 05       	cpc	r23, r1
    12b6:	51 f0       	breq	.+20     	; 0x12cc <_ZN6StringaSEPKc+0x20>
    12b8:	fb 01       	movw	r30, r22
    12ba:	01 90       	ld	r0, Z+
    12bc:	00 20       	and	r0, r0
    12be:	e9 f7       	brne	.-6      	; 0x12ba <_ZN6StringaSEPKc+0xe>
    12c0:	31 97       	sbiw	r30, 0x01	; 1
    12c2:	af 01       	movw	r20, r30
    12c4:	46 1b       	sub	r20, r22
    12c6:	57 0b       	sbc	r21, r23
    12c8:	be df       	rcall	.-132    	; 0x1246 <_ZN6String4copyEPKcj>
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <_ZN6StringaSEPKc+0x22>
    12cc:	75 df       	rcall	.-278    	; 0x11b8 <_ZN6String10invalidateEv>
    12ce:	ce 01       	movw	r24, r28
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <_ZN6StringC1Edh>:
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	a1 97       	sbiw	r28, 0x21	; 33
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	7c 01       	movw	r14, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	ba 01       	movw	r22, r20
    12f8:	f7 01       	movw	r30, r14
    12fa:	11 82       	std	Z+1, r1	; 0x01
    12fc:	10 82       	st	Z, r1
    12fe:	13 82       	std	Z+3, r1	; 0x03
    1300:	12 82       	std	Z+2, r1	; 0x02
    1302:	15 82       	std	Z+5, r1	; 0x05
    1304:	14 82       	std	Z+4, r1	; 0x04
    1306:	42 e0       	ldi	r20, 0x02	; 2
    1308:	42 0f       	add	r20, r18
    130a:	8e 01       	movw	r16, r28
    130c:	0f 5f       	subi	r16, 0xFF	; 255
    130e:	1f 4f       	sbci	r17, 0xFF	; 255
    1310:	0e 94 2b 1c 	call	0x3856	; 0x3856 <dtostrf>
    1314:	bc 01       	movw	r22, r24
    1316:	c7 01       	movw	r24, r14
    1318:	c9 df       	rcall	.-110    	; 0x12ac <_ZN6StringaSEPKc>
    131a:	a1 96       	adiw	r28, 0x21	; 33
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	08 95       	ret

00001334 <_ZN6String6concatEPKcj>:
    1334:	ef 92       	push	r14
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	61 15       	cp	r22, r1
    1342:	71 05       	cpc	r23, r1
    1344:	11 f4       	brne	.+4      	; 0x134a <_ZN6String6concatEPKcj+0x16>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	1b c0       	rjmp	.+54     	; 0x1380 <_ZN6String6concatEPKcj+0x4c>
    134a:	41 15       	cp	r20, r1
    134c:	51 05       	cpc	r21, r1
    134e:	b9 f0       	breq	.+46     	; 0x137e <_ZN6String6concatEPKcj+0x4a>
    1350:	7b 01       	movw	r14, r22
    1352:	ec 01       	movw	r28, r24
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	8a 01       	movw	r16, r20
    135a:	08 0f       	add	r16, r24
    135c:	19 1f       	adc	r17, r25
    135e:	b8 01       	movw	r22, r16
    1360:	ce 01       	movw	r24, r28
    1362:	56 df       	rcall	.-340    	; 0x1210 <_ZN6String7reserveEj>
    1364:	88 23       	and	r24, r24
    1366:	79 f3       	breq	.-34     	; 0x1346 <_ZN6String6concatEPKcj+0x12>
    1368:	28 81       	ld	r18, Y
    136a:	39 81       	ldd	r19, Y+1	; 0x01
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	b7 01       	movw	r22, r14
    1372:	82 0f       	add	r24, r18
    1374:	93 1f       	adc	r25, r19
    1376:	0e 94 75 1e 	call	0x3cea	; 0x3cea <strcpy>
    137a:	1d 83       	std	Y+5, r17	; 0x05
    137c:	0c 83       	std	Y+4, r16	; 0x04
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	08 95       	ret

0000138e <_ZplRK15StringSumHelperRK6String>:
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	ec 01       	movw	r28, r24
    1394:	fb 01       	movw	r30, r22
    1396:	44 81       	ldd	r20, Z+4	; 0x04
    1398:	55 81       	ldd	r21, Z+5	; 0x05
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	ca df       	rcall	.-108    	; 0x1334 <_ZN6String6concatEPKcj>
    13a0:	81 11       	cpse	r24, r1
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <_ZplRK15StringSumHelperRK6String+0x1a>
    13a4:	ce 01       	movw	r24, r28
    13a6:	08 df       	rcall	.-496    	; 0x11b8 <_ZN6String10invalidateEv>
    13a8:	ce 01       	movw	r24, r28
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    13b0:	fc 01       	movw	r30, r24
    13b2:	24 81       	ldd	r18, Z+4	; 0x04
    13b4:	35 81       	ldd	r19, Z+5	; 0x05
    13b6:	23 2b       	or	r18, r19
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <_ZNK6String6equalsEPKc+0x16>
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	61 15       	cp	r22, r1
    13be:	71 05       	cpc	r23, r1
    13c0:	a1 f0       	breq	.+40     	; 0x13ea <_ZNK6String6equalsEPKc+0x3a>
    13c2:	fb 01       	movw	r30, r22
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <_ZNK6String6equalsEPKc+0x26>
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
	if (cstr == NULL) return buffer[0] == 0;
    13cc:	61 15       	cp	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	31 f4       	brne	.+12     	; 0x13de <_ZNK6String6equalsEPKc+0x2e>
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	88 23       	and	r24, r24
    13da:	39 f0       	breq	.+14     	; 0x13ea <_ZNK6String6equalsEPKc+0x3a>
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <_ZNK6String6equalsEPKc+0x38>
	return strcmp(buffer, cstr) == 0;
    13de:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <strcmp>
    13e2:	21 e0       	ldi	r18, 0x01	; 1
    13e4:	89 2b       	or	r24, r25
    13e6:	09 f0       	breq	.+2      	; 0x13ea <_ZNK6String6equalsEPKc+0x3a>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
}
    13ea:	82 2f       	mov	r24, r18
    13ec:	08 95       	ret

000013ee <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	1f 92       	push	r1
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	69 83       	std	Y+1, r22	; 0x01
    13fa:	dc 01       	movw	r26, r24
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X
    1400:	02 80       	ldd	r0, Z+2	; 0x02
    1402:	f3 81       	ldd	r31, Z+3	; 0x03
    1404:	e0 2d       	mov	r30, r0
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	be 01       	movw	r22, r28
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	19 95       	eicall
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <_ZN5SDLib4File5writeEPKhj>:
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	89 8d       	ldd	r24, Y+25	; 0x19
    1422:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	39 f4       	brne	.+14     	; 0x1436 <_ZN5SDLib4File5writeEPKhj+0x1c>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0b c0       	rjmp	.+22     	; 0x144c <_ZN5SDLib4File5writeEPKhj+0x32>
    1436:	fc 01       	movw	r30, r24
    1438:	13 82       	std	Z+3, r1	; 0x03
    143a:	12 82       	std	Z+2, r1	; 0x02
    143c:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZN6SdFile5writeEPKvj>
    1440:	e9 8d       	ldd	r30, Y+25	; 0x19
    1442:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1444:	22 81       	ldd	r18, Z+2	; 0x02
    1446:	33 81       	ldd	r19, Z+3	; 0x03
    1448:	23 2b       	or	r18, r19
    144a:	71 f7       	brne	.-36     	; 0x1428 <_ZN5SDLib4File5writeEPKhj+0xe>
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <_ZN5SDLib4File5flushEv>:
    1452:	fc 01       	movw	r30, r24
    1454:	81 8d       	ldd	r24, Z+25	; 0x19
    1456:	92 8d       	ldd	r25, Z+26	; 0x1a
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	11 f0       	breq	.+4      	; 0x1460 <_ZN5SDLib4File5flushEv+0xe>
    145c:	0c 94 27 13 	jmp	0x264e	; 0x264e <_ZN6SdFile4syncEv>
    1460:	08 95       	ret

00001462 <_ZN6SdFile4readEv>:
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	1f 92       	push	r1
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	be 01       	movw	r22, r28
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	0b d7       	rcall	.+3606   	; 0x228e <_ZN6SdFile4readEPvj>
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	19 f4       	brne	.+6      	; 0x1482 <_ZN6SdFile4readEv+0x20>
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <_ZN6SdFile4readEv+0x24>
    1482:	8f ef       	ldi	r24, 0xFF	; 255
    1484:	9f ef       	ldi	r25, 0xFF	; 255
    1486:	0f 90       	pop	r0
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <_ZN5SDLib4File4readEv>:
    148e:	fc 01       	movw	r30, r24
    1490:	81 8d       	ldd	r24, Z+25	; 0x19
    1492:	92 8d       	ldd	r25, Z+26	; 0x1a
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	09 f0       	breq	.+2      	; 0x149a <_ZN5SDLib4File4readEv+0xc>
    1498:	e4 cf       	rjmp	.-56     	; 0x1462 <_ZN6SdFile4readEv>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	08 95       	ret

000014a0 <_ZN5SDLib4File4peekEv>:
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	fc 01       	movw	r30, r24
    14aa:	81 8d       	ldd	r24, Z+25	; 0x19
    14ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	b1 f0       	breq	.+44     	; 0x14de <_ZN5SDLib4File4peekEv+0x3e>
    14b2:	ef 01       	movw	r28, r30
    14b4:	d6 df       	rcall	.-84     	; 0x1462 <_ZN6SdFile4readEv>
    14b6:	8c 01       	movw	r16, r24
    14b8:	0f 3f       	cpi	r16, 0xFF	; 255
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	18 07       	cpc	r17, r24
    14be:	91 f0       	breq	.+36     	; 0x14e4 <_ZN5SDLib4File4peekEv+0x44>
    14c0:	89 8d       	ldd	r24, Y+25	; 0x19
    14c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14c4:	fc 01       	movw	r30, r24
    14c6:	42 85       	ldd	r20, Z+10	; 0x0a
    14c8:	53 85       	ldd	r21, Z+11	; 0x0b
    14ca:	64 85       	ldd	r22, Z+12	; 0x0c
    14cc:	75 85       	ldd	r23, Z+13	; 0x0d
    14ce:	41 50       	subi	r20, 0x01	; 1
    14d0:	51 09       	sbc	r21, r1
    14d2:	61 09       	sbc	r22, r1
    14d4:	71 09       	sbc	r23, r1
    14d6:	0e 94 91 12 	call	0x2522	; 0x2522 <_ZN6SdFile7seekSetEm>
    14da:	c8 01       	movw	r24, r16
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <_ZN5SDLib4File4peekEv+0x48>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <_ZN5SDLib4File4peekEv+0x48>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <_ZN5SDLib4FileC1E6SdFilePKc>:
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	7b 01       	movw	r14, r22
    1502:	8a 01       	movw	r16, r20
    1504:	1b 82       	std	Y+3, r1	; 0x03
    1506:	1a 82       	std	Y+2, r1	; 0x02
    1508:	88 ee       	ldi	r24, 0xE8	; 232
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	8c 83       	std	Y+4, r24	; 0x04
    1512:	9d 83       	std	Y+5, r25	; 0x05
    1514:	ae 83       	std	Y+6, r26	; 0x06
    1516:	bf 83       	std	Y+7, r27	; 0x07
    1518:	85 ec       	ldi	r24, 0xC5	; 197
    151a:	95 e0       	ldi	r25, 0x05	; 5
    151c:	99 83       	std	Y+1, r25	; 0x01
    151e:	88 83       	st	Y, r24
    1520:	8d e1       	ldi	r24, 0x1D	; 29
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 4a 1c 	call	0x3894	; 0x3894 <malloc>
    1528:	9a 8f       	std	Y+26, r25	; 0x1a
    152a:	89 8f       	std	Y+25, r24	; 0x19
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	79 f0       	breq	.+30     	; 0x154e <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    1530:	2d e1       	ldi	r18, 0x1D	; 29
    1532:	f7 01       	movw	r30, r14
    1534:	dc 01       	movw	r26, r24
    1536:	01 90       	ld	r0, Z+
    1538:	0d 92       	st	X+, r0
    153a:	2a 95       	dec	r18
    153c:	e1 f7       	brne	.-8      	; 0x1536 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    153e:	4c e0       	ldi	r20, 0x0C	; 12
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	b8 01       	movw	r22, r16
    1544:	ce 01       	movw	r24, r28
    1546:	0c 96       	adiw	r24, 0x0c	; 12
    1548:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <strncpy>
    154c:	18 8e       	std	Y+24, r1	; 0x18
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	08 95       	ret

0000155c <_ZN5SDLib4FileC1Ev>:
    155c:	fc 01       	movw	r30, r24
    155e:	13 82       	std	Z+3, r1	; 0x03
    1560:	12 82       	std	Z+2, r1	; 0x02
    1562:	88 ee       	ldi	r24, 0xE8	; 232
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	84 83       	std	Z+4, r24	; 0x04
    156c:	95 83       	std	Z+5, r25	; 0x05
    156e:	a6 83       	std	Z+6, r26	; 0x06
    1570:	b7 83       	std	Z+7, r27	; 0x07
    1572:	85 ec       	ldi	r24, 0xC5	; 197
    1574:	95 e0       	ldi	r25, 0x05	; 5
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
    157a:	12 8e       	std	Z+26, r1	; 0x1a
    157c:	11 8e       	std	Z+25, r1	; 0x19
    157e:	14 86       	std	Z+12, r1	; 0x0c
    1580:	08 95       	ret

00001582 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    1582:	dc 01       	movw	r26, r24
    1584:	59 96       	adiw	r26, 0x19	; 25
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	5a 97       	sbiw	r26, 0x1a	; 26
    158c:	30 97       	sbiw	r30, 0x00	; 0
    158e:	29 f0       	breq	.+10     	; 0x159a <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    1590:	62 85       	ldd	r22, Z+10	; 0x0a
    1592:	73 85       	ldd	r23, Z+11	; 0x0b
    1594:	84 85       	ldd	r24, Z+12	; 0x0c
    1596:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    1598:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    159a:	6f ef       	ldi	r22, 0xFF	; 255
    159c:	7f ef       	ldi	r23, 0xFF	; 255
    159e:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    15a0:	08 95       	ret

000015a2 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    15a2:	dc 01       	movw	r26, r24
    15a4:	59 96       	adiw	r26, 0x19	; 25
    15a6:	ed 91       	ld	r30, X+
    15a8:	fc 91       	ld	r31, X
    15aa:	5a 97       	sbiw	r26, 0x1a	; 26
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	29 f0       	breq	.+10     	; 0x15ba <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    15b0:	63 89       	ldd	r22, Z+19	; 0x13
    15b2:	74 89       	ldd	r23, Z+20	; 0x14
    15b4:	85 89       	ldd	r24, Z+21	; 0x15
    15b6:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    15b8:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    15c0:	08 95       	ret

000015c2 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
  if (! _file) return 0;
    15ce:	fc 01       	movw	r30, r24
    15d0:	21 8d       	ldd	r18, Z+25	; 0x19
    15d2:	32 8d       	ldd	r19, Z+26	; 0x1a
    15d4:	23 2b       	or	r18, r19
    15d6:	c9 f0       	breq	.+50     	; 0x160a <_ZN5SDLib4File9availableEv+0x48>
    15d8:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    15da:	e3 df       	rcall	.-58     	; 0x15a2 <_ZN5SDLib4File4sizeEv>
    15dc:	6b 01       	movw	r12, r22
    15de:	7c 01       	movw	r14, r24
    15e0:	ce 01       	movw	r24, r28
    15e2:	cf df       	rcall	.-98     	; 0x1582 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    15e4:	a7 01       	movw	r20, r14
    15e6:	96 01       	movw	r18, r12
    15e8:	26 1b       	sub	r18, r22
    15ea:	37 0b       	sbc	r19, r23
    15ec:	48 0b       	sbc	r20, r24
    15ee:	59 0b       	sbc	r21, r25
    15f0:	da 01       	movw	r26, r20
    15f2:	c9 01       	movw	r24, r18
    15f4:	81 15       	cp	r24, r1
    15f6:	30 e8       	ldi	r19, 0x80	; 128
    15f8:	93 07       	cpc	r25, r19
    15fa:	a1 05       	cpc	r26, r1
    15fc:	b1 05       	cpc	r27, r1
    15fe:	38 f0       	brcs	.+14     	; 0x160e <_ZN5SDLib4File9availableEv+0x4c>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	9f e7       	ldi	r25, 0x7F	; 127
    1604:	a0 e0       	ldi	r26, 0x00	; 0
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	08 95       	ret

0000161c <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
  if (_file) {
    1622:	89 8d       	ldd	r24, Y+25	; 0x19
    1624:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	41 f0       	breq	.+16     	; 0x163a <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    162a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN6SdFile5closeEv>
    free(_file); 
    162e:	89 8d       	ldd	r24, Y+25	; 0x19
    1630:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1632:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <free>
    _file = 0;
    1636:	1a 8e       	std	Y+26, r1	; 0x1a
    1638:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    1640:	dc 01       	movw	r26, r24
    1642:	59 96       	adiw	r26, 0x19	; 25
    1644:	ed 91       	ld	r30, X+
    1646:	fc 91       	ld	r31, X
    1648:	5a 97       	sbiw	r26, 0x1a	; 26
    164a:	30 97       	sbiw	r30, 0x00	; 0
    164c:	21 f0       	breq	.+8      	; 0x1656 <_ZN5SDLib4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	95 81       	ldd	r25, Z+5	; 0x05
    1652:	91 11       	cpse	r25, r1
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
    1656:	80 e0       	ldi	r24, 0x00	; 0
}
    1658:	08 95       	ret

0000165a <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	8b 01       	movw	r16, r22
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 9e 1a 	call	0x353c	; 0x353c <_ZN8SdVolume4initEP7Sd2Cardh>
    166c:	81 11       	cpse	r24, r1
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	b8 01       	movw	r22, r16
    1674:	ce 01       	movw	r24, r28
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <_ZN8SdVolume4initEP7Sd2Cardh>
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	08 95       	ret

0000168e <_ZN5SDLib7SDClass5beginEh>:
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	ec 01       	movw	r28, r24
    1698:	16 2f       	mov	r17, r22
    169a:	8f a5       	ldd	r24, Y+47	; 0x2f
    169c:	88 23       	and	r24, r24
    169e:	21 f0       	breq	.+8      	; 0x16a8 <_ZN5SDLib7SDClass5beginEh+0x1a>
    16a0:	ce 01       	movw	r24, r28
    16a2:	8a 96       	adiw	r24, 0x2a	; 42
    16a4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN6SdFile5closeEv>
    16a8:	41 2f       	mov	r20, r17
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	ce 01       	movw	r24, r28
    16ae:	da d2       	rcall	.+1460   	; 0x1c64 <_ZN7Sd2Card4initEhh>
    16b0:	88 23       	and	r24, r24
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <_ZN5SDLib7SDClass5beginEh+0x44>
    16b4:	8e 01       	movw	r16, r28
    16b6:	04 5f       	subi	r16, 0xF4	; 244
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ba:	be 01       	movw	r22, r28
    16bc:	c8 01       	movw	r24, r16
    16be:	cd df       	rcall	.-102    	; 0x165a <_ZN8SdVolume4initEP7Sd2Card>
    16c0:	88 23       	and	r24, r24
    16c2:	39 f0       	breq	.+14     	; 0x16d2 <_ZN5SDLib7SDClass5beginEh+0x44>
    16c4:	b8 01       	movw	r22, r16
    16c6:	ce 01       	movw	r24, r28
    16c8:	8a 96       	adiw	r24, 0x2a	; 42
    16ca:	91 d5       	rcall	.+2850   	; 0x21ee <_ZN6SdFile8openRootEP8SdVolume>
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	81 11       	cpse	r24, r1
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_ZN5SDLib7SDClass5beginEh+0x46>
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	89 2f       	mov	r24, r25
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <_ZN6SdFileC1ERKS_>:
    16e0:	fc 01       	movw	r30, r24
    16e2:	db 01       	movw	r26, r22
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	8d 91       	ld	r24, X+
    16e8:	9c 91       	ld	r25, X
    16ea:	13 97       	sbiw	r26, 0x03	; 3
    16ec:	93 83       	std	Z+3, r25	; 0x03
    16ee:	82 83       	std	Z+2, r24	; 0x02
    16f0:	89 ed       	ldi	r24, 0xD9	; 217
    16f2:	95 e0       	ldi	r25, 0x05	; 5
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
    16f8:	14 96       	adiw	r26, 0x04	; 4
    16fa:	8c 91       	ld	r24, X
    16fc:	14 97       	sbiw	r26, 0x04	; 4
    16fe:	84 83       	std	Z+4, r24	; 0x04
    1700:	15 96       	adiw	r26, 0x05	; 5
    1702:	8c 91       	ld	r24, X
    1704:	15 97       	sbiw	r26, 0x05	; 5
    1706:	85 83       	std	Z+5, r24	; 0x05
    1708:	16 96       	adiw	r26, 0x06	; 6
    170a:	4d 91       	ld	r20, X+
    170c:	5d 91       	ld	r21, X+
    170e:	6d 91       	ld	r22, X+
    1710:	7c 91       	ld	r23, X
    1712:	19 97       	sbiw	r26, 0x09	; 9
    1714:	46 83       	std	Z+6, r20	; 0x06
    1716:	57 83       	std	Z+7, r21	; 0x07
    1718:	60 87       	std	Z+8, r22	; 0x08
    171a:	71 87       	std	Z+9, r23	; 0x09
    171c:	1a 96       	adiw	r26, 0x0a	; 10
    171e:	4d 91       	ld	r20, X+
    1720:	5d 91       	ld	r21, X+
    1722:	6d 91       	ld	r22, X+
    1724:	7c 91       	ld	r23, X
    1726:	1d 97       	sbiw	r26, 0x0d	; 13
    1728:	42 87       	std	Z+10, r20	; 0x0a
    172a:	53 87       	std	Z+11, r21	; 0x0b
    172c:	64 87       	std	Z+12, r22	; 0x0c
    172e:	75 87       	std	Z+13, r23	; 0x0d
    1730:	1e 96       	adiw	r26, 0x0e	; 14
    1732:	4d 91       	ld	r20, X+
    1734:	5d 91       	ld	r21, X+
    1736:	6d 91       	ld	r22, X+
    1738:	7c 91       	ld	r23, X
    173a:	51 97       	sbiw	r26, 0x11	; 17
    173c:	46 87       	std	Z+14, r20	; 0x0e
    173e:	57 87       	std	Z+15, r21	; 0x0f
    1740:	60 8b       	std	Z+16, r22	; 0x10
    1742:	71 8b       	std	Z+17, r23	; 0x11
    1744:	52 96       	adiw	r26, 0x12	; 18
    1746:	8c 91       	ld	r24, X
    1748:	52 97       	sbiw	r26, 0x12	; 18
    174a:	82 8b       	std	Z+18, r24	; 0x12
    174c:	53 96       	adiw	r26, 0x13	; 19
    174e:	4d 91       	ld	r20, X+
    1750:	5d 91       	ld	r21, X+
    1752:	6d 91       	ld	r22, X+
    1754:	7c 91       	ld	r23, X
    1756:	56 97       	sbiw	r26, 0x16	; 22
    1758:	43 8b       	std	Z+19, r20	; 0x13
    175a:	54 8b       	std	Z+20, r21	; 0x14
    175c:	65 8b       	std	Z+21, r22	; 0x15
    175e:	76 8b       	std	Z+22, r23	; 0x16
    1760:	57 96       	adiw	r26, 0x17	; 23
    1762:	4d 91       	ld	r20, X+
    1764:	5d 91       	ld	r21, X+
    1766:	6d 91       	ld	r22, X+
    1768:	7c 91       	ld	r23, X
    176a:	5a 97       	sbiw	r26, 0x1a	; 26
    176c:	47 8b       	std	Z+23, r20	; 0x17
    176e:	50 8f       	std	Z+24, r21	; 0x18
    1770:	61 8f       	std	Z+25, r22	; 0x19
    1772:	72 8f       	std	Z+26, r23	; 0x1a
    1774:	5b 96       	adiw	r26, 0x1b	; 27
    1776:	8d 91       	ld	r24, X+
    1778:	9c 91       	ld	r25, X
    177a:	5c 97       	sbiw	r26, 0x1c	; 28
    177c:	94 8f       	std	Z+28, r25	; 0x1c
    177e:	83 8f       	std	Z+27, r24	; 0x1b
    1780:	08 95       	ret

00001782 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	c7 54       	subi	r28, 0x47	; 71
    17a8:	d1 09       	sbc	r29, r1
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	5c 01       	movw	r10, r24
    17b6:	4a 01       	movw	r8, r20
    17b8:	39 01       	movw	r6, r18
    17ba:	19 a2       	std	Y+33, r1	; 0x21
    17bc:	18 a2       	std	Y+32, r1	; 0x20
    17be:	89 ed       	ldi	r24, 0xD9	; 217
    17c0:	95 e0       	ldi	r25, 0x05	; 5
    17c2:	9f 8f       	std	Y+31, r25	; 0x1f
    17c4:	8e 8f       	std	Y+30, r24	; 0x1e
    17c6:	1b a2       	std	Y+35, r1	; 0x23
    17c8:	1c 82       	std	Y+4, r1	; 0x04
    17ca:	1b 82       	std	Y+3, r1	; 0x03
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	1e 82       	std	Y+6, r1	; 0x06
    17d2:	64 5f       	subi	r22, 0xF4	; 244
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	6e 01       	movw	r12, r28
    17d8:	8e e1       	ldi	r24, 0x1E	; 30
    17da:	c8 0e       	add	r12, r24
    17dc:	d1 1c       	adc	r13, r1
    17de:	c6 01       	movw	r24, r12
    17e0:	06 d5       	rcall	.+2572   	; 0x21ee <_ZN6SdFile8openRootEP8SdVolume>
    17e2:	74 01       	movw	r14, r8
    17e4:	8e 01       	movw	r16, r28
    17e6:	0f 5f       	subi	r16, 0xFF	; 255
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	5c 2c       	mov	r5, r12
    17ec:	4d 2c       	mov	r4, r13
    17ee:	6f e2       	ldi	r22, 0x2F	; 47
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	c7 01       	movw	r24, r14
    17f4:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <strchr>
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	09 f4       	brne	.+2      	; 0x17fe <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x7c>
    17fc:	41 c0       	rjmp	.+130    	; 0x1880 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfe>
    17fe:	f7 01       	movw	r30, r14
    1800:	20 81       	ld	r18, Z
    1802:	2f 32       	cpi	r18, 0x2F	; 47
    1804:	71 f4       	brne	.+28     	; 0x1822 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa0>
    1806:	ff ef       	ldi	r31, 0xFF	; 255
    1808:	ef 1a       	sub	r14, r31
    180a:	ff 0a       	sbc	r15, r31
    180c:	90 2f       	mov	r25, r16
    180e:	81 2f       	mov	r24, r17
    1810:	05 2d       	mov	r16, r5
    1812:	14 2d       	mov	r17, r4
    1814:	2c 01       	movw	r4, r24
    1816:	c2 01       	movw	r24, r4
    1818:	50 2e       	mov	r5, r16
    181a:	41 2e       	mov	r4, r17
    181c:	09 2f       	mov	r16, r25
    181e:	18 2f       	mov	r17, r24
    1820:	e6 cf       	rjmp	.-52     	; 0x17ee <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1822:	8e 19       	sub	r24, r14
    1824:	8d 30       	cpi	r24, 0x0D	; 13
    1826:	08 f0       	brcs	.+2      	; 0x182a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa8>
    1828:	8c e0       	ldi	r24, 0x0C	; 12
    182a:	c8 2e       	mov	r12, r24
    182c:	d1 2c       	mov	r13, r1
    182e:	a6 01       	movw	r20, r12
    1830:	b7 01       	movw	r22, r14
    1832:	ce 01       	movw	r24, r28
    1834:	cb 96       	adiw	r24, 0x3b	; 59
    1836:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <strncpy>
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ec 0f       	add	r30, r28
    1840:	fd 1f       	adc	r31, r29
    1842:	ec 0d       	add	r30, r12
    1844:	fd 1d       	adc	r31, r13
    1846:	10 82       	st	Z, r1
    1848:	c8 01       	movw	r24, r16
    184a:	46 d7       	rcall	.+3724   	; 0x26d8 <_ZN6SdFile5closeEv>
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	ae 01       	movw	r20, r28
    1850:	45 5c       	subi	r20, 0xC5	; 197
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	65 2d       	mov	r22, r5
    1856:	74 2d       	mov	r23, r4
    1858:	c8 01       	movw	r24, r16
    185a:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN6SdFile4openEPS_PKch>
    185e:	81 11       	cpse	r24, r1
    1860:	09 c0       	rjmp	.+18     	; 0x1874 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf2>
    1862:	f5 01       	movw	r30, r10
    1864:	13 82       	std	Z+3, r1	; 0x03
    1866:	12 82       	std	Z+2, r1	; 0x02
    1868:	89 ed       	ldi	r24, 0xD9	; 217
    186a:	95 e0       	ldi	r25, 0x05	; 5
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    1870:	15 82       	std	Z+5, r1	; 0x05
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x110>
    1874:	ec 0c       	add	r14, r12
    1876:	fd 1c       	adc	r15, r13
    1878:	85 2d       	mov	r24, r5
    187a:	94 2d       	mov	r25, r4
    187c:	2d d7       	rcall	.+3674   	; 0x26d8 <_ZN6SdFile5closeEv>
    187e:	cb cf       	rjmp	.-106    	; 0x1816 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x94>
    1880:	e8 18       	sub	r14, r8
    1882:	f9 08       	sbc	r15, r9
    1884:	f3 01       	movw	r30, r6
    1886:	f1 82       	std	Z+1, r15	; 0x01
    1888:	e0 82       	st	Z, r14
    188a:	65 2d       	mov	r22, r5
    188c:	74 2d       	mov	r23, r4
    188e:	c5 01       	movw	r24, r10
    1890:	27 df       	rcall	.-434    	; 0x16e0 <_ZN6SdFileC1ERKS_>
    1892:	c5 01       	movw	r24, r10
    1894:	c9 5b       	subi	r28, 0xB9	; 185
    1896:	df 4f       	sbci	r29, 0xFF	; 255
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	bf 90       	pop	r11
    18b4:	af 90       	pop	r10
    18b6:	9f 90       	pop	r9
    18b8:	8f 90       	pop	r8
    18ba:	7f 90       	pop	r7
    18bc:	6f 90       	pop	r6
    18be:	5f 90       	pop	r5
    18c0:	4f 90       	pop	r4
    18c2:	08 95       	ret

000018c4 <_ZN5SDLib7SDClass4openEPKch>:
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	c9 55       	subi	r28, 0x59	; 89
    18d8:	d1 09       	sbc	r29, r1
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	7c 01       	movw	r14, r24
    18e6:	8a 01       	movw	r16, r20
    18e8:	d2 2e       	mov	r13, r18
    18ea:	9e 01       	movw	r18, r28
    18ec:	28 5a       	subi	r18, 0xA8	; 168
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	ce 01       	movw	r24, r28
    18f2:	cb 96       	adiw	r24, 0x3b	; 59
    18f4:	46 df       	rcall	.-372    	; 0x1782 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    18f6:	6a 96       	adiw	r28, 0x1a	; 26
    18f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    18fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    18fc:	6a 97       	sbiw	r28, 0x1a	; 26
    18fe:	08 0f       	add	r16, r24
    1900:	19 1f       	adc	r17, r25
    1902:	f8 01       	movw	r30, r16
    1904:	80 81       	ld	r24, Z
    1906:	81 11       	cpse	r24, r1
    1908:	09 c0       	rjmp	.+18     	; 0x191c <_ZN5SDLib7SDClass4openEPKch+0x58>
    190a:	be 01       	movw	r22, r28
    190c:	65 5c       	subi	r22, 0xC5	; 197
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	e5 de       	rcall	.-566    	; 0x16e0 <_ZN6SdFileC1ERKS_>
    1916:	43 ed       	ldi	r20, 0xD3	; 211
    1918:	55 e0       	ldi	r21, 0x05	; 5
    191a:	2e c0       	rjmp	.+92     	; 0x1978 <_ZN5SDLib7SDClass4openEPKch+0xb4>
    191c:	19 a2       	std	Y+33, r1	; 0x21
    191e:	18 a2       	std	Y+32, r1	; 0x20
    1920:	89 ed       	ldi	r24, 0xD9	; 217
    1922:	95 e0       	ldi	r25, 0x05	; 5
    1924:	9f 8f       	std	Y+31, r25	; 0x1f
    1926:	8e 8f       	std	Y+30, r24	; 0x1e
    1928:	1b a2       	std	Y+35, r1	; 0x23
    192a:	21 96       	adiw	r28, 0x01	; 1
    192c:	8f ad       	ldd	r24, Y+63	; 0x3f
    192e:	21 97       	sbiw	r28, 0x01	; 1
    1930:	81 11       	cpse	r24, r1
    1932:	03 c0       	rjmp	.+6      	; 0x193a <_ZN5SDLib7SDClass4openEPKch+0x76>
    1934:	c7 01       	movw	r24, r14
    1936:	12 de       	rcall	.-988    	; 0x155c <_ZN5SDLib4FileC1Ev>
    1938:	24 c0       	rjmp	.+72     	; 0x1982 <_ZN5SDLib7SDClass4openEPKch+0xbe>
    193a:	2d 2d       	mov	r18, r13
    193c:	a8 01       	movw	r20, r16
    193e:	be 01       	movw	r22, r28
    1940:	65 5c       	subi	r22, 0xC5	; 197
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	ce 01       	movw	r24, r28
    1946:	4e 96       	adiw	r24, 0x1e	; 30
    1948:	e5 d7       	rcall	.+4042   	; 0x2914 <_ZN6SdFile4openEPS_PKch>
    194a:	88 23       	and	r24, r24
    194c:	99 f3       	breq	.-26     	; 0x1934 <_ZN5SDLib7SDClass4openEPKch+0x70>
    194e:	ce 01       	movw	r24, r28
    1950:	cb 96       	adiw	r24, 0x3b	; 59
    1952:	c2 d6       	rcall	.+3460   	; 0x26d8 <_ZN6SdFile5closeEv>
    1954:	8d 2d       	mov	r24, r13
    1956:	86 70       	andi	r24, 0x06	; 6
    1958:	86 30       	cpi	r24, 0x06	; 6
    195a:	39 f4       	brne	.+14     	; 0x196a <_ZN5SDLib7SDClass4openEPKch+0xa6>
    195c:	49 a9       	ldd	r20, Y+49	; 0x31
    195e:	5a a9       	ldd	r21, Y+50	; 0x32
    1960:	6b a9       	ldd	r22, Y+51	; 0x33
    1962:	7c a9       	ldd	r23, Y+52	; 0x34
    1964:	ce 01       	movw	r24, r28
    1966:	4e 96       	adiw	r24, 0x1e	; 30
    1968:	dc d5       	rcall	.+3000   	; 0x2522 <_ZN6SdFile7seekSetEm>
    196a:	be 01       	movw	r22, r28
    196c:	62 5e       	subi	r22, 0xE2	; 226
    196e:	7f 4f       	sbci	r23, 0xFF	; 255
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	b5 de       	rcall	.-662    	; 0x16e0 <_ZN6SdFileC1ERKS_>
    1976:	a8 01       	movw	r20, r16
    1978:	be 01       	movw	r22, r28
    197a:	6f 5f       	subi	r22, 0xFF	; 255
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	c7 01       	movw	r24, r14
    1980:	b8 dd       	rcall	.-1168   	; 0x14f2 <_ZN5SDLib4FileC1E6SdFilePKc>
    1982:	c7 01       	movw	r24, r14
    1984:	c7 5a       	subi	r28, 0xA7	; 167
    1986:	df 4f       	sbci	r29, 0xFF	; 255
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	08 95       	ret

000019a2 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    19a2:	ec e0       	ldi	r30, 0x0C	; 12
    19a4:	f7 e0       	ldi	r31, 0x07	; 7
    19a6:	15 82       	std	Z+5, r1	; 0x05
    19a8:	16 82       	std	Z+6, r1	; 0x06
    19aa:	11 86       	std	Z+9, r1	; 0x09
    19ac:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e0       	ldi	r26, 0x00	; 0
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	84 87       	std	Z+12, r24	; 0x0c
    19b8:	95 87       	std	Z+13, r25	; 0x0d
    19ba:	a6 87       	std	Z+14, r26	; 0x0e
    19bc:	b7 87       	std	Z+15, r27	; 0x0f
    19be:	13 a2       	std	Z+35, r1	; 0x23
    19c0:	15 a6       	std	Z+45, r1	; 0x2d
    19c2:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    19c4:	89 ed       	ldi	r24, 0xD9	; 217
    19c6:	95 e0       	ldi	r25, 0x05	; 5
    19c8:	93 a7       	std	Z+43, r25	; 0x2b
    19ca:	82 a7       	std	Z+42, r24	; 0x2a
    19cc:	17 a6       	std	Z+47, r1	; 0x2f
    19ce:	08 95       	ret

000019d0 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    19d0:	9f b7       	in	r25, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	20 91 63 09 	lds	r18, 0x0963	; 0x800963 <_ZN8SPIClass13interruptModeE>
    19d8:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <_ZN8SPIClass13interruptSaveE>
    19dc:	21 30       	cpi	r18, 0x01	; 1
    19de:	19 f4       	brne	.+6      	; 0x19e6 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    19e0:	8d bb       	out	0x1d, r24	; 29
    19e2:	9f bf       	out	0x3f, r25	; 63
    19e4:	08 95       	ret
    19e6:	8f bf       	out	0x3f, r24	; 63
    19e8:	08 95       	ret

000019ea <_ZN11SPISettingsC1Emhh>:
    19ea:	0f 93       	push	r16
    19ec:	fc 01       	movw	r30, r24
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	92 e1       	ldi	r25, 0x12	; 18
    19f2:	aa e7       	ldi	r26, 0x7A	; 122
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	48 17       	cp	r20, r24
    19fa:	59 07       	cpc	r21, r25
    19fc:	6a 07       	cpc	r22, r26
    19fe:	7b 07       	cpc	r23, r27
    1a00:	40 f4       	brcc	.+16     	; 0x1a12 <_ZN11SPISettingsC1Emhh+0x28>
    1a02:	b6 95       	lsr	r27
    1a04:	a7 95       	ror	r26
    1a06:	97 95       	ror	r25
    1a08:	87 95       	ror	r24
    1a0a:	3f 5f       	subi	r19, 0xFF	; 255
    1a0c:	36 30       	cpi	r19, 0x06	; 6
    1a0e:	a1 f7       	brne	.-24     	; 0x19f8 <_ZN11SPISettingsC1Emhh+0xe>
    1a10:	37 e0       	ldi	r19, 0x07	; 7
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	93 27       	eor	r25, r19
    1a16:	22 23       	and	r18, r18
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <_ZN11SPISettingsC1Emhh+0x34>
    1a1a:	20 e5       	ldi	r18, 0x50	; 80
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <_ZN11SPISettingsC1Emhh+0x36>
    1a1e:	20 e7       	ldi	r18, 0x70	; 112
    1a20:	0c 70       	andi	r16, 0x0C	; 12
    1a22:	89 2f       	mov	r24, r25
    1a24:	86 95       	lsr	r24
    1a26:	08 2b       	or	r16, r24
    1a28:	02 2b       	or	r16, r18
    1a2a:	00 83       	st	Z, r16
    1a2c:	91 70       	andi	r25, 0x01	; 1
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1a34:	20 91 63 09 	lds	r18, 0x0963	; 0x800963 <_ZN8SPIClass13interruptModeE>
    1a38:	22 23       	and	r18, r18
    1a3a:	99 f0       	breq	.+38     	; 0x1a62 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1a3c:	4f b7       	in	r20, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	20 91 63 09 	lds	r18, 0x0963	; 0x800963 <_ZN8SPIClass13interruptModeE>
    1a44:	21 30       	cpi	r18, 0x01	; 1
    1a46:	59 f4       	brne	.+22     	; 0x1a5e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1a48:	2d b3       	in	r18, 0x1d	; 29
    1a4a:	20 93 61 09 	sts	0x0961, r18	; 0x800961 <_ZN8SPIClass13interruptSaveE>
    1a4e:	3d b3       	in	r19, 0x1d	; 29
    1a50:	20 91 62 09 	lds	r18, 0x0962	; 0x800962 <_ZN8SPIClass13interruptMaskE>
    1a54:	20 95       	com	r18
    1a56:	23 23       	and	r18, r19
    1a58:	2d bb       	out	0x1d, r18	; 29
    1a5a:	4f bf       	out	0x3f, r20	; 63
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1a5e:	40 93 61 09 	sts	0x0961, r20	; 0x800961 <_ZN8SPIClass13interruptSaveE>
    1a62:	8c bd       	out	0x2c, r24	; 44
    1a64:	9d bd       	out	0x2d, r25	; 45
    1a66:	08 95       	ret

00001a68 <_ZN8SPIClass8transferEh>:
    1a68:	8e bd       	out	0x2e, r24	; 46
    1a6a:	00 00       	nop
    1a6c:	0d b4       	in	r0, 0x2d	; 45
    1a6e:	07 fe       	sbrs	r0, 7
    1a70:	fd cf       	rjmp	.-6      	; 0x1a6c <_ZN8SPIClass8transferEh+0x4>
    1a72:	8e b5       	in	r24, 0x2e	; 46
    1a74:	08 95       	ret

00001a76 <_ZL6spiRecv>:
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	f7 cf       	rjmp	.-18     	; 0x1a68 <_ZN8SPIClass8transferEh>

00001a7a <_ZN7Sd2Card14chipSelectHighEv>:
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	84 81       	ldd	r24, Z+4	; 0x04
    1a80:	68 db       	rcall	.-2352   	; 0x1152 <digitalWrite>
    1a82:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <_ZL20chip_select_asserted>
    1a86:	88 23       	and	r24, r24
    1a88:	31 f0       	breq	.+12     	; 0x1a96 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    1a8a:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <_ZL20chip_select_asserted>
    1a8e:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <_ZN8SPIClass13interruptModeE>
    1a92:	81 11       	cpse	r24, r1
    1a94:	9d cf       	rjmp	.-198    	; 0x19d0 <_ZN8SPIClass14endTransactionEv.part.3>
    1a96:	08 95       	ret

00001a98 <_ZN7Sd2Card13chipSelectLowEv>:
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	ec 01       	movw	r28, r24
    1a9e:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <_ZL20chip_select_asserted>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <_ZN7Sd2Card13chipSelectLowEv+0x1e>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <_ZL20chip_select_asserted>
    1aac:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZL8settings>
    1ab0:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <_ZL8settings+0x1>
    1ab4:	bf df       	rcall	.-130    	; 0x1a34 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	49 cb       	rjmp	.-2414   	; 0x1152 <digitalWrite>

00001ac0 <_ZN7Sd2Card7readEndEv>:
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ec 01       	movw	r28, r24
    1ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac8:	88 23       	and	r24, r24
    1aca:	79 f0       	breq	.+30     	; 0x1aea <_ZN7Sd2Card7readEndEv+0x2a>
    1acc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ace:	98 85       	ldd	r25, Y+8	; 0x08
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	2f 5f       	subi	r18, 0xFF	; 255
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	38 87       	std	Y+8, r19	; 0x08
    1ad8:	2f 83       	std	Y+7, r18	; 0x07
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	92 40       	sbci	r25, 0x02	; 2
    1ade:	10 f4       	brcc	.+4      	; 0x1ae4 <_ZN7Sd2Card7readEndEv+0x24>
    1ae0:	ca df       	rcall	.-108    	; 0x1a76 <_ZL6spiRecv>
    1ae2:	f4 cf       	rjmp	.-24     	; 0x1acc <_ZN7Sd2Card7readEndEv+0xc>
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	c9 df       	rcall	.-110    	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    1ae8:	1e 82       	std	Y+6, r1	; 0x06
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <_ZN7Sd2Card10setSckRateEh>:
    1af0:	0f 93       	push	r16
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	1f 92       	push	r1
    1af8:	1f 92       	push	r1
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	67 30       	cpi	r22, 0x07	; 7
    1b00:	28 f0       	brcs	.+10     	; 0x1b0c <_ZN7Sd2Card10setSckRateEh+0x1c>
    1b02:	26 e1       	ldi	r18, 0x16	; 22
    1b04:	fc 01       	movw	r30, r24
    1b06:	25 83       	std	Z+5, r18	; 0x05
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	46 c0       	rjmp	.+140    	; 0x1b98 <_ZN7Sd2Card10setSckRateEh+0xa8>
    1b0c:	62 30       	cpi	r22, 0x02	; 2
    1b0e:	f9 f0       	breq	.+62     	; 0x1b4e <_ZN7Sd2Card10setSckRateEh+0x5e>
    1b10:	58 f4       	brcc	.+22     	; 0x1b28 <_ZN7Sd2Card10setSckRateEh+0x38>
    1b12:	66 23       	and	r22, r22
    1b14:	a9 f0       	breq	.+42     	; 0x1b40 <_ZN7Sd2Card10setSckRateEh+0x50>
    1b16:	61 30       	cpi	r22, 0x01	; 1
    1b18:	79 f5       	brne	.+94     	; 0x1b78 <_ZN7Sd2Card10setSckRateEh+0x88>
    1b1a:	00 e0       	ldi	r16, 0x00	; 0
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	59 e0       	ldi	r21, 0x09	; 9
    1b22:	6d e3       	ldi	r22, 0x3D	; 61
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	2e c0       	rjmp	.+92     	; 0x1b84 <_ZN7Sd2Card10setSckRateEh+0x94>
    1b28:	64 30       	cpi	r22, 0x04	; 4
    1b2a:	f9 f0       	breq	.+62     	; 0x1b6a <_ZN7Sd2Card10setSckRateEh+0x7a>
    1b2c:	b8 f0       	brcs	.+46     	; 0x1b5c <_ZN7Sd2Card10setSckRateEh+0x6c>
    1b2e:	65 30       	cpi	r22, 0x05	; 5
    1b30:	19 f5       	brne	.+70     	; 0x1b78 <_ZN7Sd2Card10setSckRateEh+0x88>
    1b32:	00 e0       	ldi	r16, 0x00	; 0
    1b34:	21 e0       	ldi	r18, 0x01	; 1
    1b36:	40 e9       	ldi	r20, 0x90	; 144
    1b38:	50 ed       	ldi	r21, 0xD0	; 208
    1b3a:	63 e0       	ldi	r22, 0x03	; 3
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	22 c0       	rjmp	.+68     	; 0x1b84 <_ZN7Sd2Card10setSckRateEh+0x94>
    1b40:	00 e0       	ldi	r16, 0x00	; 0
    1b42:	21 e0       	ldi	r18, 0x01	; 1
    1b44:	40 e4       	ldi	r20, 0x40	; 64
    1b46:	58 e7       	ldi	r21, 0x78	; 120
    1b48:	6d e7       	ldi	r22, 0x7D	; 125
    1b4a:	71 e0       	ldi	r23, 0x01	; 1
    1b4c:	1b c0       	rjmp	.+54     	; 0x1b84 <_ZN7Sd2Card10setSckRateEh+0x94>
    1b4e:	00 e0       	ldi	r16, 0x00	; 0
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	54 e8       	ldi	r21, 0x84	; 132
    1b56:	6e e1       	ldi	r22, 0x1E	; 30
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <_ZN7Sd2Card10setSckRateEh+0x94>
    1b5c:	00 e0       	ldi	r16, 0x00	; 0
    1b5e:	21 e0       	ldi	r18, 0x01	; 1
    1b60:	40 e4       	ldi	r20, 0x40	; 64
    1b62:	52 e4       	ldi	r21, 0x42	; 66
    1b64:	6f e0       	ldi	r22, 0x0F	; 15
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	0d c0       	rjmp	.+26     	; 0x1b84 <_ZN7Sd2Card10setSckRateEh+0x94>
    1b6a:	00 e0       	ldi	r16, 0x00	; 0
    1b6c:	21 e0       	ldi	r18, 0x01	; 1
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 ea       	ldi	r21, 0xA1	; 161
    1b72:	67 e0       	ldi	r22, 0x07	; 7
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <_ZN7Sd2Card10setSckRateEh+0x94>
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	48 e4       	ldi	r20, 0x48	; 72
    1b7e:	58 ee       	ldi	r21, 0xE8	; 232
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	30 df       	rcall	.-416    	; 0x19ea <_ZN11SPISettingsC1Emhh>
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <_ZL8settings+0x1>
    1b92:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <_ZL8settings>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <_ZN7Sd2Card11waitNotBusyEj>:
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	eb 01       	movw	r28, r22
    1bae:	d1 d9       	rcall	.-3166   	; 0xf52 <millis>
    1bb0:	8b 01       	movw	r16, r22
    1bb2:	61 df       	rcall	.-318    	; 0x1a76 <_ZL6spiRecv>
    1bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb6:	41 f0       	breq	.+16     	; 0x1bc8 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    1bb8:	cc d9       	rcall	.-3176   	; 0xf52 <millis>
    1bba:	60 1b       	sub	r22, r16
    1bbc:	71 0b       	sbc	r23, r17
    1bbe:	6c 17       	cp	r22, r28
    1bc0:	7d 07       	cpc	r23, r29
    1bc2:	b8 f3       	brcs	.-18     	; 0x1bb2 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <_ZN7Sd2Card11waitNotBusyEj+0x26>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <_ZN7Sd2Card11cardCommandEhm>:
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	ec 01       	movw	r28, r24
    1be8:	f6 2e       	mov	r15, r22
    1bea:	49 01       	movw	r8, r18
    1bec:	5a 01       	movw	r10, r20
    1bee:	68 df       	rcall	.-304    	; 0x1ac0 <_ZN7Sd2Card7readEndEv>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	52 df       	rcall	.-348    	; 0x1a98 <_ZN7Sd2Card13chipSelectLowEv>
    1bf4:	6c e2       	ldi	r22, 0x2C	; 44
    1bf6:	71 e0       	ldi	r23, 0x01	; 1
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	d4 df       	rcall	.-88     	; 0x1ba4 <_ZN7Sd2Card11waitNotBusyEj>
    1bfc:	8f 2d       	mov	r24, r15
    1bfe:	80 64       	ori	r24, 0x40	; 64
    1c00:	33 df       	rcall	.-410    	; 0x1a68 <_ZN8SPIClass8transferEh>
    1c02:	08 e1       	ldi	r16, 0x18	; 24
    1c04:	10 e0       	ldi	r17, 0x00	; 0
    1c06:	d5 01       	movw	r26, r10
    1c08:	c4 01       	movw	r24, r8
    1c0a:	00 2e       	mov	r0, r16
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1c0e:	b6 95       	lsr	r27
    1c10:	a7 95       	ror	r26
    1c12:	97 95       	ror	r25
    1c14:	87 95       	ror	r24
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <_ZN7Sd2Card11cardCommandEhm+0x3a>
    1c1a:	26 df       	rcall	.-436    	; 0x1a68 <_ZN8SPIClass8transferEh>
    1c1c:	08 50       	subi	r16, 0x08	; 8
    1c1e:	11 09       	sbc	r17, r1
    1c20:	08 3f       	cpi	r16, 0xF8	; 248
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	18 07       	cpc	r17, r24
    1c26:	79 f7       	brne	.-34     	; 0x1c06 <_ZN7Sd2Card11cardCommandEhm+0x32>
    1c28:	ff 20       	and	r15, r15
    1c2a:	29 f0       	breq	.+10     	; 0x1c36 <_ZN7Sd2Card11cardCommandEhm+0x62>
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	f8 12       	cpse	r15, r24
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <_ZN7Sd2Card11cardCommandEhm+0x66>
    1c32:	87 e8       	ldi	r24, 0x87	; 135
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <_ZN7Sd2Card11cardCommandEhm+0x68>
    1c36:	85 e9       	ldi	r24, 0x95	; 149
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <_ZN7Sd2Card11cardCommandEhm+0x68>
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	15 df       	rcall	.-470    	; 0x1a68 <_ZN8SPIClass8transferEh>
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
    1c40:	1a df       	rcall	.-460    	; 0x1a76 <_ZL6spiRecv>
    1c42:	8a 87       	std	Y+10, r24	; 0x0a
    1c44:	87 ff       	sbrs	r24, 7
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1c48:	1f 3f       	cpi	r17, 0xFF	; 255
    1c4a:	11 f0       	breq	.+4      	; 0x1c50 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1c4c:	1f 5f       	subi	r17, 0xFF	; 255
    1c4e:	f8 cf       	rjmp	.-16     	; 0x1c40 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	ff 90       	pop	r15
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	08 95       	ret

00001c64 <_ZN7Sd2Card4initEhh>:
    1c64:	7f 92       	push	r7
    1c66:	8f 92       	push	r8
    1c68:	9f 92       	push	r9
    1c6a:	af 92       	push	r10
    1c6c:	bf 92       	push	r11
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	1f 92       	push	r1
    1c80:	1f 92       	push	r1
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	7c 01       	movw	r14, r24
    1c88:	76 2e       	mov	r7, r22
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	13 86       	std	Z+11, r1	; 0x0b
    1c8e:	11 86       	std	Z+9, r1	; 0x09
    1c90:	16 82       	std	Z+6, r1	; 0x06
    1c92:	15 82       	std	Z+5, r1	; 0x05
    1c94:	44 83       	std	Z+4, r20	; 0x04
    1c96:	5d d9       	rcall	.-3398   	; 0xf52 <millis>
    1c98:	6b 01       	movw	r12, r22
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	84 81       	ldd	r24, Z+4	; 0x04
    1ca0:	1c da       	rcall	.-3016   	; 0x10da <pinMode>
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	f7 01       	movw	r30, r14
    1ca6:	84 81       	ldd	r24, Z+4	; 0x04
    1ca8:	54 da       	rcall	.-2904   	; 0x1152 <digitalWrite>
    1caa:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN8SPIClass5beginEv>
    1cae:	00 e0       	ldi	r16, 0x00	; 0
    1cb0:	21 e0       	ldi	r18, 0x01	; 1
    1cb2:	40 e9       	ldi	r20, 0x90	; 144
    1cb4:	50 ed       	ldi	r21, 0xD0	; 208
    1cb6:	63 e0       	ldi	r22, 0x03	; 3
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	ce 01       	movw	r24, r28
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	95 de       	rcall	.-726    	; 0x19ea <_ZN11SPISettingsC1Emhh>
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <_ZL8settings+0x1>
    1cc8:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <_ZL8settings>
    1ccc:	b3 de       	rcall	.-666    	; 0x1a34 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1cce:	1a e0       	ldi	r17, 0x0A	; 10
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	ca de       	rcall	.-620    	; 0x1a68 <_ZN8SPIClass8transferEh>
    1cd4:	11 50       	subi	r17, 0x01	; 1
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <_ZN7Sd2Card4initEhh+0x6c>
    1cd8:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <_ZN8SPIClass13interruptModeE>
    1cdc:	81 11       	cpse	r24, r1
    1cde:	78 de       	rcall	.-784    	; 0x19d0 <_ZN8SPIClass14endTransactionEv.part.3>
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	da de       	rcall	.-588    	; 0x1a98 <_ZN7Sd2Card13chipSelectLowEv>
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	a9 01       	movw	r20, r18
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	c7 01       	movw	r24, r14
    1cee:	72 df       	rcall	.-284    	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1cf0:	08 2f       	mov	r16, r24
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	82 87       	std	Z+10, r24	; 0x0a
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	41 f0       	breq	.+16     	; 0x1d0a <_ZN7Sd2Card4initEhh+0xa6>
    1cfa:	2b d9       	rcall	.-3498   	; 0xf52 <millis>
    1cfc:	6c 19       	sub	r22, r12
    1cfe:	7d 09       	sbc	r23, r13
    1d00:	61 3d       	cpi	r22, 0xD1	; 209
    1d02:	77 40       	sbci	r23, 0x07	; 7
    1d04:	78 f3       	brcs	.-34     	; 0x1ce4 <_ZN7Sd2Card4initEhh+0x80>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	4a c0       	rjmp	.+148    	; 0x1d9e <_ZN7Sd2Card4initEhh+0x13a>
    1d0a:	2a ea       	ldi	r18, 0xAA	; 170
    1d0c:	31 e0       	ldi	r19, 0x01	; 1
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	68 e0       	ldi	r22, 0x08	; 8
    1d14:	c7 01       	movw	r24, r14
    1d16:	5e df       	rcall	.-324    	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1d18:	82 ff       	sbrs	r24, 2
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <_ZN7Sd2Card4initEhh+0xbe>
    1d1c:	f7 01       	movw	r30, r14
    1d1e:	03 87       	std	Z+11, r16	; 0x0b
    1d20:	0d c0       	rjmp	.+26     	; 0x1d3c <_ZN7Sd2Card4initEhh+0xd8>
    1d22:	04 e0       	ldi	r16, 0x04	; 4
    1d24:	a8 de       	rcall	.-688    	; 0x1a76 <_ZL6spiRecv>
    1d26:	f7 01       	movw	r30, r14
    1d28:	82 87       	std	Z+10, r24	; 0x0a
    1d2a:	01 50       	subi	r16, 0x01	; 1
    1d2c:	d9 f7       	brne	.-10     	; 0x1d24 <_ZN7Sd2Card4initEhh+0xc0>
    1d2e:	8a 3a       	cpi	r24, 0xAA	; 170
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <_ZN7Sd2Card4initEhh+0xd2>
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	35 c0       	rjmp	.+106    	; 0x1da0 <_ZN7Sd2Card4initEhh+0x13c>
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	f7 01       	movw	r30, r14
    1d3a:	83 87       	std	Z+11, r24	; 0x0b
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	83 85       	ldd	r24, Z+11	; 0x0b
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	21 f0       	breq	.+8      	; 0x1d4c <_ZN7Sd2Card4initEhh+0xe8>
    1d44:	81 2c       	mov	r8, r1
    1d46:	91 2c       	mov	r9, r1
    1d48:	54 01       	movw	r10, r8
    1d4a:	05 c0       	rjmp	.+10     	; 0x1d56 <_ZN7Sd2Card4initEhh+0xf2>
    1d4c:	81 2c       	mov	r8, r1
    1d4e:	91 2c       	mov	r9, r1
    1d50:	a1 2c       	mov	r10, r1
    1d52:	80 e4       	ldi	r24, 0x40	; 64
    1d54:	b8 2e       	mov	r11, r24
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	67 e3       	ldi	r22, 0x37	; 55
    1d5e:	c7 01       	movw	r24, r14
    1d60:	39 df       	rcall	.-398    	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1d62:	a5 01       	movw	r20, r10
    1d64:	94 01       	movw	r18, r8
    1d66:	69 e2       	ldi	r22, 0x29	; 41
    1d68:	c7 01       	movw	r24, r14
    1d6a:	34 df       	rcall	.-408    	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	82 87       	std	Z+10, r24	; 0x0a
    1d70:	88 23       	and	r24, r24
    1d72:	41 f0       	breq	.+16     	; 0x1d84 <_ZN7Sd2Card4initEhh+0x120>
    1d74:	ee d8       	rcall	.-3620   	; 0xf52 <millis>
    1d76:	6c 19       	sub	r22, r12
    1d78:	7d 09       	sbc	r23, r13
    1d7a:	61 3d       	cpi	r22, 0xD1	; 209
    1d7c:	77 40       	sbci	r23, 0x07	; 7
    1d7e:	58 f3       	brcs	.-42     	; 0x1d56 <_ZN7Sd2Card4initEhh+0xf2>
    1d80:	88 e0       	ldi	r24, 0x08	; 8
    1d82:	0d c0       	rjmp	.+26     	; 0x1d9e <_ZN7Sd2Card4initEhh+0x13a>
    1d84:	f7 01       	movw	r30, r14
    1d86:	83 85       	ldd	r24, Z+11	; 0x0b
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	c1 f4       	brne	.+48     	; 0x1dbc <_ZN7Sd2Card4initEhh+0x158>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	a9 01       	movw	r20, r18
    1d92:	6a e3       	ldi	r22, 0x3A	; 58
    1d94:	c7 01       	movw	r24, r14
    1d96:	1e df       	rcall	.-452    	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1d98:	88 23       	and	r24, r24
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <_ZN7Sd2Card4initEhh+0x144>
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	f7 01       	movw	r30, r14
    1da0:	85 83       	std	Z+5, r24	; 0x05
    1da2:	c7 01       	movw	r24, r14
    1da4:	6a de       	rcall	.-812    	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    1da6:	10 c0       	rjmp	.+32     	; 0x1dc8 <_ZN7Sd2Card4initEhh+0x164>
    1da8:	66 de       	rcall	.-820    	; 0x1a76 <_ZL6spiRecv>
    1daa:	80 7c       	andi	r24, 0xC0	; 192
    1dac:	80 3c       	cpi	r24, 0xC0	; 192
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <_ZN7Sd2Card4initEhh+0x152>
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	f7 01       	movw	r30, r14
    1db4:	83 87       	std	Z+11, r24	; 0x0b
    1db6:	5f de       	rcall	.-834    	; 0x1a76 <_ZL6spiRecv>
    1db8:	5e de       	rcall	.-836    	; 0x1a76 <_ZL6spiRecv>
    1dba:	5d de       	rcall	.-838    	; 0x1a76 <_ZL6spiRecv>
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	5d de       	rcall	.-838    	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    1dc0:	67 2d       	mov	r22, r7
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	95 de       	rcall	.-726    	; 0x1af0 <_ZN7Sd2Card10setSckRateEh>
    1dc6:	18 2f       	mov	r17, r24
    1dc8:	81 2f       	mov	r24, r17
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	bf 90       	pop	r11
    1de0:	af 90       	pop	r10
    1de2:	9f 90       	pop	r9
    1de4:	8f 90       	pop	r8
    1de6:	7f 90       	pop	r7
    1de8:	08 95       	ret

00001dea <_ZN7Sd2Card14waitStartBlockEv>:
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	ec 01       	movw	r28, r24
    1df4:	ae d8       	rcall	.-3748   	; 0xf52 <millis>
    1df6:	8b 01       	movw	r16, r22
    1df8:	3e de       	rcall	.-900    	; 0x1a76 <_ZL6spiRecv>
    1dfa:	8a 87       	std	Y+10, r24	; 0x0a
    1dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfe:	41 f4       	brne	.+16     	; 0x1e10 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    1e00:	a8 d8       	rcall	.-3760   	; 0xf52 <millis>
    1e02:	60 1b       	sub	r22, r16
    1e04:	71 0b       	sbc	r23, r17
    1e06:	6d 32       	cpi	r22, 0x2D	; 45
    1e08:	71 40       	sbci	r23, 0x01	; 1
    1e0a:	b0 f3       	brcs	.-20     	; 0x1df8 <_ZN7Sd2Card14waitStartBlockEv+0xe>
    1e0c:	8f e0       	ldi	r24, 0x0F	; 15
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1e10:	8e 3f       	cpi	r24, 0xFE	; 254
    1e12:	31 f0       	breq	.+12     	; 0x1e20 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    1e14:	8d e0       	ldi	r24, 0x0D	; 13
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	ce 01       	movw	r24, r28
    1e1a:	2f de       	rcall	.-930    	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret

00001e2c <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	ec 01       	movw	r28, r24
    1e3e:	69 01       	movw	r12, r18
    1e40:	c8 01       	movw	r24, r16
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	92 40       	sbci	r25, 0x02	; 2
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1e4c:	57 c0       	rjmp	.+174    	; 0x1efc <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e50:	88 23       	and	r24, r24
    1e52:	71 f0       	breq	.+28     	; 0x1e70 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1e54:	88 81       	ld	r24, Y
    1e56:	99 81       	ldd	r25, Y+1	; 0x01
    1e58:	aa 81       	ldd	r26, Y+2	; 0x02
    1e5a:	bb 81       	ldd	r27, Y+3	; 0x03
    1e5c:	84 17       	cp	r24, r20
    1e5e:	95 07       	cpc	r25, r21
    1e60:	a6 07       	cpc	r26, r22
    1e62:	b7 07       	cpc	r27, r23
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1e66:	8f 81       	ldd	r24, Y+7	; 0x07
    1e68:	98 85       	ldd	r25, Y+8	; 0x08
    1e6a:	c8 16       	cp	r12, r24
    1e6c:	d9 06       	cpc	r13, r25
    1e6e:	00 f5       	brcc	.+64     	; 0x1eb0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    1e70:	48 83       	st	Y, r20
    1e72:	59 83       	std	Y+1, r21	; 0x01
    1e74:	6a 83       	std	Y+2, r22	; 0x02
    1e76:	7b 83       	std	Y+3, r23	; 0x03
    1e78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	39 f0       	breq	.+14     	; 0x1e8c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1e7e:	89 e0       	ldi	r24, 0x09	; 9
    1e80:	44 0f       	add	r20, r20
    1e82:	55 1f       	adc	r21, r21
    1e84:	66 1f       	adc	r22, r22
    1e86:	77 1f       	adc	r23, r23
    1e88:	8a 95       	dec	r24
    1e8a:	d1 f7       	brne	.-12     	; 0x1e80 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    1e8c:	9a 01       	movw	r18, r20
    1e8e:	ab 01       	movw	r20, r22
    1e90:	61 e1       	ldi	r22, 0x11	; 17
    1e92:	ce 01       	movw	r24, r28
    1e94:	9f de       	rcall	.-706    	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1e96:	88 23       	and	r24, r24
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	2e c0       	rjmp	.+92     	; 0x1efc <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	a3 df       	rcall	.-186    	; 0x1dea <_ZN7Sd2Card14waitStartBlockEv>
    1ea4:	88 23       	and	r24, r24
    1ea6:	51 f1       	breq	.+84     	; 0x1efc <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1ea8:	18 86       	std	Y+8, r1	; 0x08
    1eaa:	1f 82       	std	Y+7, r1	; 0x07
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	8e 83       	std	Y+6, r24	; 0x06
    1eb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb2:	98 85       	ldd	r25, Y+8	; 0x08
    1eb4:	8c 15       	cp	r24, r12
    1eb6:	9d 05       	cpc	r25, r13
    1eb8:	38 f4       	brcc	.+14     	; 0x1ec8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    1eba:	dd dd       	rcall	.-1094   	; 0x1a76 <_ZL6spiRecv>
    1ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ebe:	98 85       	ldd	r25, Y+8	; 0x08
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	f4 cf       	rjmp	.-24     	; 0x1eb0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    1ec8:	67 01       	movw	r12, r14
    1eca:	e0 0e       	add	r14, r16
    1ecc:	f1 1e       	adc	r15, r17
    1ece:	ce 14       	cp	r12, r14
    1ed0:	df 04       	cpc	r13, r15
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    1ed4:	d0 dd       	rcall	.-1120   	; 0x1a76 <_ZL6spiRecv>
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	81 93       	st	Z+, r24
    1eda:	6f 01       	movw	r12, r30
    1edc:	f8 cf       	rjmp	.-16     	; 0x1ece <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    1ede:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee0:	98 85       	ldd	r25, Y+8	; 0x08
    1ee2:	08 0f       	add	r16, r24
    1ee4:	19 1f       	adc	r17, r25
    1ee6:	18 87       	std	Y+8, r17	; 0x08
    1ee8:	0f 83       	std	Y+7, r16	; 0x07
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	88 23       	and	r24, r24
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    1ef0:	01 15       	cp	r16, r1
    1ef2:	12 40       	sbci	r17, 0x02	; 2
    1ef4:	38 f0       	brcs	.+14     	; 0x1f04 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	e3 dd       	rcall	.-1082   	; 0x1ac0 <_ZN7Sd2Card7readEndEv>
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    1efc:	ce 01       	movw	r24, r28
    1efe:	bd dd       	rcall	.-1158   	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	df 90       	pop	r13
    1f14:	cf 90       	pop	r12
    1f16:	08 95       	ret

00001f18 <_ZN7Sd2Card8readDataEmjjPh>:
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	01 15       	cp	r16, r1
    1f22:	11 05       	cpc	r17, r1
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <_ZN7Sd2Card8readDataEmjjPh+0x12>
    1f26:	82 df       	rcall	.-252    	; 0x1e2c <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <_ZN7Sd2Card8readDataEmjjPh+0x14>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	08 95       	ret

00001f36 <_ZN7Sd2Card9readBlockEmPh>:
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	79 01       	movw	r14, r18
    1f40:	00 e0       	ldi	r16, 0x00	; 0
    1f42:	12 e0       	ldi	r17, 0x02	; 2
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	71 df       	rcall	.-286    	; 0x1e2c <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	08 95       	ret

00001f54 <_ZN7Sd2Card9writeDataEhPKh>:
    1f54:	ef 92       	push	r14
    1f56:	ff 92       	push	r15
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	8c 01       	movw	r16, r24
    1f62:	86 2f       	mov	r24, r22
    1f64:	7a 01       	movw	r14, r20
    1f66:	80 dd       	rcall	.-1280   	; 0x1a68 <_ZN8SPIClass8transferEh>
    1f68:	e7 01       	movw	r28, r14
    1f6a:	8e ef       	ldi	r24, 0xFE	; 254
    1f6c:	f8 1a       	sub	r15, r24
    1f6e:	89 91       	ld	r24, Y+
    1f70:	7b dd       	rcall	.-1290   	; 0x1a68 <_ZN8SPIClass8transferEh>
    1f72:	ce 15       	cp	r28, r14
    1f74:	df 05       	cpc	r29, r15
    1f76:	d9 f7       	brne	.-10     	; 0x1f6e <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	76 dd       	rcall	.-1300   	; 0x1a68 <_ZN8SPIClass8transferEh>
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	74 dd       	rcall	.-1304   	; 0x1a68 <_ZN8SPIClass8transferEh>
    1f80:	7a dd       	rcall	.-1292   	; 0x1a76 <_ZL6spiRecv>
    1f82:	f8 01       	movw	r30, r16
    1f84:	82 87       	std	Z+10, r24	; 0x0a
    1f86:	8f 71       	andi	r24, 0x1F	; 31
    1f88:	85 30       	cpi	r24, 0x05	; 5
    1f8a:	31 f0       	breq	.+12     	; 0x1f98 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    1f8c:	81 e1       	ldi	r24, 0x11	; 17
    1f8e:	85 83       	std	Z+5, r24	; 0x05
    1f90:	c8 01       	movw	r24, r16
    1f92:	73 dd       	rcall	.-1306   	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <_ZN7Sd2Card9writeDataEhPKh+0x46>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	08 95       	ret

00001fa8 <_ZN7Sd2Card10writeBlockEmPKh>:
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    1fb2:	89 01       	movw	r16, r18
    1fb4:	41 15       	cp	r20, r1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	61 05       	cpc	r22, r1
    1fba:	71 05       	cpc	r23, r1
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    1fbe:	82 e1       	ldi	r24, 0x12	; 18
    1fc0:	2d c0       	rjmp	.+90     	; 0x201c <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	39 f0       	breq	.+14     	; 0x1fd6 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    1fc8:	89 e0       	ldi	r24, 0x09	; 9
    1fca:	44 0f       	add	r20, r20
    1fcc:	55 1f       	adc	r21, r21
    1fce:	66 1f       	adc	r22, r22
    1fd0:	77 1f       	adc	r23, r23
    1fd2:	8a 95       	dec	r24
    1fd4:	d1 f7       	brne	.-12     	; 0x1fca <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    1fd6:	9a 01       	movw	r18, r20
    1fd8:	ab 01       	movw	r20, r22
    1fda:	68 e1       	ldi	r22, 0x18	; 24
    1fdc:	ce 01       	movw	r24, r28
    1fde:	fa dd       	rcall	.-1036   	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    1fe0:	88 23       	and	r24, r24
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	1a c0       	rjmp	.+52     	; 0x201c <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1fe8:	a8 01       	movw	r20, r16
    1fea:	6e ef       	ldi	r22, 0xFE	; 254
    1fec:	ce 01       	movw	r24, r28
    1fee:	b2 df       	rcall	.-156    	; 0x1f54 <_ZN7Sd2Card9writeDataEhPKh>
    1ff0:	88 23       	and	r24, r24
    1ff2:	a9 f0       	breq	.+42     	; 0x201e <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    1ff4:	68 e5       	ldi	r22, 0x58	; 88
    1ff6:	72 e0       	ldi	r23, 0x02	; 2
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	d4 dd       	rcall	.-1112   	; 0x1ba4 <_ZN7Sd2Card11waitNotBusyEj>
    1ffc:	81 11       	cpse	r24, r1
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    2000:	85 e1       	ldi	r24, 0x15	; 21
    2002:	0c c0       	rjmp	.+24     	; 0x201c <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	6d e0       	ldi	r22, 0x0D	; 13
    200c:	ce 01       	movw	r24, r28
    200e:	e2 dd       	rcall	.-1084   	; 0x1bd4 <_ZN7Sd2Card11cardCommandEhm>
    2010:	81 11       	cpse	r24, r1
    2012:	03 c0       	rjmp	.+6      	; 0x201a <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    2014:	30 dd       	rcall	.-1440   	; 0x1a76 <_ZL6spiRecv>
    2016:	88 23       	and	r24, r24
    2018:	31 f0       	breq	.+12     	; 0x2026 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    201a:	84 e1       	ldi	r24, 0x14	; 20
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	ce 01       	movw	r24, r28
    2020:	2c dd       	rcall	.-1448   	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	03 c0       	rjmp	.+6      	; 0x202c <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    2026:	ce 01       	movw	r24, r28
    2028:	28 dd       	rcall	.-1456   	; 0x1a7a <_ZN7Sd2Card14chipSelectHighEv>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret

00002036 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2036:	e6 e5       	ldi	r30, 0x56	; 86
    2038:	f7 e0       	ldi	r31, 0x07	; 7
    203a:	80 e5       	ldi	r24, 0x50	; 80
    203c:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    203e:	11 82       	std	Z+1, r1	; 0x01
    2040:	08 95       	ret

00002042 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	ec 01       	movw	r28, r24
    2048:	9c 01       	movw	r18, r24
    204a:	2a 5f       	subi	r18, 0xFA	; 250
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205a:	0e 94 39 19 	call	0x3272	; 0x3272 <_ZN8SdVolume15allocContiguousEmPm>
    205e:	88 23       	and	r24, r24
    2060:	a1 f0       	breq	.+40     	; 0x208a <_ZN6SdFile10addClusterEv+0x48>
    2062:	8f 89       	ldd	r24, Y+23	; 0x17
    2064:	98 8d       	ldd	r25, Y+24	; 0x18
    2066:	a9 8d       	ldd	r26, Y+25	; 0x19
    2068:	ba 8d       	ldd	r27, Y+26	; 0x1a
    206a:	89 2b       	or	r24, r25
    206c:	8a 2b       	or	r24, r26
    206e:	8b 2b       	or	r24, r27
    2070:	59 f4       	brne	.+22     	; 0x2088 <_ZN6SdFile10addClusterEv+0x46>
    2072:	8e 81       	ldd	r24, Y+6	; 0x06
    2074:	9f 81       	ldd	r25, Y+7	; 0x07
    2076:	a8 85       	ldd	r26, Y+8	; 0x08
    2078:	b9 85       	ldd	r27, Y+9	; 0x09
    207a:	8f 8b       	std	Y+23, r24	; 0x17
    207c:	98 8f       	std	Y+24, r25	; 0x18
    207e:	a9 8f       	std	Y+25, r26	; 0x19
    2080:	ba 8f       	std	Y+26, r27	; 0x1a
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	80 68       	ori	r24, 0x80	; 128
    2086:	8c 83       	std	Y+4, r24	; 0x04
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	08 95       	ret

00002090 <_ZN6SdFile13addDirClusterEv>:
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	ec 01       	movw	r28, r24
    20a0:	d0 df       	rcall	.-96     	; 0x2042 <_ZN6SdFile10addClusterEv>
    20a2:	81 11       	cpse	r24, r1
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <_ZN6SdFile13addDirClusterEv+0x1a>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	49 c0       	rjmp	.+146    	; 0x213c <_ZN6SdFile13addDirClusterEv+0xac>
    20aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    20ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
    20ae:	ce 80       	ldd	r12, Y+6	; 0x06
    20b0:	df 80       	ldd	r13, Y+7	; 0x07
    20b2:	e8 84       	ldd	r14, Y+8	; 0x08
    20b4:	f9 84       	ldd	r15, Y+9	; 0x09
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	c8 1a       	sub	r12, r24
    20ba:	d1 08       	sbc	r13, r1
    20bc:	e1 08       	sbc	r14, r1
    20be:	f1 08       	sbc	r15, r1
    20c0:	05 84       	ldd	r0, Z+13	; 0x0d
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <_ZN6SdFile13addDirClusterEv+0x3c>
    20c4:	cc 0c       	add	r12, r12
    20c6:	dd 1c       	adc	r13, r13
    20c8:	ee 1c       	adc	r14, r14
    20ca:	ff 1c       	adc	r15, r15
    20cc:	0a 94       	dec	r0
    20ce:	d2 f7       	brpl	.-12     	; 0x20c4 <_ZN6SdFile13addDirClusterEv+0x34>
    20d0:	86 85       	ldd	r24, Z+14	; 0x0e
    20d2:	97 85       	ldd	r25, Z+15	; 0x0f
    20d4:	a0 89       	ldd	r26, Z+16	; 0x10
    20d6:	b1 89       	ldd	r27, Z+17	; 0x11
    20d8:	c8 0e       	add	r12, r24
    20da:	d9 1e       	adc	r13, r25
    20dc:	ea 1e       	adc	r14, r26
    20de:	fb 1e       	adc	r15, r27
    20e0:	14 81       	ldd	r17, Z+4	; 0x04
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	c8 1a       	sub	r12, r24
    20e6:	d1 08       	sbc	r13, r1
    20e8:	e1 08       	sbc	r14, r1
    20ea:	f1 08       	sbc	r15, r1
    20ec:	11 23       	and	r17, r17
    20ee:	59 f0       	breq	.+22     	; 0x2106 <_ZN6SdFile13addDirClusterEv+0x76>
    20f0:	c7 01       	movw	r24, r14
    20f2:	b6 01       	movw	r22, r12
    20f4:	61 0f       	add	r22, r17
    20f6:	71 1d       	adc	r23, r1
    20f8:	81 1d       	adc	r24, r1
    20fa:	91 1d       	adc	r25, r1
    20fc:	0d d7       	rcall	.+3610   	; 0x2f18 <_ZN8SdVolume14cacheZeroBlockEm>
    20fe:	88 23       	and	r24, r24
    2100:	91 f2       	breq	.-92     	; 0x20a6 <_ZN6SdFile13addDirClusterEv+0x16>
    2102:	11 50       	subi	r17, 0x01	; 1
    2104:	f3 cf       	rjmp	.-26     	; 0x20ec <_ZN6SdFile13addDirClusterEv+0x5c>
    2106:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2108:	fc 8d       	ldd	r31, Y+28	; 0x1c
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	a0 e0       	ldi	r26, 0x00	; 0
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	05 84       	ldd	r0, Z+13	; 0x0d
    2114:	04 c0       	rjmp	.+8      	; 0x211e <_ZN6SdFile13addDirClusterEv+0x8e>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	aa 1f       	adc	r26, r26
    211c:	bb 1f       	adc	r27, r27
    211e:	0a 94       	dec	r0
    2120:	d2 f7       	brpl	.-12     	; 0x2116 <_ZN6SdFile13addDirClusterEv+0x86>
    2122:	4b 89       	ldd	r20, Y+19	; 0x13
    2124:	5c 89       	ldd	r21, Y+20	; 0x14
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	84 0f       	add	r24, r20
    212c:	95 1f       	adc	r25, r21
    212e:	a6 1f       	adc	r26, r22
    2130:	b7 1f       	adc	r27, r23
    2132:	8b 8b       	std	Y+19, r24	; 0x13
    2134:	9c 8b       	std	Y+20, r25	; 0x14
    2136:	ad 8b       	std	Y+21, r26	; 0x15
    2138:	be 8b       	std	Y+22, r27	; 0x16
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	df 90       	pop	r13
    2148:	cf 90       	pop	r12
    214a:	08 95       	ret

0000214c <_ZN6SdFile13cacheDirEntryEh>:
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	46 2f       	mov	r20, r22
    2154:	6e 85       	ldd	r22, Y+14	; 0x0e
    2156:	7f 85       	ldd	r23, Y+15	; 0x0f
    2158:	88 89       	ldd	r24, Y+16	; 0x10
    215a:	99 89       	ldd	r25, Y+17	; 0x11
    215c:	a4 d6       	rcall	.+3400   	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    215e:	88 23       	and	r24, r24
    2160:	41 f0       	breq	.+16     	; 0x2172 <_ZN6SdFile13cacheDirEntryEh+0x26>
    2162:	8a 89       	ldd	r24, Y+18	; 0x12
    2164:	20 e2       	ldi	r18, 0x20	; 32
    2166:	82 9f       	mul	r24, r18
    2168:	c0 01       	movw	r24, r0
    216a:	11 24       	eor	r1, r1
    216c:	8f 59       	subi	r24, 0x9F	; 159
    216e:	98 4f       	sbci	r25, 0xF8	; 248
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <_ZN6SdFile10make83NameEPKcPh>:
    217c:	fb 01       	movw	r30, r22
    217e:	9b 01       	movw	r18, r22
    2180:	25 5f       	subi	r18, 0xF5	; 245
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	41 93       	st	Z+, r20
    2188:	e2 17       	cp	r30, r18
    218a:	f3 07       	cpc	r31, r19
    218c:	e1 f7       	brne	.-8      	; 0x2186 <_ZN6SdFile10make83NameEPKcPh+0xa>
    218e:	dc 01       	movw	r26, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	27 e0       	ldi	r18, 0x07	; 7
    2194:	8d 91       	ld	r24, X+
    2196:	88 23       	and	r24, r24
    2198:	19 f1       	breq	.+70     	; 0x21e0 <_ZN6SdFile10make83NameEPKcPh+0x64>
    219a:	8e 32       	cpi	r24, 0x2E	; 46
    219c:	29 f4       	brne	.+10     	; 0x21a8 <_ZN6SdFile10make83NameEPKcPh+0x2c>
    219e:	2a 30       	cpi	r18, 0x0A	; 10
    21a0:	21 f1       	breq	.+72     	; 0x21ea <_ZN6SdFile10make83NameEPKcPh+0x6e>
    21a2:	98 e0       	ldi	r25, 0x08	; 8
    21a4:	2a e0       	ldi	r18, 0x0A	; 10
    21a6:	f6 cf       	rjmp	.-20     	; 0x2194 <_ZN6SdFile10make83NameEPKcPh+0x18>
    21a8:	e8 e0       	ldi	r30, 0x08	; 8
    21aa:	f3 e0       	ldi	r31, 0x03	; 3
    21ac:	34 91       	lpm	r19, Z
    21ae:	33 23       	and	r19, r19
    21b0:	21 f0       	breq	.+8      	; 0x21ba <_ZN6SdFile10make83NameEPKcPh+0x3e>
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	83 13       	cpse	r24, r19
    21b6:	fa cf       	rjmp	.-12     	; 0x21ac <_ZN6SdFile10make83NameEPKcPh+0x30>
    21b8:	18 c0       	rjmp	.+48     	; 0x21ea <_ZN6SdFile10make83NameEPKcPh+0x6e>
    21ba:	29 17       	cp	r18, r25
    21bc:	b0 f0       	brcs	.+44     	; 0x21ea <_ZN6SdFile10make83NameEPKcPh+0x6e>
    21be:	3f ed       	ldi	r19, 0xDF	; 223
    21c0:	38 0f       	add	r19, r24
    21c2:	3e 35       	cpi	r19, 0x5E	; 94
    21c4:	90 f4       	brcc	.+36     	; 0x21ea <_ZN6SdFile10make83NameEPKcPh+0x6e>
    21c6:	31 e0       	ldi	r19, 0x01	; 1
    21c8:	39 0f       	add	r19, r25
    21ca:	fb 01       	movw	r30, r22
    21cc:	e9 0f       	add	r30, r25
    21ce:	f1 1d       	adc	r31, r1
    21d0:	9f e9       	ldi	r25, 0x9F	; 159
    21d2:	98 0f       	add	r25, r24
    21d4:	9a 31       	cpi	r25, 0x1A	; 26
    21d6:	08 f4       	brcc	.+2      	; 0x21da <_ZN6SdFile10make83NameEPKcPh+0x5e>
    21d8:	80 52       	subi	r24, 0x20	; 32
    21da:	80 83       	st	Z, r24
    21dc:	93 2f       	mov	r25, r19
    21de:	da cf       	rjmp	.-76     	; 0x2194 <_ZN6SdFile10make83NameEPKcPh+0x18>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	fb 01       	movw	r30, r22
    21e4:	90 81       	ld	r25, Z
    21e6:	90 32       	cpi	r25, 0x20	; 32
    21e8:	09 f4       	brne	.+2      	; 0x21ec <_ZN6SdFile10make83NameEPKcPh+0x70>
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	08 95       	ret

000021ee <_ZN6SdFile8openRootEP8SdVolume>:
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	fc 01       	movw	r30, r24
    21f8:	25 81       	ldd	r18, Z+5	; 0x05
    21fa:	22 23       	and	r18, r18
    21fc:	11 f0       	breq	.+4      	; 0x2202 <__stack+0x3>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	41 c0       	rjmp	.+130    	; 0x2284 <__stack+0x85>
    2202:	8b 01       	movw	r16, r22
    2204:	ec 01       	movw	r28, r24
    2206:	fb 01       	movw	r30, r22
    2208:	87 89       	ldd	r24, Z+23	; 0x17
    220a:	80 31       	cpi	r24, 0x10	; 16
    220c:	b1 f4       	brne	.+44     	; 0x223a <__stack+0x3b>
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	1f 8a       	std	Y+23, r1	; 0x17
    2214:	18 8e       	std	Y+24, r1	; 0x18
    2216:	19 8e       	std	Y+25, r1	; 0x19
    2218:	1a 8e       	std	Y+26, r1	; 0x1a
    221a:	80 8d       	ldd	r24, Z+24	; 0x18
    221c:	91 8d       	ldd	r25, Z+25	; 0x19
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	25 e0       	ldi	r18, 0x05	; 5
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	2a 95       	dec	r18
    222e:	d1 f7       	brne	.-12     	; 0x2224 <__stack+0x25>
    2230:	8b 8b       	std	Y+19, r24	; 0x13
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	ad 8b       	std	Y+21, r26	; 0x15
    2236:	be 8b       	std	Y+22, r27	; 0x16
    2238:	14 c0       	rjmp	.+40     	; 0x2262 <__stack+0x63>
    223a:	80 32       	cpi	r24, 0x20	; 32
    223c:	01 f7       	brne	.-64     	; 0x21fe <_ZN6SdFile8openRootEP8SdVolume+0x10>
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	fb 01       	movw	r30, r22
    2244:	42 8d       	ldd	r20, Z+26	; 0x1a
    2246:	53 8d       	ldd	r21, Z+27	; 0x1b
    2248:	64 8d       	ldd	r22, Z+28	; 0x1c
    224a:	75 8d       	ldd	r23, Z+29	; 0x1d
    224c:	4f 8b       	std	Y+23, r20	; 0x17
    224e:	58 8f       	std	Y+24, r21	; 0x18
    2250:	69 8f       	std	Y+25, r22	; 0x19
    2252:	7a 8f       	std	Y+26, r23	; 0x1a
    2254:	9e 01       	movw	r18, r28
    2256:	2d 5e       	subi	r18, 0xED	; 237
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	c8 01       	movw	r24, r16
    225c:	02 d7       	rcall	.+3588   	; 0x3062 <_ZNK8SdVolume9chainSizeEmPm>
    225e:	88 23       	and	r24, r24
    2260:	71 f2       	breq	.-100    	; 0x21fe <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2262:	1c 8f       	std	Y+28, r17	; 0x1c
    2264:	0b 8f       	std	Y+27, r16	; 0x1b
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	8c 83       	std	Y+4, r24	; 0x04
    226a:	1e 82       	std	Y+6, r1	; 0x06
    226c:	1f 82       	std	Y+7, r1	; 0x07
    226e:	18 86       	std	Y+8, r1	; 0x08
    2270:	19 86       	std	Y+9, r1	; 0x09
    2272:	1a 86       	std	Y+10, r1	; 0x0a
    2274:	1b 86       	std	Y+11, r1	; 0x0b
    2276:	1c 86       	std	Y+12, r1	; 0x0c
    2278:	1d 86       	std	Y+13, r1	; 0x0d
    227a:	1e 86       	std	Y+14, r1	; 0x0e
    227c:	1f 86       	std	Y+15, r1	; 0x0f
    227e:	18 8a       	std	Y+16, r1	; 0x10
    2280:	19 8a       	std	Y+17, r1	; 0x11
    2282:	1a 8a       	std	Y+18, r1	; 0x12
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	08 95       	ret

0000228e <_ZN6SdFile4readEPvj>:
    228e:	2f 92       	push	r2
    2290:	3f 92       	push	r3
    2292:	4f 92       	push	r4
    2294:	5f 92       	push	r5
    2296:	6f 92       	push	r6
    2298:	7f 92       	push	r7
    229a:	8f 92       	push	r8
    229c:	9f 92       	push	r9
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	ec 01       	movw	r28, r24
    22b4:	5b 01       	movw	r10, r22
    22b6:	4a 01       	movw	r8, r20
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	81 11       	cpse	r24, r1
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <_ZN6SdFile4readEPvj+0x36>
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	9f ef       	ldi	r25, 0xFF	; 255
    22c2:	d4 c0       	rjmp	.+424    	; 0x246c <_ZN6SdFile4readEPvj+0x1de>
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	80 ff       	sbrs	r24, 0
    22c8:	fa cf       	rjmp	.-12     	; 0x22be <_ZN6SdFile4readEPvj+0x30>
    22ca:	4b 88       	ldd	r4, Y+19	; 0x13
    22cc:	5c 88       	ldd	r5, Y+20	; 0x14
    22ce:	6d 88       	ldd	r6, Y+21	; 0x15
    22d0:	7e 88       	ldd	r7, Y+22	; 0x16
    22d2:	4a 85       	ldd	r20, Y+10	; 0x0a
    22d4:	5b 85       	ldd	r21, Y+11	; 0x0b
    22d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    22d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    22da:	c4 01       	movw	r24, r8
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	93 01       	movw	r18, r6
    22e2:	82 01       	movw	r16, r4
    22e4:	04 1b       	sub	r16, r20
    22e6:	15 0b       	sbc	r17, r21
    22e8:	26 0b       	sbc	r18, r22
    22ea:	37 0b       	sbc	r19, r23
    22ec:	08 17       	cp	r16, r24
    22ee:	19 07       	cpc	r17, r25
    22f0:	2a 07       	cpc	r18, r26
    22f2:	3b 07       	cpc	r19, r27
    22f4:	18 f4       	brcc	.+6      	; 0x22fc <_ZN6SdFile4readEPvj+0x6e>
    22f6:	42 01       	movw	r8, r4
    22f8:	84 1a       	sub	r8, r20
    22fa:	95 0a       	sbc	r9, r21
    22fc:	24 01       	movw	r4, r8
    22fe:	1e 01       	movw	r2, r28
    2300:	26 e0       	ldi	r18, 0x06	; 6
    2302:	22 0e       	add	r2, r18
    2304:	31 1c       	adc	r3, r1
    2306:	41 14       	cp	r4, r1
    2308:	51 04       	cpc	r5, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <_ZN6SdFile4readEPvj+0x80>
    230c:	7d c0       	rjmp	.+250    	; 0x2408 <_ZN6SdFile4readEPvj+0x17a>
    230e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2310:	5b 85       	ldd	r21, Y+11	; 0x0b
    2312:	6c 85       	ldd	r22, Y+12	; 0x0c
    2314:	7d 85       	ldd	r23, Y+13	; 0x0d
    2316:	6a 01       	movw	r12, r20
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	d8 22       	and	r13, r24
    231c:	ed 81       	ldd	r30, Y+5	; 0x05
    231e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2322:	8a 01       	movw	r16, r20
    2324:	9b 01       	movw	r18, r22
    2326:	f9 e0       	ldi	r31, 0x09	; 9
    2328:	36 95       	lsr	r19
    232a:	27 95       	ror	r18
    232c:	17 95       	ror	r17
    232e:	07 95       	ror	r16
    2330:	fa 95       	dec	r31
    2332:	d1 f7       	brne	.-12     	; 0x2328 <_ZN6SdFile4readEPvj+0x9a>
    2334:	e2 30       	cpi	r30, 0x02	; 2
    2336:	61 f4       	brne	.+24     	; 0x2350 <_ZN6SdFile4readEPvj+0xc2>
    2338:	fc 01       	movw	r30, r24
    233a:	82 8d       	ldd	r24, Z+26	; 0x1a
    233c:	93 8d       	ldd	r25, Z+27	; 0x1b
    233e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2340:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	60 0f       	add	r22, r16
    2348:	71 1f       	adc	r23, r17
    234a:	82 1f       	adc	r24, r18
    234c:	93 1f       	adc	r25, r19
    234e:	3e c0       	rjmp	.+124    	; 0x23cc <_ZN6SdFile4readEPvj+0x13e>
    2350:	fc 01       	movw	r30, r24
    2352:	74 80       	ldd	r7, Z+4	; 0x04
    2354:	7a 94       	dec	r7
    2356:	70 22       	and	r7, r16
    2358:	c1 14       	cp	r12, r1
    235a:	d1 04       	cpc	r13, r1
    235c:	c1 f4       	brne	.+48     	; 0x238e <_ZN6SdFile4readEPvj+0x100>
    235e:	71 10       	cpse	r7, r1
    2360:	16 c0       	rjmp	.+44     	; 0x238e <_ZN6SdFile4readEPvj+0x100>
    2362:	45 2b       	or	r20, r21
    2364:	46 2b       	or	r20, r22
    2366:	47 2b       	or	r20, r23
    2368:	49 f4       	brne	.+18     	; 0x237c <_ZN6SdFile4readEPvj+0xee>
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2370:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2372:	8e 83       	std	Y+6, r24	; 0x06
    2374:	9f 83       	std	Y+7, r25	; 0x07
    2376:	a8 87       	std	Y+8, r26	; 0x08
    2378:	b9 87       	std	Y+9, r27	; 0x09
    237a:	09 c0       	rjmp	.+18     	; 0x238e <_ZN6SdFile4readEPvj+0x100>
    237c:	4e 81       	ldd	r20, Y+6	; 0x06
    237e:	5f 81       	ldd	r21, Y+7	; 0x07
    2380:	68 85       	ldd	r22, Y+8	; 0x08
    2382:	79 85       	ldd	r23, Y+9	; 0x09
    2384:	91 01       	movw	r18, r2
    2386:	eb d5       	rcall	.+3030   	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    2388:	88 23       	and	r24, r24
    238a:	09 f4       	brne	.+2      	; 0x238e <_ZN6SdFile4readEPvj+0x100>
    238c:	98 cf       	rjmp	.-208    	; 0x22be <_ZN6SdFile4readEPvj+0x30>
    238e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2390:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	a8 85       	ldd	r26, Y+8	; 0x08
    2398:	b9 85       	ldd	r27, Y+9	; 0x09
    239a:	02 97       	sbiw	r24, 0x02	; 2
    239c:	a1 09       	sbc	r26, r1
    239e:	b1 09       	sbc	r27, r1
    23a0:	05 84       	ldd	r0, Z+13	; 0x0d
    23a2:	04 c0       	rjmp	.+8      	; 0x23ac <_ZN6SdFile4readEPvj+0x11e>
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	aa 1f       	adc	r26, r26
    23aa:	bb 1f       	adc	r27, r27
    23ac:	0a 94       	dec	r0
    23ae:	d2 f7       	brpl	.-12     	; 0x23a4 <_ZN6SdFile4readEPvj+0x116>
    23b0:	46 85       	ldd	r20, Z+14	; 0x0e
    23b2:	57 85       	ldd	r21, Z+15	; 0x0f
    23b4:	60 89       	ldd	r22, Z+16	; 0x10
    23b6:	71 89       	ldd	r23, Z+17	; 0x11
    23b8:	84 0f       	add	r24, r20
    23ba:	95 1f       	adc	r25, r21
    23bc:	a6 1f       	adc	r26, r22
    23be:	b7 1f       	adc	r27, r23
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	67 0d       	add	r22, r7
    23c6:	71 1d       	adc	r23, r1
    23c8:	81 1d       	adc	r24, r1
    23ca:	91 1d       	adc	r25, r1
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	32 e0       	ldi	r19, 0x02	; 2
    23d0:	2c 19       	sub	r18, r12
    23d2:	3d 09       	sbc	r19, r13
    23d4:	32 01       	movw	r6, r4
    23d6:	24 15       	cp	r18, r4
    23d8:	35 05       	cpc	r19, r5
    23da:	08 f4       	brcc	.+2      	; 0x23de <_ZN6SdFile4readEPvj+0x150>
    23dc:	39 01       	movw	r6, r18
    23de:	2c 81       	ldd	r18, Y+4	; 0x04
    23e0:	26 fd       	sbrc	r18, 6
    23e2:	04 c0       	rjmp	.+8      	; 0x23ec <_ZN6SdFile4readEPvj+0x15e>
    23e4:	61 14       	cp	r6, r1
    23e6:	f2 e0       	ldi	r31, 0x02	; 2
    23e8:	7f 06       	cpc	r7, r31
    23ea:	71 f5       	brne	.+92     	; 0x2448 <_ZN6SdFile4readEPvj+0x1ba>
    23ec:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    23f0:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    23f4:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    23f8:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    23fc:	60 17       	cp	r22, r16
    23fe:	71 07       	cpc	r23, r17
    2400:	82 07       	cpc	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	19 f4       	brne	.+6      	; 0x240c <_ZN6SdFile4readEPvj+0x17e>
    2406:	20 c0       	rjmp	.+64     	; 0x2448 <_ZN6SdFile4readEPvj+0x1ba>
    2408:	c4 01       	movw	r24, r8
    240a:	30 c0       	rjmp	.+96     	; 0x246c <_ZN6SdFile4readEPvj+0x1de>
    240c:	75 01       	movw	r14, r10
    240e:	83 01       	movw	r16, r6
    2410:	96 01       	movw	r18, r12
    2412:	ab 01       	movw	r20, r22
    2414:	bc 01       	movw	r22, r24
    2416:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <_ZN8SdVolume7sdCard_E>
    241a:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN8SdVolume7sdCard_E+0x1>
    241e:	7c dd       	rcall	.-1288   	; 0x1f18 <_ZN7Sd2Card8readDataEmjjPh>
    2420:	88 23       	and	r24, r24
    2422:	09 f4       	brne	.+2      	; 0x2426 <_ZN6SdFile4readEPvj+0x198>
    2424:	4c cf       	rjmp	.-360    	; 0x22be <_ZN6SdFile4readEPvj+0x30>
    2426:	a6 0c       	add	r10, r6
    2428:	b7 1c       	adc	r11, r7
    242a:	8a 85       	ldd	r24, Y+10	; 0x0a
    242c:	9b 85       	ldd	r25, Y+11	; 0x0b
    242e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2430:	bd 85       	ldd	r27, Y+13	; 0x0d
    2432:	86 0d       	add	r24, r6
    2434:	97 1d       	adc	r25, r7
    2436:	a1 1d       	adc	r26, r1
    2438:	b1 1d       	adc	r27, r1
    243a:	8a 87       	std	Y+10, r24	; 0x0a
    243c:	9b 87       	std	Y+11, r25	; 0x0b
    243e:	ac 87       	std	Y+12, r26	; 0x0c
    2440:	bd 87       	std	Y+13, r27	; 0x0d
    2442:	46 18       	sub	r4, r6
    2444:	57 08       	sbc	r5, r7
    2446:	5f cf       	rjmp	.-322    	; 0x2306 <_ZN6SdFile4readEPvj+0x78>
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	2d d5       	rcall	.+2650   	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    244c:	88 23       	and	r24, r24
    244e:	09 f4       	brne	.+2      	; 0x2452 <_ZN6SdFile4readEPvj+0x1c4>
    2450:	36 cf       	rjmp	.-404    	; 0x22be <_ZN6SdFile4readEPvj+0x30>
    2452:	f6 01       	movw	r30, r12
    2454:	ef 59       	subi	r30, 0x9F	; 159
    2456:	f8 4f       	sbci	r31, 0xF8	; 248
    2458:	d5 01       	movw	r26, r10
    245a:	cf 01       	movw	r24, r30
    245c:	86 0d       	add	r24, r6
    245e:	97 1d       	adc	r25, r7
    2460:	8e 17       	cp	r24, r30
    2462:	9f 07       	cpc	r25, r31
    2464:	01 f3       	breq	.-64     	; 0x2426 <_ZN6SdFile4readEPvj+0x198>
    2466:	21 91       	ld	r18, Z+
    2468:	2d 93       	st	X+, r18
    246a:	fa cf       	rjmp	.-12     	; 0x2460 <_ZN6SdFile4readEPvj+0x1d2>
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	ff 90       	pop	r15
    2476:	ef 90       	pop	r14
    2478:	df 90       	pop	r13
    247a:	cf 90       	pop	r12
    247c:	bf 90       	pop	r11
    247e:	af 90       	pop	r10
    2480:	9f 90       	pop	r9
    2482:	8f 90       	pop	r8
    2484:	7f 90       	pop	r7
    2486:	6f 90       	pop	r6
    2488:	5f 90       	pop	r5
    248a:	4f 90       	pop	r4
    248c:	3f 90       	pop	r3
    248e:	2f 90       	pop	r2
    2490:	08 95       	ret

00002492 <_ZN6SdFile12readDirCacheEv>:
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	1f 92       	push	r1
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	fc 01       	movw	r30, r24
    24a4:	25 81       	ldd	r18, Z+5	; 0x05
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	18 f4       	brcc	.+6      	; 0x24b0 <_ZN6SdFile12readDirCacheEv+0x1e>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	32 c0       	rjmp	.+100    	; 0x2514 <_ZN6SdFile12readDirCacheEv+0x82>
    24b0:	8c 01       	movw	r16, r24
    24b2:	fc 01       	movw	r30, r24
    24b4:	42 85       	ldd	r20, Z+10	; 0x0a
    24b6:	53 85       	ldd	r21, Z+11	; 0x0b
    24b8:	64 85       	ldd	r22, Z+12	; 0x0c
    24ba:	75 85       	ldd	r23, Z+13	; 0x0d
    24bc:	85 e0       	ldi	r24, 0x05	; 5
    24be:	76 95       	lsr	r23
    24c0:	67 95       	ror	r22
    24c2:	57 95       	ror	r21
    24c4:	47 95       	ror	r20
    24c6:	8a 95       	dec	r24
    24c8:	d1 f7       	brne	.-12     	; 0x24be <_ZN6SdFile12readDirCacheEv+0x2c>
    24ca:	f4 2f       	mov	r31, r20
    24cc:	ff 70       	andi	r31, 0x0F	; 15
    24ce:	ff 2e       	mov	r15, r31
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	be 01       	movw	r22, r28
    24d6:	6f 5f       	subi	r22, 0xFF	; 255
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	c8 01       	movw	r24, r16
    24dc:	d8 de       	rcall	.-592    	; 0x228e <_ZN6SdFile4readEPvj>
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <_ZN6SdFile12readDirCacheEv+0x56>
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <_ZN6SdFile12readDirCacheEv+0x5a>
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
    24ea:	9f ef       	ldi	r25, 0xFF	; 255
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	e9 f2       	breq	.-70     	; 0x24aa <_ZN6SdFile12readDirCacheEv+0x18>
    24f0:	f8 01       	movw	r30, r16
    24f2:	82 85       	ldd	r24, Z+10	; 0x0a
    24f4:	93 85       	ldd	r25, Z+11	; 0x0b
    24f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    24f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    24fa:	4f 96       	adiw	r24, 0x1f	; 31
    24fc:	a1 1d       	adc	r26, r1
    24fe:	b1 1d       	adc	r27, r1
    2500:	82 87       	std	Z+10, r24	; 0x0a
    2502:	93 87       	std	Z+11, r25	; 0x0b
    2504:	a4 87       	std	Z+12, r26	; 0x0c
    2506:	b5 87       	std	Z+13, r27	; 0x0d
    2508:	f0 e2       	ldi	r31, 0x20	; 32
    250a:	ff 9e       	mul	r15, r31
    250c:	c0 01       	movw	r24, r0
    250e:	11 24       	eor	r1, r1
    2510:	8f 59       	subi	r24, 0x9F	; 159
    2512:	98 4f       	sbci	r25, 0xF8	; 248
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	08 95       	ret

00002522 <_ZN6SdFile7seekSetEm>:
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	ec 01       	movw	r28, r24
    253c:	8d 81       	ldd	r24, Y+5	; 0x05
    253e:	81 11       	cpse	r24, r1
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <_ZN6SdFile7seekSetEm+0x24>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	77 c0       	rjmp	.+238    	; 0x2634 <_ZN6SdFile7seekSetEm+0x112>
    2546:	0b 89       	ldd	r16, Y+19	; 0x13
    2548:	1c 89       	ldd	r17, Y+20	; 0x14
    254a:	2d 89       	ldd	r18, Y+21	; 0x15
    254c:	3e 89       	ldd	r19, Y+22	; 0x16
    254e:	04 17       	cp	r16, r20
    2550:	15 07       	cpc	r17, r21
    2552:	26 07       	cpc	r18, r22
    2554:	37 07       	cpc	r19, r23
    2556:	a8 f3       	brcs	.-22     	; 0x2542 <_ZN6SdFile7seekSetEm+0x20>
    2558:	6a 01       	movw	r12, r20
    255a:	7b 01       	movw	r14, r22
    255c:	82 30       	cpi	r24, 0x02	; 2
    255e:	29 f4       	brne	.+10     	; 0x256a <_ZN6SdFile7seekSetEm+0x48>
    2560:	ca 86       	std	Y+10, r12	; 0x0a
    2562:	db 86       	std	Y+11, r13	; 0x0b
    2564:	ec 86       	std	Y+12, r14	; 0x0c
    2566:	fd 86       	std	Y+13, r15	; 0x0d
    2568:	0d c0       	rjmp	.+26     	; 0x2584 <_ZN6SdFile7seekSetEm+0x62>
    256a:	c1 14       	cp	r12, r1
    256c:	d1 04       	cpc	r13, r1
    256e:	e1 04       	cpc	r14, r1
    2570:	f1 04       	cpc	r15, r1
    2572:	51 f4       	brne	.+20     	; 0x2588 <_ZN6SdFile7seekSetEm+0x66>
    2574:	1e 82       	std	Y+6, r1	; 0x06
    2576:	1f 82       	std	Y+7, r1	; 0x07
    2578:	18 86       	std	Y+8, r1	; 0x08
    257a:	19 86       	std	Y+9, r1	; 0x09
    257c:	1a 86       	std	Y+10, r1	; 0x0a
    257e:	1b 86       	std	Y+11, r1	; 0x0b
    2580:	1c 86       	std	Y+12, r1	; 0x0c
    2582:	1d 86       	std	Y+13, r1	; 0x0d
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	56 c0       	rjmp	.+172    	; 0x2634 <_ZN6SdFile7seekSetEm+0x112>
    2588:	8a 84       	ldd	r8, Y+10	; 0x0a
    258a:	9b 84       	ldd	r9, Y+11	; 0x0b
    258c:	ac 84       	ldd	r10, Y+12	; 0x0c
    258e:	bd 84       	ldd	r11, Y+13	; 0x0d
    2590:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2592:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2594:	25 85       	ldd	r18, Z+13	; 0x0d
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	27 5f       	subi	r18, 0xF7	; 247
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	b5 01       	movw	r22, r10
    259e:	a4 01       	movw	r20, r8
    25a0:	41 50       	subi	r20, 0x01	; 1
    25a2:	51 09       	sbc	r21, r1
    25a4:	61 09       	sbc	r22, r1
    25a6:	71 09       	sbc	r23, r1
    25a8:	02 2e       	mov	r0, r18
    25aa:	04 c0       	rjmp	.+8      	; 0x25b4 <_ZN6SdFile7seekSetEm+0x92>
    25ac:	76 95       	lsr	r23
    25ae:	67 95       	ror	r22
    25b0:	57 95       	ror	r21
    25b2:	47 95       	ror	r20
    25b4:	0a 94       	dec	r0
    25b6:	d2 f7       	brpl	.-12     	; 0x25ac <_ZN6SdFile7seekSetEm+0x8a>
    25b8:	d7 01       	movw	r26, r14
    25ba:	c6 01       	movw	r24, r12
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	a1 09       	sbc	r26, r1
    25c0:	b1 09       	sbc	r27, r1
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <_ZN6SdFile7seekSetEm+0xaa>
    25c4:	b6 95       	lsr	r27
    25c6:	a7 95       	ror	r26
    25c8:	97 95       	ror	r25
    25ca:	87 95       	ror	r24
    25cc:	2a 95       	dec	r18
    25ce:	d2 f7       	brpl	.-12     	; 0x25c4 <_ZN6SdFile7seekSetEm+0xa2>
    25d0:	84 17       	cp	r24, r20
    25d2:	95 07       	cpc	r25, r21
    25d4:	a6 07       	cpc	r26, r22
    25d6:	b7 07       	cpc	r27, r23
    25d8:	20 f0       	brcs	.+8      	; 0x25e2 <_ZN6SdFile7seekSetEm+0xc0>
    25da:	89 28       	or	r8, r9
    25dc:	8a 28       	or	r8, r10
    25de:	8b 28       	or	r8, r11
    25e0:	71 f4       	brne	.+28     	; 0x25fe <_ZN6SdFile7seekSetEm+0xdc>
    25e2:	4f 89       	ldd	r20, Y+23	; 0x17
    25e4:	58 8d       	ldd	r21, Y+24	; 0x18
    25e6:	69 8d       	ldd	r22, Y+25	; 0x19
    25e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ea:	4e 83       	std	Y+6, r20	; 0x06
    25ec:	5f 83       	std	Y+7, r21	; 0x07
    25ee:	68 87       	std	Y+8, r22	; 0x08
    25f0:	79 87       	std	Y+9, r23	; 0x09
    25f2:	4c 01       	movw	r8, r24
    25f4:	5d 01       	movw	r10, r26
    25f6:	8e 01       	movw	r16, r28
    25f8:	0a 5f       	subi	r16, 0xFA	; 250
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	15 c0       	rjmp	.+42     	; 0x2628 <_ZN6SdFile7seekSetEm+0x106>
    25fe:	84 1b       	sub	r24, r20
    2600:	95 0b       	sbc	r25, r21
    2602:	a6 0b       	sbc	r26, r22
    2604:	b7 0b       	sbc	r27, r23
    2606:	f5 cf       	rjmp	.-22     	; 0x25f2 <_ZN6SdFile7seekSetEm+0xd0>
    2608:	4e 81       	ldd	r20, Y+6	; 0x06
    260a:	5f 81       	ldd	r21, Y+7	; 0x07
    260c:	68 85       	ldd	r22, Y+8	; 0x08
    260e:	79 85       	ldd	r23, Y+9	; 0x09
    2610:	98 01       	movw	r18, r16
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	a3 d4       	rcall	.+2374   	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	89 1a       	sub	r8, r25
    261c:	91 08       	sbc	r9, r1
    261e:	a1 08       	sbc	r10, r1
    2620:	b1 08       	sbc	r11, r1
    2622:	88 23       	and	r24, r24
    2624:	09 f4       	brne	.+2      	; 0x2628 <_ZN6SdFile7seekSetEm+0x106>
    2626:	8d cf       	rjmp	.-230    	; 0x2542 <_ZN6SdFile7seekSetEm+0x20>
    2628:	81 14       	cp	r8, r1
    262a:	91 04       	cpc	r9, r1
    262c:	a1 04       	cpc	r10, r1
    262e:	b1 04       	cpc	r11, r1
    2630:	59 f7       	brne	.-42     	; 0x2608 <_ZN6SdFile7seekSetEm+0xe6>
    2632:	96 cf       	rjmp	.-212    	; 0x2560 <_ZN6SdFile7seekSetEm+0x3e>
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	bf 90       	pop	r11
    2646:	af 90       	pop	r10
    2648:	9f 90       	pop	r9
    264a:	8f 90       	pop	r8
    264c:	08 95       	ret

0000264e <_ZN6SdFile4syncEv>:
    264e:	0f 93       	push	r16
    2650:	1f 93       	push	r17
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	ec 01       	movw	r28, r24
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	88 23       	and	r24, r24
    265c:	b9 f1       	breq	.+110    	; 0x26cc <_ZN6SdFile4syncEv+0x7e>
    265e:	8c 81       	ldd	r24, Y+4	; 0x04
    2660:	87 ff       	sbrs	r24, 7
    2662:	2f c0       	rjmp	.+94     	; 0x26c2 <_ZN6SdFile4syncEv+0x74>
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	ce 01       	movw	r24, r28
    2668:	71 dd       	rcall	.-1310   	; 0x214c <_ZN6SdFile13cacheDirEntryEh>
    266a:	8c 01       	movw	r16, r24
    266c:	89 2b       	or	r24, r25
    266e:	71 f1       	breq	.+92     	; 0x26cc <_ZN6SdFile4syncEv+0x7e>
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	48 f4       	brcc	.+18     	; 0x2688 <_ZN6SdFile4syncEv+0x3a>
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	ad 89       	ldd	r26, Y+21	; 0x15
    267c:	be 89       	ldd	r27, Y+22	; 0x16
    267e:	f8 01       	movw	r30, r16
    2680:	84 8f       	std	Z+28, r24	; 0x1c
    2682:	95 8f       	std	Z+29, r25	; 0x1d
    2684:	a6 8f       	std	Z+30, r26	; 0x1e
    2686:	b7 8f       	std	Z+31, r27	; 0x1f
    2688:	8f 89       	ldd	r24, Y+23	; 0x17
    268a:	98 8d       	ldd	r25, Y+24	; 0x18
    268c:	a9 8d       	ldd	r26, Y+25	; 0x19
    268e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2690:	f8 01       	movw	r30, r16
    2692:	93 8f       	std	Z+27, r25	; 0x1b
    2694:	82 8f       	std	Z+26, r24	; 0x1a
    2696:	b5 8b       	std	Z+21, r27	; 0x15
    2698:	a4 8b       	std	Z+20, r26	; 0x14
    269a:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <_ZN6SdFile9dateTime_E>
    269e:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <_ZN6SdFile9dateTime_E+0x1>
    26a2:	30 97       	sbiw	r30, 0x00	; 0
    26a4:	59 f0       	breq	.+22     	; 0x26bc <_ZN6SdFile4syncEv+0x6e>
    26a6:	b8 01       	movw	r22, r16
    26a8:	6a 5e       	subi	r22, 0xEA	; 234
    26aa:	7f 4f       	sbci	r23, 0xFF	; 255
    26ac:	c8 01       	movw	r24, r16
    26ae:	48 96       	adiw	r24, 0x18	; 24
    26b0:	19 95       	eicall
    26b2:	f8 01       	movw	r30, r16
    26b4:	80 8d       	ldd	r24, Z+24	; 0x18
    26b6:	91 8d       	ldd	r25, Z+25	; 0x19
    26b8:	93 8b       	std	Z+19, r25	; 0x13
    26ba:	82 8b       	std	Z+18, r24	; 0x12
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	8f 77       	andi	r24, 0x7F	; 127
    26c0:	8c 83       	std	Y+4, r24	; 0x04
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	b4 c3       	rjmp	.+1896   	; 0x2e34 <_ZN8SdVolume10cacheFlushEv>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	08 95       	ret

000026d8 <_ZN6SdFile5closeEv>:
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	ec 01       	movw	r28, r24
    26de:	b7 df       	rcall	.-146    	; 0x264e <_ZN6SdFile4syncEv>
    26e0:	88 23       	and	r24, r24
    26e2:	11 f0       	breq	.+4      	; 0x26e8 <_ZN6SdFile5closeEv+0x10>
    26e4:	1d 82       	std	Y+5, r1	; 0x05
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <_ZN6SdFile8truncateEm>:
    26ee:	4f 92       	push	r4
    26f0:	5f 92       	push	r5
    26f2:	6f 92       	push	r6
    26f4:	7f 92       	push	r7
    26f6:	8f 92       	push	r8
    26f8:	9f 92       	push	r9
    26fa:	af 92       	push	r10
    26fc:	bf 92       	push	r11
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	00 d0       	rcall	.+0      	; 0x270c <_ZN6SdFile8truncateEm+0x1e>
    270c:	1f 92       	push	r1
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	fc 01       	movw	r30, r24
    2714:	85 81       	ldd	r24, Z+5	; 0x05
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	e1 f4       	brne	.+56     	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    271a:	84 81       	ldd	r24, Z+4	; 0x04
    271c:	81 ff       	sbrs	r24, 1
    271e:	19 c0       	rjmp	.+50     	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    2720:	83 89       	ldd	r24, Z+19	; 0x13
    2722:	94 89       	ldd	r25, Z+20	; 0x14
    2724:	a5 89       	ldd	r26, Z+21	; 0x15
    2726:	b6 89       	ldd	r27, Z+22	; 0x16
    2728:	84 17       	cp	r24, r20
    272a:	95 07       	cpc	r25, r21
    272c:	a6 07       	cpc	r26, r22
    272e:	b7 07       	cpc	r27, r23
    2730:	80 f0       	brcs	.+32     	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    2732:	89 2b       	or	r24, r25
    2734:	8a 2b       	or	r24, r26
    2736:	8b 2b       	or	r24, r27
    2738:	09 f4       	brne	.+2      	; 0x273c <_ZN6SdFile8truncateEm+0x4e>
    273a:	72 c0       	rjmp	.+228    	; 0x2820 <_ZN6SdFile8truncateEm+0x132>
    273c:	4a 01       	movw	r8, r20
    273e:	5b 01       	movw	r10, r22
    2740:	7f 01       	movw	r14, r30
    2742:	42 84       	ldd	r4, Z+10	; 0x0a
    2744:	53 84       	ldd	r5, Z+11	; 0x0b
    2746:	64 84       	ldd	r6, Z+12	; 0x0c
    2748:	75 84       	ldd	r7, Z+13	; 0x0d
    274a:	cf 01       	movw	r24, r30
    274c:	ea de       	rcall	.-556    	; 0x2522 <_ZN6SdFile7seekSetEm>
    274e:	81 11       	cpse	r24, r1
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <_ZN6SdFile8truncateEm+0x68>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	66 c0       	rjmp	.+204    	; 0x2822 <_ZN6SdFile8truncateEm+0x134>
    2756:	f7 01       	movw	r30, r14
    2758:	83 8d       	ldd	r24, Z+27	; 0x1b
    275a:	94 8d       	ldd	r25, Z+28	; 0x1c
    275c:	81 14       	cp	r8, r1
    275e:	91 04       	cpc	r9, r1
    2760:	a1 04       	cpc	r10, r1
    2762:	b1 04       	cpc	r11, r1
    2764:	69 f4       	brne	.+26     	; 0x2780 <_ZN6SdFile8truncateEm+0x92>
    2766:	47 89       	ldd	r20, Z+23	; 0x17
    2768:	50 8d       	ldd	r21, Z+24	; 0x18
    276a:	61 8d       	ldd	r22, Z+25	; 0x19
    276c:	72 8d       	ldd	r23, Z+26	; 0x1a
    276e:	92 d6       	rcall	.+3364   	; 0x3494 <_ZN8SdVolume9freeChainEm>
    2770:	88 23       	and	r24, r24
    2772:	79 f3       	breq	.-34     	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    2774:	f7 01       	movw	r30, r14
    2776:	17 8a       	std	Z+23, r1	; 0x17
    2778:	10 8e       	std	Z+24, r1	; 0x18
    277a:	11 8e       	std	Z+25, r1	; 0x19
    277c:	12 8e       	std	Z+26, r1	; 0x1a
    277e:	37 c0       	rjmp	.+110    	; 0x27ee <_ZN6SdFile8truncateEm+0x100>
    2780:	f7 01       	movw	r30, r14
    2782:	46 81       	ldd	r20, Z+6	; 0x06
    2784:	57 81       	ldd	r21, Z+7	; 0x07
    2786:	60 85       	ldd	r22, Z+8	; 0x08
    2788:	71 85       	ldd	r23, Z+9	; 0x09
    278a:	9e 01       	movw	r18, r28
    278c:	2f 5f       	subi	r18, 0xFF	; 255
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	e6 d3       	rcall	.+1996   	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    2792:	88 23       	and	r24, r24
    2794:	f1 f2       	breq	.-68     	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    2796:	49 81       	ldd	r20, Y+1	; 0x01
    2798:	5a 81       	ldd	r21, Y+2	; 0x02
    279a:	6b 81       	ldd	r22, Y+3	; 0x03
    279c:	7c 81       	ldd	r23, Y+4	; 0x04
    279e:	f7 01       	movw	r30, r14
    27a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    27a2:	94 8d       	ldd	r25, Z+28	; 0x1c
    27a4:	fc 01       	movw	r30, r24
    27a6:	27 89       	ldd	r18, Z+23	; 0x17
    27a8:	20 31       	cpi	r18, 0x10	; 16
    27aa:	29 f0       	breq	.+10     	; 0x27b6 <_ZN6SdFile8truncateEm+0xc8>
    27ac:	08 ef       	ldi	r16, 0xF8	; 248
    27ae:	1f ef       	ldi	r17, 0xFF	; 255
    27b0:	2f ef       	ldi	r18, 0xFF	; 255
    27b2:	3f e0       	ldi	r19, 0x0F	; 15
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <_ZN6SdFile8truncateEm+0xd0>
    27b6:	08 ef       	ldi	r16, 0xF8	; 248
    27b8:	1f ef       	ldi	r17, 0xFF	; 255
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 17       	cp	r20, r16
    27c0:	51 07       	cpc	r21, r17
    27c2:	62 07       	cpc	r22, r18
    27c4:	73 07       	cpc	r23, r19
    27c6:	98 f4       	brcc	.+38     	; 0x27ee <_ZN6SdFile8truncateEm+0x100>
    27c8:	65 d6       	rcall	.+3274   	; 0x3494 <_ZN8SdVolume9freeChainEm>
    27ca:	88 23       	and	r24, r24
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <_ZN6SdFile8truncateEm+0xe2>
    27ce:	c1 cf       	rjmp	.-126    	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    27d0:	f7 01       	movw	r30, r14
    27d2:	46 81       	ldd	r20, Z+6	; 0x06
    27d4:	57 81       	ldd	r21, Z+7	; 0x07
    27d6:	60 85       	ldd	r22, Z+8	; 0x08
    27d8:	71 85       	ldd	r23, Z+9	; 0x09
    27da:	0f ef       	ldi	r16, 0xFF	; 255
    27dc:	1f ef       	ldi	r17, 0xFF	; 255
    27de:	2f ef       	ldi	r18, 0xFF	; 255
    27e0:	3f e0       	ldi	r19, 0x0F	; 15
    27e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    27e4:	94 8d       	ldd	r25, Z+28	; 0x1c
    27e6:	a5 d4       	rcall	.+2378   	; 0x3132 <_ZN8SdVolume6fatPutEmm>
    27e8:	88 23       	and	r24, r24
    27ea:	09 f4       	brne	.+2      	; 0x27ee <_ZN6SdFile8truncateEm+0x100>
    27ec:	b2 cf       	rjmp	.-156    	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    27ee:	f7 01       	movw	r30, r14
    27f0:	83 8a       	std	Z+19, r8	; 0x13
    27f2:	94 8a       	std	Z+20, r9	; 0x14
    27f4:	a5 8a       	std	Z+21, r10	; 0x15
    27f6:	b6 8a       	std	Z+22, r11	; 0x16
    27f8:	84 81       	ldd	r24, Z+4	; 0x04
    27fa:	80 68       	ori	r24, 0x80	; 128
    27fc:	84 83       	std	Z+4, r24	; 0x04
    27fe:	c7 01       	movw	r24, r14
    2800:	26 df       	rcall	.-436    	; 0x264e <_ZN6SdFile4syncEv>
    2802:	88 23       	and	r24, r24
    2804:	09 f4       	brne	.+2      	; 0x2808 <_ZN6SdFile8truncateEm+0x11a>
    2806:	a5 cf       	rjmp	.-182    	; 0x2752 <_ZN6SdFile8truncateEm+0x64>
    2808:	b5 01       	movw	r22, r10
    280a:	a4 01       	movw	r20, r8
    280c:	48 14       	cp	r4, r8
    280e:	59 04       	cpc	r5, r9
    2810:	6a 04       	cpc	r6, r10
    2812:	7b 04       	cpc	r7, r11
    2814:	10 f4       	brcc	.+4      	; 0x281a <_ZN6SdFile8truncateEm+0x12c>
    2816:	b3 01       	movw	r22, r6
    2818:	a2 01       	movw	r20, r4
    281a:	c7 01       	movw	r24, r14
    281c:	82 de       	rcall	.-764    	; 0x2522 <_ZN6SdFile7seekSetEm>
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <_ZN6SdFile8truncateEm+0x134>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	bf 90       	pop	r11
    2838:	af 90       	pop	r10
    283a:	9f 90       	pop	r9
    283c:	8f 90       	pop	r8
    283e:	7f 90       	pop	r7
    2840:	6f 90       	pop	r6
    2842:	5f 90       	pop	r5
    2844:	4f 90       	pop	r4
    2846:	08 95       	ret

00002848 <_ZN6SdFile15openCachedEntryEhh>:
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	ec 01       	movw	r28, r24
    2850:	80 e2       	ldi	r24, 0x20	; 32
    2852:	68 9f       	mul	r22, r24
    2854:	f0 01       	movw	r30, r0
    2856:	11 24       	eor	r1, r1
    2858:	ef 59       	subi	r30, 0x9F	; 159
    285a:	f8 4f       	sbci	r31, 0xF8	; 248
    285c:	93 85       	ldd	r25, Z+11	; 0x0b
    285e:	91 71       	andi	r25, 0x11	; 17
    2860:	29 f0       	breq	.+10     	; 0x286c <_ZN6SdFile15openCachedEntryEhh+0x24>
    2862:	84 2f       	mov	r24, r20
    2864:	82 74       	andi	r24, 0x42	; 66
    2866:	11 f0       	breq	.+4      	; 0x286c <_ZN6SdFile15openCachedEntryEhh+0x24>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	50 c0       	rjmp	.+160    	; 0x290c <_ZN6SdFile15openCachedEntryEhh+0xc4>
    286c:	14 2f       	mov	r17, r20
    286e:	6a 8b       	std	Y+18, r22	; 0x12
    2870:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2874:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2878:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    287c:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2880:	8e 87       	std	Y+14, r24	; 0x0e
    2882:	9f 87       	std	Y+15, r25	; 0x0f
    2884:	a8 8b       	std	Y+16, r26	; 0x10
    2886:	b9 8b       	std	Y+17, r27	; 0x11
    2888:	44 89       	ldd	r20, Z+20	; 0x14
    288a:	55 89       	ldd	r21, Z+21	; 0x15
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	ba 01       	movw	r22, r20
    2892:	55 27       	eor	r21, r21
    2894:	44 27       	eor	r20, r20
    2896:	82 8d       	ldd	r24, Z+26	; 0x1a
    2898:	93 8d       	ldd	r25, Z+27	; 0x1b
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	48 2b       	or	r20, r24
    28a0:	59 2b       	or	r21, r25
    28a2:	6a 2b       	or	r22, r26
    28a4:	7b 2b       	or	r23, r27
    28a6:	4f 8b       	std	Y+23, r20	; 0x17
    28a8:	58 8f       	std	Y+24, r21	; 0x18
    28aa:	69 8f       	std	Y+25, r22	; 0x19
    28ac:	7a 8f       	std	Y+26, r23	; 0x1a
    28ae:	83 85       	ldd	r24, Z+11	; 0x0b
    28b0:	88 71       	andi	r24, 0x18	; 24
    28b2:	51 f4       	brne	.+20     	; 0x28c8 <_ZN6SdFile15openCachedEntryEhh+0x80>
    28b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    28b6:	95 8d       	ldd	r25, Z+29	; 0x1d
    28b8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    28ba:	b7 8d       	ldd	r27, Z+31	; 0x1f
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	9c 8b       	std	Y+20, r25	; 0x14
    28c0:	ad 8b       	std	Y+21, r26	; 0x15
    28c2:	be 8b       	std	Y+22, r27	; 0x16
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	0b c0       	rjmp	.+22     	; 0x28de <_ZN6SdFile15openCachedEntryEhh+0x96>
    28c8:	80 31       	cpi	r24, 0x10	; 16
    28ca:	71 f6       	brne	.-100    	; 0x2868 <_ZN6SdFile15openCachedEntryEhh+0x20>
    28cc:	9e 01       	movw	r18, r28
    28ce:	2d 5e       	subi	r18, 0xED	; 237
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d6:	c5 d3       	rcall	.+1930   	; 0x3062 <_ZNK8SdVolume9chainSizeEmPm>
    28d8:	88 23       	and	r24, r24
    28da:	31 f2       	breq	.-116    	; 0x2868 <_ZN6SdFile15openCachedEntryEhh+0x20>
    28dc:	84 e0       	ldi	r24, 0x04	; 4
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	81 2f       	mov	r24, r17
    28e2:	8f 70       	andi	r24, 0x0F	; 15
    28e4:	8c 83       	std	Y+4, r24	; 0x04
    28e6:	1e 82       	std	Y+6, r1	; 0x06
    28e8:	1f 82       	std	Y+7, r1	; 0x07
    28ea:	18 86       	std	Y+8, r1	; 0x08
    28ec:	19 86       	std	Y+9, r1	; 0x09
    28ee:	1a 86       	std	Y+10, r1	; 0x0a
    28f0:	1b 86       	std	Y+11, r1	; 0x0b
    28f2:	1c 86       	std	Y+12, r1	; 0x0c
    28f4:	1d 86       	std	Y+13, r1	; 0x0d
    28f6:	16 ff       	sbrs	r17, 6
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <_ZN6SdFile15openCachedEntryEhh+0xc2>
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	ba 01       	movw	r22, r20
    2900:	ce 01       	movw	r24, r28
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	f2 ce       	rjmp	.-540    	; 0x26ee <_ZN6SdFile8truncateEm>
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	08 95       	ret

00002914 <_ZN6SdFile4openEPS_PKch>:
    2914:	bf 92       	push	r11
    2916:	cf 92       	push	r12
    2918:	df 92       	push	r13
    291a:	ef 92       	push	r14
    291c:	ff 92       	push	r15
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	2b 97       	sbiw	r28, 0x0b	; 11
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	fc 01       	movw	r30, r24
    2938:	35 81       	ldd	r19, Z+5	; 0x05
    293a:	31 11       	cpse	r19, r1
    293c:	b9 c0       	rjmp	.+370    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    293e:	c2 2e       	mov	r12, r18
    2940:	8b 01       	movw	r16, r22
    2942:	7c 01       	movw	r14, r24
    2944:	be 01       	movw	r22, r28
    2946:	6f 5f       	subi	r22, 0xFF	; 255
    2948:	7f 4f       	sbci	r23, 0xFF	; 255
    294a:	ca 01       	movw	r24, r20
    294c:	17 dc       	rcall	.-2002   	; 0x217c <_ZN6SdFile10make83NameEPKcPh>
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <_ZN6SdFile4openEPS_PKch+0x40>
    2952:	ae c0       	rjmp	.+348    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    2954:	f8 01       	movw	r30, r16
    2956:	83 8d       	ldd	r24, Z+27	; 0x1b
    2958:	94 8d       	ldd	r25, Z+28	; 0x1c
    295a:	f7 01       	movw	r30, r14
    295c:	94 8f       	std	Z+28, r25	; 0x1c
    295e:	83 8f       	std	Z+27, r24	; 0x1b
    2960:	f8 01       	movw	r30, r16
    2962:	16 82       	std	Z+6, r1	; 0x06
    2964:	17 82       	std	Z+7, r1	; 0x07
    2966:	10 86       	std	Z+8, r1	; 0x08
    2968:	11 86       	std	Z+9, r1	; 0x09
    296a:	12 86       	std	Z+10, r1	; 0x0a
    296c:	13 86       	std	Z+11, r1	; 0x0b
    296e:	14 86       	std	Z+12, r1	; 0x0c
    2970:	15 86       	std	Z+13, r1	; 0x0d
    2972:	d1 2c       	mov	r13, r1
    2974:	f8 01       	movw	r30, r16
    2976:	82 85       	ldd	r24, Z+10	; 0x0a
    2978:	93 85       	ldd	r25, Z+11	; 0x0b
    297a:	a4 85       	ldd	r26, Z+12	; 0x0c
    297c:	b5 85       	ldd	r27, Z+13	; 0x0d
    297e:	43 89       	ldd	r20, Z+19	; 0x13
    2980:	54 89       	ldd	r21, Z+20	; 0x14
    2982:	65 89       	ldd	r22, Z+21	; 0x15
    2984:	76 89       	ldd	r23, Z+22	; 0x16
    2986:	84 17       	cp	r24, r20
    2988:	95 07       	cpc	r25, r21
    298a:	a6 07       	cpc	r26, r22
    298c:	b7 07       	cpc	r27, r23
    298e:	08 f0       	brcs	.+2      	; 0x2992 <_ZN6SdFile4openEPS_PKch+0x7e>
    2990:	3d c0       	rjmp	.+122    	; 0x2a0c <_ZN6SdFile4openEPS_PKch+0xf8>
    2992:	25 e0       	ldi	r18, 0x05	; 5
    2994:	b6 95       	lsr	r27
    2996:	a7 95       	ror	r26
    2998:	97 95       	ror	r25
    299a:	87 95       	ror	r24
    299c:	2a 95       	dec	r18
    299e:	d1 f7       	brne	.-12     	; 0x2994 <_ZN6SdFile4openEPS_PKch+0x80>
    29a0:	f8 2f       	mov	r31, r24
    29a2:	ff 70       	andi	r31, 0x0F	; 15
    29a4:	bf 2e       	mov	r11, r31
    29a6:	c8 01       	movw	r24, r16
    29a8:	74 dd       	rcall	.-1304   	; 0x2492 <_ZN6SdFile12readDirCacheEv>
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <_ZN6SdFile4openEPS_PKch+0x9c>
    29ae:	80 c0       	rjmp	.+256    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    29b0:	fc 01       	movw	r30, r24
    29b2:	20 81       	ld	r18, Z
    29b4:	22 23       	and	r18, r18
    29b6:	a1 f0       	breq	.+40     	; 0x29e0 <_ZN6SdFile4openEPS_PKch+0xcc>
    29b8:	25 3e       	cpi	r18, 0xE5	; 229
    29ba:	09 f4       	brne	.+2      	; 0x29be <_ZN6SdFile4openEPS_PKch+0xaa>
    29bc:	7b c0       	rjmp	.+246    	; 0x2ab4 <_ZN6SdFile4openEPS_PKch+0x1a0>
    29be:	4b e0       	ldi	r20, 0x0B	; 11
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	bc 01       	movw	r22, r24
    29c4:	ce 01       	movw	r24, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <memcmp>
    29cc:	89 2b       	or	r24, r25
    29ce:	91 f6       	brne	.-92     	; 0x2974 <_ZN6SdFile4openEPS_PKch+0x60>
    29d0:	8c 2d       	mov	r24, r12
    29d2:	80 73       	andi	r24, 0x30	; 48
    29d4:	80 33       	cpi	r24, 0x30	; 48
    29d6:	09 f4       	brne	.+2      	; 0x29da <_ZN6SdFile4openEPS_PKch+0xc6>
    29d8:	6b c0       	rjmp	.+214    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    29da:	4c 2d       	mov	r20, r12
    29dc:	6b 2d       	mov	r22, r11
    29de:	65 c0       	rjmp	.+202    	; 0x2aaa <_ZN6SdFile4openEPS_PKch+0x196>
    29e0:	d1 10       	cpse	r13, r1
    29e2:	12 c0       	rjmp	.+36     	; 0x2a08 <_ZN6SdFile4openEPS_PKch+0xf4>
    29e4:	f7 01       	movw	r30, r14
    29e6:	b2 8a       	std	Z+18, r11	; 0x12
    29e8:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    29ec:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    29f0:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    29f4:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    29f8:	46 87       	std	Z+14, r20	; 0x0e
    29fa:	57 87       	std	Z+15, r21	; 0x0f
    29fc:	60 8b       	std	Z+16, r22	; 0x10
    29fe:	71 8b       	std	Z+17, r23	; 0x11
    2a00:	fc 01       	movw	r30, r24
    2a02:	80 81       	ld	r24, Z
    2a04:	81 11       	cpse	r24, r1
    2a06:	59 c0       	rjmp	.+178    	; 0x2aba <_ZN6SdFile4openEPS_PKch+0x1a6>
    2a08:	dd 24       	eor	r13, r13
    2a0a:	d3 94       	inc	r13
    2a0c:	8c 2d       	mov	r24, r12
    2a0e:	82 71       	andi	r24, 0x12	; 18
    2a10:	82 31       	cpi	r24, 0x12	; 18
    2a12:	09 f0       	breq	.+2      	; 0x2a16 <_ZN6SdFile4openEPS_PKch+0x102>
    2a14:	4d c0       	rjmp	.+154    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    2a16:	dd 20       	and	r13, r13
    2a18:	39 f0       	breq	.+14     	; 0x2a28 <_ZN6SdFile4openEPS_PKch+0x114>
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	96 db       	rcall	.-2260   	; 0x214c <_ZN6SdFile13cacheDirEntryEh>
    2a20:	8c 01       	movw	r16, r24
    2a22:	89 2b       	or	r24, r25
    2a24:	71 f4       	brne	.+28     	; 0x2a42 <_ZN6SdFile4openEPS_PKch+0x12e>
    2a26:	44 c0       	rjmp	.+136    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    2a28:	f8 01       	movw	r30, r16
    2a2a:	85 81       	ldd	r24, Z+5	; 0x05
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <_ZN6SdFile4openEPS_PKch+0x11e>
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    2a32:	c8 01       	movw	r24, r16
    2a34:	2d db       	rcall	.-2470   	; 0x2090 <_ZN6SdFile13addDirClusterEv>
    2a36:	88 23       	and	r24, r24
    2a38:	d9 f1       	breq	.+118    	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    2a3a:	f7 01       	movw	r30, r14
    2a3c:	12 8a       	std	Z+18, r1	; 0x12
    2a3e:	01 e6       	ldi	r16, 0x61	; 97
    2a40:	17 e0       	ldi	r17, 0x07	; 7
    2a42:	80 e2       	ldi	r24, 0x20	; 32
    2a44:	f8 01       	movw	r30, r16
    2a46:	11 92       	st	Z+, r1
    2a48:	8a 95       	dec	r24
    2a4a:	e9 f7       	brne	.-6      	; 0x2a46 <_ZN6SdFile4openEPS_PKch+0x132>
    2a4c:	8b e0       	ldi	r24, 0x0B	; 11
    2a4e:	fe 01       	movw	r30, r28
    2a50:	31 96       	adiw	r30, 0x01	; 1
    2a52:	d8 01       	movw	r26, r16
    2a54:	01 90       	ld	r0, Z+
    2a56:	0d 92       	st	X+, r0
    2a58:	8a 95       	dec	r24
    2a5a:	e1 f7       	brne	.-8      	; 0x2a54 <_ZN6SdFile4openEPS_PKch+0x140>
    2a5c:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <_ZN6SdFile9dateTime_E>
    2a60:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <_ZN6SdFile9dateTime_E+0x1>
    2a64:	30 97       	sbiw	r30, 0x00	; 0
    2a66:	39 f0       	breq	.+14     	; 0x2a76 <_ZN6SdFile4openEPS_PKch+0x162>
    2a68:	b8 01       	movw	r22, r16
    2a6a:	62 5f       	subi	r22, 0xF2	; 242
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	c8 01       	movw	r24, r16
    2a70:	40 96       	adiw	r24, 0x10	; 16
    2a72:	19 95       	eicall
    2a74:	09 c0       	rjmp	.+18     	; 0x2a88 <_ZN6SdFile4openEPS_PKch+0x174>
    2a76:	81 e2       	ldi	r24, 0x21	; 33
    2a78:	98 e2       	ldi	r25, 0x28	; 40
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	91 8b       	std	Z+17, r25	; 0x11
    2a7e:	80 8b       	std	Z+16, r24	; 0x10
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	98 e0       	ldi	r25, 0x08	; 8
    2a84:	97 87       	std	Z+15, r25	; 0x0f
    2a86:	86 87       	std	Z+14, r24	; 0x0e
    2a88:	f8 01       	movw	r30, r16
    2a8a:	80 89       	ldd	r24, Z+16	; 0x10
    2a8c:	91 89       	ldd	r25, Z+17	; 0x11
    2a8e:	93 8b       	std	Z+19, r25	; 0x13
    2a90:	82 8b       	std	Z+18, r24	; 0x12
    2a92:	91 8f       	std	Z+25, r25	; 0x19
    2a94:	80 8f       	std	Z+24, r24	; 0x18
    2a96:	86 85       	ldd	r24, Z+14	; 0x0e
    2a98:	97 85       	ldd	r25, Z+15	; 0x0f
    2a9a:	97 8b       	std	Z+23, r25	; 0x17
    2a9c:	86 8b       	std	Z+22, r24	; 0x16
    2a9e:	ca d1       	rcall	.+916    	; 0x2e34 <_ZN8SdVolume10cacheFlushEv>
    2aa0:	88 23       	and	r24, r24
    2aa2:	31 f0       	breq	.+12     	; 0x2ab0 <_ZN6SdFile4openEPS_PKch+0x19c>
    2aa4:	4c 2d       	mov	r20, r12
    2aa6:	f7 01       	movw	r30, r14
    2aa8:	62 89       	ldd	r22, Z+18	; 0x12
    2aaa:	c7 01       	movw	r24, r14
    2aac:	cd de       	rcall	.-614    	; 0x2848 <_ZN6SdFile15openCachedEntryEhh>
    2aae:	08 c0       	rjmp	.+16     	; 0x2ac0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	06 c0       	rjmp	.+12     	; 0x2ac0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    2ab4:	dd 20       	and	r13, r13
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <_ZN6SdFile4openEPS_PKch+0x1a6>
    2ab8:	95 cf       	rjmp	.-214    	; 0x29e4 <_ZN6SdFile4openEPS_PKch+0xd0>
    2aba:	dd 24       	eor	r13, r13
    2abc:	d3 94       	inc	r13
    2abe:	5a cf       	rjmp	.-332    	; 0x2974 <_ZN6SdFile4openEPS_PKch+0x60>
    2ac0:	2b 96       	adiw	r28, 0x0b	; 11
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	bf 90       	pop	r11
    2ade:	08 95       	ret

00002ae0 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2ae0:	2f 92       	push	r2
    2ae2:	3f 92       	push	r3
    2ae4:	4f 92       	push	r4
    2ae6:	5f 92       	push	r5
    2ae8:	6f 92       	push	r6
    2aea:	7f 92       	push	r7
    2aec:	8f 92       	push	r8
    2aee:	9f 92       	push	r9
    2af0:	af 92       	push	r10
    2af2:	bf 92       	push	r11
    2af4:	cf 92       	push	r12
    2af6:	df 92       	push	r13
    2af8:	ef 92       	push	r14
    2afa:	ff 92       	push	r15
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <_ZN6SdFile5writeEPKvj+0x26>
    2b06:	1f 92       	push	r1
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	8c 01       	movw	r16, r24
    2b0e:	6b 01       	movw	r12, r22
    2b10:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2b12:	dc 01       	movw	r26, r24
    2b14:	15 96       	adiw	r26, 0x05	; 5
    2b16:	8c 91       	ld	r24, X
    2b18:	15 97       	sbiw	r26, 0x05	; 5
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	c1 f4       	brne	.+48     	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>
    2b1e:	14 96       	adiw	r26, 0x04	; 4
    2b20:	8c 91       	ld	r24, X
    2b22:	81 ff       	sbrs	r24, 1
    2b24:	14 c0       	rjmp	.+40     	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2b26:	82 ff       	sbrs	r24, 2
    2b28:	1c c0       	rjmp	.+56     	; 0x2b62 <_ZN6SdFile5writeEPKvj+0x82>
    2b2a:	f8 01       	movw	r30, r16
    2b2c:	43 89       	ldd	r20, Z+19	; 0x13
    2b2e:	54 89       	ldd	r21, Z+20	; 0x14
    2b30:	65 89       	ldd	r22, Z+21	; 0x15
    2b32:	76 89       	ldd	r23, Z+22	; 0x16
    2b34:	82 85       	ldd	r24, Z+10	; 0x0a
    2b36:	93 85       	ldd	r25, Z+11	; 0x0b
    2b38:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b3a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b3c:	84 17       	cp	r24, r20
    2b3e:	95 07       	cpc	r25, r21
    2b40:	a6 07       	cpc	r26, r22
    2b42:	b7 07       	cpc	r27, r23
    2b44:	71 f0       	breq	.+28     	; 0x2b62 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2b46:	c8 01       	movw	r24, r16
    2b48:	ec dc       	rcall	.-1576   	; 0x2522 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	0a c0       	rjmp	.+20     	; 0x2b62 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	d8 01       	movw	r26, r16
    2b54:	13 96       	adiw	r26, 0x03	; 3
    2b56:	9c 93       	st	X, r25
    2b58:	8e 93       	st	-X, r24
    2b5a:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	42 c1       	rjmp	.+644    	; 0x2de6 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2b62:	41 01       	movw	r8, r2
    2b64:	82 c0       	rjmp	.+260    	; 0x2c6a <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2b66:	5b 96       	adiw	r26, 0x1b	; 27
    2b68:	8d 91       	ld	r24, X+
    2b6a:	9c 91       	ld	r25, X
    2b6c:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2b6e:	fc 01       	movw	r30, r24
    2b70:	74 80       	ldd	r7, Z+4	; 0x04
    2b72:	2f ef       	ldi	r18, 0xFF	; 255
    2b74:	27 0d       	add	r18, r7
    2b76:	2a 01       	movw	r4, r20
    2b78:	3b 01       	movw	r6, r22
    2b7a:	39 e0       	ldi	r19, 0x09	; 9
    2b7c:	76 94       	lsr	r7
    2b7e:	67 94       	ror	r6
    2b80:	57 94       	ror	r5
    2b82:	47 94       	ror	r4
    2b84:	3a 95       	dec	r19
    2b86:	d1 f7       	brne	.-12     	; 0x2b7c <_ZN6SdFile5writeEPKvj+0x9c>
    2b88:	72 2e       	mov	r7, r18
    2b8a:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2b8c:	7a 01       	movw	r14, r20
    2b8e:	f1 e0       	ldi	r31, 0x01	; 1
    2b90:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    2b92:	77 20       	and	r7, r7
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <_ZN6SdFile5writeEPKvj+0xb8>
    2b96:	75 c0       	rjmp	.+234    	; 0x2c82 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	92 e0       	ldi	r25, 0x02	; 2
    2b9c:	8e 19       	sub	r24, r14
    2b9e:	9f 09       	sbc	r25, r15
    2ba0:	54 01       	movw	r10, r8
    2ba2:	88 15       	cp	r24, r8
    2ba4:	99 05       	cpc	r25, r9
    2ba6:	08 f4       	brcc	.+2      	; 0x2baa <_ZN6SdFile5writeEPKvj+0xca>
    2ba8:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2baa:	d8 01       	movw	r26, r16
    2bac:	5b 96       	adiw	r26, 0x1b	; 27
    2bae:	2d 91       	ld	r18, X+
    2bb0:	3c 91       	ld	r19, X
    2bb2:	5c 97       	sbiw	r26, 0x1c	; 28
    2bb4:	16 96       	adiw	r26, 0x06	; 6
    2bb6:	8d 91       	ld	r24, X+
    2bb8:	9d 91       	ld	r25, X+
    2bba:	0d 90       	ld	r0, X+
    2bbc:	bc 91       	ld	r27, X
    2bbe:	a0 2d       	mov	r26, r0
    2bc0:	02 97       	sbiw	r24, 0x02	; 2
    2bc2:	a1 09       	sbc	r26, r1
    2bc4:	b1 09       	sbc	r27, r1
    2bc6:	f9 01       	movw	r30, r18
    2bc8:	05 84       	ldd	r0, Z+13	; 0x0d
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <_ZN6SdFile5writeEPKvj+0xf4>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	aa 1f       	adc	r26, r26
    2bd2:	bb 1f       	adc	r27, r27
    2bd4:	0a 94       	dec	r0
    2bd6:	d2 f7       	brpl	.-12     	; 0x2bcc <_ZN6SdFile5writeEPKvj+0xec>
    2bd8:	46 85       	ldd	r20, Z+14	; 0x0e
    2bda:	57 85       	ldd	r21, Z+15	; 0x0f
    2bdc:	60 89       	ldd	r22, Z+16	; 0x10
    2bde:	71 89       	ldd	r23, Z+17	; 0x11
    2be0:	84 0f       	add	r24, r20
    2be2:	95 1f       	adc	r25, r21
    2be4:	a6 1f       	adc	r26, r22
    2be6:	b7 1f       	adc	r27, r23
    2be8:	9c 01       	movw	r18, r24
    2bea:	ad 01       	movw	r20, r26
    2bec:	27 0d       	add	r18, r7
    2bee:	31 1d       	adc	r19, r1
    2bf0:	41 1d       	adc	r20, r1
    2bf2:	51 1d       	adc	r21, r1
    2bf4:	29 01       	movw	r4, r18
    2bf6:	3a 01       	movw	r6, r20
    if (n == 512) {
    2bf8:	a1 14       	cp	r10, r1
    2bfa:	32 e0       	ldi	r19, 0x02	; 2
    2bfc:	b3 06       	cpc	r11, r19
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <_ZN6SdFile5writeEPKvj+0x122>
    2c00:	85 c0       	rjmp	.+266    	; 0x2d0c <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2c02:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2c06:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c0a:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c0e:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c12:	48 16       	cp	r4, r24
    2c14:	59 06       	cpc	r5, r25
    2c16:	6a 06       	cpc	r6, r26
    2c18:	7b 06       	cpc	r7, r27
    2c1a:	59 f4       	brne	.+22     	; 0x2c32 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2c1c:	8f ef       	ldi	r24, 0xFF	; 255
    2c1e:	9f ef       	ldi	r25, 0xFF	; 255
    2c20:	dc 01       	movw	r26, r24
    2c22:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2c26:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c2a:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c2e:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2c32:	96 01       	movw	r18, r12
    2c34:	b3 01       	movw	r22, r6
    2c36:	a2 01       	movw	r20, r4
    2c38:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <_ZN8SdVolume7sdCard_E>
    2c3c:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN8SdVolume7sdCard_E+0x1>
    2c40:	b3 d9       	rcall	.-3226   	; 0x1fa8 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2c42:	88 23       	and	r24, r24
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <_ZN6SdFile5writeEPKvj+0x168>
    2c46:	83 cf       	rjmp	.-250    	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    2c48:	9e ef       	ldi	r25, 0xFE	; 254
    2c4a:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2c4c:	8a 18       	sub	r8, r10
    2c4e:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2c50:	f8 01       	movw	r30, r16
    2c52:	82 85       	ldd	r24, Z+10	; 0x0a
    2c54:	93 85       	ldd	r25, Z+11	; 0x0b
    2c56:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c58:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c5a:	8a 0d       	add	r24, r10
    2c5c:	9b 1d       	adc	r25, r11
    2c5e:	a1 1d       	adc	r26, r1
    2c60:	b1 1d       	adc	r27, r1
    2c62:	82 87       	std	Z+10, r24	; 0x0a
    2c64:	93 87       	std	Z+11, r25	; 0x0b
    2c66:	a4 87       	std	Z+12, r26	; 0x0c
    2c68:	b5 87       	std	Z+13, r27	; 0x0d
    2c6a:	d8 01       	movw	r26, r16
    2c6c:	1a 96       	adiw	r26, 0x0a	; 10
    2c6e:	4d 91       	ld	r20, X+
    2c70:	5d 91       	ld	r21, X+
    2c72:	6d 91       	ld	r22, X+
    2c74:	7c 91       	ld	r23, X
    2c76:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2c78:	81 14       	cp	r8, r1
    2c7a:	91 04       	cpc	r9, r1
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <_ZN6SdFile5writeEPKvj+0x1a0>
    2c7e:	73 cf       	rjmp	.-282    	; 0x2b66 <_ZN6SdFile5writeEPKvj+0x86>
    2c80:	83 c0       	rjmp	.+262    	; 0x2d88 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2c82:	e1 14       	cp	r14, r1
    2c84:	f1 04       	cpc	r15, r1
    2c86:	09 f0       	breq	.+2      	; 0x2c8a <_ZN6SdFile5writeEPKvj+0x1aa>
    2c88:	87 cf       	rjmp	.-242    	; 0x2b98 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    2c8a:	16 96       	adiw	r26, 0x06	; 6
    2c8c:	4d 91       	ld	r20, X+
    2c8e:	5d 91       	ld	r21, X+
    2c90:	6d 91       	ld	r22, X+
    2c92:	7c 91       	ld	r23, X
    2c94:	19 97       	sbiw	r26, 0x09	; 9
    2c96:	41 15       	cp	r20, r1
    2c98:	51 05       	cpc	r21, r1
    2c9a:	61 05       	cpc	r22, r1
    2c9c:	71 05       	cpc	r23, r1
    2c9e:	59 f4       	brne	.+22     	; 0x2cb6 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    2ca0:	57 96       	adiw	r26, 0x17	; 23
    2ca2:	8d 91       	ld	r24, X+
    2ca4:	9d 91       	ld	r25, X+
    2ca6:	0d 90       	ld	r0, X+
    2ca8:	bc 91       	ld	r27, X
    2caa:	a0 2d       	mov	r26, r0
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	a1 05       	cpc	r26, r1
    2cb0:	b1 05       	cpc	r27, r1
    2cb2:	31 f5       	brne	.+76     	; 0x2d00 <_ZN6SdFile5writeEPKvj+0x220>
    2cb4:	20 c0       	rjmp	.+64     	; 0x2cf6 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	2f 5f       	subi	r18, 0xFF	; 255
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	50 d1       	rcall	.+672    	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    2cbe:	88 23       	and	r24, r24
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <_ZN6SdFile5writeEPKvj+0x1e4>
    2cc2:	4d cf       	rjmp	.-358    	; 0x2b5e <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	ab 81       	ldd	r26, Y+3	; 0x03
    2cca:	bc 81       	ldd	r27, Y+4	; 0x04
    2ccc:	f8 01       	movw	r30, r16
    2cce:	23 8d       	ldd	r18, Z+27	; 0x1b
    2cd0:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2cd2:	f9 01       	movw	r30, r18
    2cd4:	27 89       	ldd	r18, Z+23	; 0x17
    2cd6:	20 31       	cpi	r18, 0x10	; 16
    2cd8:	29 f0       	breq	.+10     	; 0x2ce4 <_ZN6SdFile5writeEPKvj+0x204>
    2cda:	48 ef       	ldi	r20, 0xF8	; 248
    2cdc:	5f ef       	ldi	r21, 0xFF	; 255
    2cde:	6f ef       	ldi	r22, 0xFF	; 255
    2ce0:	7f e0       	ldi	r23, 0x0F	; 15
    2ce2:	04 c0       	rjmp	.+8      	; 0x2cec <_ZN6SdFile5writeEPKvj+0x20c>
    2ce4:	48 ef       	ldi	r20, 0xF8	; 248
    2ce6:	5f ef       	ldi	r21, 0xFF	; 255
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	84 17       	cp	r24, r20
    2cee:	95 07       	cpc	r25, r21
    2cf0:	a6 07       	cpc	r26, r22
    2cf2:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2cf4:	28 f0       	brcs	.+10     	; 0x2d00 <_ZN6SdFile5writeEPKvj+0x220>
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	a4 d9       	rcall	.-3256   	; 0x2042 <_ZN6SdFile10addClusterEv>
    2cfa:	81 11       	cpse	r24, r1
    2cfc:	4d cf       	rjmp	.-358    	; 0x2b98 <_ZN6SdFile5writeEPKvj+0xb8>
    2cfe:	27 cf       	rjmp	.-434    	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    2d00:	f8 01       	movw	r30, r16
    2d02:	86 83       	std	Z+6, r24	; 0x06
    2d04:	97 83       	std	Z+7, r25	; 0x07
    2d06:	a0 87       	std	Z+8, r26	; 0x08
    2d08:	b1 87       	std	Z+9, r27	; 0x09
    2d0a:	46 cf       	rjmp	.-372    	; 0x2b98 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2d0c:	e1 14       	cp	r14, r1
    2d0e:	f1 04       	cpc	r15, r1
    2d10:	21 f5       	brne	.+72     	; 0x2d5a <_ZN6SdFile5writeEPKvj+0x27a>
    2d12:	d8 01       	movw	r26, r16
    2d14:	1a 96       	adiw	r26, 0x0a	; 10
    2d16:	4d 91       	ld	r20, X+
    2d18:	5d 91       	ld	r21, X+
    2d1a:	6d 91       	ld	r22, X+
    2d1c:	7c 91       	ld	r23, X
    2d1e:	1d 97       	sbiw	r26, 0x0d	; 13
    2d20:	53 96       	adiw	r26, 0x13	; 19
    2d22:	8d 91       	ld	r24, X+
    2d24:	9d 91       	ld	r25, X+
    2d26:	0d 90       	ld	r0, X+
    2d28:	bc 91       	ld	r27, X
    2d2a:	a0 2d       	mov	r26, r0
    2d2c:	48 17       	cp	r20, r24
    2d2e:	59 07       	cpc	r21, r25
    2d30:	6a 07       	cpc	r22, r26
    2d32:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2d34:	90 f0       	brcs	.+36     	; 0x2d5a <_ZN6SdFile5writeEPKvj+0x27a>
    2d36:	7e d0       	rcall	.+252    	; 0x2e34 <_ZN8SdVolume10cacheFlushEv>
    2d38:	88 23       	and	r24, r24
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <_ZN6SdFile5writeEPKvj+0x25e>
    2d3c:	08 cf       	rjmp	.-496    	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    2d3e:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2d42:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d46:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d4a:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2d4e:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
    2d52:	81 60       	ori	r24, 0x01	; 1
    2d54:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2d58:	07 c0       	rjmp	.+14     	; 0x2d68 <_ZN6SdFile5writeEPKvj+0x288>
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	c3 01       	movw	r24, r6
    2d5e:	b2 01       	movw	r22, r4
    2d60:	a2 d0       	rcall	.+324    	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    2d62:	88 23       	and	r24, r24
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <_ZN6SdFile5writeEPKvj+0x288>
    2d66:	f3 ce       	rjmp	.-538    	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>
    2d68:	d6 01       	movw	r26, r12
    2d6a:	f7 01       	movw	r30, r14
    2d6c:	ef 59       	subi	r30, 0x9F	; 159
    2d6e:	f8 4f       	sbci	r31, 0xF8	; 248
    2d70:	9f 01       	movw	r18, r30
    2d72:	2a 0d       	add	r18, r10
    2d74:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2d76:	2e 17       	cp	r18, r30
    2d78:	3f 07       	cpc	r19, r31
    2d7a:	19 f0       	breq	.+6      	; 0x2d82 <_ZN6SdFile5writeEPKvj+0x2a2>
    2d7c:	8d 91       	ld	r24, X+
    2d7e:	81 93       	st	Z+, r24
    2d80:	fa cf       	rjmp	.-12     	; 0x2d76 <_ZN6SdFile5writeEPKvj+0x296>
    2d82:	ca 0c       	add	r12, r10
    2d84:	db 1c       	adc	r13, r11
    2d86:	62 cf       	rjmp	.-316    	; 0x2c4c <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2d88:	d8 01       	movw	r26, r16
    2d8a:	53 96       	adiw	r26, 0x13	; 19
    2d8c:	cd 90       	ld	r12, X+
    2d8e:	dd 90       	ld	r13, X+
    2d90:	ed 90       	ld	r14, X+
    2d92:	fc 90       	ld	r15, X
    2d94:	56 97       	sbiw	r26, 0x16	; 22
    2d96:	14 96       	adiw	r26, 0x04	; 4
    2d98:	8c 91       	ld	r24, X
    2d9a:	c4 16       	cp	r12, r20
    2d9c:	d5 06       	cpc	r13, r21
    2d9e:	e6 06       	cpc	r14, r22
    2da0:	f7 06       	cpc	r15, r23
    2da2:	40 f4       	brcc	.+16     	; 0x2db4 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2da4:	f8 01       	movw	r30, r16
    2da6:	43 8b       	std	Z+19, r20	; 0x13
    2da8:	54 8b       	std	Z+20, r21	; 0x14
    2daa:	65 8b       	std	Z+21, r22	; 0x15
    2dac:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2dae:	80 68       	ori	r24, 0x80	; 128
    2db0:	84 83       	std	Z+4, r24	; 0x04
    2db2:	0d c0       	rjmp	.+26     	; 0x2dce <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    2db4:	20 91 58 07 	lds	r18, 0x0758	; 0x800758 <_ZN6SdFile9dateTime_E>
    2db8:	30 91 59 07 	lds	r19, 0x0759	; 0x800759 <_ZN6SdFile9dateTime_E+0x1>
    2dbc:	23 2b       	or	r18, r19
    2dbe:	39 f0       	breq	.+14     	; 0x2dce <_ZN6SdFile5writeEPKvj+0x2ee>
    2dc0:	21 14       	cp	r2, r1
    2dc2:	31 04       	cpc	r3, r1
    2dc4:	21 f0       	breq	.+8      	; 0x2dce <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2dc6:	80 68       	ori	r24, 0x80	; 128
    2dc8:	d8 01       	movw	r26, r16
    2dca:	14 96       	adiw	r26, 0x04	; 4
    2dcc:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2dce:	f8 01       	movw	r30, r16
    2dd0:	84 81       	ldd	r24, Z+4	; 0x04
    2dd2:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <_ZN6SdFile5writeEPKvj+0x2fa>
    2dd6:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <_ZN6SdFile5writeEPKvj+0x306>
    2dda:	c8 01       	movw	r24, r16
    2ddc:	38 dc       	rcall	.-1936   	; 0x264e <_ZN6SdFile4syncEv>
    2dde:	88 23       	and	r24, r24
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <_ZN6SdFile5writeEPKvj+0x304>
    2de2:	b5 ce       	rjmp	.-662    	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x6e>
    2de4:	f8 cf       	rjmp	.-16     	; 0x2dd6 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	1f 91       	pop	r17
    2df4:	0f 91       	pop	r16
    2df6:	ff 90       	pop	r15
    2df8:	ef 90       	pop	r14
    2dfa:	df 90       	pop	r13
    2dfc:	cf 90       	pop	r12
    2dfe:	bf 90       	pop	r11
    2e00:	af 90       	pop	r10
    2e02:	9f 90       	pop	r9
    2e04:	8f 90       	pop	r8
    2e06:	7f 90       	pop	r7
    2e08:	6f 90       	pop	r6
    2e0a:	5f 90       	pop	r5
    2e0c:	4f 90       	pop	r4
    2e0e:	3f 90       	pop	r3
    2e10:	2f 90       	pop	r2
    2e12:	08 95       	ret

00002e14 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	1f 92       	push	r1
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	50 e0       	ldi	r21, 0x00	; 0
    2e24:	be 01       	movw	r22, r28
    2e26:	6f 5f       	subi	r22, 0xFF	; 255
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2a:	5a de       	rcall	.-844    	; 0x2ae0 <_ZN6SdFile5writeEPKvj>
}
    2e2c:	0f 90       	pop	r0
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	08 95       	ret

00002e34 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2e34:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
    2e38:	88 23       	and	r24, r24
    2e3a:	99 f1       	breq	.+102    	; 0x2ea2 <_ZN8SdVolume10cacheFlushEv+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2e3c:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2e40:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e44:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e48:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e4c:	21 e6       	ldi	r18, 0x61	; 97
    2e4e:	37 e0       	ldi	r19, 0x07	; 7
    2e50:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <_ZN8SdVolume7sdCard_E>
    2e54:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN8SdVolume7sdCard_E+0x1>
    2e58:	a7 d8       	rcall	.-3762   	; 0x1fa8 <_ZN7Sd2Card10writeBlockEmPKh>
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <_ZN8SdVolume10cacheFlushEv+0x2e>
      return false;
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2e62:	40 91 5a 07 	lds	r20, 0x075A	; 0x80075a <_ZN8SdVolume17cacheMirrorBlock_E>
    2e66:	50 91 5b 07 	lds	r21, 0x075B	; 0x80075b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2e6a:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2e6e:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2e72:	41 15       	cp	r20, r1
    2e74:	51 05       	cpc	r21, r1
    2e76:	61 05       	cpc	r22, r1
    2e78:	71 05       	cpc	r23, r1
    2e7a:	89 f0       	breq	.+34     	; 0x2e9e <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2e7c:	21 e6       	ldi	r18, 0x61	; 97
    2e7e:	37 e0       	ldi	r19, 0x07	; 7
    2e80:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <_ZN8SdVolume7sdCard_E>
    2e84:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN8SdVolume7sdCard_E+0x1>
    2e88:	8f d8       	rcall	.-3810   	; 0x1fa8 <_ZN7Sd2Card10writeBlockEmPKh>
    2e8a:	88 23       	and	r24, r24
    2e8c:	41 f3       	breq	.-48     	; 0x2e5e <_ZN8SdVolume10cacheFlushEv+0x2a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2e8e:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <_ZN8SdVolume17cacheMirrorBlock_E>
    2e92:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2e96:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2e9a:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    2e9e:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
}
    2ea4:	08 95       	ret

00002ea6 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	cf 93       	push	r28
    2eb0:	6b 01       	movw	r12, r22
    2eb2:	7c 01       	movw	r14, r24
    2eb4:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2eb6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2eba:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2ebe:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2ec2:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2ec6:	8c 15       	cp	r24, r12
    2ec8:	9d 05       	cpc	r25, r13
    2eca:	ae 05       	cpc	r26, r14
    2ecc:	bf 05       	cpc	r27, r15
    2ece:	c1 f0       	breq	.+48     	; 0x2f00 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    2ed0:	b1 df       	rcall	.-158    	; 0x2e34 <_ZN8SdVolume10cacheFlushEv>
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	19 c0       	rjmp	.+50     	; 0x2f0c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2eda:	21 e6       	ldi	r18, 0x61	; 97
    2edc:	37 e0       	ldi	r19, 0x07	; 7
    2ede:	b7 01       	movw	r22, r14
    2ee0:	a6 01       	movw	r20, r12
    2ee2:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <_ZN8SdVolume7sdCard_E>
    2ee6:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN8SdVolume7sdCard_E+0x1>
    2eea:	25 d8       	rcall	.-4022   	; 0x1f36 <_ZN7Sd2Card9readBlockEmPh>
    2eec:	88 23       	and	r24, r24
    2eee:	99 f3       	breq	.-26     	; 0x2ed6 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    cacheBlockNumber_ = blockNumber;
    2ef0:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2ef4:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2ef8:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2efc:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    2f00:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
    2f04:	c8 2b       	or	r28, r24
    2f06:	c0 93 5e 07 	sts	0x075E, r28	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
  return true;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
}
    2f0c:	cf 91       	pop	r28
    2f0e:	ff 90       	pop	r15
    2f10:	ef 90       	pop	r14
    2f12:	df 90       	pop	r13
    2f14:	cf 90       	pop	r12
    2f16:	08 95       	ret

00002f18 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2f18:	cf 92       	push	r12
    2f1a:	df 92       	push	r13
    2f1c:	ef 92       	push	r14
    2f1e:	ff 92       	push	r15
    2f20:	6b 01       	movw	r12, r22
    2f22:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    2f24:	87 df       	rcall	.-242    	; 0x2e34 <_ZN8SdVolume10cacheFlushEv>
    2f26:	88 23       	and	r24, r24
    2f28:	a9 f0       	breq	.+42     	; 0x2f54 <_ZN8SdVolume14cacheZeroBlockEm+0x3c>
    2f2a:	e1 e6       	ldi	r30, 0x61	; 97
    2f2c:	f7 e0       	ldi	r31, 0x07	; 7

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    2f2e:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2f30:	89 e0       	ldi	r24, 0x09	; 9
    2f32:	e1 36       	cpi	r30, 0x61	; 97
    2f34:	f8 07       	cpc	r31, r24
    2f36:	d9 f7       	brne	.-10     	; 0x2f2e <_ZN8SdVolume14cacheZeroBlockEm+0x16>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2f38:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2f3c:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f40:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f44:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f48:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
    2f4c:	81 60       	ori	r24, 0x01	; 1
    2f4e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
}
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	df 90       	pop	r13
    2f5a:	cf 90       	pop	r12
    2f5c:	08 95       	ret

00002f5e <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2f5e:	8f 92       	push	r8
    2f60:	9f 92       	push	r9
    2f62:	af 92       	push	r10
    2f64:	bf 92       	push	r11
    2f66:	cf 92       	push	r12
    2f68:	df 92       	push	r13
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    2f78:	81 85       	ldd	r24, Z+9	; 0x09
    2f7a:	92 85       	ldd	r25, Z+10	; 0x0a
    2f7c:	a3 85       	ldd	r26, Z+11	; 0x0b
    2f7e:	b4 85       	ldd	r27, Z+12	; 0x0c
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	a1 1d       	adc	r26, r1
    2f84:	b1 1d       	adc	r27, r1
    2f86:	84 17       	cp	r24, r20
    2f88:	95 07       	cpc	r25, r21
    2f8a:	a6 07       	cpc	r26, r22
    2f8c:	b7 07       	cpc	r27, r23
    2f8e:	10 f4       	brcc	.+4      	; 0x2f94 <_ZNK8SdVolume6fatGetEmPm+0x36>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	5a c0       	rjmp	.+180    	; 0x3048 <_ZNK8SdVolume6fatGetEmPm+0xea>
  uint32_t lba = fatStartBlock_;
    2f94:	83 88       	ldd	r8, Z+19	; 0x13
    2f96:	94 88       	ldd	r9, Z+20	; 0x14
    2f98:	a5 88       	ldd	r10, Z+21	; 0x15
    2f9a:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2f9c:	87 89       	ldd	r24, Z+23	; 0x17
    2f9e:	80 31       	cpi	r24, 0x10	; 16
    2fa0:	29 f4       	brne	.+10     	; 0x2fac <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2fa2:	bb 27       	eor	r27, r27
    2fa4:	a7 2f       	mov	r26, r23
    2fa6:	96 2f       	mov	r25, r22
    2fa8:	85 2f       	mov	r24, r21
    2faa:	09 c0       	rjmp	.+18     	; 0x2fbe <_ZNK8SdVolume6fatGetEmPm+0x60>
    2fac:	db 01       	movw	r26, r22
    2fae:	ca 01       	movw	r24, r20
    2fb0:	c7 e0       	ldi	r28, 0x07	; 7
    2fb2:	b6 95       	lsr	r27
    2fb4:	a7 95       	ror	r26
    2fb6:	97 95       	ror	r25
    2fb8:	87 95       	ror	r24
    2fba:	ca 95       	dec	r28
    2fbc:	d1 f7       	brne	.-12     	; 0x2fb2 <_ZNK8SdVolume6fatGetEmPm+0x54>
    2fbe:	e9 01       	movw	r28, r18
    2fc0:	6a 01       	movw	r12, r20
    2fc2:	7b 01       	movw	r14, r22
    2fc4:	8f 01       	movw	r16, r30
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	68 0d       	add	r22, r8
    2fcc:	79 1d       	adc	r23, r9
    2fce:	8a 1d       	adc	r24, r10
    2fd0:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2fd2:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2fd6:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2fda:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2fde:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2fe2:	68 15       	cp	r22, r8
    2fe4:	79 05       	cpc	r23, r9
    2fe6:	8a 05       	cpc	r24, r10
    2fe8:	9b 05       	cpc	r25, r11
    2fea:	91 f4       	brne	.+36     	; 0x3010 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2fec:	f8 01       	movw	r30, r16
    2fee:	87 89       	ldd	r24, Z+23	; 0x17
    2ff0:	80 31       	cpi	r24, 0x10	; 16
    2ff2:	99 f4       	brne	.+38     	; 0x301a <_ZNK8SdVolume6fatGetEmPm+0xbc>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2ff4:	dd 24       	eor	r13, r13
    2ff6:	ee 24       	eor	r14, r14
    2ff8:	ff 24       	eor	r15, r15
    2ffa:	c6 01       	movw	r24, r12
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	fc 01       	movw	r30, r24
    3002:	ef 59       	subi	r30, 0x9F	; 159
    3004:	f8 4f       	sbci	r31, 0xF8	; 248
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	a0 e0       	ldi	r26, 0x00	; 0
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	17 c0       	rjmp	.+46     	; 0x303e <_ZNK8SdVolume6fatGetEmPm+0xe0>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	49 df       	rcall	.-366    	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    3014:	81 11       	cpse	r24, r1
    3016:	ea cf       	rjmp	.-44     	; 0x2fec <_ZNK8SdVolume6fatGetEmPm+0x8e>
    3018:	bb cf       	rjmp	.-138    	; 0x2f90 <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    301a:	e8 94       	clt
    301c:	c7 f8       	bld	r12, 7
    301e:	dd 24       	eor	r13, r13
    3020:	ee 24       	eor	r14, r14
    3022:	ff 24       	eor	r15, r15
    3024:	c6 01       	movw	r24, r12
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	fc 01       	movw	r30, r24
    3030:	ef 59       	subi	r30, 0x9F	; 159
    3032:	f8 4f       	sbci	r31, 0xF8	; 248
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	a2 81       	ldd	r26, Z+2	; 0x02
    303a:	b3 81       	ldd	r27, Z+3	; 0x03
    303c:	bf 70       	andi	r27, 0x0F	; 15
    303e:	88 83       	st	Y, r24
    3040:	99 83       	std	Y+1, r25	; 0x01
    3042:	aa 83       	std	Y+2, r26	; 0x02
    3044:	bb 83       	std	Y+3, r27	; 0x03
    3046:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	bf 90       	pop	r11
    305a:	af 90       	pop	r10
    305c:	9f 90       	pop	r9
    305e:	8f 90       	pop	r8
    3060:	08 95       	ret

00003062 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	af 92       	push	r10
    306c:	bf 92       	push	r11
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	00 d0       	rcall	.+0      	; 0x3080 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    3080:	1f 92       	push	r1
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	8c 01       	movw	r16, r24
    3088:	49 83       	std	Y+1, r20	; 0x01
    308a:	5a 83       	std	Y+2, r21	; 0x02
    308c:	6b 83       	std	Y+3, r22	; 0x03
    308e:	7c 83       	std	Y+4, r23	; 0x04
    3090:	59 01       	movw	r10, r18
  uint32_t s = 0;
    3092:	c1 2c       	mov	r12, r1
    3094:	d1 2c       	mov	r13, r1
    3096:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    3098:	41 2c       	mov	r4, r1
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	58 2e       	mov	r5, r24
    309e:	61 2c       	mov	r6, r1
    30a0:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    30a2:	49 81       	ldd	r20, Y+1	; 0x01
    30a4:	5a 81       	ldd	r21, Y+2	; 0x02
    30a6:	6b 81       	ldd	r22, Y+3	; 0x03
    30a8:	7c 81       	ldd	r23, Y+4	; 0x04
    30aa:	9e 01       	movw	r18, r28
    30ac:	2f 5f       	subi	r18, 0xFF	; 255
    30ae:	3f 4f       	sbci	r19, 0xFF	; 255
    30b0:	c8 01       	movw	r24, r16
    30b2:	55 df       	rcall	.-342    	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    30b4:	88 23       	and	r24, r24
    30b6:	51 f1       	breq	.+84     	; 0x310c <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    s += 512UL << clusterSizeShift_;
    30b8:	d3 01       	movw	r26, r6
    30ba:	c2 01       	movw	r24, r4
    30bc:	f8 01       	movw	r30, r16
    30be:	05 84       	ldd	r0, Z+13	; 0x0d
    30c0:	04 c0       	rjmp	.+8      	; 0x30ca <_ZNK8SdVolume9chainSizeEmPm+0x68>
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	aa 1f       	adc	r26, r26
    30c8:	bb 1f       	adc	r27, r27
    30ca:	0a 94       	dec	r0
    30cc:	d2 f7       	brpl	.-12     	; 0x30c2 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    30ce:	c8 0e       	add	r12, r24
    30d0:	d9 1e       	adc	r13, r25
    30d2:	ea 1e       	adc	r14, r26
    30d4:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    30d6:	49 81       	ldd	r20, Y+1	; 0x01
    30d8:	5a 81       	ldd	r21, Y+2	; 0x02
    30da:	6b 81       	ldd	r22, Y+3	; 0x03
    30dc:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    30de:	87 89       	ldd	r24, Z+23	; 0x17
    30e0:	80 31       	cpi	r24, 0x10	; 16
    30e2:	29 f0       	breq	.+10     	; 0x30ee <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    30e4:	88 ef       	ldi	r24, 0xF8	; 248
    30e6:	9f ef       	ldi	r25, 0xFF	; 255
    30e8:	af ef       	ldi	r26, 0xFF	; 255
    30ea:	bf e0       	ldi	r27, 0x0F	; 15
    30ec:	04 c0       	rjmp	.+8      	; 0x30f6 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    30ee:	88 ef       	ldi	r24, 0xF8	; 248
    30f0:	9f ef       	ldi	r25, 0xFF	; 255
    30f2:	a0 e0       	ldi	r26, 0x00	; 0
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    30f6:	48 17       	cp	r20, r24
    30f8:	59 07       	cpc	r21, r25
    30fa:	6a 07       	cpc	r22, r26
    30fc:	7b 07       	cpc	r23, r27
    30fe:	88 f2       	brcs	.-94     	; 0x30a2 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    3100:	f5 01       	movw	r30, r10
    3102:	c0 82       	st	Z, r12
    3104:	d1 82       	std	Z+1, r13	; 0x01
    3106:	e2 82       	std	Z+2, r14	; 0x02
    3108:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    310a:	81 e0       	ldi	r24, 0x01	; 1
}
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	df 90       	pop	r13
    3122:	cf 90       	pop	r12
    3124:	bf 90       	pop	r11
    3126:	af 90       	pop	r10
    3128:	7f 90       	pop	r7
    312a:	6f 90       	pop	r6
    312c:	5f 90       	pop	r5
    312e:	4f 90       	pop	r4
    3130:	08 95       	ret

00003132 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3132:	4f 92       	push	r4
    3134:	5f 92       	push	r5
    3136:	6f 92       	push	r6
    3138:	7f 92       	push	r7
    313a:	8f 92       	push	r8
    313c:	9f 92       	push	r9
    313e:	af 92       	push	r10
    3140:	bf 92       	push	r11
    3142:	cf 92       	push	r12
    3144:	df 92       	push	r13
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    3154:	42 30       	cpi	r20, 0x02	; 2
    3156:	51 05       	cpc	r21, r1
    3158:	61 05       	cpc	r22, r1
    315a:	71 05       	cpc	r23, r1
    315c:	10 f4       	brcc	.+4      	; 0x3162 <_ZN8SdVolume6fatPutEmm+0x30>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	77 c0       	rjmp	.+238    	; 0x3250 <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	ab 85       	ldd	r26, Y+11	; 0x0b
    3168:	bc 85       	ldd	r27, Y+12	; 0x0c
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	a1 1d       	adc	r26, r1
    316e:	b1 1d       	adc	r27, r1
    3170:	84 17       	cp	r24, r20
    3172:	95 07       	cpc	r25, r21
    3174:	a6 07       	cpc	r26, r22
    3176:	b7 07       	cpc	r27, r23
    3178:	90 f3       	brcs	.-28     	; 0x315e <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    317a:	cb 88       	ldd	r12, Y+19	; 0x13
    317c:	dc 88       	ldd	r13, Y+20	; 0x14
    317e:	ed 88       	ldd	r14, Y+21	; 0x15
    3180:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3182:	8f 89       	ldd	r24, Y+23	; 0x17
    3184:	80 31       	cpi	r24, 0x10	; 16
    3186:	29 f4       	brne	.+10     	; 0x3192 <_ZN8SdVolume6fatPutEmm+0x60>
    3188:	bb 27       	eor	r27, r27
    318a:	a7 2f       	mov	r26, r23
    318c:	96 2f       	mov	r25, r22
    318e:	85 2f       	mov	r24, r21
    3190:	09 c0       	rjmp	.+18     	; 0x31a4 <_ZN8SdVolume6fatPutEmm+0x72>
    3192:	db 01       	movw	r26, r22
    3194:	ca 01       	movw	r24, r20
    3196:	e7 e0       	ldi	r30, 0x07	; 7
    3198:	b6 95       	lsr	r27
    319a:	a7 95       	ror	r26
    319c:	97 95       	ror	r25
    319e:	87 95       	ror	r24
    31a0:	ea 95       	dec	r30
    31a2:	d1 f7       	brne	.-12     	; 0x3198 <_ZN8SdVolume6fatPutEmm+0x66>
    31a4:	48 01       	movw	r8, r16
    31a6:	59 01       	movw	r10, r18
    31a8:	2a 01       	movw	r4, r20
    31aa:	3b 01       	movw	r6, r22
    31ac:	c8 0e       	add	r12, r24
    31ae:	d9 1e       	adc	r13, r25
    31b0:	ea 1e       	adc	r14, r26
    31b2:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    31b4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    31b8:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    31bc:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    31c0:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    31c4:	c8 16       	cp	r12, r24
    31c6:	d9 06       	cpc	r13, r25
    31c8:	ea 06       	cpc	r14, r26
    31ca:	fb 06       	cpc	r15, r27
    31cc:	81 f4       	brne	.+32     	; 0x31ee <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    31ce:	8f 89       	ldd	r24, Y+23	; 0x17
    31d0:	80 31       	cpi	r24, 0x10	; 16
    31d2:	a1 f4       	brne	.+40     	; 0x31fc <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    31d4:	b3 01       	movw	r22, r6
    31d6:	a2 01       	movw	r20, r4
    31d8:	55 27       	eor	r21, r21
    31da:	66 27       	eor	r22, r22
    31dc:	77 27       	eor	r23, r23
    31de:	44 0f       	add	r20, r20
    31e0:	55 1f       	adc	r21, r21
    31e2:	fa 01       	movw	r30, r20
    31e4:	ef 59       	subi	r30, 0x9F	; 159
    31e6:	f8 4f       	sbci	r31, 0xF8	; 248
    31e8:	91 82       	std	Z+1, r9	; 0x01
    31ea:	80 82       	st	Z, r8
    31ec:	18 c0       	rjmp	.+48     	; 0x321e <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	c7 01       	movw	r24, r14
    31f2:	b6 01       	movw	r22, r12
    31f4:	58 de       	rcall	.-848    	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    31f6:	81 11       	cpse	r24, r1
    31f8:	ea cf       	rjmp	.-44     	; 0x31ce <_ZN8SdVolume6fatPutEmm+0x9c>
    31fa:	b1 cf       	rjmp	.-158    	; 0x315e <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    31fc:	b3 01       	movw	r22, r6
    31fe:	a2 01       	movw	r20, r4
    3200:	4f 77       	andi	r20, 0x7F	; 127
    3202:	55 27       	eor	r21, r21
    3204:	66 27       	eor	r22, r22
    3206:	77 27       	eor	r23, r23
    3208:	44 0f       	add	r20, r20
    320a:	55 1f       	adc	r21, r21
    320c:	44 0f       	add	r20, r20
    320e:	55 1f       	adc	r21, r21
    3210:	fa 01       	movw	r30, r20
    3212:	ef 59       	subi	r30, 0x9F	; 159
    3214:	f8 4f       	sbci	r31, 0xF8	; 248
    3216:	80 82       	st	Z, r8
    3218:	91 82       	std	Z+1, r9	; 0x01
    321a:	a2 82       	std	Z+2, r10	; 0x02
    321c:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    321e:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
    3222:	81 60       	ori	r24, 0x01	; 1
    3224:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    3228:	8a 89       	ldd	r24, Y+18	; 0x12
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	80 f0       	brcs	.+32     	; 0x324e <_ZN8SdVolume6fatPutEmm+0x11c>
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	af 81       	ldd	r26, Y+7	; 0x07
    3234:	b8 85       	ldd	r27, Y+8	; 0x08
    3236:	c8 0e       	add	r12, r24
    3238:	d9 1e       	adc	r13, r25
    323a:	ea 1e       	adc	r14, r26
    323c:	fb 1e       	adc	r15, r27
    323e:	c0 92 5a 07 	sts	0x075A, r12	; 0x80075a <_ZN8SdVolume17cacheMirrorBlock_E>
    3242:	d0 92 5b 07 	sts	0x075B, r13	; 0x80075b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3246:	e0 92 5c 07 	sts	0x075C, r14	; 0x80075c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    324a:	f0 92 5d 07 	sts	0x075D, r15	; 0x80075d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    324e:	81 e0       	ldi	r24, 0x01	; 1
}
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	ff 90       	pop	r15
    325a:	ef 90       	pop	r14
    325c:	df 90       	pop	r13
    325e:	cf 90       	pop	r12
    3260:	bf 90       	pop	r11
    3262:	af 90       	pop	r10
    3264:	9f 90       	pop	r9
    3266:	8f 90       	pop	r8
    3268:	7f 90       	pop	r7
    326a:	6f 90       	pop	r6
    326c:	5f 90       	pop	r5
    326e:	4f 90       	pop	r4
    3270:	08 95       	ret

00003272 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3272:	2f 92       	push	r2
    3274:	3f 92       	push	r3
    3276:	4f 92       	push	r4
    3278:	5f 92       	push	r5
    327a:	6f 92       	push	r6
    327c:	7f 92       	push	r7
    327e:	9f 92       	push	r9
    3280:	af 92       	push	r10
    3282:	bf 92       	push	r11
    3284:	cf 92       	push	r12
    3286:	df 92       	push	r13
    3288:	ef 92       	push	r14
    328a:	ff 92       	push	r15
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	60 97       	sbiw	r28, 0x10	; 16
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	5c 01       	movw	r10, r24
    32a6:	49 87       	std	Y+9, r20	; 0x09
    32a8:	5a 87       	std	Y+10, r21	; 0x0a
    32aa:	6b 87       	std	Y+11, r22	; 0x0b
    32ac:	7c 87       	std	Y+12, r23	; 0x0c
    32ae:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    32b0:	d9 01       	movw	r26, r18
    32b2:	cd 90       	ld	r12, X+
    32b4:	dd 90       	ld	r13, X+
    32b6:	ed 90       	ld	r14, X+
    32b8:	fc 90       	ld	r15, X
    32ba:	c1 14       	cp	r12, r1
    32bc:	d1 04       	cpc	r13, r1
    32be:	e1 04       	cpc	r14, r1
    32c0:	f1 04       	cpc	r15, r1
    32c2:	31 f0       	breq	.+12     	; 0x32d0 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    32c4:	bf ef       	ldi	r27, 0xFF	; 255
    32c6:	cb 1a       	sub	r12, r27
    32c8:	db 0a       	sbc	r13, r27
    32ca:	eb 0a       	sbc	r14, r27
    32cc:	fb 0a       	sbc	r15, r27
    32ce:	10 c0       	rjmp	.+32     	; 0x32f0 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    32d0:	fc 01       	movw	r30, r24
    32d2:	c0 80       	ld	r12, Z
    32d4:	d1 80       	ldd	r13, Z+1	; 0x01
    32d6:	e2 80       	ldd	r14, Z+2	; 0x02
    32d8:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    32da:	99 24       	eor	r9, r9
    32dc:	93 94       	inc	r9
    32de:	09 85       	ldd	r16, Y+9	; 0x09
    32e0:	1a 85       	ldd	r17, Y+10	; 0x0a
    32e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    32e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    32e6:	01 30       	cpi	r16, 0x01	; 1
    32e8:	11 05       	cpc	r17, r1
    32ea:	21 05       	cpc	r18, r1
    32ec:	31 05       	cpc	r19, r1
    32ee:	09 f0       	breq	.+2      	; 0x32f2 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    32f0:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    32f2:	f5 01       	movw	r30, r10
    32f4:	81 85       	ldd	r24, Z+9	; 0x09
    32f6:	92 85       	ldd	r25, Z+10	; 0x0a
    32f8:	a3 85       	ldd	r26, Z+11	; 0x0b
    32fa:	b4 85       	ldd	r27, Z+12	; 0x0c
    32fc:	8c 01       	movw	r16, r24
    32fe:	9d 01       	movw	r18, r26
    3300:	0f 5f       	subi	r16, 0xFF	; 255
    3302:	1f 4f       	sbci	r17, 0xFF	; 255
    3304:	2f 4f       	sbci	r18, 0xFF	; 255
    3306:	3f 4f       	sbci	r19, 0xFF	; 255
    3308:	0d 87       	std	Y+13, r16	; 0x0d
    330a:	1e 87       	std	Y+14, r17	; 0x0e
    330c:	2f 87       	std	Y+15, r18	; 0x0f
    330e:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    3310:	26 01       	movw	r4, r12
    3312:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3314:	1d 82       	std	Y+5, r1	; 0x05
    3316:	1e 82       	std	Y+6, r1	; 0x06
    3318:	1f 82       	std	Y+7, r1	; 0x07
    331a:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    331c:	f5 01       	movw	r30, r10
    331e:	81 85       	ldd	r24, Z+9	; 0x09
    3320:	92 85       	ldd	r25, Z+10	; 0x0a
    3322:	a3 85       	ldd	r26, Z+11	; 0x0b
    3324:	b4 85       	ldd	r27, Z+12	; 0x0c
    3326:	0d 81       	ldd	r16, Y+5	; 0x05
    3328:	1e 81       	ldd	r17, Y+6	; 0x06
    332a:	2f 81       	ldd	r18, Y+7	; 0x07
    332c:	38 85       	ldd	r19, Y+8	; 0x08
    332e:	08 17       	cp	r16, r24
    3330:	19 07       	cpc	r17, r25
    3332:	2a 07       	cpc	r18, r26
    3334:	3b 07       	cpc	r19, r27
    3336:	08 f0       	brcs	.+2      	; 0x333a <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    3338:	54 c0       	rjmp	.+168    	; 0x33e2 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    333a:	2d 85       	ldd	r18, Y+13	; 0x0d
    333c:	3e 85       	ldd	r19, Y+14	; 0x0e
    333e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3340:	58 89       	ldd	r21, Y+16	; 0x10
    3342:	24 15       	cp	r18, r4
    3344:	35 05       	cpc	r19, r5
    3346:	46 05       	cpc	r20, r6
    3348:	57 05       	cpc	r21, r7
    334a:	50 f4       	brcc	.+20     	; 0x3360 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	48 2e       	mov	r4, r24
    3350:	51 2c       	mov	r5, r1
    3352:	61 2c       	mov	r6, r1
    3354:	71 2c       	mov	r7, r1
    3356:	92 e0       	ldi	r25, 0x02	; 2
    3358:	c9 2e       	mov	r12, r25
    335a:	d1 2c       	mov	r13, r1
    335c:	e1 2c       	mov	r14, r1
    335e:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3360:	9e 01       	movw	r18, r28
    3362:	2f 5f       	subi	r18, 0xFF	; 255
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	b3 01       	movw	r22, r6
    3368:	a2 01       	movw	r20, r4
    336a:	c5 01       	movw	r24, r10
    336c:	f8 dd       	rcall	.-1040   	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    336e:	88 23       	and	r24, r24
    3370:	c1 f1       	breq	.+112    	; 0x33e2 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    3372:	49 81       	ldd	r20, Y+1	; 0x01
    3374:	5a 81       	ldd	r21, Y+2	; 0x02
    3376:	6b 81       	ldd	r22, Y+3	; 0x03
    3378:	7c 81       	ldd	r23, Y+4	; 0x04
    337a:	d3 01       	movw	r26, r6
    337c:	c2 01       	movw	r24, r4
    337e:	01 96       	adiw	r24, 0x01	; 1
    3380:	a1 1d       	adc	r26, r1
    3382:	b1 1d       	adc	r27, r1
    3384:	45 2b       	or	r20, r21
    3386:	46 2b       	or	r20, r22
    3388:	47 2b       	or	r20, r23
    338a:	19 f0       	breq	.+6      	; 0x3392 <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    338c:	6c 01       	movw	r12, r24
    338e:	7d 01       	movw	r14, r26
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    3392:	ac 01       	movw	r20, r24
    3394:	bd 01       	movw	r22, r26
    3396:	4c 19       	sub	r20, r12
    3398:	5d 09       	sbc	r21, r13
    339a:	6e 09       	sbc	r22, r14
    339c:	7f 09       	sbc	r23, r15
    339e:	09 85       	ldd	r16, Y+9	; 0x09
    33a0:	1a 85       	ldd	r17, Y+10	; 0x0a
    33a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    33a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    33a6:	04 17       	cp	r16, r20
    33a8:	15 07       	cpc	r17, r21
    33aa:	26 07       	cpc	r18, r22
    33ac:	37 07       	cpc	r19, r23
    33ae:	79 f0       	breq	.+30     	; 0x33ce <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    33b0:	2d 81       	ldd	r18, Y+5	; 0x05
    33b2:	3e 81       	ldd	r19, Y+6	; 0x06
    33b4:	4f 81       	ldd	r20, Y+7	; 0x07
    33b6:	58 85       	ldd	r21, Y+8	; 0x08
    33b8:	2f 5f       	subi	r18, 0xFF	; 255
    33ba:	3f 4f       	sbci	r19, 0xFF	; 255
    33bc:	4f 4f       	sbci	r20, 0xFF	; 255
    33be:	5f 4f       	sbci	r21, 0xFF	; 255
    33c0:	2d 83       	std	Y+5, r18	; 0x05
    33c2:	3e 83       	std	Y+6, r19	; 0x06
    33c4:	4f 83       	std	Y+7, r20	; 0x07
    33c6:	58 87       	std	Y+8, r21	; 0x08
    33c8:	2c 01       	movw	r4, r24
    33ca:	3d 01       	movw	r6, r26
    33cc:	a7 cf       	rjmp	.-178    	; 0x331c <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    33ce:	0f ef       	ldi	r16, 0xFF	; 255
    33d0:	1f ef       	ldi	r17, 0xFF	; 255
    33d2:	2f ef       	ldi	r18, 0xFF	; 255
    33d4:	3f e0       	ldi	r19, 0x0F	; 15
    33d6:	b3 01       	movw	r22, r6
    33d8:	a2 01       	movw	r20, r4
    33da:	c5 01       	movw	r24, r10
    33dc:	aa de       	rcall	.-684    	; 0x3132 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    33de:	81 11       	cpse	r24, r1
    33e0:	17 c0       	rjmp	.+46     	; 0x3410 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	3f c0       	rjmp	.+126    	; 0x3464 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    33e6:	d3 01       	movw	r26, r6
    33e8:	c2 01       	movw	r24, r4
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	a1 09       	sbc	r26, r1
    33ee:	b1 09       	sbc	r27, r1
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	af 83       	std	Y+7, r26	; 0x07
    33f6:	b8 87       	std	Y+8, r27	; 0x08
    33f8:	93 01       	movw	r18, r6
    33fa:	82 01       	movw	r16, r4
    33fc:	ac 01       	movw	r20, r24
    33fe:	bd 01       	movw	r22, r26
    3400:	c5 01       	movw	r24, r10
    3402:	97 de       	rcall	.-722    	; 0x3132 <_ZN8SdVolume6fatPutEmm>
    3404:	88 23       	and	r24, r24
    3406:	69 f3       	breq	.-38     	; 0x33e2 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    3408:	4d 80       	ldd	r4, Y+5	; 0x05
    340a:	5e 80       	ldd	r5, Y+6	; 0x06
    340c:	6f 80       	ldd	r6, Y+7	; 0x07
    340e:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3410:	c4 14       	cp	r12, r4
    3412:	d5 04       	cpc	r13, r5
    3414:	e6 04       	cpc	r14, r6
    3416:	f7 04       	cpc	r15, r7
    3418:	30 f3       	brcs	.-52     	; 0x33e6 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    341a:	d1 01       	movw	r26, r2
    341c:	4d 91       	ld	r20, X+
    341e:	5d 91       	ld	r21, X+
    3420:	6d 91       	ld	r22, X+
    3422:	7c 91       	ld	r23, X
    3424:	41 15       	cp	r20, r1
    3426:	51 05       	cpc	r21, r1
    3428:	61 05       	cpc	r22, r1
    342a:	71 05       	cpc	r23, r1
    342c:	99 f4       	brne	.+38     	; 0x3454 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    342e:	f1 01       	movw	r30, r2
    3430:	c0 82       	st	Z, r12
    3432:	d1 82       	std	Z+1, r13	; 0x01
    3434:	e2 82       	std	Z+2, r14	; 0x02
    3436:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3438:	99 20       	and	r9, r9
    343a:	99 f0       	breq	.+38     	; 0x3462 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    343c:	ff ef       	ldi	r31, 0xFF	; 255
    343e:	cf 1a       	sub	r12, r31
    3440:	df 0a       	sbc	r13, r31
    3442:	ef 0a       	sbc	r14, r31
    3444:	ff 0a       	sbc	r15, r31
    3446:	d5 01       	movw	r26, r10
    3448:	cd 92       	st	X+, r12
    344a:	dd 92       	st	X+, r13
    344c:	ed 92       	st	X+, r14
    344e:	fc 92       	st	X, r15
    3450:	13 97       	sbiw	r26, 0x03	; 3
    3452:	07 c0       	rjmp	.+14     	; 0x3462 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    3454:	97 01       	movw	r18, r14
    3456:	86 01       	movw	r16, r12
    3458:	c5 01       	movw	r24, r10
    345a:	6b de       	rcall	.-810    	; 0x3132 <_ZN8SdVolume6fatPutEmm>
    345c:	81 11       	cpse	r24, r1
    345e:	e7 cf       	rjmp	.-50     	; 0x342e <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    3460:	c0 cf       	rjmp	.-128    	; 0x33e2 <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    3462:	81 e0       	ldi	r24, 0x01	; 1
}
    3464:	60 96       	adiw	r28, 0x10	; 16
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	df 91       	pop	r29
    3472:	cf 91       	pop	r28
    3474:	1f 91       	pop	r17
    3476:	0f 91       	pop	r16
    3478:	ff 90       	pop	r15
    347a:	ef 90       	pop	r14
    347c:	df 90       	pop	r13
    347e:	cf 90       	pop	r12
    3480:	bf 90       	pop	r11
    3482:	af 90       	pop	r10
    3484:	9f 90       	pop	r9
    3486:	7f 90       	pop	r7
    3488:	6f 90       	pop	r6
    348a:	5f 90       	pop	r5
    348c:	4f 90       	pop	r4
    348e:	3f 90       	pop	r3
    3490:	2f 90       	pop	r2
    3492:	08 95       	ret

00003494 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    3494:	af 92       	push	r10
    3496:	bf 92       	push	r11
    3498:	cf 92       	push	r12
    349a:	df 92       	push	r13
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <_ZN8SdVolume9freeChainEm+0x16>
    34aa:	1f 92       	push	r1
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	5c 01       	movw	r10, r24
    34b2:	6a 01       	movw	r12, r20
    34b4:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	f5 01       	movw	r30, r10
    34c0:	80 83       	st	Z, r24
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	a2 83       	std	Z+2, r26	; 0x02
    34c6:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    34c8:	9e 01       	movw	r18, r28
    34ca:	2f 5f       	subi	r18, 0xFF	; 255
    34cc:	3f 4f       	sbci	r19, 0xFF	; 255
    34ce:	b7 01       	movw	r22, r14
    34d0:	a6 01       	movw	r20, r12
    34d2:	c5 01       	movw	r24, r10
    34d4:	44 dd       	rcall	.-1400   	; 0x2f5e <_ZNK8SdVolume6fatGetEmPm>
    34d6:	88 23       	and	r24, r24
    34d8:	09 f1       	breq	.+66     	; 0x351c <_ZN8SdVolume9freeChainEm+0x88>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    34da:	00 e0       	ldi	r16, 0x00	; 0
    34dc:	10 e0       	ldi	r17, 0x00	; 0
    34de:	98 01       	movw	r18, r16
    34e0:	b7 01       	movw	r22, r14
    34e2:	a6 01       	movw	r20, r12
    34e4:	c5 01       	movw	r24, r10
    34e6:	25 de       	rcall	.-950    	; 0x3132 <_ZN8SdVolume6fatPutEmm>
    34e8:	88 23       	and	r24, r24
    34ea:	c1 f0       	breq	.+48     	; 0x351c <_ZN8SdVolume9freeChainEm+0x88>

    cluster = next;
    34ec:	c9 80       	ldd	r12, Y+1	; 0x01
    34ee:	da 80       	ldd	r13, Y+2	; 0x02
    34f0:	eb 80       	ldd	r14, Y+3	; 0x03
    34f2:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    34f4:	f5 01       	movw	r30, r10
    34f6:	87 89       	ldd	r24, Z+23	; 0x17
    34f8:	80 31       	cpi	r24, 0x10	; 16
    34fa:	29 f0       	breq	.+10     	; 0x3506 <_ZN8SdVolume9freeChainEm+0x72>
    34fc:	88 ef       	ldi	r24, 0xF8	; 248
    34fe:	9f ef       	ldi	r25, 0xFF	; 255
    3500:	af ef       	ldi	r26, 0xFF	; 255
    3502:	bf e0       	ldi	r27, 0x0F	; 15
    3504:	04 c0       	rjmp	.+8      	; 0x350e <_ZN8SdVolume9freeChainEm+0x7a>
    3506:	88 ef       	ldi	r24, 0xF8	; 248
    3508:	9f ef       	ldi	r25, 0xFF	; 255
    350a:	a0 e0       	ldi	r26, 0x00	; 0
    350c:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    350e:	c8 16       	cp	r12, r24
    3510:	d9 06       	cpc	r13, r25
    3512:	ea 06       	cpc	r14, r26
    3514:	fb 06       	cpc	r15, r27
    3516:	c0 f2       	brcs	.-80     	; 0x34c8 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	01 c0       	rjmp	.+2      	; 0x351e <_ZN8SdVolume9freeChainEm+0x8a>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    351c:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	df 91       	pop	r29
    3528:	cf 91       	pop	r28
    352a:	1f 91       	pop	r17
    352c:	0f 91       	pop	r16
    352e:	ff 90       	pop	r15
    3530:	ef 90       	pop	r14
    3532:	df 90       	pop	r13
    3534:	cf 90       	pop	r12
    3536:	bf 90       	pop	r11
    3538:	af 90       	pop	r10
    353a:	08 95       	ret

0000353c <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    353c:	8f 92       	push	r8
    353e:	9f 92       	push	r9
    3540:	af 92       	push	r10
    3542:	bf 92       	push	r11
    3544:	cf 92       	push	r12
    3546:	df 92       	push	r13
    3548:	ef 92       	push	r14
    354a:	ff 92       	push	r15
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	ec 01       	movw	r28, r24
    3556:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3558:	70 93 60 07 	sts	0x0760, r23	; 0x800760 <_ZN8SdVolume7sdCard_E+0x1>
    355c:	60 93 5f 07 	sts	0x075F, r22	; 0x80075f <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3560:	44 23       	and	r20, r20
    3562:	61 f1       	breq	.+88     	; 0x35bc <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    3564:	45 30       	cpi	r20, 0x05	; 5
    3566:	10 f0       	brcs	.+4      	; 0x356c <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	ef c0       	rjmp	.+478    	; 0x374a <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	cb 01       	movw	r24, r22
    3574:	98 dc       	rcall	.-1744   	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    3576:	88 23       	and	r24, r24
    3578:	b9 f3       	breq	.-18     	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    357a:	20 e1       	ldi	r18, 0x10	; 16
    357c:	12 9f       	mul	r17, r18
    357e:	a0 01       	movw	r20, r0
    3580:	11 24       	eor	r1, r1
    3582:	4f 5a       	subi	r20, 0xAF	; 175
    3584:	58 4f       	sbci	r21, 0xF8	; 248
    3586:	fa 01       	movw	r30, r20
    3588:	e2 54       	subi	r30, 0x42	; 66
    358a:	fe 4f       	sbci	r31, 0xFE	; 254
    358c:	80 81       	ld	r24, Z
    358e:	8f 77       	andi	r24, 0x7F	; 127
    3590:	59 f7       	brne	.-42     	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    3592:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	a2 81       	ldd	r26, Z+2	; 0x02
    359a:	b3 81       	ldd	r27, Z+3	; 0x03
    359c:	84 36       	cpi	r24, 0x64	; 100
    359e:	91 05       	cpc	r25, r1
    35a0:	a1 05       	cpc	r26, r1
    35a2:	b1 05       	cpc	r27, r1
    35a4:	08 f3       	brcs	.-62     	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    35a6:	34 97       	sbiw	r30, 0x04	; 4
    35a8:	c0 80       	ld	r12, Z
    35aa:	d1 80       	ldd	r13, Z+1	; 0x01
    35ac:	e2 80       	ldd	r14, Z+2	; 0x02
    35ae:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    35b0:	c1 14       	cp	r12, r1
    35b2:	d1 04       	cpc	r13, r1
    35b4:	e1 04       	cpc	r14, r1
    35b6:	f1 04       	cpc	r15, r1
    35b8:	21 f4       	brne	.+8      	; 0x35c2 <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    35ba:	d6 cf       	rjmp	.-84     	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    35bc:	c1 2c       	mov	r12, r1
    35be:	d1 2c       	mov	r13, r1
    35c0:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	c7 01       	movw	r24, r14
    35c6:	b6 01       	movw	r22, r12
    35c8:	6e dc       	rcall	.-1828   	; 0x2ea6 <_ZN8SdVolume13cacheRawBlockEmh>
    35ca:	88 23       	and	r24, r24
    35cc:	69 f2       	breq	.-102    	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    35ce:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <_ZN8SdVolume12cacheBuffer_E+0xb>
    35d2:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <_ZN8SdVolume12cacheBuffer_E+0xc>
    35d6:	81 15       	cp	r24, r1
    35d8:	92 40       	sbci	r25, 0x02	; 2
    35da:	31 f6       	brne	.-116    	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    35dc:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    35e0:	99 23       	and	r25, r25
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    35e4:	c1 cf       	rjmp	.-126    	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    35e6:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <_ZN8SdVolume12cacheBuffer_E+0xe>
    35ea:	30 91 70 07 	lds	r19, 0x0770	; 0x800770 <_ZN8SdVolume12cacheBuffer_E+0xf>
    35ee:	23 2b       	or	r18, r19
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    35f2:	ba cf       	rjmp	.-140    	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    35f4:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    35f8:	88 23       	and	r24, r24
    35fa:	09 f4       	brne	.+2      	; 0x35fe <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    35fc:	b5 cf       	rjmp	.-150    	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    35fe:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    3600:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3602:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	41 e0       	ldi	r20, 0x01	; 1
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	2d 85       	ldd	r18, Y+13	; 0x0d
    360c:	e2 2f       	mov	r30, r18
    360e:	ba 01       	movw	r22, r20
    3610:	02 2e       	mov	r0, r18
    3612:	02 c0       	rjmp	.+4      	; 0x3618 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    3614:	66 0f       	add	r22, r22
    3616:	77 1f       	adc	r23, r23
    3618:	0a 94       	dec	r0
    361a:	e2 f7       	brpl	.-8      	; 0x3614 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    361c:	86 17       	cp	r24, r22
    361e:	97 07       	cpc	r25, r23
    3620:	31 f0       	breq	.+12     	; 0x362e <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3622:	31 e0       	ldi	r19, 0x01	; 1
    3624:	32 0f       	add	r19, r18
    3626:	3d 87       	std	Y+13, r19	; 0x0d
    3628:	28 30       	cpi	r18, 0x08	; 8
    362a:	78 f3       	brcs	.-34     	; 0x360a <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    362c:	9d cf       	rjmp	.-198    	; 0x3568 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    362e:	20 91 77 07 	lds	r18, 0x0777	; 0x800777 <_ZN8SdVolume12cacheBuffer_E+0x16>
    3632:	30 91 78 07 	lds	r19, 0x0778	; 0x800778 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    3636:	21 15       	cp	r18, r1
    3638:	31 05       	cpc	r19, r1
    363a:	19 f0       	breq	.+6      	; 0x3642 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	08 c0       	rjmp	.+16     	; 0x3652 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    3642:	20 91 85 07 	lds	r18, 0x0785	; 0x800785 <_ZN8SdVolume12cacheBuffer_E+0x24>
    3646:	30 91 86 07 	lds	r19, 0x0786	; 0x800786 <_ZN8SdVolume12cacheBuffer_E+0x25>
    364a:	40 91 87 07 	lds	r20, 0x0787	; 0x800787 <_ZN8SdVolume12cacheBuffer_E+0x26>
    364e:	50 91 88 07 	lds	r21, 0x0788	; 0x800788 <_ZN8SdVolume12cacheBuffer_E+0x27>
    3652:	2d 83       	std	Y+5, r18	; 0x05
    3654:	3e 83       	std	Y+6, r19	; 0x06
    3656:	4f 83       	std	Y+7, r20	; 0x07
    3658:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    365a:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <_ZN8SdVolume12cacheBuffer_E+0xe>
    365e:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3662:	46 01       	movw	r8, r12
    3664:	57 01       	movw	r10, r14
    3666:	88 0e       	add	r8, r24
    3668:	99 1e       	adc	r9, r25
    366a:	a1 1c       	adc	r10, r1
    366c:	b1 1c       	adc	r11, r1
    366e:	8b 8a       	std	Y+19, r8	; 0x13
    3670:	9c 8a       	std	Y+20, r9	; 0x14
    3672:	ad 8a       	std	Y+21, r10	; 0x15
    3674:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3676:	00 91 72 07 	lds	r16, 0x0772	; 0x800772 <_ZN8SdVolume12cacheBuffer_E+0x11>
    367a:	10 91 73 07 	lds	r17, 0x0773	; 0x800773 <_ZN8SdVolume12cacheBuffer_E+0x12>
    367e:	19 8f       	std	Y+25, r17	; 0x19
    3680:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3682:	a0 91 71 07 	lds	r26, 0x0771	; 0x800771 <_ZN8SdVolume12cacheBuffer_E+0x10>
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	cd d0       	rcall	.+410    	; 0x3824 <__muluhisi3>
    368a:	86 0e       	add	r8, r22
    368c:	97 1e       	adc	r9, r23
    368e:	a8 1e       	adc	r10, r24
    3690:	b9 1e       	adc	r11, r25
    3692:	8a 8e       	std	Y+26, r8	; 0x1a
    3694:	9b 8e       	std	Y+27, r9	; 0x1b
    3696:	ac 8e       	std	Y+28, r10	; 0x1c
    3698:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    369a:	85 e0       	ldi	r24, 0x05	; 5
    369c:	00 0f       	add	r16, r16
    369e:	11 1f       	adc	r17, r17
    36a0:	8a 95       	dec	r24
    36a2:	e1 f7       	brne	.-8      	; 0x369c <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    36a4:	01 50       	subi	r16, 0x01	; 1
    36a6:	1e 4f       	sbci	r17, 0xFE	; 254
    36a8:	01 2f       	mov	r16, r17
    36aa:	11 27       	eor	r17, r17
    36ac:	06 95       	lsr	r16
    36ae:	80 0e       	add	r8, r16
    36b0:	91 1e       	adc	r9, r17
    36b2:	a1 1c       	adc	r10, r1
    36b4:	b1 1c       	adc	r11, r1
    36b6:	8e 86       	std	Y+14, r8	; 0x0e
    36b8:	9f 86       	std	Y+15, r9	; 0x0f
    36ba:	a8 8a       	std	Y+16, r10	; 0x10
    36bc:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    36be:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <_ZN8SdVolume12cacheBuffer_E+0x13>
    36c2:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    36c6:	21 15       	cp	r18, r1
    36c8:	31 05       	cpc	r19, r1
    36ca:	21 f0       	breq	.+8      	; 0x36d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    36cc:	a9 01       	movw	r20, r18
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	08 c0       	rjmp	.+16     	; 0x36e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    36d4:	40 91 81 07 	lds	r20, 0x0781	; 0x800781 <_ZN8SdVolume12cacheBuffer_E+0x20>
    36d8:	50 91 82 07 	lds	r21, 0x0782	; 0x800782 <_ZN8SdVolume12cacheBuffer_E+0x21>
    36dc:	60 91 83 07 	lds	r22, 0x0783	; 0x800783 <_ZN8SdVolume12cacheBuffer_E+0x22>
    36e0:	70 91 84 07 	lds	r23, 0x0784	; 0x800784 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    36e4:	d7 01       	movw	r26, r14
    36e6:	c6 01       	movw	r24, r12
    36e8:	88 19       	sub	r24, r8
    36ea:	99 09       	sbc	r25, r9
    36ec:	aa 09       	sbc	r26, r10
    36ee:	bb 09       	sbc	r27, r11
    36f0:	84 0f       	add	r24, r20
    36f2:	95 1f       	adc	r25, r21
    36f4:	a6 1f       	adc	r26, r22
    36f6:	b7 1f       	adc	r27, r23
    36f8:	04 c0       	rjmp	.+8      	; 0x3702 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    36fa:	b6 95       	lsr	r27
    36fc:	a7 95       	ror	r26
    36fe:	97 95       	ror	r25
    3700:	87 95       	ror	r24
    3702:	ea 95       	dec	r30
    3704:	d2 f7       	brpl	.-12     	; 0x36fa <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    3706:	89 87       	std	Y+9, r24	; 0x09
    3708:	9a 87       	std	Y+10, r25	; 0x0a
    370a:	ab 87       	std	Y+11, r26	; 0x0b
    370c:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    370e:	85 3f       	cpi	r24, 0xF5	; 245
    3710:	2f e0       	ldi	r18, 0x0F	; 15
    3712:	92 07       	cpc	r25, r18
    3714:	a1 05       	cpc	r26, r1
    3716:	b1 05       	cpc	r27, r1
    3718:	10 f4       	brcc	.+4      	; 0x371e <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    371a:	8c e0       	ldi	r24, 0x0C	; 12
    371c:	14 c0       	rjmp	.+40     	; 0x3746 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    371e:	85 3f       	cpi	r24, 0xF5	; 245
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	a1 05       	cpc	r26, r1
    3724:	b1 05       	cpc	r27, r1
    3726:	10 f4       	brcc	.+4      	; 0x372c <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    3728:	80 e1       	ldi	r24, 0x10	; 16
    372a:	0d c0       	rjmp	.+26     	; 0x3746 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    372c:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <_ZN8SdVolume12cacheBuffer_E+0x2c>
    3730:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <_ZN8SdVolume12cacheBuffer_E+0x2d>
    3734:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <_ZN8SdVolume12cacheBuffer_E+0x2e>
    3738:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    373c:	8a 8f       	std	Y+26, r24	; 0x1a
    373e:	9b 8f       	std	Y+27, r25	; 0x1b
    3740:	ac 8f       	std	Y+28, r26	; 0x1c
    3742:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    3744:	80 e2       	ldi	r24, 0x20	; 32
    3746:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    3748:	81 e0       	ldi	r24, 0x01	; 1
}
    374a:	df 91       	pop	r29
    374c:	cf 91       	pop	r28
    374e:	1f 91       	pop	r17
    3750:	0f 91       	pop	r16
    3752:	ff 90       	pop	r15
    3754:	ef 90       	pop	r14
    3756:	df 90       	pop	r13
    3758:	cf 90       	pop	r12
    375a:	bf 90       	pop	r11
    375c:	af 90       	pop	r10
    375e:	9f 90       	pop	r9
    3760:	8f 90       	pop	r8
    3762:	08 95       	ret

00003764 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3764:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3766:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3768:	f8 94       	cli
  if (!initialized) {
    376a:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <_ZN8SPIClass11initializedE>
    376e:	81 11       	cpse	r24, r1
    3770:	27 c0       	rjmp	.+78     	; 0x37c0 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3772:	e3 ec       	ldi	r30, 0xC3	; 195
    3774:	f2 e0       	ldi	r31, 0x02	; 2
    3776:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3778:	ed e7       	ldi	r30, 0x7D	; 125
    377a:	f2 e0       	ldi	r31, 0x02	; 2
    377c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    377e:	e8 2f       	mov	r30, r24
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	ee 0f       	add	r30, r30
    3784:	ff 1f       	adc	r31, r31
    3786:	e2 51       	subi	r30, 0x12	; 18
    3788:	fd 4f       	sbci	r31, 0xFD	; 253
    378a:	a5 91       	lpm	r26, Z+
    378c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    378e:	ec 91       	ld	r30, X
    3790:	e9 23       	and	r30, r25
    3792:	21 f4       	brne	.+8      	; 0x379c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3794:	61 e0       	ldi	r22, 0x01	; 1
    3796:	85 e3       	ldi	r24, 0x35	; 53
    3798:	0e 94 a9 08 	call	0x1152	; 0x1152 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    379c:	61 e0       	ldi	r22, 0x01	; 1
    379e:	85 e3       	ldi	r24, 0x35	; 53
    37a0:	0e 94 6d 08 	call	0x10da	; 0x10da <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    37a4:	8c b5       	in	r24, 0x2c	; 44
    37a6:	80 61       	ori	r24, 0x10	; 16
    37a8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    37aa:	8c b5       	in	r24, 0x2c	; 44
    37ac:	80 64       	ori	r24, 0x40	; 64
    37ae:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	84 e3       	ldi	r24, 0x34	; 52
    37b4:	0e 94 6d 08 	call	0x10da	; 0x10da <pinMode>
    pinMode(MOSI, OUTPUT);
    37b8:	61 e0       	ldi	r22, 0x01	; 1
    37ba:	83 e3       	ldi	r24, 0x33	; 51
    37bc:	0e 94 6d 08 	call	0x10da	; 0x10da <pinMode>
  }
  initialized++; // reference count
    37c0:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <_ZN8SPIClass11initializedE>
    37c4:	8f 5f       	subi	r24, 0xFF	; 255
    37c6:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    37ca:	cf bf       	out	0x3f, r28	; 63
}
    37cc:	cf 91       	pop	r28
    37ce:	08 95       	ret

000037d0 <__udivmodsi4>:
    37d0:	a1 e2       	ldi	r26, 0x21	; 33
    37d2:	1a 2e       	mov	r1, r26
    37d4:	aa 1b       	sub	r26, r26
    37d6:	bb 1b       	sub	r27, r27
    37d8:	fd 01       	movw	r30, r26
    37da:	0d c0       	rjmp	.+26     	; 0x37f6 <__udivmodsi4_ep>

000037dc <__udivmodsi4_loop>:
    37dc:	aa 1f       	adc	r26, r26
    37de:	bb 1f       	adc	r27, r27
    37e0:	ee 1f       	adc	r30, r30
    37e2:	ff 1f       	adc	r31, r31
    37e4:	a2 17       	cp	r26, r18
    37e6:	b3 07       	cpc	r27, r19
    37e8:	e4 07       	cpc	r30, r20
    37ea:	f5 07       	cpc	r31, r21
    37ec:	20 f0       	brcs	.+8      	; 0x37f6 <__udivmodsi4_ep>
    37ee:	a2 1b       	sub	r26, r18
    37f0:	b3 0b       	sbc	r27, r19
    37f2:	e4 0b       	sbc	r30, r20
    37f4:	f5 0b       	sbc	r31, r21

000037f6 <__udivmodsi4_ep>:
    37f6:	66 1f       	adc	r22, r22
    37f8:	77 1f       	adc	r23, r23
    37fa:	88 1f       	adc	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	1a 94       	dec	r1
    3800:	69 f7       	brne	.-38     	; 0x37dc <__udivmodsi4_loop>
    3802:	60 95       	com	r22
    3804:	70 95       	com	r23
    3806:	80 95       	com	r24
    3808:	90 95       	com	r25
    380a:	9b 01       	movw	r18, r22
    380c:	ac 01       	movw	r20, r24
    380e:	bd 01       	movw	r22, r26
    3810:	cf 01       	movw	r24, r30
    3812:	08 95       	ret

00003814 <__tablejump2__>:
    3814:	ee 0f       	add	r30, r30
    3816:	ff 1f       	adc	r31, r31
    3818:	88 1f       	adc	r24, r24
    381a:	8b bf       	out	0x3b, r24	; 59
    381c:	07 90       	elpm	r0, Z+
    381e:	f6 91       	elpm	r31, Z
    3820:	e0 2d       	mov	r30, r0
    3822:	19 94       	eijmp

00003824 <__muluhisi3>:
    3824:	09 d0       	rcall	.+18     	; 0x3838 <__umulhisi3>
    3826:	a5 9f       	mul	r26, r21
    3828:	90 0d       	add	r25, r0
    382a:	b4 9f       	mul	r27, r20
    382c:	90 0d       	add	r25, r0
    382e:	a4 9f       	mul	r26, r20
    3830:	80 0d       	add	r24, r0
    3832:	91 1d       	adc	r25, r1
    3834:	11 24       	eor	r1, r1
    3836:	08 95       	ret

00003838 <__umulhisi3>:
    3838:	a2 9f       	mul	r26, r18
    383a:	b0 01       	movw	r22, r0
    383c:	b3 9f       	mul	r27, r19
    383e:	c0 01       	movw	r24, r0
    3840:	a3 9f       	mul	r26, r19
    3842:	70 0d       	add	r23, r0
    3844:	81 1d       	adc	r24, r1
    3846:	11 24       	eor	r1, r1
    3848:	91 1d       	adc	r25, r1
    384a:	b2 9f       	mul	r27, r18
    384c:	70 0d       	add	r23, r0
    384e:	81 1d       	adc	r24, r1
    3850:	11 24       	eor	r1, r1
    3852:	91 1d       	adc	r25, r1
    3854:	08 95       	ret

00003856 <dtostrf>:
    3856:	ef 92       	push	r14
    3858:	0f 93       	push	r16
    385a:	1f 93       	push	r17
    385c:	cf 93       	push	r28
    385e:	df 93       	push	r29
    3860:	e8 01       	movw	r28, r16
    3862:	47 fd       	sbrc	r20, 7
    3864:	02 c0       	rjmp	.+4      	; 0x386a <dtostrf+0x14>
    3866:	34 e0       	ldi	r19, 0x04	; 4
    3868:	01 c0       	rjmp	.+2      	; 0x386c <dtostrf+0x16>
    386a:	34 e1       	ldi	r19, 0x14	; 20
    386c:	04 2e       	mov	r0, r20
    386e:	00 0c       	add	r0, r0
    3870:	55 0b       	sbc	r21, r21
    3872:	57 ff       	sbrs	r21, 7
    3874:	03 c0       	rjmp	.+6      	; 0x387c <dtostrf+0x26>
    3876:	51 95       	neg	r21
    3878:	41 95       	neg	r20
    387a:	51 09       	sbc	r21, r1
    387c:	e3 2e       	mov	r14, r19
    387e:	02 2f       	mov	r16, r18
    3880:	24 2f       	mov	r18, r20
    3882:	ae 01       	movw	r20, r28
    3884:	48 d2       	rcall	.+1168   	; 0x3d16 <dtoa_prf>
    3886:	ce 01       	movw	r24, r28
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	ef 90       	pop	r14
    3892:	08 95       	ret

00003894 <malloc>:
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	82 30       	cpi	r24, 0x02	; 2
    389e:	91 05       	cpc	r25, r1
    38a0:	10 f4       	brcc	.+4      	; 0x38a6 <malloc+0x12>
    38a2:	82 e0       	ldi	r24, 0x02	; 2
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	e0 91 67 09 	lds	r30, 0x0967	; 0x800967 <__flp>
    38aa:	f0 91 68 09 	lds	r31, 0x0968	; 0x800968 <__flp+0x1>
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	a0 e0       	ldi	r26, 0x00	; 0
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	30 97       	sbiw	r30, 0x00	; 0
    38b8:	19 f1       	breq	.+70     	; 0x3900 <malloc+0x6c>
    38ba:	40 81       	ld	r20, Z
    38bc:	51 81       	ldd	r21, Z+1	; 0x01
    38be:	02 81       	ldd	r16, Z+2	; 0x02
    38c0:	13 81       	ldd	r17, Z+3	; 0x03
    38c2:	48 17       	cp	r20, r24
    38c4:	59 07       	cpc	r21, r25
    38c6:	c8 f0       	brcs	.+50     	; 0x38fa <malloc+0x66>
    38c8:	84 17       	cp	r24, r20
    38ca:	95 07       	cpc	r25, r21
    38cc:	69 f4       	brne	.+26     	; 0x38e8 <malloc+0x54>
    38ce:	10 97       	sbiw	r26, 0x00	; 0
    38d0:	31 f0       	breq	.+12     	; 0x38de <malloc+0x4a>
    38d2:	12 96       	adiw	r26, 0x02	; 2
    38d4:	0c 93       	st	X, r16
    38d6:	12 97       	sbiw	r26, 0x02	; 2
    38d8:	13 96       	adiw	r26, 0x03	; 3
    38da:	1c 93       	st	X, r17
    38dc:	27 c0       	rjmp	.+78     	; 0x392c <malloc+0x98>
    38de:	00 93 67 09 	sts	0x0967, r16	; 0x800967 <__flp>
    38e2:	10 93 68 09 	sts	0x0968, r17	; 0x800968 <__flp+0x1>
    38e6:	22 c0       	rjmp	.+68     	; 0x392c <malloc+0x98>
    38e8:	21 15       	cp	r18, r1
    38ea:	31 05       	cpc	r19, r1
    38ec:	19 f0       	breq	.+6      	; 0x38f4 <malloc+0x60>
    38ee:	42 17       	cp	r20, r18
    38f0:	53 07       	cpc	r21, r19
    38f2:	18 f4       	brcc	.+6      	; 0x38fa <malloc+0x66>
    38f4:	9a 01       	movw	r18, r20
    38f6:	bd 01       	movw	r22, r26
    38f8:	ef 01       	movw	r28, r30
    38fa:	df 01       	movw	r26, r30
    38fc:	f8 01       	movw	r30, r16
    38fe:	db cf       	rjmp	.-74     	; 0x38b6 <malloc+0x22>
    3900:	21 15       	cp	r18, r1
    3902:	31 05       	cpc	r19, r1
    3904:	f9 f0       	breq	.+62     	; 0x3944 <malloc+0xb0>
    3906:	28 1b       	sub	r18, r24
    3908:	39 0b       	sbc	r19, r25
    390a:	24 30       	cpi	r18, 0x04	; 4
    390c:	31 05       	cpc	r19, r1
    390e:	80 f4       	brcc	.+32     	; 0x3930 <malloc+0x9c>
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	9b 81       	ldd	r25, Y+3	; 0x03
    3914:	61 15       	cp	r22, r1
    3916:	71 05       	cpc	r23, r1
    3918:	21 f0       	breq	.+8      	; 0x3922 <malloc+0x8e>
    391a:	fb 01       	movw	r30, r22
    391c:	93 83       	std	Z+3, r25	; 0x03
    391e:	82 83       	std	Z+2, r24	; 0x02
    3920:	04 c0       	rjmp	.+8      	; 0x392a <malloc+0x96>
    3922:	90 93 68 09 	sts	0x0968, r25	; 0x800968 <__flp+0x1>
    3926:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <__flp>
    392a:	fe 01       	movw	r30, r28
    392c:	32 96       	adiw	r30, 0x02	; 2
    392e:	44 c0       	rjmp	.+136    	; 0x39b8 <malloc+0x124>
    3930:	fe 01       	movw	r30, r28
    3932:	e2 0f       	add	r30, r18
    3934:	f3 1f       	adc	r31, r19
    3936:	81 93       	st	Z+, r24
    3938:	91 93       	st	Z+, r25
    393a:	22 50       	subi	r18, 0x02	; 2
    393c:	31 09       	sbc	r19, r1
    393e:	39 83       	std	Y+1, r19	; 0x01
    3940:	28 83       	st	Y, r18
    3942:	3a c0       	rjmp	.+116    	; 0x39b8 <malloc+0x124>
    3944:	20 91 65 09 	lds	r18, 0x0965	; 0x800965 <__brkval>
    3948:	30 91 66 09 	lds	r19, 0x0966	; 0x800966 <__brkval+0x1>
    394c:	23 2b       	or	r18, r19
    394e:	41 f4       	brne	.+16     	; 0x3960 <malloc+0xcc>
    3950:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3954:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3958:	30 93 66 09 	sts	0x0966, r19	; 0x800966 <__brkval+0x1>
    395c:	20 93 65 09 	sts	0x0965, r18	; 0x800965 <__brkval>
    3960:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3964:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3968:	21 15       	cp	r18, r1
    396a:	31 05       	cpc	r19, r1
    396c:	41 f4       	brne	.+16     	; 0x397e <malloc+0xea>
    396e:	2d b7       	in	r18, 0x3d	; 61
    3970:	3e b7       	in	r19, 0x3e	; 62
    3972:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3976:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    397a:	24 1b       	sub	r18, r20
    397c:	35 0b       	sbc	r19, r21
    397e:	e0 91 65 09 	lds	r30, 0x0965	; 0x800965 <__brkval>
    3982:	f0 91 66 09 	lds	r31, 0x0966	; 0x800966 <__brkval+0x1>
    3986:	e2 17       	cp	r30, r18
    3988:	f3 07       	cpc	r31, r19
    398a:	a0 f4       	brcc	.+40     	; 0x39b4 <malloc+0x120>
    398c:	2e 1b       	sub	r18, r30
    398e:	3f 0b       	sbc	r19, r31
    3990:	28 17       	cp	r18, r24
    3992:	39 07       	cpc	r19, r25
    3994:	78 f0       	brcs	.+30     	; 0x39b4 <malloc+0x120>
    3996:	ac 01       	movw	r20, r24
    3998:	4e 5f       	subi	r20, 0xFE	; 254
    399a:	5f 4f       	sbci	r21, 0xFF	; 255
    399c:	24 17       	cp	r18, r20
    399e:	35 07       	cpc	r19, r21
    39a0:	48 f0       	brcs	.+18     	; 0x39b4 <malloc+0x120>
    39a2:	4e 0f       	add	r20, r30
    39a4:	5f 1f       	adc	r21, r31
    39a6:	50 93 66 09 	sts	0x0966, r21	; 0x800966 <__brkval+0x1>
    39aa:	40 93 65 09 	sts	0x0965, r20	; 0x800965 <__brkval>
    39ae:	81 93       	st	Z+, r24
    39b0:	91 93       	st	Z+, r25
    39b2:	02 c0       	rjmp	.+4      	; 0x39b8 <malloc+0x124>
    39b4:	e0 e0       	ldi	r30, 0x00	; 0
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	cf 01       	movw	r24, r30
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	08 95       	ret

000039c4 <free>:
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	09 f4       	brne	.+2      	; 0x39ce <free+0xa>
    39cc:	81 c0       	rjmp	.+258    	; 0x3ad0 <free+0x10c>
    39ce:	fc 01       	movw	r30, r24
    39d0:	32 97       	sbiw	r30, 0x02	; 2
    39d2:	13 82       	std	Z+3, r1	; 0x03
    39d4:	12 82       	std	Z+2, r1	; 0x02
    39d6:	a0 91 67 09 	lds	r26, 0x0967	; 0x800967 <__flp>
    39da:	b0 91 68 09 	lds	r27, 0x0968	; 0x800968 <__flp+0x1>
    39de:	10 97       	sbiw	r26, 0x00	; 0
    39e0:	81 f4       	brne	.+32     	; 0x3a02 <free+0x3e>
    39e2:	20 81       	ld	r18, Z
    39e4:	31 81       	ldd	r19, Z+1	; 0x01
    39e6:	82 0f       	add	r24, r18
    39e8:	93 1f       	adc	r25, r19
    39ea:	20 91 65 09 	lds	r18, 0x0965	; 0x800965 <__brkval>
    39ee:	30 91 66 09 	lds	r19, 0x0966	; 0x800966 <__brkval+0x1>
    39f2:	28 17       	cp	r18, r24
    39f4:	39 07       	cpc	r19, r25
    39f6:	51 f5       	brne	.+84     	; 0x3a4c <free+0x88>
    39f8:	f0 93 66 09 	sts	0x0966, r31	; 0x800966 <__brkval+0x1>
    39fc:	e0 93 65 09 	sts	0x0965, r30	; 0x800965 <__brkval>
    3a00:	67 c0       	rjmp	.+206    	; 0x3ad0 <free+0x10c>
    3a02:	ed 01       	movw	r28, r26
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	ce 17       	cp	r28, r30
    3a0a:	df 07       	cpc	r29, r31
    3a0c:	40 f4       	brcc	.+16     	; 0x3a1e <free+0x5a>
    3a0e:	4a 81       	ldd	r20, Y+2	; 0x02
    3a10:	5b 81       	ldd	r21, Y+3	; 0x03
    3a12:	9e 01       	movw	r18, r28
    3a14:	41 15       	cp	r20, r1
    3a16:	51 05       	cpc	r21, r1
    3a18:	f1 f0       	breq	.+60     	; 0x3a56 <free+0x92>
    3a1a:	ea 01       	movw	r28, r20
    3a1c:	f5 cf       	rjmp	.-22     	; 0x3a08 <free+0x44>
    3a1e:	d3 83       	std	Z+3, r29	; 0x03
    3a20:	c2 83       	std	Z+2, r28	; 0x02
    3a22:	40 81       	ld	r20, Z
    3a24:	51 81       	ldd	r21, Z+1	; 0x01
    3a26:	84 0f       	add	r24, r20
    3a28:	95 1f       	adc	r25, r21
    3a2a:	c8 17       	cp	r28, r24
    3a2c:	d9 07       	cpc	r29, r25
    3a2e:	59 f4       	brne	.+22     	; 0x3a46 <free+0x82>
    3a30:	88 81       	ld	r24, Y
    3a32:	99 81       	ldd	r25, Y+1	; 0x01
    3a34:	84 0f       	add	r24, r20
    3a36:	95 1f       	adc	r25, r21
    3a38:	02 96       	adiw	r24, 0x02	; 2
    3a3a:	91 83       	std	Z+1, r25	; 0x01
    3a3c:	80 83       	st	Z, r24
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	9b 81       	ldd	r25, Y+3	; 0x03
    3a42:	93 83       	std	Z+3, r25	; 0x03
    3a44:	82 83       	std	Z+2, r24	; 0x02
    3a46:	21 15       	cp	r18, r1
    3a48:	31 05       	cpc	r19, r1
    3a4a:	29 f4       	brne	.+10     	; 0x3a56 <free+0x92>
    3a4c:	f0 93 68 09 	sts	0x0968, r31	; 0x800968 <__flp+0x1>
    3a50:	e0 93 67 09 	sts	0x0967, r30	; 0x800967 <__flp>
    3a54:	3d c0       	rjmp	.+122    	; 0x3ad0 <free+0x10c>
    3a56:	e9 01       	movw	r28, r18
    3a58:	fb 83       	std	Y+3, r31	; 0x03
    3a5a:	ea 83       	std	Y+2, r30	; 0x02
    3a5c:	49 91       	ld	r20, Y+
    3a5e:	59 91       	ld	r21, Y+
    3a60:	c4 0f       	add	r28, r20
    3a62:	d5 1f       	adc	r29, r21
    3a64:	ec 17       	cp	r30, r28
    3a66:	fd 07       	cpc	r31, r29
    3a68:	61 f4       	brne	.+24     	; 0x3a82 <free+0xbe>
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	84 0f       	add	r24, r20
    3a70:	95 1f       	adc	r25, r21
    3a72:	02 96       	adiw	r24, 0x02	; 2
    3a74:	e9 01       	movw	r28, r18
    3a76:	99 83       	std	Y+1, r25	; 0x01
    3a78:	88 83       	st	Y, r24
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	9b 83       	std	Y+3, r25	; 0x03
    3a80:	8a 83       	std	Y+2, r24	; 0x02
    3a82:	e0 e0       	ldi	r30, 0x00	; 0
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	12 96       	adiw	r26, 0x02	; 2
    3a88:	8d 91       	ld	r24, X+
    3a8a:	9c 91       	ld	r25, X
    3a8c:	13 97       	sbiw	r26, 0x03	; 3
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	19 f0       	breq	.+6      	; 0x3a98 <free+0xd4>
    3a92:	fd 01       	movw	r30, r26
    3a94:	dc 01       	movw	r26, r24
    3a96:	f7 cf       	rjmp	.-18     	; 0x3a86 <free+0xc2>
    3a98:	8d 91       	ld	r24, X+
    3a9a:	9c 91       	ld	r25, X
    3a9c:	11 97       	sbiw	r26, 0x01	; 1
    3a9e:	9d 01       	movw	r18, r26
    3aa0:	2e 5f       	subi	r18, 0xFE	; 254
    3aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa4:	82 0f       	add	r24, r18
    3aa6:	93 1f       	adc	r25, r19
    3aa8:	20 91 65 09 	lds	r18, 0x0965	; 0x800965 <__brkval>
    3aac:	30 91 66 09 	lds	r19, 0x0966	; 0x800966 <__brkval+0x1>
    3ab0:	28 17       	cp	r18, r24
    3ab2:	39 07       	cpc	r19, r25
    3ab4:	69 f4       	brne	.+26     	; 0x3ad0 <free+0x10c>
    3ab6:	30 97       	sbiw	r30, 0x00	; 0
    3ab8:	29 f4       	brne	.+10     	; 0x3ac4 <free+0x100>
    3aba:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__flp+0x1>
    3abe:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <__flp>
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <free+0x104>
    3ac4:	13 82       	std	Z+3, r1	; 0x03
    3ac6:	12 82       	std	Z+2, r1	; 0x02
    3ac8:	b0 93 66 09 	sts	0x0966, r27	; 0x800966 <__brkval+0x1>
    3acc:	a0 93 65 09 	sts	0x0965, r26	; 0x800965 <__brkval>
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	08 95       	ret

00003ad6 <realloc>:
    3ad6:	6f 92       	push	r6
    3ad8:	7f 92       	push	r7
    3ada:	8f 92       	push	r8
    3adc:	9f 92       	push	r9
    3ade:	af 92       	push	r10
    3ae0:	bf 92       	push	r11
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	00 97       	sbiw	r24, 0x00	; 0
    3af4:	81 f4       	brne	.+32     	; 0x3b16 <realloc+0x40>
    3af6:	cb 01       	movw	r24, r22
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	ff 90       	pop	r15
    3b02:	ef 90       	pop	r14
    3b04:	df 90       	pop	r13
    3b06:	cf 90       	pop	r12
    3b08:	bf 90       	pop	r11
    3b0a:	af 90       	pop	r10
    3b0c:	9f 90       	pop	r9
    3b0e:	8f 90       	pop	r8
    3b10:	7f 90       	pop	r7
    3b12:	6f 90       	pop	r6
    3b14:	bf ce       	rjmp	.-642    	; 0x3894 <malloc>
    3b16:	fc 01       	movw	r30, r24
    3b18:	e6 0f       	add	r30, r22
    3b1a:	f7 1f       	adc	r31, r23
    3b1c:	9c 01       	movw	r18, r24
    3b1e:	22 50       	subi	r18, 0x02	; 2
    3b20:	31 09       	sbc	r19, r1
    3b22:	e2 17       	cp	r30, r18
    3b24:	f3 07       	cpc	r31, r19
    3b26:	08 f4       	brcc	.+2      	; 0x3b2a <realloc+0x54>
    3b28:	a5 c0       	rjmp	.+330    	; 0x3c74 <realloc+0x19e>
    3b2a:	ec 01       	movw	r28, r24
    3b2c:	d9 01       	movw	r26, r18
    3b2e:	0d 91       	ld	r16, X+
    3b30:	1c 91       	ld	r17, X
    3b32:	11 97       	sbiw	r26, 0x01	; 1
    3b34:	06 17       	cp	r16, r22
    3b36:	17 07       	cpc	r17, r23
    3b38:	a8 f0       	brcs	.+42     	; 0x3b64 <realloc+0x8e>
    3b3a:	05 30       	cpi	r16, 0x05	; 5
    3b3c:	11 05       	cpc	r17, r1
    3b3e:	08 f4       	brcc	.+2      	; 0x3b42 <realloc+0x6c>
    3b40:	97 c0       	rjmp	.+302    	; 0x3c70 <realloc+0x19a>
    3b42:	c8 01       	movw	r24, r16
    3b44:	04 97       	sbiw	r24, 0x04	; 4
    3b46:	86 17       	cp	r24, r22
    3b48:	97 07       	cpc	r25, r23
    3b4a:	08 f4       	brcc	.+2      	; 0x3b4e <realloc+0x78>
    3b4c:	91 c0       	rjmp	.+290    	; 0x3c70 <realloc+0x19a>
    3b4e:	02 50       	subi	r16, 0x02	; 2
    3b50:	11 09       	sbc	r17, r1
    3b52:	06 1b       	sub	r16, r22
    3b54:	17 0b       	sbc	r17, r23
    3b56:	01 93       	st	Z+, r16
    3b58:	11 93       	st	Z+, r17
    3b5a:	6d 93       	st	X+, r22
    3b5c:	7c 93       	st	X, r23
    3b5e:	cf 01       	movw	r24, r30
    3b60:	31 df       	rcall	.-414    	; 0x39c4 <free>
    3b62:	86 c0       	rjmp	.+268    	; 0x3c70 <realloc+0x19a>
    3b64:	5b 01       	movw	r10, r22
    3b66:	a0 1a       	sub	r10, r16
    3b68:	b1 0a       	sbc	r11, r17
    3b6a:	4c 01       	movw	r8, r24
    3b6c:	80 0e       	add	r8, r16
    3b6e:	91 1e       	adc	r9, r17
    3b70:	a0 91 67 09 	lds	r26, 0x0967	; 0x800967 <__flp>
    3b74:	b0 91 68 09 	lds	r27, 0x0968	; 0x800968 <__flp+0x1>
    3b78:	61 2c       	mov	r6, r1
    3b7a:	71 2c       	mov	r7, r1
    3b7c:	e1 2c       	mov	r14, r1
    3b7e:	f1 2c       	mov	r15, r1
    3b80:	10 97       	sbiw	r26, 0x00	; 0
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <realloc+0xb0>
    3b84:	46 c0       	rjmp	.+140    	; 0x3c12 <realloc+0x13c>
    3b86:	8d 91       	ld	r24, X+
    3b88:	9c 91       	ld	r25, X
    3b8a:	11 97       	sbiw	r26, 0x01	; 1
    3b8c:	a8 15       	cp	r26, r8
    3b8e:	b9 05       	cpc	r27, r9
    3b90:	b1 f5       	brne	.+108    	; 0x3bfe <realloc+0x128>
    3b92:	6c 01       	movw	r12, r24
    3b94:	42 e0       	ldi	r20, 0x02	; 2
    3b96:	c4 0e       	add	r12, r20
    3b98:	d1 1c       	adc	r13, r1
    3b9a:	ca 14       	cp	r12, r10
    3b9c:	db 04       	cpc	r13, r11
    3b9e:	78 f1       	brcs	.+94     	; 0x3bfe <realloc+0x128>
    3ba0:	4c 01       	movw	r8, r24
    3ba2:	8a 18       	sub	r8, r10
    3ba4:	9b 08       	sbc	r9, r11
    3ba6:	64 01       	movw	r12, r8
    3ba8:	42 e0       	ldi	r20, 0x02	; 2
    3baa:	c4 0e       	add	r12, r20
    3bac:	d1 1c       	adc	r13, r1
    3bae:	12 96       	adiw	r26, 0x02	; 2
    3bb0:	bc 90       	ld	r11, X
    3bb2:	12 97       	sbiw	r26, 0x02	; 2
    3bb4:	13 96       	adiw	r26, 0x03	; 3
    3bb6:	ac 91       	ld	r26, X
    3bb8:	b5 e0       	ldi	r27, 0x05	; 5
    3bba:	cb 16       	cp	r12, r27
    3bbc:	d1 04       	cpc	r13, r1
    3bbe:	40 f0       	brcs	.+16     	; 0x3bd0 <realloc+0xfa>
    3bc0:	b2 82       	std	Z+2, r11	; 0x02
    3bc2:	a3 83       	std	Z+3, r26	; 0x03
    3bc4:	91 82       	std	Z+1, r9	; 0x01
    3bc6:	80 82       	st	Z, r8
    3bc8:	d9 01       	movw	r26, r18
    3bca:	6d 93       	st	X+, r22
    3bcc:	7c 93       	st	X, r23
    3bce:	09 c0       	rjmp	.+18     	; 0x3be2 <realloc+0x10c>
    3bd0:	0e 5f       	subi	r16, 0xFE	; 254
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	80 0f       	add	r24, r16
    3bd6:	91 1f       	adc	r25, r17
    3bd8:	f9 01       	movw	r30, r18
    3bda:	91 83       	std	Z+1, r25	; 0x01
    3bdc:	80 83       	st	Z, r24
    3bde:	eb 2d       	mov	r30, r11
    3be0:	fa 2f       	mov	r31, r26
    3be2:	e1 14       	cp	r14, r1
    3be4:	f1 04       	cpc	r15, r1
    3be6:	31 f0       	breq	.+12     	; 0x3bf4 <realloc+0x11e>
    3be8:	d7 01       	movw	r26, r14
    3bea:	13 96       	adiw	r26, 0x03	; 3
    3bec:	fc 93       	st	X, r31
    3bee:	ee 93       	st	-X, r30
    3bf0:	12 97       	sbiw	r26, 0x02	; 2
    3bf2:	3e c0       	rjmp	.+124    	; 0x3c70 <realloc+0x19a>
    3bf4:	f0 93 68 09 	sts	0x0968, r31	; 0x800968 <__flp+0x1>
    3bf8:	e0 93 67 09 	sts	0x0967, r30	; 0x800967 <__flp>
    3bfc:	39 c0       	rjmp	.+114    	; 0x3c70 <realloc+0x19a>
    3bfe:	68 16       	cp	r6, r24
    3c00:	79 06       	cpc	r7, r25
    3c02:	08 f4       	brcc	.+2      	; 0x3c06 <realloc+0x130>
    3c04:	3c 01       	movw	r6, r24
    3c06:	7d 01       	movw	r14, r26
    3c08:	12 96       	adiw	r26, 0x02	; 2
    3c0a:	0d 90       	ld	r0, X+
    3c0c:	bc 91       	ld	r27, X
    3c0e:	a0 2d       	mov	r26, r0
    3c10:	b7 cf       	rjmp	.-146    	; 0x3b80 <realloc+0xaa>
    3c12:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <__brkval>
    3c16:	90 91 66 09 	lds	r25, 0x0966	; 0x800966 <__brkval+0x1>
    3c1a:	88 16       	cp	r8, r24
    3c1c:	99 06       	cpc	r9, r25
    3c1e:	e1 f4       	brne	.+56     	; 0x3c58 <realloc+0x182>
    3c20:	66 16       	cp	r6, r22
    3c22:	77 06       	cpc	r7, r23
    3c24:	c8 f4       	brcc	.+50     	; 0x3c58 <realloc+0x182>
    3c26:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3c2a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3c2e:	00 97       	sbiw	r24, 0x00	; 0
    3c30:	41 f4       	brne	.+16     	; 0x3c42 <realloc+0x16c>
    3c32:	8d b7       	in	r24, 0x3d	; 61
    3c34:	9e b7       	in	r25, 0x3e	; 62
    3c36:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3c3a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3c3e:	84 1b       	sub	r24, r20
    3c40:	95 0b       	sbc	r25, r21
    3c42:	e8 17       	cp	r30, r24
    3c44:	f9 07       	cpc	r31, r25
    3c46:	b0 f4       	brcc	.+44     	; 0x3c74 <realloc+0x19e>
    3c48:	f0 93 66 09 	sts	0x0966, r31	; 0x800966 <__brkval+0x1>
    3c4c:	e0 93 65 09 	sts	0x0965, r30	; 0x800965 <__brkval>
    3c50:	f9 01       	movw	r30, r18
    3c52:	71 83       	std	Z+1, r23	; 0x01
    3c54:	60 83       	st	Z, r22
    3c56:	0c c0       	rjmp	.+24     	; 0x3c70 <realloc+0x19a>
    3c58:	cb 01       	movw	r24, r22
    3c5a:	1c de       	rcall	.-968    	; 0x3894 <malloc>
    3c5c:	7c 01       	movw	r14, r24
    3c5e:	00 97       	sbiw	r24, 0x00	; 0
    3c60:	49 f0       	breq	.+18     	; 0x3c74 <realloc+0x19e>
    3c62:	a8 01       	movw	r20, r16
    3c64:	be 01       	movw	r22, r28
    3c66:	24 d0       	rcall	.+72     	; 0x3cb0 <memcpy>
    3c68:	ce 01       	movw	r24, r28
    3c6a:	ac de       	rcall	.-680    	; 0x39c4 <free>
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	04 c0       	rjmp	.+8      	; 0x3c78 <realloc+0x1a2>
    3c70:	ce 01       	movw	r24, r28
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <realloc+0x1a2>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	1f 91       	pop	r17
    3c7e:	0f 91       	pop	r16
    3c80:	ff 90       	pop	r15
    3c82:	ef 90       	pop	r14
    3c84:	df 90       	pop	r13
    3c86:	cf 90       	pop	r12
    3c88:	bf 90       	pop	r11
    3c8a:	af 90       	pop	r10
    3c8c:	9f 90       	pop	r9
    3c8e:	8f 90       	pop	r8
    3c90:	7f 90       	pop	r7
    3c92:	6f 90       	pop	r6
    3c94:	08 95       	ret

00003c96 <memcmp>:
    3c96:	fb 01       	movw	r30, r22
    3c98:	dc 01       	movw	r26, r24
    3c9a:	04 c0       	rjmp	.+8      	; 0x3ca4 <memcmp+0xe>
    3c9c:	8d 91       	ld	r24, X+
    3c9e:	01 90       	ld	r0, Z+
    3ca0:	80 19       	sub	r24, r0
    3ca2:	21 f4       	brne	.+8      	; 0x3cac <memcmp+0x16>
    3ca4:	41 50       	subi	r20, 0x01	; 1
    3ca6:	50 40       	sbci	r21, 0x00	; 0
    3ca8:	c8 f7       	brcc	.-14     	; 0x3c9c <memcmp+0x6>
    3caa:	88 1b       	sub	r24, r24
    3cac:	99 0b       	sbc	r25, r25
    3cae:	08 95       	ret

00003cb0 <memcpy>:
    3cb0:	fb 01       	movw	r30, r22
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	02 c0       	rjmp	.+4      	; 0x3cba <memcpy+0xa>
    3cb6:	01 90       	ld	r0, Z+
    3cb8:	0d 92       	st	X+, r0
    3cba:	41 50       	subi	r20, 0x01	; 1
    3cbc:	50 40       	sbci	r21, 0x00	; 0
    3cbe:	d8 f7       	brcc	.-10     	; 0x3cb6 <memcpy+0x6>
    3cc0:	08 95       	ret

00003cc2 <strchr>:
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	81 91       	ld	r24, Z+
    3cc6:	86 17       	cp	r24, r22
    3cc8:	21 f0       	breq	.+8      	; 0x3cd2 <strchr+0x10>
    3cca:	88 23       	and	r24, r24
    3ccc:	d9 f7       	brne	.-10     	; 0x3cc4 <strchr+0x2>
    3cce:	99 27       	eor	r25, r25
    3cd0:	08 95       	ret
    3cd2:	31 97       	sbiw	r30, 0x01	; 1
    3cd4:	cf 01       	movw	r24, r30
    3cd6:	08 95       	ret

00003cd8 <strcmp>:
    3cd8:	fb 01       	movw	r30, r22
    3cda:	dc 01       	movw	r26, r24
    3cdc:	8d 91       	ld	r24, X+
    3cde:	01 90       	ld	r0, Z+
    3ce0:	80 19       	sub	r24, r0
    3ce2:	01 10       	cpse	r0, r1
    3ce4:	d9 f3       	breq	.-10     	; 0x3cdc <strcmp+0x4>
    3ce6:	99 0b       	sbc	r25, r25
    3ce8:	08 95       	ret

00003cea <strcpy>:
    3cea:	fb 01       	movw	r30, r22
    3cec:	dc 01       	movw	r26, r24
    3cee:	01 90       	ld	r0, Z+
    3cf0:	0d 92       	st	X+, r0
    3cf2:	00 20       	and	r0, r0
    3cf4:	e1 f7       	brne	.-8      	; 0x3cee <strcpy+0x4>
    3cf6:	08 95       	ret

00003cf8 <strncpy>:
    3cf8:	fb 01       	movw	r30, r22
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	41 50       	subi	r20, 0x01	; 1
    3cfe:	50 40       	sbci	r21, 0x00	; 0
    3d00:	48 f0       	brcs	.+18     	; 0x3d14 <strncpy+0x1c>
    3d02:	01 90       	ld	r0, Z+
    3d04:	0d 92       	st	X+, r0
    3d06:	00 20       	and	r0, r0
    3d08:	c9 f7       	brne	.-14     	; 0x3cfc <strncpy+0x4>
    3d0a:	01 c0       	rjmp	.+2      	; 0x3d0e <strncpy+0x16>
    3d0c:	1d 92       	st	X+, r1
    3d0e:	41 50       	subi	r20, 0x01	; 1
    3d10:	50 40       	sbci	r21, 0x00	; 0
    3d12:	e0 f7       	brcc	.-8      	; 0x3d0c <strncpy+0x14>
    3d14:	08 95       	ret

00003d16 <dtoa_prf>:
    3d16:	8f 92       	push	r8
    3d18:	9f 92       	push	r9
    3d1a:	af 92       	push	r10
    3d1c:	bf 92       	push	r11
    3d1e:	cf 92       	push	r12
    3d20:	df 92       	push	r13
    3d22:	ef 92       	push	r14
    3d24:	ff 92       	push	r15
    3d26:	0f 93       	push	r16
    3d28:	1f 93       	push	r17
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
    3d32:	29 97       	sbiw	r28, 0x09	; 9
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	6a 01       	movw	r12, r20
    3d40:	12 2f       	mov	r17, r18
    3d42:	b0 2e       	mov	r11, r16
    3d44:	2b e3       	ldi	r18, 0x3B	; 59
    3d46:	20 17       	cp	r18, r16
    3d48:	20 f0       	brcs	.+8      	; 0x3d52 <dtoa_prf+0x3c>
    3d4a:	ff 24       	eor	r15, r15
    3d4c:	f3 94       	inc	r15
    3d4e:	f0 0e       	add	r15, r16
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <dtoa_prf+0x40>
    3d52:	2c e3       	ldi	r18, 0x3C	; 60
    3d54:	f2 2e       	mov	r15, r18
    3d56:	0f 2d       	mov	r16, r15
    3d58:	27 e0       	ldi	r18, 0x07	; 7
    3d5a:	ae 01       	movw	r20, r28
    3d5c:	4f 5f       	subi	r20, 0xFF	; 255
    3d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d60:	50 d1       	rcall	.+672    	; 0x4002 <__ftoa_engine>
    3d62:	bc 01       	movw	r22, r24
    3d64:	49 81       	ldd	r20, Y+1	; 0x01
    3d66:	84 2f       	mov	r24, r20
    3d68:	89 70       	andi	r24, 0x09	; 9
    3d6a:	81 30       	cpi	r24, 0x01	; 1
    3d6c:	31 f0       	breq	.+12     	; 0x3d7a <dtoa_prf+0x64>
    3d6e:	e1 fc       	sbrc	r14, 1
    3d70:	06 c0       	rjmp	.+12     	; 0x3d7e <dtoa_prf+0x68>
    3d72:	e0 fe       	sbrs	r14, 0
    3d74:	06 c0       	rjmp	.+12     	; 0x3d82 <dtoa_prf+0x6c>
    3d76:	90 e2       	ldi	r25, 0x20	; 32
    3d78:	05 c0       	rjmp	.+10     	; 0x3d84 <dtoa_prf+0x6e>
    3d7a:	9d e2       	ldi	r25, 0x2D	; 45
    3d7c:	03 c0       	rjmp	.+6      	; 0x3d84 <dtoa_prf+0x6e>
    3d7e:	9b e2       	ldi	r25, 0x2B	; 43
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <dtoa_prf+0x6e>
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	5e 2d       	mov	r21, r14
    3d86:	50 71       	andi	r21, 0x10	; 16
    3d88:	43 ff       	sbrs	r20, 3
    3d8a:	3c c0       	rjmp	.+120    	; 0x3e04 <dtoa_prf+0xee>
    3d8c:	91 11       	cpse	r25, r1
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <dtoa_prf+0x7e>
    3d90:	83 e0       	ldi	r24, 0x03	; 3
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <dtoa_prf+0x80>
    3d94:	84 e0       	ldi	r24, 0x04	; 4
    3d96:	81 17       	cp	r24, r17
    3d98:	18 f4       	brcc	.+6      	; 0x3da0 <dtoa_prf+0x8a>
    3d9a:	21 2f       	mov	r18, r17
    3d9c:	28 1b       	sub	r18, r24
    3d9e:	01 c0       	rjmp	.+2      	; 0x3da2 <dtoa_prf+0x8c>
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	51 11       	cpse	r21, r1
    3da4:	0b c0       	rjmp	.+22     	; 0x3dbc <dtoa_prf+0xa6>
    3da6:	f6 01       	movw	r30, r12
    3da8:	82 2f       	mov	r24, r18
    3daa:	30 e2       	ldi	r19, 0x20	; 32
    3dac:	88 23       	and	r24, r24
    3dae:	19 f0       	breq	.+6      	; 0x3db6 <dtoa_prf+0xa0>
    3db0:	31 93       	st	Z+, r19
    3db2:	81 50       	subi	r24, 0x01	; 1
    3db4:	fb cf       	rjmp	.-10     	; 0x3dac <dtoa_prf+0x96>
    3db6:	c2 0e       	add	r12, r18
    3db8:	d1 1c       	adc	r13, r1
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	99 23       	and	r25, r25
    3dbe:	29 f0       	breq	.+10     	; 0x3dca <dtoa_prf+0xb4>
    3dc0:	d6 01       	movw	r26, r12
    3dc2:	9c 93       	st	X, r25
    3dc4:	f6 01       	movw	r30, r12
    3dc6:	31 96       	adiw	r30, 0x01	; 1
    3dc8:	6f 01       	movw	r12, r30
    3dca:	c6 01       	movw	r24, r12
    3dcc:	03 96       	adiw	r24, 0x03	; 3
    3dce:	e2 fe       	sbrs	r14, 2
    3dd0:	0a c0       	rjmp	.+20     	; 0x3de6 <dtoa_prf+0xd0>
    3dd2:	3e e4       	ldi	r19, 0x4E	; 78
    3dd4:	d6 01       	movw	r26, r12
    3dd6:	3c 93       	st	X, r19
    3dd8:	41 e4       	ldi	r20, 0x41	; 65
    3dda:	11 96       	adiw	r26, 0x01	; 1
    3ddc:	4c 93       	st	X, r20
    3dde:	11 97       	sbiw	r26, 0x01	; 1
    3de0:	12 96       	adiw	r26, 0x02	; 2
    3de2:	3c 93       	st	X, r19
    3de4:	06 c0       	rjmp	.+12     	; 0x3df2 <dtoa_prf+0xdc>
    3de6:	3e e6       	ldi	r19, 0x6E	; 110
    3de8:	f6 01       	movw	r30, r12
    3dea:	30 83       	st	Z, r19
    3dec:	41 e6       	ldi	r20, 0x61	; 97
    3dee:	41 83       	std	Z+1, r20	; 0x01
    3df0:	32 83       	std	Z+2, r19	; 0x02
    3df2:	fc 01       	movw	r30, r24
    3df4:	32 2f       	mov	r19, r18
    3df6:	40 e2       	ldi	r20, 0x20	; 32
    3df8:	33 23       	and	r19, r19
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <dtoa_prf+0xe8>
    3dfc:	42 c0       	rjmp	.+132    	; 0x3e82 <dtoa_prf+0x16c>
    3dfe:	41 93       	st	Z+, r20
    3e00:	31 50       	subi	r19, 0x01	; 1
    3e02:	fa cf       	rjmp	.-12     	; 0x3df8 <dtoa_prf+0xe2>
    3e04:	42 ff       	sbrs	r20, 2
    3e06:	44 c0       	rjmp	.+136    	; 0x3e90 <dtoa_prf+0x17a>
    3e08:	91 11       	cpse	r25, r1
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <dtoa_prf+0xfa>
    3e0c:	83 e0       	ldi	r24, 0x03	; 3
    3e0e:	01 c0       	rjmp	.+2      	; 0x3e12 <dtoa_prf+0xfc>
    3e10:	84 e0       	ldi	r24, 0x04	; 4
    3e12:	81 17       	cp	r24, r17
    3e14:	18 f4       	brcc	.+6      	; 0x3e1c <dtoa_prf+0x106>
    3e16:	21 2f       	mov	r18, r17
    3e18:	28 1b       	sub	r18, r24
    3e1a:	01 c0       	rjmp	.+2      	; 0x3e1e <dtoa_prf+0x108>
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	51 11       	cpse	r21, r1
    3e20:	0b c0       	rjmp	.+22     	; 0x3e38 <dtoa_prf+0x122>
    3e22:	f6 01       	movw	r30, r12
    3e24:	82 2f       	mov	r24, r18
    3e26:	30 e2       	ldi	r19, 0x20	; 32
    3e28:	88 23       	and	r24, r24
    3e2a:	19 f0       	breq	.+6      	; 0x3e32 <dtoa_prf+0x11c>
    3e2c:	31 93       	st	Z+, r19
    3e2e:	81 50       	subi	r24, 0x01	; 1
    3e30:	fb cf       	rjmp	.-10     	; 0x3e28 <dtoa_prf+0x112>
    3e32:	c2 0e       	add	r12, r18
    3e34:	d1 1c       	adc	r13, r1
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	99 23       	and	r25, r25
    3e3a:	29 f0       	breq	.+10     	; 0x3e46 <dtoa_prf+0x130>
    3e3c:	d6 01       	movw	r26, r12
    3e3e:	9c 93       	st	X, r25
    3e40:	f6 01       	movw	r30, r12
    3e42:	31 96       	adiw	r30, 0x01	; 1
    3e44:	6f 01       	movw	r12, r30
    3e46:	c6 01       	movw	r24, r12
    3e48:	03 96       	adiw	r24, 0x03	; 3
    3e4a:	e2 fe       	sbrs	r14, 2
    3e4c:	0b c0       	rjmp	.+22     	; 0x3e64 <dtoa_prf+0x14e>
    3e4e:	39 e4       	ldi	r19, 0x49	; 73
    3e50:	d6 01       	movw	r26, r12
    3e52:	3c 93       	st	X, r19
    3e54:	3e e4       	ldi	r19, 0x4E	; 78
    3e56:	11 96       	adiw	r26, 0x01	; 1
    3e58:	3c 93       	st	X, r19
    3e5a:	11 97       	sbiw	r26, 0x01	; 1
    3e5c:	36 e4       	ldi	r19, 0x46	; 70
    3e5e:	12 96       	adiw	r26, 0x02	; 2
    3e60:	3c 93       	st	X, r19
    3e62:	07 c0       	rjmp	.+14     	; 0x3e72 <dtoa_prf+0x15c>
    3e64:	39 e6       	ldi	r19, 0x69	; 105
    3e66:	f6 01       	movw	r30, r12
    3e68:	30 83       	st	Z, r19
    3e6a:	3e e6       	ldi	r19, 0x6E	; 110
    3e6c:	31 83       	std	Z+1, r19	; 0x01
    3e6e:	36 e6       	ldi	r19, 0x66	; 102
    3e70:	32 83       	std	Z+2, r19	; 0x02
    3e72:	fc 01       	movw	r30, r24
    3e74:	32 2f       	mov	r19, r18
    3e76:	40 e2       	ldi	r20, 0x20	; 32
    3e78:	33 23       	and	r19, r19
    3e7a:	19 f0       	breq	.+6      	; 0x3e82 <dtoa_prf+0x16c>
    3e7c:	41 93       	st	Z+, r20
    3e7e:	31 50       	subi	r19, 0x01	; 1
    3e80:	fb cf       	rjmp	.-10     	; 0x3e78 <dtoa_prf+0x162>
    3e82:	fc 01       	movw	r30, r24
    3e84:	e2 0f       	add	r30, r18
    3e86:	f1 1d       	adc	r31, r1
    3e88:	10 82       	st	Z, r1
    3e8a:	8e ef       	ldi	r24, 0xFE	; 254
    3e8c:	9f ef       	ldi	r25, 0xFF	; 255
    3e8e:	a6 c0       	rjmp	.+332    	; 0x3fdc <dtoa_prf+0x2c6>
    3e90:	21 e0       	ldi	r18, 0x01	; 1
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	91 11       	cpse	r25, r1
    3e96:	02 c0       	rjmp	.+4      	; 0x3e9c <dtoa_prf+0x186>
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	16 16       	cp	r1, r22
    3e9e:	17 06       	cpc	r1, r23
    3ea0:	1c f4       	brge	.+6      	; 0x3ea8 <dtoa_prf+0x192>
    3ea2:	fb 01       	movw	r30, r22
    3ea4:	31 96       	adiw	r30, 0x01	; 1
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <dtoa_prf+0x196>
    3ea8:	e1 e0       	ldi	r30, 0x01	; 1
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	2e 0f       	add	r18, r30
    3eae:	3f 1f       	adc	r19, r31
    3eb0:	bb 20       	and	r11, r11
    3eb2:	21 f0       	breq	.+8      	; 0x3ebc <dtoa_prf+0x1a6>
    3eb4:	eb 2d       	mov	r30, r11
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	31 96       	adiw	r30, 0x01	; 1
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <dtoa_prf+0x1aa>
    3ebc:	e0 e0       	ldi	r30, 0x00	; 0
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	2e 0f       	add	r18, r30
    3ec2:	3f 1f       	adc	r19, r31
    3ec4:	e1 2f       	mov	r30, r17
    3ec6:	f0 e0       	ldi	r31, 0x00	; 0
    3ec8:	2e 17       	cp	r18, r30
    3eca:	3f 07       	cpc	r19, r31
    3ecc:	1c f4       	brge	.+6      	; 0x3ed4 <dtoa_prf+0x1be>
    3ece:	12 1b       	sub	r17, r18
    3ed0:	21 2f       	mov	r18, r17
    3ed2:	01 c0       	rjmp	.+2      	; 0x3ed6 <dtoa_prf+0x1c0>
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	8e 2d       	mov	r24, r14
    3ed8:	88 71       	andi	r24, 0x18	; 24
    3eda:	59 f4       	brne	.+22     	; 0x3ef2 <dtoa_prf+0x1dc>
    3edc:	f6 01       	movw	r30, r12
    3ede:	82 2f       	mov	r24, r18
    3ee0:	30 e2       	ldi	r19, 0x20	; 32
    3ee2:	88 23       	and	r24, r24
    3ee4:	19 f0       	breq	.+6      	; 0x3eec <dtoa_prf+0x1d6>
    3ee6:	31 93       	st	Z+, r19
    3ee8:	81 50       	subi	r24, 0x01	; 1
    3eea:	fb cf       	rjmp	.-10     	; 0x3ee2 <dtoa_prf+0x1cc>
    3eec:	c2 0e       	add	r12, r18
    3eee:	d1 1c       	adc	r13, r1
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	99 23       	and	r25, r25
    3ef4:	29 f0       	breq	.+10     	; 0x3f00 <dtoa_prf+0x1ea>
    3ef6:	d6 01       	movw	r26, r12
    3ef8:	9c 93       	st	X, r25
    3efa:	f6 01       	movw	r30, r12
    3efc:	31 96       	adiw	r30, 0x01	; 1
    3efe:	6f 01       	movw	r12, r30
    3f00:	51 11       	cpse	r21, r1
    3f02:	0b c0       	rjmp	.+22     	; 0x3f1a <dtoa_prf+0x204>
    3f04:	f6 01       	movw	r30, r12
    3f06:	82 2f       	mov	r24, r18
    3f08:	90 e3       	ldi	r25, 0x30	; 48
    3f0a:	88 23       	and	r24, r24
    3f0c:	19 f0       	breq	.+6      	; 0x3f14 <dtoa_prf+0x1fe>
    3f0e:	91 93       	st	Z+, r25
    3f10:	81 50       	subi	r24, 0x01	; 1
    3f12:	fb cf       	rjmp	.-10     	; 0x3f0a <dtoa_prf+0x1f4>
    3f14:	c2 0e       	add	r12, r18
    3f16:	d1 1c       	adc	r13, r1
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	0f 2d       	mov	r16, r15
    3f1c:	06 0f       	add	r16, r22
    3f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f20:	34 2f       	mov	r19, r20
    3f22:	30 71       	andi	r19, 0x10	; 16
    3f24:	44 ff       	sbrs	r20, 4
    3f26:	03 c0       	rjmp	.+6      	; 0x3f2e <dtoa_prf+0x218>
    3f28:	91 33       	cpi	r25, 0x31	; 49
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <dtoa_prf+0x218>
    3f2c:	01 50       	subi	r16, 0x01	; 1
    3f2e:	10 16       	cp	r1, r16
    3f30:	24 f4       	brge	.+8      	; 0x3f3a <dtoa_prf+0x224>
    3f32:	09 30       	cpi	r16, 0x09	; 9
    3f34:	18 f0       	brcs	.+6      	; 0x3f3c <dtoa_prf+0x226>
    3f36:	08 e0       	ldi	r16, 0x08	; 8
    3f38:	01 c0       	rjmp	.+2      	; 0x3f3c <dtoa_prf+0x226>
    3f3a:	01 e0       	ldi	r16, 0x01	; 1
    3f3c:	ab 01       	movw	r20, r22
    3f3e:	77 ff       	sbrs	r23, 7
    3f40:	02 c0       	rjmp	.+4      	; 0x3f46 <dtoa_prf+0x230>
    3f42:	40 e0       	ldi	r20, 0x00	; 0
    3f44:	50 e0       	ldi	r21, 0x00	; 0
    3f46:	fb 01       	movw	r30, r22
    3f48:	e4 1b       	sub	r30, r20
    3f4a:	f5 0b       	sbc	r31, r21
    3f4c:	a1 e0       	ldi	r26, 0x01	; 1
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	ac 0f       	add	r26, r28
    3f52:	bd 1f       	adc	r27, r29
    3f54:	ea 0f       	add	r30, r26
    3f56:	fb 1f       	adc	r31, r27
    3f58:	8e e2       	ldi	r24, 0x2E	; 46
    3f5a:	a8 2e       	mov	r10, r24
    3f5c:	4b 01       	movw	r8, r22
    3f5e:	80 1a       	sub	r8, r16
    3f60:	91 08       	sbc	r9, r1
    3f62:	0b 2d       	mov	r16, r11
    3f64:	10 e0       	ldi	r17, 0x00	; 0
    3f66:	11 95       	neg	r17
    3f68:	01 95       	neg	r16
    3f6a:	11 09       	sbc	r17, r1
    3f6c:	4f 3f       	cpi	r20, 0xFF	; 255
    3f6e:	bf ef       	ldi	r27, 0xFF	; 255
    3f70:	5b 07       	cpc	r21, r27
    3f72:	21 f4       	brne	.+8      	; 0x3f7c <dtoa_prf+0x266>
    3f74:	d6 01       	movw	r26, r12
    3f76:	ac 92       	st	X, r10
    3f78:	11 96       	adiw	r26, 0x01	; 1
    3f7a:	6d 01       	movw	r12, r26
    3f7c:	64 17       	cp	r22, r20
    3f7e:	75 07       	cpc	r23, r21
    3f80:	2c f0       	brlt	.+10     	; 0x3f8c <dtoa_prf+0x276>
    3f82:	84 16       	cp	r8, r20
    3f84:	95 06       	cpc	r9, r21
    3f86:	14 f4       	brge	.+4      	; 0x3f8c <dtoa_prf+0x276>
    3f88:	81 81       	ldd	r24, Z+1	; 0x01
    3f8a:	01 c0       	rjmp	.+2      	; 0x3f8e <dtoa_prf+0x278>
    3f8c:	80 e3       	ldi	r24, 0x30	; 48
    3f8e:	41 50       	subi	r20, 0x01	; 1
    3f90:	51 09       	sbc	r21, r1
    3f92:	31 96       	adiw	r30, 0x01	; 1
    3f94:	d6 01       	movw	r26, r12
    3f96:	11 96       	adiw	r26, 0x01	; 1
    3f98:	7d 01       	movw	r14, r26
    3f9a:	40 17       	cp	r20, r16
    3f9c:	51 07       	cpc	r21, r17
    3f9e:	24 f0       	brlt	.+8      	; 0x3fa8 <dtoa_prf+0x292>
    3fa0:	d6 01       	movw	r26, r12
    3fa2:	8c 93       	st	X, r24
    3fa4:	67 01       	movw	r12, r14
    3fa6:	e2 cf       	rjmp	.-60     	; 0x3f6c <dtoa_prf+0x256>
    3fa8:	64 17       	cp	r22, r20
    3faa:	75 07       	cpc	r23, r21
    3fac:	39 f4       	brne	.+14     	; 0x3fbc <dtoa_prf+0x2a6>
    3fae:	96 33       	cpi	r25, 0x36	; 54
    3fb0:	20 f4       	brcc	.+8      	; 0x3fba <dtoa_prf+0x2a4>
    3fb2:	95 33       	cpi	r25, 0x35	; 53
    3fb4:	19 f4       	brne	.+6      	; 0x3fbc <dtoa_prf+0x2a6>
    3fb6:	31 11       	cpse	r19, r1
    3fb8:	01 c0       	rjmp	.+2      	; 0x3fbc <dtoa_prf+0x2a6>
    3fba:	81 e3       	ldi	r24, 0x31	; 49
    3fbc:	f6 01       	movw	r30, r12
    3fbe:	80 83       	st	Z, r24
    3fc0:	f7 01       	movw	r30, r14
    3fc2:	82 2f       	mov	r24, r18
    3fc4:	90 e2       	ldi	r25, 0x20	; 32
    3fc6:	88 23       	and	r24, r24
    3fc8:	19 f0       	breq	.+6      	; 0x3fd0 <dtoa_prf+0x2ba>
    3fca:	91 93       	st	Z+, r25
    3fcc:	81 50       	subi	r24, 0x01	; 1
    3fce:	fb cf       	rjmp	.-10     	; 0x3fc6 <dtoa_prf+0x2b0>
    3fd0:	f7 01       	movw	r30, r14
    3fd2:	e2 0f       	add	r30, r18
    3fd4:	f1 1d       	adc	r31, r1
    3fd6:	10 82       	st	Z, r1
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	29 96       	adiw	r28, 0x09	; 9
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	df 91       	pop	r29
    3fea:	cf 91       	pop	r28
    3fec:	1f 91       	pop	r17
    3fee:	0f 91       	pop	r16
    3ff0:	ff 90       	pop	r15
    3ff2:	ef 90       	pop	r14
    3ff4:	df 90       	pop	r13
    3ff6:	cf 90       	pop	r12
    3ff8:	bf 90       	pop	r11
    3ffa:	af 90       	pop	r10
    3ffc:	9f 90       	pop	r9
    3ffe:	8f 90       	pop	r8
    4000:	08 95       	ret

00004002 <__ftoa_engine>:
    4002:	28 30       	cpi	r18, 0x08	; 8
    4004:	08 f0       	brcs	.+2      	; 0x4008 <__ftoa_engine+0x6>
    4006:	27 e0       	ldi	r18, 0x07	; 7
    4008:	33 27       	eor	r19, r19
    400a:	da 01       	movw	r26, r20
    400c:	99 0f       	add	r25, r25
    400e:	31 1d       	adc	r19, r1
    4010:	87 fd       	sbrc	r24, 7
    4012:	91 60       	ori	r25, 0x01	; 1
    4014:	00 96       	adiw	r24, 0x00	; 0
    4016:	61 05       	cpc	r22, r1
    4018:	71 05       	cpc	r23, r1
    401a:	39 f4       	brne	.+14     	; 0x402a <__ftoa_engine+0x28>
    401c:	32 60       	ori	r19, 0x02	; 2
    401e:	2e 5f       	subi	r18, 0xFE	; 254
    4020:	3d 93       	st	X+, r19
    4022:	30 e3       	ldi	r19, 0x30	; 48
    4024:	2a 95       	dec	r18
    4026:	e1 f7       	brne	.-8      	; 0x4020 <__ftoa_engine+0x1e>
    4028:	08 95       	ret
    402a:	9f 3f       	cpi	r25, 0xFF	; 255
    402c:	30 f0       	brcs	.+12     	; 0x403a <__ftoa_engine+0x38>
    402e:	80 38       	cpi	r24, 0x80	; 128
    4030:	71 05       	cpc	r23, r1
    4032:	61 05       	cpc	r22, r1
    4034:	09 f0       	breq	.+2      	; 0x4038 <__ftoa_engine+0x36>
    4036:	3c 5f       	subi	r19, 0xFC	; 252
    4038:	3c 5f       	subi	r19, 0xFC	; 252
    403a:	3d 93       	st	X+, r19
    403c:	91 30       	cpi	r25, 0x01	; 1
    403e:	08 f0       	brcs	.+2      	; 0x4042 <__ftoa_engine+0x40>
    4040:	80 68       	ori	r24, 0x80	; 128
    4042:	91 1d       	adc	r25, r1
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	1f 93       	push	r17
    404a:	0f 93       	push	r16
    404c:	ff 92       	push	r15
    404e:	ef 92       	push	r14
    4050:	19 2f       	mov	r17, r25
    4052:	98 7f       	andi	r25, 0xF8	; 248
    4054:	96 95       	lsr	r25
    4056:	e9 2f       	mov	r30, r25
    4058:	96 95       	lsr	r25
    405a:	96 95       	lsr	r25
    405c:	e9 0f       	add	r30, r25
    405e:	ff 27       	eor	r31, r31
    4060:	ee 59       	subi	r30, 0x9E	; 158
    4062:	fe 4f       	sbci	r31, 0xFE	; 254
    4064:	99 27       	eor	r25, r25
    4066:	33 27       	eor	r19, r19
    4068:	ee 24       	eor	r14, r14
    406a:	ff 24       	eor	r15, r15
    406c:	a7 01       	movw	r20, r14
    406e:	e7 01       	movw	r28, r14
    4070:	05 90       	lpm	r0, Z+
    4072:	08 94       	sec
    4074:	07 94       	ror	r0
    4076:	28 f4       	brcc	.+10     	; 0x4082 <__ftoa_engine+0x80>
    4078:	36 0f       	add	r19, r22
    407a:	e7 1e       	adc	r14, r23
    407c:	f8 1e       	adc	r15, r24
    407e:	49 1f       	adc	r20, r25
    4080:	51 1d       	adc	r21, r1
    4082:	66 0f       	add	r22, r22
    4084:	77 1f       	adc	r23, r23
    4086:	88 1f       	adc	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	06 94       	lsr	r0
    408c:	a1 f7       	brne	.-24     	; 0x4076 <__ftoa_engine+0x74>
    408e:	05 90       	lpm	r0, Z+
    4090:	07 94       	ror	r0
    4092:	28 f4       	brcc	.+10     	; 0x409e <__ftoa_engine+0x9c>
    4094:	e7 0e       	add	r14, r23
    4096:	f8 1e       	adc	r15, r24
    4098:	49 1f       	adc	r20, r25
    409a:	56 1f       	adc	r21, r22
    409c:	c1 1d       	adc	r28, r1
    409e:	77 0f       	add	r23, r23
    40a0:	88 1f       	adc	r24, r24
    40a2:	99 1f       	adc	r25, r25
    40a4:	66 1f       	adc	r22, r22
    40a6:	06 94       	lsr	r0
    40a8:	a1 f7       	brne	.-24     	; 0x4092 <__ftoa_engine+0x90>
    40aa:	05 90       	lpm	r0, Z+
    40ac:	07 94       	ror	r0
    40ae:	28 f4       	brcc	.+10     	; 0x40ba <__ftoa_engine+0xb8>
    40b0:	f8 0e       	add	r15, r24
    40b2:	49 1f       	adc	r20, r25
    40b4:	56 1f       	adc	r21, r22
    40b6:	c7 1f       	adc	r28, r23
    40b8:	d1 1d       	adc	r29, r1
    40ba:	88 0f       	add	r24, r24
    40bc:	99 1f       	adc	r25, r25
    40be:	66 1f       	adc	r22, r22
    40c0:	77 1f       	adc	r23, r23
    40c2:	06 94       	lsr	r0
    40c4:	a1 f7       	brne	.-24     	; 0x40ae <__ftoa_engine+0xac>
    40c6:	05 90       	lpm	r0, Z+
    40c8:	07 94       	ror	r0
    40ca:	20 f4       	brcc	.+8      	; 0x40d4 <__ftoa_engine+0xd2>
    40cc:	49 0f       	add	r20, r25
    40ce:	56 1f       	adc	r21, r22
    40d0:	c7 1f       	adc	r28, r23
    40d2:	d8 1f       	adc	r29, r24
    40d4:	99 0f       	add	r25, r25
    40d6:	66 1f       	adc	r22, r22
    40d8:	77 1f       	adc	r23, r23
    40da:	88 1f       	adc	r24, r24
    40dc:	06 94       	lsr	r0
    40de:	a9 f7       	brne	.-22     	; 0x40ca <__ftoa_engine+0xc8>
    40e0:	84 91       	lpm	r24, Z
    40e2:	10 95       	com	r17
    40e4:	17 70       	andi	r17, 0x07	; 7
    40e6:	41 f0       	breq	.+16     	; 0x40f8 <__ftoa_engine+0xf6>
    40e8:	d6 95       	lsr	r29
    40ea:	c7 95       	ror	r28
    40ec:	57 95       	ror	r21
    40ee:	47 95       	ror	r20
    40f0:	f7 94       	ror	r15
    40f2:	e7 94       	ror	r14
    40f4:	1a 95       	dec	r17
    40f6:	c1 f7       	brne	.-16     	; 0x40e8 <__ftoa_engine+0xe6>
    40f8:	e8 e0       	ldi	r30, 0x08	; 8
    40fa:	f1 e0       	ldi	r31, 0x01	; 1
    40fc:	68 94       	set
    40fe:	15 90       	lpm	r1, Z+
    4100:	15 91       	lpm	r17, Z+
    4102:	35 91       	lpm	r19, Z+
    4104:	65 91       	lpm	r22, Z+
    4106:	95 91       	lpm	r25, Z+
    4108:	05 90       	lpm	r0, Z+
    410a:	7f e2       	ldi	r23, 0x2F	; 47
    410c:	73 95       	inc	r23
    410e:	e1 18       	sub	r14, r1
    4110:	f1 0a       	sbc	r15, r17
    4112:	43 0b       	sbc	r20, r19
    4114:	56 0b       	sbc	r21, r22
    4116:	c9 0b       	sbc	r28, r25
    4118:	d0 09       	sbc	r29, r0
    411a:	c0 f7       	brcc	.-16     	; 0x410c <__ftoa_engine+0x10a>
    411c:	e1 0c       	add	r14, r1
    411e:	f1 1e       	adc	r15, r17
    4120:	43 1f       	adc	r20, r19
    4122:	56 1f       	adc	r21, r22
    4124:	c9 1f       	adc	r28, r25
    4126:	d0 1d       	adc	r29, r0
    4128:	7e f4       	brtc	.+30     	; 0x4148 <__ftoa_engine+0x146>
    412a:	70 33       	cpi	r23, 0x30	; 48
    412c:	11 f4       	brne	.+4      	; 0x4132 <__ftoa_engine+0x130>
    412e:	8a 95       	dec	r24
    4130:	e6 cf       	rjmp	.-52     	; 0x40fe <__ftoa_engine+0xfc>
    4132:	e8 94       	clt
    4134:	01 50       	subi	r16, 0x01	; 1
    4136:	30 f0       	brcs	.+12     	; 0x4144 <__ftoa_engine+0x142>
    4138:	08 0f       	add	r16, r24
    413a:	0a f4       	brpl	.+2      	; 0x413e <__ftoa_engine+0x13c>
    413c:	00 27       	eor	r16, r16
    413e:	02 17       	cp	r16, r18
    4140:	08 f4       	brcc	.+2      	; 0x4144 <__ftoa_engine+0x142>
    4142:	20 2f       	mov	r18, r16
    4144:	23 95       	inc	r18
    4146:	02 2f       	mov	r16, r18
    4148:	7a 33       	cpi	r23, 0x3A	; 58
    414a:	28 f0       	brcs	.+10     	; 0x4156 <__ftoa_engine+0x154>
    414c:	79 e3       	ldi	r23, 0x39	; 57
    414e:	7d 93       	st	X+, r23
    4150:	2a 95       	dec	r18
    4152:	e9 f7       	brne	.-6      	; 0x414e <__ftoa_engine+0x14c>
    4154:	10 c0       	rjmp	.+32     	; 0x4176 <__ftoa_engine+0x174>
    4156:	7d 93       	st	X+, r23
    4158:	2a 95       	dec	r18
    415a:	89 f6       	brne	.-94     	; 0x40fe <__ftoa_engine+0xfc>
    415c:	06 94       	lsr	r0
    415e:	97 95       	ror	r25
    4160:	67 95       	ror	r22
    4162:	37 95       	ror	r19
    4164:	17 95       	ror	r17
    4166:	17 94       	ror	r1
    4168:	e1 18       	sub	r14, r1
    416a:	f1 0a       	sbc	r15, r17
    416c:	43 0b       	sbc	r20, r19
    416e:	56 0b       	sbc	r21, r22
    4170:	c9 0b       	sbc	r28, r25
    4172:	d0 09       	sbc	r29, r0
    4174:	98 f0       	brcs	.+38     	; 0x419c <__ftoa_engine+0x19a>
    4176:	23 95       	inc	r18
    4178:	7e 91       	ld	r23, -X
    417a:	73 95       	inc	r23
    417c:	7a 33       	cpi	r23, 0x3A	; 58
    417e:	08 f0       	brcs	.+2      	; 0x4182 <__ftoa_engine+0x180>
    4180:	70 e3       	ldi	r23, 0x30	; 48
    4182:	7c 93       	st	X, r23
    4184:	20 13       	cpse	r18, r16
    4186:	b8 f7       	brcc	.-18     	; 0x4176 <__ftoa_engine+0x174>
    4188:	7e 91       	ld	r23, -X
    418a:	70 61       	ori	r23, 0x10	; 16
    418c:	7d 93       	st	X+, r23
    418e:	30 f0       	brcs	.+12     	; 0x419c <__ftoa_engine+0x19a>
    4190:	83 95       	inc	r24
    4192:	71 e3       	ldi	r23, 0x31	; 49
    4194:	7d 93       	st	X+, r23
    4196:	70 e3       	ldi	r23, 0x30	; 48
    4198:	2a 95       	dec	r18
    419a:	e1 f7       	brne	.-8      	; 0x4194 <__ftoa_engine+0x192>
    419c:	11 24       	eor	r1, r1
    419e:	ef 90       	pop	r14
    41a0:	ff 90       	pop	r15
    41a2:	0f 91       	pop	r16
    41a4:	1f 91       	pop	r17
    41a6:	cf 91       	pop	r28
    41a8:	df 91       	pop	r29
    41aa:	99 27       	eor	r25, r25
    41ac:	87 fd       	sbrc	r24, 7
    41ae:	90 95       	com	r25
    41b0:	08 95       	ret

000041b2 <__do_global_dtors>:
    41b2:	11 e0       	ldi	r17, 0x01	; 1
    41b4:	c1 e9       	ldi	r28, 0x91	; 145
    41b6:	d1 e0       	ldi	r29, 0x01	; 1
    41b8:	00 e0       	ldi	r16, 0x00	; 0
    41ba:	05 c0       	rjmp	.+10     	; 0x41c6 <__do_global_dtors+0x14>
    41bc:	80 2f       	mov	r24, r16
    41be:	fe 01       	movw	r30, r28
    41c0:	29 db       	rcall	.-2478   	; 0x3814 <__tablejump2__>
    41c2:	21 96       	adiw	r28, 0x01	; 1
    41c4:	01 1d       	adc	r16, r1
    41c6:	c2 39       	cpi	r28, 0x92	; 146
    41c8:	d1 07       	cpc	r29, r17
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	08 07       	cpc	r16, r24
    41ce:	b1 f7       	brne	.-20     	; 0x41bc <__do_global_dtors+0xa>
    41d0:	f8 94       	cli

000041d2 <__stop_program>:
    41d2:	ff cf       	rjmp	.-2      	; 0x41d2 <__stop_program>
