
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800200  000040ae  00004142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000495  00800406  00800406  00004348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000fb0  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000322f2  00000000  00000000  00005368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007385  00000000  00000000  0003765a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000099d5  00000000  00000000  0003e9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003998  00000000  00000000  000483b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e67  00000000  00000000  0004bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000153c2  00000000  00000000  00053bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011a0  00000000  00000000  00068f75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	40 c1       	rjmp	.+640    	; 0x282 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__vector_1>
       8:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_2>
       c:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_3>
      10:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__vector_4>
      14:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_5>
      18:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_6>
      1c:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_7>
      20:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__vector_8>
      24:	2f c6       	rjmp	.+3166   	; 0xc84 <__vector_10>
      26:	00 00       	nop
      28:	2d c6       	rjmp	.+3162   	; 0xc84 <__vector_10>
      2a:	00 00       	nop
      2c:	2b c6       	rjmp	.+3158   	; 0xc84 <__vector_10>
      2e:	00 00       	nop
      30:	59 c1       	rjmp	.+690    	; 0x2e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c1       	rjmp	.+686    	; 0x2e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c1       	rjmp	.+682    	; 0x2e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c1       	rjmp	.+678    	; 0x2e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c1       	rjmp	.+674    	; 0x2e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c1       	rjmp	.+670    	; 0x2e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c1       	rjmp	.+666    	; 0x2e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c1       	rjmp	.+662    	; 0x2e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c1       	rjmp	.+658    	; 0x2e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c1       	rjmp	.+654    	; 0x2e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c1       	rjmp	.+650    	; 0x2e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__vector_23>
      60:	41 c1       	rjmp	.+642    	; 0x2e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__vector_25>
      68:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_26>
      6c:	3b c1       	rjmp	.+630    	; 0x2e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c1       	rjmp	.+626    	; 0x2e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c1       	rjmp	.+622    	; 0x2e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c1       	rjmp	.+618    	; 0x2e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c1       	rjmp	.+614    	; 0x2e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c1       	rjmp	.+610    	; 0x2e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c1       	rjmp	.+606    	; 0x2e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c1       	rjmp	.+602    	; 0x2e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c1       	rjmp	.+598    	; 0x2e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c1       	rjmp	.+594    	; 0x2e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c1       	rjmp	.+590    	; 0x2e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c1       	rjmp	.+586    	; 0x2e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6f c7       	rjmp	.+3806   	; 0xf7c <__vector_39>
      9e:	00 00       	nop
      a0:	21 c1       	rjmp	.+578    	; 0x2e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c1       	rjmp	.+574    	; 0x2e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c1       	rjmp	.+570    	; 0x2e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c1       	rjmp	.+566    	; 0x2e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c1       	rjmp	.+562    	; 0x2e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c1       	rjmp	.+558    	; 0x2e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c1       	rjmp	.+554    	; 0x2e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c1       	rjmp	.+550    	; 0x2e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c1       	rjmp	.+546    	; 0x2e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c1       	rjmp	.+542    	; 0x2e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c1       	rjmp	.+538    	; 0x2e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c1       	rjmp	.+534    	; 0x2e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c1       	rjmp	.+530    	; 0x2e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c1       	rjmp	.+526    	; 0x2e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c1       	rjmp	.+522    	; 0x2e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c1       	rjmp	.+518    	; 0x2e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c1       	rjmp	.+514    	; 0x2e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	58 05       	cpc	r21, r8
      e6:	6f 05       	cpc	r22, r15
      e8:	6f 05       	cpc	r22, r15
      ea:	6c 05       	cpc	r22, r12
      ec:	6f 05       	cpc	r22, r15
      ee:	56 05       	cpc	r21, r6
      f0:	6f 05       	cpc	r22, r15
      f2:	6f 05       	cpc	r22, r15
      f4:	6f 05       	cpc	r22, r15
      f6:	4a 05       	cpc	r20, r10
      f8:	6f 05       	cpc	r22, r15
      fa:	6f 05       	cpc	r22, r15
      fc:	5f 05       	cpc	r21, r15
      fe:	6a 05       	cpc	r22, r10
     100:	68 05       	cpc	r22, r8
     102:	6f 05       	cpc	r22, r15
     104:	6f 05       	cpc	r22, r15
     106:	6f 05       	cpc	r22, r15
     108:	66 05       	cpc	r22, r6
     10a:	10 0d       	add	r17, r0
     10c:	da 0c       	add	r13, r10
     10e:	e2 0c       	add	r14, r2
     110:	ee 0c       	add	r14, r14
     112:	fb 0c       	add	r15, r11
     114:	1c 0d       	add	r17, r12
     116:	29 0d       	add	r18, r9
     118:	c0 0f       	add	r28, r16
     11a:	c3 0f       	add	r28, r19
     11c:	b2 0f       	add	r27, r18
     11e:	b6 0f       	add	r27, r22
     120:	bc 0f       	add	r27, r28
     122:	fa 0f       	add	r31, r26
     124:	c7 0f       	add	r28, r23
     126:	cb 0f       	add	r28, r27
     128:	d1 0f       	add	r29, r17
     12a:	d5 0f       	add	r29, r21
     12c:	d9 0f       	add	r29, r25
     12e:	df 0f       	add	r29, r31
     130:	e3 0f       	add	r30, r19
     132:	e7 0f       	add	r30, r23
     134:	fa 0f       	add	r31, r26
     136:	ed 0f       	add	r30, r29
     138:	f1 0f       	add	r31, r17
     13a:	f5 0f       	add	r31, r21

0000013c <__trampolines_end>:
     13c:	44 65       	ori	r20, 0x54	; 84
     13e:	63 20       	and	r6, r3
     140:	20 37       	cpi	r18, 0x70	; 112
     142:	20 32       	cpi	r18, 0x20	; 32
     144:	30 31       	cpi	r19, 0x10	; 16
     146:	38 00       	.word	0x0038	; ????

00000148 <_ZZN13RealTimeClock7initRTCEvE3__c_0>:
     148:	31 38 3a 35 30 3a 34 34 00                          18:50:44.

00000151 <digital_pin_to_timer_PGM>:
     151:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     17d:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000197 <digital_pin_to_bit_mask_PGM>:
     197:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1a7:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1b7:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1c7:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1d7:	04 08 10 20 40 80                                   ... @.

000001dd <digital_pin_to_port_PGM>:
     1dd:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1ed:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1fd:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     20d:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     21d:	0b 0b 0b 0b 0b 0b                                   ......

00000223 <port_to_input_PGM>:
     223:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     233:	00 01 00 00 03 01 06 01 09 01                       ..........

0000023d <port_to_output_PGM>:
     23d:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     24d:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000257 <port_to_mode_PGM>:
     257:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     267:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000272 <__ctors_start>:
     272:	8b 01       	movw	r16, r22
     274:	5b 02       	muls	r21, r27
     276:	48 0a       	sbc	r4, r24
     278:	5d 0a       	sbc	r5, r29
     27a:	35 0c       	add	r3, r5
     27c:	2d 12       	cpse	r2, r29
     27e:	5f 15       	cp	r21, r15

00000280 <__ctors_end>:
     280:	a7 01       	movw	r20, r14

00000282 <__dtors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d1 e2       	ldi	r29, 0x21	; 33
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	00 e0       	ldi	r16, 0x00	; 0
     290:	0c bf       	out	0x3c, r16	; 60

00000292 <__do_copy_data>:
     292:	14 e0       	ldi	r17, 0x04	; 4
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	ee ea       	ldi	r30, 0xAE	; 174
     29a:	f0 e4       	ldi	r31, 0x40	; 64
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	0b bf       	out	0x3b, r16	; 59
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__do_copy_data+0x14>
     2a2:	07 90       	elpm	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	a6 30       	cpi	r26, 0x06	; 6
     2a8:	b1 07       	cpc	r27, r17
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__do_copy_data+0x10>

000002ac <__do_clear_bss>:
     2ac:	28 e0       	ldi	r18, 0x08	; 8
     2ae:	a6 e0       	ldi	r26, 0x06	; 6
     2b0:	b4 e0       	ldi	r27, 0x04	; 4
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	ab 39       	cpi	r26, 0x9B	; 155
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>

000002bc <__do_global_ctors>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	c0 e4       	ldi	r28, 0x40	; 64
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <__do_global_ctors+0x16>
     2c6:	21 97       	sbiw	r28, 0x01	; 1
     2c8:	01 09       	sbc	r16, r1
     2ca:	80 2f       	mov	r24, r16
     2cc:	fe 01       	movw	r30, r28
     2ce:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <__tablejump2__>
     2d2:	c9 33       	cpi	r28, 0x39	; 57
     2d4:	d1 07       	cpc	r29, r17
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 07       	cpc	r16, r24
     2da:	a9 f7       	brne	.-22     	; 0x2c6 <__do_global_ctors+0xa>
     2dc:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <main>
     2e0:	0c 94 46 20 	jmp	0x408c	; 0x408c <__do_global_dtors>

000002e4 <__bad_interrupt>:
     2e4:	8d ce       	rjmp	.-742    	; 0x0 <__vectors>

000002e6 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2e6:	26 e0       	ldi	r18, 0x06	; 6
     2e8:	40 e8       	ldi	r20, 0x80	; 128
     2ea:	55 e2       	ldi	r21, 0x25	; 37
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	88 e9       	ldi	r24, 0x98	; 152
     2f2:	95 e0       	ldi	r25, 0x05	; 5
     2f4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN14HardwareSerial5beginEmh>

void setup()
{
	Serial.begin(9600);
	while (!Serial);
	sd.initSdcardBreakout();
     2f8:	80 e4       	ldi	r24, 0x40	; 64
     2fa:	94 e0       	ldi	r25, 0x04	; 4
     2fc:	bb d0       	rcall	.+374    	; 0x474 <_ZN14SdcardBreakout18initSdcardBreakoutEv>
	realtimeclock.initRTC();
     2fe:	83 e2       	ldi	r24, 0x23	; 35
     300:	94 e0       	ldi	r25, 0x04	; 4
     302:	43 d0       	rcall	.+134    	; 0x38a <_ZN13RealTimeClock7initRTCEv>
	thps.initTempHumidPressSensor();
     304:	80 e3       	ldi	r24, 0x30	; 48
     306:	94 e0       	ldi	r25, 0x04	; 4
     308:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>
	anemometer.begin(PIN_ANEMOMETER);
     30c:	62 e0       	ldi	r22, 0x02	; 2
     30e:	80 e1       	ldi	r24, 0x10	; 16
     310:	94 e0       	ldi	r25, 0x04	; 4
     312:	78 c0       	rjmp	.+240    	; 0x404 <_ZN11Rj11Sensors5beginEh>

00000314 <loop>:
} //setup

void loop()
{
     314:	08 95       	ret

00000316 <_GLOBAL__sub_I_sd>:
#include "Rj11Sensors.h"
#include "Calculate.h"

#define PIN_ANEMOMETER	2

SdcardBreakout sd;
     316:	80 e4       	ldi	r24, 0x40	; 64
     318:	94 e0       	ldi	r25, 0x04	; 4
     31a:	aa d0       	rcall	.+340    	; 0x470 <_ZN14SdcardBreakoutC1Ev>
TempHumidPressSensor thps;
     31c:	80 e3       	ldi	r24, 0x30	; 48
     31e:	94 e0       	ldi	r25, 0x04	; 4
     320:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN20TempHumidPressSensorC1Ev>
SensorData sensordata;
RealTimeClock realtimeclock;
     324:	83 e2       	ldi	r24, 0x23	; 35
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	2a d0       	rcall	.+84     	; 0x37e <_ZN13RealTimeClockC1Ev>
#ifndef __REALTIMECLOCK_H__
#define __REALTIMECLOCK_H__

struct TimeStamp
     32a:	6b ed       	ldi	r22, 0xDB	; 219
     32c:	73 e0       	ldi	r23, 0x03	; 3
     32e:	86 e1       	ldi	r24, 0x16	; 22
     330:	94 e0       	ldi	r25, 0x04	; 4
     332:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_ZN6StringC1EPKc>
TimeStamp ts;

Rj11Sensors *Rj11Sensors::instance =  NULL;
Rj11Sensors anemometer;
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	94 e0       	ldi	r25, 0x04	; 4
     33a:	5d d0       	rcall	.+186    	; 0x3f6 <_ZN11Rj11SensorsC1Ev>
Rj11Sensors kipp;
     33c:	8c e0       	ldi	r24, 0x0C	; 12
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	5a d0       	rcall	.+180    	; 0x3f6 <_ZN11Rj11SensorsC1Ev>
     342:	6a e1       	ldi	r22, 0x1A	; 26

String myData = "datalog.txt";
     344:	72 e0       	ldi	r23, 0x02	; 2
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	94 e0       	ldi	r25, 0x04	; 4
     34a:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <_ZN6StringC1EPKc>

0000034e <_GLOBAL__sub_D_sd>:
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	94 e0       	ldi	r25, 0x04	; 4
     352:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN6StringD1Ev>
RealTimeClock realtimeclock;
TimeStamp ts;

Rj11Sensors *Rj11Sensors::instance =  NULL;
Rj11Sensors anemometer;
Rj11Sensors kipp;
     356:	8c e0       	ldi	r24, 0x0C	; 12
     358:	94 e0       	ldi	r25, 0x04	; 4
     35a:	53 d0       	rcall	.+166    	; 0x402 <_ZN11Rj11SensorsD1Ev>
SensorData sensordata;
RealTimeClock realtimeclock;
TimeStamp ts;

Rj11Sensors *Rj11Sensors::instance =  NULL;
Rj11Sensors anemometer;
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	50 d0       	rcall	.+160    	; 0x402 <_ZN11Rj11SensorsD1Ev>
     362:	86 e1       	ldi	r24, 0x16	; 22
     364:	94 e0       	ldi	r25, 0x04	; 4
     366:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN6StringD1Ev>
#define PIN_ANEMOMETER	2

SdcardBreakout sd;
TempHumidPressSensor thps;
SensorData sensordata;
RealTimeClock realtimeclock;
     36a:	83 e2       	ldi	r24, 0x23	; 35
     36c:	94 e0       	ldi	r25, 0x04	; 4
     36e:	0b d0       	rcall	.+22     	; 0x386 <_ZN13RealTimeClockD1Ev>
#include "Calculate.h"

#define PIN_ANEMOMETER	2

SdcardBreakout sd;
TempHumidPressSensor thps;
     370:	80 e3       	ldi	r24, 0x30	; 48
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN20TempHumidPressSensorD1Ev>
#include "Rj11Sensors.h"
#include "Calculate.h"

#define PIN_ANEMOMETER	2

SdcardBreakout sd;
     378:	80 e4       	ldi	r24, 0x40	; 64
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	7a c0       	rjmp	.+244    	; 0x472 <_ZN14SdcardBreakoutD1Ev>

0000037e <_ZN13RealTimeClockC1Ev>:
#include "RealTimeClock.h"

RTC_DS3231 rtc;

// constructor
RealTimeClock::RealTimeClock()
     37e:	6b ed       	ldi	r22, 0xDB	; 219
     380:	73 e0       	ldi	r23, 0x03	; 3
     382:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <_ZN6StringC1EPKc>

00000386 <_ZN13RealTimeClockD1Ev>:
{
} //constructor

// destructor
RealTimeClock::~RealTimeClock()
     386:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_ZN6StringD1Ev>

0000038a <_ZN13RealTimeClock7initRTCEv>:
{
} //~destructor

void RealTimeClock::initRTC()
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <_ZN13RealTimeClock7initRTCEv+0x6>
     390:	00 d0       	rcall	.+0      	; 0x392 <_ZN13RealTimeClock7initRTCEv+0x8>
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
	bool status = rtc.begin();
     396:	81 e4       	ldi	r24, 0x41	; 65
     398:	94 e0       	ldi	r25, 0x04	; 4
     39a:	c9 d3       	rcall	.+1938   	; 0xb2e <_ZN10RTC_DS32315beginEv>
	if (!status)
     39c:	81 11       	cpse	r24, r1
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <_ZN13RealTimeClock7initRTCEv+0x24>
	{
		Serial.println("Error: Couldn't find RTC, please ensure that the rtc is powered!");
     3a0:	66 e2       	ldi	r22, 0x26	; 38
     3a2:	72 e0       	ldi	r23, 0x02	; 2
     3a4:	88 e9       	ldi	r24, 0x98	; 152
     3a6:	95 e0       	ldi	r25, 0x05	; 5
     3a8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN5Print7printlnEPKc>
     3ac:	ff cf       	rjmp	.-2      	; 0x3ac <_ZN13RealTimeClock7initRTCEv+0x22>
		while (1);
	}
	else if (status)
	{
		Serial.println("RTC\tsuccessfully initialized!");
     3ae:	67 e6       	ldi	r22, 0x67	; 103
     3b0:	72 e0       	ldi	r23, 0x02	; 2
     3b2:	88 e9       	ldi	r24, 0x98	; 152
     3b4:	95 e0       	ldi	r25, 0x05	; 5
     3b6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN5Print7printlnEPKc>
	}
	
	if (rtc.lostPower())
     3ba:	81 e4       	ldi	r24, 0x41	; 65
     3bc:	94 e0       	ldi	r25, 0x04	; 4
     3be:	58 d4       	rcall	.+2224   	; 0xc70 <_ZN10RTC_DS32319lostPowerEv>
     3c0:	88 23       	and	r24, r24
     3c2:	81 f0       	breq	.+32     	; 0x3e4 <_ZN13RealTimeClock7initRTCEv+0x5a>
	{
		Serial.println("RTC lost power, the time will be set!");
     3c4:	65 e8       	ldi	r22, 0x85	; 133
     3c6:	72 e0       	ldi	r23, 0x02	; 2
     3c8:	88 e9       	ldi	r24, 0x98	; 152
     3ca:	95 e0       	ldi	r25, 0x05	; 5
     3cc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this file was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     3d0:	48 e4       	ldi	r20, 0x48	; 72
     3d2:	51 e0       	ldi	r21, 0x01	; 1
     3d4:	6c e3       	ldi	r22, 0x3C	; 60
     3d6:	71 e0       	ldi	r23, 0x01	; 1
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	31 d3       	rcall	.+1634   	; 0xa40 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     3de:	ce 01       	movw	r24, r28
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	c1 d3       	rcall	.+1922   	; 0xb66 <_ZN10RTC_DS32316adjustERK8DateTime>
	}
} //initRTC
     3e4:	26 96       	adiw	r28, 0x06	; 6
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <_ZN11Rj11SensorsC1Ev>:
#include <Arduino.h>
#include "Rj11Sensors.h"

// constructor
Rj11Sensors::Rj11Sensors()
     3f6:	fc 01       	movw	r30, r24
     3f8:	10 82       	st	Z, r1
     3fa:	11 82       	std	Z+1, r1	; 0x01
     3fc:	12 82       	std	Z+2, r1	; 0x02
     3fe:	13 82       	std	Z+3, r1	; 0x03
     400:	08 95       	ret

00000402 <_ZN11Rj11SensorsD1Ev>:
{
} //constructor

// destructor
Rj11Sensors::~Rj11Sensors()
     402:	08 95       	ret

00000404 <_ZN11Rj11Sensors5beginEh>:
{
} //~destructor

void Rj11Sensors::begin(const byte digitalPinNumber)
{
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), isrFunction, RISING);
     40a:	62 30       	cpi	r22, 0x02	; 2
     40c:	49 f0       	breq	.+18     	; 0x420 <_ZN11Rj11Sensors5beginEh+0x1c>
     40e:	63 30       	cpi	r22, 0x03	; 3
     410:	49 f0       	breq	.+18     	; 0x424 <_ZN11Rj11Sensors5beginEh+0x20>
     412:	8e ee       	ldi	r24, 0xEE	; 238
     414:	86 0f       	add	r24, r22
     416:	84 30       	cpi	r24, 0x04	; 4
     418:	38 f4       	brcc	.+14     	; 0x428 <_ZN11Rj11Sensors5beginEh+0x24>
     41a:	87 e1       	ldi	r24, 0x17	; 23
     41c:	86 1b       	sub	r24, r22
     41e:	05 c0       	rjmp	.+10     	; 0x42a <_ZN11Rj11Sensors5beginEh+0x26>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	03 c0       	rjmp	.+6      	; 0x42a <_ZN11Rj11Sensors5beginEh+0x26>
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	01 c0       	rjmp	.+2      	; 0x42a <_ZN11Rj11Sensors5beginEh+0x26>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	43 e0       	ldi	r20, 0x03	; 3
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	60 e3       	ldi	r22, 0x30	; 48
     430:	72 e0       	ldi	r23, 0x02	; 2
     432:	0e 94 c2 0c 	call	0x1984	; 0x1984 <attachInterrupt>
	instance = this;
     436:	d0 93 15 04 	sts	0x0415, r29	; 0x800415 <_ZN11Rj11Sensors8instanceE+0x1>
     43a:	c0 93 14 04 	sts	0x0414, r28	; 0x800414 <_ZN11Rj11Sensors8instanceE>
}  // end of myClass::begin
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <_ZN11Rj11Sensors10countEdgesEv>:

void Rj11Sensors::countEdges()
{
	numberOfEdges++;
     444:	fc 01       	movw	r30, r24
     446:	40 81       	ld	r20, Z
     448:	51 81       	ldd	r21, Z+1	; 0x01
     44a:	62 81       	ldd	r22, Z+2	; 0x02
     44c:	73 81       	ldd	r23, Z+3	; 0x03
     44e:	4f 5f       	subi	r20, 0xFF	; 255
     450:	5f 4f       	sbci	r21, 0xFF	; 255
     452:	6f 4f       	sbci	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	40 83       	st	Z, r20
     458:	51 83       	std	Z+1, r21	; 0x01
     45a:	62 83       	std	Z+2, r22	; 0x02
     45c:	73 83       	std	Z+3, r23	; 0x03
     45e:	08 95       	ret

00000460 <_ZN11Rj11Sensors11isrFunctionEv>:
	void begin(const byte whichPin);
	uint32_t getNumberOfEdges();
private:	
	static void isrFunction()
	{
		if (Rj11Sensors::instance != NULL)
     460:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <_ZN11Rj11Sensors8instanceE>
     464:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <_ZN11Rj11Sensors8instanceE+0x1>
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	09 f0       	breq	.+2      	; 0x46e <_ZN11Rj11Sensors11isrFunctionEv+0xe>
		Rj11Sensors::instance->countEdges();
     46c:	eb cf       	rjmp	.-42     	; 0x444 <_ZN11Rj11Sensors10countEdgesEv>
     46e:	08 95       	ret

00000470 <_ZN14SdcardBreakoutC1Ev>:
	} 
	else
	{
		Serial.println(filename + " doesn't exist");
	}
     470:	08 95       	ret

00000472 <_ZN14SdcardBreakoutD1Ev>:
     472:	08 95       	ret

00000474 <_ZN14SdcardBreakout18initSdcardBreakoutEv>:
     474:	65 e3       	ldi	r22, 0x35	; 53
     476:	8e e3       	ldi	r24, 0x3E	; 62
     478:	96 e0       	ldi	r25, 0x06	; 6
     47a:	0e 94 05 12 	call	0x240a	; 0x240a <_ZN5SDLib7SDClass5beginEh>
     47e:	81 11       	cpse	r24, r1
     480:	0d c0       	rjmp	.+26     	; 0x49c <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x28>
     482:	6b ea       	ldi	r22, 0xAB	; 171
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	88 e9       	ldi	r24, 0x98	; 152
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN5Print7printlnEPKc>
     48e:	65 e3       	ldi	r22, 0x35	; 53
     490:	8e e3       	ldi	r24, 0x3E	; 62
     492:	96 e0       	ldi	r25, 0x06	; 6
     494:	0e 94 05 12 	call	0x240a	; 0x240a <_ZN5SDLib7SDClass5beginEh>
     498:	88 23       	and	r24, r24
     49a:	31 f0       	breq	.+12     	; 0x4a8 <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x34>
     49c:	6a ec       	ldi	r22, 0xCA	; 202
     49e:	72 e0       	ldi	r23, 0x02	; 2
     4a0:	88 e9       	ldi	r24, 0x98	; 152
     4a2:	95 e0       	ldi	r25, 0x05	; 5
     4a4:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <_ZN5Print7printlnEPKc>
     4a8:	64 ef       	ldi	r22, 0xF4	; 244
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <delay>
     4b4:	ec cf       	rjmp	.-40     	; 0x48e <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x1a>

000004b6 <_GLOBAL__sub_I_datalog>:
#include <SPI.h>
#include <SD.h>
#include "SdcardBreakout.h"

File datalog;
     4b6:	82 e4       	ldi	r24, 0x42	; 66
     4b8:	94 e0       	ldi	r25, 0x04	; 4
     4ba:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <_ZN5SDLib4FileC1Ev>

000004be <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
     4be:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
     4c2:	22 23       	and	r18, r18
     4c4:	99 f0       	breq	.+38     	; 0x4ec <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     4c6:	4f b7       	in	r20, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
     4ce:	21 30       	cpi	r18, 0x01	; 1
     4d0:	59 f4       	brne	.+22     	; 0x4e8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     4d2:	2d b3       	in	r18, 0x1d	; 29
     4d4:	20 93 93 08 	sts	0x0893, r18	; 0x800893 <_ZN8SPIClass13interruptSaveE>
     4d8:	3d b3       	in	r19, 0x1d	; 29
     4da:	20 91 94 08 	lds	r18, 0x0894	; 0x800894 <_ZN8SPIClass13interruptMaskE>
     4de:	20 95       	com	r18
     4e0:	23 23       	and	r18, r19
     4e2:	2d bb       	out	0x1d, r18	; 29
     4e4:	4f bf       	out	0x3f, r20	; 63
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     4e8:	40 93 93 08 	sts	0x0893, r20	; 0x800893 <_ZN8SPIClass13interruptSaveE>
     4ec:	8c bd       	out	0x2c, r24	; 44
     4ee:	9d bd       	out	0x2d, r25	; 45
     4f0:	08 95       	ret

000004f2 <_ZN8SPIClass14endTransactionEv>:
     4f2:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
     4f6:	88 23       	and	r24, r24
     4f8:	61 f0       	breq	.+24     	; 0x512 <_ZN8SPIClass14endTransactionEv+0x20>
     4fa:	9f b7       	in	r25, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
     502:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <_ZN8SPIClass13interruptSaveE>
     506:	21 30       	cpi	r18, 0x01	; 1
     508:	19 f4       	brne	.+6      	; 0x510 <_ZN8SPIClass14endTransactionEv+0x1e>
     50a:	8d bb       	out	0x1d, r24	; 29
     50c:	9f bf       	out	0x3f, r25	; 63
     50e:	08 95       	ret
     510:	8f bf       	out	0x3f, r24	; 63
     512:	08 95       	ret

00000514 <_ZN15Adafruit_BME280C1Ev>:
     514:	fc 01       	movw	r30, r24
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	83 87       	std	Z+11, r24	; 0x0b
     51a:	84 87       	std	Z+12, r24	; 0x0c
     51c:	85 87       	std	Z+13, r24	; 0x0d
     51e:	86 87       	std	Z+14, r24	; 0x0e
     520:	08 95       	ret

00000522 <_ZN15Adafruit_BME2807spixferEh>:
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	fc 01       	movw	r30, r24
     534:	26 85       	ldd	r18, Z+14	; 0x0e
     536:	2f 3f       	cpi	r18, 0xFF	; 255
     538:	39 f4       	brne	.+14     	; 0x548 <_ZN15Adafruit_BME2807spixferEh+0x26>
     53a:	6e bd       	out	0x2e, r22	; 46
     53c:	00 00       	nop
     53e:	0d b4       	in	r0, 0x2d	; 45
     540:	07 fe       	sbrs	r0, 7
     542:	fd cf       	rjmp	.-6      	; 0x53e <_ZN15Adafruit_BME2807spixferEh+0x1c>
     544:	8e b5       	in	r24, 0x2e	; 46
     546:	2b c0       	rjmp	.+86     	; 0x59e <_ZN15Adafruit_BME2807spixferEh+0x7c>
     548:	d6 2f       	mov	r29, r22
     54a:	8c 01       	movw	r16, r24
     54c:	87 e0       	ldi	r24, 0x07	; 7
     54e:	e8 2e       	mov	r14, r24
     550:	f1 2c       	mov	r15, r1
     552:	c0 e0       	ldi	r28, 0x00	; 0
     554:	cc 24       	eor	r12, r12
     556:	c3 94       	inc	r12
     558:	d1 2c       	mov	r13, r1
     55a:	cc 0f       	add	r28, r28
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	f8 01       	movw	r30, r16
     560:	86 85       	ldd	r24, Z+14	; 0x0e
     562:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     566:	b6 01       	movw	r22, r12
     568:	0e 2c       	mov	r0, r14
     56a:	01 c0       	rjmp	.+2      	; 0x56e <_ZN15Adafruit_BME2807spixferEh+0x4c>
     56c:	66 0f       	add	r22, r22
     56e:	0a 94       	dec	r0
     570:	ea f7       	brpl	.-6      	; 0x56c <_ZN15Adafruit_BME2807spixferEh+0x4a>
     572:	6d 23       	and	r22, r29
     574:	f8 01       	movw	r30, r16
     576:	84 85       	ldd	r24, Z+12	; 0x0c
     578:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	f8 01       	movw	r30, r16
     580:	86 85       	ldd	r24, Z+14	; 0x0e
     582:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     586:	f8 01       	movw	r30, r16
     588:	85 85       	ldd	r24, Z+13	; 0x0d
     58a:	0e 94 65 10 	call	0x20ca	; 0x20ca <digitalRead>
     58e:	89 2b       	or	r24, r25
     590:	09 f0       	breq	.+2      	; 0x594 <_ZN15Adafruit_BME2807spixferEh+0x72>
     592:	c1 60       	ori	r28, 0x01	; 1
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	ef 1a       	sub	r14, r31
     598:	f1 08       	sbc	r15, r1
     59a:	f8 f6       	brcc	.-66     	; 0x55a <_ZN15Adafruit_BME2807spixferEh+0x38>
     59c:	8c 2f       	mov	r24, r28
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	08 95       	ret

000005b0 <_ZN15Adafruit_BME2806write8Ehh>:
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
     5ba:	16 2f       	mov	r17, r22
     5bc:	04 2f       	mov	r16, r20
     5be:	8b 85       	ldd	r24, Y+11	; 0x0b
     5c0:	8f 3f       	cpi	r24, 0xFF	; 255
     5c2:	f9 f4       	brne	.+62     	; 0x602 <_ZN15Adafruit_BME2806write8Ehh+0x52>
     5c4:	6a 81       	ldd	r22, Y+2	; 0x02
     5c6:	88 81       	ld	r24, Y
     5c8:	99 81       	ldd	r25, Y+1	; 0x01
     5ca:	e1 d6       	rcall	.+3522   	; 0x138e <_ZN7TwoWire17beginTransmissionEh>
     5cc:	88 81       	ld	r24, Y
     5ce:	99 81       	ldd	r25, Y+1	; 0x01
     5d0:	dc 01       	movw	r26, r24
     5d2:	ed 91       	ld	r30, X+
     5d4:	fc 91       	ld	r31, X
     5d6:	01 90       	ld	r0, Z+
     5d8:	f0 81       	ld	r31, Z
     5da:	e0 2d       	mov	r30, r0
     5dc:	61 2f       	mov	r22, r17
     5de:	19 95       	eicall
     5e0:	88 81       	ld	r24, Y
     5e2:	99 81       	ldd	r25, Y+1	; 0x01
     5e4:	dc 01       	movw	r26, r24
     5e6:	ed 91       	ld	r30, X+
     5e8:	fc 91       	ld	r31, X
     5ea:	01 90       	ld	r0, Z+
     5ec:	f0 81       	ld	r31, Z
     5ee:	e0 2d       	mov	r30, r0
     5f0:	60 2f       	mov	r22, r16
     5f2:	19 95       	eicall
     5f4:	88 81       	ld	r24, Y
     5f6:	99 81       	ldd	r25, Y+1	; 0x01
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	45 c7       	rjmp	.+3722   	; 0x148c <_ZN7TwoWire15endTransmissionEv>
     602:	8e 85       	ldd	r24, Y+14	; 0x0e
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	19 f4       	brne	.+6      	; 0x60e <_ZN15Adafruit_BME2806write8Ehh+0x5e>
     608:	82 e5       	ldi	r24, 0x52	; 82
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	58 df       	rcall	.-336    	; 0x4be <_ZN8SPIClass16beginTransactionE11SPISettings>
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	8b 85       	ldd	r24, Y+11	; 0x0b
     612:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     616:	61 2f       	mov	r22, r17
     618:	6f 77       	andi	r22, 0x7F	; 127
     61a:	ce 01       	movw	r24, r28
     61c:	82 df       	rcall	.-252    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     61e:	60 2f       	mov	r22, r16
     620:	ce 01       	movw	r24, r28
     622:	7f df       	rcall	.-258    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	8b 85       	ldd	r24, Y+11	; 0x0b
     628:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     62c:	8e 85       	ldd	r24, Y+14	; 0x0e
     62e:	8f 3f       	cpi	r24, 0xFF	; 255
     630:	29 f4       	brne	.+10     	; 0x63c <_ZN15Adafruit_BME2806write8Ehh+0x8c>
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	5b cf       	rjmp	.-330    	; 0x4f2 <_ZN8SPIClass14endTransactionEv>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
     646:	cf 92       	push	r12
     648:	ef 92       	push	r14
     64a:	0f 93       	push	r16
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
     652:	62 95       	swap	r22
     654:	66 0f       	add	r22, r22
     656:	66 0f       	add	r22, r22
     658:	60 7c       	andi	r22, 0xC0	; 192
     65a:	47 70       	andi	r20, 0x07	; 7
     65c:	27 70       	andi	r18, 0x07	; 7
     65e:	82 2f       	mov	r24, r18
     660:	88 0f       	add	r24, r24
     662:	88 0f       	add	r24, r24
     664:	88 0f       	add	r24, r24
     666:	26 2f       	mov	r18, r22
     668:	24 2b       	or	r18, r20
     66a:	28 2b       	or	r18, r24
     66c:	29 ab       	std	Y+49, r18	; 0x31
     66e:	90 2f       	mov	r25, r16
     670:	92 95       	swap	r25
     672:	99 0f       	add	r25, r25
     674:	90 7e       	andi	r25, 0xE0	; 224
     676:	8a a9       	ldd	r24, Y+50	; 0x32
     678:	8f 71       	andi	r24, 0x1F	; 31
     67a:	89 2b       	or	r24, r25
     67c:	8a ab       	std	Y+50, r24	; 0x32
     67e:	8e 2d       	mov	r24, r14
     680:	87 70       	andi	r24, 0x07	; 7
     682:	88 0f       	add	r24, r24
     684:	88 0f       	add	r24, r24
     686:	88 0f       	add	r24, r24
     688:	98 a9       	ldd	r25, Y+48	; 0x30
     68a:	29 2f       	mov	r18, r25
     68c:	20 7c       	andi	r18, 0xC0	; 192
     68e:	9c 2d       	mov	r25, r12
     690:	97 70       	andi	r25, 0x07	; 7
     692:	e2 2e       	mov	r14, r18
     694:	e8 2a       	or	r14, r24
     696:	e9 2a       	or	r14, r25
     698:	e8 aa       	std	Y+48, r14	; 0x30
     69a:	40 2f       	mov	r20, r16
     69c:	47 70       	andi	r20, 0x07	; 7
     69e:	62 ef       	ldi	r22, 0xF2	; 242
     6a0:	ce 01       	movw	r24, r28
     6a2:	86 df       	rcall	.-244    	; 0x5b0 <_ZN15Adafruit_BME2806write8Ehh>
     6a4:	98 a9       	ldd	r25, Y+48	; 0x30
     6a6:	49 2f       	mov	r20, r25
     6a8:	47 70       	andi	r20, 0x07	; 7
     6aa:	60 e2       	ldi	r22, 0x20	; 32
     6ac:	46 9f       	mul	r20, r22
     6ae:	90 01       	movw	r18, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	89 2f       	mov	r24, r25
     6b4:	86 95       	lsr	r24
     6b6:	86 95       	lsr	r24
     6b8:	86 95       	lsr	r24
     6ba:	87 70       	andi	r24, 0x07	; 7
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	86 9f       	mul	r24, r22
     6c0:	a0 01       	movw	r20, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	42 2b       	or	r20, r18
     6c6:	53 2b       	or	r21, r19
     6c8:	97 fb       	bst	r25, 7
     6ca:	99 27       	eor	r25, r25
     6cc:	90 f9       	bld	r25, 0
     6ce:	49 2b       	or	r20, r25
     6d0:	65 ef       	ldi	r22, 0xF5	; 245
     6d2:	ce 01       	movw	r24, r28
     6d4:	6d df       	rcall	.-294    	; 0x5b0 <_ZN15Adafruit_BME2806write8Ehh>
     6d6:	99 a9       	ldd	r25, Y+49	; 0x31
     6d8:	49 2f       	mov	r20, r25
     6da:	47 70       	andi	r20, 0x07	; 7
     6dc:	80 e2       	ldi	r24, 0x20	; 32
     6de:	48 9f       	mul	r20, r24
     6e0:	90 01       	movw	r18, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	89 2f       	mov	r24, r25
     6e6:	86 95       	lsr	r24
     6e8:	86 95       	lsr	r24
     6ea:	86 95       	lsr	r24
     6ec:	87 70       	andi	r24, 0x07	; 7
     6ee:	68 e0       	ldi	r22, 0x08	; 8
     6f0:	86 9f       	mul	r24, r22
     6f2:	a0 01       	movw	r20, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	42 2b       	or	r20, r18
     6f8:	53 2b       	or	r21, r19
     6fa:	92 95       	swap	r25
     6fc:	96 95       	lsr	r25
     6fe:	96 95       	lsr	r25
     700:	93 70       	andi	r25, 0x03	; 3
     702:	49 2b       	or	r20, r25
     704:	64 ef       	ldi	r22, 0xF4	; 244
     706:	ce 01       	movw	r24, r28
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	0f 91       	pop	r16
     70e:	ef 90       	pop	r14
     710:	cf 90       	pop	r12
     712:	4e cf       	rjmp	.-356    	; 0x5b0 <_ZN15Adafruit_BME2806write8Ehh>

00000714 <_ZN15Adafruit_BME2805read8Eh>:
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	16 2f       	mov	r17, r22
     71e:	8b 85       	ldd	r24, Y+11	; 0x0b
     720:	8f 3f       	cpi	r24, 0xFF	; 255
     722:	09 f5       	brne	.+66     	; 0x766 <_ZN15Adafruit_BME2805read8Eh+0x52>
     724:	6a 81       	ldd	r22, Y+2	; 0x02
     726:	88 81       	ld	r24, Y
     728:	99 81       	ldd	r25, Y+1	; 0x01
     72a:	31 d6       	rcall	.+3170   	; 0x138e <_ZN7TwoWire17beginTransmissionEh>
     72c:	88 81       	ld	r24, Y
     72e:	99 81       	ldd	r25, Y+1	; 0x01
     730:	dc 01       	movw	r26, r24
     732:	ed 91       	ld	r30, X+
     734:	fc 91       	ld	r31, X
     736:	01 90       	ld	r0, Z+
     738:	f0 81       	ld	r31, Z
     73a:	e0 2d       	mov	r30, r0
     73c:	61 2f       	mov	r22, r17
     73e:	19 95       	eicall
     740:	88 81       	ld	r24, Y
     742:	99 81       	ldd	r25, Y+1	; 0x01
     744:	a3 d6       	rcall	.+3398   	; 0x148c <_ZN7TwoWire15endTransmissionEv>
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	6a 81       	ldd	r22, Y+2	; 0x02
     74a:	88 81       	ld	r24, Y
     74c:	99 81       	ldd	r25, Y+1	; 0x01
     74e:	9c d6       	rcall	.+3384   	; 0x1488 <_ZN7TwoWire11requestFromEhh>
     750:	88 81       	ld	r24, Y
     752:	99 81       	ldd	r25, Y+1	; 0x01
     754:	dc 01       	movw	r26, r24
     756:	ed 91       	ld	r30, X+
     758:	fc 91       	ld	r31, X
     75a:	02 84       	ldd	r0, Z+10	; 0x0a
     75c:	f3 85       	ldd	r31, Z+11	; 0x0b
     75e:	e0 2d       	mov	r30, r0
     760:	19 95       	eicall
     762:	18 2f       	mov	r17, r24
     764:	1a c0       	rjmp	.+52     	; 0x79a <_ZN15Adafruit_BME2805read8Eh+0x86>
     766:	8e 85       	ldd	r24, Y+14	; 0x0e
     768:	8f 3f       	cpi	r24, 0xFF	; 255
     76a:	19 f4       	brne	.+6      	; 0x772 <_ZN15Adafruit_BME2805read8Eh+0x5e>
     76c:	82 e5       	ldi	r24, 0x52	; 82
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	a6 de       	rcall	.-692    	; 0x4be <_ZN8SPIClass16beginTransactionE11SPISettings>
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	8b 85       	ldd	r24, Y+11	; 0x0b
     776:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     77a:	61 2f       	mov	r22, r17
     77c:	60 68       	ori	r22, 0x80	; 128
     77e:	ce 01       	movw	r24, r28
     780:	d0 de       	rcall	.-608    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	ce 01       	movw	r24, r28
     786:	cd de       	rcall	.-614    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     788:	18 2f       	mov	r17, r24
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	8b 85       	ldd	r24, Y+11	; 0x0b
     78e:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     792:	8e 85       	ldd	r24, Y+14	; 0x0e
     794:	8f 3f       	cpi	r24, 0xFF	; 255
     796:	09 f4       	brne	.+2      	; 0x79a <_ZN15Adafruit_BME2805read8Eh+0x86>
     798:	ac de       	rcall	.-680    	; 0x4f2 <_ZN8SPIClass14endTransactionEv>
     79a:	81 2f       	mov	r24, r17
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	08 95       	ret

000007a4 <_ZN15Adafruit_BME2806read16Eh>:
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	16 2f       	mov	r17, r22
     7b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7b2:	8f 3f       	cpi	r24, 0xFF	; 255
     7b4:	81 f5       	brne	.+96     	; 0x816 <_ZN15Adafruit_BME2806read16Eh+0x72>
     7b6:	6a 81       	ldd	r22, Y+2	; 0x02
     7b8:	88 81       	ld	r24, Y
     7ba:	99 81       	ldd	r25, Y+1	; 0x01
     7bc:	e8 d5       	rcall	.+3024   	; 0x138e <_ZN7TwoWire17beginTransmissionEh>
     7be:	88 81       	ld	r24, Y
     7c0:	99 81       	ldd	r25, Y+1	; 0x01
     7c2:	dc 01       	movw	r26, r24
     7c4:	ed 91       	ld	r30, X+
     7c6:	fc 91       	ld	r31, X
     7c8:	01 90       	ld	r0, Z+
     7ca:	f0 81       	ld	r31, Z
     7cc:	e0 2d       	mov	r30, r0
     7ce:	61 2f       	mov	r22, r17
     7d0:	19 95       	eicall
     7d2:	88 81       	ld	r24, Y
     7d4:	99 81       	ldd	r25, Y+1	; 0x01
     7d6:	5a d6       	rcall	.+3252   	; 0x148c <_ZN7TwoWire15endTransmissionEv>
     7d8:	42 e0       	ldi	r20, 0x02	; 2
     7da:	6a 81       	ldd	r22, Y+2	; 0x02
     7dc:	88 81       	ld	r24, Y
     7de:	99 81       	ldd	r25, Y+1	; 0x01
     7e0:	53 d6       	rcall	.+3238   	; 0x1488 <_ZN7TwoWire11requestFromEhh>
     7e2:	88 81       	ld	r24, Y
     7e4:	99 81       	ldd	r25, Y+1	; 0x01
     7e6:	dc 01       	movw	r26, r24
     7e8:	ed 91       	ld	r30, X+
     7ea:	fc 91       	ld	r31, X
     7ec:	02 84       	ldd	r0, Z+10	; 0x0a
     7ee:	f3 85       	ldd	r31, Z+11	; 0x0b
     7f0:	e0 2d       	mov	r30, r0
     7f2:	19 95       	eicall
     7f4:	18 2f       	mov	r17, r24
     7f6:	88 81       	ld	r24, Y
     7f8:	99 81       	ldd	r25, Y+1	; 0x01
     7fa:	dc 01       	movw	r26, r24
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	02 84       	ldd	r0, Z+10	; 0x0a
     802:	f3 85       	ldd	r31, Z+11	; 0x0b
     804:	e0 2d       	mov	r30, r0
     806:	19 95       	eicall
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	31 2f       	mov	r19, r17
     80e:	89 01       	movw	r16, r18
     810:	08 2b       	or	r16, r24
     812:	19 2b       	or	r17, r25
     814:	23 c0       	rjmp	.+70     	; 0x85c <_ZN15Adafruit_BME2806read16Eh+0xb8>
     816:	8e 85       	ldd	r24, Y+14	; 0x0e
     818:	8f 3f       	cpi	r24, 0xFF	; 255
     81a:	19 f4       	brne	.+6      	; 0x822 <_ZN15Adafruit_BME2806read16Eh+0x7e>
     81c:	82 e5       	ldi	r24, 0x52	; 82
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	4e de       	rcall	.-868    	; 0x4be <_ZN8SPIClass16beginTransactionE11SPISettings>
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	8b 85       	ldd	r24, Y+11	; 0x0b
     826:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     82a:	61 2f       	mov	r22, r17
     82c:	60 68       	ori	r22, 0x80	; 128
     82e:	ce 01       	movw	r24, r28
     830:	78 de       	rcall	.-784    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	ce 01       	movw	r24, r28
     836:	75 de       	rcall	.-790    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     838:	08 2f       	mov	r16, r24
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	ce 01       	movw	r24, r28
     83e:	71 de       	rcall	.-798    	; 0x522 <_ZN15Adafruit_BME2807spixferEh>
     840:	20 2f       	mov	r18, r16
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	32 2f       	mov	r19, r18
     846:	22 27       	eor	r18, r18
     848:	89 01       	movw	r16, r18
     84a:	08 2b       	or	r16, r24
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	8b 85       	ldd	r24, Y+11	; 0x0b
     850:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     854:	8e 85       	ldd	r24, Y+14	; 0x0e
     856:	8f 3f       	cpi	r24, 0xFF	; 255
     858:	09 f4       	brne	.+2      	; 0x85c <_ZN15Adafruit_BME2806read16Eh+0xb8>
     85a:	4b de       	rcall	.-874    	; 0x4f2 <_ZN8SPIClass14endTransactionEv>
     85c:	c8 01       	movw	r24, r16
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <_ZN15Adafruit_BME2809read16_LEEh>:
     868:	9d df       	rcall	.-198    	; 0x7a4 <_ZN15Adafruit_BME2806read16Eh>
     86a:	98 27       	eor	r25, r24
     86c:	89 27       	eor	r24, r25
     86e:	98 27       	eor	r25, r24
     870:	08 95       	ret

00000872 <_ZN15Adafruit_BME28016readCoefficientsEv>:
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	ec 01       	movw	r28, r24
     87a:	68 e8       	ldi	r22, 0x88	; 136
     87c:	f5 df       	rcall	.-22     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     87e:	98 8b       	std	Y+16, r25	; 0x10
     880:	8f 87       	std	Y+15, r24	; 0x0f
     882:	6a e8       	ldi	r22, 0x8A	; 138
     884:	ce 01       	movw	r24, r28
     886:	f0 df       	rcall	.-32     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     888:	9a 8b       	std	Y+18, r25	; 0x12
     88a:	89 8b       	std	Y+17, r24	; 0x11
     88c:	6c e8       	ldi	r22, 0x8C	; 140
     88e:	ce 01       	movw	r24, r28
     890:	eb df       	rcall	.-42     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     892:	9c 8b       	std	Y+20, r25	; 0x14
     894:	8b 8b       	std	Y+19, r24	; 0x13
     896:	6e e8       	ldi	r22, 0x8E	; 142
     898:	ce 01       	movw	r24, r28
     89a:	e6 df       	rcall	.-52     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     89c:	9e 8b       	std	Y+22, r25	; 0x16
     89e:	8d 8b       	std	Y+21, r24	; 0x15
     8a0:	60 e9       	ldi	r22, 0x90	; 144
     8a2:	ce 01       	movw	r24, r28
     8a4:	e1 df       	rcall	.-62     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8a6:	98 8f       	std	Y+24, r25	; 0x18
     8a8:	8f 8b       	std	Y+23, r24	; 0x17
     8aa:	62 e9       	ldi	r22, 0x92	; 146
     8ac:	ce 01       	movw	r24, r28
     8ae:	dc df       	rcall	.-72     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8b0:	9a 8f       	std	Y+26, r25	; 0x1a
     8b2:	89 8f       	std	Y+25, r24	; 0x19
     8b4:	64 e9       	ldi	r22, 0x94	; 148
     8b6:	ce 01       	movw	r24, r28
     8b8:	d7 df       	rcall	.-82     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8ba:	9c 8f       	std	Y+28, r25	; 0x1c
     8bc:	8b 8f       	std	Y+27, r24	; 0x1b
     8be:	66 e9       	ldi	r22, 0x96	; 150
     8c0:	ce 01       	movw	r24, r28
     8c2:	d2 df       	rcall	.-92     	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8c4:	9e 8f       	std	Y+30, r25	; 0x1e
     8c6:	8d 8f       	std	Y+29, r24	; 0x1d
     8c8:	68 e9       	ldi	r22, 0x98	; 152
     8ca:	ce 01       	movw	r24, r28
     8cc:	cd df       	rcall	.-102    	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8ce:	98 a3       	std	Y+32, r25	; 0x20
     8d0:	8f 8f       	std	Y+31, r24	; 0x1f
     8d2:	6a e9       	ldi	r22, 0x9A	; 154
     8d4:	ce 01       	movw	r24, r28
     8d6:	c8 df       	rcall	.-112    	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8d8:	9a a3       	std	Y+34, r25	; 0x22
     8da:	89 a3       	std	Y+33, r24	; 0x21
     8dc:	6c e9       	ldi	r22, 0x9C	; 156
     8de:	ce 01       	movw	r24, r28
     8e0:	c3 df       	rcall	.-122    	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8e2:	9c a3       	std	Y+36, r25	; 0x24
     8e4:	8b a3       	std	Y+35, r24	; 0x23
     8e6:	6e e9       	ldi	r22, 0x9E	; 158
     8e8:	ce 01       	movw	r24, r28
     8ea:	be df       	rcall	.-132    	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8ec:	9e a3       	std	Y+38, r25	; 0x26
     8ee:	8d a3       	std	Y+37, r24	; 0x25
     8f0:	61 ea       	ldi	r22, 0xA1	; 161
     8f2:	ce 01       	movw	r24, r28
     8f4:	0f df       	rcall	.-482    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     8f6:	8f a3       	std	Y+39, r24	; 0x27
     8f8:	61 ee       	ldi	r22, 0xE1	; 225
     8fa:	ce 01       	movw	r24, r28
     8fc:	b5 df       	rcall	.-150    	; 0x868 <_ZN15Adafruit_BME2809read16_LEEh>
     8fe:	99 a7       	std	Y+41, r25	; 0x29
     900:	88 a7       	std	Y+40, r24	; 0x28
     902:	63 ee       	ldi	r22, 0xE3	; 227
     904:	ce 01       	movw	r24, r28
     906:	06 df       	rcall	.-500    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     908:	8a a7       	std	Y+42, r24	; 0x2a
     90a:	64 ee       	ldi	r22, 0xE4	; 228
     90c:	ce 01       	movw	r24, r28
     90e:	02 df       	rcall	.-508    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     910:	18 2f       	mov	r17, r24
     912:	65 ee       	ldi	r22, 0xE5	; 229
     914:	ce 01       	movw	r24, r28
     916:	fe de       	rcall	.-516    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     918:	90 e1       	ldi	r25, 0x10	; 16
     91a:	19 9f       	mul	r17, r25
     91c:	90 01       	movw	r18, r0
     91e:	11 24       	eor	r1, r1
     920:	8f 70       	andi	r24, 0x0F	; 15
     922:	28 2b       	or	r18, r24
     924:	3c a7       	std	Y+44, r19	; 0x2c
     926:	2b a7       	std	Y+43, r18	; 0x2b
     928:	66 ee       	ldi	r22, 0xE6	; 230
     92a:	ce 01       	movw	r24, r28
     92c:	f3 de       	rcall	.-538    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     92e:	18 2f       	mov	r17, r24
     930:	65 ee       	ldi	r22, 0xE5	; 229
     932:	ce 01       	movw	r24, r28
     934:	ef de       	rcall	.-546    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     936:	90 e1       	ldi	r25, 0x10	; 16
     938:	19 9f       	mul	r17, r25
     93a:	90 01       	movw	r18, r0
     93c:	11 24       	eor	r1, r1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	44 e0       	ldi	r20, 0x04	; 4
     942:	95 95       	asr	r25
     944:	87 95       	ror	r24
     946:	4a 95       	dec	r20
     948:	e1 f7       	brne	.-8      	; 0x942 <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
     94a:	82 2b       	or	r24, r18
     94c:	93 2b       	or	r25, r19
     94e:	9e a7       	std	Y+46, r25	; 0x2e
     950:	8d a7       	std	Y+45, r24	; 0x2d
     952:	67 ee       	ldi	r22, 0xE7	; 231
     954:	ce 01       	movw	r24, r28
     956:	de de       	rcall	.-580    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     958:	8f a7       	std	Y+47, r24	; 0x2f
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	08 95       	ret

00000962 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
     962:	63 ef       	ldi	r22, 0xF3	; 243
     964:	d7 de       	rcall	.-594    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     966:	81 70       	andi	r24, 0x01	; 1
     968:	08 95       	ret

0000096a <_ZN15Adafruit_BME2804initEv>:
     96a:	cf 92       	push	r12
     96c:	ef 92       	push	r14
     96e:	0f 93       	push	r16
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
     976:	8b 85       	ldd	r24, Y+11	; 0x0b
     978:	8f 3f       	cpi	r24, 0xFF	; 255
     97a:	21 f4       	brne	.+8      	; 0x984 <_ZN15Adafruit_BME2804initEv+0x1a>
     97c:	88 81       	ld	r24, Y
     97e:	99 81       	ldd	r25, Y+1	; 0x01
     980:	f7 d4       	rcall	.+2542   	; 0x1370 <_ZN7TwoWire5beginEv>
     982:	18 c0       	rjmp	.+48     	; 0x9b4 <_ZN15Adafruit_BME2804initEv+0x4a>
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	8b 85       	ldd	r24, Y+11	; 0x0b
     98e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>
     992:	8e 85       	ldd	r24, Y+14	; 0x0e
     994:	8f 3f       	cpi	r24, 0xFF	; 255
     996:	19 f4       	brne	.+6      	; 0x99e <_ZN15Adafruit_BME2804initEv+0x34>
     998:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8SPIClass5beginEv>
     99c:	0b c0       	rjmp	.+22     	; 0x9b4 <_ZN15Adafruit_BME2804initEv+0x4a>
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9a8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     9b0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>
     9b4:	60 ed       	ldi	r22, 0xD0	; 208
     9b6:	ce 01       	movw	r24, r28
     9b8:	ad de       	rcall	.-678    	; 0x714 <_ZN15Adafruit_BME2805read8Eh>
     9ba:	80 36       	cpi	r24, 0x60	; 96
     9bc:	29 f5       	brne	.+74     	; 0xa08 <_ZN15Adafruit_BME2804initEv+0x9e>
     9be:	46 eb       	ldi	r20, 0xB6	; 182
     9c0:	60 ee       	ldi	r22, 0xE0	; 224
     9c2:	ce 01       	movw	r24, r28
     9c4:	f5 dd       	rcall	.-1046   	; 0x5b0 <_ZN15Adafruit_BME2806write8Ehh>
     9c6:	6c e2       	ldi	r22, 0x2C	; 44
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <delay>
     9d2:	ce 01       	movw	r24, r28
     9d4:	c6 df       	rcall	.-116    	; 0x962 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
     9d6:	88 23       	and	r24, r24
     9d8:	29 f0       	breq	.+10     	; 0x9e4 <_ZN15Adafruit_BME2804initEv+0x7a>
     9da:	64 e6       	ldi	r22, 0x64	; 100
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	f5 cf       	rjmp	.-22     	; 0x9ce <_ZN15Adafruit_BME2804initEv+0x64>
     9e4:	ce 01       	movw	r24, r28
     9e6:	45 df       	rcall	.-374    	; 0x872 <_ZN15Adafruit_BME28016readCoefficientsEv>
     9e8:	c1 2c       	mov	r12, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	05 e0       	ldi	r16, 0x05	; 5
     9ee:	25 e0       	ldi	r18, 0x05	; 5
     9f0:	45 e0       	ldi	r20, 0x05	; 5
     9f2:	63 e0       	ldi	r22, 0x03	; 3
     9f4:	ce 01       	movw	r24, r28
     9f6:	27 de       	rcall	.-946    	; 0x646 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
     9f8:	64 e6       	ldi	r22, 0x64	; 100
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <delay>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <_ZN15Adafruit_BME2804initEv+0xa0>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	0f 91       	pop	r16
     a10:	ef 90       	pop	r14
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
     a16:	27 e7       	ldi	r18, 0x77	; 119
     a18:	fc 01       	movw	r30, r24
     a1a:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
     a1c:	2f e0       	ldi	r18, 0x0F	; 15
     a1e:	35 e0       	ldi	r19, 0x05	; 5
     a20:	31 83       	std	Z+1, r19	; 0x01
     a22:	20 83       	st	Z, r18
	return init();
     a24:	a2 cf       	rjmp	.-188    	; 0x96a <_ZN15Adafruit_BME2804initEv>

00000a26 <_ZL6conv2dPKc>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     a26:	fc 01       	movw	r30, r24
     a28:	90 81       	ld	r25, Z
     a2a:	90 53       	subi	r25, 0x30	; 48
     a2c:	9a 30       	cpi	r25, 0x0A	; 10
     a2e:	08 f0       	brcs	.+2      	; 0xa32 <_ZL6conv2dPKc+0xc>
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	81 81       	ldd	r24, Z+1	; 0x01
     a34:	80 53       	subi	r24, 0x30	; 48
     a36:	2a e0       	ldi	r18, 0x0A	; 10
     a38:	92 9f       	mul	r25, r18
     a3a:	80 0d       	add	r24, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	08 95       	ret

00000a40 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	2b 97       	sbiw	r28, 0x0b	; 11
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	8c 01       	movw	r16, r24
     a5e:	7a 01       	movw	r14, r20
     a60:	4b e0       	ldi	r20, 0x0B	; 11
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	ce 01       	movw	r24, r28
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	0e 94 2d 20 	call	0x405a	; 0x405a <memcpy_P>
     a6c:	ce 01       	movw	r24, r28
     a6e:	0a 96       	adiw	r24, 0x0a	; 10
     a70:	da df       	rcall	.-76     	; 0xa26 <_ZL6conv2dPKc>
     a72:	f8 01       	movw	r30, r16
     a74:	80 83       	st	Z, r24
     a76:	e9 81       	ldd	r30, Y+1	; 0x01
     a78:	8e 2f       	mov	r24, r30
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	e1 54       	subi	r30, 0x41	; 65
     a80:	f1 09       	sbc	r31, r1
     a82:	e3 31       	cpi	r30, 0x13	; 19
     a84:	f1 05       	cpc	r31, r1
     a86:	58 f5       	brcc	.+86     	; 0xade <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9e>
     a88:	88 27       	eor	r24, r24
     a8a:	ee 58       	subi	r30, 0x8E	; 142
     a8c:	ff 4f       	sbci	r31, 0xFF	; 255
     a8e:	8f 4f       	sbci	r24, 0xFF	; 255
     a90:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__tablejump2__>
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	81 36       	cpi	r24, 0x61	; 97
     a98:	29 f0       	breq	.+10     	; 0xaa4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	8e 36       	cpi	r24, 0x6E	; 110
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x68>
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	1b c0       	rjmp	.+54     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	19 c0       	rjmp	.+50     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     aa8:	86 e0       	ldi	r24, 0x06	; 6
     aaa:	17 c0       	rjmp	.+46     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	15 c0       	rjmp	.+42     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	82 37       	cpi	r24, 0x72	; 114
     ab4:	11 f0       	breq	.+4      	; 0xaba <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x7a>
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	10 c0       	rjmp	.+32     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	0e c0       	rjmp	.+28     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	82 37       	cpi	r24, 0x72	; 114
     ac2:	11 f0       	breq	.+4      	; 0xac8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x88>
     ac4:	85 e0       	ldi	r24, 0x05	; 5
     ac6:	09 c0       	rjmp	.+18     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	07 c0       	rjmp	.+14     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     acc:	89 e0       	ldi	r24, 0x09	; 9
     ace:	05 c0       	rjmp	.+10     	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     ad0:	8a e0       	ldi	r24, 0x0A	; 10
     ad2:	03 c0       	rjmp	.+6      	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     ad4:	8b e0       	ldi	r24, 0x0B	; 11
     ad6:	01 c0       	rjmp	.+2      	; 0xada <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     ad8:	8c e0       	ldi	r24, 0x0C	; 12
     ada:	f8 01       	movw	r30, r16
     adc:	81 83       	std	Z+1, r24	; 0x01
     ade:	ce 01       	movw	r24, r28
     ae0:	05 96       	adiw	r24, 0x05	; 5
     ae2:	a1 df       	rcall	.-190    	; 0xa26 <_ZL6conv2dPKc>
     ae4:	f8 01       	movw	r30, r16
     ae6:	82 83       	std	Z+2, r24	; 0x02
     ae8:	48 e0       	ldi	r20, 0x08	; 8
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	b7 01       	movw	r22, r14
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	0e 94 2d 20 	call	0x405a	; 0x405a <memcpy_P>
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	95 df       	rcall	.-214    	; 0xa26 <_ZL6conv2dPKc>
     afc:	f8 01       	movw	r30, r16
     afe:	83 83       	std	Z+3, r24	; 0x03
     b00:	ce 01       	movw	r24, r28
     b02:	04 96       	adiw	r24, 0x04	; 4
     b04:	90 df       	rcall	.-224    	; 0xa26 <_ZL6conv2dPKc>
     b06:	f8 01       	movw	r30, r16
     b08:	84 83       	std	Z+4, r24	; 0x04
     b0a:	ce 01       	movw	r24, r28
     b0c:	07 96       	adiw	r24, 0x07	; 7
     b0e:	8b df       	rcall	.-234    	; 0xa26 <_ZL6conv2dPKc>
     b10:	f8 01       	movw	r30, r16
     b12:	85 83       	std	Z+5, r24	; 0x05
     b14:	2b 96       	adiw	r28, 0x0b	; 11
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	08 95       	ret

00000b2e <_ZN10RTC_DS32315beginEv>:
     b2e:	8f e0       	ldi	r24, 0x0F	; 15
     b30:	95 e0       	ldi	r25, 0x05	; 5
     b32:	1e d4       	rcall	.+2108   	; 0x1370 <_ZN7TwoWire5beginEv>
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	08 95       	ret

00000b38 <_ZL17read_i2c_registerhh.constprop.7>:
     b38:	cf 93       	push	r28
     b3a:	c8 2f       	mov	r28, r24
     b3c:	68 e6       	ldi	r22, 0x68	; 104
     b3e:	8f e0       	ldi	r24, 0x0F	; 15
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	25 d4       	rcall	.+2122   	; 0x138e <_ZN7TwoWire17beginTransmissionEh>
     b44:	6c 2f       	mov	r22, r28
     b46:	8f e0       	ldi	r24, 0x0F	; 15
     b48:	95 e0       	ldi	r25, 0x05	; 5
     b4a:	d4 d3       	rcall	.+1960   	; 0x12f4 <_ZN7TwoWire5writeEh>
     b4c:	8f e0       	ldi	r24, 0x0F	; 15
     b4e:	95 e0       	ldi	r25, 0x05	; 5
     b50:	9d d4       	rcall	.+2362   	; 0x148c <_ZN7TwoWire15endTransmissionEv>
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	68 e6       	ldi	r22, 0x68	; 104
     b56:	8f e0       	ldi	r24, 0x0F	; 15
     b58:	95 e0       	ldi	r25, 0x05	; 5
     b5a:	96 d4       	rcall	.+2348   	; 0x1488 <_ZN7TwoWire11requestFromEhh>
     b5c:	8f e0       	ldi	r24, 0x0F	; 15
     b5e:	95 e0       	ldi	r25, 0x05	; 5
     b60:	43 d3       	rcall	.+1670   	; 0x11e8 <_ZN7TwoWire4readEv>
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
     b6e:	68 e6       	ldi	r22, 0x68	; 104
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	8f e0       	ldi	r24, 0x0F	; 15
     b74:	95 e0       	ldi	r25, 0x05	; 5
     b76:	15 d4       	rcall	.+2090   	; 0x13a2 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	8f e0       	ldi	r24, 0x0F	; 15
     b7c:	95 e0       	ldi	r25, 0x05	; 5
     b7e:	ba d3       	rcall	.+1908   	; 0x12f4 <_ZN7TwoWire5writeEh>
     b80:	f8 01       	movw	r30, r16
     b82:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
     b84:	ca e0       	ldi	r28, 0x0A	; 10
     b86:	82 2f       	mov	r24, r18
     b88:	6c 2f       	mov	r22, r28
     b8a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodqi4>
     b8e:	68 2f       	mov	r22, r24
     b90:	66 0f       	add	r22, r22
     b92:	86 0f       	add	r24, r22
     b94:	88 0f       	add	r24, r24
     b96:	68 2f       	mov	r22, r24
     b98:	62 0f       	add	r22, r18
     b9a:	8f e0       	ldi	r24, 0x0F	; 15
     b9c:	95 e0       	ldi	r25, 0x05	; 5
     b9e:	aa d3       	rcall	.+1876   	; 0x12f4 <_ZN7TwoWire5writeEh>
     ba0:	f8 01       	movw	r30, r16
     ba2:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
     ba4:	82 2f       	mov	r24, r18
     ba6:	6c 2f       	mov	r22, r28
     ba8:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodqi4>
     bac:	68 2f       	mov	r22, r24
     bae:	66 0f       	add	r22, r22
     bb0:	86 0f       	add	r24, r22
     bb2:	88 0f       	add	r24, r24
     bb4:	68 2f       	mov	r22, r24
     bb6:	62 0f       	add	r22, r18
     bb8:	8f e0       	ldi	r24, 0x0F	; 15
     bba:	95 e0       	ldi	r25, 0x05	; 5
     bbc:	9b d3       	rcall	.+1846   	; 0x12f4 <_ZN7TwoWire5writeEh>
     bbe:	f8 01       	movw	r30, r16
     bc0:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
     bc2:	82 2f       	mov	r24, r18
     bc4:	6c 2f       	mov	r22, r28
     bc6:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodqi4>
     bca:	68 2f       	mov	r22, r24
     bcc:	66 0f       	add	r22, r22
     bce:	86 0f       	add	r24, r22
     bd0:	88 0f       	add	r24, r24
     bd2:	68 2f       	mov	r22, r24
     bd4:	62 0f       	add	r22, r18
     bd6:	8f e0       	ldi	r24, 0x0F	; 15
     bd8:	95 e0       	ldi	r25, 0x05	; 5
  Wire._I2C_WRITE(bin2bcd(0));
     bda:	8c d3       	rcall	.+1816   	; 0x12f4 <_ZN7TwoWire5writeEh>
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	8f e0       	ldi	r24, 0x0F	; 15
     be0:	95 e0       	ldi	r25, 0x05	; 5
     be2:	88 d3       	rcall	.+1808   	; 0x12f4 <_ZN7TwoWire5writeEh>
     be4:	f8 01       	movw	r30, r16
     be6:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
     be8:	82 2f       	mov	r24, r18
     bea:	6c 2f       	mov	r22, r28
     bec:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodqi4>
     bf0:	68 2f       	mov	r22, r24
     bf2:	66 0f       	add	r22, r22
     bf4:	86 0f       	add	r24, r22
     bf6:	88 0f       	add	r24, r24
     bf8:	68 2f       	mov	r22, r24
     bfa:	62 0f       	add	r22, r18
     bfc:	8f e0       	ldi	r24, 0x0F	; 15
     bfe:	95 e0       	ldi	r25, 0x05	; 5
     c00:	79 d3       	rcall	.+1778   	; 0x12f4 <_ZN7TwoWire5writeEh>
     c02:	f8 01       	movw	r30, r16
     c04:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
     c06:	82 2f       	mov	r24, r18
     c08:	6c 2f       	mov	r22, r28
     c0a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodqi4>
     c0e:	68 2f       	mov	r22, r24
     c10:	66 0f       	add	r22, r22
     c12:	86 0f       	add	r24, r22
     c14:	88 0f       	add	r24, r24
     c16:	68 2f       	mov	r22, r24
     c18:	62 0f       	add	r22, r18
     c1a:	8f e0       	ldi	r24, 0x0F	; 15
     c1c:	95 e0       	ldi	r25, 0x05	; 5
     c1e:	6a d3       	rcall	.+1748   	; 0x12f4 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
     c20:	f8 01       	movw	r30, r16
     c22:	20 81       	ld	r18, Z
     c24:	82 2f       	mov	r24, r18
     c26:	6c 2f       	mov	r22, r28
     c28:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodqi4>
     c2c:	68 2f       	mov	r22, r24
     c2e:	66 0f       	add	r22, r22
     c30:	86 0f       	add	r24, r22
     c32:	88 0f       	add	r24, r24
     c34:	68 2f       	mov	r22, r24
     c36:	62 0f       	add	r22, r18
     c38:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.endTransmission();
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	5b d3       	rcall	.+1718   	; 0x12f4 <_ZN7TwoWire5writeEh>
     c3e:	8f e0       	ldi	r24, 0x0F	; 15

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
     c40:	95 e0       	ldi	r25, 0x05	; 5
     c42:	24 d4       	rcall	.+2120   	; 0x148c <_ZN7TwoWire15endTransmissionEv>
     c44:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
     c46:	78 df       	rcall	.-272    	; 0xb38 <_ZL17read_i2c_registerhh.constprop.7>
     c48:	c8 2f       	mov	r28, r24
     c4a:	68 e6       	ldi	r22, 0x68	; 104
     c4c:	8f e0       	ldi	r24, 0x0F	; 15
  Wire._I2C_WRITE((byte)reg);
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9e d3       	rcall	.+1852   	; 0x138e <_ZN7TwoWire17beginTransmissionEh>
     c52:	6f e0       	ldi	r22, 0x0F	; 15
     c54:	8f e0       	ldi	r24, 0x0F	; 15
  Wire._I2C_WRITE((byte)val);
     c56:	95 e0       	ldi	r25, 0x05	; 5
     c58:	4d d3       	rcall	.+1690   	; 0x12f4 <_ZN7TwoWire5writeEh>
     c5a:	6c 2f       	mov	r22, r28
     c5c:	6f 77       	andi	r22, 0x7F	; 127
     c5e:	8f e0       	ldi	r24, 0x0F	; 15
     c60:	95 e0       	ldi	r25, 0x05	; 5
  Wire.endTransmission();
     c62:	48 d3       	rcall	.+1680   	; 0x12f4 <_ZN7TwoWire5writeEh>
     c64:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     c6c:	0f 91       	pop	r16
     c6e:	0e c4       	rjmp	.+2076   	; 0x148c <_ZN7TwoWire15endTransmissionEv>

00000c70 <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
     c70:	8f e0       	ldi	r24, 0x0F	; 15
     c72:	62 df       	rcall	.-316    	; 0xb38 <_ZL17read_i2c_registerhh.constprop.7>
     c74:	87 fb       	bst	r24, 7
     c76:	88 27       	eor	r24, r24
     c78:	80 f9       	bld	r24, 0
}
     c7a:	08 95       	ret

00000c7c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	08 95       	ret

00000c82 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     c82:	08 95       	ret

00000c84 <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	0b b6       	in	r0, 0x3b	; 59
     c90:	0f 92       	push	r0
     c92:	2f 93       	push	r18
     c94:	3f 93       	push	r19
     c96:	4f 93       	push	r20
     c98:	5f 93       	push	r21
     c9a:	6f 93       	push	r22
     c9c:	7f 93       	push	r23
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	af 93       	push	r26
     ca4:	bf 93       	push	r27
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     caa:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <_ZN14SoftwareSerial13active_objectE>
     cae:	f0 91 a0 04 	lds	r31, 0x04A0	; 0x8004a0 <_ZN14SoftwareSerial13active_objectE+0x1>
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <__vector_10+0x34>
     cb6:	51 c0       	rjmp	.+162    	; 0xd5a <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cb8:	96 8d       	ldd	r25, Z+30	; 0x1e
     cba:	a6 85       	ldd	r26, Z+14	; 0x0e
     cbc:	b7 85       	ldd	r27, Z+15	; 0x0f
     cbe:	85 85       	ldd	r24, Z+13	; 0x0d
     cc0:	91 ff       	sbrs	r25, 1
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     cc4:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cc6:	89 23       	and	r24, r25
     cc8:	29 f4       	brne	.+10     	; 0xcd4 <__vector_10+0x50>
     cca:	47 c0       	rjmp	.+142    	; 0xd5a <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     ccc:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cce:	89 23       	and	r24, r25
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <__vector_10+0x50>
     cd2:	43 c0       	rjmp	.+134    	; 0xd5a <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     cd4:	a3 89       	ldd	r26, Z+19	; 0x13
     cd6:	b4 89       	ldd	r27, Z+20	; 0x14
     cd8:	9c 91       	ld	r25, X
     cda:	85 89       	ldd	r24, Z+21	; 0x15
     cdc:	80 95       	com	r24
     cde:	89 23       	and	r24, r25
     ce0:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     ce2:	86 89       	ldd	r24, Z+22	; 0x16
     ce4:	97 89       	ldd	r25, Z+23	; 0x17
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     cea:	60 8d       	ldd	r22, Z+24	; 0x18
     cec:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     cee:	a6 85       	ldd	r26, Z+14	; 0x0e
     cf0:	b7 85       	ldd	r27, Z+15	; 0x0f
     cf2:	55 85       	ldd	r21, Z+13	; 0x0d
     cf4:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     cfe:	82 2f       	mov	r24, r18
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	95 95       	asr	r25
     d04:	87 95       	ror	r24
     d06:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d08:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     d0a:	45 23       	and	r20, r21
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__vector_10+0x8c>
        d |= 0x80;
     d0e:	20 68       	ori	r18, 0x80	; 128
     d10:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d12:	91 f7       	brne	.-28     	; 0xcf8 <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     d14:	86 8d       	ldd	r24, Z+30	; 0x1e
     d16:	81 fd       	sbrc	r24, 1
      d = ~d;
     d18:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     d1a:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	8f 73       	andi	r24, 0x3F	; 63
     d24:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
     d26:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <_ZN14SoftwareSerial20_receive_buffer_headE>
     d2a:	38 17       	cp	r19, r24
     d2c:	49 f0       	breq	.+18     	; 0xd40 <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     d2e:	a0 91 5e 04 	lds	r26, 0x045E	; 0x80045e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	a1 5a       	subi	r26, 0xA1	; 161
     d36:	bb 4f       	sbci	r27, 0xFB	; 251
     d38:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
     d3a:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     d40:	86 8d       	ldd	r24, Z+30	; 0x1e
     d42:	81 60       	ori	r24, 0x01	; 1
     d44:	86 8f       	std	Z+30, r24	; 0x1e
     d46:	82 8d       	ldd	r24, Z+26	; 0x1a
     d48:	93 8d       	ldd	r25, Z+27	; 0x1b
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     d4e:	a3 89       	ldd	r26, Z+19	; 0x13
     d50:	b4 89       	ldd	r27, Z+20	; 0x14
     d52:	9c 91       	ld	r25, X
     d54:	85 89       	ldd	r24, Z+21	; 0x15
     d56:	89 2b       	or	r24, r25
     d58:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	0f 90       	pop	r0
     d74:	0b be       	out	0x3b, r0	; 59
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     d80:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <twi_state>
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <twi_sendStop>
     d8a:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_inRepStart>
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	84 e1       	ldi	r24, 0x14	; 20
     d92:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	85 e1       	ldi	r24, 0x15	; 21
     d9a:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
     d9e:	e9 eb       	ldi	r30, 0xB9	; 185
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8e 7f       	andi	r24, 0xFE	; 254
     da6:	80 83       	st	Z, r24
     da8:	80 81       	ld	r24, Z
     daa:	8d 7f       	andi	r24, 0xFD	; 253
     dac:	80 83       	st	Z, r24
     dae:	88 e4       	ldi	r24, 0x48	; 72
     db0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     db4:	85 e4       	ldi	r24, 0x45	; 69
     db6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     dba:	08 95       	ret

00000dbc <twi_readFrom>:
     dbc:	41 32       	cpi	r20, 0x21	; 33
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <twi_readFrom+0x6>
     dc0:	43 c0       	rjmp	.+134    	; 0xe48 <twi_readFrom+0x8c>
     dc2:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <twi_state>
     dc6:	91 11       	cpse	r25, r1
     dc8:	fc cf       	rjmp	.-8      	; 0xdc2 <twi_readFrom+0x6>
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <twi_state>
     dd0:	20 93 0c 05 	sts	0x050C, r18	; 0x80050c <twi_sendStop>
     dd4:	2f ef       	ldi	r18, 0xFF	; 255
     dd6:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <twi_error>
     dda:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_masterBufferIndex>
     dde:	24 0f       	add	r18, r20
     de0:	20 93 e5 04 	sts	0x04E5, r18	; 0x8004e5 <twi_masterBufferLength>
     de4:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <twi_slarw>
     de8:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twi_slarw>
     dec:	88 0f       	add	r24, r24
     dee:	89 2b       	or	r24, r25
     df0:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twi_slarw>
     df4:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_inRepStart>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	61 f4       	brne	.+24     	; 0xe14 <twi_readFrom+0x58>
     dfc:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_inRepStart>
     e00:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twi_slarw>
     e04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e0c:	83 fd       	sbrc	r24, 3
     e0e:	f8 cf       	rjmp	.-16     	; 0xe00 <twi_readFrom+0x44>
     e10:	85 ec       	ldi	r24, 0xC5	; 197
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <twi_readFrom+0x5a>
     e14:	85 ee       	ldi	r24, 0xE5	; 229
     e16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e1a:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <twi_state>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	e1 f3       	breq	.-8      	; 0xe1a <twi_readFrom+0x5e>
     e22:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
     e26:	84 17       	cp	r24, r20
     e28:	10 f4       	brcc	.+4      	; 0xe2e <twi_readFrom+0x72>
     e2a:	40 91 e6 04 	lds	r20, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
     e2e:	a7 ee       	ldi	r26, 0xE7	; 231
     e30:	b4 e0       	ldi	r27, 0x04	; 4
     e32:	96 2f       	mov	r25, r22
     e34:	fb 01       	movw	r30, r22
     e36:	8e 2f       	mov	r24, r30
     e38:	89 1b       	sub	r24, r25
     e3a:	84 17       	cp	r24, r20
     e3c:	18 f4       	brcc	.+6      	; 0xe44 <twi_readFrom+0x88>
     e3e:	8d 91       	ld	r24, X+
     e40:	81 93       	st	Z+, r24
     e42:	f9 cf       	rjmp	.-14     	; 0xe36 <twi_readFrom+0x7a>
     e44:	84 2f       	mov	r24, r20
     e46:	08 95       	ret
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	08 95       	ret

00000e4c <twi_writeTo>:
     e4c:	0f 93       	push	r16
     e4e:	41 32       	cpi	r20, 0x21	; 33
     e50:	08 f0       	brcs	.+2      	; 0xe54 <twi_writeTo+0x8>
     e52:	4a c0       	rjmp	.+148    	; 0xee8 <twi_writeTo+0x9c>
     e54:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <twi_state>
     e58:	91 11       	cpse	r25, r1
     e5a:	fc cf       	rjmp	.-8      	; 0xe54 <twi_writeTo+0x8>
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	30 93 0e 05 	sts	0x050E, r19	; 0x80050e <twi_state>
     e62:	00 93 0c 05 	sts	0x050C, r16	; 0x80050c <twi_sendStop>
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	30 93 a1 04 	sts	0x04A1, r19	; 0x8004a1 <twi_error>
     e6c:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_masterBufferIndex>
     e70:	40 93 e5 04 	sts	0x04E5, r20	; 0x8004e5 <twi_masterBufferLength>
     e74:	56 2f       	mov	r21, r22
     e76:	a7 ee       	ldi	r26, 0xE7	; 231
     e78:	b4 e0       	ldi	r27, 0x04	; 4
     e7a:	fb 01       	movw	r30, r22
     e7c:	3e 2f       	mov	r19, r30
     e7e:	35 1b       	sub	r19, r21
     e80:	34 17       	cp	r19, r20
     e82:	18 f4       	brcc	.+6      	; 0xe8a <twi_writeTo+0x3e>
     e84:	31 91       	ld	r19, Z+
     e86:	3d 93       	st	X+, r19
     e88:	f9 cf       	rjmp	.-14     	; 0xe7c <twi_writeTo+0x30>
     e8a:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <twi_slarw>
     e8e:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <twi_slarw>
     e92:	88 0f       	add	r24, r24
     e94:	83 2b       	or	r24, r19
     e96:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twi_slarw>
     e9a:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_inRepStart>
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	61 f4       	brne	.+24     	; 0xeba <twi_writeTo+0x6e>
     ea2:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_inRepStart>
     ea6:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twi_slarw>
     eaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     eae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     eb2:	83 fd       	sbrc	r24, 3
     eb4:	f8 cf       	rjmp	.-16     	; 0xea6 <twi_writeTo+0x5a>
     eb6:	85 ec       	ldi	r24, 0xC5	; 197
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <twi_writeTo+0x70>
     eba:	85 ee       	ldi	r24, 0xE5	; 229
     ebc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ec0:	22 23       	and	r18, r18
     ec2:	21 f0       	breq	.+8      	; 0xecc <twi_writeTo+0x80>
     ec4:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <twi_state>
     ec8:	82 30       	cpi	r24, 0x02	; 2
     eca:	d1 f3       	breq	.-12     	; 0xec0 <twi_writeTo+0x74>
     ecc:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <twi_error>
     ed0:	8f 3f       	cpi	r24, 0xFF	; 255
     ed2:	79 f0       	breq	.+30     	; 0xef2 <twi_writeTo+0xa6>
     ed4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <twi_error>
     ed8:	80 32       	cpi	r24, 0x20	; 32
     eda:	41 f0       	breq	.+16     	; 0xeec <twi_writeTo+0xa0>
     edc:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <twi_error>
     ee0:	80 33       	cpi	r24, 0x30	; 48
     ee2:	31 f0       	breq	.+12     	; 0xef0 <twi_writeTo+0xa4>
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <twi_writeTo+0xa6>
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <twi_writeTo+0xa6>
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <twi_writeTo+0xa6>
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	89 2f       	mov	r24, r25
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <twi_transmit>:
     ef8:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <twi_txBufferLength>
     efc:	26 2f       	mov	r18, r22
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	24 0f       	add	r18, r20
     f02:	31 1d       	adc	r19, r1
     f04:	21 32       	cpi	r18, 0x21	; 33
     f06:	31 05       	cpc	r19, r1
     f08:	dc f4       	brge	.+54     	; 0xf40 <twi_transmit+0x48>
     f0a:	20 91 0e 05 	lds	r18, 0x050E	; 0x80050e <twi_state>
     f0e:	24 30       	cpi	r18, 0x04	; 4
     f10:	c9 f4       	brne	.+50     	; 0xf44 <twi_transmit+0x4c>
     f12:	fc 01       	movw	r30, r24
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	86 17       	cp	r24, r22
     f1a:	58 f4       	brcc	.+22     	; 0xf32 <twi_transmit+0x3a>
     f1c:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <twi_txBufferLength>
     f20:	21 91       	ld	r18, Z+
     f22:	dc 01       	movw	r26, r24
     f24:	ab 53       	subi	r26, 0x3B	; 59
     f26:	bb 4f       	sbci	r27, 0xFB	; 251
     f28:	a3 0f       	add	r26, r19
     f2a:	b1 1d       	adc	r27, r1
     f2c:	2c 93       	st	X, r18
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	f3 cf       	rjmp	.-26     	; 0xf18 <twi_transmit+0x20>
     f32:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_txBufferLength>
     f36:	68 0f       	add	r22, r24
     f38:	60 93 c3 04 	sts	0x04C3, r22	; 0x8004c3 <twi_txBufferLength>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	08 95       	ret
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	08 95       	ret

00000f48 <twi_attachSlaveRxEvent>:
     f48:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <twi_onSlaveReceive+0x1>
     f4c:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_onSlaveReceive>
     f50:	08 95       	ret

00000f52 <twi_attachSlaveTxEvent>:
     f52:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <twi_onSlaveTransmit+0x1>
     f56:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_onSlaveTransmit>
     f5a:	08 95       	ret

00000f5c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     f5c:	85 ed       	ldi	r24, 0xD5	; 213
     f5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     f62:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f66:	84 fd       	sbrc	r24, 4
     f68:	fc cf       	rjmp	.-8      	; 0xf62 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     f6a:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <twi_state>
     f6e:	08 95       	ret

00000f70 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     f70:	85 ec       	ldi	r24, 0xC5	; 197
     f72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
     f76:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <twi_state>
     f7a:	08 95       	ret

00000f7c <__vector_39>:
}

ISR(TWI_vect)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	0b b6       	in	r0, 0x3b	; 59
     f88:	0f 92       	push	r0
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	5f 93       	push	r21
     f92:	6f 93       	push	r22
     f94:	7f 93       	push	r23
     f96:	8f 93       	push	r24
     f98:	9f 93       	push	r25
     f9a:	af 93       	push	r26
     f9c:	bf 93       	push	r27
     f9e:	ef 93       	push	r30
     fa0:	ff 93       	push	r31
  switch(TW_STATUS){
     fa2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     fa6:	88 7f       	andi	r24, 0xF8	; 248
     fa8:	80 36       	cpi	r24, 0x60	; 96
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_39+0x32>
     fac:	9d c0       	rjmp	.+314    	; 0x10e8 <__vector_39+0x16c>
     fae:	70 f5       	brcc	.+92     	; 0x100c <__vector_39+0x90>
     fb0:	88 32       	cpi	r24, 0x28	; 40
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__vector_39+0x3a>
     fb4:	5c c0       	rjmp	.+184    	; 0x106e <__vector_39+0xf2>
     fb6:	90 f4       	brcc	.+36     	; 0xfdc <__vector_39+0x60>
     fb8:	80 31       	cpi	r24, 0x10	; 16
     fba:	09 f4       	brne	.+2      	; 0xfbe <__vector_39+0x42>
     fbc:	55 c0       	rjmp	.+170    	; 0x1068 <__vector_39+0xec>
     fbe:	38 f4       	brcc	.+14     	; 0xfce <__vector_39+0x52>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <__vector_39+0x4a>
     fc4:	f3 c0       	rjmp	.+486    	; 0x11ac <__vector_39+0x230>
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	09 f4       	brne	.+2      	; 0xfcc <__vector_39+0x50>
     fca:	4e c0       	rjmp	.+156    	; 0x1068 <__vector_39+0xec>
     fcc:	f2 c0       	rjmp	.+484    	; 0x11b2 <__vector_39+0x236>
     fce:	88 31       	cpi	r24, 0x18	; 24
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <__vector_39+0x58>
     fd2:	4d c0       	rjmp	.+154    	; 0x106e <__vector_39+0xf2>
     fd4:	80 32       	cpi	r24, 0x20	; 32
     fd6:	09 f4       	brne	.+2      	; 0xfda <__vector_39+0x5e>
     fd8:	5e c0       	rjmp	.+188    	; 0x1096 <__vector_39+0x11a>
     fda:	eb c0       	rjmp	.+470    	; 0x11b2 <__vector_39+0x236>
     fdc:	80 34       	cpi	r24, 0x40	; 64
     fde:	09 f4       	brne	.+2      	; 0xfe2 <__vector_39+0x66>
     fe0:	69 c0       	rjmp	.+210    	; 0x10b4 <__vector_39+0x138>
     fe2:	50 f4       	brcc	.+20     	; 0xff8 <__vector_39+0x7c>
     fe4:	80 33       	cpi	r24, 0x30	; 48
     fe6:	09 f4       	brne	.+2      	; 0xfea <__vector_39+0x6e>
     fe8:	56 c0       	rjmp	.+172    	; 0x1096 <__vector_39+0x11a>
     fea:	88 33       	cpi	r24, 0x38	; 56
     fec:	09 f0       	breq	.+2      	; 0xff0 <__vector_39+0x74>
     fee:	e1 c0       	rjmp	.+450    	; 0x11b2 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     ff0:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <twi_error>
      twi_releaseBus();
     ff4:	bd df       	rcall	.-134    	; 0xf70 <twi_releaseBus>
      break;
     ff6:	dd c0       	rjmp	.+442    	; 0x11b2 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     ff8:	80 35       	cpi	r24, 0x50	; 80
     ffa:	09 f4       	brne	.+2      	; 0xffe <__vector_39+0x82>
     ffc:	4f c0       	rjmp	.+158    	; 0x109c <__vector_39+0x120>
     ffe:	88 35       	cpi	r24, 0x58	; 88
    1000:	09 f4       	brne	.+2      	; 0x1004 <__vector_39+0x88>
    1002:	5d c0       	rjmp	.+186    	; 0x10be <__vector_39+0x142>
    1004:	88 34       	cpi	r24, 0x48	; 72
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_39+0x8e>
    1008:	d4 c0       	rjmp	.+424    	; 0x11b2 <__vector_39+0x236>
    100a:	d2 c0       	rjmp	.+420    	; 0x11b0 <__vector_39+0x234>
    100c:	88 39       	cpi	r24, 0x98	; 152
    100e:	09 f4       	brne	.+2      	; 0x1012 <__vector_39+0x96>
    1010:	c3 c0       	rjmp	.+390    	; 0x1198 <__vector_39+0x21c>
    1012:	a8 f4       	brcc	.+42     	; 0x103e <__vector_39+0xc2>
    1014:	88 37       	cpi	r24, 0x78	; 120
    1016:	09 f4       	brne	.+2      	; 0x101a <__vector_39+0x9e>
    1018:	67 c0       	rjmp	.+206    	; 0x10e8 <__vector_39+0x16c>
    101a:	38 f4       	brcc	.+14     	; 0x102a <__vector_39+0xae>
    101c:	88 36       	cpi	r24, 0x68	; 104
    101e:	09 f4       	brne	.+2      	; 0x1022 <__vector_39+0xa6>
    1020:	63 c0       	rjmp	.+198    	; 0x10e8 <__vector_39+0x16c>
    1022:	80 37       	cpi	r24, 0x70	; 112
    1024:	09 f4       	brne	.+2      	; 0x1028 <__vector_39+0xac>
    1026:	60 c0       	rjmp	.+192    	; 0x10e8 <__vector_39+0x16c>
    1028:	c4 c0       	rjmp	.+392    	; 0x11b2 <__vector_39+0x236>
    102a:	88 38       	cpi	r24, 0x88	; 136
    102c:	09 f4       	brne	.+2      	; 0x1030 <__vector_39+0xb4>
    102e:	b4 c0       	rjmp	.+360    	; 0x1198 <__vector_39+0x21c>
    1030:	80 39       	cpi	r24, 0x90	; 144
    1032:	09 f4       	brne	.+2      	; 0x1036 <__vector_39+0xba>
    1034:	5f c0       	rjmp	.+190    	; 0x10f4 <__vector_39+0x178>
    1036:	80 38       	cpi	r24, 0x80	; 128
    1038:	09 f0       	breq	.+2      	; 0x103c <__vector_39+0xc0>
    103a:	bb c0       	rjmp	.+374    	; 0x11b2 <__vector_39+0x236>
    103c:	5b c0       	rjmp	.+182    	; 0x10f4 <__vector_39+0x178>
    103e:	80 3b       	cpi	r24, 0xB0	; 176
    1040:	09 f4       	brne	.+2      	; 0x1044 <__vector_39+0xc8>
    1042:	82 c0       	rjmp	.+260    	; 0x1148 <__vector_39+0x1cc>
    1044:	38 f4       	brcc	.+14     	; 0x1054 <__vector_39+0xd8>
    1046:	80 3a       	cpi	r24, 0xA0	; 160
    1048:	09 f4       	brne	.+2      	; 0x104c <__vector_39+0xd0>
    104a:	66 c0       	rjmp	.+204    	; 0x1118 <__vector_39+0x19c>
    104c:	88 3a       	cpi	r24, 0xA8	; 168
    104e:	09 f4       	brne	.+2      	; 0x1052 <__vector_39+0xd6>
    1050:	7b c0       	rjmp	.+246    	; 0x1148 <__vector_39+0x1cc>
    1052:	af c0       	rjmp	.+350    	; 0x11b2 <__vector_39+0x236>
    1054:	80 3c       	cpi	r24, 0xC0	; 192
    1056:	09 f4       	brne	.+2      	; 0x105a <__vector_39+0xde>
    1058:	a3 c0       	rjmp	.+326    	; 0x11a0 <__vector_39+0x224>
    105a:	88 3c       	cpi	r24, 0xC8	; 200
    105c:	09 f4       	brne	.+2      	; 0x1060 <__vector_39+0xe4>
    105e:	a0 c0       	rjmp	.+320    	; 0x11a0 <__vector_39+0x224>
    1060:	88 3b       	cpi	r24, 0xB8	; 184
    1062:	09 f4       	brne	.+2      	; 0x1066 <__vector_39+0xea>
    1064:	86 c0       	rjmp	.+268    	; 0x1172 <__vector_39+0x1f6>
    1066:	a5 c0       	rjmp	.+330    	; 0x11b2 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1068:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twi_slarw>
    106c:	10 c0       	rjmp	.+32     	; 0x108e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    106e:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
    1072:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_masterBufferLength>
    1076:	98 17       	cp	r25, r24
    1078:	70 f5       	brcc	.+92     	; 0x10d6 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    107a:	e0 91 e6 04 	lds	r30, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	8e 0f       	add	r24, r30
    1082:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_masterBufferIndex>
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	e9 51       	subi	r30, 0x19	; 25
    108a:	fb 4f       	sbci	r31, 0xFB	; 251
    108c:	80 81       	ld	r24, Z
    108e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1092:	85 ec       	ldi	r24, 0xC5	; 197
    1094:	82 c0       	rjmp	.+260    	; 0x119a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1096:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <twi_error>
    109a:	8a c0       	rjmp	.+276    	; 0x11b0 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    109c:	e0 91 e6 04 	lds	r30, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	8e 0f       	add	r24, r30
    10a4:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_masterBufferIndex>
    10a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	e9 51       	subi	r30, 0x19	; 25
    10b0:	fb 4f       	sbci	r31, 0xFB	; 251
    10b2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    10b4:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
    10b8:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_masterBufferLength>
    10bc:	6a c0       	rjmp	.+212    	; 0x1192 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    10be:	e0 91 e6 04 	lds	r30, 0x04E6	; 0x8004e6 <twi_masterBufferIndex>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	8e 0f       	add	r24, r30
    10c6:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_masterBufferIndex>
    10ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	e9 51       	subi	r30, 0x19	; 25
    10d2:	fb 4f       	sbci	r31, 0xFB	; 251
    10d4:	80 83       	st	Z, r24
	if (twi_sendStop)
    10d6:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <twi_sendStop>
    10da:	81 11       	cpse	r24, r1
    10dc:	69 c0       	rjmp	.+210    	; 0x11b0 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    10e4:	84 ea       	ldi	r24, 0xA4	; 164
    10e6:	5d c0       	rjmp	.+186    	; 0x11a2 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    10ee:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <twi_rxBufferIndex>
    10f2:	cf cf       	rjmp	.-98     	; 0x1092 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    10f4:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <twi_rxBufferIndex>
    10f8:	80 32       	cpi	r24, 0x20	; 32
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <__vector_39+0x182>
    10fc:	4d c0       	rjmp	.+154    	; 0x1198 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    10fe:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <twi_rxBufferIndex>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	8e 0f       	add	r24, r30
    1106:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <twi_rxBufferIndex>
    110a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	ed 55       	subi	r30, 0x5D	; 93
    1112:	fb 4f       	sbci	r31, 0xFB	; 251
    1114:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1116:	bd cf       	rjmp	.-134    	; 0x1092 <__vector_39+0x116>
    1118:	2b df       	rcall	.-426    	; 0xf70 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    111a:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <twi_rxBufferIndex>
    111e:	80 32       	cpi	r24, 0x20	; 32
    1120:	30 f4       	brcc	.+12     	; 0x112e <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1122:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <twi_rxBufferIndex>
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	ed 55       	subi	r30, 0x5D	; 93
    112a:	fb 4f       	sbci	r31, 0xFB	; 251
    112c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    112e:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <twi_rxBufferIndex>
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <twi_onSlaveReceive>
    1138:	f0 91 08 05 	lds	r31, 0x0508	; 0x800508 <twi_onSlaveReceive+0x1>
    113c:	83 ea       	ldi	r24, 0xA3	; 163
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1142:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <twi_rxBufferIndex>
      break;
    1146:	35 c0       	rjmp	.+106    	; 0x11b2 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    114e:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1152:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1156:	e0 91 09 05 	lds	r30, 0x0509	; 0x800509 <twi_onSlaveTransmit>
    115a:	f0 91 0a 05 	lds	r31, 0x050A	; 0x80050a <twi_onSlaveTransmit+0x1>
    115e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1160:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_txBufferLength>
    1164:	81 11       	cpse	r24, r1
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    116e:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1172:	e0 91 c4 04 	lds	r30, 0x04C4	; 0x8004c4 <twi_txBufferIndex>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	8e 0f       	add	r24, r30
    117a:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <twi_txBufferIndex>
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	eb 53       	subi	r30, 0x3B	; 59
    1182:	fb 4f       	sbci	r31, 0xFB	; 251
    1184:	80 81       	ld	r24, Z
    1186:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    118a:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <twi_txBufferIndex>
    118e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_txBufferLength>
    1192:	98 17       	cp	r25, r24
    1194:	08 f4       	brcc	.+2      	; 0x1198 <__vector_39+0x21c>
    1196:	7d cf       	rjmp	.-262    	; 0x1092 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1198:	85 e8       	ldi	r24, 0x85	; 133
    119a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    11a0:	85 ec       	ldi	r24, 0xC5	; 197
    11a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    11a6:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <twi_state>
      break;
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    11ac:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <twi_error>
      twi_stop();
    11b0:	d5 de       	rcall	.-598    	; 0xf5c <twi_stop>
      break;
  }
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    11d8:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    11e2:	82 1b       	sub	r24, r18
    11e4:	91 09       	sbc	r25, r1
    11e6:	08 95       	ret

000011e8 <_ZN7TwoWire4readEv>:
    11e8:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    11ec:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    11f0:	98 17       	cp	r25, r24
    11f2:	50 f4       	brcc	.+20     	; 0x1208 <_ZN7TwoWire4readEv+0x20>
    11f4:	e9 2f       	mov	r30, r25
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	eb 5b       	subi	r30, 0xBB	; 187
    11fa:	fa 4f       	sbci	r31, 0xFA	; 250
    11fc:	20 81       	ld	r18, Z
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	9f 5f       	subi	r25, 0xFF	; 255
    1202:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    1206:	02 c0       	rjmp	.+4      	; 0x120c <_ZN7TwoWire4readEv+0x24>
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	c9 01       	movw	r24, r18
    120e:	08 95       	ret

00001210 <_ZN7TwoWire4peekEv>:
    1210:	e0 91 44 05 	lds	r30, 0x0544	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    1214:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    1218:	e8 17       	cp	r30, r24
    121a:	30 f4       	brcc	.+12     	; 0x1228 <_ZN7TwoWire4peekEv+0x18>
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	eb 5b       	subi	r30, 0xBB	; 187
    1220:	fa 4f       	sbci	r31, 0xFA	; 250
    1222:	80 81       	ld	r24, Z
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	08 95       	ret
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	9f ef       	ldi	r25, 0xFF	; 255
    122c:	08 95       	ret

0000122e <_ZN7TwoWire5flushEv>:
    122e:	08 95       	ret

00001230 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ec 01       	movw	r28, r24
    1236:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <_ZN7TwoWire14user_onReceiveE>
    123a:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <_ZN7TwoWire14user_onReceiveE+0x1>
    123e:	30 97       	sbiw	r30, 0x00	; 0
    1240:	f1 f0       	breq	.+60     	; 0x127e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1242:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    1246:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    124a:	98 17       	cp	r25, r24
    124c:	c0 f0       	brcs	.+48     	; 0x127e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	29 2f       	mov	r18, r25
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	26 17       	cp	r18, r22
    1256:	37 07       	cpc	r19, r23
    1258:	54 f4       	brge	.+20     	; 0x126e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    125a:	de 01       	movw	r26, r28
    125c:	a2 0f       	add	r26, r18
    125e:	b3 1f       	adc	r27, r19
    1260:	4c 91       	ld	r20, X
    1262:	d9 01       	movw	r26, r18
    1264:	ab 5b       	subi	r26, 0xBB	; 187
    1266:	ba 4f       	sbci	r27, 0xFA	; 250
    1268:	4c 93       	st	X, r20
    126a:	9f 5f       	subi	r25, 0xFF	; 255
    126c:	f1 cf       	rjmp	.-30     	; 0x1250 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    126e:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    1272:	60 93 43 05 	sts	0x0543, r22	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    1276:	cb 01       	movw	r24, r22
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	19 94       	eijmp
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <_ZN7TwoWire16onRequestServiceEv>:
    1284:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <_ZN7TwoWire14user_onRequestE>
    1288:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <_ZN7TwoWire14user_onRequestE+0x1>
    128c:	30 97       	sbiw	r30, 0x00	; 0
    128e:	29 f0       	breq	.+10     	; 0x129a <_ZN7TwoWire16onRequestServiceEv+0x16>
    1290:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZN7TwoWire13txBufferIndexE>
    1294:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    1298:	19 94       	eijmp
    129a:	08 95       	ret

0000129c <_ZN7TwoWire5writeEPKhj>:
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	7c 01       	movw	r14, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	8a 01       	movw	r16, r20
    12b2:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN7TwoWire12transmittingE>
    12b6:	22 23       	and	r18, r18
    12b8:	89 f0       	breq	.+34     	; 0x12dc <_ZN7TwoWire5writeEPKhj+0x40>
    12ba:	eb 01       	movw	r28, r22
    12bc:	6b 01       	movw	r12, r22
    12be:	c4 0e       	add	r12, r20
    12c0:	d5 1e       	adc	r13, r21
    12c2:	cc 15       	cp	r28, r12
    12c4:	dd 05       	cpc	r29, r13
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <_ZN7TwoWire5writeEPKhj+0x44>
    12c8:	69 91       	ld	r22, Y+
    12ca:	d7 01       	movw	r26, r14
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	01 90       	ld	r0, Z+
    12d2:	f0 81       	ld	r31, Z
    12d4:	e0 2d       	mov	r30, r0
    12d6:	c7 01       	movw	r24, r14
    12d8:	19 95       	eicall
    12da:	f3 cf       	rjmp	.-26     	; 0x12c2 <_ZN7TwoWire5writeEPKhj+0x26>
    12dc:	64 2f       	mov	r22, r20
    12de:	0c de       	rcall	.-1000   	; 0xef8 <twi_transmit>
    12e0:	c8 01       	movw	r24, r16
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	08 95       	ret

000012f4 <_ZN7TwoWire5writeEh>:
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	1f 92       	push	r1
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	69 83       	std	Y+1, r22	; 0x01
    1300:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN7TwoWire12transmittingE>
    1304:	22 23       	and	r18, r18
    1306:	d1 f0       	breq	.+52     	; 0x133c <_ZN7TwoWire5writeEh+0x48>
    1308:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    130c:	20 32       	cpi	r18, 0x20	; 32
    130e:	40 f0       	brcs	.+16     	; 0x1320 <_ZN7TwoWire5writeEh+0x2c>
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	fc 01       	movw	r30, r24
    1316:	33 83       	std	Z+3, r19	; 0x03
    1318:	22 83       	std	Z+2, r18	; 0x02
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <_ZN7TwoWire5writeEh+0x54>
    1320:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZN7TwoWire13txBufferIndexE>
    1324:	e8 2f       	mov	r30, r24
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	ee 5d       	subi	r30, 0xDE	; 222
    132a:	fa 4f       	sbci	r31, 0xFA	; 250
    132c:	99 81       	ldd	r25, Y+1	; 0x01
    132e:	90 83       	st	Z, r25
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZN7TwoWire13txBufferIndexE>
    1336:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <_ZN7TwoWire5writeEh+0x50>
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	ce 01       	movw	r24, r28
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	da dd       	rcall	.-1100   	; 0xef8 <twi_transmit>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <_ZN7TwoWireC1Ev>:
    1350:	fc 01       	movw	r30, r24
    1352:	13 82       	std	Z+3, r1	; 0x03
    1354:	12 82       	std	Z+2, r1	; 0x02
    1356:	88 ee       	ldi	r24, 0xE8	; 232
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	84 83       	std	Z+4, r24	; 0x04
    1360:	95 83       	std	Z+5, r25	; 0x05
    1362:	a6 83       	std	Z+6, r26	; 0x06
    1364:	b7 83       	std	Z+7, r27	; 0x07
    1366:	8d e3       	ldi	r24, 0x3D	; 61
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	08 95       	ret

00001370 <_ZN7TwoWire5beginEv>:
    1370:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    1374:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    1378:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZN7TwoWire13txBufferIndexE>
    137c:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    1380:	ff dc       	rcall	.-1538   	; 0xd80 <twi_init>
    1382:	82 e4       	ldi	r24, 0x42	; 66
    1384:	99 e0       	ldi	r25, 0x09	; 9
    1386:	e5 dd       	rcall	.-1078   	; 0xf52 <twi_attachSlaveTxEvent>
    1388:	88 e1       	ldi	r24, 0x18	; 24
    138a:	99 e0       	ldi	r25, 0x09	; 9
    138c:	dd cd       	rjmp	.-1094   	; 0xf48 <twi_attachSlaveRxEvent>

0000138e <_ZN7TwoWire17beginTransmissionEh>:
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <_ZN7TwoWire12transmittingE>
    1394:	60 93 42 05 	sts	0x0542, r22	; 0x800542 <_ZN7TwoWire9txAddressE>
    1398:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZN7TwoWire13txBufferIndexE>
    139c:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    13a0:	08 95       	ret

000013a2 <_ZN7TwoWire17beginTransmissionEi>:
    13a2:	f5 cf       	rjmp	.-22     	; 0x138e <_ZN7TwoWire17beginTransmissionEh>

000013a4 <_ZN7TwoWire15endTransmissionEh>:
    13a4:	0f 93       	push	r16
    13a6:	06 2f       	mov	r16, r22
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    13ae:	62 e2       	ldi	r22, 0x22	; 34
    13b0:	75 e0       	ldi	r23, 0x05	; 5
    13b2:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <_ZN7TwoWire9txAddressE>
    13b6:	4a dd       	rcall	.-1388   	; 0xe4c <twi_writeTo>
    13b8:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZN7TwoWire13txBufferIndexE>
    13bc:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZN7TwoWire14txBufferLengthE>
    13c0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire12transmittingE>
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <_ZN7TwoWire11requestFromEhhmhh>:
    13c8:	4f 92       	push	r4
    13ca:	5f 92       	push	r5
    13cc:	6f 92       	push	r6
    13ce:	7f 92       	push	r7
    13d0:	af 92       	push	r10
    13d2:	bf 92       	push	r11
    13d4:	cf 92       	push	r12
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	5c 01       	movw	r10, r24
    13e4:	f6 2e       	mov	r15, r22
    13e6:	d4 2f       	mov	r29, r20
    13e8:	28 01       	movw	r4, r16
    13ea:	39 01       	movw	r6, r18
    13ec:	ee 20       	and	r14, r14
    13ee:	11 f1       	breq	.+68     	; 0x1434 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    13f0:	ce df       	rcall	.-100    	; 0x138e <_ZN7TwoWire17beginTransmissionEh>
    13f2:	ce 2d       	mov	r28, r14
    13f4:	c4 30       	cpi	r28, 0x04	; 4
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <_ZN7TwoWire11requestFromEhhmhh+0x32>
    13f8:	c3 e0       	ldi	r28, 0x03	; 3
    13fa:	c1 50       	subi	r28, 0x01	; 1
    13fc:	c0 f0       	brcs	.+48     	; 0x142e <_ZN7TwoWire11requestFromEhhmhh+0x66>
    13fe:	28 e0       	ldi	r18, 0x08	; 8
    1400:	c2 9f       	mul	r28, r18
    1402:	c0 01       	movw	r24, r0
    1404:	11 24       	eor	r1, r1
    1406:	a3 01       	movw	r20, r6
    1408:	92 01       	movw	r18, r4
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    140c:	56 95       	lsr	r21
    140e:	47 95       	ror	r20
    1410:	37 95       	ror	r19
    1412:	27 95       	ror	r18
    1414:	8a 95       	dec	r24
    1416:	d2 f7       	brpl	.-12     	; 0x140c <_ZN7TwoWire11requestFromEhhmhh+0x44>
    1418:	ca 01       	movw	r24, r20
    141a:	b9 01       	movw	r22, r18
    141c:	d5 01       	movw	r26, r10
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	01 90       	ld	r0, Z+
    1424:	f0 81       	ld	r31, Z
    1426:	e0 2d       	mov	r30, r0
    1428:	c5 01       	movw	r24, r10
    142a:	19 95       	eicall
    142c:	e6 cf       	rjmp	.-52     	; 0x13fa <_ZN7TwoWire11requestFromEhhmhh+0x32>
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	c5 01       	movw	r24, r10
    1432:	b8 df       	rcall	.-144    	; 0x13a4 <_ZN7TwoWire15endTransmissionEh>
    1434:	4d 2f       	mov	r20, r29
    1436:	d1 32       	cpi	r29, 0x21	; 33
    1438:	08 f0       	brcs	.+2      	; 0x143c <_ZN7TwoWire11requestFromEhhmhh+0x74>
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	2c 2d       	mov	r18, r12
    143e:	65 e4       	ldi	r22, 0x45	; 69
    1440:	75 e0       	ldi	r23, 0x05	; 5
    1442:	8f 2d       	mov	r24, r15
    1444:	bb dc       	rcall	.-1674   	; 0xdbc <twi_readFrom>
    1446:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <_ZN7TwoWire13rxBufferIndexE>
    144a:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <_ZN7TwoWire14rxBufferLengthE>
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	5f 90       	pop	r5
    1466:	4f 90       	pop	r4
    1468:	08 95       	ret

0000146a <_ZN7TwoWire11requestFromEhhh>:
    146a:	cf 92       	push	r12
    146c:	ef 92       	push	r14
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	c2 2e       	mov	r12, r18
    1474:	e1 2c       	mov	r14, r1
    1476:	00 e0       	ldi	r16, 0x00	; 0
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	98 01       	movw	r18, r16
    147c:	a5 df       	rcall	.-182    	; 0x13c8 <_ZN7TwoWire11requestFromEhhmhh>
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ef 90       	pop	r14
    1484:	cf 90       	pop	r12
    1486:	08 95       	ret

00001488 <_ZN7TwoWire11requestFromEhh>:
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	ef cf       	rjmp	.-34     	; 0x146a <_ZN7TwoWire11requestFromEhhh>

0000148c <_ZN7TwoWire15endTransmissionEv>:
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	8a cf       	rjmp	.-236    	; 0x13a4 <_ZN7TwoWire15endTransmissionEh>

00001490 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1490:	8f e0       	ldi	r24, 0x0F	; 15
    1492:	95 e0       	ldi	r25, 0x05	; 5
    1494:	5d cf       	rjmp	.-326    	; 0x1350 <_ZN7TwoWireC1Ev>

00001496 <_ZN20TempHumidPressSensorC1Ev>:
	sensordata.h = humidity;
	sensordata.p = pressure;
	sensordata.a = altitude;
	
	return sensordata;
    1496:	08 95       	ret

00001498 <_ZN20TempHumidPressSensorD1Ev>:
    1498:	08 95       	ret

0000149a <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>:
    149a:	85 e6       	ldi	r24, 0x65	; 101
    149c:	95 e0       	ldi	r25, 0x05	; 5
    149e:	bb da       	rcall	.-2698   	; 0xa16 <_ZN15Adafruit_BME2805beginEv>
    14a0:	81 11       	cpse	r24, r1
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x16>
    14a4:	6b e4       	ldi	r22, 0x4B	; 75
    14a6:	73 e0       	ldi	r23, 0x03	; 3
    14a8:	88 e9       	ldi	r24, 0x98	; 152
    14aa:	95 e0       	ldi	r25, 0x05	; 5
    14ac:	5a d2       	rcall	.+1204   	; 0x1962 <_ZN5Print7printlnEPKc>
    14ae:	ff cf       	rjmp	.-2      	; 0x14ae <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x14>
    14b0:	66 ea       	ldi	r22, 0xA6	; 166
    14b2:	73 e0       	ldi	r23, 0x03	; 3
    14b4:	88 e9       	ldi	r24, 0x98	; 152
    14b6:	95 e0       	ldi	r25, 0x05	; 5
    14b8:	54 c2       	rjmp	.+1192   	; 0x1962 <_ZN5Print7printlnEPKc>

000014ba <_GLOBAL__sub_I_bme280>:
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;
    14ba:	85 e6       	ldi	r24, 0x65	; 101
    14bc:	95 e0       	ldi	r25, 0x05	; 5
    14be:	2a c8       	rjmp	.-4012   	; 0x514 <_ZN15Adafruit_BME280C1Ev>

000014c0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    14c0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    14c2:	91 8d       	ldd	r25, Z+25	; 0x19
    14c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    14c6:	89 2f       	mov	r24, r25
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	80 5c       	subi	r24, 0xC0	; 192
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	82 1b       	sub	r24, r18
    14d0:	91 09       	sbc	r25, r1
}
    14d2:	8f 73       	andi	r24, 0x3F	; 63
    14d4:	99 27       	eor	r25, r25
    14d6:	08 95       	ret

000014d8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    14d8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    14da:	91 8d       	ldd	r25, Z+25	; 0x19
    14dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    14de:	98 17       	cp	r25, r24
    14e0:	31 f0       	breq	.+12     	; 0x14ee <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    14e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    14e4:	e8 0f       	add	r30, r24
    14e6:	f1 1d       	adc	r31, r1
    14e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    14f2:	08 95       	ret

000014f4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    14f4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    14f6:	91 8d       	ldd	r25, Z+25	; 0x19
    14f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    14fa:	98 17       	cp	r25, r24
    14fc:	61 f0       	breq	.+24     	; 0x1516 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    14fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1500:	df 01       	movw	r26, r30
    1502:	a8 0f       	add	r26, r24
    1504:	b1 1d       	adc	r27, r1
    1506:	5d 96       	adiw	r26, 0x1d	; 29
    1508:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    150a:	92 8d       	ldd	r25, Z+26	; 0x1a
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	9f 73       	andi	r25, 0x3F	; 63
    1510:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    151a:	08 95       	ret

0000151c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    151c:	fc 01       	movw	r30, r24
    151e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1520:	44 8d       	ldd	r20, Z+28	; 0x1c
    1522:	25 2f       	mov	r18, r21
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	84 2f       	mov	r24, r20
    1528:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    152a:	82 1b       	sub	r24, r18
    152c:	93 0b       	sbc	r25, r19
    152e:	54 17       	cp	r21, r20
    1530:	10 f0       	brcs	.+4      	; 0x1536 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1532:	cf 96       	adiw	r24, 0x3f	; 63
    1534:	08 95       	ret
  return tail - head - 1;
    1536:	01 97       	sbiw	r24, 0x01	; 1
}
    1538:	08 95       	ret

0000153a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    153a:	8c e2       	ldi	r24, 0x2C	; 44
    153c:	9c e0       	ldi	r25, 0x0C	; 12
    153e:	89 2b       	or	r24, r25
    1540:	39 f0       	breq	.+14     	; 0x1550 <_Z14serialEventRunv+0x16>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	89 2b       	or	r24, r25
    1548:	19 f0       	breq	.+6      	; 0x1550 <_Z14serialEventRunv+0x16>
    154a:	86 d1       	rcall	.+780    	; 0x1858 <_Z17Serial0_availablev>
    154c:	81 11       	cpse	r24, r1
    154e:	25 c0       	rjmp	.+74     	; 0x159a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	89 2b       	or	r24, r25
    1556:	41 f0       	breq	.+16     	; 0x1568 <_Z14serialEventRunv+0x2e>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	89 2b       	or	r24, r25
    155e:	21 f0       	breq	.+8      	; 0x1568 <_Z14serialEventRunv+0x2e>
    1560:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1564:	81 11       	cpse	r24, r1
    1566:	1c c0       	rjmp	.+56     	; 0x15a0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	89 2b       	or	r24, r25
    156e:	41 f0       	breq	.+16     	; 0x1580 <_Z14serialEventRunv+0x46>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	89 2b       	or	r24, r25
    1576:	21 f0       	breq	.+8      	; 0x1580 <_Z14serialEventRunv+0x46>
    1578:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    157c:	81 11       	cpse	r24, r1
    157e:	13 c0       	rjmp	.+38     	; 0x15a6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	89 2b       	or	r24, r25
    1586:	a1 f0       	breq	.+40     	; 0x15b0 <_Z14serialEventRunv+0x76>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	89 2b       	or	r24, r25
    158e:	81 f0       	breq	.+32     	; 0x15b0 <_Z14serialEventRunv+0x76>
    1590:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1594:	81 11       	cpse	r24, r1
    1596:	0a c0       	rjmp	.+20     	; 0x15ac <_Z14serialEventRunv+0x72>
    1598:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    159a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    159e:	d8 cf       	rjmp	.-80     	; 0x1550 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    15a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15a4:	e1 cf       	rjmp	.-62     	; 0x1568 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    15a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15aa:	ea cf       	rjmp	.-44     	; 0x1580 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    15ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    15b0:	08 95       	ret

000015b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    15b2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    15b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    15b6:	df 01       	movw	r26, r30
    15b8:	a8 0f       	add	r26, r24
    15ba:	b1 1d       	adc	r27, r1
    15bc:	a3 5a       	subi	r26, 0xA3	; 163
    15be:	bf 4f       	sbci	r27, 0xFF	; 255
    15c0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    15c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	8f 73       	andi	r24, 0x3F	; 63
    15ca:	99 27       	eor	r25, r25
    15cc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    15ce:	a6 89       	ldd	r26, Z+22	; 0x16
    15d0:	b7 89       	ldd	r27, Z+23	; 0x17
    15d2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    15d4:	a0 89       	ldd	r26, Z+16	; 0x10
    15d6:	b1 89       	ldd	r27, Z+17	; 0x11
    15d8:	8c 91       	ld	r24, X
    15da:	83 70       	andi	r24, 0x03	; 3
    15dc:	80 64       	ori	r24, 0x40	; 64
    15de:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    15e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    15e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    15e4:	98 13       	cpse	r25, r24
    15e6:	06 c0       	rjmp	.+12     	; 0x15f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    15e8:	02 88       	ldd	r0, Z+18	; 0x12
    15ea:	f3 89       	ldd	r31, Z+19	; 0x13
    15ec:	e0 2d       	mov	r30, r0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 7d       	andi	r24, 0xDF	; 223
    15f2:	80 83       	st	Z, r24
    15f4:	08 95       	ret

000015f6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
  _written = true;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1608:	9b 8d       	ldd	r25, Y+27	; 0x1b
    160a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    160c:	98 13       	cpse	r25, r24
    160e:	05 c0       	rjmp	.+10     	; 0x161a <_ZN14HardwareSerial5writeEh+0x24>
    1610:	e8 89       	ldd	r30, Y+16	; 0x10
    1612:	f9 89       	ldd	r31, Y+17	; 0x11
    1614:	80 81       	ld	r24, Z
    1616:	85 fd       	sbrc	r24, 5
    1618:	25 c0       	rjmp	.+74     	; 0x1664 <_ZN14HardwareSerial5writeEh+0x6e>
    161a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    161c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	0f 5f       	subi	r16, 0xFF	; 255
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	0f 73       	andi	r16, 0x3F	; 63
    1626:	11 27       	eor	r17, r17
    1628:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    162a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    162c:	e8 12       	cpse	r14, r24
    162e:	0b c0       	rjmp	.+22     	; 0x1646 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	07 fc       	sbrc	r0, 7
    1634:	fa cf       	rjmp	.-12     	; 0x162a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1636:	e8 89       	ldd	r30, Y+16	; 0x10
    1638:	f9 89       	ldd	r31, Y+17	; 0x11
    163a:	80 81       	ld	r24, Z
    163c:	85 ff       	sbrs	r24, 5
    163e:	f5 cf       	rjmp	.-22     	; 0x162a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1640:	ce 01       	movw	r24, r28
    1642:	b7 df       	rcall	.-146    	; 0x15b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1644:	f2 cf       	rjmp	.-28     	; 0x162a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1646:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1648:	fe 01       	movw	r30, r28
    164a:	e8 0f       	add	r30, r24
    164c:	f1 1d       	adc	r31, r1
    164e:	e3 5a       	subi	r30, 0xA3	; 163
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1654:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1656:	f8 94       	cli
    _tx_buffer_head = i;
    1658:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    165a:	ea 89       	ldd	r30, Y+18	; 0x12
    165c:	fb 89       	ldd	r31, Y+19	; 0x13
    165e:	80 81       	ld	r24, Z
    1660:	80 62       	ori	r24, 0x20	; 32
    1662:	0a c0       	rjmp	.+20     	; 0x1678 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1664:	9f b7       	in	r25, 0x3f	; 63
    1666:	f8 94       	cli
      *_udr = c;
    1668:	ee 89       	ldd	r30, Y+22	; 0x16
    166a:	ff 89       	ldd	r31, Y+23	; 0x17
    166c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    166e:	e8 89       	ldd	r30, Y+16	; 0x10
    1670:	f9 89       	ldd	r31, Y+17	; 0x11
    1672:	80 81       	ld	r24, Z
    1674:	83 70       	andi	r24, 0x03	; 3
    1676:	80 64       	ori	r24, 0x40	; 64
    1678:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    167a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	08 95       	ret

0000168e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1694:	88 8d       	ldd	r24, Y+24	; 0x18
    1696:	88 23       	and	r24, r24
    1698:	c1 f0       	breq	.+48     	; 0x16ca <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    169a:	ea 89       	ldd	r30, Y+18	; 0x12
    169c:	fb 89       	ldd	r31, Y+19	; 0x13
    169e:	80 81       	ld	r24, Z
    16a0:	85 fd       	sbrc	r24, 5
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <_ZN14HardwareSerial5flushEv+0x20>
    16a4:	a8 89       	ldd	r26, Y+16	; 0x10
    16a6:	b9 89       	ldd	r27, Y+17	; 0x11
    16a8:	8c 91       	ld	r24, X
    16aa:	86 fd       	sbrc	r24, 6
    16ac:	0e c0       	rjmp	.+28     	; 0x16ca <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	07 fc       	sbrc	r0, 7
    16b2:	f5 cf       	rjmp	.-22     	; 0x169e <_ZN14HardwareSerial5flushEv+0x10>
    16b4:	80 81       	ld	r24, Z
    16b6:	85 ff       	sbrs	r24, 5
    16b8:	f2 cf       	rjmp	.-28     	; 0x169e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    16ba:	a8 89       	ldd	r26, Y+16	; 0x10
    16bc:	b9 89       	ldd	r27, Y+17	; 0x11
    16be:	8c 91       	ld	r24, X
    16c0:	85 ff       	sbrs	r24, 5
    16c2:	ed cf       	rjmp	.-38     	; 0x169e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    16c4:	ce 01       	movw	r24, r28
    16c6:	75 df       	rcall	.-278    	; 0x15b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    16c8:	e8 cf       	rjmp	.-48     	; 0x169a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	08 95       	ret

000016d0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
    16e0:	6a 01       	movw	r12, r20
    16e2:	7b 01       	movw	r14, r22
    16e4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    16e6:	e8 89       	ldd	r30, Y+16	; 0x10
    16e8:	f9 89       	ldd	r31, Y+17	; 0x11
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    16ee:	41 15       	cp	r20, r1
    16f0:	51 4e       	sbci	r21, 0xE1	; 225
    16f2:	61 05       	cpc	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	b1 f0       	breq	.+44     	; 0x1724 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	79 e0       	ldi	r23, 0x09	; 9
    16fc:	8d e3       	ldi	r24, 0x3D	; 61
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a7 01       	movw	r20, r14
    1702:	96 01       	movw	r18, r12
    1704:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__udivmodsi4>
    1708:	da 01       	movw	r26, r20
    170a:	c9 01       	movw	r24, r18
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	a1 09       	sbc	r26, r1
    1710:	b1 09       	sbc	r27, r1
    1712:	b6 95       	lsr	r27
    1714:	a7 95       	ror	r26
    1716:	97 95       	ror	r25
    1718:	87 95       	ror	r24
    171a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    171c:	21 15       	cp	r18, r1
    171e:	80 e1       	ldi	r24, 0x10	; 16
    1720:	38 07       	cpc	r19, r24
    1722:	a8 f0       	brcs	.+42     	; 0x174e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1724:	e8 89       	ldd	r30, Y+16	; 0x10
    1726:	f9 89       	ldd	r31, Y+17	; 0x11
    1728:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    172a:	60 e8       	ldi	r22, 0x80	; 128
    172c:	74 e8       	ldi	r23, 0x84	; 132
    172e:	8e e1       	ldi	r24, 0x1E	; 30
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a7 01       	movw	r20, r14
    1734:	96 01       	movw	r18, r12
    1736:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__udivmodsi4>
    173a:	da 01       	movw	r26, r20
    173c:	c9 01       	movw	r24, r18
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	a1 09       	sbc	r26, r1
    1742:	b1 09       	sbc	r27, r1
    1744:	b6 95       	lsr	r27
    1746:	a7 95       	ror	r26
    1748:	97 95       	ror	r25
    174a:	87 95       	ror	r24
    174c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    174e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1750:	fd 85       	ldd	r31, Y+13	; 0x0d
    1752:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1754:	ee 85       	ldd	r30, Y+14	; 0x0e
    1756:	ff 85       	ldd	r31, Y+15	; 0x0f
    1758:	20 83       	st	Z, r18

  _written = false;
    175a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    175c:	ec 89       	ldd	r30, Y+20	; 0x14
    175e:	fd 89       	ldd	r31, Y+21	; 0x15
    1760:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1762:	ea 89       	ldd	r30, Y+18	; 0x12
    1764:	fb 89       	ldd	r31, Y+19	; 0x13
    1766:	80 81       	ld	r24, Z
    1768:	80 61       	ori	r24, 0x10	; 16
    176a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    176c:	ea 89       	ldd	r30, Y+18	; 0x12
    176e:	fb 89       	ldd	r31, Y+19	; 0x13
    1770:	80 81       	ld	r24, Z
    1772:	88 60       	ori	r24, 0x08	; 8
    1774:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1776:	ea 89       	ldd	r30, Y+18	; 0x12
    1778:	fb 89       	ldd	r31, Y+19	; 0x13
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1780:	ea 89       	ldd	r30, Y+18	; 0x12
    1782:	fb 89       	ldd	r31, Y+19	; 0x13
    1784:	80 81       	ld	r24, Z
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	80 83       	st	Z, r24
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	08 95       	ret

0000179a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	0b b6       	in	r0, 0x3b	; 59
    17a6:	0f 92       	push	r0
    17a8:	2f 93       	push	r18
    17aa:	8f 93       	push	r24
    17ac:	9f 93       	push	r25
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    17b2:	e0 91 a8 05 	lds	r30, 0x05A8	; 0x8005a8 <Serial+0x10>
    17b6:	f0 91 a9 05 	lds	r31, 0x05A9	; 0x8005a9 <Serial+0x11>
    17ba:	80 81       	ld	r24, Z
    17bc:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <Serial+0x16>
    17c0:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <Serial+0x17>
    17c4:	82 fd       	sbrc	r24, 2
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    17c8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    17ca:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <Serial+0x19>
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    17d2:	20 91 b2 05 	lds	r18, 0x05B2	; 0x8005b2 <Serial+0x1a>
    17d6:	82 17       	cp	r24, r18
    17d8:	51 f0       	breq	.+20     	; 0x17ee <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    17da:	e0 91 b1 05 	lds	r30, 0x05B1	; 0x8005b1 <Serial+0x19>
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	e8 56       	subi	r30, 0x68	; 104
    17e2:	fa 4f       	sbci	r31, 0xFA	; 250
    17e4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    17e6:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <Serial+0x19>
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    17ec:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	2f 91       	pop	r18
    17f8:	0f 90       	pop	r0
    17fa:	0b be       	out	0x3b, r0	; 59
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	0b b6       	in	r0, 0x3b	; 59
    1812:	0f 92       	push	r0
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    182c:	88 e9       	ldi	r24, 0x98	; 152
    182e:	95 e0       	ldi	r25, 0x05	; 5
    1830:	c0 de       	rcall	.-640    	; 0x15b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0b be       	out	0x3b, r0	; 59
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	0f 90       	pop	r0
    1854:	1f 90       	pop	r1
    1856:	18 95       	reti

00001858 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1858:	88 e9       	ldi	r24, 0x98	; 152
    185a:	95 e0       	ldi	r25, 0x05	; 5
    185c:	31 de       	rcall	.-926    	; 0x14c0 <_ZN14HardwareSerial9availableEv>
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	89 2b       	or	r24, r25
    1862:	09 f4       	brne	.+2      	; 0x1866 <_Z17Serial0_availablev+0xe>
    1864:	20 e0       	ldi	r18, 0x00	; 0
}
    1866:	82 2f       	mov	r24, r18
    1868:	08 95       	ret

0000186a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    186a:	e8 e9       	ldi	r30, 0x98	; 152
    186c:	f5 e0       	ldi	r31, 0x05	; 5
    186e:	13 82       	std	Z+3, r1	; 0x03
    1870:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1872:	88 ee       	ldi	r24, 0xE8	; 232
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	84 83       	std	Z+4, r24	; 0x04
    187c:	95 83       	std	Z+5, r25	; 0x05
    187e:	a6 83       	std	Z+6, r26	; 0x06
    1880:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1882:	8b ec       	ldi	r24, 0xCB	; 203
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	85 ec       	ldi	r24, 0xC5	; 197
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	95 87       	std	Z+13, r25	; 0x0d
    1890:	84 87       	std	Z+12, r24	; 0x0c
    1892:	84 ec       	ldi	r24, 0xC4	; 196
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	97 87       	std	Z+15, r25	; 0x0f
    1898:	86 87       	std	Z+14, r24	; 0x0e
    189a:	80 ec       	ldi	r24, 0xC0	; 192
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	91 8b       	std	Z+17, r25	; 0x11
    18a0:	80 8b       	std	Z+16, r24	; 0x10
    18a2:	81 ec       	ldi	r24, 0xC1	; 193
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	93 8b       	std	Z+19, r25	; 0x13
    18a8:	82 8b       	std	Z+18, r24	; 0x12
    18aa:	82 ec       	ldi	r24, 0xC2	; 194
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	95 8b       	std	Z+21, r25	; 0x15
    18b0:	84 8b       	std	Z+20, r24	; 0x14
    18b2:	86 ec       	ldi	r24, 0xC6	; 198
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	97 8b       	std	Z+23, r25	; 0x17
    18b8:	86 8b       	std	Z+22, r24	; 0x16
    18ba:	11 8e       	std	Z+25, r1	; 0x19
    18bc:	12 8e       	std	Z+26, r1	; 0x1a
    18be:	13 8e       	std	Z+27, r1	; 0x1b
    18c0:	14 8e       	std	Z+28, r1	; 0x1c
    18c2:	08 95       	ret

000018c4 <initVariant>:
    18c4:	08 95       	ret

000018c6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    18c6:	df d2       	rcall	.+1470   	; 0x1e86 <init>

	initVariant();
    18c8:	fd df       	rcall	.-6      	; 0x18c4 <initVariant>
    18ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    18ce:	cd e9       	ldi	r28, 0x9D	; 157
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    18d0:	da e0       	ldi	r29, 0x0A	; 10
    18d2:	0e 94 8a 01 	call	0x314	; 0x314 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    18d6:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    18d8:	e1 f3       	breq	.-8      	; 0x18d2 <main+0xc>
    18da:	2f de       	rcall	.-930    	; 0x153a <_Z14serialEventRunv>
    18dc:	fa cf       	rjmp	.-12     	; 0x18d2 <main+0xc>

000018de <_ZN5Print5writeEPKhj>:
    18de:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	6c 01       	movw	r12, r24
    18f0:	7a 01       	movw	r14, r20
    18f2:	8b 01       	movw	r16, r22
    18f4:	c0 e0       	ldi	r28, 0x00	; 0
    18f6:	d0 e0       	ldi	r29, 0x00	; 0
    18f8:	ce 15       	cp	r28, r14
    18fa:	df 05       	cpc	r29, r15
    18fc:	81 f0       	breq	.+32     	; 0x191e <_ZN5Print5writeEPKhj+0x40>
    18fe:	d8 01       	movw	r26, r16
    1900:	6d 91       	ld	r22, X+
    1902:	8d 01       	movw	r16, r26
    1904:	d6 01       	movw	r26, r12
    1906:	ed 91       	ld	r30, X+
    1908:	fc 91       	ld	r31, X
    190a:	01 90       	ld	r0, Z+
    190c:	f0 81       	ld	r31, Z
    190e:	e0 2d       	mov	r30, r0
    1910:	c6 01       	movw	r24, r12
    1912:	19 95       	eicall
    1914:	89 2b       	or	r24, r25
    1916:	11 f0       	breq	.+4      	; 0x191c <_ZN5Print5writeEPKhj+0x3e>
    1918:	21 96       	adiw	r28, 0x01	; 1
    191a:	ee cf       	rjmp	.-36     	; 0x18f8 <_ZN5Print5writeEPKhj+0x1a>
    191c:	7e 01       	movw	r14, r28
    191e:	c7 01       	movw	r24, r14
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	08 95       	ret

00001932 <_ZN5Print5writeEPKc>:
    1932:	61 15       	cp	r22, r1
    1934:	71 05       	cpc	r23, r1
    1936:	79 f0       	breq	.+30     	; 0x1956 <_ZN5Print5writeEPKc+0x24>
    1938:	fb 01       	movw	r30, r22
    193a:	01 90       	ld	r0, Z+
    193c:	00 20       	and	r0, r0
    193e:	e9 f7       	brne	.-6      	; 0x193a <_ZN5Print5writeEPKc+0x8>
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	af 01       	movw	r20, r30
    1944:	46 1b       	sub	r20, r22
    1946:	57 0b       	sbc	r21, r23
    1948:	dc 01       	movw	r26, r24
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	02 80       	ldd	r0, Z+2	; 0x02
    1950:	f3 81       	ldd	r31, Z+3	; 0x03
    1952:	e0 2d       	mov	r30, r0
    1954:	19 94       	eijmp
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	08 95       	ret

0000195c <_ZN5Print7printlnEv>:
    195c:	69 ed       	ldi	r22, 0xD9	; 217
    195e:	73 e0       	ldi	r23, 0x03	; 3
    1960:	e8 cf       	rjmp	.-48     	; 0x1932 <_ZN5Print5writeEPKc>

00001962 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    196c:	e2 df       	rcall	.-60     	; 0x1932 <_ZN5Print5writeEPKc>
    196e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1970:	ce 01       	movw	r24, r28
    1972:	f4 df       	rcall	.-24     	; 0x195c <_ZN5Print7printlnEv>
  return n;
}
    1974:	80 0f       	add	r24, r16
    1976:	91 1f       	adc	r25, r17
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret

00001982 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1982:	08 95       	ret

00001984 <attachInterrupt>:
    1984:	88 30       	cpi	r24, 0x08	; 8
    1986:	08 f0       	brcs	.+2      	; 0x198a <attachInterrupt+0x6>
    1988:	70 c0       	rjmp	.+224    	; 0x1a6a <attachInterrupt+0xe6>
    198a:	a8 2f       	mov	r26, r24
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	aa 0f       	add	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	aa 5f       	subi	r26, 0xFA	; 250
    1994:	bd 4f       	sbci	r27, 0xFD	; 253
    1996:	11 96       	adiw	r26, 0x01	; 1
    1998:	7c 93       	st	X, r23
    199a:	6e 93       	st	-X, r22
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	fc 01       	movw	r30, r24
    19a0:	31 97       	sbiw	r30, 0x01	; 1
    19a2:	e7 30       	cpi	r30, 0x07	; 7
    19a4:	f1 05       	cpc	r31, r1
    19a6:	a0 f5       	brcc	.+104    	; 0x1a10 <attachInterrupt+0x8c>
    19a8:	88 27       	eor	r24, r24
    19aa:	eb 57       	subi	r30, 0x7B	; 123
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__tablejump2__>
    19b4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19b8:	8c 7f       	andi	r24, 0xFC	; 252
    19ba:	48 2b       	or	r20, r24
    19bc:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19c0:	e8 9a       	sbi	0x1d, 0	; 29
    19c2:	08 95       	ret
    19c4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19c8:	83 7f       	andi	r24, 0xF3	; 243
    19ca:	44 0f       	add	r20, r20
    19cc:	55 1f       	adc	r21, r21
    19ce:	44 0f       	add	r20, r20
    19d0:	55 1f       	adc	r21, r21
    19d2:	48 2b       	or	r20, r24
    19d4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19d8:	e9 9a       	sbi	0x1d, 1	; 29
    19da:	08 95       	ret
    19dc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19e0:	8f 7c       	andi	r24, 0xCF	; 207
    19e2:	74 e0       	ldi	r23, 0x04	; 4
    19e4:	44 0f       	add	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	7a 95       	dec	r23
    19ea:	e1 f7       	brne	.-8      	; 0x19e4 <attachInterrupt+0x60>
    19ec:	48 2b       	or	r20, r24
    19ee:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19f2:	ea 9a       	sbi	0x1d, 2	; 29
    19f4:	08 95       	ret
    19f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    19fa:	8f 73       	andi	r24, 0x3F	; 63
    19fc:	66 e0       	ldi	r22, 0x06	; 6
    19fe:	44 0f       	add	r20, r20
    1a00:	55 1f       	adc	r21, r21
    1a02:	6a 95       	dec	r22
    1a04:	e1 f7       	brne	.-8      	; 0x19fe <attachInterrupt+0x7a>
    1a06:	48 2b       	or	r20, r24
    1a08:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1a0c:	eb 9a       	sbi	0x1d, 3	; 29
    1a0e:	08 95       	ret
    1a10:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a14:	8c 7f       	andi	r24, 0xFC	; 252
    1a16:	48 2b       	or	r20, r24
    1a18:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a1c:	ec 9a       	sbi	0x1d, 4	; 29
    1a1e:	08 95       	ret
    1a20:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a24:	83 7f       	andi	r24, 0xF3	; 243
    1a26:	44 0f       	add	r20, r20
    1a28:	55 1f       	adc	r21, r21
    1a2a:	44 0f       	add	r20, r20
    1a2c:	55 1f       	adc	r21, r21
    1a2e:	48 2b       	or	r20, r24
    1a30:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a34:	ed 9a       	sbi	0x1d, 5	; 29
    1a36:	08 95       	ret
    1a38:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a3c:	8f 7c       	andi	r24, 0xCF	; 207
    1a3e:	24 e0       	ldi	r18, 0x04	; 4
    1a40:	44 0f       	add	r20, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	2a 95       	dec	r18
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <attachInterrupt+0xbc>
    1a48:	48 2b       	or	r20, r24
    1a4a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a4e:	ee 9a       	sbi	0x1d, 6	; 29
    1a50:	08 95       	ret
    1a52:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a56:	8f 73       	andi	r24, 0x3F	; 63
    1a58:	96 e0       	ldi	r25, 0x06	; 6
    1a5a:	44 0f       	add	r20, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	9a 95       	dec	r25
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <attachInterrupt+0xd6>
    1a62:	48 2b       	or	r20, r24
    1a64:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1a68:	ef 9a       	sbi	0x1d, 7	; 29
    1a6a:	08 95       	ret

00001a6c <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    1a6c:	1f 92       	push	r1
    1a6e:	0f 92       	push	r0
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	0f 92       	push	r0
    1a74:	11 24       	eor	r1, r1
    1a76:	0b b6       	in	r0, 0x3b	; 59
    1a78:	0f 92       	push	r0
    1a7a:	2f 93       	push	r18
    1a7c:	3f 93       	push	r19
    1a7e:	4f 93       	push	r20
    1a80:	5f 93       	push	r21
    1a82:	6f 93       	push	r22
    1a84:	7f 93       	push	r23
    1a86:	8f 93       	push	r24
    1a88:	9f 93       	push	r25
    1a8a:	af 93       	push	r26
    1a8c:	bf 93       	push	r27
    1a8e:	ef 93       	push	r30
    1a90:	ff 93       	push	r31
    1a92:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    1a96:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    1a9a:	19 95       	eicall
    1a9c:	ff 91       	pop	r31
    1a9e:	ef 91       	pop	r30
    1aa0:	bf 91       	pop	r27
    1aa2:	af 91       	pop	r26
    1aa4:	9f 91       	pop	r25
    1aa6:	8f 91       	pop	r24
    1aa8:	7f 91       	pop	r23
    1aaa:	6f 91       	pop	r22
    1aac:	5f 91       	pop	r21
    1aae:	4f 91       	pop	r20
    1ab0:	3f 91       	pop	r19
    1ab2:	2f 91       	pop	r18
    1ab4:	0f 90       	pop	r0
    1ab6:	0b be       	out	0x3b, r0	; 59
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	0b b6       	in	r0, 0x3b	; 59
    1ace:	0f 92       	push	r0
    1ad0:	2f 93       	push	r18
    1ad2:	3f 93       	push	r19
    1ad4:	4f 93       	push	r20
    1ad6:	5f 93       	push	r21
    1ad8:	6f 93       	push	r22
    1ada:	7f 93       	push	r23
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    1aec:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    1af0:	19 95       	eicall
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0b be       	out	0x3b, r0	; 59
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	0b b6       	in	r0, 0x3b	; 59
    1b24:	0f 92       	push	r0
    1b26:	2f 93       	push	r18
    1b28:	3f 93       	push	r19
    1b2a:	4f 93       	push	r20
    1b2c:	5f 93       	push	r21
    1b2e:	6f 93       	push	r22
    1b30:	7f 93       	push	r23
    1b32:	8f 93       	push	r24
    1b34:	9f 93       	push	r25
    1b36:	af 93       	push	r26
    1b38:	bf 93       	push	r27
    1b3a:	ef 93       	push	r30
    1b3c:	ff 93       	push	r31
    1b3e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    1b42:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    1b46:	19 95       	eicall
    1b48:	ff 91       	pop	r31
    1b4a:	ef 91       	pop	r30
    1b4c:	bf 91       	pop	r27
    1b4e:	af 91       	pop	r26
    1b50:	9f 91       	pop	r25
    1b52:	8f 91       	pop	r24
    1b54:	7f 91       	pop	r23
    1b56:	6f 91       	pop	r22
    1b58:	5f 91       	pop	r21
    1b5a:	4f 91       	pop	r20
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0b be       	out	0x3b, r0	; 59
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	0f 90       	pop	r0
    1b6a:	1f 90       	pop	r1
    1b6c:	18 95       	reti

00001b6e <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    1b6e:	1f 92       	push	r1
    1b70:	0f 92       	push	r0
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	0f 92       	push	r0
    1b76:	11 24       	eor	r1, r1
    1b78:	0b b6       	in	r0, 0x3b	; 59
    1b7a:	0f 92       	push	r0
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    1b98:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    1b9c:	19 95       	eicall
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0b be       	out	0x3b, r0	; 59
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	0f 90       	pop	r0
    1bc0:	1f 90       	pop	r1
    1bc2:	18 95       	reti

00001bc4 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	0b b6       	in	r0, 0x3b	; 59
    1bd0:	0f 92       	push	r0
    1bd2:	2f 93       	push	r18
    1bd4:	3f 93       	push	r19
    1bd6:	4f 93       	push	r20
    1bd8:	5f 93       	push	r21
    1bda:	6f 93       	push	r22
    1bdc:	7f 93       	push	r23
    1bde:	8f 93       	push	r24
    1be0:	9f 93       	push	r25
    1be2:	af 93       	push	r26
    1be4:	bf 93       	push	r27
    1be6:	ef 93       	push	r30
    1be8:	ff 93       	push	r31
    1bea:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    1bee:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    1bf2:	19 95       	eicall
    1bf4:	ff 91       	pop	r31
    1bf6:	ef 91       	pop	r30
    1bf8:	bf 91       	pop	r27
    1bfa:	af 91       	pop	r26
    1bfc:	9f 91       	pop	r25
    1bfe:	8f 91       	pop	r24
    1c00:	7f 91       	pop	r23
    1c02:	6f 91       	pop	r22
    1c04:	5f 91       	pop	r21
    1c06:	4f 91       	pop	r20
    1c08:	3f 91       	pop	r19
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0b be       	out	0x3b, r0	; 59
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
    1c40:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    1c44:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    1c48:	19 95       	eicall
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	bf 91       	pop	r27
    1c50:	af 91       	pop	r26
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	7f 91       	pop	r23
    1c58:	6f 91       	pop	r22
    1c5a:	5f 91       	pop	r21
    1c5c:	4f 91       	pop	r20
    1c5e:	3f 91       	pop	r19
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0b be       	out	0x3b, r0	; 59
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	0b b6       	in	r0, 0x3b	; 59
    1c7c:	0f 92       	push	r0
    1c7e:	2f 93       	push	r18
    1c80:	3f 93       	push	r19
    1c82:	4f 93       	push	r20
    1c84:	5f 93       	push	r21
    1c86:	6f 93       	push	r22
    1c88:	7f 93       	push	r23
    1c8a:	8f 93       	push	r24
    1c8c:	9f 93       	push	r25
    1c8e:	af 93       	push	r26
    1c90:	bf 93       	push	r27
    1c92:	ef 93       	push	r30
    1c94:	ff 93       	push	r31
    1c96:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    1c9a:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    1c9e:	19 95       	eicall
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0b be       	out	0x3b, r0	; 59
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    1cc6:	1f 92       	push	r1
    1cc8:	0f 92       	push	r0
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	0f 92       	push	r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	0b b6       	in	r0, 0x3b	; 59
    1cd2:	0f 92       	push	r0
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    1cf0:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    1cf4:	19 95       	eicall
    1cf6:	ff 91       	pop	r31
    1cf8:	ef 91       	pop	r30
    1cfa:	bf 91       	pop	r27
    1cfc:	af 91       	pop	r26
    1cfe:	9f 91       	pop	r25
    1d00:	8f 91       	pop	r24
    1d02:	7f 91       	pop	r23
    1d04:	6f 91       	pop	r22
    1d06:	5f 91       	pop	r21
    1d08:	4f 91       	pop	r20
    1d0a:	3f 91       	pop	r19
    1d0c:	2f 91       	pop	r18
    1d0e:	0f 90       	pop	r0
    1d10:	0b be       	out	0x3b, r0	; 59
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1d1c:	1f 92       	push	r1
    1d1e:	0f 92       	push	r0
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	0f 92       	push	r0
    1d24:	11 24       	eor	r1, r1
    1d26:	2f 93       	push	r18
    1d28:	3f 93       	push	r19
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <timer0_millis>
    1d36:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <timer0_millis+0x1>
    1d3a:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <timer0_millis+0x2>
    1d3e:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <timer0_millis+0x3>
    1d42:	30 91 35 06 	lds	r19, 0x0635	; 0x800635 <timer0_fract>
    1d46:	23 e0       	ldi	r18, 0x03	; 3
    1d48:	23 0f       	add	r18, r19
    1d4a:	2d 37       	cpi	r18, 0x7D	; 125
    1d4c:	20 f4       	brcc	.+8      	; 0x1d56 <__vector_23+0x3a>
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	a1 1d       	adc	r26, r1
    1d52:	b1 1d       	adc	r27, r1
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <__vector_23+0x44>
    1d56:	26 e8       	ldi	r18, 0x86	; 134
    1d58:	23 0f       	add	r18, r19
    1d5a:	02 96       	adiw	r24, 0x02	; 2
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	b1 1d       	adc	r27, r1
    1d60:	20 93 35 06 	sts	0x0635, r18	; 0x800635 <timer0_fract>
    1d64:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <timer0_millis>
    1d68:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <timer0_millis+0x1>
    1d6c:	a0 93 38 06 	sts	0x0638, r26	; 0x800638 <timer0_millis+0x2>
    1d70:	b0 93 39 06 	sts	0x0639, r27	; 0x800639 <timer0_millis+0x3>
    1d74:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <timer0_overflow_count>
    1d78:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <timer0_overflow_count+0x1>
    1d7c:	a0 91 3c 06 	lds	r26, 0x063C	; 0x80063c <timer0_overflow_count+0x2>
    1d80:	b0 91 3d 06 	lds	r27, 0x063D	; 0x80063d <timer0_overflow_count+0x3>
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	a1 1d       	adc	r26, r1
    1d88:	b1 1d       	adc	r27, r1
    1d8a:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <timer0_overflow_count>
    1d8e:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <timer0_overflow_count+0x1>
    1d92:	a0 93 3c 06 	sts	0x063C, r26	; 0x80063c <timer0_overflow_count+0x2>
    1d96:	b0 93 3d 06 	sts	0x063D, r27	; 0x80063d <timer0_overflow_count+0x3>
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	0f 90       	pop	r0
    1dac:	1f 90       	pop	r1
    1dae:	18 95       	reti

00001db0 <millis>:
    1db0:	2f b7       	in	r18, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	60 91 36 06 	lds	r22, 0x0636	; 0x800636 <timer0_millis>
    1db8:	70 91 37 06 	lds	r23, 0x0637	; 0x800637 <timer0_millis+0x1>
    1dbc:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <timer0_millis+0x2>
    1dc0:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <timer0_millis+0x3>
    1dc4:	2f bf       	out	0x3f, r18	; 63
    1dc6:	08 95       	ret

00001dc8 <micros>:
    1dc8:	3f b7       	in	r19, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <timer0_overflow_count>
    1dd0:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <timer0_overflow_count+0x1>
    1dd4:	a0 91 3c 06 	lds	r26, 0x063C	; 0x80063c <timer0_overflow_count+0x2>
    1dd8:	b0 91 3d 06 	lds	r27, 0x063D	; 0x80063d <timer0_overflow_count+0x3>
    1ddc:	26 b5       	in	r18, 0x26	; 38
    1dde:	a8 9b       	sbis	0x15, 0	; 21
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <micros+0x24>
    1de2:	2f 3f       	cpi	r18, 0xFF	; 255
    1de4:	19 f0       	breq	.+6      	; 0x1dec <micros+0x24>
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	a1 1d       	adc	r26, r1
    1dea:	b1 1d       	adc	r27, r1
    1dec:	3f bf       	out	0x3f, r19	; 63
    1dee:	ba 2f       	mov	r27, r26
    1df0:	a9 2f       	mov	r26, r25
    1df2:	98 2f       	mov	r25, r24
    1df4:	88 27       	eor	r24, r24
    1df6:	82 0f       	add	r24, r18
    1df8:	91 1d       	adc	r25, r1
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	b1 1d       	adc	r27, r1
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	42 e0       	ldi	r20, 0x02	; 2
    1e04:	66 0f       	add	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	88 1f       	adc	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	4a 95       	dec	r20
    1e0e:	d1 f7       	brne	.-12     	; 0x1e04 <micros+0x3c>
    1e10:	08 95       	ret

00001e12 <delay>:
    1e12:	8f 92       	push	r8
    1e14:	9f 92       	push	r9
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	6b 01       	movw	r12, r22
    1e24:	7c 01       	movw	r14, r24
    1e26:	d0 df       	rcall	.-96     	; 0x1dc8 <micros>
    1e28:	4b 01       	movw	r8, r22
    1e2a:	5c 01       	movw	r10, r24
    1e2c:	c1 14       	cp	r12, r1
    1e2e:	d1 04       	cpc	r13, r1
    1e30:	e1 04       	cpc	r14, r1
    1e32:	f1 04       	cpc	r15, r1
    1e34:	f9 f0       	breq	.+62     	; 0x1e74 <delay+0x62>
    1e36:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <yield>
    1e3a:	c6 df       	rcall	.-116    	; 0x1dc8 <micros>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	88 19       	sub	r24, r8
    1e42:	99 09       	sbc	r25, r9
    1e44:	aa 09       	sbc	r26, r10
    1e46:	bb 09       	sbc	r27, r11
    1e48:	88 3e       	cpi	r24, 0xE8	; 232
    1e4a:	93 40       	sbci	r25, 0x03	; 3
    1e4c:	a1 05       	cpc	r26, r1
    1e4e:	b1 05       	cpc	r27, r1
    1e50:	68 f3       	brcs	.-38     	; 0x1e2c <delay+0x1a>
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	c2 1a       	sub	r12, r18
    1e56:	d1 08       	sbc	r13, r1
    1e58:	e1 08       	sbc	r14, r1
    1e5a:	f1 08       	sbc	r15, r1
    1e5c:	88 ee       	ldi	r24, 0xE8	; 232
    1e5e:	88 0e       	add	r8, r24
    1e60:	83 e0       	ldi	r24, 0x03	; 3
    1e62:	98 1e       	adc	r9, r24
    1e64:	a1 1c       	adc	r10, r1
    1e66:	b1 1c       	adc	r11, r1
    1e68:	c1 14       	cp	r12, r1
    1e6a:	d1 04       	cpc	r13, r1
    1e6c:	e1 04       	cpc	r14, r1
    1e6e:	f1 04       	cpc	r15, r1
    1e70:	21 f7       	brne	.-56     	; 0x1e3a <delay+0x28>
    1e72:	dc cf       	rjmp	.-72     	; 0x1e2c <delay+0x1a>
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	08 95       	ret

00001e86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1e86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1e88:	84 b5       	in	r24, 0x24	; 36
    1e8a:	82 60       	ori	r24, 0x02	; 2
    1e8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1e8e:	84 b5       	in	r24, 0x24	; 36
    1e90:	81 60       	ori	r24, 0x01	; 1
    1e92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1e94:	85 b5       	in	r24, 0x25	; 37
    1e96:	82 60       	ori	r24, 0x02	; 2
    1e98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1e9a:	85 b5       	in	r24, 0x25	; 37
    1e9c:	81 60       	ori	r24, 0x01	; 1
    1e9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1ea0:	ee e6       	ldi	r30, 0x6E	; 110
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	81 60       	ori	r24, 0x01	; 1
    1ea8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1eaa:	e1 e8       	ldi	r30, 0x81	; 129
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1eb0:	80 81       	ld	r24, Z
    1eb2:	82 60       	ori	r24, 0x02	; 2
    1eb4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1eb6:	80 81       	ld	r24, Z
    1eb8:	81 60       	ori	r24, 0x01	; 1
    1eba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1ebc:	e0 e8       	ldi	r30, 0x80	; 128
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	81 60       	ori	r24, 0x01	; 1
    1ec4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1ec6:	e1 eb       	ldi	r30, 0xB1	; 177
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	84 60       	ori	r24, 0x04	; 4
    1ece:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ed0:	e0 eb       	ldi	r30, 0xB0	; 176
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 60       	ori	r24, 0x01	; 1
    1ed8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1eda:	e1 e9       	ldi	r30, 0x91	; 145
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	82 60       	ori	r24, 0x02	; 2
    1ee2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1ee4:	80 81       	ld	r24, Z
    1ee6:	81 60       	ori	r24, 0x01	; 1
    1ee8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1eea:	e0 e9       	ldi	r30, 0x90	; 144
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	81 60       	ori	r24, 0x01	; 1
    1ef2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1ef4:	e1 ea       	ldi	r30, 0xA1	; 161
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1efe:	80 81       	ld	r24, Z
    1f00:	81 60       	ori	r24, 0x01	; 1
    1f02:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1f04:	e0 ea       	ldi	r30, 0xA0	; 160
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	81 60       	ori	r24, 0x01	; 1
    1f0c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1f0e:	e1 e2       	ldi	r30, 0x21	; 33
    1f10:	f1 e0       	ldi	r31, 0x01	; 1
    1f12:	80 81       	ld	r24, Z
    1f14:	82 60       	ori	r24, 0x02	; 2
    1f16:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1f18:	80 81       	ld	r24, Z
    1f1a:	81 60       	ori	r24, 0x01	; 1
    1f1c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1f1e:	e0 e2       	ldi	r30, 0x20	; 32
    1f20:	f1 e0       	ldi	r31, 0x01	; 1
    1f22:	80 81       	ld	r24, Z
    1f24:	81 60       	ori	r24, 0x01	; 1
    1f26:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1f28:	ea e7       	ldi	r30, 0x7A	; 122
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	84 60       	ori	r24, 0x04	; 4
    1f30:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1f32:	80 81       	ld	r24, Z
    1f34:	82 60       	ori	r24, 0x02	; 2
    1f36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1f38:	80 81       	ld	r24, Z
    1f3a:	81 60       	ori	r24, 0x01	; 1
    1f3c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1f44:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1f48:	08 95       	ret

00001f4a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	31 97       	sbiw	r30, 0x01	; 1
    1f50:	e2 31       	cpi	r30, 0x12	; 18
    1f52:	f1 05       	cpc	r31, r1
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <turnOffPWM+0xe>
    1f56:	4e c0       	rjmp	.+156    	; 0x1ff4 <turnOffPWM+0xaa>
    1f58:	88 27       	eor	r24, r24
    1f5a:	e4 57       	subi	r30, 0x74	; 116
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1f64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1f68:	8f 77       	andi	r24, 0x7F	; 127
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1f70:	8f 7d       	andi	r24, 0xDF	; 223
    1f72:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1f76:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1f78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1f7c:	87 7f       	andi	r24, 0xF7	; 247
    1f7e:	f9 cf       	rjmp	.-14     	; 0x1f72 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1f80:	84 b5       	in	r24, 0x24	; 36
    1f82:	8f 77       	andi	r24, 0x7F	; 127
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1f86:	84 b5       	in	r24, 0x24	; 36
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	84 bd       	out	0x24, r24	; 36
    1f8c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1f8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1f92:	8f 77       	andi	r24, 0x7F	; 127
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1f96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1f9a:	8f 7d       	andi	r24, 0xDF	; 223
    1f9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1fa0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1fa2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1fa6:	8f 77       	andi	r24, 0x7F	; 127
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1faa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1fae:	8f 7d       	andi	r24, 0xDF	; 223
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1fb2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1fb6:	87 7f       	andi	r24, 0xF7	; 247
    1fb8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1fbc:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1fbe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1fc2:	8f 77       	andi	r24, 0x7F	; 127
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1fc6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1fca:	8f 7d       	andi	r24, 0xDF	; 223
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1fce:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1fd2:	87 7f       	andi	r24, 0xF7	; 247
    1fd4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1fd8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1fda:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1fde:	8f 77       	andi	r24, 0x7F	; 127
    1fe0:	07 c0       	rjmp	.+14     	; 0x1ff0 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1fe2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1fe6:	8f 7d       	andi	r24, 0xDF	; 223
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1fea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1fee:	87 7f       	andi	r24, 0xF7	; 247
    1ff0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1ff4:	08 95       	ret

00001ff6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e9 56       	subi	r30, 0x69	; 105
    2000:	fe 4f       	sbci	r31, 0xFE	; 254
    2002:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2004:	fc 01       	movw	r30, r24
    2006:	e3 52       	subi	r30, 0x23	; 35
    2008:	fe 4f       	sbci	r31, 0xFE	; 254
    200a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    200c:	88 23       	and	r24, r24
    200e:	61 f1       	breq	.+88     	; 0x2068 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	fc 01       	movw	r30, r24
    2018:	e9 5a       	subi	r30, 0xA9	; 169
    201a:	fd 4f       	sbci	r31, 0xFD	; 253
    201c:	c5 91       	lpm	r28, Z+
    201e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2020:	fc 01       	movw	r30, r24
    2022:	e3 5c       	subi	r30, 0xC3	; 195
    2024:	fd 4f       	sbci	r31, 0xFD	; 253
    2026:	a5 91       	lpm	r26, Z+
    2028:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    202a:	61 11       	cpse	r22, r1
    202c:	09 c0       	rjmp	.+18     	; 0x2040 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    202e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2030:	f8 94       	cli
		*reg &= ~bit;
    2032:	88 81       	ld	r24, Y
    2034:	20 95       	com	r18
    2036:	82 23       	and	r24, r18
    2038:	88 83       	st	Y, r24
		*out &= ~bit;
    203a:	ec 91       	ld	r30, X
    203c:	2e 23       	and	r18, r30
    203e:	0b c0       	rjmp	.+22     	; 0x2056 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2040:	62 30       	cpi	r22, 0x02	; 2
    2042:	61 f4       	brne	.+24     	; 0x205c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2044:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2046:	f8 94       	cli
		*reg &= ~bit;
    2048:	88 81       	ld	r24, Y
    204a:	32 2f       	mov	r19, r18
    204c:	30 95       	com	r19
    204e:	83 23       	and	r24, r19
    2050:	88 83       	st	Y, r24
		*out |= bit;
    2052:	ec 91       	ld	r30, X
    2054:	2e 2b       	or	r18, r30
    2056:	2c 93       	st	X, r18
		SREG = oldSREG;
    2058:	9f bf       	out	0x3f, r25	; 63
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    205c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    205e:	f8 94       	cli
		*reg |= bit;
    2060:	e8 81       	ld	r30, Y
    2062:	2e 2b       	or	r18, r30
    2064:	28 83       	st	Y, r18
		SREG = oldSREG;
    2066:	8f bf       	out	0x3f, r24	; 63
	}
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	f9 01       	movw	r30, r18
    207a:	ef 5a       	subi	r30, 0xAF	; 175
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2080:	f9 01       	movw	r30, r18
    2082:	e9 56       	subi	r30, 0x69	; 105
    2084:	fe 4f       	sbci	r31, 0xFE	; 254
    2086:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2088:	f9 01       	movw	r30, r18
    208a:	e3 52       	subi	r30, 0x23	; 35
    208c:	fe 4f       	sbci	r31, 0xFE	; 254
    208e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2090:	cc 23       	and	r28, r28
    2092:	b9 f0       	breq	.+46     	; 0x20c2 <digitalWrite+0x54>
    2094:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2096:	81 11       	cpse	r24, r1
    2098:	58 df       	rcall	.-336    	; 0x1f4a <turnOffPWM>

	out = portOutputRegister(port);
    209a:	ec 2f       	mov	r30, r28
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	e3 5c       	subi	r30, 0xC3	; 195
    20a4:	fd 4f       	sbci	r31, 0xFD	; 253
    20a6:	a5 91       	lpm	r26, Z+
    20a8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    20aa:	9f b7       	in	r25, 0x3f	; 63
	cli();
    20ac:	f8 94       	cli

	if (val == LOW) {
    20ae:	11 11       	cpse	r17, r1
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <digitalWrite+0x4c>
		*out &= ~bit;
    20b2:	8c 91       	ld	r24, X
    20b4:	d0 95       	com	r29
    20b6:	d8 23       	and	r29, r24
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <digitalWrite+0x50>
	} else {
		*out |= bit;
    20ba:	ec 91       	ld	r30, X
    20bc:	de 2b       	or	r29, r30
    20be:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    20c0:	9f bf       	out	0x3f, r25	; 63
}
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	08 95       	ret

000020ca <digitalRead>:

int digitalRead(uint8_t pin)
{
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	f9 01       	movw	r30, r18
    20d4:	ef 5a       	subi	r30, 0xAF	; 175
    20d6:	fe 4f       	sbci	r31, 0xFE	; 254
    20d8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    20da:	f9 01       	movw	r30, r18
    20dc:	e9 56       	subi	r30, 0x69	; 105
    20de:	fe 4f       	sbci	r31, 0xFE	; 254
    20e0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    20e2:	f9 01       	movw	r30, r18
    20e4:	e3 52       	subi	r30, 0x23	; 35
    20e6:	fe 4f       	sbci	r31, 0xFE	; 254
    20e8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    20ea:	cc 23       	and	r28, r28
    20ec:	89 f0       	breq	.+34     	; 0x2110 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    20ee:	81 11       	cpse	r24, r1
    20f0:	2c df       	rcall	.-424    	; 0x1f4a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    20f2:	ec 2f       	mov	r30, r28
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	ed 5d       	subi	r30, 0xDD	; 221
    20fc:	fd 4f       	sbci	r31, 0xFD	; 253
    20fe:	a5 91       	lpm	r26, Z+
    2100:	b4 91       	lpm	r27, Z
    2102:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2104:	ed 23       	and	r30, r29
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	21 f4       	brne	.+8      	; 0x2114 <digitalRead+0x4a>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <digitalRead+0x4a>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    211a:	fc 01       	movw	r30, r24
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <free>

00002124 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    212a:	88 81       	ld	r24, Y
    212c:	99 81       	ldd	r25, Y+1	; 0x01
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	11 f0       	breq	.+4      	; 0x2136 <_ZN6String10invalidateEv+0x12>
    2132:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <free>
	buffer = NULL;
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	18 82       	st	Y, r1
	capacity = len = 0;
    213a:	1d 82       	std	Y+5, r1	; 0x05
    213c:	1c 82       	std	Y+4, r1	; 0x04
    213e:	1b 82       	std	Y+3, r1	; 0x03
    2140:	1a 82       	std	Y+2, r1	; 0x02
}
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

00002148 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2154:	6f 5f       	subi	r22, 0xFF	; 255
    2156:	7f 4f       	sbci	r23, 0xFF	; 255
    2158:	88 81       	ld	r24, Y
    215a:	99 81       	ldd	r25, Y+1	; 0x01
    215c:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <realloc>
	if (newbuffer) {
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	31 f0       	breq	.+12     	; 0x2170 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2164:	99 83       	std	Y+1, r25	; 0x01
    2166:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2168:	1b 83       	std	Y+3, r17	; 0x03
    216a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2170:	80 e0       	ldi	r24, 0x00	; 0
}
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2182:	88 81       	ld	r24, Y
    2184:	99 81       	ldd	r25, Y+1	; 0x01
    2186:	89 2b       	or	r24, r25
    2188:	29 f0       	breq	.+10     	; 0x2194 <_ZN6String7reserveEj+0x18>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	86 17       	cp	r24, r22
    2190:	97 07       	cpc	r25, r23
    2192:	58 f4       	brcc	.+22     	; 0x21aa <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    2194:	ce 01       	movw	r24, r28
    2196:	d8 df       	rcall	.-80     	; 0x2148 <_ZN6String12changeBufferEj>
    2198:	88 23       	and	r24, r24
    219a:	41 f0       	breq	.+16     	; 0x21ac <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	89 2b       	or	r24, r25
    21a2:	19 f4       	brne	.+6      	; 0x21aa <_ZN6String7reserveEj+0x2e>
    21a4:	e8 81       	ld	r30, Y
    21a6:	f9 81       	ldd	r31, Y+1	; 0x01
    21a8:	10 82       	st	Z, r1
    21aa:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	ec 01       	movw	r28, r24
    21c0:	7b 01       	movw	r14, r22
    21c2:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    21c4:	ba 01       	movw	r22, r20
    21c6:	da df       	rcall	.-76     	; 0x217c <_ZN6String7reserveEj>
    21c8:	81 11       	cpse	r24, r1
    21ca:	03 c0       	rjmp	.+6      	; 0x21d2 <_ZN6String4copyEPKcj+0x20>
		invalidate();
    21cc:	ce 01       	movw	r24, r28
    21ce:	aa df       	rcall	.-172    	; 0x2124 <_ZN6String10invalidateEv>
		return *this;
    21d0:	07 c0       	rjmp	.+14     	; 0x21e0 <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    21d2:	1d 83       	std	Y+5, r17	; 0x05
    21d4:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    21d6:	b7 01       	movw	r22, r14
    21d8:	88 81       	ld	r24, Y
    21da:	99 81       	ldd	r25, Y+1	; 0x01
    21dc:	0e 94 3f 20 	call	0x407e	; 0x407e <strcpy>
	return *this;
}
    21e0:	ce 01       	movw	r24, r28
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	08 95       	ret

000021f0 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    21f0:	fc 01       	movw	r30, r24
    21f2:	11 82       	std	Z+1, r1	; 0x01
    21f4:	10 82       	st	Z, r1
	capacity = 0;
    21f6:	13 82       	std	Z+3, r1	; 0x03
    21f8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    21fa:	15 82       	std	Z+5, r1	; 0x05
    21fc:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    21fe:	61 15       	cp	r22, r1
    2200:	71 05       	cpc	r23, r1
    2202:	49 f0       	breq	.+18     	; 0x2216 <__stack+0x17>
    2204:	fb 01       	movw	r30, r22
    2206:	01 90       	ld	r0, Z+
    2208:	00 20       	and	r0, r0
    220a:	e9 f7       	brne	.-6      	; 0x2206 <__stack+0x7>
    220c:	31 97       	sbiw	r30, 0x01	; 1
    220e:	af 01       	movw	r20, r30
    2210:	46 1b       	sub	r20, r22
    2212:	57 0b       	sbc	r21, r23
    2214:	ce cf       	rjmp	.-100    	; 0x21b2 <_ZN6String4copyEPKcj>
    2216:	08 95       	ret

00002218 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	1f 92       	push	r1
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	69 83       	std	Y+1, r22	; 0x01
    2224:	dc 01       	movw	r26, r24
    2226:	ed 91       	ld	r30, X+
    2228:	fc 91       	ld	r31, X
    222a:	02 80       	ldd	r0, Z+2	; 0x02
    222c:	f3 81       	ldd	r31, Z+3	; 0x03
    222e:	e0 2d       	mov	r30, r0
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	be 01       	movw	r22, r28
    2236:	6f 5f       	subi	r22, 0xFF	; 255
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	19 95       	eicall
    223c:	0f 90       	pop	r0
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <_ZN5SDLib4File5writeEPKhj>:
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	ec 01       	movw	r28, r24
    224a:	89 8d       	ldd	r24, Y+25	; 0x19
    224c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	39 f4       	brne	.+14     	; 0x2260 <_ZN5SDLib4File5writeEPKhj+0x1c>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0a c0       	rjmp	.+20     	; 0x2274 <_ZN5SDLib4File5writeEPKhj+0x30>
    2260:	fc 01       	movw	r30, r24
    2262:	13 82       	std	Z+3, r1	; 0x03
    2264:	12 82       	std	Z+2, r1	; 0x02
    2266:	a7 d6       	rcall	.+3406   	; 0x2fb6 <_ZN6SdFile5writeEPKvj>
    2268:	e9 8d       	ldd	r30, Y+25	; 0x19
    226a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    226c:	22 81       	ldd	r18, Z+2	; 0x02
    226e:	33 81       	ldd	r19, Z+3	; 0x03
    2270:	23 2b       	or	r18, r19
    2272:	79 f7       	brne	.-34     	; 0x2252 <_ZN5SDLib4File5writeEPKhj+0xe>
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	08 95       	ret

0000227a <_ZN5SDLib4File5flushEv>:
    227a:	fc 01       	movw	r30, r24
    227c:	81 8d       	ldd	r24, Z+25	; 0x19
    227e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	09 f0       	breq	.+2      	; 0x2286 <_ZN5SDLib4File5flushEv+0xc>
    2284:	48 c6       	rjmp	.+3216   	; 0x2f16 <_ZN6SdFile4syncEv>
    2286:	08 95       	ret

00002288 <_ZN6SdFile4readEv>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	1f 92       	push	r1
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	be 01       	movw	r22, r28
    2298:	6f 5f       	subi	r22, 0xFF	; 255
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	a4 d4       	rcall	.+2376   	; 0x2be6 <_ZN6SdFile4readEPvj>
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	19 f4       	brne	.+6      	; 0x22a8 <_ZN6SdFile4readEv+0x20>
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <_ZN6SdFile4readEv+0x24>
    22a8:	8f ef       	ldi	r24, 0xFF	; 255
    22aa:	9f ef       	ldi	r25, 0xFF	; 255
    22ac:	0f 90       	pop	r0
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <_ZN5SDLib4File4readEv>:
    22b4:	fc 01       	movw	r30, r24
    22b6:	81 8d       	ldd	r24, Z+25	; 0x19
    22b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <_ZN5SDLib4File4readEv+0xc>
    22be:	e4 cf       	rjmp	.-56     	; 0x2288 <_ZN6SdFile4readEv>
    22c0:	8f ef       	ldi	r24, 0xFF	; 255
    22c2:	9f ef       	ldi	r25, 0xFF	; 255
    22c4:	08 95       	ret

000022c6 <_ZN5SDLib4File4peekEv>:
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	fc 01       	movw	r30, r24
    22d0:	81 8d       	ldd	r24, Z+25	; 0x19
    22d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	a9 f0       	breq	.+42     	; 0x2302 <_ZN5SDLib4File4peekEv+0x3c>
    22d8:	ef 01       	movw	r28, r30
    22da:	d6 df       	rcall	.-84     	; 0x2288 <_ZN6SdFile4readEv>
    22dc:	8c 01       	movw	r16, r24
    22de:	0f 3f       	cpi	r16, 0xFF	; 255
    22e0:	8f ef       	ldi	r24, 0xFF	; 255
    22e2:	18 07       	cpc	r17, r24
    22e4:	89 f0       	breq	.+34     	; 0x2308 <_ZN5SDLib4File4peekEv+0x42>
    22e6:	89 8d       	ldd	r24, Y+25	; 0x19
    22e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22ea:	fc 01       	movw	r30, r24
    22ec:	42 85       	ldd	r20, Z+10	; 0x0a
    22ee:	53 85       	ldd	r21, Z+11	; 0x0b
    22f0:	64 85       	ldd	r22, Z+12	; 0x0c
    22f2:	75 85       	ldd	r23, Z+13	; 0x0d
    22f4:	41 50       	subi	r20, 0x01	; 1
    22f6:	51 09       	sbc	r21, r1
    22f8:	61 09       	sbc	r22, r1
    22fa:	71 09       	sbc	r23, r1
    22fc:	76 d5       	rcall	.+2796   	; 0x2dea <_ZN6SdFile7seekSetEm>
    22fe:	c8 01       	movw	r24, r16
    2300:	05 c0       	rjmp	.+10     	; 0x230c <_ZN5SDLib4File4peekEv+0x46>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 c0       	rjmp	.+4      	; 0x230c <_ZN5SDLib4File4peekEv+0x46>
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	9f ef       	ldi	r25, 0xFF	; 255
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	08 95       	ret

00002316 <_ZN5SDLib4FileC1Ev>:
    2316:	fc 01       	movw	r30, r24
    2318:	13 82       	std	Z+3, r1	; 0x03
    231a:	12 82       	std	Z+2, r1	; 0x02
    231c:	88 ee       	ldi	r24, 0xE8	; 232
    231e:	93 e0       	ldi	r25, 0x03	; 3
    2320:	a0 e0       	ldi	r26, 0x00	; 0
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	84 83       	std	Z+4, r24	; 0x04
    2326:	95 83       	std	Z+5, r25	; 0x05
    2328:	a6 83       	std	Z+6, r26	; 0x06
    232a:	b7 83       	std	Z+7, r27	; 0x07
    232c:	8c ee       	ldi	r24, 0xEC	; 236
    232e:	93 e0       	ldi	r25, 0x03	; 3
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	12 8e       	std	Z+26, r1	; 0x1a
    2336:	11 8e       	std	Z+25, r1	; 0x19
    2338:	14 86       	std	Z+12, r1	; 0x0c
    233a:	08 95       	ret

0000233c <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    233c:	dc 01       	movw	r26, r24
    233e:	59 96       	adiw	r26, 0x19	; 25
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	5a 97       	sbiw	r26, 0x1a	; 26
    2346:	30 97       	sbiw	r30, 0x00	; 0
    2348:	29 f0       	breq	.+10     	; 0x2354 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    234a:	62 85       	ldd	r22, Z+10	; 0x0a
    234c:	73 85       	ldd	r23, Z+11	; 0x0b
    234e:	84 85       	ldd	r24, Z+12	; 0x0c
    2350:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    2352:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    2354:	6f ef       	ldi	r22, 0xFF	; 255
    2356:	7f ef       	ldi	r23, 0xFF	; 255
    2358:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    235a:	08 95       	ret

0000235c <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    235c:	dc 01       	movw	r26, r24
    235e:	59 96       	adiw	r26, 0x19	; 25
    2360:	ed 91       	ld	r30, X+
    2362:	fc 91       	ld	r31, X
    2364:	5a 97       	sbiw	r26, 0x1a	; 26
    2366:	30 97       	sbiw	r30, 0x00	; 0
    2368:	29 f0       	breq	.+10     	; 0x2374 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    236a:	63 89       	ldd	r22, Z+19	; 0x13
    236c:	74 89       	ldd	r23, Z+20	; 0x14
    236e:	85 89       	ldd	r24, Z+21	; 0x15
    2370:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    2372:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    237a:	08 95       	ret

0000237c <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    237c:	cf 92       	push	r12
    237e:	df 92       	push	r13
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
  if (! _file) return 0;
    2388:	fc 01       	movw	r30, r24
    238a:	21 8d       	ldd	r18, Z+25	; 0x19
    238c:	32 8d       	ldd	r19, Z+26	; 0x1a
    238e:	23 2b       	or	r18, r19
    2390:	c9 f0       	breq	.+50     	; 0x23c4 <_ZN5SDLib4File9availableEv+0x48>
    2392:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    2394:	e3 df       	rcall	.-58     	; 0x235c <_ZN5SDLib4File4sizeEv>
    2396:	6b 01       	movw	r12, r22
    2398:	7c 01       	movw	r14, r24
    239a:	ce 01       	movw	r24, r28
    239c:	cf df       	rcall	.-98     	; 0x233c <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    239e:	a7 01       	movw	r20, r14
    23a0:	96 01       	movw	r18, r12
    23a2:	26 1b       	sub	r18, r22
    23a4:	37 0b       	sbc	r19, r23
    23a6:	48 0b       	sbc	r20, r24
    23a8:	59 0b       	sbc	r21, r25
    23aa:	da 01       	movw	r26, r20
    23ac:	c9 01       	movw	r24, r18
    23ae:	81 15       	cp	r24, r1
    23b0:	30 e8       	ldi	r19, 0x80	; 128
    23b2:	93 07       	cpc	r25, r19
    23b4:	a1 05       	cpc	r26, r1
    23b6:	b1 05       	cpc	r27, r1
    23b8:	38 f0       	brcs	.+14     	; 0x23c8 <_ZN5SDLib4File9availableEv+0x4c>
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	9f e7       	ldi	r25, 0x7F	; 127
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	08 95       	ret

000023d6 <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	ec 01       	movw	r28, r24
    23e0:	8b 01       	movw	r16, r22
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 92 1c 	call	0x3924	; 0x3924 <_ZN8SdVolume4initEP7Sd2Cardh>
    23e8:	81 11       	cpse	r24, r1
    23ea:	09 c0       	rjmp	.+18     	; 0x23fe <_ZN8SdVolume4initEP7Sd2Card+0x28>
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	b8 01       	movw	r22, r16
    23f0:	ce 01       	movw	r24, r28
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <_ZN8SdVolume4initEP7Sd2Cardh>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret

0000240a <_ZN5SDLib7SDClass5beginEh>:
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	ec 01       	movw	r28, r24
    2414:	16 2f       	mov	r17, r22
    2416:	8f a5       	ldd	r24, Y+47	; 0x2f
    2418:	88 23       	and	r24, r24
    241a:	19 f0       	breq	.+6      	; 0x2422 <_ZN5SDLib7SDClass5beginEh+0x18>
    241c:	ce 01       	movw	r24, r28
    241e:	8a 96       	adiw	r24, 0x2a	; 42
    2420:	bf d5       	rcall	.+2942   	; 0x2fa0 <_ZN6SdFile5closeEv>
    2422:	41 2f       	mov	r20, r17
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	ce 01       	movw	r24, r28
    2428:	60 d1       	rcall	.+704    	; 0x26ea <_ZN7Sd2Card4initEhh>
    242a:	88 23       	and	r24, r24
    242c:	79 f0       	breq	.+30     	; 0x244c <_ZN5SDLib7SDClass5beginEh+0x42>
    242e:	8e 01       	movw	r16, r28
    2430:	04 5f       	subi	r16, 0xF4	; 244
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	be 01       	movw	r22, r28
    2436:	c8 01       	movw	r24, r16
    2438:	ce df       	rcall	.-100    	; 0x23d6 <_ZN8SdVolume4initEP7Sd2Card>
    243a:	88 23       	and	r24, r24
    243c:	39 f0       	breq	.+14     	; 0x244c <_ZN5SDLib7SDClass5beginEh+0x42>
    243e:	b8 01       	movw	r22, r16
    2440:	ce 01       	movw	r24, r28
    2442:	8a 96       	adiw	r24, 0x2a	; 42
    2444:	80 d3       	rcall	.+1792   	; 0x2b46 <_ZN6SdFile8openRootEP8SdVolume>
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	81 11       	cpse	r24, r1
    244a:	01 c0       	rjmp	.+2      	; 0x244e <_ZN5SDLib7SDClass5beginEh+0x44>
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	89 2f       	mov	r24, r25
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	08 95       	ret

0000245a <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    245a:	ee e3       	ldi	r30, 0x3E	; 62
    245c:	f6 e0       	ldi	r31, 0x06	; 6
    245e:	15 82       	std	Z+5, r1	; 0x05
    2460:	16 82       	std	Z+6, r1	; 0x06
    2462:	11 86       	std	Z+9, r1	; 0x09
    2464:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	84 87       	std	Z+12, r24	; 0x0c
    2470:	95 87       	std	Z+13, r25	; 0x0d
    2472:	a6 87       	std	Z+14, r26	; 0x0e
    2474:	b7 87       	std	Z+15, r27	; 0x0f
    2476:	13 a2       	std	Z+35, r1	; 0x23
    2478:	15 a6       	std	Z+45, r1	; 0x2d
    247a:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    247c:	8e ef       	ldi	r24, 0xFE	; 254
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	93 a7       	std	Z+43, r25	; 0x2b
    2482:	82 a7       	std	Z+42, r24	; 0x2a
    2484:	17 a6       	std	Z+47, r1	; 0x2f
    2486:	08 95       	ret

00002488 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    2488:	9f b7       	in	r25, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
    2490:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <_ZN8SPIClass13interruptSaveE>
    2494:	21 30       	cpi	r18, 0x01	; 1
    2496:	19 f4       	brne	.+6      	; 0x249e <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    2498:	8d bb       	out	0x1d, r24	; 29
    249a:	9f bf       	out	0x3f, r25	; 63
    249c:	08 95       	ret
    249e:	8f bf       	out	0x3f, r24	; 63
    24a0:	08 95       	ret

000024a2 <_ZN11SPISettingsC1Emhh>:
    24a2:	0f 93       	push	r16
    24a4:	fc 01       	movw	r30, r24
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	92 e1       	ldi	r25, 0x12	; 18
    24aa:	aa e7       	ldi	r26, 0x7A	; 122
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	48 17       	cp	r20, r24
    24b2:	59 07       	cpc	r21, r25
    24b4:	6a 07       	cpc	r22, r26
    24b6:	7b 07       	cpc	r23, r27
    24b8:	40 f4       	brcc	.+16     	; 0x24ca <_ZN11SPISettingsC1Emhh+0x28>
    24ba:	b6 95       	lsr	r27
    24bc:	a7 95       	ror	r26
    24be:	97 95       	ror	r25
    24c0:	87 95       	ror	r24
    24c2:	3f 5f       	subi	r19, 0xFF	; 255
    24c4:	36 30       	cpi	r19, 0x06	; 6
    24c6:	a1 f7       	brne	.-24     	; 0x24b0 <_ZN11SPISettingsC1Emhh+0xe>
    24c8:	37 e0       	ldi	r19, 0x07	; 7
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	93 27       	eor	r25, r19
    24ce:	22 23       	and	r18, r18
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <_ZN11SPISettingsC1Emhh+0x34>
    24d2:	20 e5       	ldi	r18, 0x50	; 80
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <_ZN11SPISettingsC1Emhh+0x36>
    24d6:	20 e7       	ldi	r18, 0x70	; 112
    24d8:	0c 70       	andi	r16, 0x0C	; 12
    24da:	89 2f       	mov	r24, r25
    24dc:	86 95       	lsr	r24
    24de:	08 2b       	or	r16, r24
    24e0:	02 2b       	or	r16, r18
    24e2:	00 83       	st	Z, r16
    24e4:	91 70       	andi	r25, 0x01	; 1
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <_ZN8SPIClass8transferEh>:
    24ec:	8e bd       	out	0x2e, r24	; 46
    24ee:	00 00       	nop
    24f0:	0d b4       	in	r0, 0x2d	; 45
    24f2:	07 fe       	sbrs	r0, 7
    24f4:	fd cf       	rjmp	.-6      	; 0x24f0 <_ZN8SPIClass8transferEh+0x4>
    24f6:	8e b5       	in	r24, 0x2e	; 46
    24f8:	08 95       	ret

000024fa <_ZL6spiRecv>:
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	f7 cf       	rjmp	.-18     	; 0x24ec <_ZN8SPIClass8transferEh>

000024fe <_ZN7Sd2Card14chipSelectHighEv>:
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	fc 01       	movw	r30, r24
    2502:	84 81       	ldd	r24, Z+4	; 0x04
    2504:	b4 dd       	rcall	.-1176   	; 0x206e <digitalWrite>
    2506:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <_ZL20chip_select_asserted>
    250a:	88 23       	and	r24, r24
    250c:	31 f0       	breq	.+12     	; 0x251a <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    250e:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <_ZL20chip_select_asserted>
    2512:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
    2516:	81 11       	cpse	r24, r1
    2518:	b7 cf       	rjmp	.-146    	; 0x2488 <_ZN8SPIClass14endTransactionEv.part.3>
    251a:	08 95       	ret

0000251c <_ZN7Sd2Card13chipSelectLowEv>:
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	ec 01       	movw	r28, r24
    2522:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <_ZL20chip_select_asserted>
    2526:	81 11       	cpse	r24, r1
    2528:	09 c0       	rjmp	.+18     	; 0x253c <_ZN7Sd2Card13chipSelectLowEv+0x20>
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <_ZL20chip_select_asserted>
    2530:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <_ZL8settings>
    2534:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <_ZL8settings+0x1>
    2538:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN8SPIClass16beginTransactionE11SPISettings>
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	94 cd       	rjmp	.-1240   	; 0x206e <digitalWrite>

00002546 <_ZN7Sd2Card7readEndEv>:
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	ec 01       	movw	r28, r24
    254c:	8e 81       	ldd	r24, Y+6	; 0x06
    254e:	88 23       	and	r24, r24
    2550:	79 f0       	breq	.+30     	; 0x2570 <_ZN7Sd2Card7readEndEv+0x2a>
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	98 85       	ldd	r25, Y+8	; 0x08
    2556:	9c 01       	movw	r18, r24
    2558:	2f 5f       	subi	r18, 0xFF	; 255
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	38 87       	std	Y+8, r19	; 0x08
    255e:	2f 83       	std	Y+7, r18	; 0x07
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	92 40       	sbci	r25, 0x02	; 2
    2564:	10 f4       	brcc	.+4      	; 0x256a <_ZN7Sd2Card7readEndEv+0x24>
    2566:	c9 df       	rcall	.-110    	; 0x24fa <_ZL6spiRecv>
    2568:	f4 cf       	rjmp	.-24     	; 0x2552 <_ZN7Sd2Card7readEndEv+0xc>
    256a:	ce 01       	movw	r24, r28
    256c:	c8 df       	rcall	.-112    	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    256e:	1e 82       	std	Y+6, r1	; 0x06
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <_ZN7Sd2Card10setSckRateEh>:
    2576:	0f 93       	push	r16
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	1f 92       	push	r1
    257e:	1f 92       	push	r1
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	67 30       	cpi	r22, 0x07	; 7
    2586:	28 f0       	brcs	.+10     	; 0x2592 <_ZN7Sd2Card10setSckRateEh+0x1c>
    2588:	26 e1       	ldi	r18, 0x16	; 22
    258a:	fc 01       	movw	r30, r24
    258c:	25 83       	std	Z+5, r18	; 0x05
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	46 c0       	rjmp	.+140    	; 0x261e <_ZN7Sd2Card10setSckRateEh+0xa8>
    2592:	62 30       	cpi	r22, 0x02	; 2
    2594:	f9 f0       	breq	.+62     	; 0x25d4 <_ZN7Sd2Card10setSckRateEh+0x5e>
    2596:	58 f4       	brcc	.+22     	; 0x25ae <_ZN7Sd2Card10setSckRateEh+0x38>
    2598:	66 23       	and	r22, r22
    259a:	a9 f0       	breq	.+42     	; 0x25c6 <_ZN7Sd2Card10setSckRateEh+0x50>
    259c:	61 30       	cpi	r22, 0x01	; 1
    259e:	79 f5       	brne	.+94     	; 0x25fe <_ZN7Sd2Card10setSckRateEh+0x88>
    25a0:	00 e0       	ldi	r16, 0x00	; 0
    25a2:	21 e0       	ldi	r18, 0x01	; 1
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	59 e0       	ldi	r21, 0x09	; 9
    25a8:	6d e3       	ldi	r22, 0x3D	; 61
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	2e c0       	rjmp	.+92     	; 0x260a <_ZN7Sd2Card10setSckRateEh+0x94>
    25ae:	64 30       	cpi	r22, 0x04	; 4
    25b0:	f9 f0       	breq	.+62     	; 0x25f0 <_ZN7Sd2Card10setSckRateEh+0x7a>
    25b2:	b8 f0       	brcs	.+46     	; 0x25e2 <_ZN7Sd2Card10setSckRateEh+0x6c>
    25b4:	65 30       	cpi	r22, 0x05	; 5
    25b6:	19 f5       	brne	.+70     	; 0x25fe <_ZN7Sd2Card10setSckRateEh+0x88>
    25b8:	00 e0       	ldi	r16, 0x00	; 0
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	40 e9       	ldi	r20, 0x90	; 144
    25be:	50 ed       	ldi	r21, 0xD0	; 208
    25c0:	63 e0       	ldi	r22, 0x03	; 3
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	22 c0       	rjmp	.+68     	; 0x260a <_ZN7Sd2Card10setSckRateEh+0x94>
    25c6:	00 e0       	ldi	r16, 0x00	; 0
    25c8:	21 e0       	ldi	r18, 0x01	; 1
    25ca:	40 e4       	ldi	r20, 0x40	; 64
    25cc:	58 e7       	ldi	r21, 0x78	; 120
    25ce:	6d e7       	ldi	r22, 0x7D	; 125
    25d0:	71 e0       	ldi	r23, 0x01	; 1
    25d2:	1b c0       	rjmp	.+54     	; 0x260a <_ZN7Sd2Card10setSckRateEh+0x94>
    25d4:	00 e0       	ldi	r16, 0x00	; 0
    25d6:	21 e0       	ldi	r18, 0x01	; 1
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	54 e8       	ldi	r21, 0x84	; 132
    25dc:	6e e1       	ldi	r22, 0x1E	; 30
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <_ZN7Sd2Card10setSckRateEh+0x94>
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	21 e0       	ldi	r18, 0x01	; 1
    25e6:	40 e4       	ldi	r20, 0x40	; 64
    25e8:	52 e4       	ldi	r21, 0x42	; 66
    25ea:	6f e0       	ldi	r22, 0x0F	; 15
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <_ZN7Sd2Card10setSckRateEh+0x94>
    25f0:	00 e0       	ldi	r16, 0x00	; 0
    25f2:	21 e0       	ldi	r18, 0x01	; 1
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 ea       	ldi	r21, 0xA1	; 161
    25f8:	67 e0       	ldi	r22, 0x07	; 7
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	06 c0       	rjmp	.+12     	; 0x260a <_ZN7Sd2Card10setSckRateEh+0x94>
    25fe:	00 e0       	ldi	r16, 0x00	; 0
    2600:	21 e0       	ldi	r18, 0x01	; 1
    2602:	48 e4       	ldi	r20, 0x48	; 72
    2604:	58 ee       	ldi	r21, 0xE8	; 232
    2606:	61 e0       	ldi	r22, 0x01	; 1
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	ce 01       	movw	r24, r28
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	49 df       	rcall	.-366    	; 0x24a2 <_ZN11SPISettingsC1Emhh>
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <_ZL8settings+0x1>
    2618:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <_ZL8settings>
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <_ZN7Sd2Card11waitNotBusyEj>:
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	eb 01       	movw	r28, r22
    2634:	bd db       	rcall	.-2182   	; 0x1db0 <millis>
    2636:	8b 01       	movw	r16, r22
    2638:	60 df       	rcall	.-320    	; 0x24fa <_ZL6spiRecv>
    263a:	8f 3f       	cpi	r24, 0xFF	; 255
    263c:	41 f0       	breq	.+16     	; 0x264e <_ZN7Sd2Card11waitNotBusyEj+0x24>
    263e:	b8 db       	rcall	.-2192   	; 0x1db0 <millis>
    2640:	60 1b       	sub	r22, r16
    2642:	71 0b       	sbc	r23, r17
    2644:	6c 17       	cp	r22, r28
    2646:	7d 07       	cpc	r23, r29
    2648:	b8 f3       	brcs	.-18     	; 0x2638 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	08 95       	ret

0000265a <_ZN7Sd2Card11cardCommandEhm>:
    265a:	8f 92       	push	r8
    265c:	9f 92       	push	r9
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	ec 01       	movw	r28, r24
    266e:	f6 2e       	mov	r15, r22
    2670:	49 01       	movw	r8, r18
    2672:	5a 01       	movw	r10, r20
    2674:	68 df       	rcall	.-304    	; 0x2546 <_ZN7Sd2Card7readEndEv>
    2676:	ce 01       	movw	r24, r28
    2678:	51 df       	rcall	.-350    	; 0x251c <_ZN7Sd2Card13chipSelectLowEv>
    267a:	6c e2       	ldi	r22, 0x2C	; 44
    267c:	71 e0       	ldi	r23, 0x01	; 1
    267e:	ce 01       	movw	r24, r28
    2680:	d4 df       	rcall	.-88     	; 0x262a <_ZN7Sd2Card11waitNotBusyEj>
    2682:	8f 2d       	mov	r24, r15
    2684:	80 64       	ori	r24, 0x40	; 64
    2686:	32 df       	rcall	.-412    	; 0x24ec <_ZN8SPIClass8transferEh>
    2688:	08 e1       	ldi	r16, 0x18	; 24
    268a:	10 e0       	ldi	r17, 0x00	; 0
    268c:	d5 01       	movw	r26, r10
    268e:	c4 01       	movw	r24, r8
    2690:	00 2e       	mov	r0, r16
    2692:	04 c0       	rjmp	.+8      	; 0x269c <_ZN7Sd2Card11cardCommandEhm+0x42>
    2694:	b6 95       	lsr	r27
    2696:	a7 95       	ror	r26
    2698:	97 95       	ror	r25
    269a:	87 95       	ror	r24
    269c:	0a 94       	dec	r0
    269e:	d2 f7       	brpl	.-12     	; 0x2694 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    26a0:	25 df       	rcall	.-438    	; 0x24ec <_ZN8SPIClass8transferEh>
    26a2:	08 50       	subi	r16, 0x08	; 8
    26a4:	11 09       	sbc	r17, r1
    26a6:	08 3f       	cpi	r16, 0xF8	; 248
    26a8:	8f ef       	ldi	r24, 0xFF	; 255
    26aa:	18 07       	cpc	r17, r24
    26ac:	79 f7       	brne	.-34     	; 0x268c <_ZN7Sd2Card11cardCommandEhm+0x32>
    26ae:	ff 20       	and	r15, r15
    26b0:	29 f0       	breq	.+10     	; 0x26bc <_ZN7Sd2Card11cardCommandEhm+0x62>
    26b2:	88 e0       	ldi	r24, 0x08	; 8
    26b4:	f8 12       	cpse	r15, r24
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <_ZN7Sd2Card11cardCommandEhm+0x66>
    26b8:	87 e8       	ldi	r24, 0x87	; 135
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <_ZN7Sd2Card11cardCommandEhm+0x68>
    26bc:	85 e9       	ldi	r24, 0x95	; 149
    26be:	01 c0       	rjmp	.+2      	; 0x26c2 <_ZN7Sd2Card11cardCommandEhm+0x68>
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
    26c2:	14 df       	rcall	.-472    	; 0x24ec <_ZN8SPIClass8transferEh>
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	19 df       	rcall	.-462    	; 0x24fa <_ZL6spiRecv>
    26c8:	8a 87       	std	Y+10, r24	; 0x0a
    26ca:	87 ff       	sbrs	r24, 7
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    26ce:	1f 3f       	cpi	r17, 0xFF	; 255
    26d0:	11 f0       	breq	.+4      	; 0x26d6 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    26d2:	1f 5f       	subi	r17, 0xFF	; 255
    26d4:	f8 cf       	rjmp	.-16     	; 0x26c6 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	bf 90       	pop	r11
    26e2:	af 90       	pop	r10
    26e4:	9f 90       	pop	r9
    26e6:	8f 90       	pop	r8
    26e8:	08 95       	ret

000026ea <_ZN7Sd2Card4initEhh>:
    26ea:	7f 92       	push	r7
    26ec:	8f 92       	push	r8
    26ee:	9f 92       	push	r9
    26f0:	af 92       	push	r10
    26f2:	bf 92       	push	r11
    26f4:	cf 92       	push	r12
    26f6:	df 92       	push	r13
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	1f 92       	push	r1
    2706:	1f 92       	push	r1
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	7c 01       	movw	r14, r24
    270e:	76 2e       	mov	r7, r22
    2710:	fc 01       	movw	r30, r24
    2712:	13 86       	std	Z+11, r1	; 0x0b
    2714:	11 86       	std	Z+9, r1	; 0x09
    2716:	16 82       	std	Z+6, r1	; 0x06
    2718:	15 82       	std	Z+5, r1	; 0x05
    271a:	44 83       	std	Z+4, r20	; 0x04
    271c:	49 db       	rcall	.-2414   	; 0x1db0 <millis>
    271e:	6b 01       	movw	r12, r22
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	f7 01       	movw	r30, r14
    2724:	84 81       	ldd	r24, Z+4	; 0x04
    2726:	67 dc       	rcall	.-1842   	; 0x1ff6 <pinMode>
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	f7 01       	movw	r30, r14
    272c:	84 81       	ldd	r24, Z+4	; 0x04
    272e:	9f dc       	rcall	.-1730   	; 0x206e <digitalWrite>
    2730:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN8SPIClass5beginEv>
    2734:	00 e0       	ldi	r16, 0x00	; 0
    2736:	21 e0       	ldi	r18, 0x01	; 1
    2738:	40 e9       	ldi	r20, 0x90	; 144
    273a:	50 ed       	ldi	r21, 0xD0	; 208
    273c:	63 e0       	ldi	r22, 0x03	; 3
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	ce 01       	movw	r24, r28
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	ae de       	rcall	.-676    	; 0x24a2 <_ZN11SPISettingsC1Emhh>
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <_ZL8settings+0x1>
    274e:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <_ZL8settings>
    2752:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN8SPIClass16beginTransactionE11SPISettings>
    2756:	1a e0       	ldi	r17, 0x0A	; 10
    2758:	8f ef       	ldi	r24, 0xFF	; 255
    275a:	c8 de       	rcall	.-624    	; 0x24ec <_ZN8SPIClass8transferEh>
    275c:	11 50       	subi	r17, 0x01	; 1
    275e:	e1 f7       	brne	.-8      	; 0x2758 <_ZN7Sd2Card4initEhh+0x6e>
    2760:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <_ZN8SPIClass13interruptModeE>
    2764:	81 11       	cpse	r24, r1
    2766:	90 de       	rcall	.-736    	; 0x2488 <_ZN8SPIClass14endTransactionEv.part.3>
    2768:	c7 01       	movw	r24, r14
    276a:	d8 de       	rcall	.-592    	; 0x251c <_ZN7Sd2Card13chipSelectLowEv>
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	a9 01       	movw	r20, r18
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	c7 01       	movw	r24, r14
    2776:	71 df       	rcall	.-286    	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    2778:	08 2f       	mov	r16, r24
    277a:	f7 01       	movw	r30, r14
    277c:	82 87       	std	Z+10, r24	; 0x0a
    277e:	81 30       	cpi	r24, 0x01	; 1
    2780:	41 f0       	breq	.+16     	; 0x2792 <_ZN7Sd2Card4initEhh+0xa8>
    2782:	16 db       	rcall	.-2516   	; 0x1db0 <millis>
    2784:	6c 19       	sub	r22, r12
    2786:	7d 09       	sbc	r23, r13
    2788:	61 3d       	cpi	r22, 0xD1	; 209
    278a:	77 40       	sbci	r23, 0x07	; 7
    278c:	78 f3       	brcs	.-34     	; 0x276c <_ZN7Sd2Card4initEhh+0x82>
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	4a c0       	rjmp	.+148    	; 0x2826 <_ZN7Sd2Card4initEhh+0x13c>
    2792:	2a ea       	ldi	r18, 0xAA	; 170
    2794:	31 e0       	ldi	r19, 0x01	; 1
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	68 e0       	ldi	r22, 0x08	; 8
    279c:	c7 01       	movw	r24, r14
    279e:	5d df       	rcall	.-326    	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    27a0:	82 ff       	sbrs	r24, 2
    27a2:	03 c0       	rjmp	.+6      	; 0x27aa <_ZN7Sd2Card4initEhh+0xc0>
    27a4:	f7 01       	movw	r30, r14
    27a6:	03 87       	std	Z+11, r16	; 0x0b
    27a8:	0d c0       	rjmp	.+26     	; 0x27c4 <_ZN7Sd2Card4initEhh+0xda>
    27aa:	04 e0       	ldi	r16, 0x04	; 4
    27ac:	a6 de       	rcall	.-692    	; 0x24fa <_ZL6spiRecv>
    27ae:	f7 01       	movw	r30, r14
    27b0:	82 87       	std	Z+10, r24	; 0x0a
    27b2:	01 50       	subi	r16, 0x01	; 1
    27b4:	d9 f7       	brne	.-10     	; 0x27ac <_ZN7Sd2Card4initEhh+0xc2>
    27b6:	8a 3a       	cpi	r24, 0xAA	; 170
    27b8:	11 f0       	breq	.+4      	; 0x27be <_ZN7Sd2Card4initEhh+0xd4>
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	35 c0       	rjmp	.+106    	; 0x2828 <_ZN7Sd2Card4initEhh+0x13e>
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	f7 01       	movw	r30, r14
    27c2:	83 87       	std	Z+11, r24	; 0x0b
    27c4:	f7 01       	movw	r30, r14
    27c6:	83 85       	ldd	r24, Z+11	; 0x0b
    27c8:	82 30       	cpi	r24, 0x02	; 2
    27ca:	21 f0       	breq	.+8      	; 0x27d4 <_ZN7Sd2Card4initEhh+0xea>
    27cc:	81 2c       	mov	r8, r1
    27ce:	91 2c       	mov	r9, r1
    27d0:	54 01       	movw	r10, r8
    27d2:	05 c0       	rjmp	.+10     	; 0x27de <_ZN7Sd2Card4initEhh+0xf4>
    27d4:	81 2c       	mov	r8, r1
    27d6:	91 2c       	mov	r9, r1
    27d8:	a1 2c       	mov	r10, r1
    27da:	80 e4       	ldi	r24, 0x40	; 64
    27dc:	b8 2e       	mov	r11, r24
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	a9 01       	movw	r20, r18
    27e4:	67 e3       	ldi	r22, 0x37	; 55
    27e6:	c7 01       	movw	r24, r14
    27e8:	38 df       	rcall	.-400    	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    27ea:	a5 01       	movw	r20, r10
    27ec:	94 01       	movw	r18, r8
    27ee:	69 e2       	ldi	r22, 0x29	; 41
    27f0:	c7 01       	movw	r24, r14
    27f2:	33 df       	rcall	.-410    	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    27f4:	f7 01       	movw	r30, r14
    27f6:	82 87       	std	Z+10, r24	; 0x0a
    27f8:	88 23       	and	r24, r24
    27fa:	41 f0       	breq	.+16     	; 0x280c <_ZN7Sd2Card4initEhh+0x122>
    27fc:	d9 da       	rcall	.-2638   	; 0x1db0 <millis>
    27fe:	6c 19       	sub	r22, r12
    2800:	7d 09       	sbc	r23, r13
    2802:	61 3d       	cpi	r22, 0xD1	; 209
    2804:	77 40       	sbci	r23, 0x07	; 7
    2806:	58 f3       	brcs	.-42     	; 0x27de <_ZN7Sd2Card4initEhh+0xf4>
    2808:	88 e0       	ldi	r24, 0x08	; 8
    280a:	0d c0       	rjmp	.+26     	; 0x2826 <_ZN7Sd2Card4initEhh+0x13c>
    280c:	f7 01       	movw	r30, r14
    280e:	83 85       	ldd	r24, Z+11	; 0x0b
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	c1 f4       	brne	.+48     	; 0x2844 <_ZN7Sd2Card4initEhh+0x15a>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	a9 01       	movw	r20, r18
    281a:	6a e3       	ldi	r22, 0x3A	; 58
    281c:	c7 01       	movw	r24, r14
    281e:	1d df       	rcall	.-454    	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    2820:	88 23       	and	r24, r24
    2822:	31 f0       	breq	.+12     	; 0x2830 <_ZN7Sd2Card4initEhh+0x146>
    2824:	86 e0       	ldi	r24, 0x06	; 6
    2826:	f7 01       	movw	r30, r14
    2828:	85 83       	std	Z+5, r24	; 0x05
    282a:	c7 01       	movw	r24, r14
    282c:	68 de       	rcall	.-816    	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    282e:	10 c0       	rjmp	.+32     	; 0x2850 <_ZN7Sd2Card4initEhh+0x166>
    2830:	64 de       	rcall	.-824    	; 0x24fa <_ZL6spiRecv>
    2832:	80 7c       	andi	r24, 0xC0	; 192
    2834:	80 3c       	cpi	r24, 0xC0	; 192
    2836:	19 f4       	brne	.+6      	; 0x283e <_ZN7Sd2Card4initEhh+0x154>
    2838:	83 e0       	ldi	r24, 0x03	; 3
    283a:	f7 01       	movw	r30, r14
    283c:	83 87       	std	Z+11, r24	; 0x0b
    283e:	5d de       	rcall	.-838    	; 0x24fa <_ZL6spiRecv>
    2840:	5c de       	rcall	.-840    	; 0x24fa <_ZL6spiRecv>
    2842:	5b de       	rcall	.-842    	; 0x24fa <_ZL6spiRecv>
    2844:	c7 01       	movw	r24, r14
    2846:	5b de       	rcall	.-842    	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    2848:	67 2d       	mov	r22, r7
    284a:	c7 01       	movw	r24, r14
    284c:	94 de       	rcall	.-728    	; 0x2576 <_ZN7Sd2Card10setSckRateEh>
    284e:	18 2f       	mov	r17, r24
    2850:	81 2f       	mov	r24, r17
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	7f 90       	pop	r7
    2870:	08 95       	ret

00002872 <_ZN7Sd2Card14waitStartBlockEv>:
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
    287c:	99 da       	rcall	.-2766   	; 0x1db0 <millis>
    287e:	8b 01       	movw	r16, r22
    2880:	3c de       	rcall	.-904    	; 0x24fa <_ZL6spiRecv>
    2882:	8a 87       	std	Y+10, r24	; 0x0a
    2884:	8f 3f       	cpi	r24, 0xFF	; 255
    2886:	41 f4       	brne	.+16     	; 0x2898 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    2888:	93 da       	rcall	.-2778   	; 0x1db0 <millis>
    288a:	60 1b       	sub	r22, r16
    288c:	71 0b       	sbc	r23, r17
    288e:	6d 32       	cpi	r22, 0x2D	; 45
    2890:	71 40       	sbci	r23, 0x01	; 1
    2892:	b0 f3       	brcs	.-20     	; 0x2880 <_ZN7Sd2Card14waitStartBlockEv+0xe>
    2894:	8f e0       	ldi	r24, 0x0F	; 15
    2896:	03 c0       	rjmp	.+6      	; 0x289e <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    2898:	8e 3f       	cpi	r24, 0xFE	; 254
    289a:	31 f0       	breq	.+12     	; 0x28a8 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    289c:	8d e0       	ldi	r24, 0x0D	; 13
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	ce 01       	movw	r24, r28
    28a2:	2d de       	rcall	.-934    	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <_ZN7Sd2Card14waitStartBlockEv+0x38>
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	ec 01       	movw	r28, r24
    28c6:	69 01       	movw	r12, r18
    28c8:	c8 01       	movw	r24, r16
    28ca:	82 0f       	add	r24, r18
    28cc:	93 1f       	adc	r25, r19
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	92 40       	sbci	r25, 0x02	; 2
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    28d4:	57 c0       	rjmp	.+174    	; 0x2984 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    28d6:	8e 81       	ldd	r24, Y+6	; 0x06
    28d8:	88 23       	and	r24, r24
    28da:	71 f0       	breq	.+28     	; 0x28f8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    28dc:	88 81       	ld	r24, Y
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	aa 81       	ldd	r26, Y+2	; 0x02
    28e2:	bb 81       	ldd	r27, Y+3	; 0x03
    28e4:	84 17       	cp	r24, r20
    28e6:	95 07       	cpc	r25, r21
    28e8:	a6 07       	cpc	r26, r22
    28ea:	b7 07       	cpc	r27, r23
    28ec:	29 f4       	brne	.+10     	; 0x28f8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    28ee:	8f 81       	ldd	r24, Y+7	; 0x07
    28f0:	98 85       	ldd	r25, Y+8	; 0x08
    28f2:	c8 16       	cp	r12, r24
    28f4:	d9 06       	cpc	r13, r25
    28f6:	00 f5       	brcc	.+64     	; 0x2938 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    28f8:	48 83       	st	Y, r20
    28fa:	59 83       	std	Y+1, r21	; 0x01
    28fc:	6a 83       	std	Y+2, r22	; 0x02
    28fe:	7b 83       	std	Y+3, r23	; 0x03
    2900:	8b 85       	ldd	r24, Y+11	; 0x0b
    2902:	83 30       	cpi	r24, 0x03	; 3
    2904:	39 f0       	breq	.+14     	; 0x2914 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    2906:	89 e0       	ldi	r24, 0x09	; 9
    2908:	44 0f       	add	r20, r20
    290a:	55 1f       	adc	r21, r21
    290c:	66 1f       	adc	r22, r22
    290e:	77 1f       	adc	r23, r23
    2910:	8a 95       	dec	r24
    2912:	d1 f7       	brne	.-12     	; 0x2908 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    2914:	9a 01       	movw	r18, r20
    2916:	ab 01       	movw	r20, r22
    2918:	61 e1       	ldi	r22, 0x11	; 17
    291a:	ce 01       	movw	r24, r28
    291c:	9e de       	rcall	.-708    	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    291e:	88 23       	and	r24, r24
    2920:	19 f0       	breq	.+6      	; 0x2928 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	2e c0       	rjmp	.+92     	; 0x2984 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    2928:	ce 01       	movw	r24, r28
    292a:	a3 df       	rcall	.-186    	; 0x2872 <_ZN7Sd2Card14waitStartBlockEv>
    292c:	88 23       	and	r24, r24
    292e:	51 f1       	breq	.+84     	; 0x2984 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    2930:	18 86       	std	Y+8, r1	; 0x08
    2932:	1f 82       	std	Y+7, r1	; 0x07
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	8e 83       	std	Y+6, r24	; 0x06
    2938:	8f 81       	ldd	r24, Y+7	; 0x07
    293a:	98 85       	ldd	r25, Y+8	; 0x08
    293c:	8c 15       	cp	r24, r12
    293e:	9d 05       	cpc	r25, r13
    2940:	38 f4       	brcc	.+14     	; 0x2950 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    2942:	db dd       	rcall	.-1098   	; 0x24fa <_ZL6spiRecv>
    2944:	8f 81       	ldd	r24, Y+7	; 0x07
    2946:	98 85       	ldd	r25, Y+8	; 0x08
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	98 87       	std	Y+8, r25	; 0x08
    294c:	8f 83       	std	Y+7, r24	; 0x07
    294e:	f4 cf       	rjmp	.-24     	; 0x2938 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    2950:	67 01       	movw	r12, r14
    2952:	e0 0e       	add	r14, r16
    2954:	f1 1e       	adc	r15, r17
    2956:	ce 14       	cp	r12, r14
    2958:	df 04       	cpc	r13, r15
    295a:	29 f0       	breq	.+10     	; 0x2966 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    295c:	ce dd       	rcall	.-1124   	; 0x24fa <_ZL6spiRecv>
    295e:	f6 01       	movw	r30, r12
    2960:	81 93       	st	Z+, r24
    2962:	6f 01       	movw	r12, r30
    2964:	f8 cf       	rjmp	.-16     	; 0x2956 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    2966:	8f 81       	ldd	r24, Y+7	; 0x07
    2968:	98 85       	ldd	r25, Y+8	; 0x08
    296a:	08 0f       	add	r16, r24
    296c:	19 1f       	adc	r17, r25
    296e:	18 87       	std	Y+8, r17	; 0x08
    2970:	0f 83       	std	Y+7, r16	; 0x07
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	88 23       	and	r24, r24
    2976:	19 f0       	breq	.+6      	; 0x297e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    2978:	01 15       	cp	r16, r1
    297a:	12 40       	sbci	r17, 0x02	; 2
    297c:	38 f0       	brcs	.+14     	; 0x298c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    297e:	ce 01       	movw	r24, r28
    2980:	e2 dd       	rcall	.-1084   	; 0x2546 <_ZN7Sd2Card7readEndEv>
    2982:	04 c0       	rjmp	.+8      	; 0x298c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    2984:	ce 01       	movw	r24, r28
    2986:	bb dd       	rcall	.-1162   	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	01 c0       	rjmp	.+2      	; 0x298e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	08 95       	ret

000029a0 <_ZN7Sd2Card8readDataEmjjPh>:
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	01 15       	cp	r16, r1
    29aa:	11 05       	cpc	r17, r1
    29ac:	11 f0       	breq	.+4      	; 0x29b2 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    29ae:	82 df       	rcall	.-252    	; 0x28b4 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    29b0:	01 c0       	rjmp	.+2      	; 0x29b4 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	ff 90       	pop	r15
    29ba:	ef 90       	pop	r14
    29bc:	08 95       	ret

000029be <_ZN7Sd2Card9readBlockEmPh>:
    29be:	ef 92       	push	r14
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	79 01       	movw	r14, r18
    29c8:	00 e0       	ldi	r16, 0x00	; 0
    29ca:	12 e0       	ldi	r17, 0x02	; 2
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	71 df       	rcall	.-286    	; 0x28b4 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	08 95       	ret

000029dc <_ZN7Sd2Card9writeDataEhPKh>:
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	8c 01       	movw	r16, r24
    29ea:	86 2f       	mov	r24, r22
    29ec:	7a 01       	movw	r14, r20
    29ee:	7e dd       	rcall	.-1284   	; 0x24ec <_ZN8SPIClass8transferEh>
    29f0:	e7 01       	movw	r28, r14
    29f2:	8e ef       	ldi	r24, 0xFE	; 254
    29f4:	f8 1a       	sub	r15, r24
    29f6:	89 91       	ld	r24, Y+
    29f8:	79 dd       	rcall	.-1294   	; 0x24ec <_ZN8SPIClass8transferEh>
    29fa:	ce 15       	cp	r28, r14
    29fc:	df 05       	cpc	r29, r15
    29fe:	d9 f7       	brne	.-10     	; 0x29f6 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    2a00:	8f ef       	ldi	r24, 0xFF	; 255
    2a02:	74 dd       	rcall	.-1304   	; 0x24ec <_ZN8SPIClass8transferEh>
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	72 dd       	rcall	.-1308   	; 0x24ec <_ZN8SPIClass8transferEh>
    2a08:	78 dd       	rcall	.-1296   	; 0x24fa <_ZL6spiRecv>
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	82 87       	std	Z+10, r24	; 0x0a
    2a0e:	8f 71       	andi	r24, 0x1F	; 31
    2a10:	85 30       	cpi	r24, 0x05	; 5
    2a12:	31 f0       	breq	.+12     	; 0x2a20 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    2a14:	81 e1       	ldi	r24, 0x11	; 17
    2a16:	85 83       	std	Z+5, r24	; 0x05
    2a18:	c8 01       	movw	r24, r16
    2a1a:	71 dd       	rcall	.-1310   	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	ff 90       	pop	r15
    2a2c:	ef 90       	pop	r14
    2a2e:	08 95       	ret

00002a30 <_ZN7Sd2Card10writeBlockEmPKh>:
    2a30:	0f 93       	push	r16
    2a32:	1f 93       	push	r17
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	ec 01       	movw	r28, r24
    2a3a:	89 01       	movw	r16, r18
    2a3c:	41 15       	cp	r20, r1
    2a3e:	51 05       	cpc	r21, r1
    2a40:	61 05       	cpc	r22, r1
    2a42:	71 05       	cpc	r23, r1
    2a44:	11 f4       	brne	.+4      	; 0x2a4a <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    2a46:	82 e1       	ldi	r24, 0x12	; 18
    2a48:	2d c0       	rjmp	.+90     	; 0x2aa4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2a4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a4c:	83 30       	cpi	r24, 0x03	; 3
    2a4e:	39 f0       	breq	.+14     	; 0x2a5e <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    2a50:	89 e0       	ldi	r24, 0x09	; 9
    2a52:	44 0f       	add	r20, r20
    2a54:	55 1f       	adc	r21, r21
    2a56:	66 1f       	adc	r22, r22
    2a58:	77 1f       	adc	r23, r23
    2a5a:	8a 95       	dec	r24
    2a5c:	d1 f7       	brne	.-12     	; 0x2a52 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    2a5e:	9a 01       	movw	r18, r20
    2a60:	ab 01       	movw	r20, r22
    2a62:	68 e1       	ldi	r22, 0x18	; 24
    2a64:	ce 01       	movw	r24, r28
    2a66:	f9 dd       	rcall	.-1038   	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    2a68:	88 23       	and	r24, r24
    2a6a:	11 f0       	breq	.+4      	; 0x2a70 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    2a6c:	84 e0       	ldi	r24, 0x04	; 4
    2a6e:	1a c0       	rjmp	.+52     	; 0x2aa4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2a70:	a8 01       	movw	r20, r16
    2a72:	6e ef       	ldi	r22, 0xFE	; 254
    2a74:	ce 01       	movw	r24, r28
    2a76:	b2 df       	rcall	.-156    	; 0x29dc <_ZN7Sd2Card9writeDataEhPKh>
    2a78:	88 23       	and	r24, r24
    2a7a:	a9 f0       	breq	.+42     	; 0x2aa6 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    2a7c:	68 e5       	ldi	r22, 0x58	; 88
    2a7e:	72 e0       	ldi	r23, 0x02	; 2
    2a80:	ce 01       	movw	r24, r28
    2a82:	d3 dd       	rcall	.-1114   	; 0x262a <_ZN7Sd2Card11waitNotBusyEj>
    2a84:	81 11       	cpse	r24, r1
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    2a88:	85 e1       	ldi	r24, 0x15	; 21
    2a8a:	0c c0       	rjmp	.+24     	; 0x2aa4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	a9 01       	movw	r20, r18
    2a92:	6d e0       	ldi	r22, 0x0D	; 13
    2a94:	ce 01       	movw	r24, r28
    2a96:	e1 dd       	rcall	.-1086   	; 0x265a <_ZN7Sd2Card11cardCommandEhm>
    2a98:	81 11       	cpse	r24, r1
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    2a9c:	2e dd       	rcall	.-1444   	; 0x24fa <_ZL6spiRecv>
    2a9e:	88 23       	and	r24, r24
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    2aa2:	84 e1       	ldi	r24, 0x14	; 20
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	2a dd       	rcall	.-1452   	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	03 c0       	rjmp	.+6      	; 0x2ab4 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    2aae:	ce 01       	movw	r24, r28
    2ab0:	26 dd       	rcall	.-1460   	; 0x24fe <_ZN7Sd2Card14chipSelectHighEv>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	08 95       	ret

00002abe <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2abe:	e8 e8       	ldi	r30, 0x88	; 136
    2ac0:	f6 e0       	ldi	r31, 0x06	; 6
    2ac2:	80 e5       	ldi	r24, 0x50	; 80
    2ac4:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2ac6:	11 82       	std	Z+1, r1	; 0x01
    2ac8:	08 95       	ret

00002aca <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	ec 01       	movw	r28, r24
    2ad0:	9c 01       	movw	r18, r24
    2ad2:	2a 5f       	subi	r18, 0xFA	; 250
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae2:	0f d6       	rcall	.+3102   	; 0x3702 <_ZN8SdVolume15allocContiguousEmPm>
    2ae4:	88 23       	and	r24, r24
    2ae6:	a1 f0       	breq	.+40     	; 0x2b10 <_ZN6SdFile10addClusterEv+0x46>
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	a9 8d       	ldd	r26, Y+25	; 0x19
    2aee:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2af0:	89 2b       	or	r24, r25
    2af2:	8a 2b       	or	r24, r26
    2af4:	8b 2b       	or	r24, r27
    2af6:	59 f4       	brne	.+22     	; 0x2b0e <_ZN6SdFile10addClusterEv+0x44>
    2af8:	8e 81       	ldd	r24, Y+6	; 0x06
    2afa:	9f 81       	ldd	r25, Y+7	; 0x07
    2afc:	a8 85       	ldd	r26, Y+8	; 0x08
    2afe:	b9 85       	ldd	r27, Y+9	; 0x09
    2b00:	8f 8b       	std	Y+23, r24	; 0x17
    2b02:	98 8f       	std	Y+24, r25	; 0x18
    2b04:	a9 8f       	std	Y+25, r26	; 0x19
    2b06:	ba 8f       	std	Y+26, r27	; 0x1a
    2b08:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0a:	80 68       	ori	r24, 0x80	; 128
    2b0c:	8c 83       	std	Y+4, r24	; 0x04
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	08 95       	ret

00002b16 <_ZN6SdFile13cacheDirEntryEh>:
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	ec 01       	movw	r28, r24
    2b1c:	46 2f       	mov	r20, r22
    2b1e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b20:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b22:	88 89       	ldd	r24, Y+16	; 0x10
    2b24:	99 89       	ldd	r25, Y+17	; 0x11
    2b26:	2a d4       	rcall	.+2132   	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    2b28:	88 23       	and	r24, r24
    2b2a:	41 f0       	breq	.+16     	; 0x2b3c <_ZN6SdFile13cacheDirEntryEh+0x26>
    2b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b2e:	20 e2       	ldi	r18, 0x20	; 32
    2b30:	82 9f       	mul	r24, r18
    2b32:	c0 01       	movw	r24, r0
    2b34:	11 24       	eor	r1, r1
    2b36:	8d 56       	subi	r24, 0x6D	; 109
    2b38:	99 4f       	sbci	r25, 0xF9	; 249
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	08 95       	ret

00002b46 <_ZN6SdFile8openRootEP8SdVolume>:
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	fc 01       	movw	r30, r24
    2b50:	25 81       	ldd	r18, Z+5	; 0x05
    2b52:	22 23       	and	r18, r18
    2b54:	11 f0       	breq	.+4      	; 0x2b5a <_ZN6SdFile8openRootEP8SdVolume+0x14>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	41 c0       	rjmp	.+130    	; 0x2bdc <_ZN6SdFile8openRootEP8SdVolume+0x96>
    2b5a:	8b 01       	movw	r16, r22
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	fb 01       	movw	r30, r22
    2b60:	87 89       	ldd	r24, Z+23	; 0x17
    2b62:	80 31       	cpi	r24, 0x10	; 16
    2b64:	b1 f4       	brne	.+44     	; 0x2b92 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	8d 83       	std	Y+5, r24	; 0x05
    2b6a:	1f 8a       	std	Y+23, r1	; 0x17
    2b6c:	18 8e       	std	Y+24, r1	; 0x18
    2b6e:	19 8e       	std	Y+25, r1	; 0x19
    2b70:	1a 8e       	std	Y+26, r1	; 0x1a
    2b72:	80 8d       	ldd	r24, Z+24	; 0x18
    2b74:	91 8d       	ldd	r25, Z+25	; 0x19
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	25 e0       	ldi	r18, 0x05	; 5
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	aa 1f       	adc	r26, r26
    2b82:	bb 1f       	adc	r27, r27
    2b84:	2a 95       	dec	r18
    2b86:	d1 f7       	brne	.-12     	; 0x2b7c <_ZN6SdFile8openRootEP8SdVolume+0x36>
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
    2b8a:	9c 8b       	std	Y+20, r25	; 0x14
    2b8c:	ad 8b       	std	Y+21, r26	; 0x15
    2b8e:	be 8b       	std	Y+22, r27	; 0x16
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <_ZN6SdFile8openRootEP8SdVolume+0x74>
    2b92:	80 32       	cpi	r24, 0x20	; 32
    2b94:	01 f7       	brne	.-64     	; 0x2b56 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	8d 83       	std	Y+5, r24	; 0x05
    2b9a:	fb 01       	movw	r30, r22
    2b9c:	42 8d       	ldd	r20, Z+26	; 0x1a
    2b9e:	53 8d       	ldd	r21, Z+27	; 0x1b
    2ba0:	64 8d       	ldd	r22, Z+28	; 0x1c
    2ba2:	75 8d       	ldd	r23, Z+29	; 0x1d
    2ba4:	4f 8b       	std	Y+23, r20	; 0x17
    2ba6:	58 8f       	std	Y+24, r21	; 0x18
    2ba8:	69 8f       	std	Y+25, r22	; 0x19
    2baa:	7a 8f       	std	Y+26, r23	; 0x1a
    2bac:	9e 01       	movw	r18, r28
    2bae:	2d 5e       	subi	r18, 0xED	; 237
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	9e d4       	rcall	.+2364   	; 0x34f2 <_ZNK8SdVolume9chainSizeEmPm>
    2bb6:	88 23       	and	r24, r24
    2bb8:	71 f2       	breq	.-100    	; 0x2b56 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2bba:	1c 8f       	std	Y+28, r17	; 0x1c
    2bbc:	0b 8f       	std	Y+27, r16	; 0x1b
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	8c 83       	std	Y+4, r24	; 0x04
    2bc2:	1e 82       	std	Y+6, r1	; 0x06
    2bc4:	1f 82       	std	Y+7, r1	; 0x07
    2bc6:	18 86       	std	Y+8, r1	; 0x08
    2bc8:	19 86       	std	Y+9, r1	; 0x09
    2bca:	1a 86       	std	Y+10, r1	; 0x0a
    2bcc:	1b 86       	std	Y+11, r1	; 0x0b
    2bce:	1c 86       	std	Y+12, r1	; 0x0c
    2bd0:	1d 86       	std	Y+13, r1	; 0x0d
    2bd2:	1e 86       	std	Y+14, r1	; 0x0e
    2bd4:	1f 86       	std	Y+15, r1	; 0x0f
    2bd6:	18 8a       	std	Y+16, r1	; 0x10
    2bd8:	19 8a       	std	Y+17, r1	; 0x11
    2bda:	1a 8a       	std	Y+18, r1	; 0x12
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	08 95       	ret

00002be6 <_ZN6SdFile4readEPvj>:
    2be6:	2f 92       	push	r2
    2be8:	3f 92       	push	r3
    2bea:	4f 92       	push	r4
    2bec:	5f 92       	push	r5
    2bee:	6f 92       	push	r6
    2bf0:	7f 92       	push	r7
    2bf2:	8f 92       	push	r8
    2bf4:	9f 92       	push	r9
    2bf6:	af 92       	push	r10
    2bf8:	bf 92       	push	r11
    2bfa:	cf 92       	push	r12
    2bfc:	df 92       	push	r13
    2bfe:	ef 92       	push	r14
    2c00:	ff 92       	push	r15
    2c02:	0f 93       	push	r16
    2c04:	1f 93       	push	r17
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	ec 01       	movw	r28, r24
    2c0c:	5b 01       	movw	r10, r22
    2c0e:	4a 01       	movw	r8, r20
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	81 11       	cpse	r24, r1
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <_ZN6SdFile4readEPvj+0x36>
    2c16:	8f ef       	ldi	r24, 0xFF	; 255
    2c18:	9f ef       	ldi	r25, 0xFF	; 255
    2c1a:	d4 c0       	rjmp	.+424    	; 0x2dc4 <_ZN6SdFile4readEPvj+0x1de>
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	80 ff       	sbrs	r24, 0
    2c20:	fa cf       	rjmp	.-12     	; 0x2c16 <_ZN6SdFile4readEPvj+0x30>
    2c22:	4b 88       	ldd	r4, Y+19	; 0x13
    2c24:	5c 88       	ldd	r5, Y+20	; 0x14
    2c26:	6d 88       	ldd	r6, Y+21	; 0x15
    2c28:	7e 88       	ldd	r7, Y+22	; 0x16
    2c2a:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c2c:	5b 85       	ldd	r21, Y+11	; 0x0b
    2c2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c30:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c32:	c4 01       	movw	r24, r8
    2c34:	a0 e0       	ldi	r26, 0x00	; 0
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	93 01       	movw	r18, r6
    2c3a:	82 01       	movw	r16, r4
    2c3c:	04 1b       	sub	r16, r20
    2c3e:	15 0b       	sbc	r17, r21
    2c40:	26 0b       	sbc	r18, r22
    2c42:	37 0b       	sbc	r19, r23
    2c44:	08 17       	cp	r16, r24
    2c46:	19 07       	cpc	r17, r25
    2c48:	2a 07       	cpc	r18, r26
    2c4a:	3b 07       	cpc	r19, r27
    2c4c:	18 f4       	brcc	.+6      	; 0x2c54 <_ZN6SdFile4readEPvj+0x6e>
    2c4e:	42 01       	movw	r8, r4
    2c50:	84 1a       	sub	r8, r20
    2c52:	95 0a       	sbc	r9, r21
    2c54:	24 01       	movw	r4, r8
    2c56:	1e 01       	movw	r2, r28
    2c58:	26 e0       	ldi	r18, 0x06	; 6
    2c5a:	22 0e       	add	r2, r18
    2c5c:	31 1c       	adc	r3, r1
    2c5e:	41 14       	cp	r4, r1
    2c60:	51 04       	cpc	r5, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <_ZN6SdFile4readEPvj+0x80>
    2c64:	7d c0       	rjmp	.+250    	; 0x2d60 <_ZN6SdFile4readEPvj+0x17a>
    2c66:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c68:	5b 85       	ldd	r21, Y+11	; 0x0b
    2c6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c6e:	6a 01       	movw	r12, r20
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	d8 22       	and	r13, r24
    2c74:	ed 81       	ldd	r30, Y+5	; 0x05
    2c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7a:	8a 01       	movw	r16, r20
    2c7c:	9b 01       	movw	r18, r22
    2c7e:	f9 e0       	ldi	r31, 0x09	; 9
    2c80:	36 95       	lsr	r19
    2c82:	27 95       	ror	r18
    2c84:	17 95       	ror	r17
    2c86:	07 95       	ror	r16
    2c88:	fa 95       	dec	r31
    2c8a:	d1 f7       	brne	.-12     	; 0x2c80 <_ZN6SdFile4readEPvj+0x9a>
    2c8c:	e2 30       	cpi	r30, 0x02	; 2
    2c8e:	61 f4       	brne	.+24     	; 0x2ca8 <_ZN6SdFile4readEPvj+0xc2>
    2c90:	fc 01       	movw	r30, r24
    2c92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c94:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c96:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2c98:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2c9a:	bc 01       	movw	r22, r24
    2c9c:	cd 01       	movw	r24, r26
    2c9e:	60 0f       	add	r22, r16
    2ca0:	71 1f       	adc	r23, r17
    2ca2:	82 1f       	adc	r24, r18
    2ca4:	93 1f       	adc	r25, r19
    2ca6:	3e c0       	rjmp	.+124    	; 0x2d24 <_ZN6SdFile4readEPvj+0x13e>
    2ca8:	fc 01       	movw	r30, r24
    2caa:	74 80       	ldd	r7, Z+4	; 0x04
    2cac:	7a 94       	dec	r7
    2cae:	70 22       	and	r7, r16
    2cb0:	c1 14       	cp	r12, r1
    2cb2:	d1 04       	cpc	r13, r1
    2cb4:	c1 f4       	brne	.+48     	; 0x2ce6 <_ZN6SdFile4readEPvj+0x100>
    2cb6:	71 10       	cpse	r7, r1
    2cb8:	16 c0       	rjmp	.+44     	; 0x2ce6 <_ZN6SdFile4readEPvj+0x100>
    2cba:	45 2b       	or	r20, r21
    2cbc:	46 2b       	or	r20, r22
    2cbe:	47 2b       	or	r20, r23
    2cc0:	49 f4       	brne	.+18     	; 0x2cd4 <_ZN6SdFile4readEPvj+0xee>
    2cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc6:	a9 8d       	ldd	r26, Y+25	; 0x19
    2cc8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2cca:	8e 83       	std	Y+6, r24	; 0x06
    2ccc:	9f 83       	std	Y+7, r25	; 0x07
    2cce:	a8 87       	std	Y+8, r26	; 0x08
    2cd0:	b9 87       	std	Y+9, r27	; 0x09
    2cd2:	09 c0       	rjmp	.+18     	; 0x2ce6 <_ZN6SdFile4readEPvj+0x100>
    2cd4:	4e 81       	ldd	r20, Y+6	; 0x06
    2cd6:	5f 81       	ldd	r21, Y+7	; 0x07
    2cd8:	68 85       	ldd	r22, Y+8	; 0x08
    2cda:	79 85       	ldd	r23, Y+9	; 0x09
    2cdc:	91 01       	movw	r18, r2
    2cde:	87 d3       	rcall	.+1806   	; 0x33ee <_ZNK8SdVolume6fatGetEmPm>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <_ZN6SdFile4readEPvj+0x100>
    2ce4:	98 cf       	rjmp	.-208    	; 0x2c16 <_ZN6SdFile4readEPvj+0x30>
    2ce6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2ce8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2cea:	8e 81       	ldd	r24, Y+6	; 0x06
    2cec:	9f 81       	ldd	r25, Y+7	; 0x07
    2cee:	a8 85       	ldd	r26, Y+8	; 0x08
    2cf0:	b9 85       	ldd	r27, Y+9	; 0x09
    2cf2:	02 97       	sbiw	r24, 0x02	; 2
    2cf4:	a1 09       	sbc	r26, r1
    2cf6:	b1 09       	sbc	r27, r1
    2cf8:	05 84       	ldd	r0, Z+13	; 0x0d
    2cfa:	04 c0       	rjmp	.+8      	; 0x2d04 <_ZN6SdFile4readEPvj+0x11e>
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	aa 1f       	adc	r26, r26
    2d02:	bb 1f       	adc	r27, r27
    2d04:	0a 94       	dec	r0
    2d06:	d2 f7       	brpl	.-12     	; 0x2cfc <_ZN6SdFile4readEPvj+0x116>
    2d08:	46 85       	ldd	r20, Z+14	; 0x0e
    2d0a:	57 85       	ldd	r21, Z+15	; 0x0f
    2d0c:	60 89       	ldd	r22, Z+16	; 0x10
    2d0e:	71 89       	ldd	r23, Z+17	; 0x11
    2d10:	84 0f       	add	r24, r20
    2d12:	95 1f       	adc	r25, r21
    2d14:	a6 1f       	adc	r26, r22
    2d16:	b7 1f       	adc	r27, r23
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	67 0d       	add	r22, r7
    2d1e:	71 1d       	adc	r23, r1
    2d20:	81 1d       	adc	r24, r1
    2d22:	91 1d       	adc	r25, r1
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	32 e0       	ldi	r19, 0x02	; 2
    2d28:	2c 19       	sub	r18, r12
    2d2a:	3d 09       	sbc	r19, r13
    2d2c:	32 01       	movw	r6, r4
    2d2e:	24 15       	cp	r18, r4
    2d30:	35 05       	cpc	r19, r5
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <_ZN6SdFile4readEPvj+0x150>
    2d34:	39 01       	movw	r6, r18
    2d36:	2c 81       	ldd	r18, Y+4	; 0x04
    2d38:	26 fd       	sbrc	r18, 6
    2d3a:	04 c0       	rjmp	.+8      	; 0x2d44 <_ZN6SdFile4readEPvj+0x15e>
    2d3c:	61 14       	cp	r6, r1
    2d3e:	f2 e0       	ldi	r31, 0x02	; 2
    2d40:	7f 06       	cpc	r7, r31
    2d42:	71 f5       	brne	.+92     	; 0x2da0 <_ZN6SdFile4readEPvj+0x1ba>
    2d44:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2d48:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d4c:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d50:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2d54:	60 17       	cp	r22, r16
    2d56:	71 07       	cpc	r23, r17
    2d58:	82 07       	cpc	r24, r18
    2d5a:	93 07       	cpc	r25, r19
    2d5c:	19 f4       	brne	.+6      	; 0x2d64 <_ZN6SdFile4readEPvj+0x17e>
    2d5e:	20 c0       	rjmp	.+64     	; 0x2da0 <_ZN6SdFile4readEPvj+0x1ba>
    2d60:	c4 01       	movw	r24, r8
    2d62:	30 c0       	rjmp	.+96     	; 0x2dc4 <_ZN6SdFile4readEPvj+0x1de>
    2d64:	75 01       	movw	r14, r10
    2d66:	83 01       	movw	r16, r6
    2d68:	96 01       	movw	r18, r12
    2d6a:	ab 01       	movw	r20, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN8SdVolume7sdCard_E>
    2d72:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN8SdVolume7sdCard_E+0x1>
    2d76:	14 de       	rcall	.-984    	; 0x29a0 <_ZN7Sd2Card8readDataEmjjPh>
    2d78:	88 23       	and	r24, r24
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <_ZN6SdFile4readEPvj+0x198>
    2d7c:	4c cf       	rjmp	.-360    	; 0x2c16 <_ZN6SdFile4readEPvj+0x30>
    2d7e:	a6 0c       	add	r10, r6
    2d80:	b7 1c       	adc	r11, r7
    2d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d86:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d88:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d8a:	86 0d       	add	r24, r6
    2d8c:	97 1d       	adc	r25, r7
    2d8e:	a1 1d       	adc	r26, r1
    2d90:	b1 1d       	adc	r27, r1
    2d92:	8a 87       	std	Y+10, r24	; 0x0a
    2d94:	9b 87       	std	Y+11, r25	; 0x0b
    2d96:	ac 87       	std	Y+12, r26	; 0x0c
    2d98:	bd 87       	std	Y+13, r27	; 0x0d
    2d9a:	46 18       	sub	r4, r6
    2d9c:	57 08       	sbc	r5, r7
    2d9e:	5f cf       	rjmp	.-322    	; 0x2c5e <_ZN6SdFile4readEPvj+0x78>
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	ec d2       	rcall	.+1496   	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    2da4:	88 23       	and	r24, r24
    2da6:	09 f4       	brne	.+2      	; 0x2daa <_ZN6SdFile4readEPvj+0x1c4>
    2da8:	36 cf       	rjmp	.-404    	; 0x2c16 <_ZN6SdFile4readEPvj+0x30>
    2daa:	f6 01       	movw	r30, r12
    2dac:	ed 56       	subi	r30, 0x6D	; 109
    2dae:	f9 4f       	sbci	r31, 0xF9	; 249
    2db0:	d5 01       	movw	r26, r10
    2db2:	cf 01       	movw	r24, r30
    2db4:	86 0d       	add	r24, r6
    2db6:	97 1d       	adc	r25, r7
    2db8:	8e 17       	cp	r24, r30
    2dba:	9f 07       	cpc	r25, r31
    2dbc:	01 f3       	breq	.-64     	; 0x2d7e <_ZN6SdFile4readEPvj+0x198>
    2dbe:	21 91       	ld	r18, Z+
    2dc0:	2d 93       	st	X+, r18
    2dc2:	fa cf       	rjmp	.-12     	; 0x2db8 <_ZN6SdFile4readEPvj+0x1d2>
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	bf 90       	pop	r11
    2dd6:	af 90       	pop	r10
    2dd8:	9f 90       	pop	r9
    2dda:	8f 90       	pop	r8
    2ddc:	7f 90       	pop	r7
    2dde:	6f 90       	pop	r6
    2de0:	5f 90       	pop	r5
    2de2:	4f 90       	pop	r4
    2de4:	3f 90       	pop	r3
    2de6:	2f 90       	pop	r2
    2de8:	08 95       	ret

00002dea <_ZN6SdFile7seekSetEm>:
    2dea:	8f 92       	push	r8
    2dec:	9f 92       	push	r9
    2dee:	af 92       	push	r10
    2df0:	bf 92       	push	r11
    2df2:	cf 92       	push	r12
    2df4:	df 92       	push	r13
    2df6:	ef 92       	push	r14
    2df8:	ff 92       	push	r15
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	ec 01       	movw	r28, r24
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	81 11       	cpse	r24, r1
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <_ZN6SdFile7seekSetEm+0x24>
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	77 c0       	rjmp	.+238    	; 0x2efc <_ZN6SdFile7seekSetEm+0x112>
    2e0e:	0b 89       	ldd	r16, Y+19	; 0x13
    2e10:	1c 89       	ldd	r17, Y+20	; 0x14
    2e12:	2d 89       	ldd	r18, Y+21	; 0x15
    2e14:	3e 89       	ldd	r19, Y+22	; 0x16
    2e16:	04 17       	cp	r16, r20
    2e18:	15 07       	cpc	r17, r21
    2e1a:	26 07       	cpc	r18, r22
    2e1c:	37 07       	cpc	r19, r23
    2e1e:	a8 f3       	brcs	.-22     	; 0x2e0a <_ZN6SdFile7seekSetEm+0x20>
    2e20:	6a 01       	movw	r12, r20
    2e22:	7b 01       	movw	r14, r22
    2e24:	82 30       	cpi	r24, 0x02	; 2
    2e26:	29 f4       	brne	.+10     	; 0x2e32 <_ZN6SdFile7seekSetEm+0x48>
    2e28:	ca 86       	std	Y+10, r12	; 0x0a
    2e2a:	db 86       	std	Y+11, r13	; 0x0b
    2e2c:	ec 86       	std	Y+12, r14	; 0x0c
    2e2e:	fd 86       	std	Y+13, r15	; 0x0d
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <_ZN6SdFile7seekSetEm+0x62>
    2e32:	c1 14       	cp	r12, r1
    2e34:	d1 04       	cpc	r13, r1
    2e36:	e1 04       	cpc	r14, r1
    2e38:	f1 04       	cpc	r15, r1
    2e3a:	51 f4       	brne	.+20     	; 0x2e50 <_ZN6SdFile7seekSetEm+0x66>
    2e3c:	1e 82       	std	Y+6, r1	; 0x06
    2e3e:	1f 82       	std	Y+7, r1	; 0x07
    2e40:	18 86       	std	Y+8, r1	; 0x08
    2e42:	19 86       	std	Y+9, r1	; 0x09
    2e44:	1a 86       	std	Y+10, r1	; 0x0a
    2e46:	1b 86       	std	Y+11, r1	; 0x0b
    2e48:	1c 86       	std	Y+12, r1	; 0x0c
    2e4a:	1d 86       	std	Y+13, r1	; 0x0d
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	56 c0       	rjmp	.+172    	; 0x2efc <_ZN6SdFile7seekSetEm+0x112>
    2e50:	8a 84       	ldd	r8, Y+10	; 0x0a
    2e52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e54:	ac 84       	ldd	r10, Y+12	; 0x0c
    2e56:	bd 84       	ldd	r11, Y+13	; 0x0d
    2e58:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2e5a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2e5c:	25 85       	ldd	r18, Z+13	; 0x0d
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	27 5f       	subi	r18, 0xF7	; 247
    2e62:	3f 4f       	sbci	r19, 0xFF	; 255
    2e64:	b5 01       	movw	r22, r10
    2e66:	a4 01       	movw	r20, r8
    2e68:	41 50       	subi	r20, 0x01	; 1
    2e6a:	51 09       	sbc	r21, r1
    2e6c:	61 09       	sbc	r22, r1
    2e6e:	71 09       	sbc	r23, r1
    2e70:	02 2e       	mov	r0, r18
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <_ZN6SdFile7seekSetEm+0x92>
    2e74:	76 95       	lsr	r23
    2e76:	67 95       	ror	r22
    2e78:	57 95       	ror	r21
    2e7a:	47 95       	ror	r20
    2e7c:	0a 94       	dec	r0
    2e7e:	d2 f7       	brpl	.-12     	; 0x2e74 <_ZN6SdFile7seekSetEm+0x8a>
    2e80:	d7 01       	movw	r26, r14
    2e82:	c6 01       	movw	r24, r12
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	a1 09       	sbc	r26, r1
    2e88:	b1 09       	sbc	r27, r1
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <_ZN6SdFile7seekSetEm+0xaa>
    2e8c:	b6 95       	lsr	r27
    2e8e:	a7 95       	ror	r26
    2e90:	97 95       	ror	r25
    2e92:	87 95       	ror	r24
    2e94:	2a 95       	dec	r18
    2e96:	d2 f7       	brpl	.-12     	; 0x2e8c <_ZN6SdFile7seekSetEm+0xa2>
    2e98:	84 17       	cp	r24, r20
    2e9a:	95 07       	cpc	r25, r21
    2e9c:	a6 07       	cpc	r26, r22
    2e9e:	b7 07       	cpc	r27, r23
    2ea0:	20 f0       	brcs	.+8      	; 0x2eaa <_ZN6SdFile7seekSetEm+0xc0>
    2ea2:	89 28       	or	r8, r9
    2ea4:	8a 28       	or	r8, r10
    2ea6:	8b 28       	or	r8, r11
    2ea8:	71 f4       	brne	.+28     	; 0x2ec6 <_ZN6SdFile7seekSetEm+0xdc>
    2eaa:	4f 89       	ldd	r20, Y+23	; 0x17
    2eac:	58 8d       	ldd	r21, Y+24	; 0x18
    2eae:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb2:	4e 83       	std	Y+6, r20	; 0x06
    2eb4:	5f 83       	std	Y+7, r21	; 0x07
    2eb6:	68 87       	std	Y+8, r22	; 0x08
    2eb8:	79 87       	std	Y+9, r23	; 0x09
    2eba:	4c 01       	movw	r8, r24
    2ebc:	5d 01       	movw	r10, r26
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	0a 5f       	subi	r16, 0xFA	; 250
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	15 c0       	rjmp	.+42     	; 0x2ef0 <_ZN6SdFile7seekSetEm+0x106>
    2ec6:	84 1b       	sub	r24, r20
    2ec8:	95 0b       	sbc	r25, r21
    2eca:	a6 0b       	sbc	r26, r22
    2ecc:	b7 0b       	sbc	r27, r23
    2ece:	f5 cf       	rjmp	.-22     	; 0x2eba <_ZN6SdFile7seekSetEm+0xd0>
    2ed0:	4e 81       	ldd	r20, Y+6	; 0x06
    2ed2:	5f 81       	ldd	r21, Y+7	; 0x07
    2ed4:	68 85       	ldd	r22, Y+8	; 0x08
    2ed6:	79 85       	ldd	r23, Y+9	; 0x09
    2ed8:	98 01       	movw	r18, r16
    2eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ede:	87 d2       	rcall	.+1294   	; 0x33ee <_ZNK8SdVolume6fatGetEmPm>
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	89 1a       	sub	r8, r25
    2ee4:	91 08       	sbc	r9, r1
    2ee6:	a1 08       	sbc	r10, r1
    2ee8:	b1 08       	sbc	r11, r1
    2eea:	88 23       	and	r24, r24
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <_ZN6SdFile7seekSetEm+0x106>
    2eee:	8d cf       	rjmp	.-230    	; 0x2e0a <_ZN6SdFile7seekSetEm+0x20>
    2ef0:	81 14       	cp	r8, r1
    2ef2:	91 04       	cpc	r9, r1
    2ef4:	a1 04       	cpc	r10, r1
    2ef6:	b1 04       	cpc	r11, r1
    2ef8:	59 f7       	brne	.-42     	; 0x2ed0 <_ZN6SdFile7seekSetEm+0xe6>
    2efa:	96 cf       	rjmp	.-212    	; 0x2e28 <_ZN6SdFile7seekSetEm+0x3e>
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	cf 90       	pop	r12
    2f0c:	bf 90       	pop	r11
    2f0e:	af 90       	pop	r10
    2f10:	9f 90       	pop	r9
    2f12:	8f 90       	pop	r8
    2f14:	08 95       	ret

00002f16 <_ZN6SdFile4syncEv>:
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	ec 01       	movw	r28, r24
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	88 23       	and	r24, r24
    2f24:	b9 f1       	breq	.+110    	; 0x2f94 <_ZN6SdFile4syncEv+0x7e>
    2f26:	8c 81       	ldd	r24, Y+4	; 0x04
    2f28:	87 ff       	sbrs	r24, 7
    2f2a:	2f c0       	rjmp	.+94     	; 0x2f8a <_ZN6SdFile4syncEv+0x74>
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	ce 01       	movw	r24, r28
    2f30:	f2 dd       	rcall	.-1052   	; 0x2b16 <_ZN6SdFile13cacheDirEntryEh>
    2f32:	8c 01       	movw	r16, r24
    2f34:	89 2b       	or	r24, r25
    2f36:	71 f1       	breq	.+92     	; 0x2f94 <_ZN6SdFile4syncEv+0x7e>
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	82 30       	cpi	r24, 0x02	; 2
    2f3c:	48 f4       	brcc	.+18     	; 0x2f50 <_ZN6SdFile4syncEv+0x3a>
    2f3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f40:	9c 89       	ldd	r25, Y+20	; 0x14
    2f42:	ad 89       	ldd	r26, Y+21	; 0x15
    2f44:	be 89       	ldd	r27, Y+22	; 0x16
    2f46:	f8 01       	movw	r30, r16
    2f48:	84 8f       	std	Z+28, r24	; 0x1c
    2f4a:	95 8f       	std	Z+29, r25	; 0x1d
    2f4c:	a6 8f       	std	Z+30, r26	; 0x1e
    2f4e:	b7 8f       	std	Z+31, r27	; 0x1f
    2f50:	8f 89       	ldd	r24, Y+23	; 0x17
    2f52:	98 8d       	ldd	r25, Y+24	; 0x18
    2f54:	a9 8d       	ldd	r26, Y+25	; 0x19
    2f56:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2f58:	f8 01       	movw	r30, r16
    2f5a:	93 8f       	std	Z+27, r25	; 0x1b
    2f5c:	82 8f       	std	Z+26, r24	; 0x1a
    2f5e:	b5 8b       	std	Z+21, r27	; 0x15
    2f60:	a4 8b       	std	Z+20, r26	; 0x14
    2f62:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <_ZN6SdFile9dateTime_E>
    2f66:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <_ZN6SdFile9dateTime_E+0x1>
    2f6a:	30 97       	sbiw	r30, 0x00	; 0
    2f6c:	59 f0       	breq	.+22     	; 0x2f84 <_ZN6SdFile4syncEv+0x6e>
    2f6e:	b8 01       	movw	r22, r16
    2f70:	6a 5e       	subi	r22, 0xEA	; 234
    2f72:	7f 4f       	sbci	r23, 0xFF	; 255
    2f74:	c8 01       	movw	r24, r16
    2f76:	48 96       	adiw	r24, 0x18	; 24
    2f78:	19 95       	eicall
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 8d       	ldd	r24, Z+24	; 0x18
    2f7e:	91 8d       	ldd	r25, Z+25	; 0x19
    2f80:	93 8b       	std	Z+19, r25	; 0x13
    2f82:	82 8b       	std	Z+18, r24	; 0x12
    2f84:	8c 81       	ldd	r24, Y+4	; 0x04
    2f86:	8f 77       	andi	r24, 0x7F	; 127
    2f88:	8c 83       	std	Y+4, r24	; 0x04
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	bb c1       	rjmp	.+886    	; 0x330a <_ZN8SdVolume10cacheFlushEv>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	1f 91       	pop	r17
    2f9c:	0f 91       	pop	r16
    2f9e:	08 95       	ret

00002fa0 <_ZN6SdFile5closeEv>:
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	ec 01       	movw	r28, r24
    2fa6:	b7 df       	rcall	.-146    	; 0x2f16 <_ZN6SdFile4syncEv>
    2fa8:	88 23       	and	r24, r24
    2faa:	11 f0       	breq	.+4      	; 0x2fb0 <_ZN6SdFile5closeEv+0x10>
    2fac:	1d 82       	std	Y+5, r1	; 0x05
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	08 95       	ret

00002fb6 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2fb6:	2f 92       	push	r2
    2fb8:	3f 92       	push	r3
    2fba:	4f 92       	push	r4
    2fbc:	5f 92       	push	r5
    2fbe:	6f 92       	push	r6
    2fc0:	7f 92       	push	r7
    2fc2:	8f 92       	push	r8
    2fc4:	9f 92       	push	r9
    2fc6:	af 92       	push	r10
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <_ZN6SdFile5writeEPKvj+0x26>
    2fdc:	1f 92       	push	r1
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	8c 01       	movw	r16, r24
    2fe4:	6b 01       	movw	r12, r22
    2fe6:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2fe8:	dc 01       	movw	r26, r24
    2fea:	15 96       	adiw	r26, 0x05	; 5
    2fec:	8c 91       	ld	r24, X
    2fee:	15 97       	sbiw	r26, 0x05	; 5
    2ff0:	81 30       	cpi	r24, 0x01	; 1
    2ff2:	c1 f4       	brne	.+48     	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>
    2ff4:	14 96       	adiw	r26, 0x04	; 4
    2ff6:	8c 91       	ld	r24, X
    2ff8:	81 ff       	sbrs	r24, 1
    2ffa:	14 c0       	rjmp	.+40     	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2ffc:	82 ff       	sbrs	r24, 2
    2ffe:	1c c0       	rjmp	.+56     	; 0x3038 <_ZN6SdFile5writeEPKvj+0x82>
    3000:	f8 01       	movw	r30, r16
    3002:	43 89       	ldd	r20, Z+19	; 0x13
    3004:	54 89       	ldd	r21, Z+20	; 0x14
    3006:	65 89       	ldd	r22, Z+21	; 0x15
    3008:	76 89       	ldd	r23, Z+22	; 0x16
    300a:	82 85       	ldd	r24, Z+10	; 0x0a
    300c:	93 85       	ldd	r25, Z+11	; 0x0b
    300e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3010:	b5 85       	ldd	r27, Z+13	; 0x0d
    3012:	84 17       	cp	r24, r20
    3014:	95 07       	cpc	r25, r21
    3016:	a6 07       	cpc	r26, r22
    3018:	b7 07       	cpc	r27, r23
    301a:	71 f0       	breq	.+28     	; 0x3038 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    301c:	c8 01       	movw	r24, r16
    301e:	e5 de       	rcall	.-566    	; 0x2dea <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    3020:	81 11       	cpse	r24, r1
    3022:	0a c0       	rjmp	.+20     	; 0x3038 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	d8 01       	movw	r26, r16
    302a:	13 96       	adiw	r26, 0x03	; 3
    302c:	9c 93       	st	X, r25
    302e:	8e 93       	st	-X, r24
    3030:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	42 c1       	rjmp	.+644    	; 0x32bc <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3038:	41 01       	movw	r8, r2
    303a:	82 c0       	rjmp	.+260    	; 0x3140 <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    303c:	5b 96       	adiw	r26, 0x1b	; 27
    303e:	8d 91       	ld	r24, X+
    3040:	9c 91       	ld	r25, X
    3042:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3044:	fc 01       	movw	r30, r24
    3046:	74 80       	ldd	r7, Z+4	; 0x04
    3048:	2f ef       	ldi	r18, 0xFF	; 255
    304a:	27 0d       	add	r18, r7
    304c:	2a 01       	movw	r4, r20
    304e:	3b 01       	movw	r6, r22
    3050:	39 e0       	ldi	r19, 0x09	; 9
    3052:	76 94       	lsr	r7
    3054:	67 94       	ror	r6
    3056:	57 94       	ror	r5
    3058:	47 94       	ror	r4
    305a:	3a 95       	dec	r19
    305c:	d1 f7       	brne	.-12     	; 0x3052 <_ZN6SdFile5writeEPKvj+0x9c>
    305e:	72 2e       	mov	r7, r18
    3060:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3062:	7a 01       	movw	r14, r20
    3064:	f1 e0       	ldi	r31, 0x01	; 1
    3066:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    3068:	77 20       	and	r7, r7
    306a:	09 f4       	brne	.+2      	; 0x306e <_ZN6SdFile5writeEPKvj+0xb8>
    306c:	75 c0       	rjmp	.+234    	; 0x3158 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	92 e0       	ldi	r25, 0x02	; 2
    3072:	8e 19       	sub	r24, r14
    3074:	9f 09       	sbc	r25, r15
    3076:	54 01       	movw	r10, r8
    3078:	88 15       	cp	r24, r8
    307a:	99 05       	cpc	r25, r9
    307c:	08 f4       	brcc	.+2      	; 0x3080 <_ZN6SdFile5writeEPKvj+0xca>
    307e:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3080:	d8 01       	movw	r26, r16
    3082:	5b 96       	adiw	r26, 0x1b	; 27
    3084:	2d 91       	ld	r18, X+
    3086:	3c 91       	ld	r19, X
    3088:	5c 97       	sbiw	r26, 0x1c	; 28
    308a:	16 96       	adiw	r26, 0x06	; 6
    308c:	8d 91       	ld	r24, X+
    308e:	9d 91       	ld	r25, X+
    3090:	0d 90       	ld	r0, X+
    3092:	bc 91       	ld	r27, X
    3094:	a0 2d       	mov	r26, r0
    3096:	02 97       	sbiw	r24, 0x02	; 2
    3098:	a1 09       	sbc	r26, r1
    309a:	b1 09       	sbc	r27, r1
    309c:	f9 01       	movw	r30, r18
    309e:	05 84       	ldd	r0, Z+13	; 0x0d
    30a0:	04 c0       	rjmp	.+8      	; 0x30aa <_ZN6SdFile5writeEPKvj+0xf4>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	aa 1f       	adc	r26, r26
    30a8:	bb 1f       	adc	r27, r27
    30aa:	0a 94       	dec	r0
    30ac:	d2 f7       	brpl	.-12     	; 0x30a2 <_ZN6SdFile5writeEPKvj+0xec>
    30ae:	46 85       	ldd	r20, Z+14	; 0x0e
    30b0:	57 85       	ldd	r21, Z+15	; 0x0f
    30b2:	60 89       	ldd	r22, Z+16	; 0x10
    30b4:	71 89       	ldd	r23, Z+17	; 0x11
    30b6:	84 0f       	add	r24, r20
    30b8:	95 1f       	adc	r25, r21
    30ba:	a6 1f       	adc	r26, r22
    30bc:	b7 1f       	adc	r27, r23
    30be:	9c 01       	movw	r18, r24
    30c0:	ad 01       	movw	r20, r26
    30c2:	27 0d       	add	r18, r7
    30c4:	31 1d       	adc	r19, r1
    30c6:	41 1d       	adc	r20, r1
    30c8:	51 1d       	adc	r21, r1
    30ca:	29 01       	movw	r4, r18
    30cc:	3a 01       	movw	r6, r20
    if (n == 512) {
    30ce:	a1 14       	cp	r10, r1
    30d0:	32 e0       	ldi	r19, 0x02	; 2
    30d2:	b3 06       	cpc	r11, r19
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <_ZN6SdFile5writeEPKvj+0x122>
    30d6:	85 c0       	rjmp	.+266    	; 0x31e2 <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    30d8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    30dc:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    30e0:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    30e4:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    30e8:	48 16       	cp	r4, r24
    30ea:	59 06       	cpc	r5, r25
    30ec:	6a 06       	cpc	r6, r26
    30ee:	7b 06       	cpc	r7, r27
    30f0:	59 f4       	brne	.+22     	; 0x3108 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    30f2:	8f ef       	ldi	r24, 0xFF	; 255
    30f4:	9f ef       	ldi	r25, 0xFF	; 255
    30f6:	dc 01       	movw	r26, r24
    30f8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    30fc:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3100:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3104:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3108:	96 01       	movw	r18, r12
    310a:	b3 01       	movw	r22, r6
    310c:	a2 01       	movw	r20, r4
    310e:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN8SdVolume7sdCard_E>
    3112:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN8SdVolume7sdCard_E+0x1>
    3116:	8c dc       	rcall	.-1768   	; 0x2a30 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3118:	88 23       	and	r24, r24
    311a:	09 f4       	brne	.+2      	; 0x311e <_ZN6SdFile5writeEPKvj+0x168>
    311c:	83 cf       	rjmp	.-250    	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    311e:	9e ef       	ldi	r25, 0xFE	; 254
    3120:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    3122:	8a 18       	sub	r8, r10
    3124:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    3126:	f8 01       	movw	r30, r16
    3128:	82 85       	ldd	r24, Z+10	; 0x0a
    312a:	93 85       	ldd	r25, Z+11	; 0x0b
    312c:	a4 85       	ldd	r26, Z+12	; 0x0c
    312e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3130:	8a 0d       	add	r24, r10
    3132:	9b 1d       	adc	r25, r11
    3134:	a1 1d       	adc	r26, r1
    3136:	b1 1d       	adc	r27, r1
    3138:	82 87       	std	Z+10, r24	; 0x0a
    313a:	93 87       	std	Z+11, r25	; 0x0b
    313c:	a4 87       	std	Z+12, r26	; 0x0c
    313e:	b5 87       	std	Z+13, r27	; 0x0d
    3140:	d8 01       	movw	r26, r16
    3142:	1a 96       	adiw	r26, 0x0a	; 10
    3144:	4d 91       	ld	r20, X+
    3146:	5d 91       	ld	r21, X+
    3148:	6d 91       	ld	r22, X+
    314a:	7c 91       	ld	r23, X
    314c:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    314e:	81 14       	cp	r8, r1
    3150:	91 04       	cpc	r9, r1
    3152:	09 f0       	breq	.+2      	; 0x3156 <_ZN6SdFile5writeEPKvj+0x1a0>
    3154:	73 cf       	rjmp	.-282    	; 0x303c <_ZN6SdFile5writeEPKvj+0x86>
    3156:	83 c0       	rjmp	.+262    	; 0x325e <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3158:	e1 14       	cp	r14, r1
    315a:	f1 04       	cpc	r15, r1
    315c:	09 f0       	breq	.+2      	; 0x3160 <_ZN6SdFile5writeEPKvj+0x1aa>
    315e:	87 cf       	rjmp	.-242    	; 0x306e <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    3160:	16 96       	adiw	r26, 0x06	; 6
    3162:	4d 91       	ld	r20, X+
    3164:	5d 91       	ld	r21, X+
    3166:	6d 91       	ld	r22, X+
    3168:	7c 91       	ld	r23, X
    316a:	19 97       	sbiw	r26, 0x09	; 9
    316c:	41 15       	cp	r20, r1
    316e:	51 05       	cpc	r21, r1
    3170:	61 05       	cpc	r22, r1
    3172:	71 05       	cpc	r23, r1
    3174:	59 f4       	brne	.+22     	; 0x318c <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    3176:	57 96       	adiw	r26, 0x17	; 23
    3178:	8d 91       	ld	r24, X+
    317a:	9d 91       	ld	r25, X+
    317c:	0d 90       	ld	r0, X+
    317e:	bc 91       	ld	r27, X
    3180:	a0 2d       	mov	r26, r0
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	a1 05       	cpc	r26, r1
    3186:	b1 05       	cpc	r27, r1
    3188:	31 f5       	brne	.+76     	; 0x31d6 <_ZN6SdFile5writeEPKvj+0x220>
    318a:	20 c0       	rjmp	.+64     	; 0x31cc <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    318c:	9e 01       	movw	r18, r28
    318e:	2f 5f       	subi	r18, 0xFF	; 255
    3190:	3f 4f       	sbci	r19, 0xFF	; 255
    3192:	2d d1       	rcall	.+602    	; 0x33ee <_ZNK8SdVolume6fatGetEmPm>
    3194:	88 23       	and	r24, r24
    3196:	09 f4       	brne	.+2      	; 0x319a <_ZN6SdFile5writeEPKvj+0x1e4>
    3198:	4d cf       	rjmp	.-358    	; 0x3034 <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	ab 81       	ldd	r26, Y+3	; 0x03
    31a0:	bc 81       	ldd	r27, Y+4	; 0x04
    31a2:	f8 01       	movw	r30, r16
    31a4:	23 8d       	ldd	r18, Z+27	; 0x1b
    31a6:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    31a8:	f9 01       	movw	r30, r18
    31aa:	27 89       	ldd	r18, Z+23	; 0x17
    31ac:	20 31       	cpi	r18, 0x10	; 16
    31ae:	29 f0       	breq	.+10     	; 0x31ba <_ZN6SdFile5writeEPKvj+0x204>
    31b0:	48 ef       	ldi	r20, 0xF8	; 248
    31b2:	5f ef       	ldi	r21, 0xFF	; 255
    31b4:	6f ef       	ldi	r22, 0xFF	; 255
    31b6:	7f e0       	ldi	r23, 0x0F	; 15
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <_ZN6SdFile5writeEPKvj+0x20c>
    31ba:	48 ef       	ldi	r20, 0xF8	; 248
    31bc:	5f ef       	ldi	r21, 0xFF	; 255
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	84 17       	cp	r24, r20
    31c4:	95 07       	cpc	r25, r21
    31c6:	a6 07       	cpc	r26, r22
    31c8:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    31ca:	28 f0       	brcs	.+10     	; 0x31d6 <_ZN6SdFile5writeEPKvj+0x220>
    31cc:	c8 01       	movw	r24, r16
    31ce:	7d dc       	rcall	.-1798   	; 0x2aca <_ZN6SdFile10addClusterEv>
    31d0:	81 11       	cpse	r24, r1
    31d2:	4d cf       	rjmp	.-358    	; 0x306e <_ZN6SdFile5writeEPKvj+0xb8>
    31d4:	27 cf       	rjmp	.-434    	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    31d6:	f8 01       	movw	r30, r16
    31d8:	86 83       	std	Z+6, r24	; 0x06
    31da:	97 83       	std	Z+7, r25	; 0x07
    31dc:	a0 87       	std	Z+8, r26	; 0x08
    31de:	b1 87       	std	Z+9, r27	; 0x09
    31e0:	46 cf       	rjmp	.-372    	; 0x306e <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    31e2:	e1 14       	cp	r14, r1
    31e4:	f1 04       	cpc	r15, r1
    31e6:	21 f5       	brne	.+72     	; 0x3230 <_ZN6SdFile5writeEPKvj+0x27a>
    31e8:	d8 01       	movw	r26, r16
    31ea:	1a 96       	adiw	r26, 0x0a	; 10
    31ec:	4d 91       	ld	r20, X+
    31ee:	5d 91       	ld	r21, X+
    31f0:	6d 91       	ld	r22, X+
    31f2:	7c 91       	ld	r23, X
    31f4:	1d 97       	sbiw	r26, 0x0d	; 13
    31f6:	53 96       	adiw	r26, 0x13	; 19
    31f8:	8d 91       	ld	r24, X+
    31fa:	9d 91       	ld	r25, X+
    31fc:	0d 90       	ld	r0, X+
    31fe:	bc 91       	ld	r27, X
    3200:	a0 2d       	mov	r26, r0
    3202:	48 17       	cp	r20, r24
    3204:	59 07       	cpc	r21, r25
    3206:	6a 07       	cpc	r22, r26
    3208:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    320a:	90 f0       	brcs	.+36     	; 0x3230 <_ZN6SdFile5writeEPKvj+0x27a>
    320c:	7e d0       	rcall	.+252    	; 0x330a <_ZN8SdVolume10cacheFlushEv>
    320e:	88 23       	and	r24, r24
    3210:	09 f4       	brne	.+2      	; 0x3214 <_ZN6SdFile5writeEPKvj+0x25e>
    3212:	08 cf       	rjmp	.-496    	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    3214:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3218:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    321c:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3220:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3224:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    3228:	81 60       	ori	r24, 0x01	; 1
    322a:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    322e:	07 c0       	rjmp	.+14     	; 0x323e <_ZN6SdFile5writeEPKvj+0x288>
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	c3 01       	movw	r24, r6
    3234:	b2 01       	movw	r22, r4
    3236:	a2 d0       	rcall	.+324    	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    3238:	88 23       	and	r24, r24
    323a:	09 f4       	brne	.+2      	; 0x323e <_ZN6SdFile5writeEPKvj+0x288>
    323c:	f3 ce       	rjmp	.-538    	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>
    323e:	d6 01       	movw	r26, r12
    3240:	f7 01       	movw	r30, r14
    3242:	ed 56       	subi	r30, 0x6D	; 109
    3244:	f9 4f       	sbci	r31, 0xF9	; 249
    3246:	9f 01       	movw	r18, r30
    3248:	2a 0d       	add	r18, r10
    324a:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    324c:	2e 17       	cp	r18, r30
    324e:	3f 07       	cpc	r19, r31
    3250:	19 f0       	breq	.+6      	; 0x3258 <_ZN6SdFile5writeEPKvj+0x2a2>
    3252:	8d 91       	ld	r24, X+
    3254:	81 93       	st	Z+, r24
    3256:	fa cf       	rjmp	.-12     	; 0x324c <_ZN6SdFile5writeEPKvj+0x296>
    3258:	ca 0c       	add	r12, r10
    325a:	db 1c       	adc	r13, r11
    325c:	62 cf       	rjmp	.-316    	; 0x3122 <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    325e:	d8 01       	movw	r26, r16
    3260:	53 96       	adiw	r26, 0x13	; 19
    3262:	cd 90       	ld	r12, X+
    3264:	dd 90       	ld	r13, X+
    3266:	ed 90       	ld	r14, X+
    3268:	fc 90       	ld	r15, X
    326a:	56 97       	sbiw	r26, 0x16	; 22
    326c:	14 96       	adiw	r26, 0x04	; 4
    326e:	8c 91       	ld	r24, X
    3270:	c4 16       	cp	r12, r20
    3272:	d5 06       	cpc	r13, r21
    3274:	e6 06       	cpc	r14, r22
    3276:	f7 06       	cpc	r15, r23
    3278:	40 f4       	brcc	.+16     	; 0x328a <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    327a:	f8 01       	movw	r30, r16
    327c:	43 8b       	std	Z+19, r20	; 0x13
    327e:	54 8b       	std	Z+20, r21	; 0x14
    3280:	65 8b       	std	Z+21, r22	; 0x15
    3282:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    3284:	80 68       	ori	r24, 0x80	; 128
    3286:	84 83       	std	Z+4, r24	; 0x04
    3288:	0d c0       	rjmp	.+26     	; 0x32a4 <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    328a:	20 91 8a 06 	lds	r18, 0x068A	; 0x80068a <_ZN6SdFile9dateTime_E>
    328e:	30 91 8b 06 	lds	r19, 0x068B	; 0x80068b <_ZN6SdFile9dateTime_E+0x1>
    3292:	23 2b       	or	r18, r19
    3294:	39 f0       	breq	.+14     	; 0x32a4 <_ZN6SdFile5writeEPKvj+0x2ee>
    3296:	21 14       	cp	r2, r1
    3298:	31 04       	cpc	r3, r1
    329a:	21 f0       	breq	.+8      	; 0x32a4 <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    329c:	80 68       	ori	r24, 0x80	; 128
    329e:	d8 01       	movw	r26, r16
    32a0:	14 96       	adiw	r26, 0x04	; 4
    32a2:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    32a4:	f8 01       	movw	r30, r16
    32a6:	84 81       	ldd	r24, Z+4	; 0x04
    32a8:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <_ZN6SdFile5writeEPKvj+0x2fa>
    32ac:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    32ae:	06 c0       	rjmp	.+12     	; 0x32bc <_ZN6SdFile5writeEPKvj+0x306>
    32b0:	c8 01       	movw	r24, r16
    32b2:	31 de       	rcall	.-926    	; 0x2f16 <_ZN6SdFile4syncEv>
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <_ZN6SdFile5writeEPKvj+0x304>
    32b8:	b5 ce       	rjmp	.-662    	; 0x3024 <_ZN6SdFile5writeEPKvj+0x6e>
    32ba:	f8 cf       	rjmp	.-16     	; 0x32ac <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	df 90       	pop	r13
    32d2:	cf 90       	pop	r12
    32d4:	bf 90       	pop	r11
    32d6:	af 90       	pop	r10
    32d8:	9f 90       	pop	r9
    32da:	8f 90       	pop	r8
    32dc:	7f 90       	pop	r7
    32de:	6f 90       	pop	r6
    32e0:	5f 90       	pop	r5
    32e2:	4f 90       	pop	r4
    32e4:	3f 90       	pop	r3
    32e6:	2f 90       	pop	r2
    32e8:	08 95       	ret

000032ea <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	1f 92       	push	r1
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	be 01       	movw	r22, r28
    32fc:	6f 5f       	subi	r22, 0xFF	; 255
    32fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3300:	5a de       	rcall	.-844    	; 0x2fb6 <_ZN6SdFile5writeEPKvj>
}
    3302:	0f 90       	pop	r0
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	08 95       	ret

0000330a <_ZN8SdVolume10cacheFlushEv>:

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    330a:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    330e:	88 23       	and	r24, r24
    3310:	99 f1       	breq	.+102    	; 0x3378 <_ZN8SdVolume10cacheFlushEv+0x6e>
    3312:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3316:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    331a:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    331e:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3322:	23 e9       	ldi	r18, 0x93	; 147
    3324:	36 e0       	ldi	r19, 0x06	; 6
    3326:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN8SdVolume7sdCard_E>
    332a:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN8SdVolume7sdCard_E+0x1>
    332e:	80 db       	rcall	.-2304   	; 0x2a30 <_ZN7Sd2Card10writeBlockEmPKh>
    3330:	81 11       	cpse	r24, r1
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <_ZN8SdVolume10cacheFlushEv+0x2e>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	08 95       	ret
    3338:	40 91 8c 06 	lds	r20, 0x068C	; 0x80068c <_ZN8SdVolume17cacheMirrorBlock_E>
    333c:	50 91 8d 06 	lds	r21, 0x068D	; 0x80068d <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3340:	60 91 8e 06 	lds	r22, 0x068E	; 0x80068e <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3344:	70 91 8f 06 	lds	r23, 0x068F	; 0x80068f <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3348:	41 15       	cp	r20, r1
    334a:	51 05       	cpc	r21, r1
    334c:	61 05       	cpc	r22, r1
    334e:	71 05       	cpc	r23, r1
    3350:	89 f0       	breq	.+34     	; 0x3374 <_ZN8SdVolume10cacheFlushEv+0x6a>
    3352:	23 e9       	ldi	r18, 0x93	; 147
    3354:	36 e0       	ldi	r19, 0x06	; 6
    3356:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN8SdVolume7sdCard_E>
    335a:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN8SdVolume7sdCard_E+0x1>
    335e:	68 db       	rcall	.-2352   	; 0x2a30 <_ZN7Sd2Card10writeBlockEmPKh>
    3360:	88 23       	and	r24, r24
    3362:	41 f3       	breq	.-48     	; 0x3334 <_ZN8SdVolume10cacheFlushEv+0x2a>
    3364:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <_ZN8SdVolume17cacheMirrorBlock_E>
    3368:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    336c:	10 92 8e 06 	sts	0x068E, r1	; 0x80068e <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3370:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3374:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	08 95       	ret

0000337c <_ZN8SdVolume13cacheRawBlockEmh>:
    337c:	cf 92       	push	r12
    337e:	df 92       	push	r13
    3380:	ef 92       	push	r14
    3382:	ff 92       	push	r15
    3384:	cf 93       	push	r28
    3386:	6b 01       	movw	r12, r22
    3388:	7c 01       	movw	r14, r24
    338a:	c4 2f       	mov	r28, r20
    338c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3390:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3394:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3398:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    339c:	8c 15       	cp	r24, r12
    339e:	9d 05       	cpc	r25, r13
    33a0:	ae 05       	cpc	r26, r14
    33a2:	bf 05       	cpc	r27, r15
    33a4:	c1 f0       	breq	.+48     	; 0x33d6 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    33a6:	b1 df       	rcall	.-158    	; 0x330a <_ZN8SdVolume10cacheFlushEv>
    33a8:	81 11       	cpse	r24, r1
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	19 c0       	rjmp	.+50     	; 0x33e2 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    33b0:	23 e9       	ldi	r18, 0x93	; 147
    33b2:	36 e0       	ldi	r19, 0x06	; 6
    33b4:	b7 01       	movw	r22, r14
    33b6:	a6 01       	movw	r20, r12
    33b8:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN8SdVolume7sdCard_E>
    33bc:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <_ZN8SdVolume7sdCard_E+0x1>
    33c0:	fe da       	rcall	.-2564   	; 0x29be <_ZN7Sd2Card9readBlockEmPh>
    33c2:	88 23       	and	r24, r24
    33c4:	99 f3       	breq	.-26     	; 0x33ac <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    33c6:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    33ca:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    33ce:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    33d2:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    33d6:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    33da:	c8 2b       	or	r28, r24
    33dc:	c0 93 90 06 	sts	0x0690, r28	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	cf 91       	pop	r28
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	df 90       	pop	r13
    33ea:	cf 90       	pop	r12
    33ec:	08 95       	ret

000033ee <_ZNK8SdVolume6fatGetEmPm>:
    33ee:	8f 92       	push	r8
    33f0:	9f 92       	push	r9
    33f2:	af 92       	push	r10
    33f4:	bf 92       	push	r11
    33f6:	cf 92       	push	r12
    33f8:	df 92       	push	r13
    33fa:	ef 92       	push	r14
    33fc:	ff 92       	push	r15
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	fc 01       	movw	r30, r24
    3408:	81 85       	ldd	r24, Z+9	; 0x09
    340a:	92 85       	ldd	r25, Z+10	; 0x0a
    340c:	a3 85       	ldd	r26, Z+11	; 0x0b
    340e:	b4 85       	ldd	r27, Z+12	; 0x0c
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	a1 1d       	adc	r26, r1
    3414:	b1 1d       	adc	r27, r1
    3416:	84 17       	cp	r24, r20
    3418:	95 07       	cpc	r25, r21
    341a:	a6 07       	cpc	r26, r22
    341c:	b7 07       	cpc	r27, r23
    341e:	10 f4       	brcc	.+4      	; 0x3424 <_ZNK8SdVolume6fatGetEmPm+0x36>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	5a c0       	rjmp	.+180    	; 0x34d8 <_ZNK8SdVolume6fatGetEmPm+0xea>
    3424:	83 88       	ldd	r8, Z+19	; 0x13
    3426:	94 88       	ldd	r9, Z+20	; 0x14
    3428:	a5 88       	ldd	r10, Z+21	; 0x15
    342a:	b6 88       	ldd	r11, Z+22	; 0x16
    342c:	87 89       	ldd	r24, Z+23	; 0x17
    342e:	80 31       	cpi	r24, 0x10	; 16
    3430:	29 f4       	brne	.+10     	; 0x343c <_ZNK8SdVolume6fatGetEmPm+0x4e>
    3432:	bb 27       	eor	r27, r27
    3434:	a7 2f       	mov	r26, r23
    3436:	96 2f       	mov	r25, r22
    3438:	85 2f       	mov	r24, r21
    343a:	09 c0       	rjmp	.+18     	; 0x344e <_ZNK8SdVolume6fatGetEmPm+0x60>
    343c:	db 01       	movw	r26, r22
    343e:	ca 01       	movw	r24, r20
    3440:	c7 e0       	ldi	r28, 0x07	; 7
    3442:	b6 95       	lsr	r27
    3444:	a7 95       	ror	r26
    3446:	97 95       	ror	r25
    3448:	87 95       	ror	r24
    344a:	ca 95       	dec	r28
    344c:	d1 f7       	brne	.-12     	; 0x3442 <_ZNK8SdVolume6fatGetEmPm+0x54>
    344e:	e9 01       	movw	r28, r18
    3450:	6a 01       	movw	r12, r20
    3452:	7b 01       	movw	r14, r22
    3454:	8f 01       	movw	r16, r30
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	68 0d       	add	r22, r8
    345c:	79 1d       	adc	r23, r9
    345e:	8a 1d       	adc	r24, r10
    3460:	9b 1d       	adc	r25, r11
    3462:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3466:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    346a:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    346e:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3472:	68 15       	cp	r22, r8
    3474:	79 05       	cpc	r23, r9
    3476:	8a 05       	cpc	r24, r10
    3478:	9b 05       	cpc	r25, r11
    347a:	91 f4       	brne	.+36     	; 0x34a0 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    347c:	f8 01       	movw	r30, r16
    347e:	87 89       	ldd	r24, Z+23	; 0x17
    3480:	80 31       	cpi	r24, 0x10	; 16
    3482:	99 f4       	brne	.+38     	; 0x34aa <_ZNK8SdVolume6fatGetEmPm+0xbc>
    3484:	dd 24       	eor	r13, r13
    3486:	ee 24       	eor	r14, r14
    3488:	ff 24       	eor	r15, r15
    348a:	c6 01       	movw	r24, r12
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	fc 01       	movw	r30, r24
    3492:	ed 56       	subi	r30, 0x6D	; 109
    3494:	f9 4f       	sbci	r31, 0xF9	; 249
    3496:	80 81       	ld	r24, Z
    3498:	91 81       	ldd	r25, Z+1	; 0x01
    349a:	a0 e0       	ldi	r26, 0x00	; 0
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	17 c0       	rjmp	.+46     	; 0x34ce <_ZNK8SdVolume6fatGetEmPm+0xe0>
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	6c df       	rcall	.-296    	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    34a4:	81 11       	cpse	r24, r1
    34a6:	ea cf       	rjmp	.-44     	; 0x347c <_ZNK8SdVolume6fatGetEmPm+0x8e>
    34a8:	bb cf       	rjmp	.-138    	; 0x3420 <_ZNK8SdVolume6fatGetEmPm+0x32>
    34aa:	e8 94       	clt
    34ac:	c7 f8       	bld	r12, 7
    34ae:	dd 24       	eor	r13, r13
    34b0:	ee 24       	eor	r14, r14
    34b2:	ff 24       	eor	r15, r15
    34b4:	c6 01       	movw	r24, r12
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	fc 01       	movw	r30, r24
    34c0:	ed 56       	subi	r30, 0x6D	; 109
    34c2:	f9 4f       	sbci	r31, 0xF9	; 249
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	a2 81       	ldd	r26, Z+2	; 0x02
    34ca:	b3 81       	ldd	r27, Z+3	; 0x03
    34cc:	bf 70       	andi	r27, 0x0F	; 15
    34ce:	88 83       	st	Y, r24
    34d0:	99 83       	std	Y+1, r25	; 0x01
    34d2:	aa 83       	std	Y+2, r26	; 0x02
    34d4:	bb 83       	std	Y+3, r27	; 0x03
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	1f 91       	pop	r17
    34de:	0f 91       	pop	r16
    34e0:	ff 90       	pop	r15
    34e2:	ef 90       	pop	r14
    34e4:	df 90       	pop	r13
    34e6:	cf 90       	pop	r12
    34e8:	bf 90       	pop	r11
    34ea:	af 90       	pop	r10
    34ec:	9f 90       	pop	r9
    34ee:	8f 90       	pop	r8
    34f0:	08 95       	ret

000034f2 <_ZNK8SdVolume9chainSizeEmPm>:
    34f2:	4f 92       	push	r4
    34f4:	5f 92       	push	r5
    34f6:	6f 92       	push	r6
    34f8:	7f 92       	push	r7
    34fa:	af 92       	push	r10
    34fc:	bf 92       	push	r11
    34fe:	cf 92       	push	r12
    3500:	df 92       	push	r13
    3502:	ef 92       	push	r14
    3504:	ff 92       	push	r15
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	00 d0       	rcall	.+0      	; 0x3510 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    3510:	1f 92       	push	r1
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	8c 01       	movw	r16, r24
    3518:	49 83       	std	Y+1, r20	; 0x01
    351a:	5a 83       	std	Y+2, r21	; 0x02
    351c:	6b 83       	std	Y+3, r22	; 0x03
    351e:	7c 83       	std	Y+4, r23	; 0x04
    3520:	59 01       	movw	r10, r18
    3522:	c1 2c       	mov	r12, r1
    3524:	d1 2c       	mov	r13, r1
    3526:	76 01       	movw	r14, r12
    3528:	41 2c       	mov	r4, r1
    352a:	82 e0       	ldi	r24, 0x02	; 2
    352c:	58 2e       	mov	r5, r24
    352e:	61 2c       	mov	r6, r1
    3530:	71 2c       	mov	r7, r1
    3532:	49 81       	ldd	r20, Y+1	; 0x01
    3534:	5a 81       	ldd	r21, Y+2	; 0x02
    3536:	6b 81       	ldd	r22, Y+3	; 0x03
    3538:	7c 81       	ldd	r23, Y+4	; 0x04
    353a:	9e 01       	movw	r18, r28
    353c:	2f 5f       	subi	r18, 0xFF	; 255
    353e:	3f 4f       	sbci	r19, 0xFF	; 255
    3540:	c8 01       	movw	r24, r16
    3542:	55 df       	rcall	.-342    	; 0x33ee <_ZNK8SdVolume6fatGetEmPm>
    3544:	88 23       	and	r24, r24
    3546:	51 f1       	breq	.+84     	; 0x359c <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    3548:	d3 01       	movw	r26, r6
    354a:	c2 01       	movw	r24, r4
    354c:	f8 01       	movw	r30, r16
    354e:	05 84       	ldd	r0, Z+13	; 0x0d
    3550:	04 c0       	rjmp	.+8      	; 0x355a <_ZNK8SdVolume9chainSizeEmPm+0x68>
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	aa 1f       	adc	r26, r26
    3558:	bb 1f       	adc	r27, r27
    355a:	0a 94       	dec	r0
    355c:	d2 f7       	brpl	.-12     	; 0x3552 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    355e:	c8 0e       	add	r12, r24
    3560:	d9 1e       	adc	r13, r25
    3562:	ea 1e       	adc	r14, r26
    3564:	fb 1e       	adc	r15, r27
    3566:	49 81       	ldd	r20, Y+1	; 0x01
    3568:	5a 81       	ldd	r21, Y+2	; 0x02
    356a:	6b 81       	ldd	r22, Y+3	; 0x03
    356c:	7c 81       	ldd	r23, Y+4	; 0x04
    356e:	87 89       	ldd	r24, Z+23	; 0x17
    3570:	80 31       	cpi	r24, 0x10	; 16
    3572:	29 f0       	breq	.+10     	; 0x357e <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    3574:	88 ef       	ldi	r24, 0xF8	; 248
    3576:	9f ef       	ldi	r25, 0xFF	; 255
    3578:	af ef       	ldi	r26, 0xFF	; 255
    357a:	bf e0       	ldi	r27, 0x0F	; 15
    357c:	04 c0       	rjmp	.+8      	; 0x3586 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    357e:	88 ef       	ldi	r24, 0xF8	; 248
    3580:	9f ef       	ldi	r25, 0xFF	; 255
    3582:	a0 e0       	ldi	r26, 0x00	; 0
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	48 17       	cp	r20, r24
    3588:	59 07       	cpc	r21, r25
    358a:	6a 07       	cpc	r22, r26
    358c:	7b 07       	cpc	r23, r27
    358e:	88 f2       	brcs	.-94     	; 0x3532 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    3590:	f5 01       	movw	r30, r10
    3592:	c0 82       	st	Z, r12
    3594:	d1 82       	std	Z+1, r13	; 0x01
    3596:	e2 82       	std	Z+2, r14	; 0x02
    3598:	f3 82       	std	Z+3, r15	; 0x03
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	ff 90       	pop	r15
    35ae:	ef 90       	pop	r14
    35b0:	df 90       	pop	r13
    35b2:	cf 90       	pop	r12
    35b4:	bf 90       	pop	r11
    35b6:	af 90       	pop	r10
    35b8:	7f 90       	pop	r7
    35ba:	6f 90       	pop	r6
    35bc:	5f 90       	pop	r5
    35be:	4f 90       	pop	r4
    35c0:	08 95       	ret

000035c2 <_ZN8SdVolume6fatPutEmm>:
    35c2:	4f 92       	push	r4
    35c4:	5f 92       	push	r5
    35c6:	6f 92       	push	r6
    35c8:	7f 92       	push	r7
    35ca:	8f 92       	push	r8
    35cc:	9f 92       	push	r9
    35ce:	af 92       	push	r10
    35d0:	bf 92       	push	r11
    35d2:	cf 92       	push	r12
    35d4:	df 92       	push	r13
    35d6:	ef 92       	push	r14
    35d8:	ff 92       	push	r15
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
    35e2:	ec 01       	movw	r28, r24
    35e4:	42 30       	cpi	r20, 0x02	; 2
    35e6:	51 05       	cpc	r21, r1
    35e8:	61 05       	cpc	r22, r1
    35ea:	71 05       	cpc	r23, r1
    35ec:	10 f4       	brcc	.+4      	; 0x35f2 <_ZN8SdVolume6fatPutEmm+0x30>
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	77 c0       	rjmp	.+238    	; 0x36e0 <_ZN8SdVolume6fatPutEmm+0x11e>
    35f2:	89 85       	ldd	r24, Y+9	; 0x09
    35f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    35f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	a1 1d       	adc	r26, r1
    35fe:	b1 1d       	adc	r27, r1
    3600:	84 17       	cp	r24, r20
    3602:	95 07       	cpc	r25, r21
    3604:	a6 07       	cpc	r26, r22
    3606:	b7 07       	cpc	r27, r23
    3608:	90 f3       	brcs	.-28     	; 0x35ee <_ZN8SdVolume6fatPutEmm+0x2c>
    360a:	cb 88       	ldd	r12, Y+19	; 0x13
    360c:	dc 88       	ldd	r13, Y+20	; 0x14
    360e:	ed 88       	ldd	r14, Y+21	; 0x15
    3610:	fe 88       	ldd	r15, Y+22	; 0x16
    3612:	8f 89       	ldd	r24, Y+23	; 0x17
    3614:	80 31       	cpi	r24, 0x10	; 16
    3616:	29 f4       	brne	.+10     	; 0x3622 <_ZN8SdVolume6fatPutEmm+0x60>
    3618:	bb 27       	eor	r27, r27
    361a:	a7 2f       	mov	r26, r23
    361c:	96 2f       	mov	r25, r22
    361e:	85 2f       	mov	r24, r21
    3620:	09 c0       	rjmp	.+18     	; 0x3634 <_ZN8SdVolume6fatPutEmm+0x72>
    3622:	db 01       	movw	r26, r22
    3624:	ca 01       	movw	r24, r20
    3626:	e7 e0       	ldi	r30, 0x07	; 7
    3628:	b6 95       	lsr	r27
    362a:	a7 95       	ror	r26
    362c:	97 95       	ror	r25
    362e:	87 95       	ror	r24
    3630:	ea 95       	dec	r30
    3632:	d1 f7       	brne	.-12     	; 0x3628 <_ZN8SdVolume6fatPutEmm+0x66>
    3634:	48 01       	movw	r8, r16
    3636:	59 01       	movw	r10, r18
    3638:	2a 01       	movw	r4, r20
    363a:	3b 01       	movw	r6, r22
    363c:	c8 0e       	add	r12, r24
    363e:	d9 1e       	adc	r13, r25
    3640:	ea 1e       	adc	r14, r26
    3642:	fb 1e       	adc	r15, r27
    3644:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3648:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    364c:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3650:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3654:	c8 16       	cp	r12, r24
    3656:	d9 06       	cpc	r13, r25
    3658:	ea 06       	cpc	r14, r26
    365a:	fb 06       	cpc	r15, r27
    365c:	81 f4       	brne	.+32     	; 0x367e <_ZN8SdVolume6fatPutEmm+0xbc>
    365e:	8f 89       	ldd	r24, Y+23	; 0x17
    3660:	80 31       	cpi	r24, 0x10	; 16
    3662:	a1 f4       	brne	.+40     	; 0x368c <_ZN8SdVolume6fatPutEmm+0xca>
    3664:	b3 01       	movw	r22, r6
    3666:	a2 01       	movw	r20, r4
    3668:	55 27       	eor	r21, r21
    366a:	66 27       	eor	r22, r22
    366c:	77 27       	eor	r23, r23
    366e:	44 0f       	add	r20, r20
    3670:	55 1f       	adc	r21, r21
    3672:	fa 01       	movw	r30, r20
    3674:	ed 56       	subi	r30, 0x6D	; 109
    3676:	f9 4f       	sbci	r31, 0xF9	; 249
    3678:	91 82       	std	Z+1, r9	; 0x01
    367a:	80 82       	st	Z, r8
    367c:	18 c0       	rjmp	.+48     	; 0x36ae <_ZN8SdVolume6fatPutEmm+0xec>
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	c7 01       	movw	r24, r14
    3682:	b6 01       	movw	r22, r12
    3684:	7b de       	rcall	.-778    	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    3686:	81 11       	cpse	r24, r1
    3688:	ea cf       	rjmp	.-44     	; 0x365e <_ZN8SdVolume6fatPutEmm+0x9c>
    368a:	b1 cf       	rjmp	.-158    	; 0x35ee <_ZN8SdVolume6fatPutEmm+0x2c>
    368c:	b3 01       	movw	r22, r6
    368e:	a2 01       	movw	r20, r4
    3690:	4f 77       	andi	r20, 0x7F	; 127
    3692:	55 27       	eor	r21, r21
    3694:	66 27       	eor	r22, r22
    3696:	77 27       	eor	r23, r23
    3698:	44 0f       	add	r20, r20
    369a:	55 1f       	adc	r21, r21
    369c:	44 0f       	add	r20, r20
    369e:	55 1f       	adc	r21, r21
    36a0:	fa 01       	movw	r30, r20
    36a2:	ed 56       	subi	r30, 0x6D	; 109
    36a4:	f9 4f       	sbci	r31, 0xF9	; 249
    36a6:	80 82       	st	Z, r8
    36a8:	91 82       	std	Z+1, r9	; 0x01
    36aa:	a2 82       	std	Z+2, r10	; 0x02
    36ac:	b3 82       	std	Z+3, r11	; 0x03
    36ae:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    36b2:	81 60       	ori	r24, 0x01	; 1
    36b4:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <_ZN8SdVolume11cacheDirty_E>
    36b8:	8a 89       	ldd	r24, Y+18	; 0x12
    36ba:	82 30       	cpi	r24, 0x02	; 2
    36bc:	80 f0       	brcs	.+32     	; 0x36de <_ZN8SdVolume6fatPutEmm+0x11c>
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	af 81       	ldd	r26, Y+7	; 0x07
    36c4:	b8 85       	ldd	r27, Y+8	; 0x08
    36c6:	c8 0e       	add	r12, r24
    36c8:	d9 1e       	adc	r13, r25
    36ca:	ea 1e       	adc	r14, r26
    36cc:	fb 1e       	adc	r15, r27
    36ce:	c0 92 8c 06 	sts	0x068C, r12	; 0x80068c <_ZN8SdVolume17cacheMirrorBlock_E>
    36d2:	d0 92 8d 06 	sts	0x068D, r13	; 0x80068d <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    36d6:	e0 92 8e 06 	sts	0x068E, r14	; 0x80068e <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    36da:	f0 92 8f 06 	sts	0x068F, r15	; 0x80068f <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	bf 90       	pop	r11
    36f2:	af 90       	pop	r10
    36f4:	9f 90       	pop	r9
    36f6:	8f 90       	pop	r8
    36f8:	7f 90       	pop	r7
    36fa:	6f 90       	pop	r6
    36fc:	5f 90       	pop	r5
    36fe:	4f 90       	pop	r4
    3700:	08 95       	ret

00003702 <_ZN8SdVolume15allocContiguousEmPm>:
    3702:	2f 92       	push	r2
    3704:	3f 92       	push	r3
    3706:	4f 92       	push	r4
    3708:	5f 92       	push	r5
    370a:	6f 92       	push	r6
    370c:	7f 92       	push	r7
    370e:	9f 92       	push	r9
    3710:	af 92       	push	r10
    3712:	bf 92       	push	r11
    3714:	cf 92       	push	r12
    3716:	df 92       	push	r13
    3718:	ef 92       	push	r14
    371a:	ff 92       	push	r15
    371c:	0f 93       	push	r16
    371e:	1f 93       	push	r17
    3720:	cf 93       	push	r28
    3722:	df 93       	push	r29
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	60 97       	sbiw	r28, 0x10	; 16
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	5c 01       	movw	r10, r24
    3736:	49 87       	std	Y+9, r20	; 0x09
    3738:	5a 87       	std	Y+10, r21	; 0x0a
    373a:	6b 87       	std	Y+11, r22	; 0x0b
    373c:	7c 87       	std	Y+12, r23	; 0x0c
    373e:	19 01       	movw	r2, r18
    3740:	d9 01       	movw	r26, r18
    3742:	cd 90       	ld	r12, X+
    3744:	dd 90       	ld	r13, X+
    3746:	ed 90       	ld	r14, X+
    3748:	fc 90       	ld	r15, X
    374a:	c1 14       	cp	r12, r1
    374c:	d1 04       	cpc	r13, r1
    374e:	e1 04       	cpc	r14, r1
    3750:	f1 04       	cpc	r15, r1
    3752:	31 f0       	breq	.+12     	; 0x3760 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    3754:	bf ef       	ldi	r27, 0xFF	; 255
    3756:	cb 1a       	sub	r12, r27
    3758:	db 0a       	sbc	r13, r27
    375a:	eb 0a       	sbc	r14, r27
    375c:	fb 0a       	sbc	r15, r27
    375e:	10 c0       	rjmp	.+32     	; 0x3780 <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    3760:	fc 01       	movw	r30, r24
    3762:	c0 80       	ld	r12, Z
    3764:	d1 80       	ldd	r13, Z+1	; 0x01
    3766:	e2 80       	ldd	r14, Z+2	; 0x02
    3768:	f3 80       	ldd	r15, Z+3	; 0x03
    376a:	99 24       	eor	r9, r9
    376c:	93 94       	inc	r9
    376e:	09 85       	ldd	r16, Y+9	; 0x09
    3770:	1a 85       	ldd	r17, Y+10	; 0x0a
    3772:	2b 85       	ldd	r18, Y+11	; 0x0b
    3774:	3c 85       	ldd	r19, Y+12	; 0x0c
    3776:	01 30       	cpi	r16, 0x01	; 1
    3778:	11 05       	cpc	r17, r1
    377a:	21 05       	cpc	r18, r1
    377c:	31 05       	cpc	r19, r1
    377e:	09 f0       	breq	.+2      	; 0x3782 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    3780:	91 2c       	mov	r9, r1
    3782:	f5 01       	movw	r30, r10
    3784:	81 85       	ldd	r24, Z+9	; 0x09
    3786:	92 85       	ldd	r25, Z+10	; 0x0a
    3788:	a3 85       	ldd	r26, Z+11	; 0x0b
    378a:	b4 85       	ldd	r27, Z+12	; 0x0c
    378c:	8c 01       	movw	r16, r24
    378e:	9d 01       	movw	r18, r26
    3790:	0f 5f       	subi	r16, 0xFF	; 255
    3792:	1f 4f       	sbci	r17, 0xFF	; 255
    3794:	2f 4f       	sbci	r18, 0xFF	; 255
    3796:	3f 4f       	sbci	r19, 0xFF	; 255
    3798:	0d 87       	std	Y+13, r16	; 0x0d
    379a:	1e 87       	std	Y+14, r17	; 0x0e
    379c:	2f 87       	std	Y+15, r18	; 0x0f
    379e:	38 8b       	std	Y+16, r19	; 0x10
    37a0:	26 01       	movw	r4, r12
    37a2:	37 01       	movw	r6, r14
    37a4:	1d 82       	std	Y+5, r1	; 0x05
    37a6:	1e 82       	std	Y+6, r1	; 0x06
    37a8:	1f 82       	std	Y+7, r1	; 0x07
    37aa:	18 86       	std	Y+8, r1	; 0x08
    37ac:	f5 01       	movw	r30, r10
    37ae:	81 85       	ldd	r24, Z+9	; 0x09
    37b0:	92 85       	ldd	r25, Z+10	; 0x0a
    37b2:	a3 85       	ldd	r26, Z+11	; 0x0b
    37b4:	b4 85       	ldd	r27, Z+12	; 0x0c
    37b6:	0d 81       	ldd	r16, Y+5	; 0x05
    37b8:	1e 81       	ldd	r17, Y+6	; 0x06
    37ba:	2f 81       	ldd	r18, Y+7	; 0x07
    37bc:	38 85       	ldd	r19, Y+8	; 0x08
    37be:	08 17       	cp	r16, r24
    37c0:	19 07       	cpc	r17, r25
    37c2:	2a 07       	cpc	r18, r26
    37c4:	3b 07       	cpc	r19, r27
    37c6:	08 f0       	brcs	.+2      	; 0x37ca <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    37c8:	54 c0       	rjmp	.+168    	; 0x3872 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    37ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    37cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    37ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    37d0:	58 89       	ldd	r21, Y+16	; 0x10
    37d2:	24 15       	cp	r18, r4
    37d4:	35 05       	cpc	r19, r5
    37d6:	46 05       	cpc	r20, r6
    37d8:	57 05       	cpc	r21, r7
    37da:	50 f4       	brcc	.+20     	; 0x37f0 <_ZN8SdVolume15allocContiguousEmPm+0xee>
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	48 2e       	mov	r4, r24
    37e0:	51 2c       	mov	r5, r1
    37e2:	61 2c       	mov	r6, r1
    37e4:	71 2c       	mov	r7, r1
    37e6:	92 e0       	ldi	r25, 0x02	; 2
    37e8:	c9 2e       	mov	r12, r25
    37ea:	d1 2c       	mov	r13, r1
    37ec:	e1 2c       	mov	r14, r1
    37ee:	f1 2c       	mov	r15, r1
    37f0:	9e 01       	movw	r18, r28
    37f2:	2f 5f       	subi	r18, 0xFF	; 255
    37f4:	3f 4f       	sbci	r19, 0xFF	; 255
    37f6:	b3 01       	movw	r22, r6
    37f8:	a2 01       	movw	r20, r4
    37fa:	c5 01       	movw	r24, r10
    37fc:	f8 dd       	rcall	.-1040   	; 0x33ee <_ZNK8SdVolume6fatGetEmPm>
    37fe:	88 23       	and	r24, r24
    3800:	c1 f1       	breq	.+112    	; 0x3872 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    3802:	49 81       	ldd	r20, Y+1	; 0x01
    3804:	5a 81       	ldd	r21, Y+2	; 0x02
    3806:	6b 81       	ldd	r22, Y+3	; 0x03
    3808:	7c 81       	ldd	r23, Y+4	; 0x04
    380a:	d3 01       	movw	r26, r6
    380c:	c2 01       	movw	r24, r4
    380e:	01 96       	adiw	r24, 0x01	; 1
    3810:	a1 1d       	adc	r26, r1
    3812:	b1 1d       	adc	r27, r1
    3814:	45 2b       	or	r20, r21
    3816:	46 2b       	or	r20, r22
    3818:	47 2b       	or	r20, r23
    381a:	19 f0       	breq	.+6      	; 0x3822 <_ZN8SdVolume15allocContiguousEmPm+0x120>
    381c:	6c 01       	movw	r12, r24
    381e:	7d 01       	movw	r14, r26
    3820:	0f c0       	rjmp	.+30     	; 0x3840 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    3822:	ac 01       	movw	r20, r24
    3824:	bd 01       	movw	r22, r26
    3826:	4c 19       	sub	r20, r12
    3828:	5d 09       	sbc	r21, r13
    382a:	6e 09       	sbc	r22, r14
    382c:	7f 09       	sbc	r23, r15
    382e:	09 85       	ldd	r16, Y+9	; 0x09
    3830:	1a 85       	ldd	r17, Y+10	; 0x0a
    3832:	2b 85       	ldd	r18, Y+11	; 0x0b
    3834:	3c 85       	ldd	r19, Y+12	; 0x0c
    3836:	04 17       	cp	r16, r20
    3838:	15 07       	cpc	r17, r21
    383a:	26 07       	cpc	r18, r22
    383c:	37 07       	cpc	r19, r23
    383e:	79 f0       	breq	.+30     	; 0x385e <_ZN8SdVolume15allocContiguousEmPm+0x15c>
    3840:	2d 81       	ldd	r18, Y+5	; 0x05
    3842:	3e 81       	ldd	r19, Y+6	; 0x06
    3844:	4f 81       	ldd	r20, Y+7	; 0x07
    3846:	58 85       	ldd	r21, Y+8	; 0x08
    3848:	2f 5f       	subi	r18, 0xFF	; 255
    384a:	3f 4f       	sbci	r19, 0xFF	; 255
    384c:	4f 4f       	sbci	r20, 0xFF	; 255
    384e:	5f 4f       	sbci	r21, 0xFF	; 255
    3850:	2d 83       	std	Y+5, r18	; 0x05
    3852:	3e 83       	std	Y+6, r19	; 0x06
    3854:	4f 83       	std	Y+7, r20	; 0x07
    3856:	58 87       	std	Y+8, r21	; 0x08
    3858:	2c 01       	movw	r4, r24
    385a:	3d 01       	movw	r6, r26
    385c:	a7 cf       	rjmp	.-178    	; 0x37ac <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    385e:	0f ef       	ldi	r16, 0xFF	; 255
    3860:	1f ef       	ldi	r17, 0xFF	; 255
    3862:	2f ef       	ldi	r18, 0xFF	; 255
    3864:	3f e0       	ldi	r19, 0x0F	; 15
    3866:	b3 01       	movw	r22, r6
    3868:	a2 01       	movw	r20, r4
    386a:	c5 01       	movw	r24, r10
    386c:	aa de       	rcall	.-684    	; 0x35c2 <_ZN8SdVolume6fatPutEmm>
    386e:	81 11       	cpse	r24, r1
    3870:	17 c0       	rjmp	.+46     	; 0x38a0 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	3f c0       	rjmp	.+126    	; 0x38f4 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    3876:	d3 01       	movw	r26, r6
    3878:	c2 01       	movw	r24, r4
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	a1 09       	sbc	r26, r1
    387e:	b1 09       	sbc	r27, r1
    3880:	8d 83       	std	Y+5, r24	; 0x05
    3882:	9e 83       	std	Y+6, r25	; 0x06
    3884:	af 83       	std	Y+7, r26	; 0x07
    3886:	b8 87       	std	Y+8, r27	; 0x08
    3888:	93 01       	movw	r18, r6
    388a:	82 01       	movw	r16, r4
    388c:	ac 01       	movw	r20, r24
    388e:	bd 01       	movw	r22, r26
    3890:	c5 01       	movw	r24, r10
    3892:	97 de       	rcall	.-722    	; 0x35c2 <_ZN8SdVolume6fatPutEmm>
    3894:	88 23       	and	r24, r24
    3896:	69 f3       	breq	.-38     	; 0x3872 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    3898:	4d 80       	ldd	r4, Y+5	; 0x05
    389a:	5e 80       	ldd	r5, Y+6	; 0x06
    389c:	6f 80       	ldd	r6, Y+7	; 0x07
    389e:	78 84       	ldd	r7, Y+8	; 0x08
    38a0:	c4 14       	cp	r12, r4
    38a2:	d5 04       	cpc	r13, r5
    38a4:	e6 04       	cpc	r14, r6
    38a6:	f7 04       	cpc	r15, r7
    38a8:	30 f3       	brcs	.-52     	; 0x3876 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    38aa:	d1 01       	movw	r26, r2
    38ac:	4d 91       	ld	r20, X+
    38ae:	5d 91       	ld	r21, X+
    38b0:	6d 91       	ld	r22, X+
    38b2:	7c 91       	ld	r23, X
    38b4:	41 15       	cp	r20, r1
    38b6:	51 05       	cpc	r21, r1
    38b8:	61 05       	cpc	r22, r1
    38ba:	71 05       	cpc	r23, r1
    38bc:	99 f4       	brne	.+38     	; 0x38e4 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    38be:	f1 01       	movw	r30, r2
    38c0:	c0 82       	st	Z, r12
    38c2:	d1 82       	std	Z+1, r13	; 0x01
    38c4:	e2 82       	std	Z+2, r14	; 0x02
    38c6:	f3 82       	std	Z+3, r15	; 0x03
    38c8:	99 20       	and	r9, r9
    38ca:	99 f0       	breq	.+38     	; 0x38f2 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    38cc:	ff ef       	ldi	r31, 0xFF	; 255
    38ce:	cf 1a       	sub	r12, r31
    38d0:	df 0a       	sbc	r13, r31
    38d2:	ef 0a       	sbc	r14, r31
    38d4:	ff 0a       	sbc	r15, r31
    38d6:	d5 01       	movw	r26, r10
    38d8:	cd 92       	st	X+, r12
    38da:	dd 92       	st	X+, r13
    38dc:	ed 92       	st	X+, r14
    38de:	fc 92       	st	X, r15
    38e0:	13 97       	sbiw	r26, 0x03	; 3
    38e2:	07 c0       	rjmp	.+14     	; 0x38f2 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    38e4:	97 01       	movw	r18, r14
    38e6:	86 01       	movw	r16, r12
    38e8:	c5 01       	movw	r24, r10
    38ea:	6b de       	rcall	.-810    	; 0x35c2 <_ZN8SdVolume6fatPutEmm>
    38ec:	81 11       	cpse	r24, r1
    38ee:	e7 cf       	rjmp	.-50     	; 0x38be <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    38f0:	c0 cf       	rjmp	.-128    	; 0x3872 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	60 96       	adiw	r28, 0x10	; 16
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	bf 90       	pop	r11
    3912:	af 90       	pop	r10
    3914:	9f 90       	pop	r9
    3916:	7f 90       	pop	r7
    3918:	6f 90       	pop	r6
    391a:	5f 90       	pop	r5
    391c:	4f 90       	pop	r4
    391e:	3f 90       	pop	r3
    3920:	2f 90       	pop	r2
    3922:	08 95       	ret

00003924 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    3924:	8f 92       	push	r8
    3926:	9f 92       	push	r9
    3928:	af 92       	push	r10
    392a:	bf 92       	push	r11
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	ec 01       	movw	r28, r24
    393e:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3940:	70 93 92 06 	sts	0x0692, r23	; 0x800692 <_ZN8SdVolume7sdCard_E+0x1>
    3944:	60 93 91 06 	sts	0x0691, r22	; 0x800691 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3948:	44 23       	and	r20, r20
    394a:	61 f1       	breq	.+88     	; 0x39a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    394c:	45 30       	cpi	r20, 0x05	; 5
    394e:	10 f0       	brcs	.+4      	; 0x3954 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	ef c0       	rjmp	.+478    	; 0x3b32 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	70 e0       	ldi	r23, 0x00	; 0
    395a:	cb 01       	movw	r24, r22
    395c:	0f dd       	rcall	.-1506   	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    395e:	88 23       	and	r24, r24
    3960:	b9 f3       	breq	.-18     	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3962:	20 e1       	ldi	r18, 0x10	; 16
    3964:	12 9f       	mul	r17, r18
    3966:	a0 01       	movw	r20, r0
    3968:	11 24       	eor	r1, r1
    396a:	4d 57       	subi	r20, 0x7D	; 125
    396c:	59 4f       	sbci	r21, 0xF9	; 249
    396e:	fa 01       	movw	r30, r20
    3970:	e2 54       	subi	r30, 0x42	; 66
    3972:	fe 4f       	sbci	r31, 0xFE	; 254
    3974:	80 81       	ld	r24, Z
    3976:	8f 77       	andi	r24, 0x7F	; 127
    3978:	59 f7       	brne	.-42     	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    397a:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	a2 81       	ldd	r26, Z+2	; 0x02
    3982:	b3 81       	ldd	r27, Z+3	; 0x03
    3984:	84 36       	cpi	r24, 0x64	; 100
    3986:	91 05       	cpc	r25, r1
    3988:	a1 05       	cpc	r26, r1
    398a:	b1 05       	cpc	r27, r1
    398c:	08 f3       	brcs	.-62     	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    398e:	34 97       	sbiw	r30, 0x04	; 4
    3990:	c0 80       	ld	r12, Z
    3992:	d1 80       	ldd	r13, Z+1	; 0x01
    3994:	e2 80       	ldd	r14, Z+2	; 0x02
    3996:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    3998:	c1 14       	cp	r12, r1
    399a:	d1 04       	cpc	r13, r1
    399c:	e1 04       	cpc	r14, r1
    399e:	f1 04       	cpc	r15, r1
    39a0:	21 f4       	brne	.+8      	; 0x39aa <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    39a2:	d6 cf       	rjmp	.-84     	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    39a4:	c1 2c       	mov	r12, r1
    39a6:	d1 2c       	mov	r13, r1
    39a8:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	c7 01       	movw	r24, r14
    39ae:	b6 01       	movw	r22, r12
    39b0:	e5 dc       	rcall	.-1590   	; 0x337c <_ZN8SdVolume13cacheRawBlockEmh>
    39b2:	88 23       	and	r24, r24
    39b4:	69 f2       	breq	.-102    	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    39b6:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <_ZN8SdVolume12cacheBuffer_E+0xb>
    39ba:	90 91 9f 06 	lds	r25, 0x069F	; 0x80069f <_ZN8SdVolume12cacheBuffer_E+0xc>
    39be:	81 15       	cp	r24, r1
    39c0:	92 40       	sbci	r25, 0x02	; 2
    39c2:	31 f6       	brne	.-116    	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    39c4:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    39c8:	99 23       	and	r25, r25
    39ca:	09 f4       	brne	.+2      	; 0x39ce <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    39cc:	c1 cf       	rjmp	.-126    	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    39ce:	20 91 a1 06 	lds	r18, 0x06A1	; 0x8006a1 <_ZN8SdVolume12cacheBuffer_E+0xe>
    39d2:	30 91 a2 06 	lds	r19, 0x06A2	; 0x8006a2 <_ZN8SdVolume12cacheBuffer_E+0xf>
    39d6:	23 2b       	or	r18, r19
    39d8:	09 f4       	brne	.+2      	; 0x39dc <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    39da:	ba cf       	rjmp	.-140    	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    39dc:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    39e0:	88 23       	and	r24, r24
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    39e4:	b5 cf       	rjmp	.-150    	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    39e6:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    39e8:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    39ea:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	41 e0       	ldi	r20, 0x01	; 1
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    39f4:	e2 2f       	mov	r30, r18
    39f6:	ba 01       	movw	r22, r20
    39f8:	02 2e       	mov	r0, r18
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    39fc:	66 0f       	add	r22, r22
    39fe:	77 1f       	adc	r23, r23
    3a00:	0a 94       	dec	r0
    3a02:	e2 f7       	brpl	.-8      	; 0x39fc <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    3a04:	86 17       	cp	r24, r22
    3a06:	97 07       	cpc	r25, r23
    3a08:	31 f0       	breq	.+12     	; 0x3a16 <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3a0a:	31 e0       	ldi	r19, 0x01	; 1
    3a0c:	32 0f       	add	r19, r18
    3a0e:	3d 87       	std	Y+13, r19	; 0x0d
    3a10:	28 30       	cpi	r18, 0x08	; 8
    3a12:	78 f3       	brcs	.-34     	; 0x39f2 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    3a14:	9d cf       	rjmp	.-198    	; 0x3950 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    3a16:	20 91 a9 06 	lds	r18, 0x06A9	; 0x8006a9 <_ZN8SdVolume12cacheBuffer_E+0x16>
    3a1a:	30 91 aa 06 	lds	r19, 0x06AA	; 0x8006aa <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    3a1e:	21 15       	cp	r18, r1
    3a20:	31 05       	cpc	r19, r1
    3a22:	19 f0       	breq	.+6      	; 0x3a2a <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	08 c0       	rjmp	.+16     	; 0x3a3a <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    3a2a:	20 91 b7 06 	lds	r18, 0x06B7	; 0x8006b7 <_ZN8SdVolume12cacheBuffer_E+0x24>
    3a2e:	30 91 b8 06 	lds	r19, 0x06B8	; 0x8006b8 <_ZN8SdVolume12cacheBuffer_E+0x25>
    3a32:	40 91 b9 06 	lds	r20, 0x06B9	; 0x8006b9 <_ZN8SdVolume12cacheBuffer_E+0x26>
    3a36:	50 91 ba 06 	lds	r21, 0x06BA	; 0x8006ba <_ZN8SdVolume12cacheBuffer_E+0x27>
    3a3a:	2d 83       	std	Y+5, r18	; 0x05
    3a3c:	3e 83       	std	Y+6, r19	; 0x06
    3a3e:	4f 83       	std	Y+7, r20	; 0x07
    3a40:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    3a42:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <_ZN8SdVolume12cacheBuffer_E+0xe>
    3a46:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3a4a:	46 01       	movw	r8, r12
    3a4c:	57 01       	movw	r10, r14
    3a4e:	88 0e       	add	r8, r24
    3a50:	99 1e       	adc	r9, r25
    3a52:	a1 1c       	adc	r10, r1
    3a54:	b1 1c       	adc	r11, r1
    3a56:	8b 8a       	std	Y+19, r8	; 0x13
    3a58:	9c 8a       	std	Y+20, r9	; 0x14
    3a5a:	ad 8a       	std	Y+21, r10	; 0x15
    3a5c:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3a5e:	00 91 a4 06 	lds	r16, 0x06A4	; 0x8006a4 <_ZN8SdVolume12cacheBuffer_E+0x11>
    3a62:	10 91 a5 06 	lds	r17, 0x06A5	; 0x8006a5 <_ZN8SdVolume12cacheBuffer_E+0x12>
    3a66:	19 8f       	std	Y+25, r17	; 0x19
    3a68:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3a6a:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <_ZN8SdVolume12cacheBuffer_E+0x10>
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	e9 d0       	rcall	.+466    	; 0x3c44 <__muluhisi3>
    3a72:	86 0e       	add	r8, r22
    3a74:	97 1e       	adc	r9, r23
    3a76:	a8 1e       	adc	r10, r24
    3a78:	b9 1e       	adc	r11, r25
    3a7a:	8a 8e       	std	Y+26, r8	; 0x1a
    3a7c:	9b 8e       	std	Y+27, r9	; 0x1b
    3a7e:	ac 8e       	std	Y+28, r10	; 0x1c
    3a80:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    3a82:	85 e0       	ldi	r24, 0x05	; 5
    3a84:	00 0f       	add	r16, r16
    3a86:	11 1f       	adc	r17, r17
    3a88:	8a 95       	dec	r24
    3a8a:	e1 f7       	brne	.-8      	; 0x3a84 <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    3a8c:	01 50       	subi	r16, 0x01	; 1
    3a8e:	1e 4f       	sbci	r17, 0xFE	; 254
    3a90:	01 2f       	mov	r16, r17
    3a92:	11 27       	eor	r17, r17
    3a94:	06 95       	lsr	r16
    3a96:	80 0e       	add	r8, r16
    3a98:	91 1e       	adc	r9, r17
    3a9a:	a1 1c       	adc	r10, r1
    3a9c:	b1 1c       	adc	r11, r1
    3a9e:	8e 86       	std	Y+14, r8	; 0x0e
    3aa0:	9f 86       	std	Y+15, r9	; 0x0f
    3aa2:	a8 8a       	std	Y+16, r10	; 0x10
    3aa4:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    3aa6:	20 91 a6 06 	lds	r18, 0x06A6	; 0x8006a6 <_ZN8SdVolume12cacheBuffer_E+0x13>
    3aaa:	30 91 a7 06 	lds	r19, 0x06A7	; 0x8006a7 <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    3aae:	21 15       	cp	r18, r1
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	21 f0       	breq	.+8      	; 0x3abc <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    3ab4:	a9 01       	movw	r20, r18
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	70 e0       	ldi	r23, 0x00	; 0
    3aba:	08 c0       	rjmp	.+16     	; 0x3acc <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    3abc:	40 91 b3 06 	lds	r20, 0x06B3	; 0x8006b3 <_ZN8SdVolume12cacheBuffer_E+0x20>
    3ac0:	50 91 b4 06 	lds	r21, 0x06B4	; 0x8006b4 <_ZN8SdVolume12cacheBuffer_E+0x21>
    3ac4:	60 91 b5 06 	lds	r22, 0x06B5	; 0x8006b5 <_ZN8SdVolume12cacheBuffer_E+0x22>
    3ac8:	70 91 b6 06 	lds	r23, 0x06B6	; 0x8006b6 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3acc:	d7 01       	movw	r26, r14
    3ace:	c6 01       	movw	r24, r12
    3ad0:	88 19       	sub	r24, r8
    3ad2:	99 09       	sbc	r25, r9
    3ad4:	aa 09       	sbc	r26, r10
    3ad6:	bb 09       	sbc	r27, r11
    3ad8:	84 0f       	add	r24, r20
    3ada:	95 1f       	adc	r25, r21
    3adc:	a6 1f       	adc	r26, r22
    3ade:	b7 1f       	adc	r27, r23
    3ae0:	04 c0       	rjmp	.+8      	; 0x3aea <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    3ae2:	b6 95       	lsr	r27
    3ae4:	a7 95       	ror	r26
    3ae6:	97 95       	ror	r25
    3ae8:	87 95       	ror	r24
    3aea:	ea 95       	dec	r30
    3aec:	d2 f7       	brpl	.-12     	; 0x3ae2 <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    3aee:	89 87       	std	Y+9, r24	; 0x09
    3af0:	9a 87       	std	Y+10, r25	; 0x0a
    3af2:	ab 87       	std	Y+11, r26	; 0x0b
    3af4:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3af6:	85 3f       	cpi	r24, 0xF5	; 245
    3af8:	2f e0       	ldi	r18, 0x0F	; 15
    3afa:	92 07       	cpc	r25, r18
    3afc:	a1 05       	cpc	r26, r1
    3afe:	b1 05       	cpc	r27, r1
    3b00:	10 f4       	brcc	.+4      	; 0x3b06 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    3b02:	8c e0       	ldi	r24, 0x0C	; 12
    3b04:	14 c0       	rjmp	.+40     	; 0x3b2e <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    3b06:	85 3f       	cpi	r24, 0xF5	; 245
    3b08:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0a:	a1 05       	cpc	r26, r1
    3b0c:	b1 05       	cpc	r27, r1
    3b0e:	10 f4       	brcc	.+4      	; 0x3b14 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    3b10:	80 e1       	ldi	r24, 0x10	; 16
    3b12:	0d c0       	rjmp	.+26     	; 0x3b2e <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    3b14:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <_ZN8SdVolume12cacheBuffer_E+0x2c>
    3b18:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    3b1c:	a0 91 c1 06 	lds	r26, 0x06C1	; 0x8006c1 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    3b20:	b0 91 c2 06 	lds	r27, 0x06C2	; 0x8006c2 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    3b24:	8a 8f       	std	Y+26, r24	; 0x1a
    3b26:	9b 8f       	std	Y+27, r25	; 0x1b
    3b28:	ac 8f       	std	Y+28, r26	; 0x1c
    3b2a:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    3b2c:	80 e2       	ldi	r24, 0x20	; 32
    3b2e:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    3b30:	81 e0       	ldi	r24, 0x01	; 1
}
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	ff 90       	pop	r15
    3b3c:	ef 90       	pop	r14
    3b3e:	df 90       	pop	r13
    3b40:	cf 90       	pop	r12
    3b42:	bf 90       	pop	r11
    3b44:	af 90       	pop	r10
    3b46:	9f 90       	pop	r9
    3b48:	8f 90       	pop	r8
    3b4a:	08 95       	ret

00003b4c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3b4c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3b4e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3b50:	f8 94       	cli
  if (!initialized) {
    3b52:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <_ZN8SPIClass11initializedE>
    3b56:	81 11       	cpse	r24, r1
    3b58:	27 c0       	rjmp	.+78     	; 0x3ba8 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3b5a:	e2 e1       	ldi	r30, 0x12	; 18
    3b5c:	f2 e0       	ldi	r31, 0x02	; 2
    3b5e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3b60:	ec ec       	ldi	r30, 0xCC	; 204
    3b62:	f1 e0       	ldi	r31, 0x01	; 1
    3b64:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3b66:	e8 2f       	mov	r30, r24
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	ee 0f       	add	r30, r30
    3b6c:	ff 1f       	adc	r31, r31
    3b6e:	e9 5a       	subi	r30, 0xA9	; 169
    3b70:	fd 4f       	sbci	r31, 0xFD	; 253
    3b72:	a5 91       	lpm	r26, Z+
    3b74:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3b76:	ec 91       	ld	r30, X
    3b78:	e9 23       	and	r30, r25
    3b7a:	21 f4       	brne	.+8      	; 0x3b84 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3b7c:	61 e0       	ldi	r22, 0x01	; 1
    3b7e:	85 e3       	ldi	r24, 0x35	; 53
    3b80:	0e 94 37 10 	call	0x206e	; 0x206e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3b84:	61 e0       	ldi	r22, 0x01	; 1
    3b86:	85 e3       	ldi	r24, 0x35	; 53
    3b88:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3b8c:	8c b5       	in	r24, 0x2c	; 44
    3b8e:	80 61       	ori	r24, 0x10	; 16
    3b90:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3b92:	8c b5       	in	r24, 0x2c	; 44
    3b94:	80 64       	ori	r24, 0x40	; 64
    3b96:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3b98:	61 e0       	ldi	r22, 0x01	; 1
    3b9a:	84 e3       	ldi	r24, 0x34	; 52
    3b9c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>
    pinMode(MOSI, OUTPUT);
    3ba0:	61 e0       	ldi	r22, 0x01	; 1
    3ba2:	83 e3       	ldi	r24, 0x33	; 51
    3ba4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <pinMode>
  }
  initialized++; // reference count
    3ba8:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <_ZN8SPIClass11initializedE>
    3bac:	8f 5f       	subi	r24, 0xFF	; 255
    3bae:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3bb2:	cf bf       	out	0x3f, r28	; 63
}
    3bb4:	cf 91       	pop	r28
    3bb6:	08 95       	ret

00003bb8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3bb8:	08 95       	ret

00003bba <__udivmodqi4>:
    3bba:	99 1b       	sub	r25, r25
    3bbc:	79 e0       	ldi	r23, 0x09	; 9
    3bbe:	04 c0       	rjmp	.+8      	; 0x3bc8 <__udivmodqi4_ep>

00003bc0 <__udivmodqi4_loop>:
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	96 17       	cp	r25, r22
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <__udivmodqi4_ep>
    3bc6:	96 1b       	sub	r25, r22

00003bc8 <__udivmodqi4_ep>:
    3bc8:	88 1f       	adc	r24, r24
    3bca:	7a 95       	dec	r23
    3bcc:	c9 f7       	brne	.-14     	; 0x3bc0 <__udivmodqi4_loop>
    3bce:	80 95       	com	r24
    3bd0:	08 95       	ret

00003bd2 <__udivmodsi4>:
    3bd2:	a1 e2       	ldi	r26, 0x21	; 33
    3bd4:	1a 2e       	mov	r1, r26
    3bd6:	aa 1b       	sub	r26, r26
    3bd8:	bb 1b       	sub	r27, r27
    3bda:	fd 01       	movw	r30, r26
    3bdc:	0d c0       	rjmp	.+26     	; 0x3bf8 <__udivmodsi4_ep>

00003bde <__udivmodsi4_loop>:
    3bde:	aa 1f       	adc	r26, r26
    3be0:	bb 1f       	adc	r27, r27
    3be2:	ee 1f       	adc	r30, r30
    3be4:	ff 1f       	adc	r31, r31
    3be6:	a2 17       	cp	r26, r18
    3be8:	b3 07       	cpc	r27, r19
    3bea:	e4 07       	cpc	r30, r20
    3bec:	f5 07       	cpc	r31, r21
    3bee:	20 f0       	brcs	.+8      	; 0x3bf8 <__udivmodsi4_ep>
    3bf0:	a2 1b       	sub	r26, r18
    3bf2:	b3 0b       	sbc	r27, r19
    3bf4:	e4 0b       	sbc	r30, r20
    3bf6:	f5 0b       	sbc	r31, r21

00003bf8 <__udivmodsi4_ep>:
    3bf8:	66 1f       	adc	r22, r22
    3bfa:	77 1f       	adc	r23, r23
    3bfc:	88 1f       	adc	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	1a 94       	dec	r1
    3c02:	69 f7       	brne	.-38     	; 0x3bde <__udivmodsi4_loop>
    3c04:	60 95       	com	r22
    3c06:	70 95       	com	r23
    3c08:	80 95       	com	r24
    3c0a:	90 95       	com	r25
    3c0c:	9b 01       	movw	r18, r22
    3c0e:	ac 01       	movw	r20, r24
    3c10:	bd 01       	movw	r22, r26
    3c12:	cf 01       	movw	r24, r30
    3c14:	08 95       	ret

00003c16 <__tablejump2__>:
    3c16:	ee 0f       	add	r30, r30
    3c18:	ff 1f       	adc	r31, r31
    3c1a:	88 1f       	adc	r24, r24
    3c1c:	8b bf       	out	0x3b, r24	; 59
    3c1e:	07 90       	elpm	r0, Z+
    3c20:	f6 91       	elpm	r31, Z
    3c22:	e0 2d       	mov	r30, r0
    3c24:	19 94       	eijmp

00003c26 <__umulhisi3>:
    3c26:	a2 9f       	mul	r26, r18
    3c28:	b0 01       	movw	r22, r0
    3c2a:	b3 9f       	mul	r27, r19
    3c2c:	c0 01       	movw	r24, r0
    3c2e:	a3 9f       	mul	r26, r19
    3c30:	70 0d       	add	r23, r0
    3c32:	81 1d       	adc	r24, r1
    3c34:	11 24       	eor	r1, r1
    3c36:	91 1d       	adc	r25, r1
    3c38:	b2 9f       	mul	r27, r18
    3c3a:	70 0d       	add	r23, r0
    3c3c:	81 1d       	adc	r24, r1
    3c3e:	11 24       	eor	r1, r1
    3c40:	91 1d       	adc	r25, r1
    3c42:	08 95       	ret

00003c44 <__muluhisi3>:
    3c44:	f0 df       	rcall	.-32     	; 0x3c26 <__umulhisi3>
    3c46:	a5 9f       	mul	r26, r21
    3c48:	90 0d       	add	r25, r0
    3c4a:	b4 9f       	mul	r27, r20
    3c4c:	90 0d       	add	r25, r0
    3c4e:	a4 9f       	mul	r26, r20
    3c50:	80 0d       	add	r24, r0
    3c52:	91 1d       	adc	r25, r1
    3c54:	11 24       	eor	r1, r1
    3c56:	08 95       	ret

00003c58 <malloc>:
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	82 30       	cpi	r24, 0x02	; 2
    3c62:	91 05       	cpc	r25, r1
    3c64:	10 f4       	brcc	.+4      	; 0x3c6a <malloc+0x12>
    3c66:	82 e0       	ldi	r24, 0x02	; 2
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <__flp>
    3c6e:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <__flp+0x1>
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	a0 e0       	ldi	r26, 0x00	; 0
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	30 97       	sbiw	r30, 0x00	; 0
    3c7c:	19 f1       	breq	.+70     	; 0x3cc4 <malloc+0x6c>
    3c7e:	40 81       	ld	r20, Z
    3c80:	51 81       	ldd	r21, Z+1	; 0x01
    3c82:	02 81       	ldd	r16, Z+2	; 0x02
    3c84:	13 81       	ldd	r17, Z+3	; 0x03
    3c86:	48 17       	cp	r20, r24
    3c88:	59 07       	cpc	r21, r25
    3c8a:	c8 f0       	brcs	.+50     	; 0x3cbe <malloc+0x66>
    3c8c:	84 17       	cp	r24, r20
    3c8e:	95 07       	cpc	r25, r21
    3c90:	69 f4       	brne	.+26     	; 0x3cac <malloc+0x54>
    3c92:	10 97       	sbiw	r26, 0x00	; 0
    3c94:	31 f0       	breq	.+12     	; 0x3ca2 <malloc+0x4a>
    3c96:	12 96       	adiw	r26, 0x02	; 2
    3c98:	0c 93       	st	X, r16
    3c9a:	12 97       	sbiw	r26, 0x02	; 2
    3c9c:	13 96       	adiw	r26, 0x03	; 3
    3c9e:	1c 93       	st	X, r17
    3ca0:	27 c0       	rjmp	.+78     	; 0x3cf0 <malloc+0x98>
    3ca2:	00 93 99 08 	sts	0x0899, r16	; 0x800899 <__flp>
    3ca6:	10 93 9a 08 	sts	0x089A, r17	; 0x80089a <__flp+0x1>
    3caa:	22 c0       	rjmp	.+68     	; 0x3cf0 <malloc+0x98>
    3cac:	21 15       	cp	r18, r1
    3cae:	31 05       	cpc	r19, r1
    3cb0:	19 f0       	breq	.+6      	; 0x3cb8 <malloc+0x60>
    3cb2:	42 17       	cp	r20, r18
    3cb4:	53 07       	cpc	r21, r19
    3cb6:	18 f4       	brcc	.+6      	; 0x3cbe <malloc+0x66>
    3cb8:	9a 01       	movw	r18, r20
    3cba:	bd 01       	movw	r22, r26
    3cbc:	ef 01       	movw	r28, r30
    3cbe:	df 01       	movw	r26, r30
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	db cf       	rjmp	.-74     	; 0x3c7a <malloc+0x22>
    3cc4:	21 15       	cp	r18, r1
    3cc6:	31 05       	cpc	r19, r1
    3cc8:	f9 f0       	breq	.+62     	; 0x3d08 <malloc+0xb0>
    3cca:	28 1b       	sub	r18, r24
    3ccc:	39 0b       	sbc	r19, r25
    3cce:	24 30       	cpi	r18, 0x04	; 4
    3cd0:	31 05       	cpc	r19, r1
    3cd2:	80 f4       	brcc	.+32     	; 0x3cf4 <malloc+0x9c>
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd8:	61 15       	cp	r22, r1
    3cda:	71 05       	cpc	r23, r1
    3cdc:	21 f0       	breq	.+8      	; 0x3ce6 <malloc+0x8e>
    3cde:	fb 01       	movw	r30, r22
    3ce0:	93 83       	std	Z+3, r25	; 0x03
    3ce2:	82 83       	std	Z+2, r24	; 0x02
    3ce4:	04 c0       	rjmp	.+8      	; 0x3cee <malloc+0x96>
    3ce6:	90 93 9a 08 	sts	0x089A, r25	; 0x80089a <__flp+0x1>
    3cea:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <__flp>
    3cee:	fe 01       	movw	r30, r28
    3cf0:	32 96       	adiw	r30, 0x02	; 2
    3cf2:	44 c0       	rjmp	.+136    	; 0x3d7c <malloc+0x124>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e2 0f       	add	r30, r18
    3cf8:	f3 1f       	adc	r31, r19
    3cfa:	81 93       	st	Z+, r24
    3cfc:	91 93       	st	Z+, r25
    3cfe:	22 50       	subi	r18, 0x02	; 2
    3d00:	31 09       	sbc	r19, r1
    3d02:	39 83       	std	Y+1, r19	; 0x01
    3d04:	28 83       	st	Y, r18
    3d06:	3a c0       	rjmp	.+116    	; 0x3d7c <malloc+0x124>
    3d08:	20 91 97 08 	lds	r18, 0x0897	; 0x800897 <__brkval>
    3d0c:	30 91 98 08 	lds	r19, 0x0898	; 0x800898 <__brkval+0x1>
    3d10:	23 2b       	or	r18, r19
    3d12:	41 f4       	brne	.+16     	; 0x3d24 <malloc+0xcc>
    3d14:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3d18:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3d1c:	30 93 98 08 	sts	0x0898, r19	; 0x800898 <__brkval+0x1>
    3d20:	20 93 97 08 	sts	0x0897, r18	; 0x800897 <__brkval>
    3d24:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3d28:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3d2c:	21 15       	cp	r18, r1
    3d2e:	31 05       	cpc	r19, r1
    3d30:	41 f4       	brne	.+16     	; 0x3d42 <malloc+0xea>
    3d32:	2d b7       	in	r18, 0x3d	; 61
    3d34:	3e b7       	in	r19, 0x3e	; 62
    3d36:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3d3a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3d3e:	24 1b       	sub	r18, r20
    3d40:	35 0b       	sbc	r19, r21
    3d42:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <__brkval>
    3d46:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <__brkval+0x1>
    3d4a:	e2 17       	cp	r30, r18
    3d4c:	f3 07       	cpc	r31, r19
    3d4e:	a0 f4       	brcc	.+40     	; 0x3d78 <malloc+0x120>
    3d50:	2e 1b       	sub	r18, r30
    3d52:	3f 0b       	sbc	r19, r31
    3d54:	28 17       	cp	r18, r24
    3d56:	39 07       	cpc	r19, r25
    3d58:	78 f0       	brcs	.+30     	; 0x3d78 <malloc+0x120>
    3d5a:	ac 01       	movw	r20, r24
    3d5c:	4e 5f       	subi	r20, 0xFE	; 254
    3d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d60:	24 17       	cp	r18, r20
    3d62:	35 07       	cpc	r19, r21
    3d64:	48 f0       	brcs	.+18     	; 0x3d78 <malloc+0x120>
    3d66:	4e 0f       	add	r20, r30
    3d68:	5f 1f       	adc	r21, r31
    3d6a:	50 93 98 08 	sts	0x0898, r21	; 0x800898 <__brkval+0x1>
    3d6e:	40 93 97 08 	sts	0x0897, r20	; 0x800897 <__brkval>
    3d72:	81 93       	st	Z+, r24
    3d74:	91 93       	st	Z+, r25
    3d76:	02 c0       	rjmp	.+4      	; 0x3d7c <malloc+0x124>
    3d78:	e0 e0       	ldi	r30, 0x00	; 0
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	cf 01       	movw	r24, r30
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	1f 91       	pop	r17
    3d84:	0f 91       	pop	r16
    3d86:	08 95       	ret

00003d88 <free>:
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	09 f4       	brne	.+2      	; 0x3d92 <free+0xa>
    3d90:	81 c0       	rjmp	.+258    	; 0x3e94 <free+0x10c>
    3d92:	fc 01       	movw	r30, r24
    3d94:	32 97       	sbiw	r30, 0x02	; 2
    3d96:	13 82       	std	Z+3, r1	; 0x03
    3d98:	12 82       	std	Z+2, r1	; 0x02
    3d9a:	a0 91 99 08 	lds	r26, 0x0899	; 0x800899 <__flp>
    3d9e:	b0 91 9a 08 	lds	r27, 0x089A	; 0x80089a <__flp+0x1>
    3da2:	10 97       	sbiw	r26, 0x00	; 0
    3da4:	81 f4       	brne	.+32     	; 0x3dc6 <free+0x3e>
    3da6:	20 81       	ld	r18, Z
    3da8:	31 81       	ldd	r19, Z+1	; 0x01
    3daa:	82 0f       	add	r24, r18
    3dac:	93 1f       	adc	r25, r19
    3dae:	20 91 97 08 	lds	r18, 0x0897	; 0x800897 <__brkval>
    3db2:	30 91 98 08 	lds	r19, 0x0898	; 0x800898 <__brkval+0x1>
    3db6:	28 17       	cp	r18, r24
    3db8:	39 07       	cpc	r19, r25
    3dba:	51 f5       	brne	.+84     	; 0x3e10 <free+0x88>
    3dbc:	f0 93 98 08 	sts	0x0898, r31	; 0x800898 <__brkval+0x1>
    3dc0:	e0 93 97 08 	sts	0x0897, r30	; 0x800897 <__brkval>
    3dc4:	67 c0       	rjmp	.+206    	; 0x3e94 <free+0x10c>
    3dc6:	ed 01       	movw	r28, r26
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	ce 17       	cp	r28, r30
    3dce:	df 07       	cpc	r29, r31
    3dd0:	40 f4       	brcc	.+16     	; 0x3de2 <free+0x5a>
    3dd2:	4a 81       	ldd	r20, Y+2	; 0x02
    3dd4:	5b 81       	ldd	r21, Y+3	; 0x03
    3dd6:	9e 01       	movw	r18, r28
    3dd8:	41 15       	cp	r20, r1
    3dda:	51 05       	cpc	r21, r1
    3ddc:	f1 f0       	breq	.+60     	; 0x3e1a <free+0x92>
    3dde:	ea 01       	movw	r28, r20
    3de0:	f5 cf       	rjmp	.-22     	; 0x3dcc <free+0x44>
    3de2:	d3 83       	std	Z+3, r29	; 0x03
    3de4:	c2 83       	std	Z+2, r28	; 0x02
    3de6:	40 81       	ld	r20, Z
    3de8:	51 81       	ldd	r21, Z+1	; 0x01
    3dea:	84 0f       	add	r24, r20
    3dec:	95 1f       	adc	r25, r21
    3dee:	c8 17       	cp	r28, r24
    3df0:	d9 07       	cpc	r29, r25
    3df2:	59 f4       	brne	.+22     	; 0x3e0a <free+0x82>
    3df4:	88 81       	ld	r24, Y
    3df6:	99 81       	ldd	r25, Y+1	; 0x01
    3df8:	84 0f       	add	r24, r20
    3dfa:	95 1f       	adc	r25, r21
    3dfc:	02 96       	adiw	r24, 0x02	; 2
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	80 83       	st	Z, r24
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	9b 81       	ldd	r25, Y+3	; 0x03
    3e06:	93 83       	std	Z+3, r25	; 0x03
    3e08:	82 83       	std	Z+2, r24	; 0x02
    3e0a:	21 15       	cp	r18, r1
    3e0c:	31 05       	cpc	r19, r1
    3e0e:	29 f4       	brne	.+10     	; 0x3e1a <free+0x92>
    3e10:	f0 93 9a 08 	sts	0x089A, r31	; 0x80089a <__flp+0x1>
    3e14:	e0 93 99 08 	sts	0x0899, r30	; 0x800899 <__flp>
    3e18:	3d c0       	rjmp	.+122    	; 0x3e94 <free+0x10c>
    3e1a:	e9 01       	movw	r28, r18
    3e1c:	fb 83       	std	Y+3, r31	; 0x03
    3e1e:	ea 83       	std	Y+2, r30	; 0x02
    3e20:	49 91       	ld	r20, Y+
    3e22:	59 91       	ld	r21, Y+
    3e24:	c4 0f       	add	r28, r20
    3e26:	d5 1f       	adc	r29, r21
    3e28:	ec 17       	cp	r30, r28
    3e2a:	fd 07       	cpc	r31, r29
    3e2c:	61 f4       	brne	.+24     	; 0x3e46 <free+0xbe>
    3e2e:	80 81       	ld	r24, Z
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	84 0f       	add	r24, r20
    3e34:	95 1f       	adc	r25, r21
    3e36:	02 96       	adiw	r24, 0x02	; 2
    3e38:	e9 01       	movw	r28, r18
    3e3a:	99 83       	std	Y+1, r25	; 0x01
    3e3c:	88 83       	st	Y, r24
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	9b 83       	std	Y+3, r25	; 0x03
    3e44:	8a 83       	std	Y+2, r24	; 0x02
    3e46:	e0 e0       	ldi	r30, 0x00	; 0
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	12 96       	adiw	r26, 0x02	; 2
    3e4c:	8d 91       	ld	r24, X+
    3e4e:	9c 91       	ld	r25, X
    3e50:	13 97       	sbiw	r26, 0x03	; 3
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	19 f0       	breq	.+6      	; 0x3e5c <free+0xd4>
    3e56:	fd 01       	movw	r30, r26
    3e58:	dc 01       	movw	r26, r24
    3e5a:	f7 cf       	rjmp	.-18     	; 0x3e4a <free+0xc2>
    3e5c:	8d 91       	ld	r24, X+
    3e5e:	9c 91       	ld	r25, X
    3e60:	11 97       	sbiw	r26, 0x01	; 1
    3e62:	9d 01       	movw	r18, r26
    3e64:	2e 5f       	subi	r18, 0xFE	; 254
    3e66:	3f 4f       	sbci	r19, 0xFF	; 255
    3e68:	82 0f       	add	r24, r18
    3e6a:	93 1f       	adc	r25, r19
    3e6c:	20 91 97 08 	lds	r18, 0x0897	; 0x800897 <__brkval>
    3e70:	30 91 98 08 	lds	r19, 0x0898	; 0x800898 <__brkval+0x1>
    3e74:	28 17       	cp	r18, r24
    3e76:	39 07       	cpc	r19, r25
    3e78:	69 f4       	brne	.+26     	; 0x3e94 <free+0x10c>
    3e7a:	30 97       	sbiw	r30, 0x00	; 0
    3e7c:	29 f4       	brne	.+10     	; 0x3e88 <free+0x100>
    3e7e:	10 92 9a 08 	sts	0x089A, r1	; 0x80089a <__flp+0x1>
    3e82:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <__flp>
    3e86:	02 c0       	rjmp	.+4      	; 0x3e8c <free+0x104>
    3e88:	13 82       	std	Z+3, r1	; 0x03
    3e8a:	12 82       	std	Z+2, r1	; 0x02
    3e8c:	b0 93 98 08 	sts	0x0898, r27	; 0x800898 <__brkval+0x1>
    3e90:	a0 93 97 08 	sts	0x0897, r26	; 0x800897 <__brkval>
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	08 95       	ret

00003e9a <realloc>:
    3e9a:	6f 92       	push	r6
    3e9c:	7f 92       	push	r7
    3e9e:	8f 92       	push	r8
    3ea0:	9f 92       	push	r9
    3ea2:	af 92       	push	r10
    3ea4:	bf 92       	push	r11
    3ea6:	cf 92       	push	r12
    3ea8:	df 92       	push	r13
    3eaa:	ef 92       	push	r14
    3eac:	ff 92       	push	r15
    3eae:	0f 93       	push	r16
    3eb0:	1f 93       	push	r17
    3eb2:	cf 93       	push	r28
    3eb4:	df 93       	push	r29
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	81 f4       	brne	.+32     	; 0x3eda <realloc+0x40>
    3eba:	cb 01       	movw	r24, r22
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	1f 91       	pop	r17
    3ec2:	0f 91       	pop	r16
    3ec4:	ff 90       	pop	r15
    3ec6:	ef 90       	pop	r14
    3ec8:	df 90       	pop	r13
    3eca:	cf 90       	pop	r12
    3ecc:	bf 90       	pop	r11
    3ece:	af 90       	pop	r10
    3ed0:	9f 90       	pop	r9
    3ed2:	8f 90       	pop	r8
    3ed4:	7f 90       	pop	r7
    3ed6:	6f 90       	pop	r6
    3ed8:	bf ce       	rjmp	.-642    	; 0x3c58 <malloc>
    3eda:	fc 01       	movw	r30, r24
    3edc:	e6 0f       	add	r30, r22
    3ede:	f7 1f       	adc	r31, r23
    3ee0:	9c 01       	movw	r18, r24
    3ee2:	22 50       	subi	r18, 0x02	; 2
    3ee4:	31 09       	sbc	r19, r1
    3ee6:	e2 17       	cp	r30, r18
    3ee8:	f3 07       	cpc	r31, r19
    3eea:	08 f4       	brcc	.+2      	; 0x3eee <realloc+0x54>
    3eec:	a5 c0       	rjmp	.+330    	; 0x4038 <realloc+0x19e>
    3eee:	ec 01       	movw	r28, r24
    3ef0:	d9 01       	movw	r26, r18
    3ef2:	0d 91       	ld	r16, X+
    3ef4:	1c 91       	ld	r17, X
    3ef6:	11 97       	sbiw	r26, 0x01	; 1
    3ef8:	06 17       	cp	r16, r22
    3efa:	17 07       	cpc	r17, r23
    3efc:	a8 f0       	brcs	.+42     	; 0x3f28 <realloc+0x8e>
    3efe:	05 30       	cpi	r16, 0x05	; 5
    3f00:	11 05       	cpc	r17, r1
    3f02:	08 f4       	brcc	.+2      	; 0x3f06 <realloc+0x6c>
    3f04:	97 c0       	rjmp	.+302    	; 0x4034 <realloc+0x19a>
    3f06:	c8 01       	movw	r24, r16
    3f08:	04 97       	sbiw	r24, 0x04	; 4
    3f0a:	86 17       	cp	r24, r22
    3f0c:	97 07       	cpc	r25, r23
    3f0e:	08 f4       	brcc	.+2      	; 0x3f12 <realloc+0x78>
    3f10:	91 c0       	rjmp	.+290    	; 0x4034 <realloc+0x19a>
    3f12:	02 50       	subi	r16, 0x02	; 2
    3f14:	11 09       	sbc	r17, r1
    3f16:	06 1b       	sub	r16, r22
    3f18:	17 0b       	sbc	r17, r23
    3f1a:	01 93       	st	Z+, r16
    3f1c:	11 93       	st	Z+, r17
    3f1e:	6d 93       	st	X+, r22
    3f20:	7c 93       	st	X, r23
    3f22:	cf 01       	movw	r24, r30
    3f24:	31 df       	rcall	.-414    	; 0x3d88 <free>
    3f26:	86 c0       	rjmp	.+268    	; 0x4034 <realloc+0x19a>
    3f28:	5b 01       	movw	r10, r22
    3f2a:	a0 1a       	sub	r10, r16
    3f2c:	b1 0a       	sbc	r11, r17
    3f2e:	4c 01       	movw	r8, r24
    3f30:	80 0e       	add	r8, r16
    3f32:	91 1e       	adc	r9, r17
    3f34:	a0 91 99 08 	lds	r26, 0x0899	; 0x800899 <__flp>
    3f38:	b0 91 9a 08 	lds	r27, 0x089A	; 0x80089a <__flp+0x1>
    3f3c:	61 2c       	mov	r6, r1
    3f3e:	71 2c       	mov	r7, r1
    3f40:	e1 2c       	mov	r14, r1
    3f42:	f1 2c       	mov	r15, r1
    3f44:	10 97       	sbiw	r26, 0x00	; 0
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <realloc+0xb0>
    3f48:	46 c0       	rjmp	.+140    	; 0x3fd6 <realloc+0x13c>
    3f4a:	8d 91       	ld	r24, X+
    3f4c:	9c 91       	ld	r25, X
    3f4e:	11 97       	sbiw	r26, 0x01	; 1
    3f50:	a8 15       	cp	r26, r8
    3f52:	b9 05       	cpc	r27, r9
    3f54:	b1 f5       	brne	.+108    	; 0x3fc2 <realloc+0x128>
    3f56:	6c 01       	movw	r12, r24
    3f58:	42 e0       	ldi	r20, 0x02	; 2
    3f5a:	c4 0e       	add	r12, r20
    3f5c:	d1 1c       	adc	r13, r1
    3f5e:	ca 14       	cp	r12, r10
    3f60:	db 04       	cpc	r13, r11
    3f62:	78 f1       	brcs	.+94     	; 0x3fc2 <realloc+0x128>
    3f64:	4c 01       	movw	r8, r24
    3f66:	8a 18       	sub	r8, r10
    3f68:	9b 08       	sbc	r9, r11
    3f6a:	64 01       	movw	r12, r8
    3f6c:	42 e0       	ldi	r20, 0x02	; 2
    3f6e:	c4 0e       	add	r12, r20
    3f70:	d1 1c       	adc	r13, r1
    3f72:	12 96       	adiw	r26, 0x02	; 2
    3f74:	bc 90       	ld	r11, X
    3f76:	12 97       	sbiw	r26, 0x02	; 2
    3f78:	13 96       	adiw	r26, 0x03	; 3
    3f7a:	ac 91       	ld	r26, X
    3f7c:	b5 e0       	ldi	r27, 0x05	; 5
    3f7e:	cb 16       	cp	r12, r27
    3f80:	d1 04       	cpc	r13, r1
    3f82:	40 f0       	brcs	.+16     	; 0x3f94 <realloc+0xfa>
    3f84:	b2 82       	std	Z+2, r11	; 0x02
    3f86:	a3 83       	std	Z+3, r26	; 0x03
    3f88:	91 82       	std	Z+1, r9	; 0x01
    3f8a:	80 82       	st	Z, r8
    3f8c:	d9 01       	movw	r26, r18
    3f8e:	6d 93       	st	X+, r22
    3f90:	7c 93       	st	X, r23
    3f92:	09 c0       	rjmp	.+18     	; 0x3fa6 <realloc+0x10c>
    3f94:	0e 5f       	subi	r16, 0xFE	; 254
    3f96:	1f 4f       	sbci	r17, 0xFF	; 255
    3f98:	80 0f       	add	r24, r16
    3f9a:	91 1f       	adc	r25, r17
    3f9c:	f9 01       	movw	r30, r18
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	80 83       	st	Z, r24
    3fa2:	eb 2d       	mov	r30, r11
    3fa4:	fa 2f       	mov	r31, r26
    3fa6:	e1 14       	cp	r14, r1
    3fa8:	f1 04       	cpc	r15, r1
    3faa:	31 f0       	breq	.+12     	; 0x3fb8 <realloc+0x11e>
    3fac:	d7 01       	movw	r26, r14
    3fae:	13 96       	adiw	r26, 0x03	; 3
    3fb0:	fc 93       	st	X, r31
    3fb2:	ee 93       	st	-X, r30
    3fb4:	12 97       	sbiw	r26, 0x02	; 2
    3fb6:	3e c0       	rjmp	.+124    	; 0x4034 <realloc+0x19a>
    3fb8:	f0 93 9a 08 	sts	0x089A, r31	; 0x80089a <__flp+0x1>
    3fbc:	e0 93 99 08 	sts	0x0899, r30	; 0x800899 <__flp>
    3fc0:	39 c0       	rjmp	.+114    	; 0x4034 <realloc+0x19a>
    3fc2:	68 16       	cp	r6, r24
    3fc4:	79 06       	cpc	r7, r25
    3fc6:	08 f4       	brcc	.+2      	; 0x3fca <realloc+0x130>
    3fc8:	3c 01       	movw	r6, r24
    3fca:	7d 01       	movw	r14, r26
    3fcc:	12 96       	adiw	r26, 0x02	; 2
    3fce:	0d 90       	ld	r0, X+
    3fd0:	bc 91       	ld	r27, X
    3fd2:	a0 2d       	mov	r26, r0
    3fd4:	b7 cf       	rjmp	.-146    	; 0x3f44 <realloc+0xaa>
    3fd6:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <__brkval>
    3fda:	90 91 98 08 	lds	r25, 0x0898	; 0x800898 <__brkval+0x1>
    3fde:	88 16       	cp	r8, r24
    3fe0:	99 06       	cpc	r9, r25
    3fe2:	e1 f4       	brne	.+56     	; 0x401c <realloc+0x182>
    3fe4:	66 16       	cp	r6, r22
    3fe6:	77 06       	cpc	r7, r23
    3fe8:	c8 f4       	brcc	.+50     	; 0x401c <realloc+0x182>
    3fea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3fee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3ff2:	00 97       	sbiw	r24, 0x00	; 0
    3ff4:	41 f4       	brne	.+16     	; 0x4006 <realloc+0x16c>
    3ff6:	8d b7       	in	r24, 0x3d	; 61
    3ff8:	9e b7       	in	r25, 0x3e	; 62
    3ffa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3ffe:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4002:	84 1b       	sub	r24, r20
    4004:	95 0b       	sbc	r25, r21
    4006:	e8 17       	cp	r30, r24
    4008:	f9 07       	cpc	r31, r25
    400a:	b0 f4       	brcc	.+44     	; 0x4038 <realloc+0x19e>
    400c:	f0 93 98 08 	sts	0x0898, r31	; 0x800898 <__brkval+0x1>
    4010:	e0 93 97 08 	sts	0x0897, r30	; 0x800897 <__brkval>
    4014:	f9 01       	movw	r30, r18
    4016:	71 83       	std	Z+1, r23	; 0x01
    4018:	60 83       	st	Z, r22
    401a:	0c c0       	rjmp	.+24     	; 0x4034 <realloc+0x19a>
    401c:	cb 01       	movw	r24, r22
    401e:	1c de       	rcall	.-968    	; 0x3c58 <malloc>
    4020:	7c 01       	movw	r14, r24
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	49 f0       	breq	.+18     	; 0x4038 <realloc+0x19e>
    4026:	a8 01       	movw	r20, r16
    4028:	be 01       	movw	r22, r28
    402a:	20 d0       	rcall	.+64     	; 0x406c <memcpy>
    402c:	ce 01       	movw	r24, r28
    402e:	ac de       	rcall	.-680    	; 0x3d88 <free>
    4030:	c7 01       	movw	r24, r14
    4032:	04 c0       	rjmp	.+8      	; 0x403c <realloc+0x1a2>
    4034:	ce 01       	movw	r24, r28
    4036:	02 c0       	rjmp	.+4      	; 0x403c <realloc+0x1a2>
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	1f 91       	pop	r17
    4042:	0f 91       	pop	r16
    4044:	ff 90       	pop	r15
    4046:	ef 90       	pop	r14
    4048:	df 90       	pop	r13
    404a:	cf 90       	pop	r12
    404c:	bf 90       	pop	r11
    404e:	af 90       	pop	r10
    4050:	9f 90       	pop	r9
    4052:	8f 90       	pop	r8
    4054:	7f 90       	pop	r7
    4056:	6f 90       	pop	r6
    4058:	08 95       	ret

0000405a <memcpy_P>:
    405a:	fb 01       	movw	r30, r22
    405c:	dc 01       	movw	r26, r24
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <memcpy_P+0xa>
    4060:	05 90       	lpm	r0, Z+
    4062:	0d 92       	st	X+, r0
    4064:	41 50       	subi	r20, 0x01	; 1
    4066:	50 40       	sbci	r21, 0x00	; 0
    4068:	d8 f7       	brcc	.-10     	; 0x4060 <memcpy_P+0x6>
    406a:	08 95       	ret

0000406c <memcpy>:
    406c:	fb 01       	movw	r30, r22
    406e:	dc 01       	movw	r26, r24
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <memcpy+0xa>
    4072:	01 90       	ld	r0, Z+
    4074:	0d 92       	st	X+, r0
    4076:	41 50       	subi	r20, 0x01	; 1
    4078:	50 40       	sbci	r21, 0x00	; 0
    407a:	d8 f7       	brcc	.-10     	; 0x4072 <memcpy+0x6>
    407c:	08 95       	ret

0000407e <strcpy>:
    407e:	fb 01       	movw	r30, r22
    4080:	dc 01       	movw	r26, r24
    4082:	01 90       	ld	r0, Z+
    4084:	0d 92       	st	X+, r0
    4086:	00 20       	and	r0, r0
    4088:	e1 f7       	brne	.-8      	; 0x4082 <strcpy+0x4>
    408a:	08 95       	ret

0000408c <__do_global_dtors>:
    408c:	11 e0       	ldi	r17, 0x01	; 1
    408e:	c0 e4       	ldi	r28, 0x40	; 64
    4090:	d1 e0       	ldi	r29, 0x01	; 1
    4092:	00 e0       	ldi	r16, 0x00	; 0
    4094:	05 c0       	rjmp	.+10     	; 0x40a0 <__do_global_dtors+0x14>
    4096:	80 2f       	mov	r24, r16
    4098:	fe 01       	movw	r30, r28
    409a:	bd dd       	rcall	.-1158   	; 0x3c16 <__tablejump2__>
    409c:	21 96       	adiw	r28, 0x01	; 1
    409e:	01 1d       	adc	r16, r1
    40a0:	c1 34       	cpi	r28, 0x41	; 65
    40a2:	d1 07       	cpc	r29, r17
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	08 07       	cpc	r16, r24
    40a8:	b1 f7       	brne	.-20     	; 0x4096 <__do_global_dtors+0xa>
    40aa:	f8 94       	cli

000040ac <__stop_program>:
    40ac:	ff cf       	rjmp	.-2      	; 0x40ac <__stop_program>
