
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f6  00800200  0000700c  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000700c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fe  008005f6  008005f6  00007496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000074c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000011a0  00000000  00000000  00007508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00037070  00000000  00000000  000086a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000833f  00000000  00000000  0003f718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b026  00000000  00000000  00047a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003f20  00000000  00000000  00052a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008e6f  00000000  00000000  000569a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016ace  00000000  00000000  0005f80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001330  00000000  00000000  000762dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c1       	rjmp	.+784    	; 0x312 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__vector_1>
       8:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__vector_2>
       c:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__vector_3>
      10:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__vector_4>
      14:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__vector_5>
      18:	0c 94 d8 22 	jmp	0x45b0	; 0x45b0 <__vector_6>
      1c:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__vector_7>
      20:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__vector_8>
      24:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__vector_10>
      28:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__vector_10>
      2c:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__vector_10>
      30:	a1 c1       	rjmp	.+834    	; 0x374 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c1       	rjmp	.+830    	; 0x374 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c1       	rjmp	.+826    	; 0x374 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c1       	rjmp	.+822    	; 0x374 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c1       	rjmp	.+818    	; 0x374 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c1       	rjmp	.+814    	; 0x374 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c1       	rjmp	.+810    	; 0x374 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c1       	rjmp	.+806    	; 0x374 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c1       	rjmp	.+802    	; 0x374 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c1       	rjmp	.+798    	; 0x374 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c1       	rjmp	.+794    	; 0x374 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <__vector_23>
      60:	89 c1       	rjmp	.+786    	; 0x374 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__vector_25>
      68:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__vector_26>
      6c:	83 c1       	rjmp	.+774    	; 0x374 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c1       	rjmp	.+770    	; 0x374 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c1       	rjmp	.+766    	; 0x374 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c1       	rjmp	.+762    	; 0x374 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c1       	rjmp	.+758    	; 0x374 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c1       	rjmp	.+754    	; 0x374 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c1       	rjmp	.+750    	; 0x374 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c1       	rjmp	.+746    	; 0x374 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c1       	rjmp	.+742    	; 0x374 <__bad_interrupt>
      8e:	00 00       	nop
      90:	71 c1       	rjmp	.+738    	; 0x374 <__bad_interrupt>
      92:	00 00       	nop
      94:	6f c1       	rjmp	.+734    	; 0x374 <__bad_interrupt>
      96:	00 00       	nop
      98:	6d c1       	rjmp	.+730    	; 0x374 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__vector_39>
      a0:	69 c1       	rjmp	.+722    	; 0x374 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c1       	rjmp	.+718    	; 0x374 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	65 c1       	rjmp	.+714    	; 0x374 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	63 c1       	rjmp	.+710    	; 0x374 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c1       	rjmp	.+706    	; 0x374 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c1       	rjmp	.+702    	; 0x374 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c1       	rjmp	.+698    	; 0x374 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c1       	rjmp	.+694    	; 0x374 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c1       	rjmp	.+690    	; 0x374 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c1       	rjmp	.+686    	; 0x374 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c1       	rjmp	.+682    	; 0x374 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c1       	rjmp	.+678    	; 0x374 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c1       	rjmp	.+674    	; 0x374 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c1       	rjmp	.+670    	; 0x374 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c1       	rjmp	.+666    	; 0x374 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c1       	rjmp	.+662    	; 0x374 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c1       	rjmp	.+658    	; 0x374 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	41 14       	cp	r4, r1
      e6:	58 14       	cp	r5, r8
      e8:	58 14       	cp	r5, r8
      ea:	55 14       	cp	r5, r5
      ec:	58 14       	cp	r5, r8
      ee:	3f 14       	cp	r3, r15
      f0:	58 14       	cp	r5, r8
      f2:	58 14       	cp	r5, r8
      f4:	58 14       	cp	r5, r8
      f6:	33 14       	cp	r3, r3
      f8:	58 14       	cp	r5, r8
      fa:	58 14       	cp	r5, r8
      fc:	48 14       	cp	r4, r8
      fe:	53 14       	cp	r5, r3
     100:	51 14       	cp	r5, r1
     102:	58 14       	cp	r5, r8
     104:	58 14       	cp	r5, r8
     106:	58 14       	cp	r5, r8
     108:	4f 14       	cp	r4, r15
     10a:	07 63       	ori	r16, 0x37	; 55
     10c:	42 36       	cpi	r20, 0x62	; 98
     10e:	b7 9b       	sbis	0x16, 7	; 22
     110:	d8 a7       	std	Y+40, r29	; 0x28
     112:	1a 39       	cpi	r17, 0x9A	; 154
     114:	68 56       	subi	r22, 0x68	; 104
     116:	18 ae       	std	Y+56, r1	; 0x38
     118:	ba ab       	std	Y+50, r27	; 0x32
     11a:	55 8c       	ldd	r5, Z+29	; 0x1d
     11c:	1d 3c       	cpi	r17, 0xCD	; 205
     11e:	b7 cc       	rjmp	.-1682   	; 0xfffffa8e <__eeprom_end+0xff7efa8e>
     120:	57 63       	ori	r21, 0x37	; 55
     122:	bd 6d       	ori	r27, 0xDD	; 221
     124:	ed fd       	.word	0xfded	; ????
     126:	75 3e       	cpi	r23, 0xE5	; 229
     128:	f6 17       	cp	r31, r22
     12a:	72 31       	cpi	r23, 0x12	; 18
     12c:	bf 00       	.word	0x00bf	; ????
     12e:	00 00       	nop
     130:	80 3f       	cpi	r24, 0xF0	; 240
     132:	08 00       	.word	0x0008	; ????
     134:	00 00       	nop
     136:	be 92       	st	-X, r11
     138:	24 49       	sbci	r18, 0x94	; 148
     13a:	12 3e       	cpi	r17, 0xE2	; 226
     13c:	ab aa       	std	Y+51, r10	; 0x33
     13e:	aa 2a       	or	r10, r26
     140:	be cd       	rjmp	.-1156   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>
     142:	cc cc       	rjmp	.-1640   	; 0xfffffadc <__eeprom_end+0xff7efadc>
     144:	4c 3e       	cpi	r20, 0xEC	; 236
     146:	00 00       	nop
     148:	00 80       	ld	r0, Z
     14a:	be ab       	std	Y+54, r27	; 0x36
     14c:	aa aa       	std	Y+50, r10	; 0x32
     14e:	aa 3e       	cpi	r26, 0xEA	; 234
     150:	00 00       	nop
     152:	00 00       	nop
     154:	bf 00       	.word	0x00bf	; ????
     156:	00 00       	nop
     158:	80 3f       	cpi	r24, 0xF0	; 240
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	00 08       	sbc	r0, r0
     160:	41 78       	andi	r20, 0x81	; 129
     162:	d3 bb       	out	0x13, r29	; 19
     164:	43 87       	std	Z+11, r20	; 0x0b
     166:	d1 13       	cpse	r29, r17
     168:	3d 19       	sub	r19, r13
     16a:	0e 3c       	cpi	r16, 0xCE	; 206
     16c:	c3 bd       	out	0x23, r28	; 35
     16e:	42 82       	std	Z+2, r4	; 0x02
     170:	ad 2b       	or	r26, r29
     172:	3e 68       	ori	r19, 0x8E	; 142
     174:	ec 82       	std	Y+4, r14	; 0x04
     176:	76 be       	out	0x36, r7	; 54
     178:	d9 8f       	std	Y+25, r29	; 0x19
     17a:	e1 a9       	ldd	r30, Z+49	; 0x31
     17c:	3e 4c       	sbci	r19, 0xCE	; 206
     17e:	80 ef       	ldi	r24, 0xF0	; 240
     180:	ff be       	out	0x3f, r15	; 63
     182:	01 c4       	rjmp	.+2050   	; 0x986 <_Z20countEdgesAnemometerv+0x8>
     184:	ff 7f       	andi	r31, 0xFF	; 255
     186:	3f 00       	.word	0x003f	; ????
     188:	00 00       	nop
     18a:	00 00       	nop
     18c:	db 21       	and	r29, r11
     18e:	a5 21       	and	r26, r5
     190:	ad 21       	and	r26, r13
     192:	b9 21       	and	r27, r9
     194:	c6 21       	and	r28, r6
     196:	e7 21       	and	r30, r7
     198:	f4 21       	and	r31, r4
     19a:	b0 24       	eor	r11, r0
     19c:	b3 24       	eor	r11, r3
     19e:	a2 24       	eor	r10, r2
     1a0:	a6 24       	eor	r10, r6
     1a2:	ac 24       	eor	r10, r12
     1a4:	ea 24       	eor	r14, r10
     1a6:	b7 24       	eor	r11, r7
     1a8:	bb 24       	eor	r11, r11
     1aa:	c1 24       	eor	r12, r1
     1ac:	c5 24       	eor	r12, r5
     1ae:	c9 24       	eor	r12, r9
     1b0:	cf 24       	eor	r12, r15
     1b2:	d3 24       	eor	r13, r3
     1b4:	d7 24       	eor	r13, r7
     1b6:	ea 24       	eor	r14, r10
     1b8:	dd 24       	eor	r13, r13
     1ba:	e1 24       	eor	r14, r1
     1bc:	e5 24       	eor	r14, r5

000001be <__trampolines_end>:
     1be:	4a 61       	ori	r20, 0x1A	; 26
     1c0:	6e 20       	and	r6, r14
     1c2:	20 37       	cpi	r18, 0x70	; 112
     1c4:	20 32       	cpi	r18, 0x20	; 32
     1c6:	30 31       	cpi	r19, 0x10	; 16
     1c8:	39 00       	.word	0x0039	; ????

000001ca <_ZZN13RealTimeClock7initRTCEvE3__c_0>:
     1ca:	31 31 3a 34 32 3a 31 34 00                          11:42:14.

000001d3 <_ZL11daysInMonth>:
     1d3:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000001df <digital_pin_to_timer_PGM>:
     1df:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     20b:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000225 <digital_pin_to_bit_mask_PGM>:
     225:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     235:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     245:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     255:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     265:	04 08 10 20 40 80                                   ... @.

0000026b <digital_pin_to_port_PGM>:
     26b:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     27b:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     28b:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     29b:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2ab:	0b 0b 0b 0b 0b 0b                                   ......

000002b1 <port_to_input_PGM>:
     2b1:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2c1:	00 01 00 00 03 01 06 01 09 01                       ..........

000002cb <port_to_output_PGM>:
     2cb:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2db:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002e5 <port_to_mode_PGM>:
     2e5:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2f5:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000300 <__ctors_start>:
     300:	a8 05       	cpc	r26, r8
     302:	03 08       	sbc	r0, r3
     304:	51 09       	sbc	r21, r1
     306:	bf 19       	sub	r27, r15
     308:	33 1a       	sub	r3, r19
     30a:	ad 1f       	adc	r26, r29
     30c:	c7 27       	eor	r28, r23
     30e:	f9 2a       	or	r15, r25

00000310 <__ctors_end>:
     310:	43 08       	sbc	r4, r3

00000312 <__dtors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	d1 e2       	ldi	r29, 0x21	; 33
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60

00000322 <__do_copy_data>:
     322:	15 e0       	ldi	r17, 0x05	; 5
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b2 e0       	ldi	r27, 0x02	; 2
     328:	ec e0       	ldi	r30, 0x0C	; 12
     32a:	f0 e7       	ldi	r31, 0x70	; 112
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	a6 3f       	cpi	r26, 0xF6	; 246
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	2a e0       	ldi	r18, 0x0A	; 10
     33e:	a6 ef       	ldi	r26, 0xF6	; 246
     340:	b5 e0       	ldi	r27, 0x05	; 5
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a4 3f       	cpi	r26, 0xF4	; 244
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>

0000034c <__do_global_ctors>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	c8 e8       	ldi	r28, 0x88	; 136
     350:	d1 e0       	ldi	r29, 0x01	; 1
     352:	00 e0       	ldi	r16, 0x00	; 0
     354:	06 c0       	rjmp	.+12     	; 0x362 <__do_global_ctors+0x16>
     356:	21 97       	sbiw	r28, 0x01	; 1
     358:	01 09       	sbc	r16, r1
     35a:	80 2f       	mov	r24, r16
     35c:	fe 01       	movw	r30, r28
     35e:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <__tablejump2__>
     362:	c0 38       	cpi	r28, 0x80	; 128
     364:	d1 07       	cpc	r29, r17
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 07       	cpc	r16, r24
     36a:	a9 f7       	brne	.-22     	; 0x356 <__do_global_ctors+0xa>
     36c:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <main>
     370:	0c 94 f5 37 	jmp	0x6fea	; 0x6fea <__do_global_dtors>

00000374 <__bad_interrupt>:
     374:	45 ce       	rjmp	.-886    	; 0x0 <__vectors>

00000376 <_Z25binaryToVoltageConvertingi>:
#include "ADC.h"

float binaryToVoltageConverting(int val)
{
	float voltage = ((float) (val * SYSTEMVOLTAGE))/((float) RESOLUTION_ADC);
	return voltage;
     376:	bc 01       	movw	r22, r24
     378:	99 0f       	add	r25, r25
     37a:	88 0b       	sbc	r24, r24
     37c:	99 0b       	sbc	r25, r25
     37e:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 ea       	ldi	r20, 0xA0	; 160
     388:	50 e4       	ldi	r21, 0x40	; 64
     38a:	0e 94 10 1c 	call	0x3820	; 0x3820 <__mulsf3>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 ec       	ldi	r19, 0xC0	; 192
     392:	4f e7       	ldi	r20, 0x7F	; 127
     394:	54 e4       	ldi	r21, 0x44	; 68
     396:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__divsf3>
} //voltageADC
     39a:	08 95       	ret

0000039c <_Z16getWindDirectionf>:

String getWindDirection(float voltage)
{
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
     3aa:	6a 01       	movw	r12, r20
     3ac:	7b 01       	movw	r14, r22
	String windDirection;
     3ae:	60 ef       	ldi	r22, 0xF0	; 240
     3b0:	73 e0       	ldi	r23, 0x03	; 3
     3b2:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
	
	if (0 < voltage && voltage <= 0.66)
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	a9 01       	movw	r20, r18
     3bc:	c7 01       	movw	r24, r14
     3be:	b6 01       	movw	r22, r12
     3c0:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     3c4:	18 16       	cp	r1, r24
     3c6:	6c f4       	brge	.+26     	; 0x3e2 <_Z16getWindDirectionf+0x46>
     3c8:	23 ec       	ldi	r18, 0xC3	; 195
     3ca:	35 ef       	ldi	r19, 0xF5	; 245
     3cc:	48 e2       	ldi	r20, 0x28	; 40
     3ce:	5f e3       	ldi	r21, 0x3F	; 63
     3d0:	c7 01       	movw	r24, r14
     3d2:	b6 01       	movw	r22, r12
     3d4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     3d8:	18 16       	cp	r1, r24
     3da:	1c f0       	brlt	.+6      	; 0x3e2 <_Z16getWindDirectionf+0x46>
	{
		windDirection = "NEE";
     3dc:	6f e6       	ldi	r22, 0x6F	; 111
     3de:	72 e0       	ldi	r23, 0x02	; 2
     3e0:	58 c1       	rjmp	.+688    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (0.66 < voltage && voltage <= 0.87)
     3e2:	23 ec       	ldi	r18, 0xC3	; 195
     3e4:	35 ef       	ldi	r19, 0xF5	; 245
     3e6:	48 e2       	ldi	r20, 0x28	; 40
     3e8:	5f e3       	ldi	r21, 0x3F	; 63
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     3f2:	18 16       	cp	r1, r24
     3f4:	6c f4       	brge	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f6:	22 e5       	ldi	r18, 0x52	; 82
     3f8:	38 eb       	ldi	r19, 0xB8	; 184
     3fa:	4e e5       	ldi	r20, 0x5E	; 94
     3fc:	5f e3       	ldi	r21, 0x3F	; 63
     3fe:	c7 01       	movw	r24, r14
     400:	b6 01       	movw	r22, r12
     402:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     406:	18 16       	cp	r1, r24
     408:	1c f0       	brlt	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		windDirection = "E";
     40a:	61 e7       	ldi	r22, 0x71	; 113
     40c:	72 e0       	ldi	r23, 0x02	; 2
     40e:	41 c1       	rjmp	.+642    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (0.87 < voltage && voltage <= 1.05)
     410:	22 e5       	ldi	r18, 0x52	; 82
     412:	38 eb       	ldi	r19, 0xB8	; 184
     414:	4e e5       	ldi	r20, 0x5E	; 94
     416:	5f e3       	ldi	r21, 0x3F	; 63
     418:	c7 01       	movw	r24, r14
     41a:	b6 01       	movw	r22, r12
     41c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     420:	18 16       	cp	r1, r24
     422:	6c f4       	brge	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     424:	26 e6       	ldi	r18, 0x66	; 102
     426:	36 e6       	ldi	r19, 0x66	; 102
     428:	46 e8       	ldi	r20, 0x86	; 134
     42a:	5f e3       	ldi	r21, 0x3F	; 63
     42c:	c7 01       	movw	r24, r14
     42e:	b6 01       	movw	r22, r12
     430:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     434:	18 16       	cp	r1, r24
     436:	1c f0       	brlt	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		windDirection = "SSE";
     438:	63 e7       	ldi	r22, 0x73	; 115
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	2a c1       	rjmp	.+596    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (1.05 < voltage && voltage <= 1.18)
     43e:	26 e6       	ldi	r18, 0x66	; 102
     440:	36 e6       	ldi	r19, 0x66	; 102
     442:	46 e8       	ldi	r20, 0x86	; 134
     444:	5f e3       	ldi	r21, 0x3F	; 63
     446:	c7 01       	movw	r24, r14
     448:	b6 01       	movw	r22, r12
     44a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     44e:	18 16       	cp	r1, r24
     450:	6c f4       	brge	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     452:	2d e3       	ldi	r18, 0x3D	; 61
     454:	3a e0       	ldi	r19, 0x0A	; 10
     456:	47 e9       	ldi	r20, 0x97	; 151
     458:	5f e3       	ldi	r21, 0x3F	; 63
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     462:	18 16       	cp	r1, r24
     464:	1c f0       	brlt	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		windDirection = "SEE";
     466:	67 e7       	ldi	r22, 0x77	; 119
     468:	72 e0       	ldi	r23, 0x02	; 2
     46a:	13 c1       	rjmp	.+550    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (1.18 < voltage && voltage <= 1.34)
     46c:	2d e3       	ldi	r18, 0x3D	; 61
     46e:	3a e0       	ldi	r19, 0x0A	; 10
     470:	47 e9       	ldi	r20, 0x97	; 151
     472:	5f e3       	ldi	r21, 0x3F	; 63
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     47c:	18 16       	cp	r1, r24
     47e:	6c f4       	brge	.+26     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     480:	2f e1       	ldi	r18, 0x1F	; 31
     482:	35 e8       	ldi	r19, 0x85	; 133
     484:	4b ea       	ldi	r20, 0xAB	; 171
     486:	5f e3       	ldi	r21, 0x3F	; 63
     488:	c7 01       	movw	r24, r14
     48a:	b6 01       	movw	r22, r12
     48c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     490:	18 16       	cp	r1, r24
     492:	1c f0       	brlt	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	{
		windDirection = "SE";
     494:	64 e7       	ldi	r22, 0x74	; 116
     496:	72 e0       	ldi	r23, 0x02	; 2
     498:	fc c0       	rjmp	.+504    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (1.34 < voltage && voltage <= 1.57)
     49a:	2f e1       	ldi	r18, 0x1F	; 31
     49c:	35 e8       	ldi	r19, 0x85	; 133
     49e:	4b ea       	ldi	r20, 0xAB	; 171
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	c7 01       	movw	r24, r14
     4a4:	b6 01       	movw	r22, r12
     4a6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     4aa:	18 16       	cp	r1, r24
     4ac:	6c f4       	brge	.+26     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4ae:	23 ec       	ldi	r18, 0xC3	; 195
     4b0:	35 ef       	ldi	r19, 0xF5	; 245
     4b2:	48 ec       	ldi	r20, 0xC8	; 200
     4b4:	5f e3       	ldi	r21, 0x3F	; 63
     4b6:	c7 01       	movw	r24, r14
     4b8:	b6 01       	movw	r22, r12
     4ba:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     4be:	18 16       	cp	r1, r24
     4c0:	1c f0       	brlt	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
	{
		windDirection = "SSW";
     4c2:	6b e7       	ldi	r22, 0x7B	; 123
     4c4:	72 e0       	ldi	r23, 0x02	; 2
     4c6:	e5 c0       	rjmp	.+458    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (1.57 < voltage && voltage <= 2.03)
     4c8:	23 ec       	ldi	r18, 0xC3	; 195
     4ca:	35 ef       	ldi	r19, 0xF5	; 245
     4cc:	48 ec       	ldi	r20, 0xC8	; 200
     4ce:	5f e3       	ldi	r21, 0x3F	; 63
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     4d8:	18 16       	cp	r1, r24
     4da:	6c f4       	brge	.+26     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4dc:	25 e8       	ldi	r18, 0x85	; 133
     4de:	3b ee       	ldi	r19, 0xEB	; 235
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	50 e4       	ldi	r21, 0x40	; 64
     4e4:	c7 01       	movw	r24, r14
     4e6:	b6 01       	movw	r22, r12
     4e8:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     4ec:	18 16       	cp	r1, r24
     4ee:	1c f0       	brlt	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	{
		windDirection = "S";
     4f0:	6f e7       	ldi	r22, 0x7F	; 127
     4f2:	72 e0       	ldi	r23, 0x02	; 2
     4f4:	ce c0       	rjmp	.+412    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (2.03 < voltage && voltage <= 2.72)
     4f6:	25 e8       	ldi	r18, 0x85	; 133
     4f8:	3b ee       	ldi	r19, 0xEB	; 235
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	50 e4       	ldi	r21, 0x40	; 64
     4fe:	c7 01       	movw	r24, r14
     500:	b6 01       	movw	r22, r12
     502:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     506:	18 16       	cp	r1, r24
     508:	6c f4       	brge	.+26     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     50a:	2b e7       	ldi	r18, 0x7B	; 123
     50c:	34 e1       	ldi	r19, 0x14	; 20
     50e:	4e e2       	ldi	r20, 0x2E	; 46
     510:	50 e4       	ldi	r21, 0x40	; 64
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     51a:	18 16       	cp	r1, r24
     51c:	1c f0       	brlt	.+6      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	{
		windDirection = "NE";
     51e:	60 e9       	ldi	r22, 0x90	; 144
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	b7 c0       	rjmp	.+366    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (2.72 < voltage && voltage <= 3.11)
     524:	2b e7       	ldi	r18, 0x7B	; 123
     526:	34 e1       	ldi	r19, 0x14	; 20
     528:	4e e2       	ldi	r20, 0x2E	; 46
     52a:	50 e4       	ldi	r21, 0x40	; 64
     52c:	c7 01       	movw	r24, r14
     52e:	b6 01       	movw	r22, r12
     530:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     534:	18 16       	cp	r1, r24
     536:	6c f4       	brge	.+26     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     538:	2d e3       	ldi	r18, 0x3D	; 61
     53a:	3a e0       	ldi	r19, 0x0A	; 10
     53c:	47 e4       	ldi	r20, 0x47	; 71
     53e:	50 e4       	ldi	r21, 0x40	; 64
     540:	c7 01       	movw	r24, r14
     542:	b6 01       	movw	r22, r12
     544:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     548:	18 16       	cp	r1, r24
     54a:	1c f0       	brlt	.+6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
	{
		windDirection = "SWW";
     54c:	61 e8       	ldi	r22, 0x81	; 129
     54e:	72 e0       	ldi	r23, 0x02	; 2
     550:	a0 c0       	rjmp	.+320    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (3.11 < voltage && voltage <= 3.34)
     552:	2d e3       	ldi	r18, 0x3D	; 61
     554:	3a e0       	ldi	r19, 0x0A	; 10
     556:	47 e4       	ldi	r20, 0x47	; 71
     558:	50 e4       	ldi	r21, 0x40	; 64
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     562:	18 16       	cp	r1, r24
     564:	6c f4       	brge	.+26     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     566:	2f e8       	ldi	r18, 0x8F	; 143
     568:	32 ec       	ldi	r19, 0xC2	; 194
     56a:	45 e5       	ldi	r20, 0x55	; 85
     56c:	50 e4       	ldi	r21, 0x40	; 64
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     576:	18 16       	cp	r1, r24
     578:	1c f0       	brlt	.+6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
	{
		windDirection = "SW";
     57a:	6c e7       	ldi	r22, 0x7C	; 124
     57c:	72 e0       	ldi	r23, 0x02	; 2
     57e:	89 c0       	rjmp	.+274    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (3.34 < voltage && voltage <= 3.66)
     580:	2f e8       	ldi	r18, 0x8F	; 143
     582:	32 ec       	ldi	r19, 0xC2	; 194
     584:	45 e5       	ldi	r20, 0x55	; 85
     586:	50 e4       	ldi	r21, 0x40	; 64
     588:	c7 01       	movw	r24, r14
     58a:	b6 01       	movw	r22, r12
     58c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     590:	18 16       	cp	r1, r24
     592:	6c f4       	brge	.+26     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     594:	21 e7       	ldi	r18, 0x71	; 113
     596:	3d e3       	ldi	r19, 0x3D	; 61
     598:	4a e6       	ldi	r20, 0x6A	; 106
     59a:	50 e4       	ldi	r21, 0x40	; 64
     59c:	c7 01       	movw	r24, r14
     59e:	b6 01       	movw	r22, r12
     5a0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     5a4:	18 16       	cp	r1, r24
     5a6:	1c f0       	brlt	.+6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
	{
		windDirection = "NNW";
     5a8:	65 e8       	ldi	r22, 0x85	; 133
     5aa:	72 e0       	ldi	r23, 0x02	; 2
     5ac:	72 c0       	rjmp	.+228    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (3.66 < voltage && voltage <= 3.94)
     5ae:	21 e7       	ldi	r18, 0x71	; 113
     5b0:	3d e3       	ldi	r19, 0x3D	; 61
     5b2:	4a e6       	ldi	r20, 0x6A	; 106
     5b4:	50 e4       	ldi	r21, 0x40	; 64
     5b6:	c7 01       	movw	r24, r14
     5b8:	b6 01       	movw	r22, r12
     5ba:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     5be:	18 16       	cp	r1, r24
     5c0:	6c f4       	brge	.+26     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5c2:	26 ef       	ldi	r18, 0xF6	; 246
     5c4:	38 e2       	ldi	r19, 0x28	; 40
     5c6:	4c e7       	ldi	r20, 0x7C	; 124
     5c8:	50 e4       	ldi	r21, 0x40	; 64
     5ca:	c7 01       	movw	r24, r14
     5cc:	b6 01       	movw	r22, r12
     5ce:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     5d2:	18 16       	cp	r1, r24
     5d4:	1c f0       	brlt	.+6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
	{
		windDirection = "N";
     5d6:	69 e8       	ldi	r22, 0x89	; 137
     5d8:	72 e0       	ldi	r23, 0x02	; 2
     5da:	5b c0       	rjmp	.+182    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (3.94 < voltage && voltage <= 4.2)
     5dc:	26 ef       	ldi	r18, 0xF6	; 246
     5de:	38 e2       	ldi	r19, 0x28	; 40
     5e0:	4c e7       	ldi	r20, 0x7C	; 124
     5e2:	50 e4       	ldi	r21, 0x40	; 64
     5e4:	c7 01       	movw	r24, r14
     5e6:	b6 01       	movw	r22, r12
     5e8:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     5ec:	18 16       	cp	r1, r24
     5ee:	6c f4       	brge	.+26     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     5f0:	26 e6       	ldi	r18, 0x66	; 102
     5f2:	36 e6       	ldi	r19, 0x66	; 102
     5f4:	46 e8       	ldi	r20, 0x86	; 134
     5f6:	50 e4       	ldi	r21, 0x40	; 64
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     600:	18 16       	cp	r1, r24
     602:	1c f0       	brlt	.+6      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
	{
		windDirection = "NWW";
     604:	6b e8       	ldi	r22, 0x8B	; 139
     606:	72 e0       	ldi	r23, 0x02	; 2
     608:	44 c0       	rjmp	.+136    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (4.2 < voltage && voltage <= 4.47)
     60a:	26 e6       	ldi	r18, 0x66	; 102
     60c:	36 e6       	ldi	r19, 0x66	; 102
     60e:	46 e8       	ldi	r20, 0x86	; 134
     610:	50 e4       	ldi	r21, 0x40	; 64
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     61a:	18 16       	cp	r1, r24
     61c:	6c f4       	brge	.+26     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     61e:	2d e3       	ldi	r18, 0x3D	; 61
     620:	3a e0       	ldi	r19, 0x0A	; 10
     622:	4f e8       	ldi	r20, 0x8F	; 143
     624:	50 e4       	ldi	r21, 0x40	; 64
     626:	c7 01       	movw	r24, r14
     628:	b6 01       	movw	r22, r12
     62a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     62e:	18 16       	cp	r1, r24
     630:	1c f0       	brlt	.+6      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
	{
		windDirection = "NW";
     632:	66 e8       	ldi	r22, 0x86	; 134
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	2d c0       	rjmp	.+90     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (4.47 < voltage && voltage <= 4.74)
     638:	2d e3       	ldi	r18, 0x3D	; 61
     63a:	3a e0       	ldi	r19, 0x0A	; 10
     63c:	4f e8       	ldi	r20, 0x8F	; 143
     63e:	50 e4       	ldi	r21, 0x40	; 64
     640:	c7 01       	movw	r24, r14
     642:	b6 01       	movw	r22, r12
     644:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     648:	18 16       	cp	r1, r24
     64a:	6c f4       	brge	.+26     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     64c:	24 e1       	ldi	r18, 0x14	; 20
     64e:	3e ea       	ldi	r19, 0xAE	; 174
     650:	47 e9       	ldi	r20, 0x97	; 151
     652:	50 e4       	ldi	r21, 0x40	; 64
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     65c:	18 16       	cp	r1, r24
     65e:	1c f0       	brlt	.+6      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
	{
		windDirection = "W";
     660:	67 e8       	ldi	r22, 0x87	; 135
     662:	72 e0       	ldi	r23, 0x02	; 2
     664:	16 c0       	rjmp	.+44     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
	}
	else if (4.74 < voltage && voltage <= 5)
     666:	24 e1       	ldi	r18, 0x14	; 20
     668:	3e ea       	ldi	r19, 0xAE	; 174
     66a:	47 e9       	ldi	r20, 0x97	; 151
     66c:	50 e4       	ldi	r21, 0x40	; 64
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     676:	18 16       	cp	r1, r24
     678:	7c f4       	brge	.+30     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 ea       	ldi	r20, 0xA0	; 160
     680:	50 e4       	ldi	r21, 0x40	; 64
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     68a:	18 16       	cp	r1, r24
     68c:	2c f0       	brlt	.+10     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
	{
		windDirection = "NNE";
     68e:	6f e8       	ldi	r22, 0x8F	; 143
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	ce 01       	movw	r24, r28
     694:	0e 94 65 26 	call	0x4cca	; 0x4cca <_ZN6StringaSEPKc>
	}
	
	return windDirection;
     698:	ce 01       	movw	r24, r28
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <_ZN9CalculateC1Ev>:

float Calculate::meanValue(uint32_t val)
{
	float result = val/TIME;
	return result;
} //meanValue
     6a8:	08 95       	ret

000006aa <_ZN9CalculateD1Ev>:
     6aa:	08 95       	ret

000006ac <_ZN9Calculate12getWindSpeedEm>:

WindData Calculate::getWindSpeed(uint32_t val)
{
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <_ZN9Calculate12getWindSpeedEm+0x18>
     6c4:	1f 92       	push	r1
     6c6:	1f 92       	push	r1
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
	WindData windData;
	float windspeed = (float) val / ((float) TIME) * (float) WINDSCALINGFACTOR;
     6cc:	cb 01       	movw	r24, r22
     6ce:	ba 01       	movw	r22, r20
     6d0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 ea       	ldi	r20, 0xA0	; 160
     6da:	50 e4       	ldi	r21, 0x40	; 64
     6dc:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
     6e0:	2a e9       	ldi	r18, 0x9A	; 154
     6e2:	39 e9       	ldi	r19, 0x99	; 153
     6e4:	49 e1       	ldi	r20, 0x19	; 25
     6e6:	50 e4       	ldi	r21, 0x40	; 64
     6e8:	0e 94 10 1c 	call	0x3820	; 0x3820 <__mulsf3>
     6ec:	6b 01       	movw	r12, r22
     6ee:	7c 01       	movw	r14, r24
	windData.windspeed = windspeed / 3.6;	//windspeed in m/s
     6f0:	26 e6       	ldi	r18, 0x66	; 102
     6f2:	36 e6       	ldi	r19, 0x66	; 102
     6f4:	46 e6       	ldi	r20, 0x66	; 102
     6f6:	50 e4       	ldi	r21, 0x40	; 64
     6f8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
     6fc:	06 2f       	mov	r16, r22
     6fe:	97 2e       	mov	r9, r23
     700:	5c 01       	movw	r10, r24
	
	if (windspeed <= 0.2)
     702:	2d ec       	ldi	r18, 0xCD	; 205
     704:	3c ec       	ldi	r19, 0xCC	; 204
     706:	4c e4       	ldi	r20, 0x4C	; 76
     708:	5e e3       	ldi	r21, 0x3E	; 62
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     712:	18 16       	cp	r1, r24
     714:	0c f0       	brlt	.+2      	; 0x718 <_ZN9Calculate12getWindSpeedEm+0x6c>
     716:	f1 c0       	rjmp	.+482    	; 0x8fa <_ZN9Calculate12getWindSpeedEm+0x24e>
	{
		windData.windstrength = 0;
	} 
	else if (0.2 < windspeed && windspeed <= 1.5)
     718:	2d ec       	ldi	r18, 0xCD	; 205
     71a:	3c ec       	ldi	r19, 0xCC	; 204
     71c:	4c e4       	ldi	r20, 0x4C	; 76
     71e:	5e e3       	ldi	r21, 0x3E	; 62
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     728:	18 16       	cp	r1, r24
     72a:	5c f4       	brge	.+22     	; 0x742 <_ZN9Calculate12getWindSpeedEm+0x96>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 ec       	ldi	r20, 0xC0	; 192
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     73c:	18 16       	cp	r1, r24
     73e:	0c f0       	brlt	.+2      	; 0x742 <_ZN9Calculate12getWindSpeedEm+0x96>
     740:	de c0       	rjmp	.+444    	; 0x8fe <_ZN9Calculate12getWindSpeedEm+0x252>
	{
		windData.windstrength = 1;
	}
	else if (1.5 < windspeed && windspeed <= 3.3)
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 ec       	ldi	r20, 0xC0	; 192
     748:	5f e3       	ldi	r21, 0x3F	; 63
     74a:	c7 01       	movw	r24, r14
     74c:	b6 01       	movw	r22, r12
     74e:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     752:	18 16       	cp	r1, r24
     754:	5c f4       	brge	.+22     	; 0x76c <_ZN9Calculate12getWindSpeedEm+0xc0>
     756:	23 e3       	ldi	r18, 0x33	; 51
     758:	33 e3       	ldi	r19, 0x33	; 51
     75a:	43 e5       	ldi	r20, 0x53	; 83
     75c:	50 e4       	ldi	r21, 0x40	; 64
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     766:	18 16       	cp	r1, r24
     768:	0c f0       	brlt	.+2      	; 0x76c <_ZN9Calculate12getWindSpeedEm+0xc0>
     76a:	cb c0       	rjmp	.+406    	; 0x902 <_ZN9Calculate12getWindSpeedEm+0x256>
	{
		windData.windstrength = 2;
	}
	else if (3.3 < windspeed && windspeed <= 5.4)
     76c:	23 e3       	ldi	r18, 0x33	; 51
     76e:	33 e3       	ldi	r19, 0x33	; 51
     770:	43 e5       	ldi	r20, 0x53	; 83
     772:	50 e4       	ldi	r21, 0x40	; 64
     774:	c7 01       	movw	r24, r14
     776:	b6 01       	movw	r22, r12
     778:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     77c:	18 16       	cp	r1, r24
     77e:	5c f4       	brge	.+22     	; 0x796 <_ZN9Calculate12getWindSpeedEm+0xea>
     780:	2d ec       	ldi	r18, 0xCD	; 205
     782:	3c ec       	ldi	r19, 0xCC	; 204
     784:	4c ea       	ldi	r20, 0xAC	; 172
     786:	50 e4       	ldi	r21, 0x40	; 64
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     790:	18 16       	cp	r1, r24
     792:	0c f0       	brlt	.+2      	; 0x796 <_ZN9Calculate12getWindSpeedEm+0xea>
     794:	b8 c0       	rjmp	.+368    	; 0x906 <_ZN9Calculate12getWindSpeedEm+0x25a>
	{
		windData.windstrength = 3;
	}
	else if (5.4 < windspeed && windspeed <= 7.9)
     796:	2d ec       	ldi	r18, 0xCD	; 205
     798:	3c ec       	ldi	r19, 0xCC	; 204
     79a:	4c ea       	ldi	r20, 0xAC	; 172
     79c:	50 e4       	ldi	r21, 0x40	; 64
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     7a6:	18 16       	cp	r1, r24
     7a8:	5c f4       	brge	.+22     	; 0x7c0 <_ZN9Calculate12getWindSpeedEm+0x114>
     7aa:	2d ec       	ldi	r18, 0xCD	; 205
     7ac:	3c ec       	ldi	r19, 0xCC	; 204
     7ae:	4c ef       	ldi	r20, 0xFC	; 252
     7b0:	50 e4       	ldi	r21, 0x40	; 64
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     7ba:	18 16       	cp	r1, r24
     7bc:	0c f0       	brlt	.+2      	; 0x7c0 <_ZN9Calculate12getWindSpeedEm+0x114>
     7be:	a5 c0       	rjmp	.+330    	; 0x90a <_ZN9Calculate12getWindSpeedEm+0x25e>
	{
		windData.windstrength = 4;
	}	
	else if (7.9 < windspeed && windspeed <= 10.7)
     7c0:	2d ec       	ldi	r18, 0xCD	; 205
     7c2:	3c ec       	ldi	r19, 0xCC	; 204
     7c4:	4c ef       	ldi	r20, 0xFC	; 252
     7c6:	50 e4       	ldi	r21, 0x40	; 64
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     7d0:	18 16       	cp	r1, r24
     7d2:	5c f4       	brge	.+22     	; 0x7ea <_ZN9Calculate12getWindSpeedEm+0x13e>
     7d4:	23 e3       	ldi	r18, 0x33	; 51
     7d6:	33 e3       	ldi	r19, 0x33	; 51
     7d8:	4b e2       	ldi	r20, 0x2B	; 43
     7da:	51 e4       	ldi	r21, 0x41	; 65
     7dc:	c7 01       	movw	r24, r14
     7de:	b6 01       	movw	r22, r12
     7e0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     7e4:	18 16       	cp	r1, r24
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <_ZN9Calculate12getWindSpeedEm+0x13e>
     7e8:	92 c0       	rjmp	.+292    	; 0x90e <_ZN9Calculate12getWindSpeedEm+0x262>
	{
		windData.windstrength = 5;
	}
	else if (10.7 < windspeed && windspeed <= 13.8)
     7ea:	23 e3       	ldi	r18, 0x33	; 51
     7ec:	33 e3       	ldi	r19, 0x33	; 51
     7ee:	4b e2       	ldi	r20, 0x2B	; 43
     7f0:	51 e4       	ldi	r21, 0x41	; 65
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12
     7f6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	5c f4       	brge	.+22     	; 0x814 <_ZN9Calculate12getWindSpeedEm+0x168>
     7fe:	2d ec       	ldi	r18, 0xCD	; 205
     800:	3c ec       	ldi	r19, 0xCC	; 204
     802:	4c e5       	ldi	r20, 0x5C	; 92
     804:	51 e4       	ldi	r21, 0x41	; 65
     806:	c7 01       	movw	r24, r14
     808:	b6 01       	movw	r22, r12
     80a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     80e:	18 16       	cp	r1, r24
     810:	0c f0       	brlt	.+2      	; 0x814 <_ZN9Calculate12getWindSpeedEm+0x168>
     812:	7f c0       	rjmp	.+254    	; 0x912 <_ZN9Calculate12getWindSpeedEm+0x266>
	{
		windData.windstrength = 6;
	}	
	else if (13.8 < windspeed && windspeed <= 17.1)
     814:	2d ec       	ldi	r18, 0xCD	; 205
     816:	3c ec       	ldi	r19, 0xCC	; 204
     818:	4c e5       	ldi	r20, 0x5C	; 92
     81a:	51 e4       	ldi	r21, 0x41	; 65
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     824:	18 16       	cp	r1, r24
     826:	5c f4       	brge	.+22     	; 0x83e <_ZN9Calculate12getWindSpeedEm+0x192>
     828:	2d ec       	ldi	r18, 0xCD	; 205
     82a:	3c ec       	ldi	r19, 0xCC	; 204
     82c:	48 e8       	ldi	r20, 0x88	; 136
     82e:	51 e4       	ldi	r21, 0x41	; 65
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     838:	18 16       	cp	r1, r24
     83a:	0c f0       	brlt	.+2      	; 0x83e <_ZN9Calculate12getWindSpeedEm+0x192>
     83c:	6c c0       	rjmp	.+216    	; 0x916 <_ZN9Calculate12getWindSpeedEm+0x26a>
	{
		windData.windstrength = 7;
	}	
	else if (17.1 < windspeed && windspeed <= 20.7)
     83e:	2d ec       	ldi	r18, 0xCD	; 205
     840:	3c ec       	ldi	r19, 0xCC	; 204
     842:	48 e8       	ldi	r20, 0x88	; 136
     844:	51 e4       	ldi	r21, 0x41	; 65
     846:	c7 01       	movw	r24, r14
     848:	b6 01       	movw	r22, r12
     84a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	5c f4       	brge	.+22     	; 0x868 <_ZN9Calculate12getWindSpeedEm+0x1bc>
     852:	2a e9       	ldi	r18, 0x9A	; 154
     854:	39 e9       	ldi	r19, 0x99	; 153
     856:	45 ea       	ldi	r20, 0xA5	; 165
     858:	51 e4       	ldi	r21, 0x41	; 65
     85a:	c7 01       	movw	r24, r14
     85c:	b6 01       	movw	r22, r12
     85e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     862:	18 16       	cp	r1, r24
     864:	0c f0       	brlt	.+2      	; 0x868 <_ZN9Calculate12getWindSpeedEm+0x1bc>
     866:	59 c0       	rjmp	.+178    	; 0x91a <_ZN9Calculate12getWindSpeedEm+0x26e>
	{
		windData.windstrength = 8;
	}
	else if (20.7 < windspeed && windspeed <= 24.4)
     868:	2a e9       	ldi	r18, 0x9A	; 154
     86a:	39 e9       	ldi	r19, 0x99	; 153
     86c:	45 ea       	ldi	r20, 0xA5	; 165
     86e:	51 e4       	ldi	r21, 0x41	; 65
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     878:	18 16       	cp	r1, r24
     87a:	5c f4       	brge	.+22     	; 0x892 <_ZN9Calculate12getWindSpeedEm+0x1e6>
     87c:	23 e3       	ldi	r18, 0x33	; 51
     87e:	33 e3       	ldi	r19, 0x33	; 51
     880:	43 ec       	ldi	r20, 0xC3	; 195
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     88c:	18 16       	cp	r1, r24
     88e:	0c f0       	brlt	.+2      	; 0x892 <_ZN9Calculate12getWindSpeedEm+0x1e6>
     890:	46 c0       	rjmp	.+140    	; 0x91e <_ZN9Calculate12getWindSpeedEm+0x272>
	{
		windData.windstrength = 9;
	}
	else if (24.4 < windspeed && windspeed <= 28.4)
     892:	23 e3       	ldi	r18, 0x33	; 51
     894:	33 e3       	ldi	r19, 0x33	; 51
     896:	43 ec       	ldi	r20, 0xC3	; 195
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     8a2:	18 16       	cp	r1, r24
     8a4:	54 f4       	brge	.+20     	; 0x8ba <_ZN9Calculate12getWindSpeedEm+0x20e>
     8a6:	23 e3       	ldi	r18, 0x33	; 51
     8a8:	33 e3       	ldi	r19, 0x33	; 51
     8aa:	43 ee       	ldi	r20, 0xE3	; 227
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	c7 01       	movw	r24, r14
     8b0:	b6 01       	movw	r22, r12
     8b2:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     8b6:	18 16       	cp	r1, r24
     8b8:	a4 f5       	brge	.+104    	; 0x922 <_ZN9Calculate12getWindSpeedEm+0x276>
	{
		windData.windstrength = 10;
	}
	else if (28.4 < windspeed && windspeed <= 32.6)
     8ba:	23 e3       	ldi	r18, 0x33	; 51
     8bc:	33 e3       	ldi	r19, 0x33	; 51
     8be:	43 ee       	ldi	r20, 0xE3	; 227
     8c0:	51 e4       	ldi	r21, 0x41	; 65
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     8ca:	18 16       	cp	r1, r24
     8cc:	54 f4       	brge	.+20     	; 0x8e2 <_ZN9Calculate12getWindSpeedEm+0x236>
     8ce:	26 e6       	ldi	r18, 0x66	; 102
     8d0:	36 e6       	ldi	r19, 0x66	; 102
     8d2:	42 e0       	ldi	r20, 0x02	; 2
     8d4:	52 e4       	ldi	r21, 0x42	; 66
     8d6:	c7 01       	movw	r24, r14
     8d8:	b6 01       	movw	r22, r12
     8da:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     8de:	18 16       	cp	r1, r24
     8e0:	14 f5       	brge	.+68     	; 0x926 <_ZN9Calculate12getWindSpeedEm+0x27a>
	{
		windData.windstrength = 11;
	}
	else if (32.6 < windspeed)
     8e2:	26 e6       	ldi	r18, 0x66	; 102
     8e4:	36 e6       	ldi	r19, 0x66	; 102
     8e6:	42 e0       	ldi	r20, 0x02	; 2
     8e8:	52 e4       	ldi	r21, 0x42	; 66
     8ea:	c7 01       	movw	r24, r14
     8ec:	b6 01       	movw	r22, r12
     8ee:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__gesf2>
     8f2:	18 16       	cp	r1, r24
     8f4:	cc f4       	brge	.+50     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	{
		windData.windstrength = 12;
     8f6:	1c e0       	ldi	r17, 0x0C	; 12
     8f8:	17 c0       	rjmp	.+46     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	float windspeed = (float) val / ((float) TIME) * (float) WINDSCALINGFACTOR;
	windData.windspeed = windspeed / 3.6;	//windspeed in m/s
	
	if (windspeed <= 0.2)
	{
		windData.windstrength = 0;
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	} 
	else if (0.2 < windspeed && windspeed <= 1.5)
	{
		windData.windstrength = 1;
     8fe:	11 e0       	ldi	r17, 0x01	; 1
     900:	13 c0       	rjmp	.+38     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (1.5 < windspeed && windspeed <= 3.3)
	{
		windData.windstrength = 2;
     902:	12 e0       	ldi	r17, 0x02	; 2
     904:	11 c0       	rjmp	.+34     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (3.3 < windspeed && windspeed <= 5.4)
	{
		windData.windstrength = 3;
     906:	13 e0       	ldi	r17, 0x03	; 3
     908:	0f c0       	rjmp	.+30     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (5.4 < windspeed && windspeed <= 7.9)
	{
		windData.windstrength = 4;
     90a:	14 e0       	ldi	r17, 0x04	; 4
     90c:	0d c0       	rjmp	.+26     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}	
	else if (7.9 < windspeed && windspeed <= 10.7)
	{
		windData.windstrength = 5;
     90e:	15 e0       	ldi	r17, 0x05	; 5
     910:	0b c0       	rjmp	.+22     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (10.7 < windspeed && windspeed <= 13.8)
	{
		windData.windstrength = 6;
     912:	16 e0       	ldi	r17, 0x06	; 6
     914:	09 c0       	rjmp	.+18     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}	
	else if (13.8 < windspeed && windspeed <= 17.1)
	{
		windData.windstrength = 7;
     916:	17 e0       	ldi	r17, 0x07	; 7
     918:	07 c0       	rjmp	.+14     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}	
	else if (17.1 < windspeed && windspeed <= 20.7)
	{
		windData.windstrength = 8;
     91a:	18 e0       	ldi	r17, 0x08	; 8
     91c:	05 c0       	rjmp	.+10     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (20.7 < windspeed && windspeed <= 24.4)
	{
		windData.windstrength = 9;
     91e:	19 e0       	ldi	r17, 0x09	; 9
     920:	03 c0       	rjmp	.+6      	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (24.4 < windspeed && windspeed <= 28.4)
	{
		windData.windstrength = 10;
     922:	1a e0       	ldi	r17, 0x0A	; 10
     924:	01 c0       	rjmp	.+2      	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (28.4 < windspeed && windspeed <= 32.6)
	{
		windData.windstrength = 11;
     926:	1b e0       	ldi	r17, 0x0B	; 11
	else if (32.6 < windspeed)
	{
		windData.windstrength = 12;
	}
	
	return windData;
     928:	80 2f       	mov	r24, r16
     92a:	99 2d       	mov	r25, r9
     92c:	d5 01       	movw	r26, r10
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	ab 83       	std	Y+3, r26	; 0x03
     934:	bc 83       	std	Y+4, r27	; 0x04
     936:	20 2f       	mov	r18, r16
     938:	3a 81       	ldd	r19, Y+2	; 0x02
     93a:	4b 81       	ldd	r20, Y+3	; 0x03
     93c:	5c 81       	ldd	r21, Y+4	; 0x04
} //getWindSpeed
     93e:	61 2f       	mov	r22, r17
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	08 95       	ret

00000968 <_ZN9Calculate11getRainfallEm>:

float Calculate::getRainfall(uint32_t val)
{
	float rainfall = (float) val * (float) RESOLUTION_OMBROMETER /* ((float) TIME)*/ * (float) OMBROMETERSCALINGFACTOR;
	return rainfall;	// rainfall in liter per m^2 in a certain timespan
     968:	cb 01       	movw	r24, r22
     96a:	ba 01       	movw	r22, r20
     96c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
     970:	28 e4       	ldi	r18, 0x48	; 72
     972:	31 ee       	ldi	r19, 0xE1	; 225
     974:	46 ea       	ldi	r20, 0xA6	; 166
     976:	53 e4       	ldi	r21, 0x43	; 67
     978:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__mulsf3>
     97c:	08 95       	ret

0000097e <_Z20countEdgesAnemometerv>:
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesOmbrometer, RISING);
} //beginOmbrometer

void countEdgesAnemometer()
{
	numberOfEdgesAnemometer++;
     97e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <numberOfEdgesAnemometer>
     982:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <numberOfEdgesAnemometer+0x1>
     986:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <numberOfEdgesAnemometer+0x2>
     98a:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <numberOfEdgesAnemometer+0x3>
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	a1 1d       	adc	r26, r1
     992:	b1 1d       	adc	r27, r1
     994:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <numberOfEdgesAnemometer>
     998:	90 93 fb 05 	sts	0x05FB, r25	; 0x8005fb <numberOfEdgesAnemometer+0x1>
     99c:	a0 93 fc 05 	sts	0x05FC, r26	; 0x8005fc <numberOfEdgesAnemometer+0x2>
     9a0:	b0 93 fd 05 	sts	0x05FD, r27	; 0x8005fd <numberOfEdgesAnemometer+0x3>
     9a4:	08 95       	ret

000009a6 <_Z20countEdgesOmbrometerv>:
} //countEdgesAnemometer

void countEdgesOmbrometer()
{
	numberOfEdgesOmbrometer++;
     9a6:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <__data_end>
     9aa:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <__data_end+0x1>
     9ae:	a0 91 f8 05 	lds	r26, 0x05F8	; 0x8005f8 <__data_end+0x2>
     9b2:	b0 91 f9 05 	lds	r27, 0x05F9	; 0x8005f9 <__data_end+0x3>
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	a1 1d       	adc	r26, r1
     9ba:	b1 1d       	adc	r27, r1
     9bc:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <__data_end>
     9c0:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <__data_end+0x1>
     9c4:	a0 93 f8 05 	sts	0x05F8, r26	; 0x8005f8 <__data_end+0x2>
     9c8:	b0 93 f9 05 	sts	0x05F9, r27	; 0x8005f9 <__data_end+0x3>
     9cc:	08 95       	ret

000009ce <_Z15beginAnemometerh>:
uint32_t numberOfEdgesAnemometer = 0;
uint32_t numberOfEdgesOmbrometer = 0;

void beginAnemometer(uint8_t digitalPinNumber)
{
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesAnemometer, RISING);
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	51 f0       	breq	.+20     	; 0x9e6 <_Z15beginAnemometerh+0x18>
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	51 f0       	breq	.+20     	; 0x9ea <_Z15beginAnemometerh+0x1c>
     9d6:	9e ee       	ldi	r25, 0xEE	; 238
     9d8:	98 0f       	add	r25, r24
     9da:	94 30       	cpi	r25, 0x04	; 4
     9dc:	40 f4       	brcc	.+16     	; 0x9ee <_Z15beginAnemometerh+0x20>
     9de:	97 e1       	ldi	r25, 0x17	; 23
     9e0:	98 1b       	sub	r25, r24
     9e2:	89 2f       	mov	r24, r25
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <_Z15beginAnemometerh+0x22>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <_Z15beginAnemometerh+0x22>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <_Z15beginAnemometerh+0x22>
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	43 e0       	ldi	r20, 0x03	; 3
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	6f eb       	ldi	r22, 0xBF	; 191
     9f6:	74 e0       	ldi	r23, 0x04	; 4
     9f8:	0c 94 8d 21 	jmp	0x431a	; 0x431a <attachInterrupt>

000009fc <_Z15beginOmbrometerh>:
} //beginAnemometer

void beginOmbrometer(uint8_t digitalPinNumber)
{
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesOmbrometer, RISING);
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	51 f0       	breq	.+20     	; 0xa14 <_Z15beginOmbrometerh+0x18>
     a00:	83 30       	cpi	r24, 0x03	; 3
     a02:	51 f0       	breq	.+20     	; 0xa18 <_Z15beginOmbrometerh+0x1c>
     a04:	9e ee       	ldi	r25, 0xEE	; 238
     a06:	98 0f       	add	r25, r24
     a08:	94 30       	cpi	r25, 0x04	; 4
     a0a:	40 f4       	brcc	.+16     	; 0xa1c <_Z15beginOmbrometerh+0x20>
     a0c:	97 e1       	ldi	r25, 0x17	; 23
     a0e:	98 1b       	sub	r25, r24
     a10:	89 2f       	mov	r24, r25
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <_Z15beginOmbrometerh+0x22>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <_Z15beginOmbrometerh+0x22>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <_Z15beginOmbrometerh+0x22>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	43 e0       	ldi	r20, 0x03	; 3
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	63 ed       	ldi	r22, 0xD3	; 211
     a24:	74 e0       	ldi	r23, 0x04	; 4
     a26:	0c 94 8d 21 	jmp	0x431a	; 0x431a <attachInterrupt>

00000a2a <_Z26getNumberOfEdgesAnemometerv>:
	numberOfEdgesOmbrometer++;
} //countEdgesOmbrometer

uint32_t getNumberOfEdgesAnemometer()
{
	uint32_t buff = numberOfEdgesAnemometer;
     a2a:	60 91 fa 05 	lds	r22, 0x05FA	; 0x8005fa <numberOfEdgesAnemometer>
     a2e:	70 91 fb 05 	lds	r23, 0x05FB	; 0x8005fb <numberOfEdgesAnemometer+0x1>
     a32:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <numberOfEdgesAnemometer+0x2>
     a36:	90 91 fd 05 	lds	r25, 0x05FD	; 0x8005fd <numberOfEdgesAnemometer+0x3>
	numberOfEdgesAnemometer = 0;
     a3a:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <numberOfEdgesAnemometer>
     a3e:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <numberOfEdgesAnemometer+0x1>
     a42:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <numberOfEdgesAnemometer+0x2>
     a46:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <numberOfEdgesAnemometer+0x3>
	return buff;
} //getNumberOfEdgesAnemometer
     a4a:	08 95       	ret

00000a4c <_Z26getNumberOfEdgesOmbrometerv>:

uint32_t getNumberOfEdgesOmbrometer()
{
	uint32_t buff = numberOfEdgesOmbrometer;
     a4c:	60 91 f6 05 	lds	r22, 0x05F6	; 0x8005f6 <__data_end>
     a50:	70 91 f7 05 	lds	r23, 0x05F7	; 0x8005f7 <__data_end+0x1>
     a54:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <__data_end+0x2>
     a58:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <__data_end+0x3>
	numberOfEdgesOmbrometer = 0;
     a5c:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <__data_end>
     a60:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <__data_end+0x1>
     a64:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <__data_end+0x2>
     a68:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <__data_end+0x3>
	return buff;
} //getNumberOfEdgesOmbrometer
     a6c:	08 95       	ret

00000a6e <_ZN20LightIntensitySensorC1Ev>:
	Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" lux");
	Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" lux");
	Serial.println("------------------------------------");
	Serial.println("");
	delay(500);
}
     a6e:	08 95       	ret

00000a70 <_ZN20LightIntensitySensorD1Ev>:
     a70:	08 95       	ret

00000a72 <_ZN20LightIntensitySensor15configureSensorEv>:
void LightIntensitySensor::configureSensor()
{
	/* You can also manually set the gain or enable auto-gain support */
	// tsl.setGain(TSL2561_GAIN_1X);      /* No gain ... use in bright light to avoid sensor saturation */
	// tsl.setGain(TSL2561_GAIN_16X);     /* 16x gain ... use in low light to boost sensitivity */
	tsl.enableAutoRange(true);            /* Auto-gain ... switches automatically between 1x and 16x */
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	8e ef       	ldi	r24, 0xFE	; 254
     a76:	95 e0       	ldi	r25, 0x05	; 5
     a78:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN24Adafruit_TSL2561_Unified15enableAutoRangeEb>
	
	/* Changing the integration time gives you better sensor resolution (402ms = 16-bit data) */
	//tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_13MS);      /* fast but low resolution */
	// tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_101MS);  /* medium resolution and speed   */
	 tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_402MS);  /* 16-bit data but slowest conversions */
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	8e ef       	ldi	r24, 0xFE	; 254
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	0c 94 46 12 	jmp	0x248c	; 0x248c <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t>

00000a86 <_ZN20LightIntensitySensor24initLightIntensitySensorEv>:
LightIntensitySensor::~LightIntensitySensor()
{
} //destructor

void LightIntensitySensor::initLightIntensitySensor()
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	ec 01       	movw	r28, r24
	bool status = tsl.begin();
     a8c:	8e ef       	ldi	r24, 0xFE	; 254
     a8e:	95 e0       	ldi	r25, 0x05	; 5
     a90:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN24Adafruit_TSL2561_Unified5beginEv>
	if(!status)
     a94:	81 11       	cpse	r24, r1
     a96:	07 c0       	rjmp	.+14     	; 0xaa6 <_ZN20LightIntensitySensor24initLightIntensitySensorEv+0x20>
	{
		Serial.print("Error: Couldn't find BME280, please ensure that the BME280 is powered and correctly wired!");
     a98:	67 e1       	ldi	r22, 0x17	; 23
     a9a:	73 e0       	ldi	r23, 0x03	; 3
     a9c:	81 ef       	ldi	r24, 0xF1	; 241
     a9e:	97 e0       	ldi	r25, 0x07	; 7
     aa0:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     aa4:	ff cf       	rjmp	.-2      	; 0xaa4 <_ZN20LightIntensitySensor24initLightIntensitySensorEv+0x1e>
		while(1);
	}
	else if(status)
	{
// 		displaySensorDetails();
		configureSensor();		
     aa6:	ce 01       	movw	r24, r28
     aa8:	e4 df       	rcall	.-56     	; 0xa72 <_ZN20LightIntensitySensor15configureSensorEv>
		Serial.println("TSL2561\tsuccessfully initialized!");
     aaa:	62 e7       	ldi	r22, 0x72	; 114
     aac:	73 e0       	ldi	r23, 0x03	; 3
     aae:	81 ef       	ldi	r24, 0xF1	; 241
     ab0:	97 e0       	ldi	r25, 0x07	; 7
	}
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
	}
	else if(status)
	{
// 		displaySensorDetails();
		configureSensor();		
		Serial.println("TSL2561\tsuccessfully initialized!");
     ab6:	0c 94 41 20 	jmp	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>

00000aba <_ZN20LightIntensitySensor7setDataEv>:
	// tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_101MS);  /* medium resolution and speed   */
	 tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_402MS);  /* 16-bit data but slowest conversions */
}

void LightIntensitySensor::setData()
{
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	a4 97       	sbiw	r28, 0x24	; 36
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	8c 01       	movw	r16, r24
	sensors_event_t event;
	tsl.getEvent(&event);
     adc:	be 01       	movw	r22, r28
     ade:	6f 5f       	subi	r22, 0xFF	; 255
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	8e ef       	ldi	r24, 0xFE	; 254
     ae4:	95 e0       	ldi	r25, 0x05	; 5
     ae6:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t>
 
	if (event.light)
     aea:	cd 88       	ldd	r12, Y+21	; 0x15
     aec:	de 88       	ldd	r13, Y+22	; 0x16
     aee:	ef 88       	ldd	r14, Y+23	; 0x17
     af0:	f8 8c       	ldd	r15, Y+24	; 0x18
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	a9 01       	movw	r20, r18
     af8:	c7 01       	movw	r24, r14
     afa:	b6 01       	movw	r22, r12
     afc:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__cmpsf2>
     b00:	88 23       	and	r24, r24
     b02:	31 f0       	breq	.+12     	; 0xb10 <_ZN20LightIntensitySensor7setDataEv+0x56>
	{
		lux = event.light;
     b04:	f8 01       	movw	r30, r16
     b06:	c0 82       	st	Z, r12
     b08:	d1 82       	std	Z+1, r13	; 0x01
     b0a:	e2 82       	std	Z+2, r14	; 0x02
     b0c:	f3 82       	std	Z+3, r15	; 0x03
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <_ZN20LightIntensitySensor7setDataEv+0x62>
	}
	else
	{
		Serial.println("Error: Sensor overload!");
     b10:	64 e9       	ldi	r22, 0x94	; 148
     b12:	73 e0       	ldi	r23, 0x03	; 3
     b14:	81 ef       	ldi	r24, 0xF1	; 241
     b16:	97 e0       	ldi	r25, 0x07	; 7
     b18:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	}	
}
     b1c:	a4 96       	adiw	r28, 0x24	; 36
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <_ZN20LightIntensitySensor7getDataEv>:

float LightIntensitySensor::getData()
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
	setData();
     b40:	bc df       	rcall	.-136    	; 0xaba <_ZN20LightIntensitySensor7setDataEv>
	return lux;
     b42:	68 81       	ld	r22, Y
     b44:	79 81       	ldd	r23, Y+1	; 0x01
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	9b 81       	ldd	r25, Y+3	; 0x03
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <_GLOBAL__sub_I_tsl>:
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TSL2561_U.h>
#include "LightIntensitySensor.h"

Adafruit_TSL2561_Unified tsl = Adafruit_TSL2561_Unified(TSL2561_ADDR_FLOAT, 12345);
     b50:	29 e3       	ldi	r18, 0x39	; 57
     b52:	30 e3       	ldi	r19, 0x30	; 48
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	69 e3       	ldi	r22, 0x39	; 57
     b5a:	8e ef       	ldi	r24, 0xFE	; 254
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <_ZN24Adafruit_TSL2561_UnifiedC1Ehl>

00000b62 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b62:	26 e0       	ldi	r18, 0x06	; 6
     b64:	40 e8       	ldi	r20, 0x80	; 128
     b66:	55 e2       	ldi	r21, 0x25	; 37
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	81 ef       	ldi	r24, 0xF1	; 241
     b6e:	97 e0       	ldi	r25, 0x07	; 7
     b70:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <_ZN14HardwareSerial5beginEmh>

void setup()
{
	Serial.begin(9600);
	while (!Serial);
	sd.initSdcardBreakout();
     b74:	89 e9       	ldi	r24, 0x99	; 153
     b76:	96 e0       	ldi	r25, 0x06	; 6
     b78:	73 d3       	rcall	.+1766   	; 0x1260 <_ZN6Sdcard18initSdcardBreakoutEv>
	realtimeclock.initRTC();
     b7a:	83 e6       	ldi	r24, 0x63	; 99
     b7c:	96 e0       	ldi	r25, 0x06	; 6
     b7e:	b9 d2       	rcall	.+1394   	; 0x10f2 <_ZN13RealTimeClock7initRTCEv>
	thps.initTempHumidPressSensor();
     b80:	89 e8       	ldi	r24, 0x89	; 137
     b82:	96 e0       	ldi	r25, 0x06	; 6
     b84:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>
	tsl2561.initLightIntensitySensor();
     b88:	85 e8       	ldi	r24, 0x85	; 133
     b8a:	96 e0       	ldi	r25, 0x06	; 6
	beginAnemometer(PIN_ANEMOMETER);
     b8c:	7c df       	rcall	.-264    	; 0xa86 <_ZN20LightIntensitySensor24initLightIntensitySensorEv>
     b8e:	83 e0       	ldi	r24, 0x03	; 3
	beginOmbrometer(PIN_OMBROMETER);
     b90:	1e df       	rcall	.-452    	; 0x9ce <_Z15beginAnemometerh>
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	33 df       	rcall	.-410    	; 0x9fc <_Z15beginOmbrometerh>
	Serial.println(" ");
     b96:	65 ec       	ldi	r22, 0xC5	; 197
     b98:	72 e0       	ldi	r23, 0x02	; 2
     b9a:	81 ef       	ldi	r24, 0xF1	; 241
     b9c:	97 e0       	ldi	r25, 0x07	; 7
     b9e:	0c 94 41 20 	jmp	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>

00000ba2 <_Z14measureWeatherv>:
	measureWeather();
	printWeatherData();
} //loop

void measureWeather()
{
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	6d 97       	sbiw	r28, 0x1d	; 29
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
	sensordata = thps.getData();
     bbe:	69 e8       	ldi	r22, 0x89	; 137
     bc0:	76 e0       	ldi	r23, 0x06	; 6
     bc2:	ce 01       	movw	r24, r28
     bc4:	0e 96       	adiw	r24, 0x0e	; 14
     bc6:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN20TempHumidPressSensor7getDataEv>
     bca:	80 e1       	ldi	r24, 0x10	; 16
     bcc:	fe 01       	movw	r30, r28
     bce:	3e 96       	adiw	r30, 0x0e	; 14
     bd0:	a5 e7       	ldi	r26, 0x75	; 117
     bd2:	b6 e0       	ldi	r27, 0x06	; 6
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <_Z14measureWeatherv+0x32>
	windData = calculate.getWindSpeed(getNumberOfEdgesAnemometer());
     bdc:	26 df       	rcall	.-436    	; 0xa2a <_Z26getNumberOfEdgesAnemometerv>
     bde:	ab 01       	movw	r20, r22
     be0:	bc 01       	movw	r22, r24
     be2:	85 e5       	ldi	r24, 0x55	; 85
     be4:	96 e0       	ldi	r25, 0x06	; 6
     be6:	62 dd       	rcall	.-1340   	; 0x6ac <_ZN9Calculate12getWindSpeedEm>
     be8:	20 93 70 06 	sts	0x0670, r18	; 0x800670 <windData>
     bec:	30 93 71 06 	sts	0x0671, r19	; 0x800671 <windData+0x1>
     bf0:	40 93 72 06 	sts	0x0672, r20	; 0x800672 <windData+0x2>
     bf4:	50 93 73 06 	sts	0x0673, r21	; 0x800673 <windData+0x3>
     bf8:	60 93 74 06 	sts	0x0674, r22	; 0x800674 <windData+0x4>
	ts = realtimeclock.getTimeStamp();
     bfc:	63 e6       	ldi	r22, 0x63	; 99
     bfe:	76 e0       	ldi	r23, 0x06	; 6
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	06 d3       	rcall	.+1548   	; 0x1212 <_ZN13RealTimeClock12getTimeStampEv>
#ifndef __REALTIMECLOCK_H__
#define __REALTIMECLOCK_H__

struct TimeStamp
     c06:	be 01       	movw	r22, r28
     c08:	6f 5f       	subi	r22, 0xFF	; 255
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	86 e5       	ldi	r24, 0x56	; 86
     c0e:	96 e0       	ldi	r25, 0x06	; 6
     c10:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN6StringaSEOS_>
     c14:	86 e5       	ldi	r24, 0x56	; 86
     c16:	e8 2e       	mov	r14, r24
     c18:	86 e0       	ldi	r24, 0x06	; 6
     c1a:	f8 2e       	mov	r15, r24
     c1c:	8f 81       	ldd	r24, Y+7	; 0x07
     c1e:	98 85       	ldd	r25, Y+8	; 0x08
     c20:	d7 01       	movw	r26, r14
     c22:	17 96       	adiw	r26, 0x07	; 7
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
     c28:	16 97       	sbiw	r26, 0x06	; 6
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	18 96       	adiw	r26, 0x08	; 8
     c2e:	8c 93       	st	X, r24
     c30:	18 97       	sbiw	r26, 0x08	; 8
     c32:	8a 85       	ldd	r24, Y+10	; 0x0a
     c34:	19 96       	adiw	r26, 0x09	; 9
     c36:	8c 93       	st	X, r24
     c38:	19 97       	sbiw	r26, 0x09	; 9
     c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c3c:	1a 96       	adiw	r26, 0x0a	; 10
     c3e:	8c 93       	st	X, r24
     c40:	1a 97       	sbiw	r26, 0x0a	; 10
     c42:	8c 85       	ldd	r24, Y+12	; 0x0c
     c44:	1b 96       	adiw	r26, 0x0b	; 11
     c46:	8c 93       	st	X, r24
     c48:	1b 97       	sbiw	r26, 0x0b	; 11
     c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4c:	1c 96       	adiw	r26, 0x0c	; 12
     c4e:	8c 93       	st	X, r24
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
	
	weatherStationData.temperature = sensordata.t;
     c58:	0c e0       	ldi	r16, 0x0C	; 12
     c5a:	16 e0       	ldi	r17, 0x06	; 6
     c5c:	e5 e7       	ldi	r30, 0x75	; 117
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	40 81       	ld	r20, Z
     c62:	51 81       	ldd	r21, Z+1	; 0x01
     c64:	62 81       	ldd	r22, Z+2	; 0x02
     c66:	73 81       	ldd	r23, Z+3	; 0x03
     c68:	d8 01       	movw	r26, r16
     c6a:	4d 93       	st	X+, r20
     c6c:	5d 93       	st	X+, r21
     c6e:	6d 93       	st	X+, r22
     c70:	7c 93       	st	X, r23
     c72:	13 97       	sbiw	r26, 0x03	; 3
	weatherStationData.humidity = sensordata.h;
     c74:	44 81       	ldd	r20, Z+4	; 0x04
     c76:	55 81       	ldd	r21, Z+5	; 0x05
     c78:	66 81       	ldd	r22, Z+6	; 0x06
     c7a:	77 81       	ldd	r23, Z+7	; 0x07
     c7c:	14 96       	adiw	r26, 0x04	; 4
     c7e:	4d 93       	st	X+, r20
     c80:	5d 93       	st	X+, r21
     c82:	6d 93       	st	X+, r22
     c84:	7c 93       	st	X, r23
     c86:	17 97       	sbiw	r26, 0x07	; 7
	weatherStationData.pressure = sensordata.p;
     c88:	80 85       	ldd	r24, Z+8	; 0x08
     c8a:	91 85       	ldd	r25, Z+9	; 0x09
     c8c:	a2 85       	ldd	r26, Z+10	; 0x0a
     c8e:	b3 85       	ldd	r27, Z+11	; 0x0b
     c90:	f8 01       	movw	r30, r16
     c92:	80 87       	std	Z+8, r24	; 0x08
     c94:	91 87       	std	Z+9, r25	; 0x09
     c96:	a2 87       	std	Z+10, r26	; 0x0a
     c98:	b3 87       	std	Z+11, r27	; 0x0b
 	weatherStationData.windspeed = windData.windspeed;
     c9a:	20 e7       	ldi	r18, 0x70	; 112
     c9c:	36 e0       	ldi	r19, 0x06	; 6
     c9e:	f9 01       	movw	r30, r18
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	a2 81       	ldd	r26, Z+2	; 0x02
     ca6:	b3 81       	ldd	r27, Z+3	; 0x03
     ca8:	f8 01       	movw	r30, r16
     caa:	80 8b       	std	Z+16, r24	; 0x10
     cac:	91 8b       	std	Z+17, r25	; 0x11
     cae:	a2 8b       	std	Z+18, r26	; 0x12
     cb0:	b3 8b       	std	Z+19, r27	; 0x13
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
     cb2:	4a e0       	ldi	r20, 0x0A	; 10
     cb4:	d9 01       	movw	r26, r18
     cb6:	14 96       	adiw	r26, 0x04	; 4
     cb8:	6c 91       	ld	r22, X
     cba:	ce 01       	movw	r24, r28
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <_ZN6StringC1Ehh>
	weatherStationData.windstrength = windData.windstrength;
     cc2:	be 01       	movw	r22, r28
     cc4:	6f 5f       	subi	r22, 0xFF	; 255
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	8b e2       	ldi	r24, 0x2B	; 43
     cca:	96 e0       	ldi	r25, 0x06	; 6
     ccc:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <_ZN6StringaSEO15StringSumHelper>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
	weatherStationData.winddirection = getWindDirection(binaryToVoltageConverting(analogRead(PIN_WINDDIRECTIONSENSOR)));
     cd8:	86 e3       	ldi	r24, 0x36	; 54
     cda:	0e 94 70 24 	call	0x48e0	; 0x48e0 <analogRead>
     cde:	4b db       	rcall	.-2410   	; 0x376 <_Z25binaryToVoltageConvertingi>
     ce0:	ab 01       	movw	r20, r22
     ce2:	bc 01       	movw	r22, r24
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	59 db       	rcall	.-2382   	; 0x39c <_Z16getWindDirectionf>
     cea:	be 01       	movw	r22, r28
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	81 e3       	ldi	r24, 0x31	; 49
     cf2:	96 e0       	ldi	r25, 0x06	; 6
     cf4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN6StringaSEOS_>
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
	weatherStationData.rainfall = calculate.getRainfall(getNumberOfEdgesOmbrometer());
     d00:	a5 de       	rcall	.-694    	; 0xa4c <_Z26getNumberOfEdgesOmbrometerv>
     d02:	ab 01       	movw	r20, r22
     d04:	bc 01       	movw	r22, r24
     d06:	85 e5       	ldi	r24, 0x55	; 85
     d08:	96 e0       	ldi	r25, 0x06	; 6
     d0a:	2e de       	rcall	.-932    	; 0x968 <_ZN9Calculate11getRainfallEm>
     d0c:	f8 01       	movw	r30, r16
     d0e:	64 8b       	std	Z+20, r22	; 0x14
     d10:	75 8b       	std	Z+21, r23	; 0x15
     d12:	86 8b       	std	Z+22, r24	; 0x16
	weatherStationData.lightintesity = tsl2561.getData();
     d14:	97 8b       	std	Z+23, r25	; 0x17
     d16:	85 e8       	ldi	r24, 0x85	; 133
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	0f df       	rcall	.-482    	; 0xb3a <_ZN20LightIntensitySensor7getDataEv>
     d1c:	d8 01       	movw	r26, r16
     d1e:	1c 96       	adiw	r26, 0x0c	; 12
     d20:	6d 93       	st	X+, r22
     d22:	7d 93       	st	X+, r23
     d24:	8d 93       	st	X+, r24
     d26:	9c 93       	st	X, r25
     d28:	1f 97       	sbiw	r26, 0x0f	; 15
	
	weatherStationData.weekday = ts.dotw;
     d2a:	b7 01       	movw	r22, r14
     d2c:	87 e3       	ldi	r24, 0x37	; 55
     d2e:	96 e0       	ldi	r25, 0x06	; 6
     d30:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <_ZN6StringaSERKS_>
	weatherStationData.day = ts.d;
     d34:	f7 01       	movw	r30, r14
     d36:	81 85       	ldd	r24, Z+9	; 0x09
     d38:	d8 01       	movw	r26, r16
     d3a:	58 96       	adiw	r26, 0x18	; 24
     d3c:	8c 93       	st	X, r24
     d3e:	58 97       	sbiw	r26, 0x18	; 24
	weatherStationData.month = ts.mo;
     d40:	80 85       	ldd	r24, Z+8	; 0x08
     d42:	59 96       	adiw	r26, 0x19	; 25
     d44:	8c 93       	st	X, r24
     d46:	59 97       	sbiw	r26, 0x19	; 25
	weatherStationData.year = ts.y;
     d48:	86 81       	ldd	r24, Z+6	; 0x06
     d4a:	97 81       	ldd	r25, Z+7	; 0x07
     d4c:	5e 96       	adiw	r26, 0x1e	; 30
     d4e:	9c 93       	st	X, r25
     d50:	8e 93       	st	-X, r24
     d52:	5d 97       	sbiw	r26, 0x1d	; 29
	weatherStationData.hour = ts.h;
     d54:	82 85       	ldd	r24, Z+10	; 0x0a
     d56:	5a 96       	adiw	r26, 0x1a	; 26
     d58:	8c 93       	st	X, r24
     d5a:	5a 97       	sbiw	r26, 0x1a	; 26
	weatherStationData.minute = ts.mi;
     d5c:	83 85       	ldd	r24, Z+11	; 0x0b
     d5e:	5b 96       	adiw	r26, 0x1b	; 27
     d60:	8c 93       	st	X, r24
     d62:	5b 97       	sbiw	r26, 0x1b	; 27
	weatherStationData.second = ts.s;
     d64:	84 85       	ldd	r24, Z+12	; 0x0c
     d66:	5c 96       	adiw	r26, 0x1c	; 28
     d68:	8c 93       	st	X, r24
} //measureWeather
     d6a:	6d 96       	adiw	r28, 0x1d	; 29
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	08 95       	ret

00000d84 <_Z16printWeatherDatav>:

void printWeatherData()
{	
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
	Serial.print(weatherStationData.weekday); Serial.print(":\t"); Serial.print(weatherStationData.hour); Serial.print(":"); 
     d88:	67 e3       	ldi	r22, 0x37	; 55
     d8a:	76 e0       	ldi	r23, 0x06	; 6
     d8c:	81 ef       	ldi	r24, 0xF1	; 241
     d8e:	97 e0       	ldi	r25, 0x07	; 7
     d90:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN5Print5printERK6String>
     d94:	6e ee       	ldi	r22, 0xEE	; 238
     d96:	73 e0       	ldi	r23, 0x03	; 3
     d98:	81 ef       	ldi	r24, 0xF1	; 241
     d9a:	97 e0       	ldi	r25, 0x07	; 7
     d9c:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     da0:	cc e0       	ldi	r28, 0x0C	; 12
     da2:	d6 e0       	ldi	r29, 0x06	; 6
     da4:	4a e0       	ldi	r20, 0x0A	; 10
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	6a 8d       	ldd	r22, Y+26	; 0x1a
     daa:	81 ef       	ldi	r24, 0xF1	; 241
     dac:	97 e0       	ldi	r25, 0x07	; 7
     dae:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5printEhi>
     db2:	6c ea       	ldi	r22, 0xAC	; 172
     db4:	73 e0       	ldi	r23, 0x03	; 3
     db6:	81 ef       	ldi	r24, 0xF1	; 241
     db8:	97 e0       	ldi	r25, 0x07	; 7
     dba:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
	Serial.print(weatherStationData.minute); Serial.print(":"); Serial.print(weatherStationData.second); Serial.print("\t"); 
     dbe:	4a e0       	ldi	r20, 0x0A	; 10
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     dc4:	81 ef       	ldi	r24, 0xF1	; 241
     dc6:	97 e0       	ldi	r25, 0x07	; 7
     dc8:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5printEhi>
     dcc:	6c ea       	ldi	r22, 0xAC	; 172
     dce:	73 e0       	ldi	r23, 0x03	; 3
     dd0:	81 ef       	ldi	r24, 0xF1	; 241
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     dd8:	4a e0       	ldi	r20, 0x0A	; 10
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	6c 8d       	ldd	r22, Y+28	; 0x1c
     dde:	81 ef       	ldi	r24, 0xF1	; 241
     de0:	97 e0       	ldi	r25, 0x07	; 7
     de2:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5printEhi>
     de6:	6f ee       	ldi	r22, 0xEF	; 239
     de8:	73 e0       	ldi	r23, 0x03	; 3
     dea:	81 ef       	ldi	r24, 0xF1	; 241
     dec:	97 e0       	ldi	r25, 0x07	; 7
     dee:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
	Serial.print(weatherStationData.day); Serial.print("."); Serial.print(weatherStationData.month); Serial.print("."); 
     df2:	4a e0       	ldi	r20, 0x0A	; 10
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	68 8d       	ldd	r22, Y+24	; 0x18
     df8:	81 ef       	ldi	r24, 0xF1	; 241
     dfa:	97 e0       	ldi	r25, 0x07	; 7
     dfc:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5printEhi>
     e00:	6e ea       	ldi	r22, 0xAE	; 174
     e02:	73 e0       	ldi	r23, 0x03	; 3
     e04:	81 ef       	ldi	r24, 0xF1	; 241
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     e0c:	4a e0       	ldi	r20, 0x0A	; 10
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	69 8d       	ldd	r22, Y+25	; 0x19
     e12:	81 ef       	ldi	r24, 0xF1	; 241
     e14:	97 e0       	ldi	r25, 0x07	; 7
     e16:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5printEhi>
     e1a:	6e ea       	ldi	r22, 0xAE	; 174
     e1c:	73 e0       	ldi	r23, 0x03	; 3
     e1e:	81 ef       	ldi	r24, 0xF1	; 241
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
	Serial.println(weatherStationData.year);
     e26:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e28:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e2a:	4a e0       	ldi	r20, 0x0A	; 10
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	81 ef       	ldi	r24, 0xF1	; 241
     e30:	97 e0       	ldi	r25, 0x07	; 7
     e32:	0e 94 b0 20 	call	0x4160	; 0x4160 <_ZN5Print7printlnEji>
	
	Serial.print("Temperature:\t"); Serial.print(weatherStationData.temperature); Serial.print("\t"); Serial.println("Celsius");
     e36:	60 eb       	ldi	r22, 0xB0	; 176
     e38:	73 e0       	ldi	r23, 0x03	; 3
     e3a:	81 ef       	ldi	r24, 0xF1	; 241
     e3c:	97 e0       	ldi	r25, 0x07	; 7
     e3e:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     e42:	48 81       	ld	r20, Y
     e44:	59 81       	ldd	r21, Y+1	; 0x01
     e46:	6a 81       	ldd	r22, Y+2	; 0x02
     e48:	7b 81       	ldd	r23, Y+3	; 0x03
     e4a:	22 e0       	ldi	r18, 0x02	; 2
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 ef       	ldi	r24, 0xF1	; 241
     e50:	97 e0       	ldi	r25, 0x07	; 7
     e52:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print5printEdi>
     e56:	6f ee       	ldi	r22, 0xEF	; 239
     e58:	73 e0       	ldi	r23, 0x03	; 3
     e5a:	81 ef       	ldi	r24, 0xF1	; 241
     e5c:	97 e0       	ldi	r25, 0x07	; 7
     e5e:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     e62:	6e eb       	ldi	r22, 0xBE	; 190
     e64:	73 e0       	ldi	r23, 0x03	; 3
     e66:	81 ef       	ldi	r24, 0xF1	; 241
     e68:	97 e0       	ldi	r25, 0x07	; 7
     e6a:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Humidity:\t"); Serial.print(weatherStationData.humidity); Serial.print("\t"); Serial.println("%");
     e6e:	66 ec       	ldi	r22, 0xC6	; 198
     e70:	73 e0       	ldi	r23, 0x03	; 3
     e72:	81 ef       	ldi	r24, 0xF1	; 241
     e74:	97 e0       	ldi	r25, 0x07	; 7
     e76:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	5d 81       	ldd	r21, Y+5	; 0x05
     e7e:	6e 81       	ldd	r22, Y+6	; 0x06
     e80:	7f 81       	ldd	r23, Y+7	; 0x07
     e82:	22 e0       	ldi	r18, 0x02	; 2
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 ef       	ldi	r24, 0xF1	; 241
     e88:	97 e0       	ldi	r25, 0x07	; 7
     e8a:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print5printEdi>
     e8e:	6f ee       	ldi	r22, 0xEF	; 239
     e90:	73 e0       	ldi	r23, 0x03	; 3
     e92:	81 ef       	ldi	r24, 0xF1	; 241
     e94:	97 e0       	ldi	r25, 0x07	; 7
     e96:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     e9a:	61 ed       	ldi	r22, 0xD1	; 209
     e9c:	73 e0       	ldi	r23, 0x03	; 3
     e9e:	81 ef       	ldi	r24, 0xF1	; 241
     ea0:	97 e0       	ldi	r25, 0x07	; 7
     ea2:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Airpressure:\t"); Serial.print(weatherStationData.pressure); Serial.print("\t"); Serial.println("hPa");
     ea6:	63 ed       	ldi	r22, 0xD3	; 211
     ea8:	73 e0       	ldi	r23, 0x03	; 3
     eaa:	81 ef       	ldi	r24, 0xF1	; 241
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     eb2:	48 85       	ldd	r20, Y+8	; 0x08
     eb4:	59 85       	ldd	r21, Y+9	; 0x09
     eb6:	6a 85       	ldd	r22, Y+10	; 0x0a
     eb8:	7b 85       	ldd	r23, Y+11	; 0x0b
     eba:	22 e0       	ldi	r18, 0x02	; 2
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 ef       	ldi	r24, 0xF1	; 241
     ec0:	97 e0       	ldi	r25, 0x07	; 7
     ec2:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print5printEdi>
     ec6:	6f ee       	ldi	r22, 0xEF	; 239
     ec8:	73 e0       	ldi	r23, 0x03	; 3
     eca:	81 ef       	ldi	r24, 0xF1	; 241
     ecc:	97 e0       	ldi	r25, 0x07	; 7
     ece:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     ed2:	61 ee       	ldi	r22, 0xE1	; 225
     ed4:	73 e0       	ldi	r23, 0x03	; 3
     ed6:	81 ef       	ldi	r24, 0xF1	; 241
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Windspeed:\t"); Serial.print(weatherStationData.windspeed); Serial.print("\t"); Serial.println("m/s");
     ede:	65 ee       	ldi	r22, 0xE5	; 229
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	81 ef       	ldi	r24, 0xF1	; 241
     ee4:	97 e0       	ldi	r25, 0x07	; 7
     ee6:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     eea:	48 89       	ldd	r20, Y+16	; 0x10
     eec:	59 89       	ldd	r21, Y+17	; 0x11
     eee:	6a 89       	ldd	r22, Y+18	; 0x12
     ef0:	7b 89       	ldd	r23, Y+19	; 0x13
     ef2:	22 e0       	ldi	r18, 0x02	; 2
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 ef       	ldi	r24, 0xF1	; 241
     ef8:	97 e0       	ldi	r25, 0x07	; 7
     efa:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print5printEdi>
     efe:	6f ee       	ldi	r22, 0xEF	; 239
     f00:	73 e0       	ldi	r23, 0x03	; 3
     f02:	81 ef       	ldi	r24, 0xF1	; 241
     f04:	97 e0       	ldi	r25, 0x07	; 7
     f06:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     f0a:	61 ef       	ldi	r22, 0xF1	; 241
     f0c:	73 e0       	ldi	r23, 0x03	; 3
     f0e:	81 ef       	ldi	r24, 0xF1	; 241
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Windstrength:\t"); Serial.print(weatherStationData.windstrength); Serial.print("\t"); Serial.println("");
     f16:	65 ef       	ldi	r22, 0xF5	; 245
     f18:	73 e0       	ldi	r23, 0x03	; 3
     f1a:	81 ef       	ldi	r24, 0xF1	; 241
     f1c:	97 e0       	ldi	r25, 0x07	; 7
     f1e:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     f22:	6b e2       	ldi	r22, 0x2B	; 43
     f24:	76 e0       	ldi	r23, 0x06	; 6
     f26:	81 ef       	ldi	r24, 0xF1	; 241
     f28:	97 e0       	ldi	r25, 0x07	; 7
     f2a:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN5Print5printERK6String>
     f2e:	6f ee       	ldi	r22, 0xEF	; 239
     f30:	73 e0       	ldi	r23, 0x03	; 3
     f32:	81 ef       	ldi	r24, 0xF1	; 241
     f34:	97 e0       	ldi	r25, 0x07	; 7
     f36:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     f3a:	60 ef       	ldi	r22, 0xF0	; 240
     f3c:	73 e0       	ldi	r23, 0x03	; 3
     f3e:	81 ef       	ldi	r24, 0xF1	; 241
     f40:	97 e0       	ldi	r25, 0x07	; 7
     f42:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Winddirection:\t"); Serial.print(weatherStationData.winddirection); Serial.print("\t"); Serial.println("");
     f46:	64 e0       	ldi	r22, 0x04	; 4
     f48:	74 e0       	ldi	r23, 0x04	; 4
     f4a:	81 ef       	ldi	r24, 0xF1	; 241
     f4c:	97 e0       	ldi	r25, 0x07	; 7
     f4e:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     f52:	61 e3       	ldi	r22, 0x31	; 49
     f54:	76 e0       	ldi	r23, 0x06	; 6
     f56:	81 ef       	ldi	r24, 0xF1	; 241
     f58:	97 e0       	ldi	r25, 0x07	; 7
     f5a:	0e 94 28 20 	call	0x4050	; 0x4050 <_ZN5Print5printERK6String>
     f5e:	6f ee       	ldi	r22, 0xEF	; 239
     f60:	73 e0       	ldi	r23, 0x03	; 3
     f62:	81 ef       	ldi	r24, 0xF1	; 241
     f64:	97 e0       	ldi	r25, 0x07	; 7
     f66:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     f6a:	60 ef       	ldi	r22, 0xF0	; 240
     f6c:	73 e0       	ldi	r23, 0x03	; 3
     f6e:	81 ef       	ldi	r24, 0xF1	; 241
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Rainfall:\t"); Serial.print(weatherStationData.rainfall); Serial.print("\t"); Serial.println("ml/m^2");
     f76:	64 e1       	ldi	r22, 0x14	; 20
     f78:	74 e0       	ldi	r23, 0x04	; 4
     f7a:	81 ef       	ldi	r24, 0xF1	; 241
     f7c:	97 e0       	ldi	r25, 0x07	; 7
     f7e:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     f82:	4c 89       	ldd	r20, Y+20	; 0x14
     f84:	5d 89       	ldd	r21, Y+21	; 0x15
     f86:	6e 89       	ldd	r22, Y+22	; 0x16
     f88:	7f 89       	ldd	r23, Y+23	; 0x17
     f8a:	22 e0       	ldi	r18, 0x02	; 2
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 ef       	ldi	r24, 0xF1	; 241
     f90:	97 e0       	ldi	r25, 0x07	; 7
     f92:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print5printEdi>
     f96:	6f ee       	ldi	r22, 0xEF	; 239
     f98:	73 e0       	ldi	r23, 0x03	; 3
     f9a:	81 ef       	ldi	r24, 0xF1	; 241
     f9c:	97 e0       	ldi	r25, 0x07	; 7
     f9e:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     fa2:	6f e1       	ldi	r22, 0x1F	; 31
     fa4:	74 e0       	ldi	r23, 0x04	; 4
     fa6:	81 ef       	ldi	r24, 0xF1	; 241
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.print("Lightintensity:\t"); Serial.print(weatherStationData.lightintesity); Serial.print("\t"); Serial.println("lux");
     fae:	66 e2       	ldi	r22, 0x26	; 38
     fb0:	74 e0       	ldi	r23, 0x04	; 4
     fb2:	81 ef       	ldi	r24, 0xF1	; 241
     fb4:	97 e0       	ldi	r25, 0x07	; 7
     fb6:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     fba:	4c 85       	ldd	r20, Y+12	; 0x0c
     fbc:	5d 85       	ldd	r21, Y+13	; 0x0d
     fbe:	6e 85       	ldd	r22, Y+14	; 0x0e
     fc0:	7f 85       	ldd	r23, Y+15	; 0x0f
     fc2:	22 e0       	ldi	r18, 0x02	; 2
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 ef       	ldi	r24, 0xF1	; 241
     fc8:	97 e0       	ldi	r25, 0x07	; 7
     fca:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN5Print5printEdi>
     fce:	6f ee       	ldi	r22, 0xEF	; 239
     fd0:	73 e0       	ldi	r23, 0x03	; 3
     fd2:	81 ef       	ldi	r24, 0xF1	; 241
     fd4:	97 e0       	ldi	r25, 0x07	; 7
     fd6:	0e 94 36 20 	call	0x406c	; 0x406c <_ZN5Print5printEPKc>
     fda:	65 ef       	ldi	r22, 0xF5	; 245
     fdc:	72 e0       	ldi	r23, 0x02	; 2
     fde:	81 ef       	ldi	r24, 0xF1	; 241
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	Serial.println("");
     fe6:	60 ef       	ldi	r22, 0xF0	; 240
     fe8:	73 e0       	ldi	r23, 0x03	; 3
     fea:	81 ef       	ldi	r24, 0xF1	; 241
     fec:	97 e0       	ldi	r25, 0x07	; 7
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
	Serial.print("Windspeed:\t"); Serial.print(weatherStationData.windspeed); Serial.print("\t"); Serial.println("m/s");
	Serial.print("Windstrength:\t"); Serial.print(weatherStationData.windstrength); Serial.print("\t"); Serial.println("");
	Serial.print("Winddirection:\t"); Serial.print(weatherStationData.winddirection); Serial.print("\t"); Serial.println("");
	Serial.print("Rainfall:\t"); Serial.print(weatherStationData.rainfall); Serial.print("\t"); Serial.println("ml/m^2");
	Serial.print("Lightintensity:\t"); Serial.print(weatherStationData.lightintesity); Serial.print("\t"); Serial.println("lux");
	Serial.println("");
     ff2:	0c 94 41 20 	jmp	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>

00000ff6 <loop>:
	Serial.println(" ");
} //setup

void loop()
{
	delay(TIME * 1000);
     ff6:	68 e8       	ldi	r22, 0x88	; 136
     ff8:	73 e1       	ldi	r23, 0x13	; 19
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <delay>
	measureWeather();
    1002:	cf dd       	rcall	.-1122   	; 0xba2 <_Z14measureWeatherv>
	printWeatherData();
    1004:	bf ce       	rjmp	.-642    	; 0xd84 <_Z16printWeatherDatav>

00001006 <_GLOBAL__sub_I_sd>:
    1006:	89 e9       	ldi	r24, 0x99	; 153
#include "Calculate.h"
#include "LightIntensitySensor.h"
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
    1008:	96 e0       	ldi	r25, 0x06	; 6
    100a:	28 d1       	rcall	.+592    	; 0x125c <_ZN6SdcardC1Ev>
TempHumidPressSensor thps;
    100c:	89 e8       	ldi	r24, 0x89	; 137
    100e:	96 e0       	ldi	r25, 0x06	; 6
    1010:	0e 94 c2 19 	call	0x3384	; 0x3384 <_ZN20TempHumidPressSensorC1Ev>
LightIntensitySensor tsl2561;
    1014:	85 e8       	ldi	r24, 0x85	; 133
    1016:	96 e0       	ldi	r25, 0x06	; 6
    1018:	2a dd       	rcall	.-1452   	; 0xa6e <_ZN20LightIntensitySensorC1Ev>
BME280SensorData sensordata;
WindData windData;
RealTimeClock realtimeclock;
    101a:	83 e6       	ldi	r24, 0x63	; 99
    101c:	96 e0       	ldi	r25, 0x06	; 6
    101e:	63 d0       	rcall	.+198    	; 0x10e6 <_ZN13RealTimeClockC1Ev>
    1020:	60 ef       	ldi	r22, 0xF0	; 240
    1022:	73 e0       	ldi	r23, 0x03	; 3
    1024:	86 e5       	ldi	r24, 0x56	; 86
    1026:	96 e0       	ldi	r25, 0x06	; 6
    1028:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
TimeStamp ts;
Calculate calculate;
    102c:	85 e5       	ldi	r24, 0x55	; 85
    102e:	96 e0       	ldi	r25, 0x06	; 6
    1030:	3b db       	rcall	.-2442   	; 0x6a8 <_ZN9CalculateC1Ev>

String logDataHour = "Hour.txt";
    1032:	67 e3       	ldi	r22, 0x37	; 55
    1034:	74 e0       	ldi	r23, 0x04	; 4
    1036:	8f e4       	ldi	r24, 0x4F	; 79
    1038:	96 e0       	ldi	r25, 0x06	; 6
    103a:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
String logDataDay = "Day.txt";
    103e:	60 e4       	ldi	r22, 0x40	; 64
    1040:	74 e0       	ldi	r23, 0x04	; 4
    1042:	89 e4       	ldi	r24, 0x49	; 73
    1044:	96 e0       	ldi	r25, 0x06	; 6
    1046:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
String logDataWeek = "Week.txt";
    104a:	68 e4       	ldi	r22, 0x48	; 72
    104c:	74 e0       	ldi	r23, 0x04	; 4
    104e:	83 e4       	ldi	r24, 0x43	; 67
    1050:	96 e0       	ldi	r25, 0x06	; 6
    1052:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
String logDataMonth = "Month.txt";
    1056:	61 e5       	ldi	r22, 0x51	; 81
    1058:	74 e0       	ldi	r23, 0x04	; 4
    105a:	8d e3       	ldi	r24, 0x3D	; 61
    105c:	96 e0       	ldi	r25, 0x06	; 6
    105e:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
// it would be useful if there is an option for NOW (current values maybe)!

void measureWeather();
void printWeatherData();

struct WeatherStationData
    1062:	60 ef       	ldi	r22, 0xF0	; 240
    1064:	73 e0       	ldi	r23, 0x03	; 3
    1066:	8b e2       	ldi	r24, 0x2B	; 43
    1068:	96 e0       	ldi	r25, 0x06	; 6
    106a:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
    106e:	60 ef       	ldi	r22, 0xF0	; 240
    1070:	73 e0       	ldi	r23, 0x03	; 3
    1072:	81 e3       	ldi	r24, 0x31	; 49
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
    107a:	60 ef       	ldi	r22, 0xF0	; 240
    107c:	73 e0       	ldi	r23, 0x03	; 3
    107e:	87 e3       	ldi	r24, 0x37	; 55
    1080:	96 e0       	ldi	r25, 0x06	; 6
    1082:	0c 94 e9 25 	jmp	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>

00001086 <_GLOBAL__sub_D_sd>:
    1086:	87 e3       	ldi	r24, 0x37	; 55
    1088:	96 e0       	ldi	r25, 0x06	; 6
    108a:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
    108e:	81 e3       	ldi	r24, 0x31	; 49
    1090:	96 e0       	ldi	r25, 0x06	; 6
    1092:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
    1096:	8b e2       	ldi	r24, 0x2B	; 43
    1098:	96 e0       	ldi	r25, 0x06	; 6
    109a:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
Calculate calculate;

String logDataHour = "Hour.txt";
String logDataDay = "Day.txt";
String logDataWeek = "Week.txt";
String logDataMonth = "Month.txt";
    109e:	8d e3       	ldi	r24, 0x3D	; 61
    10a0:	96 e0       	ldi	r25, 0x06	; 6
    10a2:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
TimeStamp ts;
Calculate calculate;

String logDataHour = "Hour.txt";
String logDataDay = "Day.txt";
String logDataWeek = "Week.txt";
    10a6:	83 e4       	ldi	r24, 0x43	; 67
    10a8:	96 e0       	ldi	r25, 0x06	; 6
    10aa:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
RealTimeClock realtimeclock;
TimeStamp ts;
Calculate calculate;

String logDataHour = "Hour.txt";
String logDataDay = "Day.txt";
    10ae:	89 e4       	ldi	r24, 0x49	; 73
    10b0:	96 e0       	ldi	r25, 0x06	; 6
    10b2:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
WindData windData;
RealTimeClock realtimeclock;
TimeStamp ts;
Calculate calculate;

String logDataHour = "Hour.txt";
    10b6:	8f e4       	ldi	r24, 0x4F	; 79
    10b8:	96 e0       	ldi	r25, 0x06	; 6
    10ba:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
LightIntensitySensor tsl2561;
BME280SensorData sensordata;
WindData windData;
RealTimeClock realtimeclock;
TimeStamp ts;
Calculate calculate;
    10be:	85 e5       	ldi	r24, 0x55	; 85
    10c0:	96 e0       	ldi	r25, 0x06	; 6
    10c2:	f3 da       	rcall	.-2586   	; 0x6aa <_ZN9CalculateD1Ev>
    10c4:	86 e5       	ldi	r24, 0x56	; 86
    10c6:	96 e0       	ldi	r25, 0x06	; 6
    10c8:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN6StringD1Ev>
Sdcard sd;
TempHumidPressSensor thps;
LightIntensitySensor tsl2561;
BME280SensorData sensordata;
WindData windData;
RealTimeClock realtimeclock;
    10cc:	83 e6       	ldi	r24, 0x63	; 99
    10ce:	96 e0       	ldi	r25, 0x06	; 6
    10d0:	0e d0       	rcall	.+28     	; 0x10ee <_ZN13RealTimeClockD1Ev>
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
TempHumidPressSensor thps;
LightIntensitySensor tsl2561;
    10d2:	85 e8       	ldi	r24, 0x85	; 133
    10d4:	96 e0       	ldi	r25, 0x06	; 6
    10d6:	cc dc       	rcall	.-1640   	; 0xa70 <_ZN20LightIntensitySensorD1Ev>
#include "LightIntensitySensor.h"
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
TempHumidPressSensor thps;
    10d8:	89 e8       	ldi	r24, 0x89	; 137
    10da:	96 e0       	ldi	r25, 0x06	; 6
    10dc:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN20TempHumidPressSensorD1Ev>
#include "Calculate.h"
#include "LightIntensitySensor.h"
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
    10e0:	89 e9       	ldi	r24, 0x99	; 153
    10e2:	96 e0       	ldi	r25, 0x06	; 6
    10e4:	bc c0       	rjmp	.+376    	; 0x125e <_ZN6SdcardD1Ev>

000010e6 <_ZN13RealTimeClockC1Ev>:
#include "RealTimeClock.h"

RTC_DS3231 rtc;

// constructor
RealTimeClock::RealTimeClock()
    10e6:	60 ef       	ldi	r22, 0xF0	; 240
    10e8:	73 e0       	ldi	r23, 0x03	; 3
    10ea:	0c 94 e9 25 	jmp	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>

000010ee <_ZN13RealTimeClockD1Ev>:
{
} //constructor

// destructor
RealTimeClock::~RealTimeClock()
    10ee:	0c 94 7e 25 	jmp	0x4afc	; 0x4afc <_ZN6StringD1Ev>

000010f2 <_ZN13RealTimeClock7initRTCEv>:
{
} //~destructor

void RealTimeClock::initRTC()
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <_ZN13RealTimeClock7initRTCEv+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <_ZN13RealTimeClock7initRTCEv+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	bool status = rtc.begin();
    10fe:	8a e9       	ldi	r24, 0x9A	; 154
    1100:	96 e0       	ldi	r25, 0x06	; 6
    1102:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN10RTC_DS32315beginEv>
	if (!status)
    1106:	81 11       	cpse	r24, r1
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <_ZN13RealTimeClock7initRTCEv+0x26>
	{
		Serial.println("Error: Couldn't find RTC, please ensure that the rtc is powered!");
    110a:	6b e5       	ldi	r22, 0x5B	; 91
    110c:	74 e0       	ldi	r23, 0x04	; 4
    110e:	81 ef       	ldi	r24, 0xF1	; 241
    1110:	97 e0       	ldi	r25, 0x07	; 7
    1112:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
    1116:	ff cf       	rjmp	.-2      	; 0x1116 <_ZN13RealTimeClock7initRTCEv+0x24>
		while (1);
	}
	else if (status)
	{
		Serial.println("RTC\tsuccessfully initialized!");
    1118:	6c e9       	ldi	r22, 0x9C	; 156
    111a:	74 e0       	ldi	r23, 0x04	; 4
    111c:	81 ef       	ldi	r24, 0xF1	; 241
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
	}
	
	if (rtc.lostPower())
    1124:	8a e9       	ldi	r24, 0x9A	; 154
    1126:	96 e0       	ldi	r25, 0x06	; 6
    1128:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN10RTC_DS32319lostPowerEv>
    112c:	88 23       	and	r24, r24
    112e:	91 f0       	breq	.+36     	; 0x1154 <_ZN13RealTimeClock7initRTCEv+0x62>
	{
		Serial.println("RTC lost power, the time will be set!");
    1130:	6a eb       	ldi	r22, 0xBA	; 186
    1132:	74 e0       	ldi	r23, 0x04	; 4
    1134:	81 ef       	ldi	r24, 0xF1	; 241
    1136:	97 e0       	ldi	r25, 0x07	; 7
    1138:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this file was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    113c:	4a ec       	ldi	r20, 0xCA	; 202
    113e:	51 e0       	ldi	r21, 0x01	; 1
    1140:	6e eb       	ldi	r22, 0xBE	; 190
    1142:	71 e0       	ldi	r23, 0x01	; 1
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN10RTC_DS32316adjustERK8DateTime>
	}
} //initRTC
    1154:	26 96       	adiw	r28, 0x06	; 6
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <_ZN13RealTimeClock11setDateTimeEv>:

void RealTimeClock::setDateTime()
{
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	ca 55       	subi	r28, 0x5A	; 90
    1174:	d1 09       	sbc	r29, r1
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	8c 01       	movw	r16, r24
	char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    1182:	84 e5       	ldi	r24, 0x54	; 84
    1184:	eb e1       	ldi	r30, 0x1B	; 27
    1186:	f2 e0       	ldi	r31, 0x02	; 2
    1188:	de 01       	movw	r26, r28
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	01 90       	ld	r0, Z+
    118e:	0d 92       	st	X+, r0
    1190:	8a 95       	dec	r24
    1192:	e1 f7       	brne	.-8      	; 0x118c <_ZN13RealTimeClock11setDateTimeEv+0x26>
	DateTime now = rtc.now();
    1194:	ce 01       	movw	r24, r28
    1196:	8b 5a       	subi	r24, 0xAB	; 171
    1198:	9f 4f       	sbci	r25, 0xFF	; 255
    119a:	0e 94 91 14 	call	0x2922	; 0x2922 <_ZN10RTC_DS32313nowEv>
	
	dayOfWeek = daysOfTheWeek[now.dayOfTheWeek()];
    119e:	ce 01       	movw	r24, r28
    11a0:	8b 5a       	subi	r24, 0xAB	; 171
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZNK8DateTime12dayOfTheWeekEv>
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	6c 0f       	add	r22, r28
    11ae:	7d 1f       	adc	r23, r29
    11b0:	9c e0       	ldi	r25, 0x0C	; 12
    11b2:	89 9f       	mul	r24, r25
    11b4:	60 0d       	add	r22, r0
    11b6:	71 1d       	adc	r23, r1
    11b8:	11 24       	eor	r1, r1
    11ba:	c8 01       	movw	r24, r16
    11bc:	0e 94 65 26 	call	0x4cca	; 0x4cca <_ZN6StringaSEPKc>
	year = now.year();
    11c0:	66 96       	adiw	r28, 0x16	; 22
    11c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    11c4:	66 97       	sbiw	r28, 0x16	; 22
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	80 53       	subi	r24, 0x30	; 48
    11ca:	98 4f       	sbci	r25, 0xF8	; 248
    11cc:	f8 01       	movw	r30, r16
    11ce:	97 83       	std	Z+7, r25	; 0x07
    11d0:	86 83       	std	Z+6, r24	; 0x06
	month = now.month();
    11d2:	67 96       	adiw	r28, 0x17	; 23
    11d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    11d6:	67 97       	sbiw	r28, 0x17	; 23
    11d8:	80 87       	std	Z+8, r24	; 0x08
	day = now.day();
    11da:	68 96       	adiw	r28, 0x18	; 24
    11dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    11de:	68 97       	sbiw	r28, 0x18	; 24
    11e0:	81 87       	std	Z+9, r24	; 0x09
	hour = now.hour();
    11e2:	69 96       	adiw	r28, 0x19	; 25
    11e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    11e6:	69 97       	sbiw	r28, 0x19	; 25
    11e8:	82 87       	std	Z+10, r24	; 0x0a
	minute = now.minute();
    11ea:	6a 96       	adiw	r28, 0x1a	; 26
    11ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    11ee:	6a 97       	sbiw	r28, 0x1a	; 26
    11f0:	83 87       	std	Z+11, r24	; 0x0b
	second = now.second();
    11f2:	6b 96       	adiw	r28, 0x1b	; 27
    11f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    11f6:	6b 97       	sbiw	r28, 0x1b	; 27
    11f8:	84 87       	std	Z+12, r24	; 0x0c
} //setDateTime
    11fa:	c6 5a       	subi	r28, 0xA6	; 166
    11fc:	df 4f       	sbci	r29, 0xFF	; 255
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <_ZN13RealTimeClock12getTimeStampEv>:

TimeStamp RealTimeClock::getTimeStamp()
{
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	8b 01       	movw	r16, r22
    121e:	60 ef       	ldi	r22, 0xF0	; 240
    1220:	73 e0       	ldi	r23, 0x03	; 3
    1222:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <_ZN6StringC1EPKc>
	TimeStamp timeStamp;
	setDateTime();
    1226:	c8 01       	movw	r24, r16
    1228:	9e df       	rcall	.-196    	; 0x1166 <_ZN13RealTimeClock11setDateTimeEv>
	
	timeStamp.dotw = dayOfWeek;
    122a:	b8 01       	movw	r22, r16
    122c:	ce 01       	movw	r24, r28
    122e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <_ZN6StringaSERKS_>
	timeStamp.y = year;
    1232:	f8 01       	movw	r30, r16
    1234:	86 81       	ldd	r24, Z+6	; 0x06
    1236:	97 81       	ldd	r25, Z+7	; 0x07
    1238:	9f 83       	std	Y+7, r25	; 0x07
    123a:	8e 83       	std	Y+6, r24	; 0x06
	timeStamp.mo = month;
    123c:	80 85       	ldd	r24, Z+8	; 0x08
    123e:	88 87       	std	Y+8, r24	; 0x08
	timeStamp.d = day;
    1240:	81 85       	ldd	r24, Z+9	; 0x09
    1242:	89 87       	std	Y+9, r24	; 0x09
	timeStamp.h = hour;
    1244:	82 85       	ldd	r24, Z+10	; 0x0a
    1246:	8a 87       	std	Y+10, r24	; 0x0a
	timeStamp.mi = minute;
    1248:	83 85       	ldd	r24, Z+11	; 0x0b
    124a:	8b 87       	std	Y+11, r24	; 0x0b
	timeStamp.s = second;
    124c:	84 85       	ldd	r24, Z+12	; 0x0c
    124e:	8c 87       	std	Y+12, r24	; 0x0c
	
	return timeStamp;
    1250:	ce 01       	movw	r24, r28
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <_ZN6SdcardC1Ev>:
	} 
	else
	{
		Serial.println(filename + " doesn't exist");
	}
    125c:	08 95       	ret

0000125e <_ZN6SdcardD1Ev>:
    125e:	08 95       	ret

00001260 <_ZN6Sdcard18initSdcardBreakoutEv>:
    1260:	65 e3       	ldi	r22, 0x35	; 53
    1262:	87 e9       	ldi	r24, 0x97	; 151
    1264:	98 e0       	ldi	r25, 0x08	; 8
    1266:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <_ZN5SDLib7SDClass5beginEh>
    126a:	81 11       	cpse	r24, r1
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <_ZN6Sdcard18initSdcardBreakoutEv+0x28>
    126e:	60 ee       	ldi	r22, 0xE0	; 224
    1270:	74 e0       	ldi	r23, 0x04	; 4
    1272:	81 ef       	ldi	r24, 0xF1	; 241
    1274:	97 e0       	ldi	r25, 0x07	; 7
    1276:	0e 94 41 20 	call	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
    127a:	65 e3       	ldi	r22, 0x35	; 53
    127c:	87 e9       	ldi	r24, 0x97	; 151
    127e:	98 e0       	ldi	r25, 0x08	; 8
    1280:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <_ZN5SDLib7SDClass5beginEh>
    1284:	88 23       	and	r24, r24
    1286:	31 f0       	breq	.+12     	; 0x1294 <_ZN6Sdcard18initSdcardBreakoutEv+0x34>
    1288:	6f ef       	ldi	r22, 0xFF	; 255
    128a:	74 e0       	ldi	r23, 0x04	; 4
    128c:	81 ef       	ldi	r24, 0xF1	; 241
    128e:	97 e0       	ldi	r25, 0x07	; 7
    1290:	0c 94 41 20 	jmp	0x4082	; 0x4082 <_ZN5Print7printlnEPKc>
    1294:	64 ef       	ldi	r22, 0xF4	; 244
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <delay>
    12a0:	ec cf       	rjmp	.-40     	; 0x127a <_ZN6Sdcard18initSdcardBreakoutEv+0x1a>

000012a2 <_GLOBAL__sub_I_datalog>:
#include <SPI.h>
#include <SD.h>
#include "SystemDefinitions.h"
#include "Sdcard.h"

File datalog;
    12a2:	8b e9       	ldi	r24, 0x9B	; 155
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <_ZN5SDLib4FileC1Ev>

000012aa <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
    12aa:	20 91 ee 0a 	lds	r18, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    12ae:	22 23       	and	r18, r18
    12b0:	99 f0       	breq	.+38     	; 0x12d8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    12b2:	4f b7       	in	r20, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	20 91 ee 0a 	lds	r18, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    12ba:	21 30       	cpi	r18, 0x01	; 1
    12bc:	59 f4       	brne	.+22     	; 0x12d4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    12be:	2d b3       	in	r18, 0x1d	; 29
    12c0:	20 93 ec 0a 	sts	0x0AEC, r18	; 0x800aec <_ZN8SPIClass13interruptSaveE>
    12c4:	3d b3       	in	r19, 0x1d	; 29
    12c6:	20 91 ed 0a 	lds	r18, 0x0AED	; 0x800aed <_ZN8SPIClass13interruptMaskE>
    12ca:	20 95       	com	r18
    12cc:	23 23       	and	r18, r19
    12ce:	2d bb       	out	0x1d, r18	; 29
    12d0:	4f bf       	out	0x3f, r20	; 63
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    12d4:	40 93 ec 0a 	sts	0x0AEC, r20	; 0x800aec <_ZN8SPIClass13interruptSaveE>
    12d8:	8c bd       	out	0x2c, r24	; 44
    12da:	9d bd       	out	0x2d, r25	; 45
    12dc:	08 95       	ret

000012de <_ZN8SPIClass14endTransactionEv>:
    12de:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    12e2:	88 23       	and	r24, r24
    12e4:	61 f0       	breq	.+24     	; 0x12fe <_ZN8SPIClass14endTransactionEv+0x20>
    12e6:	9f b7       	in	r25, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	20 91 ee 0a 	lds	r18, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    12ee:	80 91 ec 0a 	lds	r24, 0x0AEC	; 0x800aec <_ZN8SPIClass13interruptSaveE>
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	19 f4       	brne	.+6      	; 0x12fc <_ZN8SPIClass14endTransactionEv+0x1e>
    12f6:	8d bb       	out	0x1d, r24	; 29
    12f8:	9f bf       	out	0x3f, r25	; 63
    12fa:	08 95       	ret
    12fc:	8f bf       	out	0x3f, r24	; 63
    12fe:	08 95       	ret

00001300 <_ZN15Adafruit_BME280C1Ev>:
    1300:	fc 01       	movw	r30, r24
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	83 87       	std	Z+11, r24	; 0x0b
    1306:	84 87       	std	Z+12, r24	; 0x0c
    1308:	85 87       	std	Z+13, r24	; 0x0d
    130a:	86 87       	std	Z+14, r24	; 0x0e
    130c:	08 95       	ret

0000130e <_ZN15Adafruit_BME2807spixferEh>:
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	fc 01       	movw	r30, r24
    1320:	26 85       	ldd	r18, Z+14	; 0x0e
    1322:	2f 3f       	cpi	r18, 0xFF	; 255
    1324:	39 f4       	brne	.+14     	; 0x1334 <_ZN15Adafruit_BME2807spixferEh+0x26>
    1326:	6e bd       	out	0x2e, r22	; 46
    1328:	00 00       	nop
    132a:	0d b4       	in	r0, 0x2d	; 45
    132c:	07 fe       	sbrs	r0, 7
    132e:	fd cf       	rjmp	.-6      	; 0x132a <_ZN15Adafruit_BME2807spixferEh+0x1c>
    1330:	8e b5       	in	r24, 0x2e	; 46
    1332:	2b c0       	rjmp	.+86     	; 0x138a <_ZN15Adafruit_BME2807spixferEh+0x7c>
    1334:	d6 2f       	mov	r29, r22
    1336:	8c 01       	movw	r16, r24
    1338:	87 e0       	ldi	r24, 0x07	; 7
    133a:	e8 2e       	mov	r14, r24
    133c:	f1 2c       	mov	r15, r1
    133e:	c0 e0       	ldi	r28, 0x00	; 0
    1340:	cc 24       	eor	r12, r12
    1342:	c3 94       	inc	r12
    1344:	d1 2c       	mov	r13, r1
    1346:	cc 0f       	add	r28, r28
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	f8 01       	movw	r30, r16
    134c:	86 85       	ldd	r24, Z+14	; 0x0e
    134e:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1352:	b6 01       	movw	r22, r12
    1354:	0e 2c       	mov	r0, r14
    1356:	01 c0       	rjmp	.+2      	; 0x135a <_ZN15Adafruit_BME2807spixferEh+0x4c>
    1358:	66 0f       	add	r22, r22
    135a:	0a 94       	dec	r0
    135c:	ea f7       	brpl	.-6      	; 0x1358 <_ZN15Adafruit_BME2807spixferEh+0x4a>
    135e:	6d 23       	and	r22, r29
    1360:	f8 01       	movw	r30, r16
    1362:	84 85       	ldd	r24, Z+12	; 0x0c
    1364:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	f8 01       	movw	r30, r16
    136c:	86 85       	ldd	r24, Z+14	; 0x0e
    136e:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1372:	f8 01       	movw	r30, r16
    1374:	85 85       	ldd	r24, Z+13	; 0x0d
    1376:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <digitalRead>
    137a:	89 2b       	or	r24, r25
    137c:	09 f0       	breq	.+2      	; 0x1380 <_ZN15Adafruit_BME2807spixferEh+0x72>
    137e:	c1 60       	ori	r28, 0x01	; 1
    1380:	f1 e0       	ldi	r31, 0x01	; 1
    1382:	ef 1a       	sub	r14, r31
    1384:	f1 08       	sbc	r15, r1
    1386:	f8 f6       	brcc	.-66     	; 0x1346 <_ZN15Adafruit_BME2807spixferEh+0x38>
    1388:	8c 2f       	mov	r24, r28
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	08 95       	ret

0000139c <_ZN15Adafruit_BME2806write8Ehh>:
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
    13a6:	16 2f       	mov	r17, r22
    13a8:	04 2f       	mov	r16, r20
    13aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	09 f5       	brne	.+66     	; 0x13f2 <_ZN15Adafruit_BME2806write8Ehh+0x56>
    13b0:	6a 81       	ldd	r22, Y+2	; 0x02
    13b2:	88 81       	ld	r24, Y
    13b4:	99 81       	ldd	r25, Y+1	; 0x01
    13b6:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    13ba:	88 81       	ld	r24, Y
    13bc:	99 81       	ldd	r25, Y+1	; 0x01
    13be:	dc 01       	movw	r26, r24
    13c0:	ed 91       	ld	r30, X+
    13c2:	fc 91       	ld	r31, X
    13c4:	01 90       	ld	r0, Z+
    13c6:	f0 81       	ld	r31, Z
    13c8:	e0 2d       	mov	r30, r0
    13ca:	61 2f       	mov	r22, r17
    13cc:	19 95       	eicall
    13ce:	88 81       	ld	r24, Y
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	dc 01       	movw	r26, r24
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	01 90       	ld	r0, Z+
    13da:	f0 81       	ld	r31, Z
    13dc:	e0 2d       	mov	r30, r0
    13de:	60 2f       	mov	r22, r16
    13e0:	19 95       	eicall
    13e2:	88 81       	ld	r24, Y
    13e4:	99 81       	ldd	r25, Y+1	; 0x01
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	0c 94 bd 19 	jmp	0x337a	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    13f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f4:	8f 3f       	cpi	r24, 0xFF	; 255
    13f6:	19 f4       	brne	.+6      	; 0x13fe <_ZN15Adafruit_BME2806write8Ehh+0x62>
    13f8:	82 e5       	ldi	r24, 0x52	; 82
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	56 df       	rcall	.-340    	; 0x12aa <_ZN8SPIClass16beginTransactionE11SPISettings>
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	8b 85       	ldd	r24, Y+11	; 0x0b
    1402:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1406:	61 2f       	mov	r22, r17
    1408:	6f 77       	andi	r22, 0x7F	; 127
    140a:	ce 01       	movw	r24, r28
    140c:	80 df       	rcall	.-256    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    140e:	60 2f       	mov	r22, r16
    1410:	ce 01       	movw	r24, r28
    1412:	7d df       	rcall	.-262    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	8b 85       	ldd	r24, Y+11	; 0x0b
    1418:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    141c:	8e 85       	ldd	r24, Y+14	; 0x0e
    141e:	8f 3f       	cpi	r24, 0xFF	; 255
    1420:	29 f4       	brne	.+10     	; 0x142c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	59 cf       	rjmp	.-334    	; 0x12de <_ZN8SPIClass14endTransactionEv>
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	08 95       	ret

00001436 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
    1436:	cf 92       	push	r12
    1438:	ef 92       	push	r14
    143a:	0f 93       	push	r16
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
    1442:	62 95       	swap	r22
    1444:	66 0f       	add	r22, r22
    1446:	66 0f       	add	r22, r22
    1448:	60 7c       	andi	r22, 0xC0	; 192
    144a:	47 70       	andi	r20, 0x07	; 7
    144c:	27 70       	andi	r18, 0x07	; 7
    144e:	82 2f       	mov	r24, r18
    1450:	88 0f       	add	r24, r24
    1452:	88 0f       	add	r24, r24
    1454:	88 0f       	add	r24, r24
    1456:	26 2f       	mov	r18, r22
    1458:	24 2b       	or	r18, r20
    145a:	28 2b       	or	r18, r24
    145c:	29 ab       	std	Y+49, r18	; 0x31
    145e:	90 2f       	mov	r25, r16
    1460:	92 95       	swap	r25
    1462:	99 0f       	add	r25, r25
    1464:	90 7e       	andi	r25, 0xE0	; 224
    1466:	8a a9       	ldd	r24, Y+50	; 0x32
    1468:	8f 71       	andi	r24, 0x1F	; 31
    146a:	89 2b       	or	r24, r25
    146c:	8a ab       	std	Y+50, r24	; 0x32
    146e:	8e 2d       	mov	r24, r14
    1470:	87 70       	andi	r24, 0x07	; 7
    1472:	88 0f       	add	r24, r24
    1474:	88 0f       	add	r24, r24
    1476:	88 0f       	add	r24, r24
    1478:	98 a9       	ldd	r25, Y+48	; 0x30
    147a:	29 2f       	mov	r18, r25
    147c:	20 7c       	andi	r18, 0xC0	; 192
    147e:	9c 2d       	mov	r25, r12
    1480:	97 70       	andi	r25, 0x07	; 7
    1482:	e2 2e       	mov	r14, r18
    1484:	e8 2a       	or	r14, r24
    1486:	e9 2a       	or	r14, r25
    1488:	e8 aa       	std	Y+48, r14	; 0x30
    148a:	40 2f       	mov	r20, r16
    148c:	47 70       	andi	r20, 0x07	; 7
    148e:	62 ef       	ldi	r22, 0xF2	; 242
    1490:	ce 01       	movw	r24, r28
    1492:	84 df       	rcall	.-248    	; 0x139c <_ZN15Adafruit_BME2806write8Ehh>
    1494:	98 a9       	ldd	r25, Y+48	; 0x30
    1496:	49 2f       	mov	r20, r25
    1498:	47 70       	andi	r20, 0x07	; 7
    149a:	60 e2       	ldi	r22, 0x20	; 32
    149c:	46 9f       	mul	r20, r22
    149e:	90 01       	movw	r18, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	89 2f       	mov	r24, r25
    14a4:	86 95       	lsr	r24
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	87 70       	andi	r24, 0x07	; 7
    14ac:	68 e0       	ldi	r22, 0x08	; 8
    14ae:	86 9f       	mul	r24, r22
    14b0:	a0 01       	movw	r20, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	42 2b       	or	r20, r18
    14b6:	53 2b       	or	r21, r19
    14b8:	97 fb       	bst	r25, 7
    14ba:	99 27       	eor	r25, r25
    14bc:	90 f9       	bld	r25, 0
    14be:	49 2b       	or	r20, r25
    14c0:	65 ef       	ldi	r22, 0xF5	; 245
    14c2:	ce 01       	movw	r24, r28
    14c4:	6b df       	rcall	.-298    	; 0x139c <_ZN15Adafruit_BME2806write8Ehh>
    14c6:	99 a9       	ldd	r25, Y+49	; 0x31
    14c8:	49 2f       	mov	r20, r25
    14ca:	47 70       	andi	r20, 0x07	; 7
    14cc:	80 e2       	ldi	r24, 0x20	; 32
    14ce:	48 9f       	mul	r20, r24
    14d0:	90 01       	movw	r18, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	89 2f       	mov	r24, r25
    14d6:	86 95       	lsr	r24
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	87 70       	andi	r24, 0x07	; 7
    14de:	68 e0       	ldi	r22, 0x08	; 8
    14e0:	86 9f       	mul	r24, r22
    14e2:	a0 01       	movw	r20, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	42 2b       	or	r20, r18
    14e8:	53 2b       	or	r21, r19
    14ea:	92 95       	swap	r25
    14ec:	96 95       	lsr	r25
    14ee:	96 95       	lsr	r25
    14f0:	93 70       	andi	r25, 0x03	; 3
    14f2:	49 2b       	or	r20, r25
    14f4:	64 ef       	ldi	r22, 0xF4	; 244
    14f6:	ce 01       	movw	r24, r28
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	0f 91       	pop	r16
    14fe:	ef 90       	pop	r14
    1500:	cf 90       	pop	r12
    1502:	4c cf       	rjmp	.-360    	; 0x139c <_ZN15Adafruit_BME2806write8Ehh>

00001504 <_ZN15Adafruit_BME2805read8Eh>:
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
    150c:	16 2f       	mov	r17, r22
    150e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1510:	8f 3f       	cpi	r24, 0xFF	; 255
    1512:	21 f5       	brne	.+72     	; 0x155c <_ZN15Adafruit_BME2805read8Eh+0x58>
    1514:	6a 81       	ldd	r22, Y+2	; 0x02
    1516:	88 81       	ld	r24, Y
    1518:	99 81       	ldd	r25, Y+1	; 0x01
    151a:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    151e:	88 81       	ld	r24, Y
    1520:	99 81       	ldd	r25, Y+1	; 0x01
    1522:	dc 01       	movw	r26, r24
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	01 90       	ld	r0, Z+
    152a:	f0 81       	ld	r31, Z
    152c:	e0 2d       	mov	r30, r0
    152e:	61 2f       	mov	r22, r17
    1530:	19 95       	eicall
    1532:	88 81       	ld	r24, Y
    1534:	99 81       	ldd	r25, Y+1	; 0x01
    1536:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	6a 81       	ldd	r22, Y+2	; 0x02
    153e:	88 81       	ld	r24, Y
    1540:	99 81       	ldd	r25, Y+1	; 0x01
    1542:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN7TwoWire11requestFromEhh>
    1546:	88 81       	ld	r24, Y
    1548:	99 81       	ldd	r25, Y+1	; 0x01
    154a:	dc 01       	movw	r26, r24
    154c:	ed 91       	ld	r30, X+
    154e:	fc 91       	ld	r31, X
    1550:	02 84       	ldd	r0, Z+10	; 0x0a
    1552:	f3 85       	ldd	r31, Z+11	; 0x0b
    1554:	e0 2d       	mov	r30, r0
    1556:	19 95       	eicall
    1558:	18 2f       	mov	r17, r24
    155a:	1a c0       	rjmp	.+52     	; 0x1590 <_ZN15Adafruit_BME2805read8Eh+0x8c>
    155c:	8e 85       	ldd	r24, Y+14	; 0x0e
    155e:	8f 3f       	cpi	r24, 0xFF	; 255
    1560:	19 f4       	brne	.+6      	; 0x1568 <_ZN15Adafruit_BME2805read8Eh+0x64>
    1562:	82 e5       	ldi	r24, 0x52	; 82
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	a1 de       	rcall	.-702    	; 0x12aa <_ZN8SPIClass16beginTransactionE11SPISettings>
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	8b 85       	ldd	r24, Y+11	; 0x0b
    156c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1570:	61 2f       	mov	r22, r17
    1572:	60 68       	ori	r22, 0x80	; 128
    1574:	ce 01       	movw	r24, r28
    1576:	cb de       	rcall	.-618    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	ce 01       	movw	r24, r28
    157c:	c8 de       	rcall	.-624    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    157e:	18 2f       	mov	r17, r24
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	8b 85       	ldd	r24, Y+11	; 0x0b
    1584:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1588:	8e 85       	ldd	r24, Y+14	; 0x0e
    158a:	8f 3f       	cpi	r24, 0xFF	; 255
    158c:	09 f4       	brne	.+2      	; 0x1590 <_ZN15Adafruit_BME2805read8Eh+0x8c>
    158e:	a7 de       	rcall	.-690    	; 0x12de <_ZN8SPIClass14endTransactionEv>
    1590:	81 2f       	mov	r24, r17
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	08 95       	ret

0000159a <_ZN15Adafruit_BME2806read16Eh>:
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
    15a4:	16 2f       	mov	r17, r22
    15a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a8:	8f 3f       	cpi	r24, 0xFF	; 255
    15aa:	99 f5       	brne	.+102    	; 0x1612 <_ZN15Adafruit_BME2806read16Eh+0x78>
    15ac:	6a 81       	ldd	r22, Y+2	; 0x02
    15ae:	88 81       	ld	r24, Y
    15b0:	99 81       	ldd	r25, Y+1	; 0x01
    15b2:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    15b6:	88 81       	ld	r24, Y
    15b8:	99 81       	ldd	r25, Y+1	; 0x01
    15ba:	dc 01       	movw	r26, r24
    15bc:	ed 91       	ld	r30, X+
    15be:	fc 91       	ld	r31, X
    15c0:	01 90       	ld	r0, Z+
    15c2:	f0 81       	ld	r31, Z
    15c4:	e0 2d       	mov	r30, r0
    15c6:	61 2f       	mov	r22, r17
    15c8:	19 95       	eicall
    15ca:	88 81       	ld	r24, Y
    15cc:	99 81       	ldd	r25, Y+1	; 0x01
    15ce:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	6a 81       	ldd	r22, Y+2	; 0x02
    15d6:	88 81       	ld	r24, Y
    15d8:	99 81       	ldd	r25, Y+1	; 0x01
    15da:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN7TwoWire11requestFromEhh>
    15de:	88 81       	ld	r24, Y
    15e0:	99 81       	ldd	r25, Y+1	; 0x01
    15e2:	dc 01       	movw	r26, r24
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	02 84       	ldd	r0, Z+10	; 0x0a
    15ea:	f3 85       	ldd	r31, Z+11	; 0x0b
    15ec:	e0 2d       	mov	r30, r0
    15ee:	19 95       	eicall
    15f0:	18 2f       	mov	r17, r24
    15f2:	88 81       	ld	r24, Y
    15f4:	99 81       	ldd	r25, Y+1	; 0x01
    15f6:	dc 01       	movw	r26, r24
    15f8:	ed 91       	ld	r30, X+
    15fa:	fc 91       	ld	r31, X
    15fc:	02 84       	ldd	r0, Z+10	; 0x0a
    15fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    1600:	e0 2d       	mov	r30, r0
    1602:	19 95       	eicall
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	31 2f       	mov	r19, r17
    160a:	89 01       	movw	r16, r18
    160c:	08 2b       	or	r16, r24
    160e:	19 2b       	or	r17, r25
    1610:	23 c0       	rjmp	.+70     	; 0x1658 <_ZN15Adafruit_BME2806read16Eh+0xbe>
    1612:	8e 85       	ldd	r24, Y+14	; 0x0e
    1614:	8f 3f       	cpi	r24, 0xFF	; 255
    1616:	19 f4       	brne	.+6      	; 0x161e <_ZN15Adafruit_BME2806read16Eh+0x84>
    1618:	82 e5       	ldi	r24, 0x52	; 82
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	46 de       	rcall	.-884    	; 0x12aa <_ZN8SPIClass16beginTransactionE11SPISettings>
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1626:	61 2f       	mov	r22, r17
    1628:	60 68       	ori	r22, 0x80	; 128
    162a:	ce 01       	movw	r24, r28
    162c:	70 de       	rcall	.-800    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	ce 01       	movw	r24, r28
    1632:	6d de       	rcall	.-806    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    1634:	08 2f       	mov	r16, r24
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	ce 01       	movw	r24, r28
    163a:	69 de       	rcall	.-814    	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    163c:	20 2f       	mov	r18, r16
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	32 2f       	mov	r19, r18
    1642:	22 27       	eor	r18, r18
    1644:	89 01       	movw	r16, r18
    1646:	08 2b       	or	r16, r24
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	8b 85       	ldd	r24, Y+11	; 0x0b
    164c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    1650:	8e 85       	ldd	r24, Y+14	; 0x0e
    1652:	8f 3f       	cpi	r24, 0xFF	; 255
    1654:	09 f4       	brne	.+2      	; 0x1658 <_ZN15Adafruit_BME2806read16Eh+0xbe>
    1656:	43 de       	rcall	.-890    	; 0x12de <_ZN8SPIClass14endTransactionEv>
    1658:	c8 01       	movw	r24, r16
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <_ZN15Adafruit_BME2809read16_LEEh>:
    1664:	9a df       	rcall	.-204    	; 0x159a <_ZN15Adafruit_BME2806read16Eh>
    1666:	98 27       	eor	r25, r24
    1668:	89 27       	eor	r24, r25
    166a:	98 27       	eor	r25, r24
    166c:	08 95       	ret

0000166e <_ZN15Adafruit_BME2806read24Eh>:
    166e:	4f 92       	push	r4
    1670:	5f 92       	push	r5
    1672:	6f 92       	push	r6
    1674:	7f 92       	push	r7
    1676:	8f 92       	push	r8
    1678:	9f 92       	push	r9
    167a:	af 92       	push	r10
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
    168e:	16 2f       	mov	r17, r22
    1690:	8b 85       	ldd	r24, Y+11	; 0x0b
    1692:	8f 3f       	cpi	r24, 0xFF	; 255
    1694:	09 f0       	breq	.+2      	; 0x1698 <_ZN15Adafruit_BME2806read24Eh+0x2a>
    1696:	51 c0       	rjmp	.+162    	; 0x173a <_ZN15Adafruit_BME2806read24Eh+0xcc>
    1698:	6a 81       	ldd	r22, Y+2	; 0x02
    169a:	88 81       	ld	r24, Y
    169c:	99 81       	ldd	r25, Y+1	; 0x01
    169e:	0e 94 3c 19 	call	0x3278	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    16a2:	88 81       	ld	r24, Y
    16a4:	99 81       	ldd	r25, Y+1	; 0x01
    16a6:	dc 01       	movw	r26, r24
    16a8:	ed 91       	ld	r30, X+
    16aa:	fc 91       	ld	r31, X
    16ac:	01 90       	ld	r0, Z+
    16ae:	f0 81       	ld	r31, Z
    16b0:	e0 2d       	mov	r30, r0
    16b2:	61 2f       	mov	r22, r17
    16b4:	19 95       	eicall
    16b6:	88 81       	ld	r24, Y
    16b8:	99 81       	ldd	r25, Y+1	; 0x01
    16ba:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    16be:	43 e0       	ldi	r20, 0x03	; 3
    16c0:	6a 81       	ldd	r22, Y+2	; 0x02
    16c2:	88 81       	ld	r24, Y
    16c4:	99 81       	ldd	r25, Y+1	; 0x01
    16c6:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN7TwoWire11requestFromEhh>
    16ca:	88 81       	ld	r24, Y
    16cc:	99 81       	ldd	r25, Y+1	; 0x01
    16ce:	dc 01       	movw	r26, r24
    16d0:	ed 91       	ld	r30, X+
    16d2:	fc 91       	ld	r31, X
    16d4:	02 84       	ldd	r0, Z+10	; 0x0a
    16d6:	f3 85       	ldd	r31, Z+11	; 0x0b
    16d8:	e0 2d       	mov	r30, r0
    16da:	19 95       	eicall
    16dc:	2c 01       	movw	r4, r24
    16de:	99 0f       	add	r25, r25
    16e0:	66 08       	sbc	r6, r6
    16e2:	77 08       	sbc	r7, r7
    16e4:	76 2c       	mov	r7, r6
    16e6:	65 2c       	mov	r6, r5
    16e8:	54 2c       	mov	r5, r4
    16ea:	44 24       	eor	r4, r4
    16ec:	88 81       	ld	r24, Y
    16ee:	99 81       	ldd	r25, Y+1	; 0x01
    16f0:	dc 01       	movw	r26, r24
    16f2:	ed 91       	ld	r30, X+
    16f4:	fc 91       	ld	r31, X
    16f6:	02 84       	ldd	r0, Z+10	; 0x0a
    16f8:	f3 85       	ldd	r31, Z+11	; 0x0b
    16fa:	e0 2d       	mov	r30, r0
    16fc:	19 95       	eicall
    16fe:	6c 01       	movw	r12, r24
    1700:	99 0f       	add	r25, r25
    1702:	ee 08       	sbc	r14, r14
    1704:	ff 08       	sbc	r15, r15
    1706:	c4 28       	or	r12, r4
    1708:	d5 28       	or	r13, r5
    170a:	e6 28       	or	r14, r6
    170c:	f7 28       	or	r15, r7
    170e:	88 24       	eor	r8, r8
    1710:	9c 2c       	mov	r9, r12
    1712:	ad 2c       	mov	r10, r13
    1714:	be 2c       	mov	r11, r14
    1716:	88 81       	ld	r24, Y
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	dc 01       	movw	r26, r24
    171c:	ed 91       	ld	r30, X+
    171e:	fc 91       	ld	r31, X
    1720:	02 84       	ldd	r0, Z+10	; 0x0a
    1722:	f3 85       	ldd	r31, Z+11	; 0x0b
    1724:	e0 2d       	mov	r30, r0
    1726:	19 95       	eicall
    1728:	6c 01       	movw	r12, r24
    172a:	99 0f       	add	r25, r25
    172c:	ee 08       	sbc	r14, r14
    172e:	ff 08       	sbc	r15, r15
    1730:	c8 28       	or	r12, r8
    1732:	d9 28       	or	r13, r9
    1734:	ea 28       	or	r14, r10
    1736:	fb 28       	or	r15, r11
    1738:	2d c0       	rjmp	.+90     	; 0x1794 <_ZN15Adafruit_BME2806read24Eh+0x126>
    173a:	8e 85       	ldd	r24, Y+14	; 0x0e
    173c:	8f 3f       	cpi	r24, 0xFF	; 255
    173e:	19 f4       	brne	.+6      	; 0x1746 <_ZN15Adafruit_BME2806read24Eh+0xd8>
    1740:	82 e5       	ldi	r24, 0x52	; 82
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	b2 dd       	rcall	.-1180   	; 0x12aa <_ZN8SPIClass16beginTransactionE11SPISettings>
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	8b 85       	ldd	r24, Y+11	; 0x0b
    174a:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    174e:	61 2f       	mov	r22, r17
    1750:	60 68       	ori	r22, 0x80	; 128
    1752:	ce 01       	movw	r24, r28
    1754:	dc dd       	rcall	.-1096   	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	ce 01       	movw	r24, r28
    175a:	d9 dd       	rcall	.-1102   	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    175c:	c8 2e       	mov	r12, r24
    175e:	d1 2c       	mov	r13, r1
    1760:	e1 2c       	mov	r14, r1
    1762:	f1 2c       	mov	r15, r1
    1764:	fe 2c       	mov	r15, r14
    1766:	ed 2c       	mov	r14, r13
    1768:	dc 2c       	mov	r13, r12
    176a:	cc 24       	eor	r12, r12
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	ce 01       	movw	r24, r28
    1770:	ce dd       	rcall	.-1124   	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    1772:	c8 2a       	or	r12, r24
    1774:	fe 2c       	mov	r15, r14
    1776:	ed 2c       	mov	r14, r13
    1778:	dc 2c       	mov	r13, r12
    177a:	cc 24       	eor	r12, r12
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	ce 01       	movw	r24, r28
    1780:	c6 dd       	rcall	.-1140   	; 0x130e <_ZN15Adafruit_BME2807spixferEh>
    1782:	c8 2a       	or	r12, r24
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	8b 85       	ldd	r24, Y+11	; 0x0b
    1788:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    178c:	8e 85       	ldd	r24, Y+14	; 0x0e
    178e:	8f 3f       	cpi	r24, 0xFF	; 255
    1790:	09 f4       	brne	.+2      	; 0x1794 <_ZN15Adafruit_BME2806read24Eh+0x126>
    1792:	a5 dd       	rcall	.-1206   	; 0x12de <_ZN8SPIClass14endTransactionEv>
    1794:	c7 01       	movw	r24, r14
    1796:	b6 01       	movw	r22, r12
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	cf 90       	pop	r12
    17a6:	bf 90       	pop	r11
    17a8:	af 90       	pop	r10
    17aa:	9f 90       	pop	r9
    17ac:	8f 90       	pop	r8
    17ae:	7f 90       	pop	r7
    17b0:	6f 90       	pop	r6
    17b2:	5f 90       	pop	r5
    17b4:	4f 90       	pop	r4
    17b6:	08 95       	ret

000017b8 <_ZN15Adafruit_BME28016readCoefficientsEv>:
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
    17c0:	68 e8       	ldi	r22, 0x88	; 136
    17c2:	50 df       	rcall	.-352    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	6a e8       	ldi	r22, 0x8A	; 138
    17ca:	ce 01       	movw	r24, r28
    17cc:	4b df       	rcall	.-362    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    17ce:	9a 8b       	std	Y+18, r25	; 0x12
    17d0:	89 8b       	std	Y+17, r24	; 0x11
    17d2:	6c e8       	ldi	r22, 0x8C	; 140
    17d4:	ce 01       	movw	r24, r28
    17d6:	46 df       	rcall	.-372    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    17d8:	9c 8b       	std	Y+20, r25	; 0x14
    17da:	8b 8b       	std	Y+19, r24	; 0x13
    17dc:	6e e8       	ldi	r22, 0x8E	; 142
    17de:	ce 01       	movw	r24, r28
    17e0:	41 df       	rcall	.-382    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    17e2:	9e 8b       	std	Y+22, r25	; 0x16
    17e4:	8d 8b       	std	Y+21, r24	; 0x15
    17e6:	60 e9       	ldi	r22, 0x90	; 144
    17e8:	ce 01       	movw	r24, r28
    17ea:	3c df       	rcall	.-392    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    17ec:	98 8f       	std	Y+24, r25	; 0x18
    17ee:	8f 8b       	std	Y+23, r24	; 0x17
    17f0:	62 e9       	ldi	r22, 0x92	; 146
    17f2:	ce 01       	movw	r24, r28
    17f4:	37 df       	rcall	.-402    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    17f6:	9a 8f       	std	Y+26, r25	; 0x1a
    17f8:	89 8f       	std	Y+25, r24	; 0x19
    17fa:	64 e9       	ldi	r22, 0x94	; 148
    17fc:	ce 01       	movw	r24, r28
    17fe:	32 df       	rcall	.-412    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    1800:	9c 8f       	std	Y+28, r25	; 0x1c
    1802:	8b 8f       	std	Y+27, r24	; 0x1b
    1804:	66 e9       	ldi	r22, 0x96	; 150
    1806:	ce 01       	movw	r24, r28
    1808:	2d df       	rcall	.-422    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    180a:	9e 8f       	std	Y+30, r25	; 0x1e
    180c:	8d 8f       	std	Y+29, r24	; 0x1d
    180e:	68 e9       	ldi	r22, 0x98	; 152
    1810:	ce 01       	movw	r24, r28
    1812:	28 df       	rcall	.-432    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
    1818:	6a e9       	ldi	r22, 0x9A	; 154
    181a:	ce 01       	movw	r24, r28
    181c:	23 df       	rcall	.-442    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    181e:	9a a3       	std	Y+34, r25	; 0x22
    1820:	89 a3       	std	Y+33, r24	; 0x21
    1822:	6c e9       	ldi	r22, 0x9C	; 156
    1824:	ce 01       	movw	r24, r28
    1826:	1e df       	rcall	.-452    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    1828:	9c a3       	std	Y+36, r25	; 0x24
    182a:	8b a3       	std	Y+35, r24	; 0x23
    182c:	6e e9       	ldi	r22, 0x9E	; 158
    182e:	ce 01       	movw	r24, r28
    1830:	19 df       	rcall	.-462    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    1832:	9e a3       	std	Y+38, r25	; 0x26
    1834:	8d a3       	std	Y+37, r24	; 0x25
    1836:	61 ea       	ldi	r22, 0xA1	; 161
    1838:	ce 01       	movw	r24, r28
    183a:	64 de       	rcall	.-824    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    183c:	8f a3       	std	Y+39, r24	; 0x27
    183e:	61 ee       	ldi	r22, 0xE1	; 225
    1840:	ce 01       	movw	r24, r28
    1842:	10 df       	rcall	.-480    	; 0x1664 <_ZN15Adafruit_BME2809read16_LEEh>
    1844:	99 a7       	std	Y+41, r25	; 0x29
    1846:	88 a7       	std	Y+40, r24	; 0x28
    1848:	63 ee       	ldi	r22, 0xE3	; 227
    184a:	ce 01       	movw	r24, r28
    184c:	5b de       	rcall	.-842    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    184e:	8a a7       	std	Y+42, r24	; 0x2a
    1850:	64 ee       	ldi	r22, 0xE4	; 228
    1852:	ce 01       	movw	r24, r28
    1854:	57 de       	rcall	.-850    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    1856:	18 2f       	mov	r17, r24
    1858:	65 ee       	ldi	r22, 0xE5	; 229
    185a:	ce 01       	movw	r24, r28
    185c:	53 de       	rcall	.-858    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    185e:	90 e1       	ldi	r25, 0x10	; 16
    1860:	19 9f       	mul	r17, r25
    1862:	90 01       	movw	r18, r0
    1864:	11 24       	eor	r1, r1
    1866:	8f 70       	andi	r24, 0x0F	; 15
    1868:	28 2b       	or	r18, r24
    186a:	3c a7       	std	Y+44, r19	; 0x2c
    186c:	2b a7       	std	Y+43, r18	; 0x2b
    186e:	66 ee       	ldi	r22, 0xE6	; 230
    1870:	ce 01       	movw	r24, r28
    1872:	48 de       	rcall	.-880    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    1874:	18 2f       	mov	r17, r24
    1876:	65 ee       	ldi	r22, 0xE5	; 229
    1878:	ce 01       	movw	r24, r28
    187a:	44 de       	rcall	.-888    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    187c:	90 e1       	ldi	r25, 0x10	; 16
    187e:	19 9f       	mul	r17, r25
    1880:	90 01       	movw	r18, r0
    1882:	11 24       	eor	r1, r1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	44 e0       	ldi	r20, 0x04	; 4
    1888:	95 95       	asr	r25
    188a:	87 95       	ror	r24
    188c:	4a 95       	dec	r20
    188e:	e1 f7       	brne	.-8      	; 0x1888 <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
    1890:	82 2b       	or	r24, r18
    1892:	93 2b       	or	r25, r19
    1894:	9e a7       	std	Y+46, r25	; 0x2e
    1896:	8d a7       	std	Y+45, r24	; 0x2d
    1898:	67 ee       	ldi	r22, 0xE7	; 231
    189a:	ce 01       	movw	r24, r28
    189c:	33 de       	rcall	.-922    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	08 95       	ret

000018a8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    18a8:	63 ef       	ldi	r22, 0xF3	; 243
    18aa:	2c de       	rcall	.-936    	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	08 95       	ret

000018b0 <_ZN15Adafruit_BME2804initEv>:
    18b0:	cf 92       	push	r12
    18b2:	ef 92       	push	r14
    18b4:	0f 93       	push	r16
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	ec 01       	movw	r28, r24
    18bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18be:	8f 3f       	cpi	r24, 0xFF	; 255
    18c0:	29 f4       	brne	.+10     	; 0x18cc <_ZN15Adafruit_BME2804initEv+0x1c>
    18c2:	88 81       	ld	r24, Y
    18c4:	99 81       	ldd	r25, Y+1	; 0x01
    18c6:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN7TwoWire5beginEv>
    18ca:	18 c0       	rjmp	.+48     	; 0x18fc <_ZN15Adafruit_BME2804initEv+0x4c>
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18d6:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>
    18da:	8e 85       	ldd	r24, Y+14	; 0x0e
    18dc:	8f 3f       	cpi	r24, 0xFF	; 255
    18de:	19 f4       	brne	.+6      	; 0x18e6 <_ZN15Adafruit_BME2804initEv+0x36>
    18e0:	0e 94 40 33 	call	0x6680	; 0x6680 <_ZN8SPIClass5beginEv>
    18e4:	0b c0       	rjmp	.+22     	; 0x18fc <_ZN15Adafruit_BME2804initEv+0x4c>
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    18f0:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>
    18fc:	60 ed       	ldi	r22, 0xD0	; 208
    18fe:	ce 01       	movw	r24, r28
    1900:	01 de       	rcall	.-1022   	; 0x1504 <_ZN15Adafruit_BME2805read8Eh>
    1902:	80 36       	cpi	r24, 0x60	; 96
    1904:	29 f5       	brne	.+74     	; 0x1950 <_ZN15Adafruit_BME2804initEv+0xa0>
    1906:	46 eb       	ldi	r20, 0xB6	; 182
    1908:	60 ee       	ldi	r22, 0xE0	; 224
    190a:	ce 01       	movw	r24, r28
    190c:	47 dd       	rcall	.-1394   	; 0x139c <_ZN15Adafruit_BME2806write8Ehh>
    190e:	6c e2       	ldi	r22, 0x2C	; 44
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <delay>
    191a:	ce 01       	movw	r24, r28
    191c:	c5 df       	rcall	.-118    	; 0x18a8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
    191e:	88 23       	and	r24, r24
    1920:	29 f0       	breq	.+10     	; 0x192c <_ZN15Adafruit_BME2804initEv+0x7c>
    1922:	64 e6       	ldi	r22, 0x64	; 100
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	f5 cf       	rjmp	.-22     	; 0x1916 <_ZN15Adafruit_BME2804initEv+0x66>
    192c:	ce 01       	movw	r24, r28
    192e:	44 df       	rcall	.-376    	; 0x17b8 <_ZN15Adafruit_BME28016readCoefficientsEv>
    1930:	c1 2c       	mov	r12, r1
    1932:	e1 2c       	mov	r14, r1
    1934:	05 e0       	ldi	r16, 0x05	; 5
    1936:	25 e0       	ldi	r18, 0x05	; 5
    1938:	45 e0       	ldi	r20, 0x05	; 5
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	ce 01       	movw	r24, r28
    193e:	7b dd       	rcall	.-1290   	; 0x1436 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    1940:	64 e6       	ldi	r22, 0x64	; 100
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <delay>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <_ZN15Adafruit_BME2804initEv+0xa2>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	0f 91       	pop	r16
    1958:	ef 90       	pop	r14
    195a:	cf 90       	pop	r12
    195c:	08 95       	ret

0000195e <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
    195e:	27 e7       	ldi	r18, 0x77	; 119
    1960:	fc 01       	movw	r30, r24
    1962:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
    1964:	28 e6       	ldi	r18, 0x68	; 104
    1966:	37 e0       	ldi	r19, 0x07	; 7
    1968:	31 83       	std	Z+1, r19	; 0x01
    196a:	20 83       	st	Z, r18
	return init();
    196c:	a1 cf       	rjmp	.-190    	; 0x18b0 <_ZN15Adafruit_BME2804initEv>

0000196e <_ZN15Adafruit_BME28015readTemperatureEv>:
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
    196e:	8f 92       	push	r8
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    1988:	6a ef       	ldi	r22, 0xFA	; 250
    198a:	71 de       	rcall	.-798    	; 0x166e <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
    198c:	61 15       	cp	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	20 e8       	ldi	r18, 0x80	; 128
    1992:	82 07       	cpc	r24, r18
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <_ZN15Adafruit_BME28015readTemperatureEv+0x2c>
    1998:	6f c0       	rjmp	.+222    	; 0x1a78 <_ZN15Adafruit_BME28015readTemperatureEv+0x10a>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
    199a:	0f 85       	ldd	r16, Y+15	; 0x0f
    199c:	18 89       	ldd	r17, Y+16	; 0x10
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
    19a2:	c7 2e       	mov	r12, r23
    19a4:	d8 2e       	mov	r13, r24
    19a6:	e9 2e       	mov	r14, r25
    19a8:	ff 24       	eor	r15, r15
    19aa:	e7 fc       	sbrc	r14, 7
    19ac:	fa 94       	dec	r15
    19ae:	c0 1a       	sub	r12, r16
    19b0:	d1 0a       	sbc	r13, r17
    19b2:	e2 0a       	sbc	r14, r18
    19b4:	f3 0a       	sbc	r15, r19
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	57 e0       	ldi	r21, 0x07	; 7
    19bc:	b5 95       	asr	r27
    19be:	a7 95       	ror	r26
    19c0:	97 95       	ror	r25
    19c2:	87 95       	ror	r24
    19c4:	5a 95       	dec	r21
    19c6:	d1 f7       	brne	.-12     	; 0x19bc <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    19c8:	00 0f       	add	r16, r16
    19ca:	11 1f       	adc	r17, r17
    19cc:	22 1f       	adc	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	4c 01       	movw	r8, r24
    19d2:	5d 01       	movw	r10, r26
    19d4:	80 1a       	sub	r8, r16
    19d6:	91 0a       	sbc	r9, r17
    19d8:	a2 0a       	sbc	r10, r18
    19da:	b3 0a       	sbc	r11, r19
    19dc:	a5 01       	movw	r20, r10
    19de:	94 01       	movw	r18, r8
    19e0:	a9 89       	ldd	r26, Y+17	; 0x11
    19e2:	ba 89       	ldd	r27, Y+18	; 0x12
    19e4:	0e 94 1d 34 	call	0x683a	; 0x683a <__mulshisi3>
    19e8:	4b 01       	movw	r8, r22
    19ea:	5c 01       	movw	r10, r24
    19ec:	7b e0       	ldi	r23, 0x0B	; 11
    19ee:	b5 94       	asr	r11
    19f0:	a7 94       	ror	r10
    19f2:	97 94       	ror	r9
    19f4:	87 94       	ror	r8
    19f6:	7a 95       	dec	r23
    19f8:	d1 f7       	brne	.-12     	; 0x19ee <_ZN15Adafruit_BME28015readTemperatureEv+0x80>
    19fa:	a7 01       	movw	r20, r14
    19fc:	96 01       	movw	r18, r12
    19fe:	c7 01       	movw	r24, r14
    1a00:	b6 01       	movw	r22, r12
    1a02:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	ec e0       	ldi	r30, 0x0C	; 12
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	37 95       	ror	r19
    1a12:	27 95       	ror	r18
    1a14:	ea 95       	dec	r30
    1a16:	d1 f7       	brne	.-12     	; 0x1a0c <_ZN15Adafruit_BME28015readTemperatureEv+0x9e>
    1a18:	ab 89       	ldd	r26, Y+19	; 0x13
    1a1a:	bc 89       	ldd	r27, Y+20	; 0x14
    1a1c:	0e 94 1d 34 	call	0x683a	; 0x683a <__mulshisi3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	fe e0       	ldi	r31, 0x0E	; 14
    1a26:	b5 95       	asr	r27
    1a28:	a7 95       	ror	r26
    1a2a:	97 95       	ror	r25
    1a2c:	87 95       	ror	r24
    1a2e:	fa 95       	dec	r31
    1a30:	d1 f7       	brne	.-12     	; 0x1a26 <_ZN15Adafruit_BME28015readTemperatureEv+0xb8>
    1a32:	a5 01       	movw	r20, r10
    1a34:	94 01       	movw	r18, r8
    1a36:	28 0f       	add	r18, r24
    1a38:	39 1f       	adc	r19, r25
    1a3a:	4a 1f       	adc	r20, r26
    1a3c:	5b 1f       	adc	r21, r27
    1a3e:	2f 83       	std	Y+7, r18	; 0x07
    1a40:	38 87       	std	Y+8, r19	; 0x08
    1a42:	49 87       	std	Y+9, r20	; 0x09
    1a44:	5a 87       	std	Y+10, r21	; 0x0a

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
    1a46:	a5 e0       	ldi	r26, 0x05	; 5
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	80 58       	subi	r24, 0x80	; 128
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	af 4f       	sbci	r26, 0xFF	; 255
    1a58:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5a:	69 2f       	mov	r22, r25
    1a5c:	7a 2f       	mov	r23, r26
    1a5e:	8b 2f       	mov	r24, r27
    1a60:	99 27       	eor	r25, r25
    1a62:	87 fd       	sbrc	r24, 7
    1a64:	9a 95       	dec	r25
    1a66:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	48 ec       	ldi	r20, 0xC8	; 200
    1a70:	52 e4       	ldi	r21, 0x42	; 66
    1a72:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <_ZN15Adafruit_BME28015readTemperatureEv+0x112>
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	80 ec       	ldi	r24, 0xC0	; 192
    1a7e:	9f e7       	ldi	r25, 0x7F	; 127

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	bf 90       	pop	r11
    1a92:	af 90       	pop	r10
    1a94:	9f 90       	pop	r9
    1a96:	8f 90       	pop	r8
    1a98:	08 95       	ret

00001a9a <_ZN15Adafruit_BME28012readPressureEv>:
/**************************************************************************/
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
    1a9a:	2f 92       	push	r2
    1a9c:	3f 92       	push	r3
    1a9e:	4f 92       	push	r4
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	6a 97       	sbiw	r28, 0x1a	; 26
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad0:	89 8f       	std	Y+25, r24	; 0x19
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
    1ad2:	4d df       	rcall	.-358    	; 0x196e <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    1ad4:	67 ef       	ldi	r22, 0xF7	; 247
    1ad6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ad8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ada:	c9 dd       	rcall	.-1134   	; 0x166e <_ZN15Adafruit_BME2806read24Eh>
    1adc:	6d 87       	std	Y+13, r22	; 0x0d
    1ade:	7e 87       	std	Y+14, r23	; 0x0e
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
    1ae4:	61 15       	cp	r22, r1
    1ae6:	71 05       	cpc	r23, r1
    1ae8:	80 48       	sbci	r24, 0x80	; 128
    1aea:	91 05       	cpc	r25, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_ZN15Adafruit_BME28012readPressureEv+0x56>
    1aee:	b3 c1       	rjmp	.+870    	; 0x1e56 <_ZN15Adafruit_BME28012readPressureEv+0x3bc>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    1af0:	e9 8d       	ldd	r30, Y+25	; 0x19
    1af2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1af4:	87 81       	ldd	r24, Z+7	; 0x07
    1af6:	90 85       	ldd	r25, Z+8	; 0x08
    1af8:	a1 85       	ldd	r26, Z+9	; 0x09
    1afa:	b2 85       	ldd	r27, Z+10	; 0x0a
    1afc:	6c 01       	movw	r12, r24
    1afe:	7d 01       	movw	r14, r26
    1b00:	ff 0c       	add	r15, r15
    1b02:	cc 08       	sbc	r12, r12
    1b04:	dc 2c       	mov	r13, r12
    1b06:	76 01       	movw	r14, r12
    1b08:	9c 01       	movw	r18, r24
    1b0a:	ad 01       	movw	r20, r26
    1b0c:	6c 2d       	mov	r22, r12
    1b0e:	7c 2d       	mov	r23, r12
    1b10:	8c 2d       	mov	r24, r12
    1b12:	9c 2d       	mov	r25, r12
    1b14:	34 5f       	subi	r19, 0xF4	; 244
    1b16:	41 40       	sbci	r20, 0x01	; 1
    1b18:	51 09       	sbc	r21, r1
    1b1a:	61 09       	sbc	r22, r1
    1b1c:	71 09       	sbc	r23, r1
    1b1e:	81 09       	sbc	r24, r1
    1b20:	91 09       	sbc	r25, r1
    1b22:	29 83       	std	Y+1, r18	; 0x01
    1b24:	3a 83       	std	Y+2, r19	; 0x02
    1b26:	4b 83       	std	Y+3, r20	; 0x03
    1b28:	5c 83       	std	Y+4, r21	; 0x04
    1b2a:	6d 83       	std	Y+5, r22	; 0x05
    1b2c:	7e 83       	std	Y+6, r23	; 0x06
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
    1b30:	98 87       	std	Y+8, r25	; 0x08
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    1b32:	59 01       	movw	r10, r18
    1b34:	6a 01       	movw	r12, r20
    1b36:	7b 01       	movw	r14, r22
    1b38:	8c 01       	movw	r16, r24
    1b3a:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1b3e:	29 87       	std	Y+9, r18	; 0x09
    1b40:	3a 87       	std	Y+10, r19	; 0x0a
    1b42:	4b 87       	std	Y+11, r20	; 0x0b
    1b44:	5c 87       	std	Y+12, r21	; 0x0c
    1b46:	6d 8b       	std	Y+21, r22	; 0x15
    1b48:	7e 8b       	std	Y+22, r23	; 0x16
    1b4a:	8f 8b       	std	Y+23, r24	; 0x17
    1b4c:	98 8f       	std	Y+24, r25	; 0x18
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    1b4e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b50:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b52:	58 96       	adiw	r26, 0x18	; 24
    1b54:	3c 91       	ld	r19, X
    1b56:	58 97       	sbiw	r26, 0x18	; 24
    1b58:	57 96       	adiw	r26, 0x17	; 23
    1b5a:	2c 91       	ld	r18, X
    1b5c:	93 2f       	mov	r25, r19
    1b5e:	99 0f       	add	r25, r25
    1b60:	99 0b       	sbc	r25, r25
    1b62:	49 2f       	mov	r20, r25
    1b64:	59 2f       	mov	r21, r25
    1b66:	69 2f       	mov	r22, r25
    1b68:	79 2f       	mov	r23, r25
    1b6a:	89 2f       	mov	r24, r25
    1b6c:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1b70:	0c e0       	ldi	r16, 0x0C	; 12
    1b72:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__ashldi3>
    1b76:	72 2e       	mov	r7, r18
    1b78:	83 2e       	mov	r8, r19
    1b7a:	94 2e       	mov	r9, r20
    1b7c:	25 2e       	mov	r2, r21
    1b7e:	36 2e       	mov	r3, r22
    1b80:	67 2e       	mov	r6, r23
    1b82:	58 2e       	mov	r5, r24
    1b84:	49 2e       	mov	r4, r25
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
    1b86:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b88:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b8a:	32 8d       	ldd	r19, Z+26	; 0x1a
    1b8c:	21 8d       	ldd	r18, Z+25	; 0x19
    1b8e:	93 2f       	mov	r25, r19
    1b90:	99 0f       	add	r25, r25
    1b92:	99 0b       	sbc	r25, r25
    1b94:	a9 84       	ldd	r10, Y+9	; 0x09
    1b96:	ba 84       	ldd	r11, Y+10	; 0x0a
    1b98:	cb 84       	ldd	r12, Y+11	; 0x0b
    1b9a:	dc 84       	ldd	r13, Y+12	; 0x0c
    1b9c:	ed 88       	ldd	r14, Y+21	; 0x15
    1b9e:	fe 88       	ldd	r15, Y+22	; 0x16
    1ba0:	0f 89       	ldd	r16, Y+23	; 0x17
    1ba2:	18 8d       	ldd	r17, Y+24	; 0x18
    1ba4:	49 2f       	mov	r20, r25
    1ba6:	59 2f       	mov	r21, r25
    1ba8:	69 2f       	mov	r22, r25
    1baa:	79 2f       	mov	r23, r25
    1bac:	89 2f       	mov	r24, r25
    1bae:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1bb2:	08 e0       	ldi	r16, 0x08	; 8
    1bb4:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__ashrdi3>
    1bb8:	a7 2c       	mov	r10, r7
    1bba:	b8 2c       	mov	r11, r8
    1bbc:	c9 2c       	mov	r12, r9
    1bbe:	d2 2c       	mov	r13, r2
    1bc0:	e3 2c       	mov	r14, r3
    1bc2:	f6 2c       	mov	r15, r6
    1bc4:	05 2d       	mov	r16, r5
    1bc6:	14 2d       	mov	r17, r4
    1bc8:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__adddi3>
    1bcc:	70 58       	subi	r23, 0x80	; 128
    1bce:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bd4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bd6:	55 96       	adiw	r26, 0x15	; 21
    1bd8:	2d 90       	ld	r2, X+
    1bda:	3c 90       	ld	r3, X
    1bdc:	56 97       	sbiw	r26, 0x16	; 22
    1bde:	51 01       	movw	r10, r2
    1be0:	c1 2c       	mov	r12, r1
    1be2:	d1 2c       	mov	r13, r1
    1be4:	e1 2c       	mov	r14, r1
    1be6:	f1 2c       	mov	r15, r1
    1be8:	00 e0       	ldi	r16, 0x00	; 0
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1bf0:	01 e2       	ldi	r16, 0x21	; 33
    1bf2:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__ashrdi3>
    1bf6:	32 2e       	mov	r3, r18
    1bf8:	23 2e       	mov	r2, r19
    1bfa:	49 8b       	std	Y+17, r20	; 0x11
    1bfc:	5a 8b       	std	Y+18, r21	; 0x12
    1bfe:	6b 8b       	std	Y+19, r22	; 0x13
    1c00:	47 2e       	mov	r4, r23
    1c02:	58 2e       	mov	r5, r24
    1c04:	9c 8b       	std	Y+20, r25	; 0x14

    if (var1 == 0) {
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	0e 94 8d 35 	call	0x6b1a	; 0x6b1a <__cmpdi2_s8>
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <_ZN15Adafruit_BME28012readPressureEv+0x176>
    1c0e:	28 c1       	rjmp	.+592    	; 0x1e60 <_ZN15Adafruit_BME28012readPressureEv+0x3c6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    1c10:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c12:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c14:	30 a1       	ldd	r19, Z+32	; 0x20
    1c16:	27 8d       	ldd	r18, Z+31	; 0x1f
    1c18:	93 2f       	mov	r25, r19
    1c1a:	99 0f       	add	r25, r25
    1c1c:	99 0b       	sbc	r25, r25
    1c1e:	a9 84       	ldd	r10, Y+9	; 0x09
    1c20:	ba 84       	ldd	r11, Y+10	; 0x0a
    1c22:	cb 84       	ldd	r12, Y+11	; 0x0b
    1c24:	dc 84       	ldd	r13, Y+12	; 0x0c
    1c26:	ed 88       	ldd	r14, Y+21	; 0x15
    1c28:	fe 88       	ldd	r15, Y+22	; 0x16
    1c2a:	0f 89       	ldd	r16, Y+23	; 0x17
    1c2c:	18 8d       	ldd	r17, Y+24	; 0x18
    1c2e:	49 2f       	mov	r20, r25
    1c30:	59 2f       	mov	r21, r25
    1c32:	69 2f       	mov	r22, r25
    1c34:	79 2f       	mov	r23, r25
    1c36:	89 2f       	mov	r24, r25
    1c38:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1c3c:	29 87       	std	Y+9, r18	; 0x09
    1c3e:	3a 87       	std	Y+10, r19	; 0x0a
    1c40:	4b 87       	std	Y+11, r20	; 0x0b
    1c42:	75 2e       	mov	r7, r21
    1c44:	4b 01       	movw	r8, r22
    1c46:	8c 87       	std	Y+12, r24	; 0x0c
    1c48:	69 2e       	mov	r6, r25
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    1c4a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c4c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c4e:	5e 96       	adiw	r26, 0x1e	; 30
    1c50:	3c 91       	ld	r19, X
    1c52:	5e 97       	sbiw	r26, 0x1e	; 30
    1c54:	5d 96       	adiw	r26, 0x1d	; 29
    1c56:	2c 91       	ld	r18, X
    1c58:	93 2f       	mov	r25, r19
    1c5a:	99 0f       	add	r25, r25
    1c5c:	99 0b       	sbc	r25, r25
    1c5e:	a9 80       	ldd	r10, Y+1	; 0x01
    1c60:	ba 80       	ldd	r11, Y+2	; 0x02
    1c62:	cb 80       	ldd	r12, Y+3	; 0x03
    1c64:	dc 80       	ldd	r13, Y+4	; 0x04
    1c66:	ed 80       	ldd	r14, Y+5	; 0x05
    1c68:	fe 80       	ldd	r15, Y+6	; 0x06
    1c6a:	0f 81       	ldd	r16, Y+7	; 0x07
    1c6c:	18 85       	ldd	r17, Y+8	; 0x08
    1c6e:	49 2f       	mov	r20, r25
    1c70:	59 2f       	mov	r21, r25
    1c72:	69 2f       	mov	r22, r25
    1c74:	79 2f       	mov	r23, r25
    1c76:	89 2f       	mov	r24, r25
    1c78:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1c7c:	01 e1       	ldi	r16, 0x11	; 17
    1c7e:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__ashldi3>
    1c82:	a9 84       	ldd	r10, Y+9	; 0x09
    1c84:	ba 84       	ldd	r11, Y+10	; 0x0a
    1c86:	cb 84       	ldd	r12, Y+11	; 0x0b
    1c88:	d7 2c       	mov	r13, r7
    1c8a:	74 01       	movw	r14, r8
    1c8c:	0c 85       	ldd	r16, Y+12	; 0x0c
    1c8e:	16 2d       	mov	r17, r6
    1c90:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__adddi3>
    1c94:	59 01       	movw	r10, r18
    1c96:	6a 01       	movw	r12, r20
    1c98:	7b 01       	movw	r14, r22
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	19 2f       	mov	r17, r25

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    1c9e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ca0:	5e 85       	ldd	r21, Y+14	; 0x0e
    1ca2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ca4:	78 89       	ldd	r23, Y+16	; 0x10
    1ca6:	84 e0       	ldi	r24, 0x04	; 4
    1ca8:	75 95       	asr	r23
    1caa:	67 95       	ror	r22
    1cac:	57 95       	ror	r21
    1cae:	47 95       	ror	r20
    1cb0:	8a 95       	dec	r24
    1cb2:	d1 f7       	brne	.-12     	; 0x1ca8 <_ZN15Adafruit_BME28012readPressureEv+0x20e>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e1       	ldi	r26, 0x10	; 16
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	84 1b       	sub	r24, r20
    1cbe:	95 0b       	sbc	r25, r21
    1cc0:	a6 0b       	sbc	r26, r22
    1cc2:	b7 0b       	sbc	r27, r23
    1cc4:	3c 01       	movw	r6, r24
    1cc6:	4d 01       	movw	r8, r26
    1cc8:	99 0c       	add	r9, r9
    1cca:	66 08       	sbc	r6, r6
    1ccc:	76 2c       	mov	r7, r6
    1cce:	43 01       	movw	r8, r6
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	ad 01       	movw	r20, r26
    1cd4:	66 2d       	mov	r22, r6
    1cd6:	76 2d       	mov	r23, r6
    1cd8:	86 2d       	mov	r24, r6
    1cda:	96 2d       	mov	r25, r6
    1cdc:	0f e1       	ldi	r16, 0x1F	; 31
    1cde:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__ashldi3>
    1ce2:	49 01       	movw	r8, r18
    1ce4:	3a 01       	movw	r6, r20
    1ce6:	b6 2f       	mov	r27, r22
    1ce8:	a7 2f       	mov	r26, r23
    1cea:	8a 83       	std	Y+2, r24	; 0x02
    1cec:	9b 83       	std	Y+3, r25	; 0x03
    1cee:	e9 8d       	ldd	r30, Y+25	; 0x19
    1cf0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1cf2:	34 8d       	ldd	r19, Z+28	; 0x1c
    1cf4:	23 8d       	ldd	r18, Z+27	; 0x1b
    1cf6:	93 2f       	mov	r25, r19
    1cf8:	99 0f       	add	r25, r25
    1cfa:	99 0b       	sbc	r25, r25
    1cfc:	49 2f       	mov	r20, r25
    1cfe:	59 2f       	mov	r21, r25
    1d00:	69 2f       	mov	r22, r25
    1d02:	79 2f       	mov	r23, r25
    1d04:	89 2f       	mov	r24, r25
    1d06:	03 e2       	ldi	r16, 0x23	; 35
    1d08:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__ashldi3>
    1d0c:	09 81       	ldd	r16, Y+1	; 0x01
    1d0e:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__adddi3>
    1d12:	59 01       	movw	r10, r18
    1d14:	6a 01       	movw	r12, r20
    1d16:	7b 01       	movw	r14, r22
    1d18:	8c 01       	movw	r16, r24
    1d1a:	94 01       	movw	r18, r8
    1d1c:	a3 01       	movw	r20, r6
    1d1e:	6b 2f       	mov	r22, r27
    1d20:	7a 2f       	mov	r23, r26
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	9b 81       	ldd	r25, Y+3	; 0x03
    1d26:	0e 94 84 35 	call	0x6b08	; 0x6b08 <__subdi3>
    1d2a:	e5 e3       	ldi	r30, 0x35	; 53
    1d2c:	ae 2e       	mov	r10, r30
    1d2e:	fc e0       	ldi	r31, 0x0C	; 12
    1d30:	bf 2e       	mov	r11, r31
    1d32:	c1 2c       	mov	r12, r1
    1d34:	d1 2c       	mov	r13, r1
    1d36:	e1 2c       	mov	r14, r1
    1d38:	f1 2c       	mov	r15, r1
    1d3a:	00 e0       	ldi	r16, 0x00	; 0
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1d42:	a3 2c       	mov	r10, r3
    1d44:	b2 2c       	mov	r11, r2
    1d46:	c9 88       	ldd	r12, Y+17	; 0x11
    1d48:	da 88       	ldd	r13, Y+18	; 0x12
    1d4a:	eb 88       	ldd	r14, Y+19	; 0x13
    1d4c:	f4 2c       	mov	r15, r4
    1d4e:	05 2d       	mov	r16, r5
    1d50:	1c 89       	ldd	r17, Y+20	; 0x14
    1d52:	0e 94 76 34 	call	0x68ec	; 0x68ec <__divdi3>
    1d56:	29 83       	std	Y+1, r18	; 0x01
    1d58:	3a 83       	std	Y+2, r19	; 0x02
    1d5a:	4b 83       	std	Y+3, r20	; 0x03
    1d5c:	5c 83       	std	Y+4, r21	; 0x04
    1d5e:	6d 83       	std	Y+5, r22	; 0x05
    1d60:	7e 83       	std	Y+6, r23	; 0x06
    1d62:	8f 83       	std	Y+7, r24	; 0x07
    1d64:	98 87       	std	Y+8, r25	; 0x08
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    1d66:	0d e0       	ldi	r16, 0x0D	; 13
    1d68:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__ashrdi3>
    1d6c:	92 2e       	mov	r9, r18
    1d6e:	83 2e       	mov	r8, r19
    1d70:	74 2e       	mov	r7, r20
    1d72:	65 2e       	mov	r6, r21
    1d74:	56 2e       	mov	r5, r22
    1d76:	47 2e       	mov	r4, r23
    1d78:	38 2e       	mov	r3, r24
    1d7a:	29 2e       	mov	r2, r25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    1d7c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d7e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d80:	96 96       	adiw	r26, 0x26	; 38
    1d82:	3c 91       	ld	r19, X
    1d84:	96 97       	sbiw	r26, 0x26	; 38
    1d86:	95 96       	adiw	r26, 0x25	; 37
    1d88:	2c 91       	ld	r18, X
    1d8a:	93 2f       	mov	r25, r19
    1d8c:	99 0f       	add	r25, r25
    1d8e:	99 0b       	sbc	r25, r25
    1d90:	a9 2c       	mov	r10, r9
    1d92:	b8 2c       	mov	r11, r8
    1d94:	c7 2c       	mov	r12, r7
    1d96:	d6 2c       	mov	r13, r6
    1d98:	e5 2c       	mov	r14, r5
    1d9a:	f4 2c       	mov	r15, r4
    1d9c:	03 2d       	mov	r16, r3
    1d9e:	12 2d       	mov	r17, r2
    1da0:	49 2f       	mov	r20, r25
    1da2:	59 2f       	mov	r21, r25
    1da4:	69 2f       	mov	r22, r25
    1da6:	79 2f       	mov	r23, r25
    1da8:	89 2f       	mov	r24, r25
    1daa:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1dae:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1db2:	09 e1       	ldi	r16, 0x19	; 25
    1db4:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__ashrdi3>
    1db8:	a9 80       	ldd	r10, Y+1	; 0x01
    1dba:	ba 80       	ldd	r11, Y+2	; 0x02
    1dbc:	cb 80       	ldd	r12, Y+3	; 0x03
    1dbe:	dc 80       	ldd	r13, Y+4	; 0x04
    1dc0:	ed 80       	ldd	r14, Y+5	; 0x05
    1dc2:	fe 80       	ldd	r15, Y+6	; 0x06
    1dc4:	0f 81       	ldd	r16, Y+7	; 0x07
    1dc6:	18 85       	ldd	r17, Y+8	; 0x08
    1dc8:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__adddi3>
    1dcc:	19 01       	movw	r2, r18
    1dce:	2a 01       	movw	r4, r20
    1dd0:	3b 01       	movw	r6, r22
    1dd2:	4c 01       	movw	r8, r24
    1dd4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1dd6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dd8:	34 a1       	ldd	r19, Z+36	; 0x24
    1dda:	23 a1       	ldd	r18, Z+35	; 0x23
    1ddc:	93 2f       	mov	r25, r19
    1dde:	99 0f       	add	r25, r25
    1de0:	99 0b       	sbc	r25, r25
    1de2:	49 2f       	mov	r20, r25
    1de4:	59 2f       	mov	r21, r25
    1de6:	69 2f       	mov	r22, r25
    1de8:	79 2f       	mov	r23, r25
    1dea:	89 2f       	mov	r24, r25
    1dec:	0e 94 23 34 	call	0x6846	; 0x6846 <__muldi3>
    1df0:	03 e1       	ldi	r16, 0x13	; 19
    1df2:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__ashrdi3>
    1df6:	59 01       	movw	r10, r18
    1df8:	6a 01       	movw	r12, r20
    1dfa:	7b 01       	movw	r14, r22
    1dfc:	8c 01       	movw	r16, r24
    1dfe:	91 01       	movw	r18, r2
    1e00:	a2 01       	movw	r20, r4
    1e02:	b3 01       	movw	r22, r6
    1e04:	c4 01       	movw	r24, r8
    1e06:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__adddi3>
    1e0a:	08 e0       	ldi	r16, 0x08	; 8
    1e0c:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__ashrdi3>
    1e10:	59 01       	movw	r10, r18
    1e12:	6a 01       	movw	r12, r20
    1e14:	7b 01       	movw	r14, r22
    1e16:	e8 2f       	mov	r30, r24
    1e18:	19 2f       	mov	r17, r25
    return (float)p/256;
    1e1a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e1c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e1e:	92 96       	adiw	r26, 0x22	; 34
    1e20:	3c 91       	ld	r19, X
    1e22:	92 97       	sbiw	r26, 0x22	; 34
    1e24:	91 96       	adiw	r26, 0x21	; 33
    1e26:	2c 91       	ld	r18, X
    1e28:	93 2f       	mov	r25, r19
    1e2a:	99 0f       	add	r25, r25
    1e2c:	99 0b       	sbc	r25, r25
    1e2e:	49 2f       	mov	r20, r25
    1e30:	59 2f       	mov	r21, r25
    1e32:	69 2f       	mov	r22, r25
    1e34:	79 2f       	mov	r23, r25
    1e36:	89 2f       	mov	r24, r25
    1e38:	04 e0       	ldi	r16, 0x04	; 4
    1e3a:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__ashldi3>
    1e3e:	0e 2f       	mov	r16, r30
    1e40:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__adddi3>
    1e44:	0e 94 08 1b 	call	0x3610	; 0x3610 <__floatdisf>
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5b e3       	ldi	r21, 0x3B	; 59
    1e50:	0e 94 10 1c 	call	0x3820	; 0x3820 <__mulsf3>
    1e54:	08 c0       	rjmp	.+16     	; 0x1e66 <_ZN15Adafruit_BME28012readPressureEv+0x3cc>

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	80 ec       	ldi	r24, 0xC0	; 192
    1e5c:	9f e7       	ldi	r25, 0x7F	; 127
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <_ZN15Adafruit_BME28012readPressureEv+0x3cc>
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	cb 01       	movw	r24, r22
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
    1e66:	6a 96       	adiw	r28, 0x1a	; 26
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	9f 90       	pop	r9
    1e88:	8f 90       	pop	r8
    1e8a:	7f 90       	pop	r7
    1e8c:	6f 90       	pop	r6
    1e8e:	5f 90       	pop	r5
    1e90:	4f 90       	pop	r4
    1e92:	3f 90       	pop	r3
    1e94:	2f 90       	pop	r2
    1e96:	08 95       	ret

00001e98 <_ZN15Adafruit_BME28012readHumidityEv>:
/**************************************************************************/
/*!
    @brief  Returns the humidity from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	ec 01       	movw	r28, r24
    readTemperature(); // must be done first to get t_fine
    1eb6:	5b dd       	rcall	.-1354   	; 0x196e <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    1eb8:	6d ef       	ldi	r22, 0xFD	; 253
    1eba:	ce 01       	movw	r24, r28
    1ebc:	6e db       	rcall	.-2340   	; 0x159a <_ZN15Adafruit_BME2806read16Eh>
    1ebe:	a0 e0       	ldi	r26, 0x00	; 0
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
    1ec2:	81 15       	cp	r24, r1
    1ec4:	20 e8       	ldi	r18, 0x80	; 128
    1ec6:	92 07       	cpc	r25, r18
    1ec8:	a1 05       	cpc	r26, r1
    1eca:	b1 05       	cpc	r27, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <_ZN15Adafruit_BME28012readHumidityEv+0x38>
    1ece:	cd c0       	rjmp	.+410    	; 0x206a <_ZN15Adafruit_BME28012readHumidityEv+0x1d2>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
    1ed0:	8f 80       	ldd	r8, Y+7	; 0x07
    1ed2:	98 84       	ldd	r9, Y+8	; 0x08
    1ed4:	a9 84       	ldd	r10, Y+9	; 0x09
    1ed6:	ba 84       	ldd	r11, Y+10	; 0x0a
    1ed8:	3c e2       	ldi	r19, 0x2C	; 44
    1eda:	93 1a       	sub	r9, r19
    1edc:	31 e0       	ldi	r19, 0x01	; 1
    1ede:	a3 0a       	sbc	r10, r19
    1ee0:	b1 08       	sbc	r11, r1

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
    1ee2:	3e e0       	ldi	r19, 0x0E	; 14
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	aa 1f       	adc	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	3a 95       	dec	r19
    1eee:	d1 f7       	brne	.-12     	; 0x1ee4 <_ZN15Adafruit_BME28012readHumidityEv+0x4c>
    1ef0:	4b a5       	ldd	r20, Y+43	; 0x2b
    1ef2:	5c a5       	ldd	r21, Y+44	; 0x2c
    1ef4:	05 2e       	mov	r0, r21
    1ef6:	00 0c       	add	r0, r0
    1ef8:	66 0b       	sbc	r22, r22
    1efa:	77 0b       	sbc	r23, r23
    1efc:	e4 e1       	ldi	r30, 0x14	; 20
    1efe:	44 0f       	add	r20, r20
    1f00:	55 1f       	adc	r21, r21
    1f02:	66 1f       	adc	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	ea 95       	dec	r30
    1f08:	d1 f7       	brne	.-12     	; 0x1efe <_ZN15Adafruit_BME28012readHumidityEv+0x66>
    1f0a:	6c 01       	movw	r12, r24
    1f0c:	7d 01       	movw	r14, r26
    1f0e:	c4 1a       	sub	r12, r20
    1f10:	d5 0a       	sbc	r13, r21
    1f12:	e6 0a       	sbc	r14, r22
    1f14:	f7 0a       	sbc	r15, r23
    1f16:	ad a5       	ldd	r26, Y+45	; 0x2d
    1f18:	be a5       	ldd	r27, Y+46	; 0x2e
    1f1a:	a5 01       	movw	r20, r10
    1f1c:	94 01       	movw	r18, r8
    1f1e:	0e 94 1d 34 	call	0x683a	; 0x683a <__mulshisi3>
    1f22:	c6 1a       	sub	r12, r22
    1f24:	d7 0a       	sbc	r13, r23
    1f26:	e8 0a       	sbc	r14, r24
    1f28:	f9 0a       	sbc	r15, r25
    1f2a:	40 e4       	ldi	r20, 0x40	; 64
    1f2c:	d4 0e       	add	r13, r20
    1f2e:	e1 1c       	adc	r14, r1
    1f30:	f1 1c       	adc	r15, r1
    1f32:	ff e0       	ldi	r31, 0x0F	; 15
    1f34:	f5 94       	asr	r15
    1f36:	e7 94       	ror	r14
    1f38:	d7 94       	ror	r13
    1f3a:	c7 94       	ror	r12
    1f3c:	fa 95       	dec	r31
    1f3e:	d1 f7       	brne	.-12     	; 0x1f34 <_ZN15Adafruit_BME28012readHumidityEv+0x9c>
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
    1f40:	aa a5       	ldd	r26, Y+42	; 0x2a
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	a5 01       	movw	r20, r10
    1f46:	94 01       	movw	r18, r8
    1f48:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    1f4c:	2b 01       	movw	r4, r22
    1f4e:	3c 01       	movw	r6, r24
    1f50:	ab e0       	ldi	r26, 0x0B	; 11
    1f52:	75 94       	asr	r7
    1f54:	67 94       	ror	r6
    1f56:	57 94       	ror	r5
    1f58:	47 94       	ror	r4
    1f5a:	aa 95       	dec	r26
    1f5c:	d1 f7       	brne	.-12     	; 0x1f52 <_ZN15Adafruit_BME28012readHumidityEv+0xba>
    1f5e:	50 e8       	ldi	r21, 0x80	; 128
    1f60:	55 0e       	add	r5, r21
    1f62:	61 1c       	adc	r6, r1
    1f64:	71 1c       	adc	r7, r1
    1f66:	af a5       	ldd	r26, Y+47	; 0x2f
    1f68:	0a 2e       	mov	r0, r26
    1f6a:	00 0c       	add	r0, r0
    1f6c:	bb 0b       	sbc	r27, r27
    1f6e:	a5 01       	movw	r20, r10
    1f70:	94 01       	movw	r18, r8
    1f72:	0e 94 1d 34 	call	0x683a	; 0x683a <__mulshisi3>
    1f76:	ba e0       	ldi	r27, 0x0A	; 10
    1f78:	95 95       	asr	r25
    1f7a:	87 95       	ror	r24
    1f7c:	77 95       	ror	r23
    1f7e:	67 95       	ror	r22
    1f80:	ba 95       	dec	r27
    1f82:	d1 f7       	brne	.-12     	; 0x1f78 <_ZN15Adafruit_BME28012readHumidityEv+0xe0>
    1f84:	a3 01       	movw	r20, r6
    1f86:	92 01       	movw	r18, r4
    1f88:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	2a e0       	ldi	r18, 0x0A	; 10
    1f92:	b5 95       	asr	r27
    1f94:	a7 95       	ror	r26
    1f96:	97 95       	ror	r25
    1f98:	87 95       	ror	r24
    1f9a:	2a 95       	dec	r18
    1f9c:	d1 f7       	brne	.-12     	; 0x1f92 <_ZN15Adafruit_BME28012readHumidityEv+0xfa>
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	ad 01       	movw	r20, r26
    1fa2:	40 5e       	subi	r20, 0xE0	; 224
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	a8 a5       	ldd	r26, Y+40	; 0x28
    1fa8:	b9 a5       	ldd	r27, Y+41	; 0x29
    1faa:	0e 94 1d 34 	call	0x683a	; 0x683a <__mulshisi3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	90 5e       	subi	r25, 0xE0	; 224
    1fb4:	af 4f       	sbci	r26, 0xFF	; 255
    1fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	3e e0       	ldi	r19, 0x0E	; 14
    1fbe:	95 95       	asr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	77 95       	ror	r23
    1fc4:	67 95       	ror	r22
    1fc6:	3a 95       	dec	r19
    1fc8:	d1 f7       	brne	.-12     	; 0x1fbe <_ZN15Adafruit_BME28012readHumidityEv+0x126>
    1fca:	a7 01       	movw	r20, r14
    1fcc:	96 01       	movw	r18, r12
    1fce:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
    1fd2:	6b 01       	movw	r12, r22
    1fd4:	7c 01       	movw	r14, r24

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
    1fd6:	4f e0       	ldi	r20, 0x0F	; 15
    1fd8:	95 95       	asr	r25
    1fda:	87 95       	ror	r24
    1fdc:	77 95       	ror	r23
    1fde:	67 95       	ror	r22
    1fe0:	4a 95       	dec	r20
    1fe2:	d1 f7       	brne	.-12     	; 0x1fd8 <_ZN15Adafruit_BME28012readHumidityEv+0x140>
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
    1fe4:	9b 01       	movw	r18, r22
    1fe6:	ac 01       	movw	r20, r24
    1fe8:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	67 e0       	ldi	r22, 0x07	; 7
    1ff2:	55 95       	asr	r21
    1ff4:	47 95       	ror	r20
    1ff6:	37 95       	ror	r19
    1ff8:	27 95       	ror	r18
    1ffa:	6a 95       	dec	r22
    1ffc:	d1 f7       	brne	.-12     	; 0x1ff2 <_ZN15Adafruit_BME28012readHumidityEv+0x15a>
    1ffe:	af a1       	ldd	r26, Y+39	; 0x27
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	74 e0       	ldi	r23, 0x04	; 4
    200c:	b5 95       	asr	r27
    200e:	a7 95       	ror	r26
    2010:	97 95       	ror	r25
    2012:	87 95       	ror	r24
    2014:	7a 95       	dec	r23
    2016:	d1 f7       	brne	.-12     	; 0x200c <_ZN15Adafruit_BME28012readHumidityEv+0x174>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    2018:	a7 01       	movw	r20, r14
    201a:	96 01       	movw	r18, r12
    201c:	28 1b       	sub	r18, r24
    201e:	39 0b       	sbc	r19, r25
    2020:	4a 0b       	sbc	r20, r26
    2022:	5b 0b       	sbc	r21, r27
    2024:	da 01       	movw	r26, r20
    2026:	c9 01       	movw	r24, r18
    2028:	57 ff       	sbrs	r21, 7
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <_ZN15Adafruit_BME28012readHumidityEv+0x19a>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	dc 01       	movw	r26, r24
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	91 05       	cpc	r25, r1
    2036:	a1 05       	cpc	r26, r1
    2038:	39 e1       	ldi	r19, 0x19	; 25
    203a:	b3 07       	cpc	r27, r19
    203c:	24 f0       	brlt	.+8      	; 0x2046 <_ZN15Adafruit_BME28012readHumidityEv+0x1ae>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e0       	ldi	r26, 0x00	; 0
    2044:	b9 e1       	ldi	r27, 0x19	; 25
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	2c e0       	ldi	r18, 0x0C	; 12
    204c:	95 95       	asr	r25
    204e:	87 95       	ror	r24
    2050:	77 95       	ror	r23
    2052:	67 95       	ror	r22
    2054:	2a 95       	dec	r18
    2056:	d1 f7       	brne	.-12     	; 0x204c <_ZN15Adafruit_BME28012readHumidityEv+0x1b4>
    2058:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5a e3       	ldi	r21, 0x3A	; 58
    2064:	0e 94 10 1c 	call	0x3820	; 0x3820 <__mulsf3>
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <_ZN15Adafruit_BME28012readHumidityEv+0x1da>
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	80 ec       	ldi	r24, 0xC0	; 192
    2070:	9f e7       	ldi	r25, 0x7F	; 127

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12
    207e:	bf 90       	pop	r11
    2080:	af 90       	pop	r10
    2082:	9f 90       	pop	r9
    2084:	8f 90       	pop	r8
    2086:	7f 90       	pop	r7
    2088:	6f 90       	pop	r6
    208a:	5f 90       	pop	r5
    208c:	4f 90       	pop	r4
    208e:	08 95       	ret

00002090 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @param  atmospheric   Atmospheric pressure in hPa
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	6a 01       	movw	r12, r20
    209a:	7b 01       	movw	r14, r22

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    209c:	fe dc       	rcall	.-1540   	; 0x1a9a <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	48 ec       	ldi	r20, 0xC8	; 200
    20a4:	52 e4       	ldi	r21, 0x42	; 66
    20a6:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
    20aa:	a7 01       	movw	r20, r14
    20ac:	96 01       	movw	r18, r12
    20ae:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
    20b2:	21 e0       	ldi	r18, 0x01	; 1
    20b4:	3e ed       	ldi	r19, 0xDE	; 222
    20b6:	42 e4       	ldi	r20, 0x42	; 66
    20b8:	5e e3       	ldi	r21, 0x3E	; 62
    20ba:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <pow>
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	9f e3       	ldi	r25, 0x3F	; 63
    20ca:	0e 94 37 1a 	call	0x346e	; 0x346e <__subsf3>
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3a e2       	ldi	r19, 0x2A	; 42
    20d2:	4d e2       	ldi	r20, 0x2D	; 45
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 10 1c 	call	0x3820	; 0x3820 <__mulsf3>
}
    20da:	ff 90       	pop	r15
    20dc:	ef 90       	pop	r14
    20de:	df 90       	pop	r13
    20e0:	cf 90       	pop	r12
    20e2:	08 95       	ret

000020e4 <_ZN24Adafruit_TSL2561_Unified15enableAutoRangeEb>:
/**************************************************************************/
boolean Adafruit_TSL2561_Unified::begin(TwoWire *theWire)
{
  _i2c = theWire;
  _i2c-> begin();
  return init();
    20e4:	fc 01       	movw	r30, r24
    20e6:	67 83       	std	Z+7, r22	; 0x07
    20e8:	08 95       	ret

000020ea <_ZN24Adafruit_TSL2561_UnifiedD1Ev>:
    20ea:	08 95       	ret

000020ec <_ZN24Adafruit_TSL2561_Unified9getSensorEP8sensor_t>:
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	8c 01       	movw	r16, r24
    20f6:	eb 01       	movw	r28, r22
    20f8:	88 e2       	ldi	r24, 0x28	; 40
    20fa:	fb 01       	movw	r30, r22
    20fc:	11 92       	st	Z+, r1
    20fe:	8a 95       	dec	r24
    2100:	e9 f7       	brne	.-6      	; 0x20fc <_ZN24Adafruit_TSL2561_Unified9getSensorEP8sensor_t+0x10>
    2102:	4b e0       	ldi	r20, 0x0B	; 11
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	6e e6       	ldi	r22, 0x6E	; 110
    2108:	75 e0       	ldi	r23, 0x05	; 5
    210a:	ce 01       	movw	r24, r28
    210c:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <strncpy>
    2110:	1b 86       	std	Y+11, r1	; 0x0b
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	8c 87       	std	Y+12, r24	; 0x0c
    211c:	9d 87       	std	Y+13, r25	; 0x0d
    211e:	ae 87       	std	Y+14, r26	; 0x0e
    2120:	bf 87       	std	Y+15, r27	; 0x0f
    2122:	f8 01       	movw	r30, r16
    2124:	82 85       	ldd	r24, Z+10	; 0x0a
    2126:	93 85       	ldd	r25, Z+11	; 0x0b
    2128:	a4 85       	ldd	r26, Z+12	; 0x0c
    212a:	b5 85       	ldd	r27, Z+13	; 0x0d
    212c:	88 8b       	std	Y+16, r24	; 0x10
    212e:	99 8b       	std	Y+17, r25	; 0x11
    2130:	aa 8b       	std	Y+18, r26	; 0x12
    2132:	bb 8b       	std	Y+19, r27	; 0x13
    2134:	85 e0       	ldi	r24, 0x05	; 5
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	8c 8b       	std	Y+20, r24	; 0x14
    213e:	9d 8b       	std	Y+21, r25	; 0x15
    2140:	ae 8b       	std	Y+22, r26	; 0x16
    2142:	bf 8b       	std	Y+23, r27	; 0x17
    2144:	1c a2       	std	Y+36, r1	; 0x24
    2146:	1d a2       	std	Y+37, r1	; 0x25
    2148:	1e a2       	std	Y+38, r1	; 0x26
    214a:	1f a2       	std	Y+39, r1	; 0x27
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 ed       	ldi	r25, 0xD0	; 208
    2150:	a4 e8       	ldi	r26, 0x84	; 132
    2152:	b6 e4       	ldi	r27, 0x46	; 70
    2154:	88 8f       	std	Y+24, r24	; 0x18
    2156:	99 8f       	std	Y+25, r25	; 0x19
    2158:	aa 8f       	std	Y+26, r26	; 0x1a
    215a:	bb 8f       	std	Y+27, r27	; 0x1b
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e8       	ldi	r26, 0x80	; 128
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	8c 8f       	std	Y+28, r24	; 0x1c
    2166:	9d 8f       	std	Y+29, r25	; 0x1d
    2168:	ae 8f       	std	Y+30, r26	; 0x1e
    216a:	bf 8f       	std	Y+31, r27	; 0x1f
    216c:	88 a3       	std	Y+32, r24	; 0x20
    216e:	99 a3       	std	Y+33, r25	; 0x21
    2170:	aa a3       	std	Y+34, r26	; 0x22
    2172:	bb a3       	std	Y+35, r27	; 0x23
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <_ZN24Adafruit_TSL2561_UnifiedD0Ev>:
    217e:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <_ZdlPv>

00002182 <_ZN24Adafruit_TSL2561_UnifiedC1Ehl>:
    2182:	fc 01       	movw	r30, r24
    2184:	8a e7       	ldi	r24, 0x7A	; 122
    2186:	95 e0       	ldi	r25, 0x05	; 5
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    218c:	65 83       	std	Z+5, r22	; 0x05
    218e:	16 82       	std	Z+6, r1	; 0x06
    2190:	17 82       	std	Z+7, r1	; 0x07
    2192:	10 86       	std	Z+8, r1	; 0x08
    2194:	11 86       	std	Z+9, r1	; 0x09
    2196:	22 87       	std	Z+10, r18	; 0x0a
    2198:	33 87       	std	Z+11, r19	; 0x0b
    219a:	44 87       	std	Z+12, r20	; 0x0c
    219c:	55 87       	std	Z+13, r21	; 0x0d
    219e:	08 95       	ret

000021a0 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj>:
    21a0:	8f 92       	push	r8
    21a2:	9f 92       	push	r9
    21a4:	af 92       	push	r10
    21a6:	bf 92       	push	r11
    21a8:	cf 92       	push	r12
    21aa:	df 92       	push	r13
    21ac:	ef 92       	push	r14
    21ae:	ff 92       	push	r15
    21b0:	dc 01       	movw	r26, r24
    21b2:	fa 01       	movw	r30, r20
    21b4:	18 96       	adiw	r26, 0x08	; 8
    21b6:	9c 91       	ld	r25, X
    21b8:	18 97       	sbiw	r26, 0x08	; 8
    21ba:	99 23       	and	r25, r25
    21bc:	41 f0       	breq	.+16     	; 0x21ce <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x2e>
    21be:	91 30       	cpi	r25, 0x01	; 1
    21c0:	19 f4       	brne	.+6      	; 0x21c8 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x28>
    21c2:	28 e8       	ldi	r18, 0x88	; 136
    21c4:	30 e9       	ldi	r19, 0x90	; 144
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x32>
    21c8:	28 ee       	ldi	r18, 0xE8	; 232
    21ca:	3d ef       	ldi	r19, 0xFD	; 253
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x32>
    21ce:	24 e2       	ldi	r18, 0x24	; 36
    21d0:	33 e1       	ldi	r19, 0x13	; 19
    21d2:	26 17       	cp	r18, r22
    21d4:	37 07       	cpc	r19, r23
    21d6:	08 f4       	brcc	.+2      	; 0x21da <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x3a>
    21d8:	cb c0       	rjmp	.+406    	; 0x2370 <__stack+0x171>
    21da:	2e 17       	cp	r18, r30
    21dc:	3f 07       	cpc	r19, r31
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x42>
    21e0:	c7 c0       	rjmp	.+398    	; 0x2370 <__stack+0x171>
    21e2:	99 23       	and	r25, r25
    21e4:	79 f0       	breq	.+30     	; 0x2204 <__stack+0x5>
    21e6:	91 30       	cpi	r25, 0x01	; 1
    21e8:	39 f4       	brne	.+14     	; 0x21f8 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x58>
    21ea:	27 ee       	ldi	r18, 0xE7	; 231
    21ec:	82 2e       	mov	r8, r18
    21ee:	2f e0       	ldi	r18, 0x0F	; 15
    21f0:	92 2e       	mov	r9, r18
    21f2:	a1 2c       	mov	r10, r1
    21f4:	b1 2c       	mov	r11, r1
    21f6:	0c c0       	rjmp	.+24     	; 0x2210 <__stack+0x11>
    21f8:	81 2c       	mov	r8, r1
    21fa:	94 e0       	ldi	r25, 0x04	; 4
    21fc:	99 2e       	mov	r9, r25
    21fe:	a1 2c       	mov	r10, r1
    2200:	b1 2c       	mov	r11, r1
    2202:	06 c0       	rjmp	.+12     	; 0x2210 <__stack+0x11>
    2204:	87 e1       	ldi	r24, 0x17	; 23
    2206:	88 2e       	mov	r8, r24
    2208:	85 e7       	ldi	r24, 0x75	; 117
    220a:	98 2e       	mov	r9, r24
    220c:	a1 2c       	mov	r10, r1
    220e:	b1 2c       	mov	r11, r1
    2210:	19 96       	adiw	r26, 0x09	; 9
    2212:	8c 91       	ld	r24, X
    2214:	81 11       	cpse	r24, r1
    2216:	07 c0       	rjmp	.+14     	; 0x2226 <__stack+0x27>
    2218:	a4 e0       	ldi	r26, 0x04	; 4
    221a:	88 0c       	add	r8, r8
    221c:	99 1c       	adc	r9, r9
    221e:	aa 1c       	adc	r10, r10
    2220:	bb 1c       	adc	r11, r11
    2222:	aa 95       	dec	r26
    2224:	d1 f7       	brne	.-12     	; 0x221a <__stack+0x1b>
    2226:	db 01       	movw	r26, r22
    2228:	a5 01       	movw	r20, r10
    222a:	94 01       	movw	r18, r8
    222c:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    2230:	6b 01       	movw	r12, r22
    2232:	7c 01       	movw	r14, r24
    2234:	6a e0       	ldi	r22, 0x0A	; 10
    2236:	f6 94       	lsr	r15
    2238:	e7 94       	ror	r14
    223a:	d7 94       	ror	r13
    223c:	c7 94       	ror	r12
    223e:	6a 95       	dec	r22
    2240:	d1 f7       	brne	.-12     	; 0x2236 <__stack+0x37>
    2242:	df 01       	movw	r26, r30
    2244:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    2248:	4b 01       	movw	r8, r22
    224a:	5c 01       	movw	r10, r24
    224c:	7a e0       	ldi	r23, 0x0A	; 10
    224e:	b6 94       	lsr	r11
    2250:	a7 94       	ror	r10
    2252:	97 94       	ror	r9
    2254:	87 94       	ror	r8
    2256:	7a 95       	dec	r23
    2258:	d1 f7       	brne	.-12     	; 0x224e <__stack+0x4f>
    225a:	c1 14       	cp	r12, r1
    225c:	d1 04       	cpc	r13, r1
    225e:	e1 04       	cpc	r14, r1
    2260:	f1 04       	cpc	r15, r1
    2262:	71 f0       	breq	.+28     	; 0x2280 <__stack+0x81>
    2264:	c5 01       	movw	r24, r10
    2266:	b4 01       	movw	r22, r8
    2268:	4a e0       	ldi	r20, 0x0A	; 10
    226a:	66 0f       	add	r22, r22
    226c:	77 1f       	adc	r23, r23
    226e:	88 1f       	adc	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	4a 95       	dec	r20
    2274:	d1 f7       	brne	.-12     	; 0x226a <__stack+0x6b>
    2276:	a7 01       	movw	r20, r14
    2278:	96 01       	movw	r18, r12
    227a:	0e 94 da 33 	call	0x67b4	; 0x67b4 <__udivmodsi4>
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <__stack+0x87>
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	a9 01       	movw	r20, r18
    2286:	da 01       	movw	r26, r20
    2288:	c9 01       	movw	r24, r18
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	a1 1d       	adc	r26, r1
    228e:	b1 1d       	adc	r27, r1
    2290:	b6 95       	lsr	r27
    2292:	a7 95       	ror	r26
    2294:	97 95       	ror	r25
    2296:	87 95       	ror	r24
    2298:	81 34       	cpi	r24, 0x41	; 65
    229a:	91 05       	cpc	r25, r1
    229c:	a1 05       	cpc	r26, r1
    229e:	b1 05       	cpc	r27, r1
    22a0:	30 f1       	brcs	.+76     	; 0x22ee <__stack+0xef>
    22a2:	81 38       	cpi	r24, 0x81	; 129
    22a4:	91 05       	cpc	r25, r1
    22a6:	a1 05       	cpc	r26, r1
    22a8:	b1 05       	cpc	r27, r1
    22aa:	30 f1       	brcs	.+76     	; 0x22f8 <__stack+0xf9>
    22ac:	81 3c       	cpi	r24, 0xC1	; 193
    22ae:	91 05       	cpc	r25, r1
    22b0:	a1 05       	cpc	r26, r1
    22b2:	b1 05       	cpc	r27, r1
    22b4:	30 f1       	brcs	.+76     	; 0x2302 <__stack+0x103>
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	92 07       	cpc	r25, r18
    22bc:	a1 05       	cpc	r26, r1
    22be:	b1 05       	cpc	r27, r1
    22c0:	28 f1       	brcs	.+74     	; 0x230c <__stack+0x10d>
    22c2:	89 33       	cpi	r24, 0x39	; 57
    22c4:	31 e0       	ldi	r19, 0x01	; 1
    22c6:	93 07       	cpc	r25, r19
    22c8:	a1 05       	cpc	r26, r1
    22ca:	b1 05       	cpc	r27, r1
    22cc:	20 f1       	brcs	.+72     	; 0x2316 <__stack+0x117>
    22ce:	8b 39       	cpi	r24, 0x9B	; 155
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	94 07       	cpc	r25, r20
    22d4:	a1 05       	cpc	r26, r1
    22d6:	b1 05       	cpc	r27, r1
    22d8:	18 f1       	brcs	.+70     	; 0x2320 <__stack+0x121>
    22da:	8b 39       	cpi	r24, 0x9B	; 155
    22dc:	92 40       	sbci	r25, 0x02	; 2
    22de:	a1 05       	cpc	r26, r1
    22e0:	b1 05       	cpc	r27, r1
    22e2:	18 f1       	brcs	.+70     	; 0x232a <__stack+0x12b>
    22e4:	e0 e0       	ldi	r30, 0x00	; 0
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	22 c0       	rjmp	.+68     	; 0x2332 <__stack+0x133>
    22ee:	ee eb       	ldi	r30, 0xBE	; 190
    22f0:	f1 e0       	ldi	r31, 0x01	; 1
    22f2:	a2 ef       	ldi	r26, 0xF2	; 242
    22f4:	b1 e0       	ldi	r27, 0x01	; 1
    22f6:	1d c0       	rjmp	.+58     	; 0x2332 <__stack+0x133>
    22f8:	e1 ed       	ldi	r30, 0xD1	; 209
    22fa:	f2 e0       	ldi	r31, 0x02	; 2
    22fc:	a4 e1       	ldi	r26, 0x14	; 20
    22fe:	b2 e0       	ldi	r27, 0x02	; 2
    2300:	18 c0       	rjmp	.+48     	; 0x2332 <__stack+0x133>
    2302:	eb e7       	ldi	r30, 0x7B	; 123
    2304:	f3 e0       	ldi	r31, 0x03	; 3
    2306:	af e3       	ldi	r26, 0x3F	; 63
    2308:	b2 e0       	ldi	r27, 0x02	; 2
    230a:	13 c0       	rjmp	.+38     	; 0x2332 <__stack+0x133>
    230c:	ee ef       	ldi	r30, 0xFE	; 254
    230e:	f3 e0       	ldi	r31, 0x03	; 3
    2310:	a0 e7       	ldi	r26, 0x70	; 112
    2312:	b2 e0       	ldi	r27, 0x02	; 2
    2314:	0e c0       	rjmp	.+28     	; 0x2332 <__stack+0x133>
    2316:	ec ef       	ldi	r30, 0xFC	; 252
    2318:	f1 e0       	ldi	r31, 0x01	; 1
    231a:	af e6       	ldi	r26, 0x6F	; 111
    231c:	b1 e0       	ldi	r27, 0x01	; 1
    231e:	09 c0       	rjmp	.+18     	; 0x2332 <__stack+0x133>
    2320:	eb ef       	ldi	r30, 0xFB	; 251
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	a2 ed       	ldi	r26, 0xD2	; 210
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <__stack+0x133>
    232a:	e2 e1       	ldi	r30, 0x12	; 18
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	a8 e1       	ldi	r26, 0x18	; 24
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	a7 01       	movw	r20, r14
    2334:	96 01       	movw	r18, r12
    2336:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    233a:	6b 01       	movw	r12, r22
    233c:	7c 01       	movw	r14, r24
    233e:	20 e2       	ldi	r18, 0x20	; 32
    2340:	d2 0e       	add	r13, r18
    2342:	e1 1c       	adc	r14, r1
    2344:	f1 1c       	adc	r15, r1
    2346:	df 01       	movw	r26, r30
    2348:	a5 01       	movw	r20, r10
    234a:	94 01       	movw	r18, r8
    234c:	0e 94 13 34 	call	0x6826	; 0x6826 <__muluhisi3>
    2350:	a7 01       	movw	r20, r14
    2352:	96 01       	movw	r18, r12
    2354:	26 1b       	sub	r18, r22
    2356:	37 0b       	sbc	r19, r23
    2358:	48 0b       	sbc	r20, r24
    235a:	59 0b       	sbc	r21, r25
    235c:	ca 01       	movw	r24, r20
    235e:	b9 01       	movw	r22, r18
    2360:	2e e0       	ldi	r18, 0x0E	; 14
    2362:	96 95       	lsr	r25
    2364:	87 95       	ror	r24
    2366:	77 95       	ror	r23
    2368:	67 95       	ror	r22
    236a:	2a 95       	dec	r18
    236c:	d1 f7       	brne	.-12     	; 0x2362 <__stack+0x163>
    236e:	04 c0       	rjmp	.+8      	; 0x2378 <__stack+0x179>
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	df 90       	pop	r13
    237e:	cf 90       	pop	r12
    2380:	bf 90       	pop	r11
    2382:	af 90       	pop	r10
    2384:	9f 90       	pop	r9
    2386:	8f 90       	pop	r8
    2388:	08 95       	ret

0000238a <_ZN24Adafruit_TSL2561_Unified6write8Ehh>:
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	ec 01       	movw	r28, r24
    2394:	06 2f       	mov	r16, r22
    2396:	14 2f       	mov	r17, r20
    2398:	6d 81       	ldd	r22, Y+5	; 0x05
    239a:	06 2e       	mov	r0, r22
    239c:	00 0c       	add	r0, r0
    239e:	77 0b       	sbc	r23, r23
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	73 d7       	rcall	.+3814   	; 0x328c <_ZN7TwoWire17beginTransmissionEi>
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	dc 01       	movw	r26, r24
    23ac:	ed 91       	ld	r30, X+
    23ae:	fc 91       	ld	r31, X
    23b0:	01 90       	ld	r0, Z+
    23b2:	f0 81       	ld	r31, Z
    23b4:	e0 2d       	mov	r30, r0
    23b6:	60 2f       	mov	r22, r16
    23b8:	19 95       	eicall
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	dc 01       	movw	r26, r24
    23c0:	ed 91       	ld	r30, X+
    23c2:	fc 91       	ld	r31, X
    23c4:	01 90       	ld	r0, Z+
    23c6:	f0 81       	ld	r31, Z
    23c8:	e0 2d       	mov	r30, r0
    23ca:	61 2f       	mov	r22, r17
    23cc:	19 95       	eicall
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	cf c7       	rjmp	.+3998   	; 0x337a <_ZN7TwoWire15endTransmissionEv>

000023dc <_ZN24Adafruit_TSL2561_Unified6enableEv>:
    23dc:	43 e0       	ldi	r20, 0x03	; 3
    23de:	60 e8       	ldi	r22, 0x80	; 128
    23e0:	d4 cf       	rjmp	.-88     	; 0x238a <_ZN24Adafruit_TSL2561_Unified6write8Ehh>

000023e2 <_ZN24Adafruit_TSL2561_Unified7disableEv>:
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	60 e8       	ldi	r22, 0x80	; 128
    23e6:	d1 cf       	rjmp	.-94     	; 0x238a <_ZN24Adafruit_TSL2561_Unified6write8Ehh>

000023e8 <_ZN24Adafruit_TSL2561_Unified5read8Eh>:
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	ec 01       	movw	r28, r24
    23f0:	16 2f       	mov	r17, r22
    23f2:	6d 81       	ldd	r22, Y+5	; 0x05
    23f4:	06 2e       	mov	r0, r22
    23f6:	00 0c       	add	r0, r0
    23f8:	77 0b       	sbc	r23, r23
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	46 d7       	rcall	.+3724   	; 0x328c <_ZN7TwoWire17beginTransmissionEi>
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	dc 01       	movw	r26, r24
    2406:	ed 91       	ld	r30, X+
    2408:	fc 91       	ld	r31, X
    240a:	01 90       	ld	r0, Z+
    240c:	f0 81       	ld	r31, Z
    240e:	e0 2d       	mov	r30, r0
    2410:	61 2f       	mov	r22, r17
    2412:	19 95       	eicall
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	b0 d7       	rcall	.+3936   	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    241a:	6d 81       	ldd	r22, Y+5	; 0x05
    241c:	06 2e       	mov	r0, r22
    241e:	00 0c       	add	r0, r0
    2420:	77 0b       	sbc	r23, r23
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	a5 d7       	rcall	.+3914   	; 0x3376 <_ZN7TwoWire11requestFromEii>
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	dc 01       	movw	r26, r24
    2432:	ed 91       	ld	r30, X+
    2434:	fc 91       	ld	r31, X
    2436:	02 84       	ldd	r0, Z+10	; 0x0a
    2438:	f3 85       	ldd	r31, Z+11	; 0x0b
    243a:	e0 2d       	mov	r30, r0
    243c:	19 95       	eicall
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	08 95       	ret

00002446 <_ZN24Adafruit_TSL2561_Unified4initEv>:
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	ec 01       	movw	r28, r24
    244c:	6a e0       	ldi	r22, 0x0A	; 10
    244e:	cc df       	rcall	.-104    	; 0x23e8 <_ZN24Adafruit_TSL2561_Unified5read8Eh>
    2450:	80 fd       	sbrc	r24, 0
    2452:	0c c0       	rjmp	.+24     	; 0x246c <_ZN24Adafruit_TSL2561_Unified4initEv+0x26>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	8e 83       	std	Y+6, r24	; 0x06
    2458:	68 85       	ldd	r22, Y+8	; 0x08
    245a:	ce 01       	movw	r24, r28
    245c:	17 d0       	rcall	.+46     	; 0x248c <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t>
    245e:	69 85       	ldd	r22, Y+9	; 0x09
    2460:	ce 01       	movw	r24, r28
    2462:	2b d0       	rcall	.+86     	; 0x24ba <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t>
    2464:	ce 01       	movw	r24, r28
    2466:	bd df       	rcall	.-134    	; 0x23e2 <_ZN24Adafruit_TSL2561_Unified7disableEv>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	01 c0       	rjmp	.+2      	; 0x246e <_ZN24Adafruit_TSL2561_Unified4initEv+0x28>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <_ZN24Adafruit_TSL2561_Unified5beginEv>:
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	ec 01       	movw	r28, r24
    247a:	88 e6       	ldi	r24, 0x68	; 104
    247c:	97 e0       	ldi	r25, 0x07	; 7
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
    2482:	eb d6       	rcall	.+3542   	; 0x325a <_ZN7TwoWire5beginEv>
    2484:	ce 01       	movw	r24, r28
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	dd cf       	rjmp	.-70     	; 0x2446 <_ZN24Adafruit_TSL2561_Unified4initEv>

0000248c <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t>:
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	ec 01       	movw	r28, r24
    2494:	16 2f       	mov	r17, r22
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	81 11       	cpse	r24, r1
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t+0x14>
    249c:	ce 01       	movw	r24, r28
    249e:	ea df       	rcall	.-44     	; 0x2474 <_ZN24Adafruit_TSL2561_Unified5beginEv>
    24a0:	ce 01       	movw	r24, r28
    24a2:	9c df       	rcall	.-200    	; 0x23dc <_ZN24Adafruit_TSL2561_Unified6enableEv>
    24a4:	49 85       	ldd	r20, Y+9	; 0x09
    24a6:	41 2b       	or	r20, r17
    24a8:	61 e8       	ldi	r22, 0x81	; 129
    24aa:	ce 01       	movw	r24, r28
    24ac:	6e df       	rcall	.-292    	; 0x238a <_ZN24Adafruit_TSL2561_Unified6write8Ehh>
    24ae:	18 87       	std	Y+8, r17	; 0x08
    24b0:	ce 01       	movw	r24, r28
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	94 cf       	rjmp	.-216    	; 0x23e2 <_ZN24Adafruit_TSL2561_Unified7disableEv>

000024ba <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t>:
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	ec 01       	movw	r28, r24
    24c2:	16 2f       	mov	r17, r22
    24c4:	8e 81       	ldd	r24, Y+6	; 0x06
    24c6:	81 11       	cpse	r24, r1
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t+0x14>
    24ca:	ce 01       	movw	r24, r28
    24cc:	d3 df       	rcall	.-90     	; 0x2474 <_ZN24Adafruit_TSL2561_Unified5beginEv>
    24ce:	ce 01       	movw	r24, r28
    24d0:	85 df       	rcall	.-246    	; 0x23dc <_ZN24Adafruit_TSL2561_Unified6enableEv>
    24d2:	48 85       	ldd	r20, Y+8	; 0x08
    24d4:	41 2b       	or	r20, r17
    24d6:	61 e8       	ldi	r22, 0x81	; 129
    24d8:	ce 01       	movw	r24, r28
    24da:	57 df       	rcall	.-338    	; 0x238a <_ZN24Adafruit_TSL2561_Unified6write8Ehh>
    24dc:	19 87       	std	Y+9, r17	; 0x09
    24de:	ce 01       	movw	r24, r28
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	7d cf       	rjmp	.-262    	; 0x23e2 <_ZN24Adafruit_TSL2561_Unified7disableEv>

000024e8 <_ZN24Adafruit_TSL2561_Unified6read16Eh>:
    @param  reg I2C register to read from
    @returns 16-bit value containing 2-byte data read
*/
/**************************************************************************/
uint16_t Adafruit_TSL2561_Unified::read16(uint8_t reg)
{
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	ec 01       	movw	r28, r24
    24f2:	16 2f       	mov	r17, r22
  uint16_t x, t;

  _i2c->beginTransmission(_addr);
    24f4:	6d 81       	ldd	r22, Y+5	; 0x05
    24f6:	06 2e       	mov	r0, r22
    24f8:	00 0c       	add	r0, r0
    24fa:	77 0b       	sbc	r23, r23
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	c5 d6       	rcall	.+3466   	; 0x328c <_ZN7TwoWire17beginTransmissionEi>
  _i2c->write(reg);
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	dc 01       	movw	r26, r24
    2508:	ed 91       	ld	r30, X+
    250a:	fc 91       	ld	r31, X
    250c:	01 90       	ld	r0, Z+
    250e:	f0 81       	ld	r31, Z
    2510:	e0 2d       	mov	r30, r0
    2512:	61 2f       	mov	r22, r17
    2514:	19 95       	eicall
  _i2c->endTransmission();
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	2f d7       	rcall	.+3678   	; 0x337a <_ZN7TwoWire15endTransmissionEv>

  _i2c->requestFrom(_addr, 2);
    251c:	6d 81       	ldd	r22, Y+5	; 0x05
    251e:	06 2e       	mov	r0, r22
    2520:	00 0c       	add	r0, r0
    2522:	77 0b       	sbc	r23, r23
    2524:	42 e0       	ldi	r20, 0x02	; 2
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	24 d7       	rcall	.+3656   	; 0x3376 <_ZN7TwoWire11requestFromEii>
  t = _i2c->read();
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	dc 01       	movw	r26, r24
    2534:	ed 91       	ld	r30, X+
    2536:	fc 91       	ld	r31, X
    2538:	02 84       	ldd	r0, Z+10	; 0x0a
    253a:	f3 85       	ldd	r31, Z+11	; 0x0b
    253c:	e0 2d       	mov	r30, r0
    253e:	19 95       	eicall
    2540:	8c 01       	movw	r16, r24
  x = _i2c->read();
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	dc 01       	movw	r26, r24
    2548:	ed 91       	ld	r30, X+
    254a:	fc 91       	ld	r31, X
    254c:	02 84       	ldd	r0, Z+10	; 0x0a
    254e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2550:	e0 2d       	mov	r30, r0
    2552:	19 95       	eicall
  x <<= 8;
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	38 2f       	mov	r19, r24
  x |= t;
  return x;
}
    255a:	c8 01       	movw	r24, r16
    255c:	82 2b       	or	r24, r18
    255e:	93 2b       	or	r25, r19
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>:
/*!
    Private function to read luminosity on both channels
*/
/**************************************************************************/
void Adafruit_TSL2561_Unified::getData (uint16_t *broadband, uint16_t *ir)
{
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	ec 01       	movw	r28, r24
    2578:	7b 01       	movw	r14, r22
    257a:	8a 01       	movw	r16, r20
  /* Enable the device by setting the control bit to 0x03 */
  enable();
    257c:	2f df       	rcall	.-418    	; 0x23dc <_ZN24Adafruit_TSL2561_Unified6enableEv>

  /* Wait x ms for ADC to complete */
  switch (_tsl2561IntegrationTime)
    257e:	88 85       	ldd	r24, Y+8	; 0x08
    2580:	88 23       	and	r24, r24
    2582:	39 f0       	breq	.+14     	; 0x2592 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x28>
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	51 f4       	brne	.+20     	; 0x259c <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x32>
  {
    case TSL2561_INTEGRATIONTIME_13MS:
      delay(TSL2561_DELAY_INTTIME_13MS);  // KTOWN: Was 14ms
      break;
    case TSL2561_INTEGRATIONTIME_101MS:
      delay(TSL2561_DELAY_INTTIME_101MS); // KTOWN: Was 102ms
    2588:	68 e7       	ldi	r22, 0x78	; 120
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	09 c0       	rjmp	.+18     	; 0x25a4 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x3a>

  /* Wait x ms for ADC to complete */
  switch (_tsl2561IntegrationTime)
  {
    case TSL2561_INTEGRATIONTIME_13MS:
      delay(TSL2561_DELAY_INTTIME_13MS);  // KTOWN: Was 14ms
    2592:	6f e0       	ldi	r22, 0x0F	; 15
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x3a>
      break;
    case TSL2561_INTEGRATIONTIME_101MS:
      delay(TSL2561_DELAY_INTTIME_101MS); // KTOWN: Was 102ms
      break;
    default:
      delay(TSL2561_DELAY_INTTIME_402MS); // KTOWN: Was 403ms
    259c:	62 ec       	ldi	r22, 0xC2	; 194
    259e:	71 e0       	ldi	r23, 0x01	; 1
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <delay>
      break;
  }

  /* Reads a two byte value from channel 0 (visible + infrared) */
  *broadband = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW);
    25a8:	6c ea       	ldi	r22, 0xAC	; 172
    25aa:	ce 01       	movw	r24, r28
    25ac:	9d df       	rcall	.-198    	; 0x24e8 <_ZN24Adafruit_TSL2561_Unified6read16Eh>
    25ae:	f7 01       	movw	r30, r14
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24

  /* Reads a two byte value from channel 1 (infrared) */
  *ir = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW);
    25b4:	6e ea       	ldi	r22, 0xAE	; 174
    25b6:	ce 01       	movw	r24, r28
    25b8:	97 df       	rcall	.-210    	; 0x24e8 <_ZN24Adafruit_TSL2561_Unified6read16Eh>
    25ba:	f8 01       	movw	r30, r16
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24

  /* Turn the device off to save power */
  disable();
    25c0:	ce 01       	movw	r24, r28
}
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15

  /* Reads a two byte value from channel 1 (infrared) */
  *ir = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW);

  /* Turn the device off to save power */
  disable();
    25cc:	ef 90       	pop	r14
    25ce:	09 cf       	rjmp	.-494    	; 0x23e2 <_ZN24Adafruit_TSL2561_Unified7disableEv>

000025d0 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_>:
    @param  ir Pointer to a uint16_t we will fill with a sensor the 
               IR-only light diode.
*/
/**************************************************************************/
void Adafruit_TSL2561_Unified::getLuminosity (uint16_t *broadband, uint16_t *ir)
{
    25d0:	7f 92       	push	r7
    25d2:	8f 92       	push	r8
    25d4:	9f 92       	push	r9
    25d6:	af 92       	push	r10
    25d8:	bf 92       	push	r11
    25da:	cf 92       	push	r12
    25dc:	df 92       	push	r13
    25de:	ef 92       	push	r14
    25e0:	ff 92       	push	r15
    25e2:	0f 93       	push	r16
    25e4:	1f 93       	push	r17
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x1c>
    25ec:	1f 92       	push	r1
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	8c 01       	movw	r16, r24
    25f4:	6b 01       	movw	r12, r22
    25f6:	7a 01       	movw	r14, r20
  bool valid = false;

  if (!_tsl2561Initialised) begin();
    25f8:	fc 01       	movw	r30, r24
    25fa:	86 81       	ldd	r24, Z+6	; 0x06
    25fc:	81 11       	cpse	r24, r1
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x34>
    2600:	c8 01       	movw	r24, r16
    2602:	38 df       	rcall	.-400    	; 0x2474 <_ZN24Adafruit_TSL2561_Unified5beginEv>

  /* If Auto gain disabled get a single reading and continue */
  if(!_tsl2561AutoGain)
    2604:	f8 01       	movw	r30, r16
    2606:	87 81       	ldd	r24, Z+7	; 0x07
    2608:	81 11       	cpse	r24, r1
    260a:	05 c0       	rjmp	.+10     	; 0x2616 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x46>
  {
    getData (broadband, ir);
    260c:	a7 01       	movw	r20, r14
    260e:	b6 01       	movw	r22, r12
    2610:	c8 01       	movw	r24, r16
    2612:	ab df       	rcall	.-170    	; 0x256a <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>
    return;
    2614:	51 c0       	rjmp	.+162    	; 0x26b8 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xe8>
    2616:	71 2c       	mov	r7, r1
    uint16_t _b, _ir;
    uint16_t _hi, _lo;
    tsl2561IntegrationTime_t _it = _tsl2561IntegrationTime;

    /* Get the hi/low threshold for the current integration time */
    switch(_it)
    2618:	f8 01       	movw	r30, r16
    261a:	80 85       	ldd	r24, Z+8	; 0x08
    261c:	88 23       	and	r24, r24
    261e:	99 f0       	breq	.+38     	; 0x2646 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x76>
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	41 f4       	brne	.+16     	; 0x2634 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x64>
        _hi = TSL2561_AGC_THI_13MS;
        _lo = TSL2561_AGC_TLO_13MS;
        break;
      case TSL2561_INTEGRATIONTIME_101MS:
        _hi = TSL2561_AGC_THI_101MS;
        _lo = TSL2561_AGC_TLO_101MS;
    2624:	48 ec       	ldi	r20, 0xC8	; 200
    2626:	84 2e       	mov	r8, r20
    2628:	91 2c       	mov	r9, r1
      case TSL2561_INTEGRATIONTIME_13MS:
        _hi = TSL2561_AGC_THI_13MS;
        _lo = TSL2561_AGC_TLO_13MS;
        break;
      case TSL2561_INTEGRATIONTIME_101MS:
        _hi = TSL2561_AGC_THI_101MS;
    262a:	50 ea       	ldi	r21, 0xA0	; 160
    262c:	a5 2e       	mov	r10, r21
    262e:	5c e8       	ldi	r21, 0x8C	; 140
    2630:	b5 2e       	mov	r11, r21
    2632:	10 c0       	rjmp	.+32     	; 0x2654 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x84>
        _lo = TSL2561_AGC_TLO_101MS;
        break;
      default:
        _hi = TSL2561_AGC_THI_402MS;
        _lo = TSL2561_AGC_TLO_402MS;
    2634:	24 ef       	ldi	r18, 0xF4	; 244
    2636:	82 2e       	mov	r8, r18
    2638:	99 24       	eor	r9, r9
    263a:	93 94       	inc	r9
      case TSL2561_INTEGRATIONTIME_101MS:
        _hi = TSL2561_AGC_THI_101MS;
        _lo = TSL2561_AGC_TLO_101MS;
        break;
      default:
        _hi = TSL2561_AGC_THI_402MS;
    263c:	38 e1       	ldi	r19, 0x18	; 24
    263e:	a3 2e       	mov	r10, r19
    2640:	36 ef       	ldi	r19, 0xF6	; 246
    2642:	b3 2e       	mov	r11, r19
        _lo = TSL2561_AGC_TLO_402MS;
        break;
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x84>
    /* Get the hi/low threshold for the current integration time */
    switch(_it)
    {
      case TSL2561_INTEGRATIONTIME_13MS:
        _hi = TSL2561_AGC_THI_13MS;
        _lo = TSL2561_AGC_TLO_13MS;
    2646:	84 e6       	ldi	r24, 0x64	; 100
    2648:	88 2e       	mov	r8, r24
    264a:	91 2c       	mov	r9, r1

    /* Get the hi/low threshold for the current integration time */
    switch(_it)
    {
      case TSL2561_INTEGRATIONTIME_13MS:
        _hi = TSL2561_AGC_THI_13MS;
    264c:	92 ef       	ldi	r25, 0xF2	; 242
    264e:	a9 2e       	mov	r10, r25
    2650:	92 e1       	ldi	r25, 0x12	; 18
    2652:	b9 2e       	mov	r11, r25
        _hi = TSL2561_AGC_THI_402MS;
        _lo = TSL2561_AGC_TLO_402MS;
        break;
    }

    getData(&_b, &_ir);
    2654:	ae 01       	movw	r20, r28
    2656:	4f 5f       	subi	r20, 0xFF	; 255
    2658:	5f 4f       	sbci	r21, 0xFF	; 255
    265a:	be 01       	movw	r22, r28
    265c:	6d 5f       	subi	r22, 0xFD	; 253
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	c8 01       	movw	r24, r16
    2662:	83 df       	rcall	.-250    	; 0x256a <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04

    /* Run an auto-gain check if we haven't already done so ... */
    if (!_agcCheck)
    2668:	71 10       	cpse	r7, r1
    266a:	1e c0       	rjmp	.+60     	; 0x26a8 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
    {
      if ((_b < _lo) && (_tsl2561Gain == TSL2561_GAIN_1X))
    266c:	88 15       	cp	r24, r8
    266e:	99 05       	cpc	r25, r9
    2670:	30 f4       	brcc	.+12     	; 0x267e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xae>
    2672:	f8 01       	movw	r30, r16
    2674:	21 85       	ldd	r18, Z+9	; 0x09
    2676:	21 11       	cpse	r18, r1
    2678:	17 c0       	rjmp	.+46     	; 0x26a8 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
      {
        /* Increase the gain and try again */
        setGain(TSL2561_GAIN_16X);
    267a:	60 e1       	ldi	r22, 0x10	; 16
    267c:	08 c0       	rjmp	.+16     	; 0x268e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xbe>
        /* Drop the previous conversion results */
        getData(&_b, &_ir);
        /* Set a flag to indicate we've adjusted the gain */
        _agcCheck = true;
      }
      else if ((_b > _hi) && (_tsl2561Gain == TSL2561_GAIN_16X))
    267e:	a8 16       	cp	r10, r24
    2680:	b9 06       	cpc	r11, r25
    2682:	90 f4       	brcc	.+36     	; 0x26a8 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
    2684:	f8 01       	movw	r30, r16
    2686:	21 85       	ldd	r18, Z+9	; 0x09
    2688:	20 31       	cpi	r18, 0x10	; 16
      {
        /* Drop gain to 1x and try again */
        setGain(TSL2561_GAIN_1X);
    268a:	71 f4       	brne	.+28     	; 0x26a8 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	c8 01       	movw	r24, r16
    2690:	14 df       	rcall	.-472    	; 0x24ba <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t>
        /* Drop the previous conversion results */
        getData(&_b, &_ir);
    2692:	ae 01       	movw	r20, r28
    2694:	4f 5f       	subi	r20, 0xFF	; 255
    2696:	5f 4f       	sbci	r21, 0xFF	; 255
    2698:	be 01       	movw	r22, r28
    269a:	6d 5f       	subi	r22, 0xFD	; 253
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	c8 01       	movw	r24, r16
    26a0:	64 df       	rcall	.-312    	; 0x256a <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>
        /* Set a flag to indicate we've adjusted the gain */
        _agcCheck = true;
    26a2:	77 24       	eor	r7, r7
    26a4:	73 94       	inc	r7
    26a6:	b8 cf       	rjmp	.-144    	; 0x2618 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x48>
    else
    {
      /* If we've already adjusted the gain once, just return the new results.
         This avoids endless loops where a value is at one extreme pre-gain,
         and the the other extreme post-gain */
      *broadband = _b;
    26a8:	f6 01       	movw	r30, r12
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
      *ir = _ir;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	f7 01       	movw	r30, r14
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
      valid = true;
    }
  } while (!valid);
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	df 90       	pop	r13
    26ce:	cf 90       	pop	r12
    26d0:	bf 90       	pop	r11
    26d2:	af 90       	pop	r10
    26d4:	9f 90       	pop	r9
    26d6:	8f 90       	pop	r8
    26d8:	7f 90       	pop	r7
    26da:	08 95       	ret

000026dc <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t>:
    @returns True if sensor reading is between 0 and 65535 lux, 
             false if sensor is saturated
*/
/**************************************************************************/
bool Adafruit_TSL2561_Unified::getEvent(sensors_event_t *event)
{
    26dc:	ef 92       	push	r14
    26de:	ff 92       	push	r15
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t+0xe>
    26ea:	1f 92       	push	r1
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	7c 01       	movw	r14, r24
    26f2:	8b 01       	movw	r16, r22
  uint16_t broadband, ir;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    26f4:	84 e2       	ldi	r24, 0x24	; 36
    26f6:	fb 01       	movw	r30, r22
    26f8:	11 92       	st	Z+, r1
    26fa:	8a 95       	dec	r24
    26fc:	e9 f7       	brne	.-6      	; 0x26f8 <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t+0x1c>

  event->version   = sizeof(sensors_event_t);
    26fe:	84 e2       	ldi	r24, 0x24	; 36
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	fb 01       	movw	r30, r22
    2708:	80 83       	st	Z, r24
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	a2 83       	std	Z+2, r26	; 0x02
    270e:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _tsl2561SensorID;
    2710:	f7 01       	movw	r30, r14
    2712:	82 85       	ldd	r24, Z+10	; 0x0a
    2714:	93 85       	ldd	r25, Z+11	; 0x0b
    2716:	a4 85       	ldd	r26, Z+12	; 0x0c
    2718:	b5 85       	ldd	r27, Z+13	; 0x0d
    271a:	fb 01       	movw	r30, r22
    271c:	84 83       	std	Z+4, r24	; 0x04
    271e:	95 83       	std	Z+5, r25	; 0x05
    2720:	a6 83       	std	Z+6, r26	; 0x06
    2722:	b7 83       	std	Z+7, r27	; 0x07
  event->type      = SENSOR_TYPE_LIGHT;
    2724:	85 e0       	ldi	r24, 0x05	; 5
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	80 87       	std	Z+8, r24	; 0x08
    272e:	91 87       	std	Z+9, r25	; 0x09
    2730:	a2 87       	std	Z+10, r26	; 0x0a
    2732:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2734:	0e 94 a3 23 	call	0x4746	; 0x4746 <millis>
    2738:	f8 01       	movw	r30, r16
    273a:	60 8b       	std	Z+16, r22	; 0x10
    273c:	71 8b       	std	Z+17, r23	; 0x11
    273e:	82 8b       	std	Z+18, r24	; 0x12
    2740:	93 8b       	std	Z+19, r25	; 0x13

  /* Calculate the actual lux value */
  getLuminosity(&broadband, &ir);
    2742:	ae 01       	movw	r20, r28
    2744:	4f 5f       	subi	r20, 0xFF	; 255
    2746:	5f 4f       	sbci	r21, 0xFF	; 255
    2748:	be 01       	movw	r22, r28
    274a:	6d 5f       	subi	r22, 0xFD	; 253
    274c:	7f 4f       	sbci	r23, 0xFF	; 255
    274e:	c7 01       	movw	r24, r14
    2750:	3f df       	rcall	.-386    	; 0x25d0 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_>
  event->light = calculateLux(broadband, ir);
    2752:	49 81       	ldd	r20, Y+1	; 0x01
    2754:	5a 81       	ldd	r21, Y+2	; 0x02
    2756:	6b 81       	ldd	r22, Y+3	; 0x03
    2758:	7c 81       	ldd	r23, Y+4	; 0x04
    275a:	c7 01       	movw	r24, r14
    275c:	21 dd       	rcall	.-1470   	; 0x21a0 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj>
    275e:	5c d7       	rcall	.+3768   	; 0x3618 <__floatunsisf>
    2760:	f8 01       	movw	r30, r16
    2762:	64 8b       	std	Z+20, r22	; 0x14
    2764:	75 8b       	std	Z+21, r23	; 0x15
    2766:	86 8b       	std	Z+22, r24	; 0x16
    2768:	97 8b       	std	Z+23, r25	; 0x17
    276a:	11 e0       	ldi	r17, 0x01	; 1
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	e1 d6       	rcall	.+3522   	; 0x3538 <__cmpsf2>
    2776:	81 11       	cpse	r24, r1
    2778:	01 c0       	rjmp	.+2      	; 0x277c <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t+0xa0>
    277a:	10 e0       	ldi	r17, 0x00	; 0

  if (event->light == 65536) {
    return false;
  }
  return true;
}
    277c:	81 2f       	mov	r24, r17
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	08 95       	ret

00002794 <_ZL9date2daysjhh>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    2794:	80 3d       	cpi	r24, 0xD0	; 208
    2796:	27 e0       	ldi	r18, 0x07	; 7
    2798:	92 07       	cpc	r25, r18
    279a:	10 f0       	brcs	.+4      	; 0x27a0 <_ZL9date2daysjhh+0xc>
    279c:	80 5d       	subi	r24, 0xD0	; 208
    279e:	97 40       	sbci	r25, 0x07	; 7
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	e3 ed       	ldi	r30, 0xD3	; 211
    27a4:	f1 e0       	ldi	r31, 0x01	; 1
    27a6:	21 e0       	ldi	r18, 0x01	; 1
    27a8:	26 17       	cp	r18, r22
    27aa:	30 f4       	brcc	.+12     	; 0x27b8 <_ZL9date2daysjhh+0x24>
    27ac:	34 91       	lpm	r19, Z
    27ae:	43 0f       	add	r20, r19
    27b0:	51 1d       	adc	r21, r1
    27b2:	2f 5f       	subi	r18, 0xFF	; 255
    27b4:	31 96       	adiw	r30, 0x01	; 1
    27b6:	f8 cf       	rjmp	.-16     	; 0x27a8 <_ZL9date2daysjhh+0x14>
    27b8:	63 30       	cpi	r22, 0x03	; 3
    27ba:	38 f0       	brcs	.+14     	; 0x27ca <_ZL9date2daysjhh+0x36>
    27bc:	9c 01       	movw	r18, r24
    27be:	23 70       	andi	r18, 0x03	; 3
    27c0:	33 27       	eor	r19, r19
    27c2:	23 2b       	or	r18, r19
    27c4:	11 f4       	brne	.+4      	; 0x27ca <_ZL9date2daysjhh+0x36>
    27c6:	4f 5f       	subi	r20, 0xFF	; 255
    27c8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ca:	bc 01       	movw	r22, r24
    27cc:	6d 5f       	subi	r22, 0xFD	; 253
    27ce:	7f 4f       	sbci	r23, 0xFF	; 255
    27d0:	76 95       	lsr	r23
    27d2:	67 95       	ror	r22
    27d4:	76 95       	lsr	r23
    27d6:	67 95       	ror	r22
    27d8:	ed e6       	ldi	r30, 0x6D	; 109
    27da:	f1 e0       	ldi	r31, 0x01	; 1
    27dc:	8e 9f       	mul	r24, r30
    27de:	90 01       	movw	r18, r0
    27e0:	8f 9f       	mul	r24, r31
    27e2:	30 0d       	add	r19, r0
    27e4:	9e 9f       	mul	r25, r30
    27e6:	30 0d       	add	r19, r0
    27e8:	11 24       	eor	r1, r1
    27ea:	c9 01       	movw	r24, r18
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	86 0f       	add	r24, r22
    27f0:	97 1f       	adc	r25, r23
    27f2:	84 0f       	add	r24, r20
    27f4:	95 1f       	adc	r25, r21
    27f6:	08 95       	ret

000027f8 <_ZL6conv2dPKc>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	90 81       	ld	r25, Z
    27fc:	90 53       	subi	r25, 0x30	; 48
    27fe:	9a 30       	cpi	r25, 0x0A	; 10
    2800:	08 f0       	brcs	.+2      	; 0x2804 <_ZL6conv2dPKc+0xc>
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	81 81       	ldd	r24, Z+1	; 0x01
    2806:	80 53       	subi	r24, 0x30	; 48
    2808:	2a e0       	ldi	r18, 0x0A	; 10
    280a:	92 9f       	mul	r25, r18
    280c:	80 0d       	add	r24, r0
    280e:	11 24       	eor	r1, r1
    2810:	08 95       	ret

00002812 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	2b 97       	sbiw	r28, 0x0b	; 11
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	8c 01       	movw	r16, r24
    2830:	7a 01       	movw	r14, r20
    2832:	4b e0       	ldi	r20, 0x0B	; 11
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	ce 01       	movw	r24, r28
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <memcpy_P>
    283e:	ce 01       	movw	r24, r28
    2840:	0a 96       	adiw	r24, 0x0a	; 10
    2842:	da df       	rcall	.-76     	; 0x27f8 <_ZL6conv2dPKc>
    2844:	f8 01       	movw	r30, r16
    2846:	80 83       	st	Z, r24
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	8e 2f       	mov	r24, r30
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	fc 01       	movw	r30, r24
    2850:	e1 54       	subi	r30, 0x41	; 65
    2852:	f1 09       	sbc	r31, r1
    2854:	e3 31       	cpi	r30, 0x13	; 19
    2856:	f1 05       	cpc	r31, r1
    2858:	58 f5       	brcc	.+86     	; 0x28b0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9e>
    285a:	88 27       	eor	r24, r24
    285c:	ee 58       	subi	r30, 0x8E	; 142
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <__tablejump2__>
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	81 36       	cpi	r24, 0x61	; 97
    286a:	29 f0       	breq	.+10     	; 0x2876 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	8e 36       	cpi	r24, 0x6E	; 110
    2870:	21 f0       	breq	.+8      	; 0x287a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x68>
    2872:	87 e0       	ldi	r24, 0x07	; 7
    2874:	1b c0       	rjmp	.+54     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	19 c0       	rjmp	.+50     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    287a:	86 e0       	ldi	r24, 0x06	; 6
    287c:	17 c0       	rjmp	.+46     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	15 c0       	rjmp	.+42     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	82 37       	cpi	r24, 0x72	; 114
    2886:	11 f0       	breq	.+4      	; 0x288c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x7a>
    2888:	88 e0       	ldi	r24, 0x08	; 8
    288a:	10 c0       	rjmp	.+32     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    288c:	84 e0       	ldi	r24, 0x04	; 4
    288e:	0e c0       	rjmp	.+28     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	82 37       	cpi	r24, 0x72	; 114
    2894:	11 f0       	breq	.+4      	; 0x289a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x88>
    2896:	85 e0       	ldi	r24, 0x05	; 5
    2898:	09 c0       	rjmp	.+18     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    289a:	83 e0       	ldi	r24, 0x03	; 3
    289c:	07 c0       	rjmp	.+14     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    289e:	89 e0       	ldi	r24, 0x09	; 9
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    28a2:	8a e0       	ldi	r24, 0x0A	; 10
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    28a6:	8b e0       	ldi	r24, 0x0B	; 11
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    28aa:	8c e0       	ldi	r24, 0x0C	; 12
    28ac:	f8 01       	movw	r30, r16
    28ae:	81 83       	std	Z+1, r24	; 0x01
    28b0:	ce 01       	movw	r24, r28
    28b2:	05 96       	adiw	r24, 0x05	; 5
    28b4:	a1 df       	rcall	.-190    	; 0x27f8 <_ZL6conv2dPKc>
    28b6:	f8 01       	movw	r30, r16
    28b8:	82 83       	std	Z+2, r24	; 0x02
    28ba:	48 e0       	ldi	r20, 0x08	; 8
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	b7 01       	movw	r22, r14
    28c0:	ce 01       	movw	r24, r28
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <memcpy_P>
    28c8:	ce 01       	movw	r24, r28
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	95 df       	rcall	.-214    	; 0x27f8 <_ZL6conv2dPKc>
    28ce:	f8 01       	movw	r30, r16
    28d0:	83 83       	std	Z+3, r24	; 0x03
    28d2:	ce 01       	movw	r24, r28
    28d4:	04 96       	adiw	r24, 0x04	; 4
    28d6:	90 df       	rcall	.-224    	; 0x27f8 <_ZL6conv2dPKc>
    28d8:	f8 01       	movw	r30, r16
    28da:	84 83       	std	Z+4, r24	; 0x04
    28dc:	ce 01       	movw	r24, r28
    28de:	07 96       	adiw	r24, 0x07	; 7
    28e0:	8b df       	rcall	.-234    	; 0x27f8 <_ZL6conv2dPKc>
    28e2:	f8 01       	movw	r30, r16
    28e4:	85 83       	std	Z+5, r24	; 0x05
    28e6:	2b 96       	adiw	r28, 0x0b	; 11
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	ff 90       	pop	r15
    28fc:	ef 90       	pop	r14
    28fe:	08 95       	ret

00002900 <_ZNK8DateTime12dayOfTheWeekEv>:
    2900:	fc 01       	movw	r30, r24
    2902:	80 81       	ld	r24, Z
    2904:	42 81       	ldd	r20, Z+2	; 0x02
    2906:	61 81       	ldd	r22, Z+1	; 0x01
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	44 df       	rcall	.-376    	; 0x2794 <_ZL9date2daysjhh>
    290c:	06 96       	adiw	r24, 0x06	; 6
    290e:	67 e0       	ldi	r22, 0x07	; 7
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	0c 94 c6 33 	jmp	0x678c	; 0x678c <__udivmodhi4>
    2916:	08 95       	ret

00002918 <_ZN10RTC_DS32315beginEv>:
    2918:	88 e6       	ldi	r24, 0x68	; 104
    291a:	97 e0       	ldi	r25, 0x07	; 7
    291c:	9e d4       	rcall	.+2364   	; 0x325a <_ZN7TwoWire5beginEv>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	08 95       	ret

00002922 <_ZN10RTC_DS32313nowEv>:
    2922:	cf 92       	push	r12
    2924:	df 92       	push	r13
    2926:	ef 92       	push	r14
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	ec 01       	movw	r28, r24
    2934:	68 e6       	ldi	r22, 0x68	; 104
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	88 e6       	ldi	r24, 0x68	; 104
    293a:	97 e0       	ldi	r25, 0x07	; 7
    293c:	a7 d4       	rcall	.+2382   	; 0x328c <_ZN7TwoWire17beginTransmissionEi>
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	88 e6       	ldi	r24, 0x68	; 104
    2942:	97 e0       	ldi	r25, 0x07	; 7
    2944:	4c d4       	rcall	.+2200   	; 0x31de <_ZN7TwoWire5writeEh>
    2946:	88 e6       	ldi	r24, 0x68	; 104
    2948:	97 e0       	ldi	r25, 0x07	; 7
    294a:	17 d5       	rcall	.+2606   	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    294c:	47 e0       	ldi	r20, 0x07	; 7
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	68 e6       	ldi	r22, 0x68	; 104
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	88 e6       	ldi	r24, 0x68	; 104
    2956:	97 e0       	ldi	r25, 0x07	; 7
    2958:	0e d5       	rcall	.+2588   	; 0x3376 <_ZN7TwoWire11requestFromEii>
    295a:	88 e6       	ldi	r24, 0x68	; 104
    295c:	97 e0       	ldi	r25, 0x07	; 7
    295e:	b9 d3       	rcall	.+1906   	; 0x30d2 <_ZN7TwoWire4readEv>
    2960:	8f 77       	andi	r24, 0x7F	; 127
    2962:	98 2f       	mov	r25, r24
    2964:	92 95       	swap	r25
    2966:	9f 70       	andi	r25, 0x0F	; 15
    2968:	1a ef       	ldi	r17, 0xFA	; 250
    296a:	08 2f       	mov	r16, r24
    296c:	91 9f       	mul	r25, r17
    296e:	00 0d       	add	r16, r0
    2970:	11 24       	eor	r1, r1
    2972:	88 e6       	ldi	r24, 0x68	; 104
    2974:	97 e0       	ldi	r25, 0x07	; 7
    2976:	ad d3       	rcall	.+1882   	; 0x30d2 <_ZN7TwoWire4readEv>
    2978:	9c 01       	movw	r18, r24
    297a:	33 27       	eor	r19, r19
    297c:	94 e0       	ldi	r25, 0x04	; 4
    297e:	35 95       	asr	r19
    2980:	27 95       	ror	r18
    2982:	9a 95       	dec	r25
    2984:	e1 f7       	brne	.-8      	; 0x297e <_ZN10RTC_DS32313nowEv+0x5c>
    2986:	f8 2e       	mov	r15, r24
    2988:	12 9f       	mul	r17, r18
    298a:	f0 0c       	add	r15, r0
    298c:	11 24       	eor	r1, r1
    298e:	88 e6       	ldi	r24, 0x68	; 104
    2990:	97 e0       	ldi	r25, 0x07	; 7
    2992:	9f d3       	rcall	.+1854   	; 0x30d2 <_ZN7TwoWire4readEv>
    2994:	9c 01       	movw	r18, r24
    2996:	33 27       	eor	r19, r19
    2998:	44 e0       	ldi	r20, 0x04	; 4
    299a:	35 95       	asr	r19
    299c:	27 95       	ror	r18
    299e:	4a 95       	dec	r20
    29a0:	e1 f7       	brne	.-8      	; 0x299a <_ZN10RTC_DS32313nowEv+0x78>
    29a2:	e8 2e       	mov	r14, r24
    29a4:	12 9f       	mul	r17, r18
    29a6:	e0 0c       	add	r14, r0
    29a8:	11 24       	eor	r1, r1
    29aa:	88 e6       	ldi	r24, 0x68	; 104
    29ac:	97 e0       	ldi	r25, 0x07	; 7
    29ae:	91 d3       	rcall	.+1826   	; 0x30d2 <_ZN7TwoWire4readEv>
    29b0:	88 e6       	ldi	r24, 0x68	; 104
    29b2:	97 e0       	ldi	r25, 0x07	; 7
    29b4:	8e d3       	rcall	.+1820   	; 0x30d2 <_ZN7TwoWire4readEv>
    29b6:	9c 01       	movw	r18, r24
    29b8:	33 27       	eor	r19, r19
    29ba:	54 e0       	ldi	r21, 0x04	; 4
    29bc:	35 95       	asr	r19
    29be:	27 95       	ror	r18
    29c0:	5a 95       	dec	r21
    29c2:	e1 f7       	brne	.-8      	; 0x29bc <_ZN10RTC_DS32313nowEv+0x9a>
    29c4:	d8 2e       	mov	r13, r24
    29c6:	12 9f       	mul	r17, r18
    29c8:	d0 0c       	add	r13, r0
    29ca:	11 24       	eor	r1, r1
    29cc:	88 e6       	ldi	r24, 0x68	; 104
    29ce:	97 e0       	ldi	r25, 0x07	; 7
    29d0:	80 d3       	rcall	.+1792   	; 0x30d2 <_ZN7TwoWire4readEv>
    29d2:	9c 01       	movw	r18, r24
    29d4:	33 27       	eor	r19, r19
    29d6:	64 e0       	ldi	r22, 0x04	; 4
    29d8:	35 95       	asr	r19
    29da:	27 95       	ror	r18
    29dc:	6a 95       	dec	r22
    29de:	e1 f7       	brne	.-8      	; 0x29d8 <_ZN10RTC_DS32313nowEv+0xb6>
    29e0:	c8 2e       	mov	r12, r24
    29e2:	12 9f       	mul	r17, r18
    29e4:	c0 0c       	add	r12, r0
    29e6:	11 24       	eor	r1, r1
    29e8:	88 e6       	ldi	r24, 0x68	; 104
    29ea:	97 e0       	ldi	r25, 0x07	; 7
    29ec:	72 d3       	rcall	.+1764   	; 0x30d2 <_ZN7TwoWire4readEv>
    29ee:	9c 01       	movw	r18, r24
    29f0:	33 27       	eor	r19, r19
    29f2:	74 e0       	ldi	r23, 0x04	; 4
    29f4:	35 95       	asr	r19
    29f6:	27 95       	ror	r18
    29f8:	7a 95       	dec	r23
    29fa:	e1 f7       	brne	.-8      	; 0x29f4 <_ZN10RTC_DS32313nowEv+0xd2>
    29fc:	12 9f       	mul	r17, r18
    29fe:	80 0d       	add	r24, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	88 83       	st	Y, r24
    2a04:	c9 82       	std	Y+1, r12	; 0x01
    2a06:	da 82       	std	Y+2, r13	; 0x02
    2a08:	eb 82       	std	Y+3, r14	; 0x03
    2a0a:	fc 82       	std	Y+4, r15	; 0x04
    2a0c:	0d 83       	std	Y+5, r16	; 0x05
    2a0e:	ce 01       	movw	r24, r28
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	df 90       	pop	r13
    2a1e:	cf 90       	pop	r12
    2a20:	08 95       	ret

00002a22 <_ZL17read_i2c_registerhh.constprop.7>:
    2a22:	cf 93       	push	r28
    2a24:	c8 2f       	mov	r28, r24
    2a26:	68 e6       	ldi	r22, 0x68	; 104
    2a28:	88 e6       	ldi	r24, 0x68	; 104
    2a2a:	97 e0       	ldi	r25, 0x07	; 7
    2a2c:	25 d4       	rcall	.+2122   	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    2a2e:	6c 2f       	mov	r22, r28
    2a30:	88 e6       	ldi	r24, 0x68	; 104
    2a32:	97 e0       	ldi	r25, 0x07	; 7
    2a34:	d4 d3       	rcall	.+1960   	; 0x31de <_ZN7TwoWire5writeEh>
    2a36:	88 e6       	ldi	r24, 0x68	; 104
    2a38:	97 e0       	ldi	r25, 0x07	; 7
    2a3a:	9f d4       	rcall	.+2366   	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	68 e6       	ldi	r22, 0x68	; 104
    2a40:	88 e6       	ldi	r24, 0x68	; 104
    2a42:	97 e0       	ldi	r25, 0x07	; 7
    2a44:	96 d4       	rcall	.+2348   	; 0x3372 <_ZN7TwoWire11requestFromEhh>
    2a46:	88 e6       	ldi	r24, 0x68	; 104
    2a48:	97 e0       	ldi	r25, 0x07	; 7
    2a4a:	43 d3       	rcall	.+1670   	; 0x30d2 <_ZN7TwoWire4readEv>
    2a4c:	cf 91       	pop	r28
    2a4e:	08 95       	ret

00002a50 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
    2a50:	0f 93       	push	r16
    2a52:	1f 93       	push	r17
    2a54:	cf 93       	push	r28
    2a56:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
    2a58:	68 e6       	ldi	r22, 0x68	; 104
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	88 e6       	ldi	r24, 0x68	; 104
    2a5e:	97 e0       	ldi	r25, 0x07	; 7
    2a60:	15 d4       	rcall	.+2090   	; 0x328c <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	88 e6       	ldi	r24, 0x68	; 104
    2a66:	97 e0       	ldi	r25, 0x07	; 7
    2a68:	ba d3       	rcall	.+1908   	; 0x31de <_ZN7TwoWire5writeEh>
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    2a6e:	ca e0       	ldi	r28, 0x0A	; 10
    2a70:	82 2f       	mov	r24, r18
    2a72:	6c 2f       	mov	r22, r28
    2a74:	0e 94 ba 33 	call	0x6774	; 0x6774 <__udivmodqi4>
    2a78:	68 2f       	mov	r22, r24
    2a7a:	66 0f       	add	r22, r22
    2a7c:	86 0f       	add	r24, r22
    2a7e:	88 0f       	add	r24, r24
    2a80:	68 2f       	mov	r22, r24
    2a82:	62 0f       	add	r22, r18
    2a84:	88 e6       	ldi	r24, 0x68	; 104
    2a86:	97 e0       	ldi	r25, 0x07	; 7
    2a88:	aa d3       	rcall	.+1876   	; 0x31de <_ZN7TwoWire5writeEh>
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    2a8e:	82 2f       	mov	r24, r18
    2a90:	6c 2f       	mov	r22, r28
    2a92:	0e 94 ba 33 	call	0x6774	; 0x6774 <__udivmodqi4>
    2a96:	68 2f       	mov	r22, r24
    2a98:	66 0f       	add	r22, r22
    2a9a:	86 0f       	add	r24, r22
    2a9c:	88 0f       	add	r24, r24
    2a9e:	68 2f       	mov	r22, r24
    2aa0:	62 0f       	add	r22, r18
    2aa2:	88 e6       	ldi	r24, 0x68	; 104
    2aa4:	97 e0       	ldi	r25, 0x07	; 7
    2aa6:	9b d3       	rcall	.+1846   	; 0x31de <_ZN7TwoWire5writeEh>
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    2aac:	82 2f       	mov	r24, r18
    2aae:	6c 2f       	mov	r22, r28
    2ab0:	0e 94 ba 33 	call	0x6774	; 0x6774 <__udivmodqi4>
    2ab4:	68 2f       	mov	r22, r24
    2ab6:	66 0f       	add	r22, r22
    2ab8:	86 0f       	add	r24, r22
    2aba:	88 0f       	add	r24, r24
    2abc:	68 2f       	mov	r22, r24
    2abe:	62 0f       	add	r22, r18
    2ac0:	88 e6       	ldi	r24, 0x68	; 104
    2ac2:	97 e0       	ldi	r25, 0x07	; 7
  Wire._I2C_WRITE(bin2bcd(0));
    2ac4:	8c d3       	rcall	.+1816   	; 0x31de <_ZN7TwoWire5writeEh>
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	88 e6       	ldi	r24, 0x68	; 104
    2aca:	97 e0       	ldi	r25, 0x07	; 7
    2acc:	88 d3       	rcall	.+1808   	; 0x31de <_ZN7TwoWire5writeEh>
    2ace:	f8 01       	movw	r30, r16
    2ad0:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    2ad2:	82 2f       	mov	r24, r18
    2ad4:	6c 2f       	mov	r22, r28
    2ad6:	0e 94 ba 33 	call	0x6774	; 0x6774 <__udivmodqi4>
    2ada:	68 2f       	mov	r22, r24
    2adc:	66 0f       	add	r22, r22
    2ade:	86 0f       	add	r24, r22
    2ae0:	88 0f       	add	r24, r24
    2ae2:	68 2f       	mov	r22, r24
    2ae4:	62 0f       	add	r22, r18
    2ae6:	88 e6       	ldi	r24, 0x68	; 104
    2ae8:	97 e0       	ldi	r25, 0x07	; 7
    2aea:	79 d3       	rcall	.+1778   	; 0x31de <_ZN7TwoWire5writeEh>
    2aec:	f8 01       	movw	r30, r16
    2aee:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    2af0:	82 2f       	mov	r24, r18
    2af2:	6c 2f       	mov	r22, r28
    2af4:	0e 94 ba 33 	call	0x6774	; 0x6774 <__udivmodqi4>
    2af8:	68 2f       	mov	r22, r24
    2afa:	66 0f       	add	r22, r22
    2afc:	86 0f       	add	r24, r22
    2afe:	88 0f       	add	r24, r24
    2b00:	68 2f       	mov	r22, r24
    2b02:	62 0f       	add	r22, r18
    2b04:	88 e6       	ldi	r24, 0x68	; 104
    2b06:	97 e0       	ldi	r25, 0x07	; 7
    2b08:	6a d3       	rcall	.+1748   	; 0x31de <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	20 81       	ld	r18, Z
    2b0e:	82 2f       	mov	r24, r18
    2b10:	6c 2f       	mov	r22, r28
    2b12:	0e 94 ba 33 	call	0x6774	; 0x6774 <__udivmodqi4>
    2b16:	68 2f       	mov	r22, r24
    2b18:	66 0f       	add	r22, r22
    2b1a:	86 0f       	add	r24, r22
    2b1c:	88 0f       	add	r24, r24
    2b1e:	68 2f       	mov	r22, r24
    2b20:	62 0f       	add	r22, r18
    2b22:	88 e6       	ldi	r24, 0x68	; 104
  Wire.endTransmission();
    2b24:	97 e0       	ldi	r25, 0x07	; 7
    2b26:	5b d3       	rcall	.+1718   	; 0x31de <_ZN7TwoWire5writeEh>
    2b28:	88 e6       	ldi	r24, 0x68	; 104

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	26 d4       	rcall	.+2124   	; 0x337a <_ZN7TwoWire15endTransmissionEv>
    2b2e:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
    2b30:	78 df       	rcall	.-272    	; 0x2a22 <_ZL17read_i2c_registerhh.constprop.7>
    2b32:	c8 2f       	mov	r28, r24
    2b34:	68 e6       	ldi	r22, 0x68	; 104
    2b36:	88 e6       	ldi	r24, 0x68	; 104
  Wire._I2C_WRITE((byte)reg);
    2b38:	97 e0       	ldi	r25, 0x07	; 7
    2b3a:	9e d3       	rcall	.+1852   	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    2b3c:	6f e0       	ldi	r22, 0x0F	; 15
    2b3e:	88 e6       	ldi	r24, 0x68	; 104
  Wire._I2C_WRITE((byte)val);
    2b40:	97 e0       	ldi	r25, 0x07	; 7
    2b42:	4d d3       	rcall	.+1690   	; 0x31de <_ZN7TwoWire5writeEh>
    2b44:	6c 2f       	mov	r22, r28
    2b46:	6f 77       	andi	r22, 0x7F	; 127
    2b48:	88 e6       	ldi	r24, 0x68	; 104
    2b4a:	97 e0       	ldi	r25, 0x07	; 7
  Wire.endTransmission();
    2b4c:	48 d3       	rcall	.+1680   	; 0x31de <_ZN7TwoWire5writeEh>
    2b4e:	88 e6       	ldi	r24, 0x68	; 104
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
    2b50:	97 e0       	ldi	r25, 0x07	; 7
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    2b56:	0f 91       	pop	r16
    2b58:	10 c4       	rjmp	.+2080   	; 0x337a <_ZN7TwoWire15endTransmissionEv>

00002b5a <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
    2b5a:	8f e0       	ldi	r24, 0x0F	; 15
    2b5c:	62 df       	rcall	.-316    	; 0x2a22 <_ZL17read_i2c_registerhh.constprop.7>
    2b5e:	87 fb       	bst	r24, 7
    2b60:	88 27       	eor	r24, r24
    2b62:	80 f9       	bld	r24, 0
}
    2b64:	08 95       	ret

00002b66 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	08 95       	ret

00002b6c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2b6c:	08 95       	ret

00002b6e <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    2b6e:	1f 92       	push	r1
    2b70:	0f 92       	push	r0
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	0f 92       	push	r0
    2b76:	11 24       	eor	r1, r1
    2b78:	0b b6       	in	r0, 0x3b	; 59
    2b7a:	0f 92       	push	r0
    2b7c:	2f 93       	push	r18
    2b7e:	3f 93       	push	r19
    2b80:	4f 93       	push	r20
    2b82:	5f 93       	push	r21
    2b84:	6f 93       	push	r22
    2b86:	7f 93       	push	r23
    2b88:	8f 93       	push	r24
    2b8a:	9f 93       	push	r25
    2b8c:	af 93       	push	r26
    2b8e:	bf 93       	push	r27
    2b90:	ef 93       	push	r30
    2b92:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    2b94:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <_ZN14SoftwareSerial13active_objectE>
    2b98:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <_ZN14SoftwareSerial13active_objectE+0x1>
    2b9c:	30 97       	sbiw	r30, 0x00	; 0
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <__vector_10+0x34>
    2ba0:	51 c0       	rjmp	.+162    	; 0x2c44 <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2ba2:	96 8d       	ldd	r25, Z+30	; 0x1e
    2ba4:	a6 85       	ldd	r26, Z+14	; 0x0e
    2ba6:	b7 85       	ldd	r27, Z+15	; 0x0f
    2ba8:	85 85       	ldd	r24, Z+13	; 0x0d
    2baa:	91 ff       	sbrs	r25, 1
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2bae:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2bb0:	89 23       	and	r24, r25
    2bb2:	29 f4       	brne	.+10     	; 0x2bbe <__vector_10+0x50>
    2bb4:	47 c0       	rjmp	.+142    	; 0x2c44 <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2bb6:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2bb8:	89 23       	and	r24, r25
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <__vector_10+0x50>
    2bbc:	43 c0       	rjmp	.+134    	; 0x2c44 <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2bbe:	a3 89       	ldd	r26, Z+19	; 0x13
    2bc0:	b4 89       	ldd	r27, Z+20	; 0x14
    2bc2:	9c 91       	ld	r25, X
    2bc4:	85 89       	ldd	r24, Z+21	; 0x15
    2bc6:	80 95       	com	r24
    2bc8:	89 23       	and	r24, r25
    2bca:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2bcc:	86 89       	ldd	r24, Z+22	; 0x16
    2bce:	97 89       	ldd	r25, Z+23	; 0x17
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2bd4:	60 8d       	ldd	r22, Z+24	; 0x18
    2bd6:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2bd8:	a6 85       	ldd	r26, Z+14	; 0x0e
    2bda:	b7 85       	ldd	r27, Z+15	; 0x0f
    2bdc:	55 85       	ldd	r21, Z+13	; 0x0d
    2bde:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	cb 01       	movw	r24, r22
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2be8:	82 2f       	mov	r24, r18
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	95 95       	asr	r25
    2bee:	87 95       	ror	r24
    2bf0:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2bf2:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    2bf4:	45 23       	and	r20, r21
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <__vector_10+0x8c>
        d |= 0x80;
    2bf8:	20 68       	ori	r18, 0x80	; 128
    2bfa:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    2bfc:	91 f7       	brne	.-28     	; 0x2be2 <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    2bfe:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c00:	81 fd       	sbrc	r24, 1
      d = ~d;
    2c02:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2c04:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	8f 73       	andi	r24, 0x3F	; 63
    2c0e:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
    2c10:	30 91 b6 06 	lds	r19, 0x06B6	; 0x8006b6 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2c14:	38 17       	cp	r19, r24
    2c16:	49 f0       	breq	.+18     	; 0x2c2a <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2c18:	a0 91 b7 06 	lds	r26, 0x06B7	; 0x8006b7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	a8 54       	subi	r26, 0x48	; 72
    2c20:	b9 4f       	sbci	r27, 0xF9	; 249
    2c22:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
    2c24:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2c28:	03 c0       	rjmp	.+6      	; 0x2c30 <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    2c2a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c2c:	81 60       	ori	r24, 0x01	; 1
    2c2e:	86 8f       	std	Z+30, r24	; 0x1e
    2c30:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c32:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2c38:	a3 89       	ldd	r26, Z+19	; 0x13
    2c3a:	b4 89       	ldd	r27, Z+20	; 0x14
    2c3c:	9c 91       	ld	r25, X
    2c3e:	85 89       	ldd	r24, Z+21	; 0x15
    2c40:	89 2b       	or	r24, r25
    2c42:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    2c44:	ff 91       	pop	r31
    2c46:	ef 91       	pop	r30
    2c48:	bf 91       	pop	r27
    2c4a:	af 91       	pop	r26
    2c4c:	9f 91       	pop	r25
    2c4e:	8f 91       	pop	r24
    2c50:	7f 91       	pop	r23
    2c52:	6f 91       	pop	r22
    2c54:	5f 91       	pop	r21
    2c56:	4f 91       	pop	r20
    2c58:	3f 91       	pop	r19
    2c5a:	2f 91       	pop	r18
    2c5c:	0f 90       	pop	r0
    2c5e:	0b be       	out	0x3b, r0	; 59
    2c60:	0f 90       	pop	r0
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	0f 90       	pop	r0
    2c66:	1f 90       	pop	r1
    2c68:	18 95       	reti

00002c6a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c6a:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <twi_state>
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <twi_sendStop>
    2c74:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <twi_inRepStart>
    2c78:	61 e0       	ldi	r22, 0x01	; 1
    2c7a:	84 e1       	ldi	r24, 0x14	; 20
    2c7c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	85 e1       	ldi	r24, 0x15	; 21
    2c84:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    2c88:	e9 eb       	ldi	r30, 0xB9	; 185
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	8e 7f       	andi	r24, 0xFE	; 254
    2c90:	80 83       	st	Z, r24
    2c92:	80 81       	ld	r24, Z
    2c94:	8d 7f       	andi	r24, 0xFD	; 253
    2c96:	80 83       	st	Z, r24
    2c98:	88 e4       	ldi	r24, 0x48	; 72
    2c9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2c9e:	85 e4       	ldi	r24, 0x45	; 69
    2ca0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ca4:	08 95       	ret

00002ca6 <twi_readFrom>:
    2ca6:	41 32       	cpi	r20, 0x21	; 33
    2ca8:	08 f0       	brcs	.+2      	; 0x2cac <twi_readFrom+0x6>
    2caa:	43 c0       	rjmp	.+134    	; 0x2d32 <twi_readFrom+0x8c>
    2cac:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <twi_state>
    2cb0:	91 11       	cpse	r25, r1
    2cb2:	fc cf       	rjmp	.-8      	; 0x2cac <twi_readFrom+0x6>
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <twi_state>
    2cba:	20 93 65 07 	sts	0x0765, r18	; 0x800765 <twi_sendStop>
    2cbe:	2f ef       	ldi	r18, 0xFF	; 255
    2cc0:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <twi_error>
    2cc4:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <twi_masterBufferIndex>
    2cc8:	24 0f       	add	r18, r20
    2cca:	20 93 3e 07 	sts	0x073E, r18	; 0x80073e <twi_masterBufferLength>
    2cce:	90 93 66 07 	sts	0x0766, r25	; 0x800766 <twi_slarw>
    2cd2:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <twi_slarw>
    2cd6:	88 0f       	add	r24, r24
    2cd8:	89 2b       	or	r24, r25
    2cda:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <twi_slarw>
    2cde:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <twi_inRepStart>
    2ce2:	81 30       	cpi	r24, 0x01	; 1
    2ce4:	61 f4       	brne	.+24     	; 0x2cfe <twi_readFrom+0x58>
    2ce6:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <twi_inRepStart>
    2cea:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <twi_slarw>
    2cee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2cf2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2cf6:	83 fd       	sbrc	r24, 3
    2cf8:	f8 cf       	rjmp	.-16     	; 0x2cea <twi_readFrom+0x44>
    2cfa:	85 ec       	ldi	r24, 0xC5	; 197
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <twi_readFrom+0x5a>
    2cfe:	85 ee       	ldi	r24, 0xE5	; 229
    2d00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d04:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <twi_state>
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	e1 f3       	breq	.-8      	; 0x2d04 <twi_readFrom+0x5e>
    2d0c:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2d10:	84 17       	cp	r24, r20
    2d12:	10 f4       	brcc	.+4      	; 0x2d18 <twi_readFrom+0x72>
    2d14:	40 91 3f 07 	lds	r20, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2d18:	a0 e4       	ldi	r26, 0x40	; 64
    2d1a:	b7 e0       	ldi	r27, 0x07	; 7
    2d1c:	96 2f       	mov	r25, r22
    2d1e:	fb 01       	movw	r30, r22
    2d20:	8e 2f       	mov	r24, r30
    2d22:	89 1b       	sub	r24, r25
    2d24:	84 17       	cp	r24, r20
    2d26:	18 f4       	brcc	.+6      	; 0x2d2e <twi_readFrom+0x88>
    2d28:	8d 91       	ld	r24, X+
    2d2a:	81 93       	st	Z+, r24
    2d2c:	f9 cf       	rjmp	.-14     	; 0x2d20 <twi_readFrom+0x7a>
    2d2e:	84 2f       	mov	r24, r20
    2d30:	08 95       	ret
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	08 95       	ret

00002d36 <twi_writeTo>:
    2d36:	0f 93       	push	r16
    2d38:	41 32       	cpi	r20, 0x21	; 33
    2d3a:	08 f0       	brcs	.+2      	; 0x2d3e <twi_writeTo+0x8>
    2d3c:	4a c0       	rjmp	.+148    	; 0x2dd2 <twi_writeTo+0x9c>
    2d3e:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <twi_state>
    2d42:	91 11       	cpse	r25, r1
    2d44:	fc cf       	rjmp	.-8      	; 0x2d3e <twi_writeTo+0x8>
    2d46:	32 e0       	ldi	r19, 0x02	; 2
    2d48:	30 93 67 07 	sts	0x0767, r19	; 0x800767 <twi_state>
    2d4c:	00 93 65 07 	sts	0x0765, r16	; 0x800765 <twi_sendStop>
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	30 93 fa 06 	sts	0x06FA, r19	; 0x8006fa <twi_error>
    2d56:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <twi_masterBufferIndex>
    2d5a:	40 93 3e 07 	sts	0x073E, r20	; 0x80073e <twi_masterBufferLength>
    2d5e:	56 2f       	mov	r21, r22
    2d60:	a0 e4       	ldi	r26, 0x40	; 64
    2d62:	b7 e0       	ldi	r27, 0x07	; 7
    2d64:	fb 01       	movw	r30, r22
    2d66:	3e 2f       	mov	r19, r30
    2d68:	35 1b       	sub	r19, r21
    2d6a:	34 17       	cp	r19, r20
    2d6c:	18 f4       	brcc	.+6      	; 0x2d74 <twi_writeTo+0x3e>
    2d6e:	31 91       	ld	r19, Z+
    2d70:	3d 93       	st	X+, r19
    2d72:	f9 cf       	rjmp	.-14     	; 0x2d66 <twi_writeTo+0x30>
    2d74:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <twi_slarw>
    2d78:	30 91 66 07 	lds	r19, 0x0766	; 0x800766 <twi_slarw>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	83 2b       	or	r24, r19
    2d80:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <twi_slarw>
    2d84:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <twi_inRepStart>
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	61 f4       	brne	.+24     	; 0x2da4 <twi_writeTo+0x6e>
    2d8c:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <twi_inRepStart>
    2d90:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <twi_slarw>
    2d94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2d98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d9c:	83 fd       	sbrc	r24, 3
    2d9e:	f8 cf       	rjmp	.-16     	; 0x2d90 <twi_writeTo+0x5a>
    2da0:	85 ec       	ldi	r24, 0xC5	; 197
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <twi_writeTo+0x70>
    2da4:	85 ee       	ldi	r24, 0xE5	; 229
    2da6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2daa:	22 23       	and	r18, r18
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <twi_writeTo+0x80>
    2dae:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <twi_state>
    2db2:	82 30       	cpi	r24, 0x02	; 2
    2db4:	d1 f3       	breq	.-12     	; 0x2daa <twi_writeTo+0x74>
    2db6:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_error>
    2dba:	8f 3f       	cpi	r24, 0xFF	; 255
    2dbc:	79 f0       	breq	.+30     	; 0x2ddc <twi_writeTo+0xa6>
    2dbe:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_error>
    2dc2:	80 32       	cpi	r24, 0x20	; 32
    2dc4:	41 f0       	breq	.+16     	; 0x2dd6 <twi_writeTo+0xa0>
    2dc6:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_error>
    2dca:	80 33       	cpi	r24, 0x30	; 48
    2dcc:	31 f0       	breq	.+12     	; 0x2dda <twi_writeTo+0xa4>
    2dce:	94 e0       	ldi	r25, 0x04	; 4
    2dd0:	05 c0       	rjmp	.+10     	; 0x2ddc <twi_writeTo+0xa6>
    2dd2:	91 e0       	ldi	r25, 0x01	; 1
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <twi_writeTo+0xa6>
    2dd6:	92 e0       	ldi	r25, 0x02	; 2
    2dd8:	01 c0       	rjmp	.+2      	; 0x2ddc <twi_writeTo+0xa6>
    2dda:	93 e0       	ldi	r25, 0x03	; 3
    2ddc:	89 2f       	mov	r24, r25
    2dde:	0f 91       	pop	r16
    2de0:	08 95       	ret

00002de2 <twi_transmit>:
    2de2:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <twi_txBufferLength>
    2de6:	26 2f       	mov	r18, r22
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	24 0f       	add	r18, r20
    2dec:	31 1d       	adc	r19, r1
    2dee:	21 32       	cpi	r18, 0x21	; 33
    2df0:	31 05       	cpc	r19, r1
    2df2:	dc f4       	brge	.+54     	; 0x2e2a <twi_transmit+0x48>
    2df4:	20 91 67 07 	lds	r18, 0x0767	; 0x800767 <twi_state>
    2df8:	24 30       	cpi	r18, 0x04	; 4
    2dfa:	c9 f4       	brne	.+50     	; 0x2e2e <twi_transmit+0x4c>
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	86 17       	cp	r24, r22
    2e04:	58 f4       	brcc	.+22     	; 0x2e1c <twi_transmit+0x3a>
    2e06:	30 91 1c 07 	lds	r19, 0x071C	; 0x80071c <twi_txBufferLength>
    2e0a:	21 91       	ld	r18, Z+
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	a2 5e       	subi	r26, 0xE2	; 226
    2e10:	b8 4f       	sbci	r27, 0xF8	; 248
    2e12:	a3 0f       	add	r26, r19
    2e14:	b1 1d       	adc	r27, r1
    2e16:	2c 93       	st	X, r18
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	f3 cf       	rjmp	.-26     	; 0x2e02 <twi_transmit+0x20>
    2e1c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <twi_txBufferLength>
    2e20:	68 0f       	add	r22, r24
    2e22:	60 93 1c 07 	sts	0x071C, r22	; 0x80071c <twi_txBufferLength>
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	08 95       	ret
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	08 95       	ret
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	08 95       	ret

00002e32 <twi_attachSlaveRxEvent>:
    2e32:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <twi_onSlaveReceive+0x1>
    2e36:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <twi_onSlaveReceive>
    2e3a:	08 95       	ret

00002e3c <twi_attachSlaveTxEvent>:
    2e3c:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <twi_onSlaveTransmit+0x1>
    2e40:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <twi_onSlaveTransmit>
    2e44:	08 95       	ret

00002e46 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2e46:	85 ed       	ldi	r24, 0xD5	; 213
    2e48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2e4c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e50:	84 fd       	sbrc	r24, 4
    2e52:	fc cf       	rjmp	.-8      	; 0x2e4c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2e54:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <twi_state>
    2e58:	08 95       	ret

00002e5a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2e5a:	85 ec       	ldi	r24, 0xC5	; 197
    2e5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2e60:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <twi_state>
    2e64:	08 95       	ret

00002e66 <__vector_39>:
}

ISR(TWI_vect)
{
    2e66:	1f 92       	push	r1
    2e68:	0f 92       	push	r0
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	0f 92       	push	r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	0b b6       	in	r0, 0x3b	; 59
    2e72:	0f 92       	push	r0
    2e74:	2f 93       	push	r18
    2e76:	3f 93       	push	r19
    2e78:	4f 93       	push	r20
    2e7a:	5f 93       	push	r21
    2e7c:	6f 93       	push	r22
    2e7e:	7f 93       	push	r23
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25
    2e84:	af 93       	push	r26
    2e86:	bf 93       	push	r27
    2e88:	ef 93       	push	r30
    2e8a:	ff 93       	push	r31
  switch(TW_STATUS){
    2e8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2e90:	88 7f       	andi	r24, 0xF8	; 248
    2e92:	80 36       	cpi	r24, 0x60	; 96
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <__vector_39+0x32>
    2e96:	9d c0       	rjmp	.+314    	; 0x2fd2 <__vector_39+0x16c>
    2e98:	70 f5       	brcc	.+92     	; 0x2ef6 <__vector_39+0x90>
    2e9a:	88 32       	cpi	r24, 0x28	; 40
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <__vector_39+0x3a>
    2e9e:	5c c0       	rjmp	.+184    	; 0x2f58 <__vector_39+0xf2>
    2ea0:	90 f4       	brcc	.+36     	; 0x2ec6 <__vector_39+0x60>
    2ea2:	80 31       	cpi	r24, 0x10	; 16
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <__vector_39+0x42>
    2ea6:	55 c0       	rjmp	.+170    	; 0x2f52 <__vector_39+0xec>
    2ea8:	38 f4       	brcc	.+14     	; 0x2eb8 <__vector_39+0x52>
    2eaa:	88 23       	and	r24, r24
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <__vector_39+0x4a>
    2eae:	f3 c0       	rjmp	.+486    	; 0x3096 <__vector_39+0x230>
    2eb0:	88 30       	cpi	r24, 0x08	; 8
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <__vector_39+0x50>
    2eb4:	4e c0       	rjmp	.+156    	; 0x2f52 <__vector_39+0xec>
    2eb6:	f2 c0       	rjmp	.+484    	; 0x309c <__vector_39+0x236>
    2eb8:	88 31       	cpi	r24, 0x18	; 24
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <__vector_39+0x58>
    2ebc:	4d c0       	rjmp	.+154    	; 0x2f58 <__vector_39+0xf2>
    2ebe:	80 32       	cpi	r24, 0x20	; 32
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <__vector_39+0x5e>
    2ec2:	5e c0       	rjmp	.+188    	; 0x2f80 <__vector_39+0x11a>
    2ec4:	eb c0       	rjmp	.+470    	; 0x309c <__vector_39+0x236>
    2ec6:	80 34       	cpi	r24, 0x40	; 64
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <__vector_39+0x66>
    2eca:	69 c0       	rjmp	.+210    	; 0x2f9e <__vector_39+0x138>
    2ecc:	50 f4       	brcc	.+20     	; 0x2ee2 <__vector_39+0x7c>
    2ece:	80 33       	cpi	r24, 0x30	; 48
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <__vector_39+0x6e>
    2ed2:	56 c0       	rjmp	.+172    	; 0x2f80 <__vector_39+0x11a>
    2ed4:	88 33       	cpi	r24, 0x38	; 56
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <__vector_39+0x74>
    2ed8:	e1 c0       	rjmp	.+450    	; 0x309c <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2eda:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <twi_error>
      twi_releaseBus();
    2ede:	bd df       	rcall	.-134    	; 0x2e5a <twi_releaseBus>
      break;
    2ee0:	dd c0       	rjmp	.+442    	; 0x309c <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2ee2:	80 35       	cpi	r24, 0x50	; 80
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <__vector_39+0x82>
    2ee6:	4f c0       	rjmp	.+158    	; 0x2f86 <__vector_39+0x120>
    2ee8:	88 35       	cpi	r24, 0x58	; 88
    2eea:	09 f4       	brne	.+2      	; 0x2eee <__vector_39+0x88>
    2eec:	5d c0       	rjmp	.+186    	; 0x2fa8 <__vector_39+0x142>
    2eee:	88 34       	cpi	r24, 0x48	; 72
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <__vector_39+0x8e>
    2ef2:	d4 c0       	rjmp	.+424    	; 0x309c <__vector_39+0x236>
    2ef4:	d2 c0       	rjmp	.+420    	; 0x309a <__vector_39+0x234>
    2ef6:	88 39       	cpi	r24, 0x98	; 152
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <__vector_39+0x96>
    2efa:	c3 c0       	rjmp	.+390    	; 0x3082 <__vector_39+0x21c>
    2efc:	a8 f4       	brcc	.+42     	; 0x2f28 <__vector_39+0xc2>
    2efe:	88 37       	cpi	r24, 0x78	; 120
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <__vector_39+0x9e>
    2f02:	67 c0       	rjmp	.+206    	; 0x2fd2 <__vector_39+0x16c>
    2f04:	38 f4       	brcc	.+14     	; 0x2f14 <__vector_39+0xae>
    2f06:	88 36       	cpi	r24, 0x68	; 104
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <__vector_39+0xa6>
    2f0a:	63 c0       	rjmp	.+198    	; 0x2fd2 <__vector_39+0x16c>
    2f0c:	80 37       	cpi	r24, 0x70	; 112
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <__vector_39+0xac>
    2f10:	60 c0       	rjmp	.+192    	; 0x2fd2 <__vector_39+0x16c>
    2f12:	c4 c0       	rjmp	.+392    	; 0x309c <__vector_39+0x236>
    2f14:	88 38       	cpi	r24, 0x88	; 136
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <__vector_39+0xb4>
    2f18:	b4 c0       	rjmp	.+360    	; 0x3082 <__vector_39+0x21c>
    2f1a:	80 39       	cpi	r24, 0x90	; 144
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <__vector_39+0xba>
    2f1e:	5f c0       	rjmp	.+190    	; 0x2fde <__vector_39+0x178>
    2f20:	80 38       	cpi	r24, 0x80	; 128
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <__vector_39+0xc0>
    2f24:	bb c0       	rjmp	.+374    	; 0x309c <__vector_39+0x236>
    2f26:	5b c0       	rjmp	.+182    	; 0x2fde <__vector_39+0x178>
    2f28:	80 3b       	cpi	r24, 0xB0	; 176
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <__vector_39+0xc8>
    2f2c:	82 c0       	rjmp	.+260    	; 0x3032 <__vector_39+0x1cc>
    2f2e:	38 f4       	brcc	.+14     	; 0x2f3e <__vector_39+0xd8>
    2f30:	80 3a       	cpi	r24, 0xA0	; 160
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <__vector_39+0xd0>
    2f34:	66 c0       	rjmp	.+204    	; 0x3002 <__vector_39+0x19c>
    2f36:	88 3a       	cpi	r24, 0xA8	; 168
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <__vector_39+0xd6>
    2f3a:	7b c0       	rjmp	.+246    	; 0x3032 <__vector_39+0x1cc>
    2f3c:	af c0       	rjmp	.+350    	; 0x309c <__vector_39+0x236>
    2f3e:	80 3c       	cpi	r24, 0xC0	; 192
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <__vector_39+0xde>
    2f42:	a3 c0       	rjmp	.+326    	; 0x308a <__vector_39+0x224>
    2f44:	88 3c       	cpi	r24, 0xC8	; 200
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <__vector_39+0xe4>
    2f48:	a0 c0       	rjmp	.+320    	; 0x308a <__vector_39+0x224>
    2f4a:	88 3b       	cpi	r24, 0xB8	; 184
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <__vector_39+0xea>
    2f4e:	86 c0       	rjmp	.+268    	; 0x305c <__vector_39+0x1f6>
    2f50:	a5 c0       	rjmp	.+330    	; 0x309c <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2f52:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <twi_slarw>
    2f56:	10 c0       	rjmp	.+32     	; 0x2f78 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f58:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2f5c:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_masterBufferLength>
    2f60:	98 17       	cp	r25, r24
    2f62:	70 f5       	brcc	.+92     	; 0x2fc0 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2f64:	e0 91 3f 07 	lds	r30, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	8e 0f       	add	r24, r30
    2f6c:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_masterBufferIndex>
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	e0 5c       	subi	r30, 0xC0	; 192
    2f74:	f8 4f       	sbci	r31, 0xF8	; 248
    2f76:	80 81       	ld	r24, Z
    2f78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f7c:	85 ec       	ldi	r24, 0xC5	; 197
    2f7e:	82 c0       	rjmp	.+260    	; 0x3084 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f80:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <twi_error>
    2f84:	8a c0       	rjmp	.+276    	; 0x309a <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f86:	e0 91 3f 07 	lds	r30, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	8e 0f       	add	r24, r30
    2f8e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_masterBufferIndex>
    2f92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	e0 5c       	subi	r30, 0xC0	; 192
    2f9a:	f8 4f       	sbci	r31, 0xF8	; 248
    2f9c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f9e:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2fa2:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_masterBufferLength>
    2fa6:	6a c0       	rjmp	.+212    	; 0x307c <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2fa8:	e0 91 3f 07 	lds	r30, 0x073F	; 0x80073f <twi_masterBufferIndex>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	8e 0f       	add	r24, r30
    2fb0:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_masterBufferIndex>
    2fb4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	e0 5c       	subi	r30, 0xC0	; 192
    2fbc:	f8 4f       	sbci	r31, 0xF8	; 248
    2fbe:	80 83       	st	Z, r24
	if (twi_sendStop)
    2fc0:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <twi_sendStop>
    2fc4:	81 11       	cpse	r24, r1
    2fc6:	69 c0       	rjmp	.+210    	; 0x309a <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2fce:	84 ea       	ldi	r24, 0xA4	; 164
    2fd0:	5d c0       	rjmp	.+186    	; 0x308c <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2fd2:	83 e0       	ldi	r24, 0x03	; 3
    2fd4:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2fd8:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <twi_rxBufferIndex>
    2fdc:	cf cf       	rjmp	.-98     	; 0x2f7c <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2fde:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_rxBufferIndex>
    2fe2:	80 32       	cpi	r24, 0x20	; 32
    2fe4:	08 f0       	brcs	.+2      	; 0x2fe8 <__vector_39+0x182>
    2fe6:	4d c0       	rjmp	.+154    	; 0x3082 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2fe8:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <twi_rxBufferIndex>
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	8e 0f       	add	r24, r30
    2ff0:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <twi_rxBufferIndex>
    2ff4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	e4 50       	subi	r30, 0x04	; 4
    2ffc:	f9 4f       	sbci	r31, 0xF9	; 249
    2ffe:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3000:	bd cf       	rjmp	.-134    	; 0x2f7c <__vector_39+0x116>
    3002:	2b df       	rcall	.-426    	; 0x2e5a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3004:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_rxBufferIndex>
    3008:	80 32       	cpi	r24, 0x20	; 32
    300a:	30 f4       	brcc	.+12     	; 0x3018 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    300c:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <twi_rxBufferIndex>
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	e4 50       	subi	r30, 0x04	; 4
    3014:	f9 4f       	sbci	r31, 0xF9	; 249
    3016:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3018:	60 91 fb 06 	lds	r22, 0x06FB	; 0x8006fb <twi_rxBufferIndex>
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <twi_onSlaveReceive>
    3022:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <twi_onSlaveReceive+0x1>
    3026:	8c ef       	ldi	r24, 0xFC	; 252
    3028:	96 e0       	ldi	r25, 0x06	; 6
    302a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    302c:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <twi_rxBufferIndex>
      break;
    3030:	35 c0       	rjmp	.+106    	; 0x309c <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3032:	84 e0       	ldi	r24, 0x04	; 4
    3034:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3038:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    303c:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3040:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <twi_onSlaveTransmit>
    3044:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <twi_onSlaveTransmit+0x1>
    3048:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    304a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <twi_txBufferLength>
    304e:	81 11       	cpse	r24, r1
    3050:	05 c0       	rjmp	.+10     	; 0x305c <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3058:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    305c:	e0 91 1d 07 	lds	r30, 0x071D	; 0x80071d <twi_txBufferIndex>
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	8e 0f       	add	r24, r30
    3064:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_txBufferIndex>
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	e2 5e       	subi	r30, 0xE2	; 226
    306c:	f8 4f       	sbci	r31, 0xF8	; 248
    306e:	80 81       	ld	r24, Z
    3070:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3074:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <twi_txBufferIndex>
    3078:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <twi_txBufferLength>
    307c:	98 17       	cp	r25, r24
    307e:	08 f4       	brcc	.+2      	; 0x3082 <__vector_39+0x21c>
    3080:	7d cf       	rjmp	.-262    	; 0x2f7c <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3082:	85 e8       	ldi	r24, 0x85	; 133
    3084:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3088:	09 c0       	rjmp	.+18     	; 0x309c <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    308a:	85 ec       	ldi	r24, 0xC5	; 197
    308c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3090:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <twi_state>
      break;
    3094:	03 c0       	rjmp	.+6      	; 0x309c <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3096:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <twi_error>
      twi_stop();
    309a:	d5 de       	rcall	.-598    	; 0x2e46 <twi_stop>
      break;
  }
}
    309c:	ff 91       	pop	r31
    309e:	ef 91       	pop	r30
    30a0:	bf 91       	pop	r27
    30a2:	af 91       	pop	r26
    30a4:	9f 91       	pop	r25
    30a6:	8f 91       	pop	r24
    30a8:	7f 91       	pop	r23
    30aa:	6f 91       	pop	r22
    30ac:	5f 91       	pop	r21
    30ae:	4f 91       	pop	r20
    30b0:	3f 91       	pop	r19
    30b2:	2f 91       	pop	r18
    30b4:	0f 90       	pop	r0
    30b6:	0b be       	out	0x3b, r0	; 59
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	0f 90       	pop	r0
    30be:	1f 90       	pop	r1
    30c0:	18 95       	reti

000030c2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    30c2:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	20 91 9d 07 	lds	r18, 0x079D	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    30cc:	82 1b       	sub	r24, r18
    30ce:	91 09       	sbc	r25, r1
    30d0:	08 95       	ret

000030d2 <_ZN7TwoWire4readEv>:
    30d2:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    30d6:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    30da:	98 17       	cp	r25, r24
    30dc:	50 f4       	brcc	.+20     	; 0x30f2 <_ZN7TwoWire4readEv+0x20>
    30de:	e9 2f       	mov	r30, r25
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	e2 56       	subi	r30, 0x62	; 98
    30e4:	f8 4f       	sbci	r31, 0xF8	; 248
    30e6:	20 81       	ld	r18, Z
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	9f 5f       	subi	r25, 0xFF	; 255
    30ec:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <_ZN7TwoWire4readEv+0x24>
    30f2:	2f ef       	ldi	r18, 0xFF	; 255
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	c9 01       	movw	r24, r18
    30f8:	08 95       	ret

000030fa <_ZN7TwoWire4peekEv>:
    30fa:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    30fe:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    3102:	e8 17       	cp	r30, r24
    3104:	30 f4       	brcc	.+12     	; 0x3112 <_ZN7TwoWire4peekEv+0x18>
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	e2 56       	subi	r30, 0x62	; 98
    310a:	f8 4f       	sbci	r31, 0xF8	; 248
    310c:	80 81       	ld	r24, Z
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	08 95       	ret
    3112:	8f ef       	ldi	r24, 0xFF	; 255
    3114:	9f ef       	ldi	r25, 0xFF	; 255
    3116:	08 95       	ret

00003118 <_ZN7TwoWire5flushEv>:
    3118:	08 95       	ret

0000311a <_ZN7TwoWire16onReceiveServiceEPhi>:
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	ec 01       	movw	r28, r24
    3120:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <_ZN7TwoWire14user_onReceiveE>
    3124:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <_ZN7TwoWire14user_onReceiveE+0x1>
    3128:	30 97       	sbiw	r30, 0x00	; 0
    312a:	f1 f0       	breq	.+60     	; 0x3168 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    312c:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    3130:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    3134:	98 17       	cp	r25, r24
    3136:	c0 f0       	brcs	.+48     	; 0x3168 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	29 2f       	mov	r18, r25
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	26 17       	cp	r18, r22
    3140:	37 07       	cpc	r19, r23
    3142:	54 f4       	brge	.+20     	; 0x3158 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3144:	de 01       	movw	r26, r28
    3146:	a2 0f       	add	r26, r18
    3148:	b3 1f       	adc	r27, r19
    314a:	4c 91       	ld	r20, X
    314c:	d9 01       	movw	r26, r18
    314e:	a2 56       	subi	r26, 0x62	; 98
    3150:	b8 4f       	sbci	r27, 0xF8	; 248
    3152:	4c 93       	st	X, r20
    3154:	9f 5f       	subi	r25, 0xFF	; 255
    3156:	f1 cf       	rjmp	.-30     	; 0x313a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3158:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    315c:	60 93 9c 07 	sts	0x079C, r22	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    3160:	cb 01       	movw	r24, r22
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	19 94       	eijmp
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	08 95       	ret

0000316e <_ZN7TwoWire16onRequestServiceEv>:
    316e:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <_ZN7TwoWire14user_onRequestE>
    3172:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <_ZN7TwoWire14user_onRequestE+0x1>
    3176:	30 97       	sbiw	r30, 0x00	; 0
    3178:	29 f0       	breq	.+10     	; 0x3184 <_ZN7TwoWire16onRequestServiceEv+0x16>
    317a:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <_ZN7TwoWire13txBufferIndexE>
    317e:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    3182:	19 94       	eijmp
    3184:	08 95       	ret

00003186 <_ZN7TwoWire5writeEPKhj>:
    3186:	cf 92       	push	r12
    3188:	df 92       	push	r13
    318a:	ef 92       	push	r14
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	7c 01       	movw	r14, r24
    3198:	cb 01       	movw	r24, r22
    319a:	8a 01       	movw	r16, r20
    319c:	20 91 78 07 	lds	r18, 0x0778	; 0x800778 <_ZN7TwoWire12transmittingE>
    31a0:	22 23       	and	r18, r18
    31a2:	89 f0       	breq	.+34     	; 0x31c6 <_ZN7TwoWire5writeEPKhj+0x40>
    31a4:	eb 01       	movw	r28, r22
    31a6:	6b 01       	movw	r12, r22
    31a8:	c4 0e       	add	r12, r20
    31aa:	d5 1e       	adc	r13, r21
    31ac:	cc 15       	cp	r28, r12
    31ae:	dd 05       	cpc	r29, r13
    31b0:	61 f0       	breq	.+24     	; 0x31ca <_ZN7TwoWire5writeEPKhj+0x44>
    31b2:	69 91       	ld	r22, Y+
    31b4:	d7 01       	movw	r26, r14
    31b6:	ed 91       	ld	r30, X+
    31b8:	fc 91       	ld	r31, X
    31ba:	01 90       	ld	r0, Z+
    31bc:	f0 81       	ld	r31, Z
    31be:	e0 2d       	mov	r30, r0
    31c0:	c7 01       	movw	r24, r14
    31c2:	19 95       	eicall
    31c4:	f3 cf       	rjmp	.-26     	; 0x31ac <_ZN7TwoWire5writeEPKhj+0x26>
    31c6:	64 2f       	mov	r22, r20
    31c8:	0c de       	rcall	.-1000   	; 0x2de2 <twi_transmit>
    31ca:	c8 01       	movw	r24, r16
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	08 95       	ret

000031de <_ZN7TwoWire5writeEh>:
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	1f 92       	push	r1
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	69 83       	std	Y+1, r22	; 0x01
    31ea:	20 91 78 07 	lds	r18, 0x0778	; 0x800778 <_ZN7TwoWire12transmittingE>
    31ee:	22 23       	and	r18, r18
    31f0:	d1 f0       	breq	.+52     	; 0x3226 <_ZN7TwoWire5writeEh+0x48>
    31f2:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    31f6:	20 32       	cpi	r18, 0x20	; 32
    31f8:	40 f0       	brcs	.+16     	; 0x320a <_ZN7TwoWire5writeEh+0x2c>
    31fa:	21 e0       	ldi	r18, 0x01	; 1
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	fc 01       	movw	r30, r24
    3200:	33 83       	std	Z+3, r19	; 0x03
    3202:	22 83       	std	Z+2, r18	; 0x02
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	14 c0       	rjmp	.+40     	; 0x3232 <_ZN7TwoWire5writeEh+0x54>
    320a:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_ZN7TwoWire13txBufferIndexE>
    320e:	e8 2f       	mov	r30, r24
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	e5 58       	subi	r30, 0x85	; 133
    3214:	f8 4f       	sbci	r31, 0xF8	; 248
    3216:	99 81       	ldd	r25, Y+1	; 0x01
    3218:	90 83       	st	Z, r25
    321a:	8f 5f       	subi	r24, 0xFF	; 255
    321c:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <_ZN7TwoWire13txBufferIndexE>
    3220:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    3224:	04 c0       	rjmp	.+8      	; 0x322e <_ZN7TwoWire5writeEh+0x50>
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	ce 01       	movw	r24, r28
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	da dd       	rcall	.-1100   	; 0x2de2 <twi_transmit>
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	0f 90       	pop	r0
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	08 95       	ret

0000323a <_ZN7TwoWireC1Ev>:
    323a:	fc 01       	movw	r30, r24
    323c:	13 82       	std	Z+3, r1	; 0x03
    323e:	12 82       	std	Z+2, r1	; 0x02
    3240:	88 ee       	ldi	r24, 0xE8	; 232
    3242:	93 e0       	ldi	r25, 0x03	; 3
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	84 83       	std	Z+4, r24	; 0x04
    324a:	95 83       	std	Z+5, r25	; 0x05
    324c:	a6 83       	std	Z+6, r26	; 0x06
    324e:	b7 83       	std	Z+7, r27	; 0x07
    3250:	88 e8       	ldi	r24, 0x88	; 136
    3252:	95 e0       	ldi	r25, 0x05	; 5
    3254:	91 83       	std	Z+1, r25	; 0x01
    3256:	80 83       	st	Z, r24
    3258:	08 95       	ret

0000325a <_ZN7TwoWire5beginEv>:
    325a:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    325e:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    3262:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <_ZN7TwoWire13txBufferIndexE>
    3266:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    326a:	ff dc       	rcall	.-1538   	; 0x2c6a <twi_init>
    326c:	87 eb       	ldi	r24, 0xB7	; 183
    326e:	98 e1       	ldi	r25, 0x18	; 24
    3270:	e5 dd       	rcall	.-1078   	; 0x2e3c <twi_attachSlaveTxEvent>
    3272:	8d e8       	ldi	r24, 0x8D	; 141
    3274:	98 e1       	ldi	r25, 0x18	; 24
    3276:	dd cd       	rjmp	.-1094   	; 0x2e32 <twi_attachSlaveRxEvent>

00003278 <_ZN7TwoWire17beginTransmissionEh>:
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <_ZN7TwoWire12transmittingE>
    327e:	60 93 9b 07 	sts	0x079B, r22	; 0x80079b <_ZN7TwoWire9txAddressE>
    3282:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <_ZN7TwoWire13txBufferIndexE>
    3286:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    328a:	08 95       	ret

0000328c <_ZN7TwoWire17beginTransmissionEi>:
    328c:	f5 cf       	rjmp	.-22     	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>

0000328e <_ZN7TwoWire15endTransmissionEh>:
    328e:	0f 93       	push	r16
    3290:	06 2f       	mov	r16, r22
    3292:	21 e0       	ldi	r18, 0x01	; 1
    3294:	40 91 79 07 	lds	r20, 0x0779	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    3298:	6b e7       	ldi	r22, 0x7B	; 123
    329a:	77 e0       	ldi	r23, 0x07	; 7
    329c:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <_ZN7TwoWire9txAddressE>
    32a0:	4a dd       	rcall	.-1388   	; 0x2d36 <twi_writeTo>
    32a2:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <_ZN7TwoWire13txBufferIndexE>
    32a6:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <_ZN7TwoWire14txBufferLengthE>
    32aa:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <_ZN7TwoWire12transmittingE>
    32ae:	0f 91       	pop	r16
    32b0:	08 95       	ret

000032b2 <_ZN7TwoWire11requestFromEhhmhh>:
    32b2:	4f 92       	push	r4
    32b4:	5f 92       	push	r5
    32b6:	6f 92       	push	r6
    32b8:	7f 92       	push	r7
    32ba:	af 92       	push	r10
    32bc:	bf 92       	push	r11
    32be:	cf 92       	push	r12
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	5c 01       	movw	r10, r24
    32ce:	f6 2e       	mov	r15, r22
    32d0:	d4 2f       	mov	r29, r20
    32d2:	28 01       	movw	r4, r16
    32d4:	39 01       	movw	r6, r18
    32d6:	ee 20       	and	r14, r14
    32d8:	11 f1       	breq	.+68     	; 0x331e <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    32da:	ce df       	rcall	.-100    	; 0x3278 <_ZN7TwoWire17beginTransmissionEh>
    32dc:	ce 2d       	mov	r28, r14
    32de:	c4 30       	cpi	r28, 0x04	; 4
    32e0:	08 f0       	brcs	.+2      	; 0x32e4 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    32e2:	c3 e0       	ldi	r28, 0x03	; 3
    32e4:	c1 50       	subi	r28, 0x01	; 1
    32e6:	c0 f0       	brcs	.+48     	; 0x3318 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    32e8:	28 e0       	ldi	r18, 0x08	; 8
    32ea:	c2 9f       	mul	r28, r18
    32ec:	c0 01       	movw	r24, r0
    32ee:	11 24       	eor	r1, r1
    32f0:	a3 01       	movw	r20, r6
    32f2:	92 01       	movw	r18, r4
    32f4:	04 c0       	rjmp	.+8      	; 0x32fe <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    32f6:	56 95       	lsr	r21
    32f8:	47 95       	ror	r20
    32fa:	37 95       	ror	r19
    32fc:	27 95       	ror	r18
    32fe:	8a 95       	dec	r24
    3300:	d2 f7       	brpl	.-12     	; 0x32f6 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    3302:	ca 01       	movw	r24, r20
    3304:	b9 01       	movw	r22, r18
    3306:	d5 01       	movw	r26, r10
    3308:	ed 91       	ld	r30, X+
    330a:	fc 91       	ld	r31, X
    330c:	01 90       	ld	r0, Z+
    330e:	f0 81       	ld	r31, Z
    3310:	e0 2d       	mov	r30, r0
    3312:	c5 01       	movw	r24, r10
    3314:	19 95       	eicall
    3316:	e6 cf       	rjmp	.-52     	; 0x32e4 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	c5 01       	movw	r24, r10
    331c:	b8 df       	rcall	.-144    	; 0x328e <_ZN7TwoWire15endTransmissionEh>
    331e:	4d 2f       	mov	r20, r29
    3320:	d1 32       	cpi	r29, 0x21	; 33
    3322:	08 f0       	brcs	.+2      	; 0x3326 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    3324:	40 e2       	ldi	r20, 0x20	; 32
    3326:	2c 2d       	mov	r18, r12
    3328:	6e e9       	ldi	r22, 0x9E	; 158
    332a:	77 e0       	ldi	r23, 0x07	; 7
    332c:	8f 2d       	mov	r24, r15
    332e:	bb dc       	rcall	.-1674   	; 0x2ca6 <twi_readFrom>
    3330:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <_ZN7TwoWire13rxBufferIndexE>
    3334:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <_ZN7TwoWire14rxBufferLengthE>
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1f 91       	pop	r17
    333e:	0f 91       	pop	r16
    3340:	ff 90       	pop	r15
    3342:	ef 90       	pop	r14
    3344:	cf 90       	pop	r12
    3346:	bf 90       	pop	r11
    3348:	af 90       	pop	r10
    334a:	7f 90       	pop	r7
    334c:	6f 90       	pop	r6
    334e:	5f 90       	pop	r5
    3350:	4f 90       	pop	r4
    3352:	08 95       	ret

00003354 <_ZN7TwoWire11requestFromEhhh>:
    3354:	cf 92       	push	r12
    3356:	ef 92       	push	r14
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	c2 2e       	mov	r12, r18
    335e:	e1 2c       	mov	r14, r1
    3360:	00 e0       	ldi	r16, 0x00	; 0
    3362:	10 e0       	ldi	r17, 0x00	; 0
    3364:	98 01       	movw	r18, r16
    3366:	a5 df       	rcall	.-182    	; 0x32b2 <_ZN7TwoWire11requestFromEhhmhh>
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	ef 90       	pop	r14
    336e:	cf 90       	pop	r12
    3370:	08 95       	ret

00003372 <_ZN7TwoWire11requestFromEhh>:
    3372:	21 e0       	ldi	r18, 0x01	; 1
    3374:	ef cf       	rjmp	.-34     	; 0x3354 <_ZN7TwoWire11requestFromEhhh>

00003376 <_ZN7TwoWire11requestFromEii>:
    3376:	21 e0       	ldi	r18, 0x01	; 1
    3378:	ed cf       	rjmp	.-38     	; 0x3354 <_ZN7TwoWire11requestFromEhhh>

0000337a <_ZN7TwoWire15endTransmissionEv>:
    337a:	61 e0       	ldi	r22, 0x01	; 1
    337c:	88 cf       	rjmp	.-240    	; 0x328e <_ZN7TwoWire15endTransmissionEh>

0000337e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    337e:	88 e6       	ldi	r24, 0x68	; 104
    3380:	97 e0       	ldi	r25, 0x07	; 7
    3382:	5b cf       	rjmp	.-330    	; 0x323a <_ZN7TwoWireC1Ev>

00003384 <_ZN20TempHumidPressSensorC1Ev>:
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;

// constructor
TempHumidPressSensor::TempHumidPressSensor()
    3384:	08 95       	ret

00003386 <_ZN20TempHumidPressSensorD1Ev>:
{
} //constructor

// destructor
TempHumidPressSensor::~TempHumidPressSensor()
    3386:	08 95       	ret

00003388 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>:
{
} //~destructor

void TempHumidPressSensor::initTempHumidPressSensor()
{
	bool status = bme280.begin();
    3388:	8e eb       	ldi	r24, 0xBE	; 190
    338a:	97 e0       	ldi	r25, 0x07	; 7
    338c:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2805beginEv>
	
	if (!status)
    3390:	81 11       	cpse	r24, r1
    3392:	06 c0       	rjmp	.+12     	; 0x33a0 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x18>
	{
		Serial.println("Error: Couldn't find BME280, please ensure that the BME280 is powered and correctly wired!");
    3394:	67 e1       	ldi	r22, 0x17	; 23
    3396:	73 e0       	ldi	r23, 0x03	; 3
    3398:	81 ef       	ldi	r24, 0xF1	; 241
    339a:	97 e0       	ldi	r25, 0x07	; 7
    339c:	72 d6       	rcall	.+3300   	; 0x4082 <_ZN5Print7printlnEPKc>
    339e:	ff cf       	rjmp	.-2      	; 0x339e <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x16>
		while (1);
	}
	else if (status)
	{
		Serial.println("BME280\tsuccessfully initialized!");
    33a0:	66 e9       	ldi	r22, 0x96	; 150
    33a2:	75 e0       	ldi	r23, 0x05	; 5
    33a4:	81 ef       	ldi	r24, 0xF1	; 241
    33a6:	97 e0       	ldi	r25, 0x07	; 7
    33a8:	6c c6       	rjmp	.+3288   	; 0x4082 <_ZN5Print7printlnEPKc>

000033aa <_ZN20TempHumidPressSensor7setDataEv>:
	}
} //initTempHumidPressSensor

void TempHumidPressSensor::setData()
{
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	ec 01       	movw	r28, r24
	temperatur = bme280.readTemperature();
    33b0:	8e eb       	ldi	r24, 0xBE	; 190
    33b2:	97 e0       	ldi	r25, 0x07	; 7
    33b4:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN15Adafruit_BME28015readTemperatureEv>
    33b8:	68 83       	st	Y, r22
    33ba:	79 83       	std	Y+1, r23	; 0x01
    33bc:	8a 83       	std	Y+2, r24	; 0x02
    33be:	9b 83       	std	Y+3, r25	; 0x03
	humidity = bme280.readHumidity();
    33c0:	8e eb       	ldi	r24, 0xBE	; 190
    33c2:	97 e0       	ldi	r25, 0x07	; 7
    33c4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_ZN15Adafruit_BME28012readHumidityEv>
    33c8:	6c 83       	std	Y+4, r22	; 0x04
    33ca:	7d 83       	std	Y+5, r23	; 0x05
    33cc:	8e 83       	std	Y+6, r24	; 0x06
    33ce:	9f 83       	std	Y+7, r25	; 0x07
	pressure = bme280.readPressure() / (float) 100.0;
    33d0:	8e eb       	ldi	r24, 0xBE	; 190
    33d2:	97 e0       	ldi	r25, 0x07	; 7
    33d4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN15Adafruit_BME28012readPressureEv>
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	48 ec       	ldi	r20, 0xC8	; 200
    33de:	52 e4       	ldi	r21, 0x42	; 66
    33e0:	af d0       	rcall	.+350    	; 0x3540 <__divsf3>
    33e2:	68 87       	std	Y+8, r22	; 0x08
    33e4:	79 87       	std	Y+9, r23	; 0x09
    33e6:	8a 87       	std	Y+10, r24	; 0x0a
    33e8:	9b 87       	std	Y+11, r25	; 0x0b
	altitude = bme280.readAltitude(SEALEVELPRESSURE_HPA);
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	50 e5       	ldi	r21, 0x50	; 80
    33ee:	6d e7       	ldi	r22, 0x7D	; 125
    33f0:	74 e4       	ldi	r23, 0x44	; 68
    33f2:	8e eb       	ldi	r24, 0xBE	; 190
    33f4:	97 e0       	ldi	r25, 0x07	; 7
    33f6:	0e 94 48 10 	call	0x2090	; 0x2090 <_ZN15Adafruit_BME28012readAltitudeEf>
    33fa:	6c 87       	std	Y+12, r22	; 0x0c
    33fc:	7d 87       	std	Y+13, r23	; 0x0d
    33fe:	8e 87       	std	Y+14, r24	; 0x0e
    3400:	9f 87       	std	Y+15, r25	; 0x0f
} //setData
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	08 95       	ret

00003408 <_ZN20TempHumidPressSensor7getDataEv>:

BME280SensorData TempHumidPressSensor::getData()
{
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	ec 01       	movw	r28, r24
    3412:	8b 01       	movw	r16, r22
	setData();
    3414:	cb 01       	movw	r24, r22
    3416:	c9 df       	rcall	.-110    	; 0x33aa <_ZN20TempHumidPressSensor7setDataEv>
	BME280SensorData sensordata;
	
	sensordata.t = temperatur;
    3418:	f8 01       	movw	r30, r16
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	a2 81       	ldd	r26, Z+2	; 0x02
    3420:	b3 81       	ldd	r27, Z+3	; 0x03
    3422:	88 83       	st	Y, r24
    3424:	99 83       	std	Y+1, r25	; 0x01
    3426:	aa 83       	std	Y+2, r26	; 0x02
    3428:	bb 83       	std	Y+3, r27	; 0x03
	sensordata.h = humidity;
    342a:	84 81       	ldd	r24, Z+4	; 0x04
    342c:	95 81       	ldd	r25, Z+5	; 0x05
    342e:	a6 81       	ldd	r26, Z+6	; 0x06
    3430:	b7 81       	ldd	r27, Z+7	; 0x07
    3432:	8c 83       	std	Y+4, r24	; 0x04
    3434:	9d 83       	std	Y+5, r25	; 0x05
    3436:	ae 83       	std	Y+6, r26	; 0x06
    3438:	bf 83       	std	Y+7, r27	; 0x07
	sensordata.p = pressure;
    343a:	80 85       	ldd	r24, Z+8	; 0x08
    343c:	91 85       	ldd	r25, Z+9	; 0x09
    343e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3440:	b3 85       	ldd	r27, Z+11	; 0x0b
    3442:	88 87       	std	Y+8, r24	; 0x08
    3444:	99 87       	std	Y+9, r25	; 0x09
    3446:	aa 87       	std	Y+10, r26	; 0x0a
    3448:	bb 87       	std	Y+11, r27	; 0x0b
	sensordata.a = altitude;
    344a:	84 85       	ldd	r24, Z+12	; 0x0c
    344c:	95 85       	ldd	r25, Z+13	; 0x0d
    344e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3450:	b7 85       	ldd	r27, Z+15	; 0x0f
    3452:	8c 87       	std	Y+12, r24	; 0x0c
    3454:	9d 87       	std	Y+13, r25	; 0x0d
    3456:	ae 87       	std	Y+14, r26	; 0x0e
    3458:	bf 87       	std	Y+15, r27	; 0x0f
	
	return sensordata;
} //getData
    345a:	ce 01       	movw	r24, r28
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	08 95       	ret

00003466 <_GLOBAL__sub_I_bme280>:
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "SystemDefinitions.h"
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;
    3466:	8e eb       	ldi	r24, 0xBE	; 190
    3468:	97 e0       	ldi	r25, 0x07	; 7
    346a:	0c 94 80 09 	jmp	0x1300	; 0x1300 <_ZN15Adafruit_BME280C1Ev>

0000346e <__subsf3>:
    346e:	50 58       	subi	r21, 0x80	; 128

00003470 <__addsf3>:
    3470:	bb 27       	eor	r27, r27
    3472:	aa 27       	eor	r26, r26
    3474:	0e d0       	rcall	.+28     	; 0x3492 <__addsf3x>
    3476:	96 c1       	rjmp	.+812    	; 0x37a4 <__fp_round>
    3478:	87 d1       	rcall	.+782    	; 0x3788 <__fp_pscA>
    347a:	30 f0       	brcs	.+12     	; 0x3488 <__addsf3+0x18>
    347c:	8c d1       	rcall	.+792    	; 0x3796 <__fp_pscB>
    347e:	20 f0       	brcs	.+8      	; 0x3488 <__addsf3+0x18>
    3480:	31 f4       	brne	.+12     	; 0x348e <__addsf3+0x1e>
    3482:	9f 3f       	cpi	r25, 0xFF	; 255
    3484:	11 f4       	brne	.+4      	; 0x348a <__addsf3+0x1a>
    3486:	1e f4       	brtc	.+6      	; 0x348e <__addsf3+0x1e>
    3488:	6c c1       	rjmp	.+728    	; 0x3762 <__fp_nan>
    348a:	0e f4       	brtc	.+2      	; 0x348e <__addsf3+0x1e>
    348c:	e0 95       	com	r30
    348e:	e7 fb       	bst	r30, 7
    3490:	62 c1       	rjmp	.+708    	; 0x3756 <__fp_inf>

00003492 <__addsf3x>:
    3492:	e9 2f       	mov	r30, r25
    3494:	98 d1       	rcall	.+816    	; 0x37c6 <__fp_split3>
    3496:	80 f3       	brcs	.-32     	; 0x3478 <__addsf3+0x8>
    3498:	ba 17       	cp	r27, r26
    349a:	62 07       	cpc	r22, r18
    349c:	73 07       	cpc	r23, r19
    349e:	84 07       	cpc	r24, r20
    34a0:	95 07       	cpc	r25, r21
    34a2:	18 f0       	brcs	.+6      	; 0x34aa <__addsf3x+0x18>
    34a4:	71 f4       	brne	.+28     	; 0x34c2 <__addsf3x+0x30>
    34a6:	9e f5       	brtc	.+102    	; 0x350e <__addsf3x+0x7c>
    34a8:	b0 c1       	rjmp	.+864    	; 0x380a <__fp_zero>
    34aa:	0e f4       	brtc	.+2      	; 0x34ae <__addsf3x+0x1c>
    34ac:	e0 95       	com	r30
    34ae:	0b 2e       	mov	r0, r27
    34b0:	ba 2f       	mov	r27, r26
    34b2:	a0 2d       	mov	r26, r0
    34b4:	0b 01       	movw	r0, r22
    34b6:	b9 01       	movw	r22, r18
    34b8:	90 01       	movw	r18, r0
    34ba:	0c 01       	movw	r0, r24
    34bc:	ca 01       	movw	r24, r20
    34be:	a0 01       	movw	r20, r0
    34c0:	11 24       	eor	r1, r1
    34c2:	ff 27       	eor	r31, r31
    34c4:	59 1b       	sub	r21, r25
    34c6:	99 f0       	breq	.+38     	; 0x34ee <__addsf3x+0x5c>
    34c8:	59 3f       	cpi	r21, 0xF9	; 249
    34ca:	50 f4       	brcc	.+20     	; 0x34e0 <__addsf3x+0x4e>
    34cc:	50 3e       	cpi	r21, 0xE0	; 224
    34ce:	68 f1       	brcs	.+90     	; 0x352a <__addsf3x+0x98>
    34d0:	1a 16       	cp	r1, r26
    34d2:	f0 40       	sbci	r31, 0x00	; 0
    34d4:	a2 2f       	mov	r26, r18
    34d6:	23 2f       	mov	r18, r19
    34d8:	34 2f       	mov	r19, r20
    34da:	44 27       	eor	r20, r20
    34dc:	58 5f       	subi	r21, 0xF8	; 248
    34de:	f3 cf       	rjmp	.-26     	; 0x34c6 <__addsf3x+0x34>
    34e0:	46 95       	lsr	r20
    34e2:	37 95       	ror	r19
    34e4:	27 95       	ror	r18
    34e6:	a7 95       	ror	r26
    34e8:	f0 40       	sbci	r31, 0x00	; 0
    34ea:	53 95       	inc	r21
    34ec:	c9 f7       	brne	.-14     	; 0x34e0 <__addsf3x+0x4e>
    34ee:	7e f4       	brtc	.+30     	; 0x350e <__addsf3x+0x7c>
    34f0:	1f 16       	cp	r1, r31
    34f2:	ba 0b       	sbc	r27, r26
    34f4:	62 0b       	sbc	r22, r18
    34f6:	73 0b       	sbc	r23, r19
    34f8:	84 0b       	sbc	r24, r20
    34fa:	ba f0       	brmi	.+46     	; 0x352a <__addsf3x+0x98>
    34fc:	91 50       	subi	r25, 0x01	; 1
    34fe:	a1 f0       	breq	.+40     	; 0x3528 <__addsf3x+0x96>
    3500:	ff 0f       	add	r31, r31
    3502:	bb 1f       	adc	r27, r27
    3504:	66 1f       	adc	r22, r22
    3506:	77 1f       	adc	r23, r23
    3508:	88 1f       	adc	r24, r24
    350a:	c2 f7       	brpl	.-16     	; 0x34fc <__addsf3x+0x6a>
    350c:	0e c0       	rjmp	.+28     	; 0x352a <__addsf3x+0x98>
    350e:	ba 0f       	add	r27, r26
    3510:	62 1f       	adc	r22, r18
    3512:	73 1f       	adc	r23, r19
    3514:	84 1f       	adc	r24, r20
    3516:	48 f4       	brcc	.+18     	; 0x352a <__addsf3x+0x98>
    3518:	87 95       	ror	r24
    351a:	77 95       	ror	r23
    351c:	67 95       	ror	r22
    351e:	b7 95       	ror	r27
    3520:	f7 95       	ror	r31
    3522:	9e 3f       	cpi	r25, 0xFE	; 254
    3524:	08 f0       	brcs	.+2      	; 0x3528 <__addsf3x+0x96>
    3526:	b3 cf       	rjmp	.-154    	; 0x348e <__addsf3+0x1e>
    3528:	93 95       	inc	r25
    352a:	88 0f       	add	r24, r24
    352c:	08 f0       	brcs	.+2      	; 0x3530 <__addsf3x+0x9e>
    352e:	99 27       	eor	r25, r25
    3530:	ee 0f       	add	r30, r30
    3532:	97 95       	ror	r25
    3534:	87 95       	ror	r24
    3536:	08 95       	ret

00003538 <__cmpsf2>:
    3538:	ea d0       	rcall	.+468    	; 0x370e <__fp_cmp>
    353a:	08 f4       	brcc	.+2      	; 0x353e <__cmpsf2+0x6>
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	08 95       	ret

00003540 <__divsf3>:
    3540:	0c d0       	rcall	.+24     	; 0x355a <__divsf3x>
    3542:	30 c1       	rjmp	.+608    	; 0x37a4 <__fp_round>
    3544:	28 d1       	rcall	.+592    	; 0x3796 <__fp_pscB>
    3546:	40 f0       	brcs	.+16     	; 0x3558 <__divsf3+0x18>
    3548:	1f d1       	rcall	.+574    	; 0x3788 <__fp_pscA>
    354a:	30 f0       	brcs	.+12     	; 0x3558 <__divsf3+0x18>
    354c:	21 f4       	brne	.+8      	; 0x3556 <__divsf3+0x16>
    354e:	5f 3f       	cpi	r21, 0xFF	; 255
    3550:	19 f0       	breq	.+6      	; 0x3558 <__divsf3+0x18>
    3552:	01 c1       	rjmp	.+514    	; 0x3756 <__fp_inf>
    3554:	51 11       	cpse	r21, r1
    3556:	5a c1       	rjmp	.+692    	; 0x380c <__fp_szero>
    3558:	04 c1       	rjmp	.+520    	; 0x3762 <__fp_nan>

0000355a <__divsf3x>:
    355a:	35 d1       	rcall	.+618    	; 0x37c6 <__fp_split3>
    355c:	98 f3       	brcs	.-26     	; 0x3544 <__divsf3+0x4>

0000355e <__divsf3_pse>:
    355e:	99 23       	and	r25, r25
    3560:	c9 f3       	breq	.-14     	; 0x3554 <__divsf3+0x14>
    3562:	55 23       	and	r21, r21
    3564:	b1 f3       	breq	.-20     	; 0x3552 <__divsf3+0x12>
    3566:	95 1b       	sub	r25, r21
    3568:	55 0b       	sbc	r21, r21
    356a:	bb 27       	eor	r27, r27
    356c:	aa 27       	eor	r26, r26
    356e:	62 17       	cp	r22, r18
    3570:	73 07       	cpc	r23, r19
    3572:	84 07       	cpc	r24, r20
    3574:	38 f0       	brcs	.+14     	; 0x3584 <__divsf3_pse+0x26>
    3576:	9f 5f       	subi	r25, 0xFF	; 255
    3578:	5f 4f       	sbci	r21, 0xFF	; 255
    357a:	22 0f       	add	r18, r18
    357c:	33 1f       	adc	r19, r19
    357e:	44 1f       	adc	r20, r20
    3580:	aa 1f       	adc	r26, r26
    3582:	a9 f3       	breq	.-22     	; 0x356e <__divsf3_pse+0x10>
    3584:	33 d0       	rcall	.+102    	; 0x35ec <__divsf3_pse+0x8e>
    3586:	0e 2e       	mov	r0, r30
    3588:	3a f0       	brmi	.+14     	; 0x3598 <__divsf3_pse+0x3a>
    358a:	e0 e8       	ldi	r30, 0x80	; 128
    358c:	30 d0       	rcall	.+96     	; 0x35ee <__divsf3_pse+0x90>
    358e:	91 50       	subi	r25, 0x01	; 1
    3590:	50 40       	sbci	r21, 0x00	; 0
    3592:	e6 95       	lsr	r30
    3594:	00 1c       	adc	r0, r0
    3596:	ca f7       	brpl	.-14     	; 0x358a <__divsf3_pse+0x2c>
    3598:	29 d0       	rcall	.+82     	; 0x35ec <__divsf3_pse+0x8e>
    359a:	fe 2f       	mov	r31, r30
    359c:	27 d0       	rcall	.+78     	; 0x35ec <__divsf3_pse+0x8e>
    359e:	66 0f       	add	r22, r22
    35a0:	77 1f       	adc	r23, r23
    35a2:	88 1f       	adc	r24, r24
    35a4:	bb 1f       	adc	r27, r27
    35a6:	26 17       	cp	r18, r22
    35a8:	37 07       	cpc	r19, r23
    35aa:	48 07       	cpc	r20, r24
    35ac:	ab 07       	cpc	r26, r27
    35ae:	b0 e8       	ldi	r27, 0x80	; 128
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <__divsf3_pse+0x56>
    35b2:	bb 0b       	sbc	r27, r27
    35b4:	80 2d       	mov	r24, r0
    35b6:	bf 01       	movw	r22, r30
    35b8:	ff 27       	eor	r31, r31
    35ba:	93 58       	subi	r25, 0x83	; 131
    35bc:	5f 4f       	sbci	r21, 0xFF	; 255
    35be:	2a f0       	brmi	.+10     	; 0x35ca <__divsf3_pse+0x6c>
    35c0:	9e 3f       	cpi	r25, 0xFE	; 254
    35c2:	51 05       	cpc	r21, r1
    35c4:	68 f0       	brcs	.+26     	; 0x35e0 <__divsf3_pse+0x82>
    35c6:	c7 c0       	rjmp	.+398    	; 0x3756 <__fp_inf>
    35c8:	21 c1       	rjmp	.+578    	; 0x380c <__fp_szero>
    35ca:	5f 3f       	cpi	r21, 0xFF	; 255
    35cc:	ec f3       	brlt	.-6      	; 0x35c8 <__divsf3_pse+0x6a>
    35ce:	98 3e       	cpi	r25, 0xE8	; 232
    35d0:	dc f3       	brlt	.-10     	; 0x35c8 <__divsf3_pse+0x6a>
    35d2:	86 95       	lsr	r24
    35d4:	77 95       	ror	r23
    35d6:	67 95       	ror	r22
    35d8:	b7 95       	ror	r27
    35da:	f7 95       	ror	r31
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	c9 f7       	brne	.-14     	; 0x35d2 <__divsf3_pse+0x74>
    35e0:	88 0f       	add	r24, r24
    35e2:	91 1d       	adc	r25, r1
    35e4:	96 95       	lsr	r25
    35e6:	87 95       	ror	r24
    35e8:	97 f9       	bld	r25, 7
    35ea:	08 95       	ret
    35ec:	e1 e0       	ldi	r30, 0x01	; 1
    35ee:	66 0f       	add	r22, r22
    35f0:	77 1f       	adc	r23, r23
    35f2:	88 1f       	adc	r24, r24
    35f4:	bb 1f       	adc	r27, r27
    35f6:	62 17       	cp	r22, r18
    35f8:	73 07       	cpc	r23, r19
    35fa:	84 07       	cpc	r24, r20
    35fc:	ba 07       	cpc	r27, r26
    35fe:	20 f0       	brcs	.+8      	; 0x3608 <__divsf3_pse+0xaa>
    3600:	62 1b       	sub	r22, r18
    3602:	73 0b       	sbc	r23, r19
    3604:	84 0b       	sbc	r24, r20
    3606:	ba 0b       	sbc	r27, r26
    3608:	ee 1f       	adc	r30, r30
    360a:	88 f7       	brcc	.-30     	; 0x35ee <__divsf3_pse+0x90>
    360c:	e0 95       	com	r30
    360e:	08 95       	ret

00003610 <__floatdisf>:
    3610:	97 fb       	bst	r25, 7
    3612:	0e f4       	brtc	.+2      	; 0x3616 <__floatdisf+0x6>
    3614:	a9 d0       	rcall	.+338    	; 0x3768 <__fp_negdi>
    3616:	3e c0       	rjmp	.+124    	; 0x3694 <__fp_di2sf>

00003618 <__floatunsisf>:
    3618:	e8 94       	clt
    361a:	09 c0       	rjmp	.+18     	; 0x362e <__floatsisf+0x12>

0000361c <__floatsisf>:
    361c:	97 fb       	bst	r25, 7
    361e:	3e f4       	brtc	.+14     	; 0x362e <__floatsisf+0x12>
    3620:	90 95       	com	r25
    3622:	80 95       	com	r24
    3624:	70 95       	com	r23
    3626:	61 95       	neg	r22
    3628:	7f 4f       	sbci	r23, 0xFF	; 255
    362a:	8f 4f       	sbci	r24, 0xFF	; 255
    362c:	9f 4f       	sbci	r25, 0xFF	; 255
    362e:	99 23       	and	r25, r25
    3630:	a9 f0       	breq	.+42     	; 0x365c <__floatsisf+0x40>
    3632:	f9 2f       	mov	r31, r25
    3634:	96 e9       	ldi	r25, 0x96	; 150
    3636:	bb 27       	eor	r27, r27
    3638:	93 95       	inc	r25
    363a:	f6 95       	lsr	r31
    363c:	87 95       	ror	r24
    363e:	77 95       	ror	r23
    3640:	67 95       	ror	r22
    3642:	b7 95       	ror	r27
    3644:	f1 11       	cpse	r31, r1
    3646:	f8 cf       	rjmp	.-16     	; 0x3638 <__floatsisf+0x1c>
    3648:	fa f4       	brpl	.+62     	; 0x3688 <__floatsisf+0x6c>
    364a:	bb 0f       	add	r27, r27
    364c:	11 f4       	brne	.+4      	; 0x3652 <__floatsisf+0x36>
    364e:	60 ff       	sbrs	r22, 0
    3650:	1b c0       	rjmp	.+54     	; 0x3688 <__floatsisf+0x6c>
    3652:	6f 5f       	subi	r22, 0xFF	; 255
    3654:	7f 4f       	sbci	r23, 0xFF	; 255
    3656:	8f 4f       	sbci	r24, 0xFF	; 255
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	16 c0       	rjmp	.+44     	; 0x3688 <__floatsisf+0x6c>
    365c:	88 23       	and	r24, r24
    365e:	11 f0       	breq	.+4      	; 0x3664 <__floatsisf+0x48>
    3660:	96 e9       	ldi	r25, 0x96	; 150
    3662:	11 c0       	rjmp	.+34     	; 0x3686 <__floatsisf+0x6a>
    3664:	77 23       	and	r23, r23
    3666:	21 f0       	breq	.+8      	; 0x3670 <__floatsisf+0x54>
    3668:	9e e8       	ldi	r25, 0x8E	; 142
    366a:	87 2f       	mov	r24, r23
    366c:	76 2f       	mov	r23, r22
    366e:	05 c0       	rjmp	.+10     	; 0x367a <__floatsisf+0x5e>
    3670:	66 23       	and	r22, r22
    3672:	71 f0       	breq	.+28     	; 0x3690 <__floatsisf+0x74>
    3674:	96 e8       	ldi	r25, 0x86	; 134
    3676:	86 2f       	mov	r24, r22
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	2a f0       	brmi	.+10     	; 0x3688 <__floatsisf+0x6c>
    367e:	9a 95       	dec	r25
    3680:	66 0f       	add	r22, r22
    3682:	77 1f       	adc	r23, r23
    3684:	88 1f       	adc	r24, r24
    3686:	da f7       	brpl	.-10     	; 0x367e <__floatsisf+0x62>
    3688:	88 0f       	add	r24, r24
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	97 f9       	bld	r25, 7
    3690:	08 95       	ret

00003692 <__floatundisf>:
    3692:	e8 94       	clt

00003694 <__fp_di2sf>:
    3694:	f9 2f       	mov	r31, r25
    3696:	96 eb       	ldi	r25, 0xB6	; 182
    3698:	ff 23       	and	r31, r31
    369a:	81 f0       	breq	.+32     	; 0x36bc <__fp_di2sf+0x28>
    369c:	12 16       	cp	r1, r18
    369e:	13 06       	cpc	r1, r19
    36a0:	14 06       	cpc	r1, r20
    36a2:	44 0b       	sbc	r20, r20
    36a4:	93 95       	inc	r25
    36a6:	f6 95       	lsr	r31
    36a8:	87 95       	ror	r24
    36aa:	77 95       	ror	r23
    36ac:	67 95       	ror	r22
    36ae:	57 95       	ror	r21
    36b0:	40 40       	sbci	r20, 0x00	; 0
    36b2:	ff 23       	and	r31, r31
    36b4:	b9 f7       	brne	.-18     	; 0x36a4 <__fp_di2sf+0x10>
    36b6:	1b c0       	rjmp	.+54     	; 0x36ee <__fp_di2sf+0x5a>
    36b8:	99 27       	eor	r25, r25
    36ba:	08 95       	ret
    36bc:	88 23       	and	r24, r24
    36be:	51 f4       	brne	.+20     	; 0x36d4 <__fp_di2sf+0x40>
    36c0:	98 50       	subi	r25, 0x08	; 8
    36c2:	d2 f7       	brpl	.-12     	; 0x36b8 <__fp_di2sf+0x24>
    36c4:	87 2b       	or	r24, r23
    36c6:	76 2f       	mov	r23, r22
    36c8:	65 2f       	mov	r22, r21
    36ca:	54 2f       	mov	r21, r20
    36cc:	43 2f       	mov	r20, r19
    36ce:	32 2f       	mov	r19, r18
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	b1 f3       	breq	.-20     	; 0x36c0 <__fp_di2sf+0x2c>
    36d4:	12 16       	cp	r1, r18
    36d6:	13 06       	cpc	r1, r19
    36d8:	14 06       	cpc	r1, r20
    36da:	44 0b       	sbc	r20, r20
    36dc:	88 23       	and	r24, r24
    36de:	3a f0       	brmi	.+14     	; 0x36ee <__fp_di2sf+0x5a>
    36e0:	9a 95       	dec	r25
    36e2:	44 0f       	add	r20, r20
    36e4:	55 1f       	adc	r21, r21
    36e6:	66 1f       	adc	r22, r22
    36e8:	77 1f       	adc	r23, r23
    36ea:	88 1f       	adc	r24, r24
    36ec:	ca f7       	brpl	.-14     	; 0x36e0 <__fp_di2sf+0x4c>
    36ee:	55 23       	and	r21, r21
    36f0:	4a f4       	brpl	.+18     	; 0x3704 <__fp_di2sf+0x70>
    36f2:	44 0f       	add	r20, r20
    36f4:	55 1f       	adc	r21, r21
    36f6:	11 f4       	brne	.+4      	; 0x36fc <__fp_di2sf+0x68>
    36f8:	60 ff       	sbrs	r22, 0
    36fa:	04 c0       	rjmp	.+8      	; 0x3704 <__fp_di2sf+0x70>
    36fc:	6f 5f       	subi	r22, 0xFF	; 255
    36fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3700:	8f 4f       	sbci	r24, 0xFF	; 255
    3702:	9f 4f       	sbci	r25, 0xFF	; 255
    3704:	88 0f       	add	r24, r24
    3706:	96 95       	lsr	r25
    3708:	87 95       	ror	r24
    370a:	97 f9       	bld	r25, 7
    370c:	08 95       	ret

0000370e <__fp_cmp>:
    370e:	99 0f       	add	r25, r25
    3710:	00 08       	sbc	r0, r0
    3712:	55 0f       	add	r21, r21
    3714:	aa 0b       	sbc	r26, r26
    3716:	e0 e8       	ldi	r30, 0x80	; 128
    3718:	fe ef       	ldi	r31, 0xFE	; 254
    371a:	16 16       	cp	r1, r22
    371c:	17 06       	cpc	r1, r23
    371e:	e8 07       	cpc	r30, r24
    3720:	f9 07       	cpc	r31, r25
    3722:	c0 f0       	brcs	.+48     	; 0x3754 <__fp_cmp+0x46>
    3724:	12 16       	cp	r1, r18
    3726:	13 06       	cpc	r1, r19
    3728:	e4 07       	cpc	r30, r20
    372a:	f5 07       	cpc	r31, r21
    372c:	98 f0       	brcs	.+38     	; 0x3754 <__fp_cmp+0x46>
    372e:	62 1b       	sub	r22, r18
    3730:	73 0b       	sbc	r23, r19
    3732:	84 0b       	sbc	r24, r20
    3734:	95 0b       	sbc	r25, r21
    3736:	39 f4       	brne	.+14     	; 0x3746 <__fp_cmp+0x38>
    3738:	0a 26       	eor	r0, r26
    373a:	61 f0       	breq	.+24     	; 0x3754 <__fp_cmp+0x46>
    373c:	23 2b       	or	r18, r19
    373e:	24 2b       	or	r18, r20
    3740:	25 2b       	or	r18, r21
    3742:	21 f4       	brne	.+8      	; 0x374c <__fp_cmp+0x3e>
    3744:	08 95       	ret
    3746:	0a 26       	eor	r0, r26
    3748:	09 f4       	brne	.+2      	; 0x374c <__fp_cmp+0x3e>
    374a:	a1 40       	sbci	r26, 0x01	; 1
    374c:	a6 95       	lsr	r26
    374e:	8f ef       	ldi	r24, 0xFF	; 255
    3750:	81 1d       	adc	r24, r1
    3752:	81 1d       	adc	r24, r1
    3754:	08 95       	ret

00003756 <__fp_inf>:
    3756:	97 f9       	bld	r25, 7
    3758:	9f 67       	ori	r25, 0x7F	; 127
    375a:	80 e8       	ldi	r24, 0x80	; 128
    375c:	70 e0       	ldi	r23, 0x00	; 0
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	08 95       	ret

00003762 <__fp_nan>:
    3762:	9f ef       	ldi	r25, 0xFF	; 255
    3764:	80 ec       	ldi	r24, 0xC0	; 192
    3766:	08 95       	ret

00003768 <__fp_negdi>:
    3768:	90 95       	com	r25
    376a:	80 95       	com	r24
    376c:	70 95       	com	r23
    376e:	60 95       	com	r22
    3770:	50 95       	com	r21
    3772:	40 95       	com	r20
    3774:	30 95       	com	r19
    3776:	21 95       	neg	r18
    3778:	3f 4f       	sbci	r19, 0xFF	; 255
    377a:	4f 4f       	sbci	r20, 0xFF	; 255
    377c:	5f 4f       	sbci	r21, 0xFF	; 255
    377e:	6f 4f       	sbci	r22, 0xFF	; 255
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	8f 4f       	sbci	r24, 0xFF	; 255
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	08 95       	ret

00003788 <__fp_pscA>:
    3788:	00 24       	eor	r0, r0
    378a:	0a 94       	dec	r0
    378c:	16 16       	cp	r1, r22
    378e:	17 06       	cpc	r1, r23
    3790:	18 06       	cpc	r1, r24
    3792:	09 06       	cpc	r0, r25
    3794:	08 95       	ret

00003796 <__fp_pscB>:
    3796:	00 24       	eor	r0, r0
    3798:	0a 94       	dec	r0
    379a:	12 16       	cp	r1, r18
    379c:	13 06       	cpc	r1, r19
    379e:	14 06       	cpc	r1, r20
    37a0:	05 06       	cpc	r0, r21
    37a2:	08 95       	ret

000037a4 <__fp_round>:
    37a4:	09 2e       	mov	r0, r25
    37a6:	03 94       	inc	r0
    37a8:	00 0c       	add	r0, r0
    37aa:	11 f4       	brne	.+4      	; 0x37b0 <__fp_round+0xc>
    37ac:	88 23       	and	r24, r24
    37ae:	52 f0       	brmi	.+20     	; 0x37c4 <__fp_round+0x20>
    37b0:	bb 0f       	add	r27, r27
    37b2:	40 f4       	brcc	.+16     	; 0x37c4 <__fp_round+0x20>
    37b4:	bf 2b       	or	r27, r31
    37b6:	11 f4       	brne	.+4      	; 0x37bc <__fp_round+0x18>
    37b8:	60 ff       	sbrs	r22, 0
    37ba:	04 c0       	rjmp	.+8      	; 0x37c4 <__fp_round+0x20>
    37bc:	6f 5f       	subi	r22, 0xFF	; 255
    37be:	7f 4f       	sbci	r23, 0xFF	; 255
    37c0:	8f 4f       	sbci	r24, 0xFF	; 255
    37c2:	9f 4f       	sbci	r25, 0xFF	; 255
    37c4:	08 95       	ret

000037c6 <__fp_split3>:
    37c6:	57 fd       	sbrc	r21, 7
    37c8:	90 58       	subi	r25, 0x80	; 128
    37ca:	44 0f       	add	r20, r20
    37cc:	55 1f       	adc	r21, r21
    37ce:	59 f0       	breq	.+22     	; 0x37e6 <__fp_splitA+0x10>
    37d0:	5f 3f       	cpi	r21, 0xFF	; 255
    37d2:	71 f0       	breq	.+28     	; 0x37f0 <__fp_splitA+0x1a>
    37d4:	47 95       	ror	r20

000037d6 <__fp_splitA>:
    37d6:	88 0f       	add	r24, r24
    37d8:	97 fb       	bst	r25, 7
    37da:	99 1f       	adc	r25, r25
    37dc:	61 f0       	breq	.+24     	; 0x37f6 <__fp_splitA+0x20>
    37de:	9f 3f       	cpi	r25, 0xFF	; 255
    37e0:	79 f0       	breq	.+30     	; 0x3800 <__fp_splitA+0x2a>
    37e2:	87 95       	ror	r24
    37e4:	08 95       	ret
    37e6:	12 16       	cp	r1, r18
    37e8:	13 06       	cpc	r1, r19
    37ea:	14 06       	cpc	r1, r20
    37ec:	55 1f       	adc	r21, r21
    37ee:	f2 cf       	rjmp	.-28     	; 0x37d4 <__fp_split3+0xe>
    37f0:	46 95       	lsr	r20
    37f2:	f1 df       	rcall	.-30     	; 0x37d6 <__fp_splitA>
    37f4:	08 c0       	rjmp	.+16     	; 0x3806 <__fp_splitA+0x30>
    37f6:	16 16       	cp	r1, r22
    37f8:	17 06       	cpc	r1, r23
    37fa:	18 06       	cpc	r1, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	f1 cf       	rjmp	.-30     	; 0x37e2 <__fp_splitA+0xc>
    3800:	86 95       	lsr	r24
    3802:	71 05       	cpc	r23, r1
    3804:	61 05       	cpc	r22, r1
    3806:	08 94       	sec
    3808:	08 95       	ret

0000380a <__fp_zero>:
    380a:	e8 94       	clt

0000380c <__fp_szero>:
    380c:	bb 27       	eor	r27, r27
    380e:	66 27       	eor	r22, r22
    3810:	77 27       	eor	r23, r23
    3812:	cb 01       	movw	r24, r22
    3814:	97 f9       	bld	r25, 7
    3816:	08 95       	ret

00003818 <__gesf2>:
    3818:	7a df       	rcall	.-268    	; 0x370e <__fp_cmp>
    381a:	08 f4       	brcc	.+2      	; 0x381e <__gesf2+0x6>
    381c:	8f ef       	ldi	r24, 0xFF	; 255
    381e:	08 95       	ret

00003820 <__mulsf3>:
    3820:	0b d0       	rcall	.+22     	; 0x3838 <__mulsf3x>
    3822:	c0 cf       	rjmp	.-128    	; 0x37a4 <__fp_round>
    3824:	b1 df       	rcall	.-158    	; 0x3788 <__fp_pscA>
    3826:	28 f0       	brcs	.+10     	; 0x3832 <__mulsf3+0x12>
    3828:	b6 df       	rcall	.-148    	; 0x3796 <__fp_pscB>
    382a:	18 f0       	brcs	.+6      	; 0x3832 <__mulsf3+0x12>
    382c:	95 23       	and	r25, r21
    382e:	09 f0       	breq	.+2      	; 0x3832 <__mulsf3+0x12>
    3830:	92 cf       	rjmp	.-220    	; 0x3756 <__fp_inf>
    3832:	97 cf       	rjmp	.-210    	; 0x3762 <__fp_nan>
    3834:	11 24       	eor	r1, r1
    3836:	ea cf       	rjmp	.-44     	; 0x380c <__fp_szero>

00003838 <__mulsf3x>:
    3838:	c6 df       	rcall	.-116    	; 0x37c6 <__fp_split3>
    383a:	a0 f3       	brcs	.-24     	; 0x3824 <__mulsf3+0x4>

0000383c <__mulsf3_pse>:
    383c:	95 9f       	mul	r25, r21
    383e:	d1 f3       	breq	.-12     	; 0x3834 <__mulsf3+0x14>
    3840:	95 0f       	add	r25, r21
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	55 1f       	adc	r21, r21
    3846:	62 9f       	mul	r22, r18
    3848:	f0 01       	movw	r30, r0
    384a:	72 9f       	mul	r23, r18
    384c:	bb 27       	eor	r27, r27
    384e:	f0 0d       	add	r31, r0
    3850:	b1 1d       	adc	r27, r1
    3852:	63 9f       	mul	r22, r19
    3854:	aa 27       	eor	r26, r26
    3856:	f0 0d       	add	r31, r0
    3858:	b1 1d       	adc	r27, r1
    385a:	aa 1f       	adc	r26, r26
    385c:	64 9f       	mul	r22, r20
    385e:	66 27       	eor	r22, r22
    3860:	b0 0d       	add	r27, r0
    3862:	a1 1d       	adc	r26, r1
    3864:	66 1f       	adc	r22, r22
    3866:	82 9f       	mul	r24, r18
    3868:	22 27       	eor	r18, r18
    386a:	b0 0d       	add	r27, r0
    386c:	a1 1d       	adc	r26, r1
    386e:	62 1f       	adc	r22, r18
    3870:	73 9f       	mul	r23, r19
    3872:	b0 0d       	add	r27, r0
    3874:	a1 1d       	adc	r26, r1
    3876:	62 1f       	adc	r22, r18
    3878:	83 9f       	mul	r24, r19
    387a:	a0 0d       	add	r26, r0
    387c:	61 1d       	adc	r22, r1
    387e:	22 1f       	adc	r18, r18
    3880:	74 9f       	mul	r23, r20
    3882:	33 27       	eor	r19, r19
    3884:	a0 0d       	add	r26, r0
    3886:	61 1d       	adc	r22, r1
    3888:	23 1f       	adc	r18, r19
    388a:	84 9f       	mul	r24, r20
    388c:	60 0d       	add	r22, r0
    388e:	21 1d       	adc	r18, r1
    3890:	82 2f       	mov	r24, r18
    3892:	76 2f       	mov	r23, r22
    3894:	6a 2f       	mov	r22, r26
    3896:	11 24       	eor	r1, r1
    3898:	9f 57       	subi	r25, 0x7F	; 127
    389a:	50 40       	sbci	r21, 0x00	; 0
    389c:	8a f0       	brmi	.+34     	; 0x38c0 <__mulsf3_pse+0x84>
    389e:	e1 f0       	breq	.+56     	; 0x38d8 <__mulsf3_pse+0x9c>
    38a0:	88 23       	and	r24, r24
    38a2:	4a f0       	brmi	.+18     	; 0x38b6 <__mulsf3_pse+0x7a>
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	bb 1f       	adc	r27, r27
    38aa:	66 1f       	adc	r22, r22
    38ac:	77 1f       	adc	r23, r23
    38ae:	88 1f       	adc	r24, r24
    38b0:	91 50       	subi	r25, 0x01	; 1
    38b2:	50 40       	sbci	r21, 0x00	; 0
    38b4:	a9 f7       	brne	.-22     	; 0x38a0 <__mulsf3_pse+0x64>
    38b6:	9e 3f       	cpi	r25, 0xFE	; 254
    38b8:	51 05       	cpc	r21, r1
    38ba:	70 f0       	brcs	.+28     	; 0x38d8 <__mulsf3_pse+0x9c>
    38bc:	4c cf       	rjmp	.-360    	; 0x3756 <__fp_inf>
    38be:	a6 cf       	rjmp	.-180    	; 0x380c <__fp_szero>
    38c0:	5f 3f       	cpi	r21, 0xFF	; 255
    38c2:	ec f3       	brlt	.-6      	; 0x38be <__mulsf3_pse+0x82>
    38c4:	98 3e       	cpi	r25, 0xE8	; 232
    38c6:	dc f3       	brlt	.-10     	; 0x38be <__mulsf3_pse+0x82>
    38c8:	86 95       	lsr	r24
    38ca:	77 95       	ror	r23
    38cc:	67 95       	ror	r22
    38ce:	b7 95       	ror	r27
    38d0:	f7 95       	ror	r31
    38d2:	e7 95       	ror	r30
    38d4:	9f 5f       	subi	r25, 0xFF	; 255
    38d6:	c1 f7       	brne	.-16     	; 0x38c8 <__mulsf3_pse+0x8c>
    38d8:	fe 2b       	or	r31, r30
    38da:	88 0f       	add	r24, r24
    38dc:	91 1d       	adc	r25, r1
    38de:	96 95       	lsr	r25
    38e0:	87 95       	ror	r24
    38e2:	97 f9       	bld	r25, 7
    38e4:	08 95       	ret

000038e6 <pow>:
    38e6:	fa 01       	movw	r30, r20
    38e8:	ee 0f       	add	r30, r30
    38ea:	ff 1f       	adc	r31, r31
    38ec:	30 96       	adiw	r30, 0x00	; 0
    38ee:	21 05       	cpc	r18, r1
    38f0:	31 05       	cpc	r19, r1
    38f2:	99 f1       	breq	.+102    	; 0x395a <pow+0x74>
    38f4:	61 15       	cp	r22, r1
    38f6:	71 05       	cpc	r23, r1
    38f8:	61 f4       	brne	.+24     	; 0x3912 <pow+0x2c>
    38fa:	80 38       	cpi	r24, 0x80	; 128
    38fc:	bf e3       	ldi	r27, 0x3F	; 63
    38fe:	9b 07       	cpc	r25, r27
    3900:	49 f1       	breq	.+82     	; 0x3954 <pow+0x6e>
    3902:	68 94       	set
    3904:	90 38       	cpi	r25, 0x80	; 128
    3906:	81 05       	cpc	r24, r1
    3908:	61 f0       	breq	.+24     	; 0x3922 <pow+0x3c>
    390a:	80 38       	cpi	r24, 0x80	; 128
    390c:	bf ef       	ldi	r27, 0xFF	; 255
    390e:	9b 07       	cpc	r25, r27
    3910:	41 f0       	breq	.+16     	; 0x3922 <pow+0x3c>
    3912:	99 23       	and	r25, r25
    3914:	42 f5       	brpl	.+80     	; 0x3966 <pow+0x80>
    3916:	ff 3f       	cpi	r31, 0xFF	; 255
    3918:	e1 05       	cpc	r30, r1
    391a:	31 05       	cpc	r19, r1
    391c:	21 05       	cpc	r18, r1
    391e:	11 f1       	breq	.+68     	; 0x3964 <pow+0x7e>
    3920:	e8 94       	clt
    3922:	08 94       	sec
    3924:	e7 95       	ror	r30
    3926:	d9 01       	movw	r26, r18
    3928:	aa 23       	and	r26, r26
    392a:	29 f4       	brne	.+10     	; 0x3936 <pow+0x50>
    392c:	ab 2f       	mov	r26, r27
    392e:	be 2f       	mov	r27, r30
    3930:	f8 5f       	subi	r31, 0xF8	; 248
    3932:	d0 f3       	brcs	.-12     	; 0x3928 <pow+0x42>
    3934:	10 c0       	rjmp	.+32     	; 0x3956 <pow+0x70>
    3936:	ff 5f       	subi	r31, 0xFF	; 255
    3938:	70 f4       	brcc	.+28     	; 0x3956 <pow+0x70>
    393a:	a6 95       	lsr	r26
    393c:	e0 f7       	brcc	.-8      	; 0x3936 <pow+0x50>
    393e:	f7 39       	cpi	r31, 0x97	; 151
    3940:	50 f0       	brcs	.+20     	; 0x3956 <pow+0x70>
    3942:	19 f0       	breq	.+6      	; 0x394a <pow+0x64>
    3944:	ff 3a       	cpi	r31, 0xAF	; 175
    3946:	38 f4       	brcc	.+14     	; 0x3956 <pow+0x70>
    3948:	9f 77       	andi	r25, 0x7F	; 127
    394a:	9f 93       	push	r25
    394c:	0c d0       	rcall	.+24     	; 0x3966 <pow+0x80>
    394e:	0f 90       	pop	r0
    3950:	07 fc       	sbrc	r0, 7
    3952:	90 58       	subi	r25, 0x80	; 128
    3954:	08 95       	ret
    3956:	3e f0       	brts	.+14     	; 0x3966 <pow+0x80>
    3958:	04 cf       	rjmp	.-504    	; 0x3762 <__fp_nan>
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	80 e8       	ldi	r24, 0x80	; 128
    3960:	9f e3       	ldi	r25, 0x3F	; 63
    3962:	08 95       	ret
    3964:	4f e7       	ldi	r20, 0x7F	; 127
    3966:	9f 77       	andi	r25, 0x7F	; 127
    3968:	5f 93       	push	r21
    396a:	4f 93       	push	r20
    396c:	3f 93       	push	r19
    396e:	2f 93       	push	r18
    3970:	9e d0       	rcall	.+316    	; 0x3aae <log>
    3972:	2f 91       	pop	r18
    3974:	3f 91       	pop	r19
    3976:	4f 91       	pop	r20
    3978:	5f 91       	pop	r21
    397a:	52 df       	rcall	.-348    	; 0x3820 <__mulsf3>
    397c:	05 c0       	rjmp	.+10     	; 0x3988 <exp>
    397e:	19 f4       	brne	.+6      	; 0x3986 <pow+0xa0>
    3980:	0e f0       	brts	.+2      	; 0x3984 <pow+0x9e>
    3982:	e9 ce       	rjmp	.-558    	; 0x3756 <__fp_inf>
    3984:	42 cf       	rjmp	.-380    	; 0x380a <__fp_zero>
    3986:	ed ce       	rjmp	.-550    	; 0x3762 <__fp_nan>

00003988 <exp>:
    3988:	26 df       	rcall	.-436    	; 0x37d6 <__fp_splitA>
    398a:	c8 f3       	brcs	.-14     	; 0x397e <pow+0x98>
    398c:	96 38       	cpi	r25, 0x86	; 134
    398e:	c0 f7       	brcc	.-16     	; 0x3980 <pow+0x9a>
    3990:	07 f8       	bld	r0, 7
    3992:	0f 92       	push	r0
    3994:	e8 94       	clt
    3996:	2b e3       	ldi	r18, 0x3B	; 59
    3998:	3a ea       	ldi	r19, 0xAA	; 170
    399a:	48 eb       	ldi	r20, 0xB8	; 184
    399c:	5f e7       	ldi	r21, 0x7F	; 127
    399e:	4e df       	rcall	.-356    	; 0x383c <__mulsf3_pse>
    39a0:	0f 92       	push	r0
    39a2:	0f 92       	push	r0
    39a4:	0f 92       	push	r0
    39a6:	4d b7       	in	r20, 0x3d	; 61
    39a8:	5e b7       	in	r21, 0x3e	; 62
    39aa:	0f 92       	push	r0
    39ac:	c0 d0       	rcall	.+384    	; 0x3b2e <modf>
    39ae:	ea e0       	ldi	r30, 0x0A	; 10
    39b0:	f1 e0       	ldi	r31, 0x01	; 1
    39b2:	16 d0       	rcall	.+44     	; 0x39e0 <__fp_powser>
    39b4:	4f 91       	pop	r20
    39b6:	5f 91       	pop	r21
    39b8:	ef 91       	pop	r30
    39ba:	ff 91       	pop	r31
    39bc:	e5 95       	asr	r30
    39be:	ee 1f       	adc	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	49 f0       	breq	.+18     	; 0x39d6 <exp+0x4e>
    39c4:	fe 57       	subi	r31, 0x7E	; 126
    39c6:	e0 68       	ori	r30, 0x80	; 128
    39c8:	44 27       	eor	r20, r20
    39ca:	ee 0f       	add	r30, r30
    39cc:	44 1f       	adc	r20, r20
    39ce:	fa 95       	dec	r31
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <exp+0x42>
    39d2:	41 95       	neg	r20
    39d4:	55 0b       	sbc	r21, r21
    39d6:	32 d0       	rcall	.+100    	; 0x3a3c <ldexp>
    39d8:	0f 90       	pop	r0
    39da:	07 fe       	sbrs	r0, 7
    39dc:	26 c0       	rjmp	.+76     	; 0x3a2a <inverse>
    39de:	08 95       	ret

000039e0 <__fp_powser>:
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	1f 93       	push	r17
    39e6:	0f 93       	push	r16
    39e8:	ff 92       	push	r15
    39ea:	ef 92       	push	r14
    39ec:	df 92       	push	r13
    39ee:	7b 01       	movw	r14, r22
    39f0:	8c 01       	movw	r16, r24
    39f2:	68 94       	set
    39f4:	05 c0       	rjmp	.+10     	; 0x3a00 <__fp_powser+0x20>
    39f6:	da 2e       	mov	r13, r26
    39f8:	ef 01       	movw	r28, r30
    39fa:	1e df       	rcall	.-452    	; 0x3838 <__mulsf3x>
    39fc:	fe 01       	movw	r30, r28
    39fe:	e8 94       	clt
    3a00:	a5 91       	lpm	r26, Z+
    3a02:	25 91       	lpm	r18, Z+
    3a04:	35 91       	lpm	r19, Z+
    3a06:	45 91       	lpm	r20, Z+
    3a08:	55 91       	lpm	r21, Z+
    3a0a:	ae f3       	brts	.-22     	; 0x39f6 <__fp_powser+0x16>
    3a0c:	ef 01       	movw	r28, r30
    3a0e:	41 dd       	rcall	.-1406   	; 0x3492 <__addsf3x>
    3a10:	fe 01       	movw	r30, r28
    3a12:	97 01       	movw	r18, r14
    3a14:	a8 01       	movw	r20, r16
    3a16:	da 94       	dec	r13
    3a18:	79 f7       	brne	.-34     	; 0x39f8 <__fp_powser+0x18>
    3a1a:	df 90       	pop	r13
    3a1c:	ef 90       	pop	r14
    3a1e:	ff 90       	pop	r15
    3a20:	0f 91       	pop	r16
    3a22:	1f 91       	pop	r17
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <inverse>:
    3a2a:	9b 01       	movw	r18, r22
    3a2c:	ac 01       	movw	r20, r24
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	70 e0       	ldi	r23, 0x00	; 0
    3a32:	80 e8       	ldi	r24, 0x80	; 128
    3a34:	9f e3       	ldi	r25, 0x3F	; 63
    3a36:	84 cd       	rjmp	.-1272   	; 0x3540 <__divsf3>
    3a38:	8e ce       	rjmp	.-740    	; 0x3756 <__fp_inf>
    3a3a:	ac c0       	rjmp	.+344    	; 0x3b94 <__fp_mpack>

00003a3c <ldexp>:
    3a3c:	cc de       	rcall	.-616    	; 0x37d6 <__fp_splitA>
    3a3e:	e8 f3       	brcs	.-6      	; 0x3a3a <inverse+0x10>
    3a40:	99 23       	and	r25, r25
    3a42:	d9 f3       	breq	.-10     	; 0x3a3a <inverse+0x10>
    3a44:	94 0f       	add	r25, r20
    3a46:	51 1d       	adc	r21, r1
    3a48:	bb f3       	brvs	.-18     	; 0x3a38 <inverse+0xe>
    3a4a:	91 50       	subi	r25, 0x01	; 1
    3a4c:	50 40       	sbci	r21, 0x00	; 0
    3a4e:	94 f0       	brlt	.+36     	; 0x3a74 <ldexp+0x38>
    3a50:	59 f0       	breq	.+22     	; 0x3a68 <ldexp+0x2c>
    3a52:	88 23       	and	r24, r24
    3a54:	32 f0       	brmi	.+12     	; 0x3a62 <ldexp+0x26>
    3a56:	66 0f       	add	r22, r22
    3a58:	77 1f       	adc	r23, r23
    3a5a:	88 1f       	adc	r24, r24
    3a5c:	91 50       	subi	r25, 0x01	; 1
    3a5e:	50 40       	sbci	r21, 0x00	; 0
    3a60:	c1 f7       	brne	.-16     	; 0x3a52 <ldexp+0x16>
    3a62:	9e 3f       	cpi	r25, 0xFE	; 254
    3a64:	51 05       	cpc	r21, r1
    3a66:	44 f7       	brge	.-48     	; 0x3a38 <inverse+0xe>
    3a68:	88 0f       	add	r24, r24
    3a6a:	91 1d       	adc	r25, r1
    3a6c:	96 95       	lsr	r25
    3a6e:	87 95       	ror	r24
    3a70:	97 f9       	bld	r25, 7
    3a72:	08 95       	ret
    3a74:	5f 3f       	cpi	r21, 0xFF	; 255
    3a76:	ac f0       	brlt	.+42     	; 0x3aa2 <ldexp+0x66>
    3a78:	98 3e       	cpi	r25, 0xE8	; 232
    3a7a:	9c f0       	brlt	.+38     	; 0x3aa2 <ldexp+0x66>
    3a7c:	bb 27       	eor	r27, r27
    3a7e:	86 95       	lsr	r24
    3a80:	77 95       	ror	r23
    3a82:	67 95       	ror	r22
    3a84:	b7 95       	ror	r27
    3a86:	08 f4       	brcc	.+2      	; 0x3a8a <ldexp+0x4e>
    3a88:	b1 60       	ori	r27, 0x01	; 1
    3a8a:	93 95       	inc	r25
    3a8c:	c1 f7       	brne	.-16     	; 0x3a7e <ldexp+0x42>
    3a8e:	bb 0f       	add	r27, r27
    3a90:	58 f7       	brcc	.-42     	; 0x3a68 <ldexp+0x2c>
    3a92:	11 f4       	brne	.+4      	; 0x3a98 <ldexp+0x5c>
    3a94:	60 ff       	sbrs	r22, 0
    3a96:	e8 cf       	rjmp	.-48     	; 0x3a68 <ldexp+0x2c>
    3a98:	6f 5f       	subi	r22, 0xFF	; 255
    3a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	e3 cf       	rjmp	.-58     	; 0x3a68 <ldexp+0x2c>
    3aa2:	b4 ce       	rjmp	.-664    	; 0x380c <__fp_szero>
    3aa4:	0e f0       	brts	.+2      	; 0x3aa8 <ldexp+0x6c>
    3aa6:	76 c0       	rjmp	.+236    	; 0x3b94 <__fp_mpack>
    3aa8:	5c ce       	rjmp	.-840    	; 0x3762 <__fp_nan>
    3aaa:	68 94       	set
    3aac:	54 ce       	rjmp	.-856    	; 0x3756 <__fp_inf>

00003aae <log>:
    3aae:	93 de       	rcall	.-730    	; 0x37d6 <__fp_splitA>
    3ab0:	c8 f3       	brcs	.-14     	; 0x3aa4 <ldexp+0x68>
    3ab2:	99 23       	and	r25, r25
    3ab4:	d1 f3       	breq	.-12     	; 0x3aaa <ldexp+0x6e>
    3ab6:	c6 f3       	brts	.-16     	; 0x3aa8 <ldexp+0x6c>
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	1f 93       	push	r17
    3abe:	0f 93       	push	r16
    3ac0:	ff 92       	push	r15
    3ac2:	c9 2f       	mov	r28, r25
    3ac4:	dd 27       	eor	r29, r29
    3ac6:	88 23       	and	r24, r24
    3ac8:	2a f0       	brmi	.+10     	; 0x3ad4 <log+0x26>
    3aca:	21 97       	sbiw	r28, 0x01	; 1
    3acc:	66 0f       	add	r22, r22
    3ace:	77 1f       	adc	r23, r23
    3ad0:	88 1f       	adc	r24, r24
    3ad2:	da f7       	brpl	.-10     	; 0x3aca <log+0x1c>
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e8       	ldi	r20, 0x80	; 128
    3ada:	5f eb       	ldi	r21, 0xBF	; 191
    3adc:	9f e3       	ldi	r25, 0x3F	; 63
    3ade:	88 39       	cpi	r24, 0x98	; 152
    3ae0:	20 f0       	brcs	.+8      	; 0x3aea <log+0x3c>
    3ae2:	80 3e       	cpi	r24, 0xE0	; 224
    3ae4:	30 f0       	brcs	.+12     	; 0x3af2 <log+0x44>
    3ae6:	21 96       	adiw	r28, 0x01	; 1
    3ae8:	8f 77       	andi	r24, 0x7F	; 127
    3aea:	c2 dc       	rcall	.-1660   	; 0x3470 <__addsf3>
    3aec:	e2 e3       	ldi	r30, 0x32	; 50
    3aee:	f1 e0       	ldi	r31, 0x01	; 1
    3af0:	03 c0       	rjmp	.+6      	; 0x3af8 <log+0x4a>
    3af2:	be dc       	rcall	.-1668   	; 0x3470 <__addsf3>
    3af4:	ef e5       	ldi	r30, 0x5F	; 95
    3af6:	f1 e0       	ldi	r31, 0x01	; 1
    3af8:	73 df       	rcall	.-282    	; 0x39e0 <__fp_powser>
    3afa:	8b 01       	movw	r16, r22
    3afc:	be 01       	movw	r22, r28
    3afe:	ec 01       	movw	r28, r24
    3b00:	fb 2e       	mov	r15, r27
    3b02:	6f 57       	subi	r22, 0x7F	; 127
    3b04:	71 09       	sbc	r23, r1
    3b06:	75 95       	asr	r23
    3b08:	77 1f       	adc	r23, r23
    3b0a:	88 0b       	sbc	r24, r24
    3b0c:	99 0b       	sbc	r25, r25
    3b0e:	86 dd       	rcall	.-1268   	; 0x361c <__floatsisf>
    3b10:	28 e1       	ldi	r18, 0x18	; 24
    3b12:	32 e7       	ldi	r19, 0x72	; 114
    3b14:	41 e3       	ldi	r20, 0x31	; 49
    3b16:	5f e3       	ldi	r21, 0x3F	; 63
    3b18:	8f de       	rcall	.-738    	; 0x3838 <__mulsf3x>
    3b1a:	af 2d       	mov	r26, r15
    3b1c:	98 01       	movw	r18, r16
    3b1e:	ae 01       	movw	r20, r28
    3b20:	ff 90       	pop	r15
    3b22:	0f 91       	pop	r16
    3b24:	1f 91       	pop	r17
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	b3 dc       	rcall	.-1690   	; 0x3492 <__addsf3x>
    3b2c:	3b ce       	rjmp	.-906    	; 0x37a4 <__fp_round>

00003b2e <modf>:
    3b2e:	fa 01       	movw	r30, r20
    3b30:	dc 01       	movw	r26, r24
    3b32:	aa 0f       	add	r26, r26
    3b34:	bb 1f       	adc	r27, r27
    3b36:	9b 01       	movw	r18, r22
    3b38:	ac 01       	movw	r20, r24
    3b3a:	bf 57       	subi	r27, 0x7F	; 127
    3b3c:	28 f4       	brcc	.+10     	; 0x3b48 <modf+0x1a>
    3b3e:	22 27       	eor	r18, r18
    3b40:	33 27       	eor	r19, r19
    3b42:	44 27       	eor	r20, r20
    3b44:	50 78       	andi	r21, 0x80	; 128
    3b46:	1f c0       	rjmp	.+62     	; 0x3b86 <modf+0x58>
    3b48:	b7 51       	subi	r27, 0x17	; 23
    3b4a:	88 f4       	brcc	.+34     	; 0x3b6e <modf+0x40>
    3b4c:	ab 2f       	mov	r26, r27
    3b4e:	00 24       	eor	r0, r0
    3b50:	46 95       	lsr	r20
    3b52:	37 95       	ror	r19
    3b54:	27 95       	ror	r18
    3b56:	01 1c       	adc	r0, r1
    3b58:	a3 95       	inc	r26
    3b5a:	d2 f3       	brmi	.-12     	; 0x3b50 <modf+0x22>
    3b5c:	00 20       	and	r0, r0
    3b5e:	69 f0       	breq	.+26     	; 0x3b7a <modf+0x4c>
    3b60:	22 0f       	add	r18, r18
    3b62:	33 1f       	adc	r19, r19
    3b64:	44 1f       	adc	r20, r20
    3b66:	b3 95       	inc	r27
    3b68:	da f3       	brmi	.-10     	; 0x3b60 <modf+0x32>
    3b6a:	0d d0       	rcall	.+26     	; 0x3b86 <modf+0x58>
    3b6c:	80 cc       	rjmp	.-1792   	; 0x346e <__subsf3>
    3b6e:	61 30       	cpi	r22, 0x01	; 1
    3b70:	71 05       	cpc	r23, r1
    3b72:	a0 e8       	ldi	r26, 0x80	; 128
    3b74:	8a 07       	cpc	r24, r26
    3b76:	b9 46       	sbci	r27, 0x69	; 105
    3b78:	30 f4       	brcc	.+12     	; 0x3b86 <modf+0x58>
    3b7a:	9b 01       	movw	r18, r22
    3b7c:	ac 01       	movw	r20, r24
    3b7e:	66 27       	eor	r22, r22
    3b80:	77 27       	eor	r23, r23
    3b82:	88 27       	eor	r24, r24
    3b84:	90 78       	andi	r25, 0x80	; 128
    3b86:	30 96       	adiw	r30, 0x00	; 0
    3b88:	21 f0       	breq	.+8      	; 0x3b92 <modf+0x64>
    3b8a:	20 83       	st	Z, r18
    3b8c:	31 83       	std	Z+1, r19	; 0x01
    3b8e:	42 83       	std	Z+2, r20	; 0x02
    3b90:	53 83       	std	Z+3, r21	; 0x03
    3b92:	08 95       	ret

00003b94 <__fp_mpack>:
    3b94:	9f 3f       	cpi	r25, 0xFF	; 255
    3b96:	31 f0       	breq	.+12     	; 0x3ba4 <__fp_mpack_finite+0xc>

00003b98 <__fp_mpack_finite>:
    3b98:	91 50       	subi	r25, 0x01	; 1
    3b9a:	20 f4       	brcc	.+8      	; 0x3ba4 <__fp_mpack_finite+0xc>
    3b9c:	87 95       	ror	r24
    3b9e:	77 95       	ror	r23
    3ba0:	67 95       	ror	r22
    3ba2:	b7 95       	ror	r27
    3ba4:	88 0f       	add	r24, r24
    3ba6:	91 1d       	adc	r25, r1
    3ba8:	96 95       	lsr	r25
    3baa:	87 95       	ror	r24
    3bac:	97 f9       	bld	r25, 7
    3bae:	08 95       	ret

00003bb0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3bb0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3bb2:	91 8d       	ldd	r25, Z+25	; 0x19
    3bb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    3bb6:	89 2f       	mov	r24, r25
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	80 5c       	subi	r24, 0xC0	; 192
    3bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbe:	82 1b       	sub	r24, r18
    3bc0:	91 09       	sbc	r25, r1
}
    3bc2:	8f 73       	andi	r24, 0x3F	; 63
    3bc4:	99 27       	eor	r25, r25
    3bc6:	08 95       	ret

00003bc8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3bc8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3bca:	91 8d       	ldd	r25, Z+25	; 0x19
    3bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bce:	98 17       	cp	r25, r24
    3bd0:	31 f0       	breq	.+12     	; 0x3bde <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3bd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bd4:	e8 0f       	add	r30, r24
    3bd6:	f1 1d       	adc	r31, r1
    3bd8:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3bde:	8f ef       	ldi	r24, 0xFF	; 255
    3be0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3be2:	08 95       	ret

00003be4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3be4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3be6:	91 8d       	ldd	r25, Z+25	; 0x19
    3be8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bea:	98 17       	cp	r25, r24
    3bec:	61 f0       	breq	.+24     	; 0x3c06 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3bee:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bf0:	df 01       	movw	r26, r30
    3bf2:	a8 0f       	add	r26, r24
    3bf4:	b1 1d       	adc	r27, r1
    3bf6:	5d 96       	adiw	r26, 0x1d	; 29
    3bf8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3bfa:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bfc:	9f 5f       	subi	r25, 0xFF	; 255
    3bfe:	9f 73       	andi	r25, 0x3F	; 63
    3c00:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3c06:	8f ef       	ldi	r24, 0xFF	; 255
    3c08:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3c0a:	08 95       	ret

00003c0c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3c10:	44 8d       	ldd	r20, Z+28	; 0x1c
    3c12:	25 2f       	mov	r18, r21
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	84 2f       	mov	r24, r20
    3c18:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3c1a:	82 1b       	sub	r24, r18
    3c1c:	93 0b       	sbc	r25, r19
    3c1e:	54 17       	cp	r21, r20
    3c20:	10 f0       	brcs	.+4      	; 0x3c26 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3c22:	cf 96       	adiw	r24, 0x3f	; 63
    3c24:	08 95       	ret
  return tail - head - 1;
    3c26:	01 97       	sbiw	r24, 0x01	; 1
}
    3c28:	08 95       	ret

00003c2a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3c2a:	84 ea       	ldi	r24, 0xA4	; 164
    3c2c:	9f e1       	ldi	r25, 0x1F	; 31
    3c2e:	89 2b       	or	r24, r25
    3c30:	39 f0       	breq	.+14     	; 0x3c40 <_Z14serialEventRunv+0x16>
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	89 2b       	or	r24, r25
    3c38:	19 f0       	breq	.+6      	; 0x3c40 <_Z14serialEventRunv+0x16>
    3c3a:	86 d1       	rcall	.+780    	; 0x3f48 <_Z17Serial0_availablev>
    3c3c:	81 11       	cpse	r24, r1
    3c3e:	25 c0       	rjmp	.+74     	; 0x3c8a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	89 2b       	or	r24, r25
    3c46:	41 f0       	breq	.+16     	; 0x3c58 <_Z14serialEventRunv+0x2e>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	89 2b       	or	r24, r25
    3c4e:	21 f0       	breq	.+8      	; 0x3c58 <_Z14serialEventRunv+0x2e>
    3c50:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c54:	81 11       	cpse	r24, r1
    3c56:	1c c0       	rjmp	.+56     	; 0x3c90 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	89 2b       	or	r24, r25
    3c5e:	41 f0       	breq	.+16     	; 0x3c70 <_Z14serialEventRunv+0x46>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	89 2b       	or	r24, r25
    3c66:	21 f0       	breq	.+8      	; 0x3c70 <_Z14serialEventRunv+0x46>
    3c68:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	13 c0       	rjmp	.+38     	; 0x3c96 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	89 2b       	or	r24, r25
    3c76:	a1 f0       	breq	.+40     	; 0x3ca0 <_Z14serialEventRunv+0x76>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	89 2b       	or	r24, r25
    3c7e:	81 f0       	breq	.+32     	; 0x3ca0 <_Z14serialEventRunv+0x76>
    3c80:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c84:	81 11       	cpse	r24, r1
    3c86:	0a c0       	rjmp	.+20     	; 0x3c9c <_Z14serialEventRunv+0x72>
    3c88:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3c8a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c8e:	d8 cf       	rjmp	.-80     	; 0x3c40 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3c90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c94:	e1 cf       	rjmp	.-62     	; 0x3c58 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3c96:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c9a:	ea cf       	rjmp	.-44     	; 0x3c70 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3c9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3ca0:	08 95       	ret

00003ca2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3ca2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3ca4:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ca6:	df 01       	movw	r26, r30
    3ca8:	a8 0f       	add	r26, r24
    3caa:	b1 1d       	adc	r27, r1
    3cac:	a3 5a       	subi	r26, 0xA3	; 163
    3cae:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3cb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	8f 73       	andi	r24, 0x3F	; 63
    3cba:	99 27       	eor	r25, r25
    3cbc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3cbe:	a6 89       	ldd	r26, Z+22	; 0x16
    3cc0:	b7 89       	ldd	r27, Z+23	; 0x17
    3cc2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3cc4:	a0 89       	ldd	r26, Z+16	; 0x10
    3cc6:	b1 89       	ldd	r27, Z+17	; 0x11
    3cc8:	8c 91       	ld	r24, X
    3cca:	83 70       	andi	r24, 0x03	; 3
    3ccc:	80 64       	ori	r24, 0x40	; 64
    3cce:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3cd0:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cd2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cd4:	98 13       	cpse	r25, r24
    3cd6:	06 c0       	rjmp	.+12     	; 0x3ce4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3cd8:	02 88       	ldd	r0, Z+18	; 0x12
    3cda:	f3 89       	ldd	r31, Z+19	; 0x13
    3cdc:	e0 2d       	mov	r30, r0
    3cde:	80 81       	ld	r24, Z
    3ce0:	8f 7d       	andi	r24, 0xDF	; 223
    3ce2:	80 83       	st	Z, r24
    3ce4:	08 95       	ret

00003ce6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	ec 01       	movw	r28, r24
  _written = true;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3cf8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3cfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3cfc:	98 13       	cpse	r25, r24
    3cfe:	05 c0       	rjmp	.+10     	; 0x3d0a <_ZN14HardwareSerial5writeEh+0x24>
    3d00:	e8 89       	ldd	r30, Y+16	; 0x10
    3d02:	f9 89       	ldd	r31, Y+17	; 0x11
    3d04:	80 81       	ld	r24, Z
    3d06:	85 fd       	sbrc	r24, 5
    3d08:	25 c0       	rjmp	.+74     	; 0x3d54 <_ZN14HardwareSerial5writeEh+0x6e>
    3d0a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3d0c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3d0e:	10 e0       	ldi	r17, 0x00	; 0
    3d10:	0f 5f       	subi	r16, 0xFF	; 255
    3d12:	1f 4f       	sbci	r17, 0xFF	; 255
    3d14:	0f 73       	andi	r16, 0x3F	; 63
    3d16:	11 27       	eor	r17, r17
    3d18:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d1c:	e8 12       	cpse	r14, r24
    3d1e:	0b c0       	rjmp	.+22     	; 0x3d36 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	07 fc       	sbrc	r0, 7
    3d24:	fa cf       	rjmp	.-12     	; 0x3d1a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3d26:	e8 89       	ldd	r30, Y+16	; 0x10
    3d28:	f9 89       	ldd	r31, Y+17	; 0x11
    3d2a:	80 81       	ld	r24, Z
    3d2c:	85 ff       	sbrs	r24, 5
    3d2e:	f5 cf       	rjmp	.-22     	; 0x3d1a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3d30:	ce 01       	movw	r24, r28
    3d32:	b7 df       	rcall	.-146    	; 0x3ca2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3d34:	f2 cf       	rjmp	.-28     	; 0x3d1a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e8 0f       	add	r30, r24
    3d3c:	f1 1d       	adc	r31, r1
    3d3e:	e3 5a       	subi	r30, 0xA3	; 163
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3d44:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d46:	f8 94       	cli
    _tx_buffer_head = i;
    3d48:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3d4a:	ea 89       	ldd	r30, Y+18	; 0x12
    3d4c:	fb 89       	ldd	r31, Y+19	; 0x13
    3d4e:	80 81       	ld	r24, Z
    3d50:	80 62       	ori	r24, 0x20	; 32
    3d52:	0a c0       	rjmp	.+20     	; 0x3d68 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3d54:	9f b7       	in	r25, 0x3f	; 63
    3d56:	f8 94       	cli
      *_udr = c;
    3d58:	ee 89       	ldd	r30, Y+22	; 0x16
    3d5a:	ff 89       	ldd	r31, Y+23	; 0x17
    3d5c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3d5e:	e8 89       	ldd	r30, Y+16	; 0x10
    3d60:	f9 89       	ldd	r31, Y+17	; 0x11
    3d62:	80 81       	ld	r24, Z
    3d64:	83 70       	andi	r24, 0x03	; 3
    3d66:	80 64       	ori	r24, 0x40	; 64
    3d68:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3d6a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	08 95       	ret

00003d7e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3d7e:	cf 93       	push	r28
    3d80:	df 93       	push	r29
    3d82:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3d84:	88 8d       	ldd	r24, Y+24	; 0x18
    3d86:	88 23       	and	r24, r24
    3d88:	c1 f0       	breq	.+48     	; 0x3dba <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3d8a:	ea 89       	ldd	r30, Y+18	; 0x12
    3d8c:	fb 89       	ldd	r31, Y+19	; 0x13
    3d8e:	80 81       	ld	r24, Z
    3d90:	85 fd       	sbrc	r24, 5
    3d92:	05 c0       	rjmp	.+10     	; 0x3d9e <_ZN14HardwareSerial5flushEv+0x20>
    3d94:	a8 89       	ldd	r26, Y+16	; 0x10
    3d96:	b9 89       	ldd	r27, Y+17	; 0x11
    3d98:	8c 91       	ld	r24, X
    3d9a:	86 fd       	sbrc	r24, 6
    3d9c:	0e c0       	rjmp	.+28     	; 0x3dba <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	07 fc       	sbrc	r0, 7
    3da2:	f5 cf       	rjmp	.-22     	; 0x3d8e <_ZN14HardwareSerial5flushEv+0x10>
    3da4:	80 81       	ld	r24, Z
    3da6:	85 ff       	sbrs	r24, 5
    3da8:	f2 cf       	rjmp	.-28     	; 0x3d8e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3daa:	a8 89       	ldd	r26, Y+16	; 0x10
    3dac:	b9 89       	ldd	r27, Y+17	; 0x11
    3dae:	8c 91       	ld	r24, X
    3db0:	85 ff       	sbrs	r24, 5
    3db2:	ed cf       	rjmp	.-38     	; 0x3d8e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3db4:	ce 01       	movw	r24, r28
    3db6:	75 df       	rcall	.-278    	; 0x3ca2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3db8:	e8 cf       	rjmp	.-48     	; 0x3d8a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	08 95       	ret

00003dc0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	ec 01       	movw	r28, r24
    3dd0:	6a 01       	movw	r12, r20
    3dd2:	7b 01       	movw	r14, r22
    3dd4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3dd6:	e8 89       	ldd	r30, Y+16	; 0x10
    3dd8:	f9 89       	ldd	r31, Y+17	; 0x11
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3dde:	41 15       	cp	r20, r1
    3de0:	51 4e       	sbci	r21, 0xE1	; 225
    3de2:	61 05       	cpc	r22, r1
    3de4:	71 05       	cpc	r23, r1
    3de6:	b1 f0       	breq	.+44     	; 0x3e14 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	79 e0       	ldi	r23, 0x09	; 9
    3dec:	8d e3       	ldi	r24, 0x3D	; 61
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	a7 01       	movw	r20, r14
    3df2:	96 01       	movw	r18, r12
    3df4:	0e 94 da 33 	call	0x67b4	; 0x67b4 <__udivmodsi4>
    3df8:	da 01       	movw	r26, r20
    3dfa:	c9 01       	movw	r24, r18
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	a1 09       	sbc	r26, r1
    3e00:	b1 09       	sbc	r27, r1
    3e02:	b6 95       	lsr	r27
    3e04:	a7 95       	ror	r26
    3e06:	97 95       	ror	r25
    3e08:	87 95       	ror	r24
    3e0a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3e0c:	21 15       	cp	r18, r1
    3e0e:	80 e1       	ldi	r24, 0x10	; 16
    3e10:	38 07       	cpc	r19, r24
    3e12:	a8 f0       	brcs	.+42     	; 0x3e3e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3e14:	e8 89       	ldd	r30, Y+16	; 0x10
    3e16:	f9 89       	ldd	r31, Y+17	; 0x11
    3e18:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3e1a:	60 e8       	ldi	r22, 0x80	; 128
    3e1c:	74 e8       	ldi	r23, 0x84	; 132
    3e1e:	8e e1       	ldi	r24, 0x1E	; 30
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a7 01       	movw	r20, r14
    3e24:	96 01       	movw	r18, r12
    3e26:	0e 94 da 33 	call	0x67b4	; 0x67b4 <__udivmodsi4>
    3e2a:	da 01       	movw	r26, r20
    3e2c:	c9 01       	movw	r24, r18
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	a1 09       	sbc	r26, r1
    3e32:	b1 09       	sbc	r27, r1
    3e34:	b6 95       	lsr	r27
    3e36:	a7 95       	ror	r26
    3e38:	97 95       	ror	r25
    3e3a:	87 95       	ror	r24
    3e3c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3e3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e40:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e42:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3e44:	ee 85       	ldd	r30, Y+14	; 0x0e
    3e46:	ff 85       	ldd	r31, Y+15	; 0x0f
    3e48:	20 83       	st	Z, r18

  _written = false;
    3e4a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3e4c:	ec 89       	ldd	r30, Y+20	; 0x14
    3e4e:	fd 89       	ldd	r31, Y+21	; 0x15
    3e50:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3e52:	ea 89       	ldd	r30, Y+18	; 0x12
    3e54:	fb 89       	ldd	r31, Y+19	; 0x13
    3e56:	80 81       	ld	r24, Z
    3e58:	80 61       	ori	r24, 0x10	; 16
    3e5a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3e5c:	ea 89       	ldd	r30, Y+18	; 0x12
    3e5e:	fb 89       	ldd	r31, Y+19	; 0x13
    3e60:	80 81       	ld	r24, Z
    3e62:	88 60       	ori	r24, 0x08	; 8
    3e64:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3e66:	ea 89       	ldd	r30, Y+18	; 0x12
    3e68:	fb 89       	ldd	r31, Y+19	; 0x13
    3e6a:	80 81       	ld	r24, Z
    3e6c:	80 68       	ori	r24, 0x80	; 128
    3e6e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3e70:	ea 89       	ldd	r30, Y+18	; 0x12
    3e72:	fb 89       	ldd	r31, Y+19	; 0x13
    3e74:	80 81       	ld	r24, Z
    3e76:	8f 7d       	andi	r24, 0xDF	; 223
    3e78:	80 83       	st	Z, r24
}
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	ff 90       	pop	r15
    3e82:	ef 90       	pop	r14
    3e84:	df 90       	pop	r13
    3e86:	cf 90       	pop	r12
    3e88:	08 95       	ret

00003e8a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3e8a:	1f 92       	push	r1
    3e8c:	0f 92       	push	r0
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	0f 92       	push	r0
    3e92:	11 24       	eor	r1, r1
    3e94:	0b b6       	in	r0, 0x3b	; 59
    3e96:	0f 92       	push	r0
    3e98:	2f 93       	push	r18
    3e9a:	8f 93       	push	r24
    3e9c:	9f 93       	push	r25
    3e9e:	ef 93       	push	r30
    3ea0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3ea2:	e0 91 01 08 	lds	r30, 0x0801	; 0x800801 <Serial+0x10>
    3ea6:	f0 91 02 08 	lds	r31, 0x0802	; 0x800802 <Serial+0x11>
    3eaa:	80 81       	ld	r24, Z
    3eac:	e0 91 07 08 	lds	r30, 0x0807	; 0x800807 <Serial+0x16>
    3eb0:	f0 91 08 08 	lds	r31, 0x0808	; 0x800808 <Serial+0x17>
    3eb4:	82 fd       	sbrc	r24, 2
    3eb6:	12 c0       	rjmp	.+36     	; 0x3edc <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3eb8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3eba:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <Serial+0x19>
    3ebe:	8f 5f       	subi	r24, 0xFF	; 255
    3ec0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3ec2:	20 91 0b 08 	lds	r18, 0x080B	; 0x80080b <Serial+0x1a>
    3ec6:	82 17       	cp	r24, r18
    3ec8:	51 f0       	breq	.+20     	; 0x3ede <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    3eca:	e0 91 0a 08 	lds	r30, 0x080A	; 0x80080a <Serial+0x19>
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	ef 50       	subi	r30, 0x0F	; 15
    3ed2:	f8 4f       	sbci	r31, 0xF8	; 248
    3ed4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3ed6:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <Serial+0x19>
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3edc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3ede:	ff 91       	pop	r31
    3ee0:	ef 91       	pop	r30
    3ee2:	9f 91       	pop	r25
    3ee4:	8f 91       	pop	r24
    3ee6:	2f 91       	pop	r18
    3ee8:	0f 90       	pop	r0
    3eea:	0b be       	out	0x3b, r0	; 59
    3eec:	0f 90       	pop	r0
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	0f 90       	pop	r0
    3ef2:	1f 90       	pop	r1
    3ef4:	18 95       	reti

00003ef6 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3ef6:	1f 92       	push	r1
    3ef8:	0f 92       	push	r0
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	0f 92       	push	r0
    3efe:	11 24       	eor	r1, r1
    3f00:	0b b6       	in	r0, 0x3b	; 59
    3f02:	0f 92       	push	r0
    3f04:	2f 93       	push	r18
    3f06:	3f 93       	push	r19
    3f08:	4f 93       	push	r20
    3f0a:	5f 93       	push	r21
    3f0c:	6f 93       	push	r22
    3f0e:	7f 93       	push	r23
    3f10:	8f 93       	push	r24
    3f12:	9f 93       	push	r25
    3f14:	af 93       	push	r26
    3f16:	bf 93       	push	r27
    3f18:	ef 93       	push	r30
    3f1a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3f1c:	81 ef       	ldi	r24, 0xF1	; 241
    3f1e:	97 e0       	ldi	r25, 0x07	; 7
    3f20:	c0 de       	rcall	.-640    	; 0x3ca2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3f22:	ff 91       	pop	r31
    3f24:	ef 91       	pop	r30
    3f26:	bf 91       	pop	r27
    3f28:	af 91       	pop	r26
    3f2a:	9f 91       	pop	r25
    3f2c:	8f 91       	pop	r24
    3f2e:	7f 91       	pop	r23
    3f30:	6f 91       	pop	r22
    3f32:	5f 91       	pop	r21
    3f34:	4f 91       	pop	r20
    3f36:	3f 91       	pop	r19
    3f38:	2f 91       	pop	r18
    3f3a:	0f 90       	pop	r0
    3f3c:	0b be       	out	0x3b, r0	; 59
    3f3e:	0f 90       	pop	r0
    3f40:	0f be       	out	0x3f, r0	; 63
    3f42:	0f 90       	pop	r0
    3f44:	1f 90       	pop	r1
    3f46:	18 95       	reti

00003f48 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3f48:	81 ef       	ldi	r24, 0xF1	; 241
    3f4a:	97 e0       	ldi	r25, 0x07	; 7
    3f4c:	31 de       	rcall	.-926    	; 0x3bb0 <_ZN14HardwareSerial9availableEv>
    3f4e:	21 e0       	ldi	r18, 0x01	; 1
    3f50:	89 2b       	or	r24, r25
    3f52:	09 f4       	brne	.+2      	; 0x3f56 <_Z17Serial0_availablev+0xe>
    3f54:	20 e0       	ldi	r18, 0x00	; 0
}
    3f56:	82 2f       	mov	r24, r18
    3f58:	08 95       	ret

00003f5a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3f5a:	e1 ef       	ldi	r30, 0xF1	; 241
    3f5c:	f7 e0       	ldi	r31, 0x07	; 7
    3f5e:	13 82       	std	Z+3, r1	; 0x03
    3f60:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3f62:	88 ee       	ldi	r24, 0xE8	; 232
    3f64:	93 e0       	ldi	r25, 0x03	; 3
    3f66:	a0 e0       	ldi	r26, 0x00	; 0
    3f68:	b0 e0       	ldi	r27, 0x00	; 0
    3f6a:	84 83       	std	Z+4, r24	; 0x04
    3f6c:	95 83       	std	Z+5, r25	; 0x05
    3f6e:	a6 83       	std	Z+6, r26	; 0x06
    3f70:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3f72:	8b eb       	ldi	r24, 0xBB	; 187
    3f74:	95 e0       	ldi	r25, 0x05	; 5
    3f76:	91 83       	std	Z+1, r25	; 0x01
    3f78:	80 83       	st	Z, r24
    3f7a:	85 ec       	ldi	r24, 0xC5	; 197
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	95 87       	std	Z+13, r25	; 0x0d
    3f80:	84 87       	std	Z+12, r24	; 0x0c
    3f82:	84 ec       	ldi	r24, 0xC4	; 196
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	97 87       	std	Z+15, r25	; 0x0f
    3f88:	86 87       	std	Z+14, r24	; 0x0e
    3f8a:	80 ec       	ldi	r24, 0xC0	; 192
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	91 8b       	std	Z+17, r25	; 0x11
    3f90:	80 8b       	std	Z+16, r24	; 0x10
    3f92:	81 ec       	ldi	r24, 0xC1	; 193
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	93 8b       	std	Z+19, r25	; 0x13
    3f98:	82 8b       	std	Z+18, r24	; 0x12
    3f9a:	82 ec       	ldi	r24, 0xC2	; 194
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	95 8b       	std	Z+21, r25	; 0x15
    3fa0:	84 8b       	std	Z+20, r24	; 0x14
    3fa2:	86 ec       	ldi	r24, 0xC6	; 198
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	97 8b       	std	Z+23, r25	; 0x17
    3fa8:	86 8b       	std	Z+22, r24	; 0x16
    3faa:	11 8e       	std	Z+25, r1	; 0x19
    3fac:	12 8e       	std	Z+26, r1	; 0x1a
    3fae:	13 8e       	std	Z+27, r1	; 0x1b
    3fb0:	14 8e       	std	Z+28, r1	; 0x1c
    3fb2:	08 95       	ret

00003fb4 <initVariant>:
    3fb4:	08 95       	ret

00003fb6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3fb6:	32 d4       	rcall	.+2148   	; 0x481c <init>

	initVariant();
    3fb8:	fd df       	rcall	.-6      	; 0x3fb4 <initVariant>
    3fba:	0e 94 b1 05 	call	0xb62	; 0xb62 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3fbe:	c5 e1       	ldi	r28, 0x15	; 21
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3fc0:	de e1       	ldi	r29, 0x1E	; 30
    3fc2:	0e 94 fb 07 	call	0xff6	; 0xff6 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    3fc6:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    3fc8:	e1 f3       	breq	.-8      	; 0x3fc2 <main+0xc>
    3fca:	2f de       	rcall	.-930    	; 0x3c2a <_Z14serialEventRunv>
    3fcc:	fa cf       	rjmp	.-12     	; 0x3fc2 <main+0xc>

00003fce <_ZdlPv>:
    3fce:	0c 94 31 36 	jmp	0x6c62	; 0x6c62 <free>

00003fd2 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3fd2:	cf 92       	push	r12
    3fd4:	df 92       	push	r13
    3fd6:	ef 92       	push	r14
    3fd8:	ff 92       	push	r15
    3fda:	0f 93       	push	r16
    3fdc:	1f 93       	push	r17
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	6c 01       	movw	r12, r24
    3fe4:	7a 01       	movw	r14, r20
    3fe6:	8b 01       	movw	r16, r22
    3fe8:	c0 e0       	ldi	r28, 0x00	; 0
    3fea:	d0 e0       	ldi	r29, 0x00	; 0
    3fec:	ce 15       	cp	r28, r14
    3fee:	df 05       	cpc	r29, r15
    3ff0:	81 f0       	breq	.+32     	; 0x4012 <_ZN5Print5writeEPKhj+0x40>
    3ff2:	d8 01       	movw	r26, r16
    3ff4:	6d 91       	ld	r22, X+
    3ff6:	8d 01       	movw	r16, r26
    3ff8:	d6 01       	movw	r26, r12
    3ffa:	ed 91       	ld	r30, X+
    3ffc:	fc 91       	ld	r31, X
    3ffe:	01 90       	ld	r0, Z+
    4000:	f0 81       	ld	r31, Z
    4002:	e0 2d       	mov	r30, r0
    4004:	c6 01       	movw	r24, r12
    4006:	19 95       	eicall
    4008:	89 2b       	or	r24, r25
    400a:	11 f0       	breq	.+4      	; 0x4010 <_ZN5Print5writeEPKhj+0x3e>
    400c:	21 96       	adiw	r28, 0x01	; 1
    400e:	ee cf       	rjmp	.-36     	; 0x3fec <_ZN5Print5writeEPKhj+0x1a>
    4010:	7e 01       	movw	r14, r28
    4012:	c7 01       	movw	r24, r14
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	0f 91       	pop	r16
    401c:	ff 90       	pop	r15
    401e:	ef 90       	pop	r14
    4020:	df 90       	pop	r13
    4022:	cf 90       	pop	r12
    4024:	08 95       	ret

00004026 <_ZN5Print5writeEPKc>:
    4026:	61 15       	cp	r22, r1
    4028:	71 05       	cpc	r23, r1
    402a:	79 f0       	breq	.+30     	; 0x404a <_ZN5Print5writeEPKc+0x24>
    402c:	fb 01       	movw	r30, r22
    402e:	01 90       	ld	r0, Z+
    4030:	00 20       	and	r0, r0
    4032:	e9 f7       	brne	.-6      	; 0x402e <_ZN5Print5writeEPKc+0x8>
    4034:	31 97       	sbiw	r30, 0x01	; 1
    4036:	af 01       	movw	r20, r30
    4038:	46 1b       	sub	r20, r22
    403a:	57 0b       	sbc	r21, r23
    403c:	dc 01       	movw	r26, r24
    403e:	ed 91       	ld	r30, X+
    4040:	fc 91       	ld	r31, X
    4042:	02 80       	ldd	r0, Z+2	; 0x02
    4044:	f3 81       	ldd	r31, Z+3	; 0x03
    4046:	e0 2d       	mov	r30, r0
    4048:	19 94       	eijmp
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	08 95       	ret

00004050 <_ZN5Print5printERK6String>:
    4050:	db 01       	movw	r26, r22
    4052:	14 96       	adiw	r26, 0x04	; 4
    4054:	4d 91       	ld	r20, X+
    4056:	5c 91       	ld	r21, X
    4058:	15 97       	sbiw	r26, 0x05	; 5
    405a:	6d 91       	ld	r22, X+
    405c:	7c 91       	ld	r23, X
    405e:	dc 01       	movw	r26, r24
    4060:	ed 91       	ld	r30, X+
    4062:	fc 91       	ld	r31, X
    4064:	02 80       	ldd	r0, Z+2	; 0x02
    4066:	f3 81       	ldd	r31, Z+3	; 0x03
    4068:	e0 2d       	mov	r30, r0
    406a:	19 94       	eijmp

0000406c <_ZN5Print5printEPKc>:
    406c:	dc cf       	rjmp	.-72     	; 0x4026 <_ZN5Print5writeEPKc>

0000406e <_ZN5Print5printEc>:
    406e:	dc 01       	movw	r26, r24
    4070:	ed 91       	ld	r30, X+
    4072:	fc 91       	ld	r31, X
    4074:	01 90       	ld	r0, Z+
    4076:	f0 81       	ld	r31, Z
    4078:	e0 2d       	mov	r30, r0
    407a:	19 94       	eijmp

0000407c <_ZN5Print7printlnEv>:
    407c:	69 ec       	ldi	r22, 0xC9	; 201
    407e:	75 e0       	ldi	r23, 0x05	; 5
    4080:	d2 cf       	rjmp	.-92     	; 0x4026 <_ZN5Print5writeEPKc>

00004082 <_ZN5Print7printlnEPKc>:
    4082:	0f 93       	push	r16
    4084:	1f 93       	push	r17
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	ec 01       	movw	r28, r24
    408c:	cc df       	rcall	.-104    	; 0x4026 <_ZN5Print5writeEPKc>
    408e:	8c 01       	movw	r16, r24
    4090:	ce 01       	movw	r24, r28
    4092:	f4 df       	rcall	.-24     	; 0x407c <_ZN5Print7printlnEv>
    4094:	80 0f       	add	r24, r16
    4096:	91 1f       	adc	r25, r17
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <_ZN5Print11printNumberEmh>:
    40a2:	8f 92       	push	r8
    40a4:	9f 92       	push	r9
    40a6:	af 92       	push	r10
    40a8:	bf 92       	push	r11
    40aa:	ef 92       	push	r14
    40ac:	ff 92       	push	r15
    40ae:	0f 93       	push	r16
    40b0:	1f 93       	push	r17
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
    40ba:	a1 97       	sbiw	r28, 0x21	; 33
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	7c 01       	movw	r14, r24
    40c8:	fa 01       	movw	r30, r20
    40ca:	cb 01       	movw	r24, r22
    40cc:	19 a2       	std	Y+33, r1	; 0x21
    40ce:	22 30       	cpi	r18, 0x02	; 2
    40d0:	08 f4       	brcc	.+2      	; 0x40d4 <_ZN5Print11printNumberEmh+0x32>
    40d2:	2a e0       	ldi	r18, 0x0A	; 10
    40d4:	8e 01       	movw	r16, r28
    40d6:	0f 5d       	subi	r16, 0xDF	; 223
    40d8:	1f 4f       	sbci	r17, 0xFF	; 255
    40da:	82 2e       	mov	r8, r18
    40dc:	91 2c       	mov	r9, r1
    40de:	a1 2c       	mov	r10, r1
    40e0:	b1 2c       	mov	r11, r1
    40e2:	bf 01       	movw	r22, r30
    40e4:	a5 01       	movw	r20, r10
    40e6:	94 01       	movw	r18, r8
    40e8:	0e 94 da 33 	call	0x67b4	; 0x67b4 <__udivmodsi4>
    40ec:	f9 01       	movw	r30, r18
    40ee:	ca 01       	movw	r24, r20
    40f0:	01 50       	subi	r16, 0x01	; 1
    40f2:	11 09       	sbc	r17, r1
    40f4:	6a 30       	cpi	r22, 0x0A	; 10
    40f6:	10 f4       	brcc	.+4      	; 0x40fc <_ZN5Print11printNumberEmh+0x5a>
    40f8:	60 5d       	subi	r22, 0xD0	; 208
    40fa:	01 c0       	rjmp	.+2      	; 0x40fe <_ZN5Print11printNumberEmh+0x5c>
    40fc:	69 5c       	subi	r22, 0xC9	; 201
    40fe:	d8 01       	movw	r26, r16
    4100:	6c 93       	st	X, r22
    4102:	23 2b       	or	r18, r19
    4104:	24 2b       	or	r18, r20
    4106:	25 2b       	or	r18, r21
    4108:	61 f7       	brne	.-40     	; 0x40e2 <_ZN5Print11printNumberEmh+0x40>
    410a:	b8 01       	movw	r22, r16
    410c:	c7 01       	movw	r24, r14
    410e:	8b df       	rcall	.-234    	; 0x4026 <_ZN5Print5writeEPKc>
    4110:	a1 96       	adiw	r28, 0x21	; 33
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	f8 94       	cli
    4116:	de bf       	out	0x3e, r29	; 62
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	cd bf       	out	0x3d, r28	; 61
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	ff 90       	pop	r15
    4126:	ef 90       	pop	r14
    4128:	bf 90       	pop	r11
    412a:	af 90       	pop	r10
    412c:	9f 90       	pop	r9
    412e:	8f 90       	pop	r8
    4130:	08 95       	ret

00004132 <_ZN5Print5printEmi>:
    4132:	21 15       	cp	r18, r1
    4134:	31 05       	cpc	r19, r1
    4136:	41 f4       	brne	.+16     	; 0x4148 <_ZN5Print5printEmi+0x16>
    4138:	dc 01       	movw	r26, r24
    413a:	ed 91       	ld	r30, X+
    413c:	fc 91       	ld	r31, X
    413e:	01 90       	ld	r0, Z+
    4140:	f0 81       	ld	r31, Z
    4142:	e0 2d       	mov	r30, r0
    4144:	64 2f       	mov	r22, r20
    4146:	19 94       	eijmp
    4148:	ac cf       	rjmp	.-168    	; 0x40a2 <_ZN5Print11printNumberEmh>

0000414a <_ZN5Print5printEhi>:
    414a:	9a 01       	movw	r18, r20
    414c:	46 2f       	mov	r20, r22
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	ee cf       	rjmp	.-36     	; 0x4132 <_ZN5Print5printEmi>

00004156 <_ZN5Print5printEji>:
    4156:	9a 01       	movw	r18, r20
    4158:	ab 01       	movw	r20, r22
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	70 e0       	ldi	r23, 0x00	; 0
    415e:	e9 cf       	rjmp	.-46     	; 0x4132 <_ZN5Print5printEmi>

00004160 <_ZN5Print7printlnEji>:
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	ec 01       	movw	r28, r24
    416a:	f5 df       	rcall	.-22     	; 0x4156 <_ZN5Print5printEji>
    416c:	8c 01       	movw	r16, r24
    416e:	ce 01       	movw	r24, r28
    4170:	85 df       	rcall	.-246    	; 0x407c <_ZN5Print7printlnEv>
    4172:	80 0f       	add	r24, r16
    4174:	91 1f       	adc	r25, r17
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	1f 91       	pop	r17
    417c:	0f 91       	pop	r16
    417e:	08 95       	ret

00004180 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4180:	7f 92       	push	r7
    4182:	8f 92       	push	r8
    4184:	9f 92       	push	r9
    4186:	af 92       	push	r10
    4188:	bf 92       	push	r11
    418a:	cf 92       	push	r12
    418c:	df 92       	push	r13
    418e:	ef 92       	push	r14
    4190:	ff 92       	push	r15
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	8c 01       	movw	r16, r24
    419c:	6a 01       	movw	r12, r20
    419e:	7b 01       	movw	r14, r22
    41a0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    41a2:	9a 01       	movw	r18, r20
    41a4:	ab 01       	movw	r20, r22
    41a6:	c7 01       	movw	r24, r14
    41a8:	b6 01       	movw	r22, r12
    41aa:	0e 94 a6 33 	call	0x674c	; 0x674c <__unordsf2>
    41ae:	88 23       	and	r24, r24
    41b0:	19 f0       	breq	.+6      	; 0x41b8 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    41b2:	6c ec       	ldi	r22, 0xCC	; 204
    41b4:	75 e0       	ldi	r23, 0x05	; 5
    41b6:	25 c0       	rjmp	.+74     	; 0x4202 <_ZN5Print10printFloatEdh+0x82>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    41b8:	46 01       	movw	r8, r12
    41ba:	57 01       	movw	r10, r14
    41bc:	e8 94       	clt
    41be:	b7 f8       	bld	r11, 7
    41c0:	2f ef       	ldi	r18, 0xFF	; 255
    41c2:	3f ef       	ldi	r19, 0xFF	; 255
    41c4:	4f e7       	ldi	r20, 0x7F	; 127
    41c6:	5f e7       	ldi	r21, 0x7F	; 127
    41c8:	c5 01       	movw	r24, r10
    41ca:	b4 01       	movw	r22, r8
    41cc:	0e 94 a6 33 	call	0x674c	; 0x674c <__unordsf2>
    41d0:	81 11       	cpse	r24, r1
    41d2:	0c c0       	rjmp	.+24     	; 0x41ec <_ZN5Print10printFloatEdh+0x6c>
    41d4:	2f ef       	ldi	r18, 0xFF	; 255
    41d6:	3f ef       	ldi	r19, 0xFF	; 255
    41d8:	4f e7       	ldi	r20, 0x7F	; 127
    41da:	5f e7       	ldi	r21, 0x7F	; 127
    41dc:	c5 01       	movw	r24, r10
    41de:	b4 01       	movw	r22, r8
    41e0:	ab d9       	rcall	.-3242   	; 0x3538 <__cmpsf2>
    41e2:	18 16       	cp	r1, r24
    41e4:	1c f4       	brge	.+6      	; 0x41ec <_ZN5Print10printFloatEdh+0x6c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    41e6:	60 ed       	ldi	r22, 0xD0	; 208
    41e8:	75 e0       	ldi	r23, 0x05	; 5
    41ea:	0b c0       	rjmp	.+22     	; 0x4202 <_ZN5Print10printFloatEdh+0x82>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    41ec:	2f ef       	ldi	r18, 0xFF	; 255
    41ee:	3f ef       	ldi	r19, 0xFF	; 255
    41f0:	4f e7       	ldi	r20, 0x7F	; 127
    41f2:	5f e4       	ldi	r21, 0x4F	; 79
    41f4:	c7 01       	movw	r24, r14
    41f6:	b6 01       	movw	r22, r12
    41f8:	0f db       	rcall	.-2530   	; 0x3818 <__gesf2>
    41fa:	18 16       	cp	r1, r24
    41fc:	8c f4       	brge	.+34     	; 0x4220 <_ZN5Print10printFloatEdh+0xa0>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    41fe:	64 ed       	ldi	r22, 0xD4	; 212
    4200:	75 e0       	ldi	r23, 0x05	; 5
    4202:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	ff 90       	pop	r15
    420e:	ef 90       	pop	r14
    4210:	df 90       	pop	r13
    4212:	cf 90       	pop	r12
    4214:	bf 90       	pop	r11
    4216:	af 90       	pop	r10
    4218:	9f 90       	pop	r9
    421a:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    421c:	7f 90       	pop	r7
    421e:	03 cf       	rjmp	.-506    	; 0x4026 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4220:	2f ef       	ldi	r18, 0xFF	; 255
    4222:	3f ef       	ldi	r19, 0xFF	; 255
    4224:	4f e7       	ldi	r20, 0x7F	; 127
    4226:	5f ec       	ldi	r21, 0xCF	; 207
    4228:	c7 01       	movw	r24, r14
    422a:	b6 01       	movw	r22, r12
    422c:	85 d9       	rcall	.-3318   	; 0x3538 <__cmpsf2>
    422e:	87 fd       	sbrc	r24, 7
    4230:	e6 cf       	rjmp	.-52     	; 0x41fe <_ZN5Print10printFloatEdh+0x7e>
  
  // Handle negative numbers
  if (number < 0.0)
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	a9 01       	movw	r20, r18
    4238:	c7 01       	movw	r24, r14
    423a:	b6 01       	movw	r22, r12
    423c:	7d d9       	rcall	.-3334   	; 0x3538 <__cmpsf2>
    423e:	87 ff       	sbrs	r24, 7
  {
     n += print('-');
    4240:	09 c0       	rjmp	.+18     	; 0x4254 <_ZN5Print10printFloatEdh+0xd4>
    4242:	6d e2       	ldi	r22, 0x2D	; 45
    4244:	c8 01       	movw	r24, r16
    4246:	13 df       	rcall	.-474    	; 0x406e <_ZN5Print5printEc>
    4248:	ec 01       	movw	r28, r24
     number = -number;
    424a:	f7 fa       	bst	r15, 7
    424c:	f0 94       	com	r15
    424e:	f7 f8       	bld	r15, 7
    4250:	f0 94       	com	r15
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <_ZN5Print10printFloatEdh+0xd8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4254:	c0 e0       	ldi	r28, 0x00	; 0
    4256:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4258:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    425a:	60 e0       	ldi	r22, 0x00	; 0
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4262:	7b 14       	cp	r7, r11
    rounding /= 10.0;
    4264:	39 f0       	breq	.+14     	; 0x4274 <_ZN5Print10printFloatEdh+0xf4>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e2       	ldi	r20, 0x20	; 32
    426c:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    426e:	68 d9       	rcall	.-3376   	; 0x3540 <__divsf3>
    4270:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    4272:	f7 cf       	rjmp	.-18     	; 0x4262 <_ZN5Print10printFloatEdh+0xe2>
    4274:	a7 01       	movw	r20, r14
    4276:	96 01       	movw	r18, r12
    4278:	fb d8       	rcall	.-3594   	; 0x3470 <__addsf3>
    427a:	6b 01       	movw	r12, r22
    427c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    427e:	0e 94 77 33 	call	0x66ee	; 0x66ee <__fixunssfsi>
    4282:	4b 01       	movw	r8, r22
    4284:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4286:	2a e0       	ldi	r18, 0x0A	; 10
    4288:	ab 01       	movw	r20, r22
    428a:	bc 01       	movw	r22, r24
    428c:	c8 01       	movw	r24, r16
    428e:	09 df       	rcall	.-494    	; 0x40a2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4290:	c8 0f       	add	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4292:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4294:	77 20       	and	r7, r7
    4296:	81 f1       	breq	.+96     	; 0x42f8 <_ZN5Print10printFloatEdh+0x178>
    4298:	c5 01       	movw	r24, r10
    429a:	b4 01       	movw	r22, r8
    429c:	bd d9       	rcall	.-3206   	; 0x3618 <__floatunsisf>
    429e:	9b 01       	movw	r18, r22
    42a0:	ac 01       	movw	r20, r24
    42a2:	c7 01       	movw	r24, r14
    42a4:	b6 01       	movw	r22, r12
    42a6:	e3 d8       	rcall	.-3642   	; 0x346e <__subsf3>
    42a8:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    42aa:	7c 01       	movw	r14, r24
    42ac:	6e e2       	ldi	r22, 0x2E	; 46
    42ae:	c8 01       	movw	r24, r16
    42b0:	de de       	rcall	.-580    	; 0x406e <_ZN5Print5printEc>
    42b2:	c8 0f       	add	r28, r24
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    42b4:	d9 1f       	adc	r29, r25
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e2       	ldi	r20, 0x20	; 32
    42bc:	51 e4       	ldi	r21, 0x41	; 65
    42be:	c7 01       	movw	r24, r14
    42c0:	b6 01       	movw	r22, r12
    42c2:	ae da       	rcall	.-2724   	; 0x3820 <__mulsf3>
    42c4:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    42c6:	5c 01       	movw	r10, r24
    42c8:	0e 94 77 33 	call	0x66ee	; 0x66ee <__fixunssfsi>
    n += print(toPrint);
    42cc:	6b 01       	movw	r12, r22
    42ce:	7c 01       	movw	r14, r24
    42d0:	4a e0       	ldi	r20, 0x0A	; 10
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	c8 01       	movw	r24, r16
    42d6:	3f df       	rcall	.-386    	; 0x4156 <_ZN5Print5printEji>
    remainder -= toPrint; 
    42d8:	c8 0f       	add	r28, r24
    42da:	d9 1f       	adc	r29, r25
    42dc:	b6 01       	movw	r22, r12
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	9a d9       	rcall	.-3276   	; 0x3618 <__floatunsisf>
    42e4:	9b 01       	movw	r18, r22
    42e6:	ac 01       	movw	r20, r24
    42e8:	c5 01       	movw	r24, r10
    42ea:	b4 01       	movw	r22, r8
    42ec:	c0 d8       	rcall	.-3712   	; 0x346e <__subsf3>
    42ee:	6b 01       	movw	r12, r22
    42f0:	7c 01       	movw	r14, r24
    42f2:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    42f4:	71 10       	cpse	r7, r1
    42f6:	df cf       	rjmp	.-66     	; 0x42b6 <_ZN5Print10printFloatEdh+0x136>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    42f8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    42fa:	df 91       	pop	r29
    42fc:	cf 91       	pop	r28
    42fe:	1f 91       	pop	r17
    4300:	0f 91       	pop	r16
    4302:	ff 90       	pop	r15
    4304:	ef 90       	pop	r14
    4306:	df 90       	pop	r13
    4308:	cf 90       	pop	r12
    430a:	bf 90       	pop	r11
    430c:	af 90       	pop	r10
    430e:	9f 90       	pop	r9
    4310:	8f 90       	pop	r8
    4312:	7f 90       	pop	r7
    4314:	08 95       	ret

00004316 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4316:	34 cf       	rjmp	.-408    	; 0x4180 <_ZN5Print10printFloatEdh>

00004318 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4318:	08 95       	ret

0000431a <attachInterrupt>:
    431a:	88 30       	cpi	r24, 0x08	; 8
    431c:	08 f0       	brcs	.+2      	; 0x4320 <attachInterrupt+0x6>
    431e:	70 c0       	rjmp	.+224    	; 0x4400 <attachInterrupt+0xe6>
    4320:	a8 2f       	mov	r26, r24
    4322:	b0 e0       	ldi	r27, 0x00	; 0
    4324:	aa 0f       	add	r26, r26
    4326:	bb 1f       	adc	r27, r27
    4328:	aa 5f       	subi	r26, 0xFA	; 250
    432a:	bd 4f       	sbci	r27, 0xFD	; 253
    432c:	11 96       	adiw	r26, 0x01	; 1
    432e:	7c 93       	st	X, r23
    4330:	6e 93       	st	-X, r22
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	fc 01       	movw	r30, r24
    4336:	31 97       	sbiw	r30, 0x01	; 1
    4338:	e7 30       	cpi	r30, 0x07	; 7
    433a:	f1 05       	cpc	r31, r1
    433c:	a0 f5       	brcc	.+104    	; 0x43a6 <attachInterrupt+0x8c>
    433e:	88 27       	eor	r24, r24
    4340:	ea 53       	subi	r30, 0x3A	; 58
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	8f 4f       	sbci	r24, 0xFF	; 255
    4346:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <__tablejump2__>
    434a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    434e:	8c 7f       	andi	r24, 0xFC	; 252
    4350:	48 2b       	or	r20, r24
    4352:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4356:	e8 9a       	sbi	0x1d, 0	; 29
    4358:	08 95       	ret
    435a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    435e:	83 7f       	andi	r24, 0xF3	; 243
    4360:	44 0f       	add	r20, r20
    4362:	55 1f       	adc	r21, r21
    4364:	44 0f       	add	r20, r20
    4366:	55 1f       	adc	r21, r21
    4368:	48 2b       	or	r20, r24
    436a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    436e:	e9 9a       	sbi	0x1d, 1	; 29
    4370:	08 95       	ret
    4372:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4376:	8f 7c       	andi	r24, 0xCF	; 207
    4378:	74 e0       	ldi	r23, 0x04	; 4
    437a:	44 0f       	add	r20, r20
    437c:	55 1f       	adc	r21, r21
    437e:	7a 95       	dec	r23
    4380:	e1 f7       	brne	.-8      	; 0x437a <attachInterrupt+0x60>
    4382:	48 2b       	or	r20, r24
    4384:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4388:	ea 9a       	sbi	0x1d, 2	; 29
    438a:	08 95       	ret
    438c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4390:	8f 73       	andi	r24, 0x3F	; 63
    4392:	66 e0       	ldi	r22, 0x06	; 6
    4394:	44 0f       	add	r20, r20
    4396:	55 1f       	adc	r21, r21
    4398:	6a 95       	dec	r22
    439a:	e1 f7       	brne	.-8      	; 0x4394 <attachInterrupt+0x7a>
    439c:	48 2b       	or	r20, r24
    439e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    43a2:	eb 9a       	sbi	0x1d, 3	; 29
    43a4:	08 95       	ret
    43a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43aa:	8c 7f       	andi	r24, 0xFC	; 252
    43ac:	48 2b       	or	r20, r24
    43ae:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43b2:	ec 9a       	sbi	0x1d, 4	; 29
    43b4:	08 95       	ret
    43b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43ba:	83 7f       	andi	r24, 0xF3	; 243
    43bc:	44 0f       	add	r20, r20
    43be:	55 1f       	adc	r21, r21
    43c0:	44 0f       	add	r20, r20
    43c2:	55 1f       	adc	r21, r21
    43c4:	48 2b       	or	r20, r24
    43c6:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43ca:	ed 9a       	sbi	0x1d, 5	; 29
    43cc:	08 95       	ret
    43ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43d2:	8f 7c       	andi	r24, 0xCF	; 207
    43d4:	24 e0       	ldi	r18, 0x04	; 4
    43d6:	44 0f       	add	r20, r20
    43d8:	55 1f       	adc	r21, r21
    43da:	2a 95       	dec	r18
    43dc:	e1 f7       	brne	.-8      	; 0x43d6 <attachInterrupt+0xbc>
    43de:	48 2b       	or	r20, r24
    43e0:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43e4:	ee 9a       	sbi	0x1d, 6	; 29
    43e6:	08 95       	ret
    43e8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43ec:	8f 73       	andi	r24, 0x3F	; 63
    43ee:	96 e0       	ldi	r25, 0x06	; 6
    43f0:	44 0f       	add	r20, r20
    43f2:	55 1f       	adc	r21, r21
    43f4:	9a 95       	dec	r25
    43f6:	e1 f7       	brne	.-8      	; 0x43f0 <attachInterrupt+0xd6>
    43f8:	48 2b       	or	r20, r24
    43fa:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43fe:	ef 9a       	sbi	0x1d, 7	; 29
    4400:	08 95       	ret

00004402 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    4402:	1f 92       	push	r1
    4404:	0f 92       	push	r0
    4406:	0f b6       	in	r0, 0x3f	; 63
    4408:	0f 92       	push	r0
    440a:	11 24       	eor	r1, r1
    440c:	0b b6       	in	r0, 0x3b	; 59
    440e:	0f 92       	push	r0
    4410:	2f 93       	push	r18
    4412:	3f 93       	push	r19
    4414:	4f 93       	push	r20
    4416:	5f 93       	push	r21
    4418:	6f 93       	push	r22
    441a:	7f 93       	push	r23
    441c:	8f 93       	push	r24
    441e:	9f 93       	push	r25
    4420:	af 93       	push	r26
    4422:	bf 93       	push	r27
    4424:	ef 93       	push	r30
    4426:	ff 93       	push	r31
    4428:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    442c:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    4430:	19 95       	eicall
    4432:	ff 91       	pop	r31
    4434:	ef 91       	pop	r30
    4436:	bf 91       	pop	r27
    4438:	af 91       	pop	r26
    443a:	9f 91       	pop	r25
    443c:	8f 91       	pop	r24
    443e:	7f 91       	pop	r23
    4440:	6f 91       	pop	r22
    4442:	5f 91       	pop	r21
    4444:	4f 91       	pop	r20
    4446:	3f 91       	pop	r19
    4448:	2f 91       	pop	r18
    444a:	0f 90       	pop	r0
    444c:	0b be       	out	0x3b, r0	; 59
    444e:	0f 90       	pop	r0
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	0f 90       	pop	r0
    4454:	1f 90       	pop	r1
    4456:	18 95       	reti

00004458 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    4458:	1f 92       	push	r1
    445a:	0f 92       	push	r0
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	0f 92       	push	r0
    4460:	11 24       	eor	r1, r1
    4462:	0b b6       	in	r0, 0x3b	; 59
    4464:	0f 92       	push	r0
    4466:	2f 93       	push	r18
    4468:	3f 93       	push	r19
    446a:	4f 93       	push	r20
    446c:	5f 93       	push	r21
    446e:	6f 93       	push	r22
    4470:	7f 93       	push	r23
    4472:	8f 93       	push	r24
    4474:	9f 93       	push	r25
    4476:	af 93       	push	r26
    4478:	bf 93       	push	r27
    447a:	ef 93       	push	r30
    447c:	ff 93       	push	r31
    447e:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    4482:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    4486:	19 95       	eicall
    4488:	ff 91       	pop	r31
    448a:	ef 91       	pop	r30
    448c:	bf 91       	pop	r27
    448e:	af 91       	pop	r26
    4490:	9f 91       	pop	r25
    4492:	8f 91       	pop	r24
    4494:	7f 91       	pop	r23
    4496:	6f 91       	pop	r22
    4498:	5f 91       	pop	r21
    449a:	4f 91       	pop	r20
    449c:	3f 91       	pop	r19
    449e:	2f 91       	pop	r18
    44a0:	0f 90       	pop	r0
    44a2:	0b be       	out	0x3b, r0	; 59
    44a4:	0f 90       	pop	r0
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	0f 90       	pop	r0
    44aa:	1f 90       	pop	r1
    44ac:	18 95       	reti

000044ae <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    44ae:	1f 92       	push	r1
    44b0:	0f 92       	push	r0
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	0f 92       	push	r0
    44b6:	11 24       	eor	r1, r1
    44b8:	0b b6       	in	r0, 0x3b	; 59
    44ba:	0f 92       	push	r0
    44bc:	2f 93       	push	r18
    44be:	3f 93       	push	r19
    44c0:	4f 93       	push	r20
    44c2:	5f 93       	push	r21
    44c4:	6f 93       	push	r22
    44c6:	7f 93       	push	r23
    44c8:	8f 93       	push	r24
    44ca:	9f 93       	push	r25
    44cc:	af 93       	push	r26
    44ce:	bf 93       	push	r27
    44d0:	ef 93       	push	r30
    44d2:	ff 93       	push	r31
    44d4:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    44d8:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    44dc:	19 95       	eicall
    44de:	ff 91       	pop	r31
    44e0:	ef 91       	pop	r30
    44e2:	bf 91       	pop	r27
    44e4:	af 91       	pop	r26
    44e6:	9f 91       	pop	r25
    44e8:	8f 91       	pop	r24
    44ea:	7f 91       	pop	r23
    44ec:	6f 91       	pop	r22
    44ee:	5f 91       	pop	r21
    44f0:	4f 91       	pop	r20
    44f2:	3f 91       	pop	r19
    44f4:	2f 91       	pop	r18
    44f6:	0f 90       	pop	r0
    44f8:	0b be       	out	0x3b, r0	; 59
    44fa:	0f 90       	pop	r0
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	0f 90       	pop	r0
    4500:	1f 90       	pop	r1
    4502:	18 95       	reti

00004504 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    4504:	1f 92       	push	r1
    4506:	0f 92       	push	r0
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	0f 92       	push	r0
    450c:	11 24       	eor	r1, r1
    450e:	0b b6       	in	r0, 0x3b	; 59
    4510:	0f 92       	push	r0
    4512:	2f 93       	push	r18
    4514:	3f 93       	push	r19
    4516:	4f 93       	push	r20
    4518:	5f 93       	push	r21
    451a:	6f 93       	push	r22
    451c:	7f 93       	push	r23
    451e:	8f 93       	push	r24
    4520:	9f 93       	push	r25
    4522:	af 93       	push	r26
    4524:	bf 93       	push	r27
    4526:	ef 93       	push	r30
    4528:	ff 93       	push	r31
    452a:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    452e:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    4532:	19 95       	eicall
    4534:	ff 91       	pop	r31
    4536:	ef 91       	pop	r30
    4538:	bf 91       	pop	r27
    453a:	af 91       	pop	r26
    453c:	9f 91       	pop	r25
    453e:	8f 91       	pop	r24
    4540:	7f 91       	pop	r23
    4542:	6f 91       	pop	r22
    4544:	5f 91       	pop	r21
    4546:	4f 91       	pop	r20
    4548:	3f 91       	pop	r19
    454a:	2f 91       	pop	r18
    454c:	0f 90       	pop	r0
    454e:	0b be       	out	0x3b, r0	; 59
    4550:	0f 90       	pop	r0
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	0f 90       	pop	r0
    4556:	1f 90       	pop	r1
    4558:	18 95       	reti

0000455a <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    455a:	1f 92       	push	r1
    455c:	0f 92       	push	r0
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	0f 92       	push	r0
    4562:	11 24       	eor	r1, r1
    4564:	0b b6       	in	r0, 0x3b	; 59
    4566:	0f 92       	push	r0
    4568:	2f 93       	push	r18
    456a:	3f 93       	push	r19
    456c:	4f 93       	push	r20
    456e:	5f 93       	push	r21
    4570:	6f 93       	push	r22
    4572:	7f 93       	push	r23
    4574:	8f 93       	push	r24
    4576:	9f 93       	push	r25
    4578:	af 93       	push	r26
    457a:	bf 93       	push	r27
    457c:	ef 93       	push	r30
    457e:	ff 93       	push	r31
    4580:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    4584:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    4588:	19 95       	eicall
    458a:	ff 91       	pop	r31
    458c:	ef 91       	pop	r30
    458e:	bf 91       	pop	r27
    4590:	af 91       	pop	r26
    4592:	9f 91       	pop	r25
    4594:	8f 91       	pop	r24
    4596:	7f 91       	pop	r23
    4598:	6f 91       	pop	r22
    459a:	5f 91       	pop	r21
    459c:	4f 91       	pop	r20
    459e:	3f 91       	pop	r19
    45a0:	2f 91       	pop	r18
    45a2:	0f 90       	pop	r0
    45a4:	0b be       	out	0x3b, r0	; 59
    45a6:	0f 90       	pop	r0
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	0f 90       	pop	r0
    45ac:	1f 90       	pop	r1
    45ae:	18 95       	reti

000045b0 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    45b0:	1f 92       	push	r1
    45b2:	0f 92       	push	r0
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	0f 92       	push	r0
    45b8:	11 24       	eor	r1, r1
    45ba:	0b b6       	in	r0, 0x3b	; 59
    45bc:	0f 92       	push	r0
    45be:	2f 93       	push	r18
    45c0:	3f 93       	push	r19
    45c2:	4f 93       	push	r20
    45c4:	5f 93       	push	r21
    45c6:	6f 93       	push	r22
    45c8:	7f 93       	push	r23
    45ca:	8f 93       	push	r24
    45cc:	9f 93       	push	r25
    45ce:	af 93       	push	r26
    45d0:	bf 93       	push	r27
    45d2:	ef 93       	push	r30
    45d4:	ff 93       	push	r31
    45d6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    45da:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    45de:	19 95       	eicall
    45e0:	ff 91       	pop	r31
    45e2:	ef 91       	pop	r30
    45e4:	bf 91       	pop	r27
    45e6:	af 91       	pop	r26
    45e8:	9f 91       	pop	r25
    45ea:	8f 91       	pop	r24
    45ec:	7f 91       	pop	r23
    45ee:	6f 91       	pop	r22
    45f0:	5f 91       	pop	r21
    45f2:	4f 91       	pop	r20
    45f4:	3f 91       	pop	r19
    45f6:	2f 91       	pop	r18
    45f8:	0f 90       	pop	r0
    45fa:	0b be       	out	0x3b, r0	; 59
    45fc:	0f 90       	pop	r0
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	0f 90       	pop	r0
    4602:	1f 90       	pop	r1
    4604:	18 95       	reti

00004606 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    4606:	1f 92       	push	r1
    4608:	0f 92       	push	r0
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	0f 92       	push	r0
    460e:	11 24       	eor	r1, r1
    4610:	0b b6       	in	r0, 0x3b	; 59
    4612:	0f 92       	push	r0
    4614:	2f 93       	push	r18
    4616:	3f 93       	push	r19
    4618:	4f 93       	push	r20
    461a:	5f 93       	push	r21
    461c:	6f 93       	push	r22
    461e:	7f 93       	push	r23
    4620:	8f 93       	push	r24
    4622:	9f 93       	push	r25
    4624:	af 93       	push	r26
    4626:	bf 93       	push	r27
    4628:	ef 93       	push	r30
    462a:	ff 93       	push	r31
    462c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    4630:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    4634:	19 95       	eicall
    4636:	ff 91       	pop	r31
    4638:	ef 91       	pop	r30
    463a:	bf 91       	pop	r27
    463c:	af 91       	pop	r26
    463e:	9f 91       	pop	r25
    4640:	8f 91       	pop	r24
    4642:	7f 91       	pop	r23
    4644:	6f 91       	pop	r22
    4646:	5f 91       	pop	r21
    4648:	4f 91       	pop	r20
    464a:	3f 91       	pop	r19
    464c:	2f 91       	pop	r18
    464e:	0f 90       	pop	r0
    4650:	0b be       	out	0x3b, r0	; 59
    4652:	0f 90       	pop	r0
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	0f 90       	pop	r0
    4658:	1f 90       	pop	r1
    465a:	18 95       	reti

0000465c <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    465c:	1f 92       	push	r1
    465e:	0f 92       	push	r0
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	0f 92       	push	r0
    4664:	11 24       	eor	r1, r1
    4666:	0b b6       	in	r0, 0x3b	; 59
    4668:	0f 92       	push	r0
    466a:	2f 93       	push	r18
    466c:	3f 93       	push	r19
    466e:	4f 93       	push	r20
    4670:	5f 93       	push	r21
    4672:	6f 93       	push	r22
    4674:	7f 93       	push	r23
    4676:	8f 93       	push	r24
    4678:	9f 93       	push	r25
    467a:	af 93       	push	r26
    467c:	bf 93       	push	r27
    467e:	ef 93       	push	r30
    4680:	ff 93       	push	r31
    4682:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    4686:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    468a:	19 95       	eicall
    468c:	ff 91       	pop	r31
    468e:	ef 91       	pop	r30
    4690:	bf 91       	pop	r27
    4692:	af 91       	pop	r26
    4694:	9f 91       	pop	r25
    4696:	8f 91       	pop	r24
    4698:	7f 91       	pop	r23
    469a:	6f 91       	pop	r22
    469c:	5f 91       	pop	r21
    469e:	4f 91       	pop	r20
    46a0:	3f 91       	pop	r19
    46a2:	2f 91       	pop	r18
    46a4:	0f 90       	pop	r0
    46a6:	0b be       	out	0x3b, r0	; 59
    46a8:	0f 90       	pop	r0
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	0f 90       	pop	r0
    46ae:	1f 90       	pop	r1
    46b0:	18 95       	reti

000046b2 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    46b2:	1f 92       	push	r1
    46b4:	0f 92       	push	r0
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	0f 92       	push	r0
    46ba:	11 24       	eor	r1, r1
    46bc:	2f 93       	push	r18
    46be:	3f 93       	push	r19
    46c0:	8f 93       	push	r24
    46c2:	9f 93       	push	r25
    46c4:	af 93       	push	r26
    46c6:	bf 93       	push	r27
    46c8:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <timer0_millis>
    46cc:	90 91 90 08 	lds	r25, 0x0890	; 0x800890 <timer0_millis+0x1>
    46d0:	a0 91 91 08 	lds	r26, 0x0891	; 0x800891 <timer0_millis+0x2>
    46d4:	b0 91 92 08 	lds	r27, 0x0892	; 0x800892 <timer0_millis+0x3>
    46d8:	30 91 8e 08 	lds	r19, 0x088E	; 0x80088e <timer0_fract>
    46dc:	23 e0       	ldi	r18, 0x03	; 3
    46de:	23 0f       	add	r18, r19
    46e0:	2d 37       	cpi	r18, 0x7D	; 125
    46e2:	20 f4       	brcc	.+8      	; 0x46ec <__vector_23+0x3a>
    46e4:	01 96       	adiw	r24, 0x01	; 1
    46e6:	a1 1d       	adc	r26, r1
    46e8:	b1 1d       	adc	r27, r1
    46ea:	05 c0       	rjmp	.+10     	; 0x46f6 <__vector_23+0x44>
    46ec:	26 e8       	ldi	r18, 0x86	; 134
    46ee:	23 0f       	add	r18, r19
    46f0:	02 96       	adiw	r24, 0x02	; 2
    46f2:	a1 1d       	adc	r26, r1
    46f4:	b1 1d       	adc	r27, r1
    46f6:	20 93 8e 08 	sts	0x088E, r18	; 0x80088e <timer0_fract>
    46fa:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <timer0_millis>
    46fe:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <timer0_millis+0x1>
    4702:	a0 93 91 08 	sts	0x0891, r26	; 0x800891 <timer0_millis+0x2>
    4706:	b0 93 92 08 	sts	0x0892, r27	; 0x800892 <timer0_millis+0x3>
    470a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <timer0_overflow_count>
    470e:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <timer0_overflow_count+0x1>
    4712:	a0 91 95 08 	lds	r26, 0x0895	; 0x800895 <timer0_overflow_count+0x2>
    4716:	b0 91 96 08 	lds	r27, 0x0896	; 0x800896 <timer0_overflow_count+0x3>
    471a:	01 96       	adiw	r24, 0x01	; 1
    471c:	a1 1d       	adc	r26, r1
    471e:	b1 1d       	adc	r27, r1
    4720:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <timer0_overflow_count>
    4724:	90 93 94 08 	sts	0x0894, r25	; 0x800894 <timer0_overflow_count+0x1>
    4728:	a0 93 95 08 	sts	0x0895, r26	; 0x800895 <timer0_overflow_count+0x2>
    472c:	b0 93 96 08 	sts	0x0896, r27	; 0x800896 <timer0_overflow_count+0x3>
    4730:	bf 91       	pop	r27
    4732:	af 91       	pop	r26
    4734:	9f 91       	pop	r25
    4736:	8f 91       	pop	r24
    4738:	3f 91       	pop	r19
    473a:	2f 91       	pop	r18
    473c:	0f 90       	pop	r0
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	0f 90       	pop	r0
    4742:	1f 90       	pop	r1
    4744:	18 95       	reti

00004746 <millis>:
    4746:	2f b7       	in	r18, 0x3f	; 63
    4748:	f8 94       	cli
    474a:	60 91 8f 08 	lds	r22, 0x088F	; 0x80088f <timer0_millis>
    474e:	70 91 90 08 	lds	r23, 0x0890	; 0x800890 <timer0_millis+0x1>
    4752:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <timer0_millis+0x2>
    4756:	90 91 92 08 	lds	r25, 0x0892	; 0x800892 <timer0_millis+0x3>
    475a:	2f bf       	out	0x3f, r18	; 63
    475c:	08 95       	ret

0000475e <micros>:
    475e:	3f b7       	in	r19, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <timer0_overflow_count>
    4766:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <timer0_overflow_count+0x1>
    476a:	a0 91 95 08 	lds	r26, 0x0895	; 0x800895 <timer0_overflow_count+0x2>
    476e:	b0 91 96 08 	lds	r27, 0x0896	; 0x800896 <timer0_overflow_count+0x3>
    4772:	26 b5       	in	r18, 0x26	; 38
    4774:	a8 9b       	sbis	0x15, 0	; 21
    4776:	05 c0       	rjmp	.+10     	; 0x4782 <micros+0x24>
    4778:	2f 3f       	cpi	r18, 0xFF	; 255
    477a:	19 f0       	breq	.+6      	; 0x4782 <micros+0x24>
    477c:	01 96       	adiw	r24, 0x01	; 1
    477e:	a1 1d       	adc	r26, r1
    4780:	b1 1d       	adc	r27, r1
    4782:	3f bf       	out	0x3f, r19	; 63
    4784:	ba 2f       	mov	r27, r26
    4786:	a9 2f       	mov	r26, r25
    4788:	98 2f       	mov	r25, r24
    478a:	88 27       	eor	r24, r24
    478c:	82 0f       	add	r24, r18
    478e:	91 1d       	adc	r25, r1
    4790:	a1 1d       	adc	r26, r1
    4792:	b1 1d       	adc	r27, r1
    4794:	bc 01       	movw	r22, r24
    4796:	cd 01       	movw	r24, r26
    4798:	42 e0       	ldi	r20, 0x02	; 2
    479a:	66 0f       	add	r22, r22
    479c:	77 1f       	adc	r23, r23
    479e:	88 1f       	adc	r24, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	4a 95       	dec	r20
    47a4:	d1 f7       	brne	.-12     	; 0x479a <micros+0x3c>
    47a6:	08 95       	ret

000047a8 <delay>:
    47a8:	8f 92       	push	r8
    47aa:	9f 92       	push	r9
    47ac:	af 92       	push	r10
    47ae:	bf 92       	push	r11
    47b0:	cf 92       	push	r12
    47b2:	df 92       	push	r13
    47b4:	ef 92       	push	r14
    47b6:	ff 92       	push	r15
    47b8:	6b 01       	movw	r12, r22
    47ba:	7c 01       	movw	r14, r24
    47bc:	d0 df       	rcall	.-96     	; 0x475e <micros>
    47be:	4b 01       	movw	r8, r22
    47c0:	5c 01       	movw	r10, r24
    47c2:	c1 14       	cp	r12, r1
    47c4:	d1 04       	cpc	r13, r1
    47c6:	e1 04       	cpc	r14, r1
    47c8:	f1 04       	cpc	r15, r1
    47ca:	f9 f0       	breq	.+62     	; 0x480a <delay+0x62>
    47cc:	0e 94 76 33 	call	0x66ec	; 0x66ec <yield>
    47d0:	c6 df       	rcall	.-116    	; 0x475e <micros>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	88 19       	sub	r24, r8
    47d8:	99 09       	sbc	r25, r9
    47da:	aa 09       	sbc	r26, r10
    47dc:	bb 09       	sbc	r27, r11
    47de:	88 3e       	cpi	r24, 0xE8	; 232
    47e0:	93 40       	sbci	r25, 0x03	; 3
    47e2:	a1 05       	cpc	r26, r1
    47e4:	b1 05       	cpc	r27, r1
    47e6:	68 f3       	brcs	.-38     	; 0x47c2 <delay+0x1a>
    47e8:	21 e0       	ldi	r18, 0x01	; 1
    47ea:	c2 1a       	sub	r12, r18
    47ec:	d1 08       	sbc	r13, r1
    47ee:	e1 08       	sbc	r14, r1
    47f0:	f1 08       	sbc	r15, r1
    47f2:	88 ee       	ldi	r24, 0xE8	; 232
    47f4:	88 0e       	add	r8, r24
    47f6:	83 e0       	ldi	r24, 0x03	; 3
    47f8:	98 1e       	adc	r9, r24
    47fa:	a1 1c       	adc	r10, r1
    47fc:	b1 1c       	adc	r11, r1
    47fe:	c1 14       	cp	r12, r1
    4800:	d1 04       	cpc	r13, r1
    4802:	e1 04       	cpc	r14, r1
    4804:	f1 04       	cpc	r15, r1
    4806:	21 f7       	brne	.-56     	; 0x47d0 <delay+0x28>
    4808:	dc cf       	rjmp	.-72     	; 0x47c2 <delay+0x1a>
    480a:	ff 90       	pop	r15
    480c:	ef 90       	pop	r14
    480e:	df 90       	pop	r13
    4810:	cf 90       	pop	r12
    4812:	bf 90       	pop	r11
    4814:	af 90       	pop	r10
    4816:	9f 90       	pop	r9
    4818:	8f 90       	pop	r8
    481a:	08 95       	ret

0000481c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    481c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    481e:	84 b5       	in	r24, 0x24	; 36
    4820:	82 60       	ori	r24, 0x02	; 2
    4822:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4824:	84 b5       	in	r24, 0x24	; 36
    4826:	81 60       	ori	r24, 0x01	; 1
    4828:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    482a:	85 b5       	in	r24, 0x25	; 37
    482c:	82 60       	ori	r24, 0x02	; 2
    482e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4830:	85 b5       	in	r24, 0x25	; 37
    4832:	81 60       	ori	r24, 0x01	; 1
    4834:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4836:	ee e6       	ldi	r30, 0x6E	; 110
    4838:	f0 e0       	ldi	r31, 0x00	; 0
    483a:	80 81       	ld	r24, Z
    483c:	81 60       	ori	r24, 0x01	; 1
    483e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4840:	e1 e8       	ldi	r30, 0x81	; 129
    4842:	f0 e0       	ldi	r31, 0x00	; 0
    4844:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4846:	80 81       	ld	r24, Z
    4848:	82 60       	ori	r24, 0x02	; 2
    484a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    484c:	80 81       	ld	r24, Z
    484e:	81 60       	ori	r24, 0x01	; 1
    4850:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4852:	e0 e8       	ldi	r30, 0x80	; 128
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	80 81       	ld	r24, Z
    4858:	81 60       	ori	r24, 0x01	; 1
    485a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    485c:	e1 eb       	ldi	r30, 0xB1	; 177
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	84 60       	ori	r24, 0x04	; 4
    4864:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4866:	e0 eb       	ldi	r30, 0xB0	; 176
    4868:	f0 e0       	ldi	r31, 0x00	; 0
    486a:	80 81       	ld	r24, Z
    486c:	81 60       	ori	r24, 0x01	; 1
    486e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4870:	e1 e9       	ldi	r30, 0x91	; 145
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	80 81       	ld	r24, Z
    4876:	82 60       	ori	r24, 0x02	; 2
    4878:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    487a:	80 81       	ld	r24, Z
    487c:	81 60       	ori	r24, 0x01	; 1
    487e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    4880:	e0 e9       	ldi	r30, 0x90	; 144
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	81 60       	ori	r24, 0x01	; 1
    4888:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    488a:	e1 ea       	ldi	r30, 0xA1	; 161
    488c:	f0 e0       	ldi	r31, 0x00	; 0
    488e:	80 81       	ld	r24, Z
    4890:	82 60       	ori	r24, 0x02	; 2
    4892:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    4894:	80 81       	ld	r24, Z
    4896:	81 60       	ori	r24, 0x01	; 1
    4898:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    489a:	e0 ea       	ldi	r30, 0xA0	; 160
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	81 60       	ori	r24, 0x01	; 1
    48a2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    48a4:	e1 e2       	ldi	r30, 0x21	; 33
    48a6:	f1 e0       	ldi	r31, 0x01	; 1
    48a8:	80 81       	ld	r24, Z
    48aa:	82 60       	ori	r24, 0x02	; 2
    48ac:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    48ae:	80 81       	ld	r24, Z
    48b0:	81 60       	ori	r24, 0x01	; 1
    48b2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    48b4:	e0 e2       	ldi	r30, 0x20	; 32
    48b6:	f1 e0       	ldi	r31, 0x01	; 1
    48b8:	80 81       	ld	r24, Z
    48ba:	81 60       	ori	r24, 0x01	; 1
    48bc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    48be:	ea e7       	ldi	r30, 0x7A	; 122
    48c0:	f0 e0       	ldi	r31, 0x00	; 0
    48c2:	80 81       	ld	r24, Z
    48c4:	84 60       	ori	r24, 0x04	; 4
    48c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    48c8:	80 81       	ld	r24, Z
    48ca:	82 60       	ori	r24, 0x02	; 2
    48cc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    48ce:	80 81       	ld	r24, Z
    48d0:	81 60       	ori	r24, 0x01	; 1
    48d2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    48d4:	80 81       	ld	r24, Z
    48d6:	80 68       	ori	r24, 0x80	; 128
    48d8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    48da:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    48de:	08 95       	ret

000048e0 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    48e0:	86 33       	cpi	r24, 0x36	; 54
    48e2:	08 f0       	brcs	.+2      	; 0x48e6 <analogRead+0x6>
    48e4:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    48e6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    48ea:	28 2f       	mov	r18, r24
    48ec:	28 70       	andi	r18, 0x08	; 8
    48ee:	97 7f       	andi	r25, 0xF7	; 247
    48f0:	92 2b       	or	r25, r18
    48f2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    48f6:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <analog_reference>
    48fa:	90 e4       	ldi	r25, 0x40	; 64
    48fc:	29 9f       	mul	r18, r25
    48fe:	90 01       	movw	r18, r0
    4900:	11 24       	eor	r1, r1
    4902:	87 70       	andi	r24, 0x07	; 7
    4904:	82 2b       	or	r24, r18
    4906:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    490a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    490e:	80 64       	ori	r24, 0x40	; 64
    4910:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4914:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    4918:	86 fd       	sbrc	r24, 6
    491a:	fc cf       	rjmp	.-8      	; 0x4914 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    491c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    4920:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4924:	90 e0       	ldi	r25, 0x00	; 0
}
    4926:	92 2b       	or	r25, r18
    4928:	08 95       	ret

0000492a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	fc 01       	movw	r30, r24
    492e:	31 97       	sbiw	r30, 0x01	; 1
    4930:	e2 31       	cpi	r30, 0x12	; 18
    4932:	f1 05       	cpc	r31, r1
    4934:	08 f0       	brcs	.+2      	; 0x4938 <turnOffPWM+0xe>
    4936:	4e c0       	rjmp	.+156    	; 0x49d4 <turnOffPWM+0xaa>
    4938:	88 27       	eor	r24, r24
    493a:	e3 53       	subi	r30, 0x33	; 51
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	8f 4f       	sbci	r24, 0xFF	; 255
    4940:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4944:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4948:	8f 77       	andi	r24, 0x7F	; 127
    494a:	03 c0       	rjmp	.+6      	; 0x4952 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    494c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4950:	8f 7d       	andi	r24, 0xDF	; 223
    4952:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4956:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    4958:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    495c:	87 7f       	andi	r24, 0xF7	; 247
    495e:	f9 cf       	rjmp	.-14     	; 0x4952 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4960:	84 b5       	in	r24, 0x24	; 36
    4962:	8f 77       	andi	r24, 0x7F	; 127
    4964:	02 c0       	rjmp	.+4      	; 0x496a <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4966:	84 b5       	in	r24, 0x24	; 36
    4968:	8f 7d       	andi	r24, 0xDF	; 223
    496a:	84 bd       	out	0x24, r24	; 36
    496c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    496e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    4972:	8f 77       	andi	r24, 0x7F	; 127
    4974:	03 c0       	rjmp	.+6      	; 0x497c <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4976:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    497a:	8f 7d       	andi	r24, 0xDF	; 223
    497c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    4980:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    4982:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    4986:	8f 77       	andi	r24, 0x7F	; 127
    4988:	07 c0       	rjmp	.+14     	; 0x4998 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    498a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    498e:	8f 7d       	andi	r24, 0xDF	; 223
    4990:	03 c0       	rjmp	.+6      	; 0x4998 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    4992:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    4996:	87 7f       	andi	r24, 0xF7	; 247
    4998:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    499c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    499e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    49a2:	8f 77       	andi	r24, 0x7F	; 127
    49a4:	07 c0       	rjmp	.+14     	; 0x49b4 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    49a6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    49aa:	8f 7d       	andi	r24, 0xDF	; 223
    49ac:	03 c0       	rjmp	.+6      	; 0x49b4 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    49ae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    49b2:	87 7f       	andi	r24, 0xF7	; 247
    49b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    49b8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    49ba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49be:	8f 77       	andi	r24, 0x7F	; 127
    49c0:	07 c0       	rjmp	.+14     	; 0x49d0 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    49c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49c6:	8f 7d       	andi	r24, 0xDF	; 223
    49c8:	03 c0       	rjmp	.+6      	; 0x49d0 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    49ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49ce:	87 7f       	andi	r24, 0xF7	; 247
    49d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49d4:	08 95       	ret

000049d6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    49d6:	cf 93       	push	r28
    49d8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	fc 01       	movw	r30, r24
    49de:	eb 5d       	subi	r30, 0xDB	; 219
    49e0:	fd 4f       	sbci	r31, 0xFD	; 253
    49e2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    49e4:	fc 01       	movw	r30, r24
    49e6:	e5 59       	subi	r30, 0x95	; 149
    49e8:	fd 4f       	sbci	r31, 0xFD	; 253
    49ea:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    49ec:	88 23       	and	r24, r24
    49ee:	61 f1       	breq	.+88     	; 0x4a48 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	88 0f       	add	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	fc 01       	movw	r30, r24
    49f8:	eb 51       	subi	r30, 0x1B	; 27
    49fa:	fd 4f       	sbci	r31, 0xFD	; 253
    49fc:	c5 91       	lpm	r28, Z+
    49fe:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4a00:	fc 01       	movw	r30, r24
    4a02:	e5 53       	subi	r30, 0x35	; 53
    4a04:	fd 4f       	sbci	r31, 0xFD	; 253
    4a06:	a5 91       	lpm	r26, Z+
    4a08:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4a0a:	61 11       	cpse	r22, r1
    4a0c:	09 c0       	rjmp	.+18     	; 0x4a20 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4a0e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4a10:	f8 94       	cli
		*reg &= ~bit;
    4a12:	88 81       	ld	r24, Y
    4a14:	20 95       	com	r18
    4a16:	82 23       	and	r24, r18
    4a18:	88 83       	st	Y, r24
		*out &= ~bit;
    4a1a:	ec 91       	ld	r30, X
    4a1c:	2e 23       	and	r18, r30
    4a1e:	0b c0       	rjmp	.+22     	; 0x4a36 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4a20:	62 30       	cpi	r22, 0x02	; 2
    4a22:	61 f4       	brne	.+24     	; 0x4a3c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4a24:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4a26:	f8 94       	cli
		*reg &= ~bit;
    4a28:	88 81       	ld	r24, Y
    4a2a:	32 2f       	mov	r19, r18
    4a2c:	30 95       	com	r19
    4a2e:	83 23       	and	r24, r19
    4a30:	88 83       	st	Y, r24
		*out |= bit;
    4a32:	ec 91       	ld	r30, X
    4a34:	2e 2b       	or	r18, r30
    4a36:	2c 93       	st	X, r18
		SREG = oldSREG;
    4a38:	9f bf       	out	0x3f, r25	; 63
    4a3a:	06 c0       	rjmp	.+12     	; 0x4a48 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4a3c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4a3e:	f8 94       	cli
		*reg |= bit;
    4a40:	e8 81       	ld	r30, Y
    4a42:	2e 2b       	or	r18, r30
    4a44:	28 83       	st	Y, r18
		SREG = oldSREG;
    4a46:	8f bf       	out	0x3f, r24	; 63
	}
}
    4a48:	df 91       	pop	r29
    4a4a:	cf 91       	pop	r28
    4a4c:	08 95       	ret

00004a4e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4a4e:	1f 93       	push	r17
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4a54:	28 2f       	mov	r18, r24
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	f9 01       	movw	r30, r18
    4a5a:	e1 52       	subi	r30, 0x21	; 33
    4a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a5e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4a60:	f9 01       	movw	r30, r18
    4a62:	eb 5d       	subi	r30, 0xDB	; 219
    4a64:	fd 4f       	sbci	r31, 0xFD	; 253
    4a66:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4a68:	f9 01       	movw	r30, r18
    4a6a:	e5 59       	subi	r30, 0x95	; 149
    4a6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4a6e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4a70:	cc 23       	and	r28, r28
    4a72:	b9 f0       	breq	.+46     	; 0x4aa2 <digitalWrite+0x54>
    4a74:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4a76:	81 11       	cpse	r24, r1
    4a78:	58 df       	rcall	.-336    	; 0x492a <turnOffPWM>

	out = portOutputRegister(port);
    4a7a:	ec 2f       	mov	r30, r28
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	ee 0f       	add	r30, r30
    4a80:	ff 1f       	adc	r31, r31
    4a82:	e5 53       	subi	r30, 0x35	; 53
    4a84:	fd 4f       	sbci	r31, 0xFD	; 253
    4a86:	a5 91       	lpm	r26, Z+
    4a88:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4a8a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a8c:	f8 94       	cli

	if (val == LOW) {
    4a8e:	11 11       	cpse	r17, r1
    4a90:	04 c0       	rjmp	.+8      	; 0x4a9a <digitalWrite+0x4c>
		*out &= ~bit;
    4a92:	8c 91       	ld	r24, X
    4a94:	d0 95       	com	r29
    4a96:	d8 23       	and	r29, r24
    4a98:	02 c0       	rjmp	.+4      	; 0x4a9e <digitalWrite+0x50>
	} else {
		*out |= bit;
    4a9a:	ec 91       	ld	r30, X
    4a9c:	de 2b       	or	r29, r30
    4a9e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4aa0:	9f bf       	out	0x3f, r25	; 63
}
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	1f 91       	pop	r17
    4aa8:	08 95       	ret

00004aaa <digitalRead>:

int digitalRead(uint8_t pin)
{
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4aae:	28 2f       	mov	r18, r24
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	f9 01       	movw	r30, r18
    4ab4:	e1 52       	subi	r30, 0x21	; 33
    4ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ab8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4aba:	f9 01       	movw	r30, r18
    4abc:	eb 5d       	subi	r30, 0xDB	; 219
    4abe:	fd 4f       	sbci	r31, 0xFD	; 253
    4ac0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4ac2:	f9 01       	movw	r30, r18
    4ac4:	e5 59       	subi	r30, 0x95	; 149
    4ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    4ac8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4aca:	cc 23       	and	r28, r28
    4acc:	89 f0       	breq	.+34     	; 0x4af0 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4ace:	81 11       	cpse	r24, r1
    4ad0:	2c df       	rcall	.-424    	; 0x492a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4ad2:	ec 2f       	mov	r30, r28
    4ad4:	f0 e0       	ldi	r31, 0x00	; 0
    4ad6:	ee 0f       	add	r30, r30
    4ad8:	ff 1f       	adc	r31, r31
    4ada:	ef 54       	subi	r30, 0x4F	; 79
    4adc:	fd 4f       	sbci	r31, 0xFD	; 253
    4ade:	a5 91       	lpm	r26, Z+
    4ae0:	b4 91       	lpm	r27, Z
    4ae2:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4ae4:	ed 23       	and	r30, r29
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	21 f4       	brne	.+8      	; 0x4af4 <digitalRead+0x4a>
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	02 c0       	rjmp	.+4      	; 0x4af4 <digitalRead+0x4a>
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	08 95       	ret

00004afa <_ZNK6String14StringIfHelperEv>:
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}
    4afa:	08 95       	ret

00004afc <_ZN6StringD1Ev>:
    4afc:	fc 01       	movw	r30, r24
    4afe:	80 81       	ld	r24, Z
    4b00:	91 81       	ldd	r25, Z+1	; 0x01
    4b02:	0c 94 31 36 	jmp	0x6c62	; 0x6c62 <free>

00004b06 <_ZN6String10invalidateEv>:
    4b06:	cf 93       	push	r28
    4b08:	df 93       	push	r29
    4b0a:	ec 01       	movw	r28, r24
    4b0c:	88 81       	ld	r24, Y
    4b0e:	99 81       	ldd	r25, Y+1	; 0x01
    4b10:	00 97       	sbiw	r24, 0x00	; 0
    4b12:	11 f0       	breq	.+4      	; 0x4b18 <_ZN6String10invalidateEv+0x12>
    4b14:	0e 94 31 36 	call	0x6c62	; 0x6c62 <free>
    4b18:	19 82       	std	Y+1, r1	; 0x01
    4b1a:	18 82       	st	Y, r1
    4b1c:	1d 82       	std	Y+5, r1	; 0x05
    4b1e:	1c 82       	std	Y+4, r1	; 0x04
    4b20:	1b 82       	std	Y+3, r1	; 0x03
    4b22:	1a 82       	std	Y+2, r1	; 0x02
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	08 95       	ret

00004b2a <_ZN6String12changeBufferEj>:
    4b2a:	0f 93       	push	r16
    4b2c:	1f 93       	push	r17
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	ec 01       	movw	r28, r24
    4b34:	8b 01       	movw	r16, r22
    4b36:	6f 5f       	subi	r22, 0xFF	; 255
    4b38:	7f 4f       	sbci	r23, 0xFF	; 255
    4b3a:	88 81       	ld	r24, Y
    4b3c:	99 81       	ldd	r25, Y+1	; 0x01
    4b3e:	0e 94 ba 36 	call	0x6d74	; 0x6d74 <realloc>
    4b42:	00 97       	sbiw	r24, 0x00	; 0
    4b44:	31 f0       	breq	.+12     	; 0x4b52 <_ZN6String12changeBufferEj+0x28>
    4b46:	99 83       	std	Y+1, r25	; 0x01
    4b48:	88 83       	st	Y, r24
    4b4a:	1b 83       	std	Y+3, r17	; 0x03
    4b4c:	0a 83       	std	Y+2, r16	; 0x02
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	01 c0       	rjmp	.+2      	; 0x4b54 <_ZN6String12changeBufferEj+0x2a>
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <_ZN6String7reserveEj>:
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	ec 01       	movw	r28, r24
    4b64:	88 81       	ld	r24, Y
    4b66:	99 81       	ldd	r25, Y+1	; 0x01
    4b68:	89 2b       	or	r24, r25
    4b6a:	29 f0       	breq	.+10     	; 0x4b76 <_ZN6String7reserveEj+0x18>
    4b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b70:	86 17       	cp	r24, r22
    4b72:	97 07       	cpc	r25, r23
    4b74:	58 f4       	brcc	.+22     	; 0x4b8c <_ZN6String7reserveEj+0x2e>
    4b76:	ce 01       	movw	r24, r28
    4b78:	d8 df       	rcall	.-80     	; 0x4b2a <_ZN6String12changeBufferEj>
    4b7a:	88 23       	and	r24, r24
    4b7c:	41 f0       	breq	.+16     	; 0x4b8e <_ZN6String7reserveEj+0x30>
    4b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b80:	9d 81       	ldd	r25, Y+5	; 0x05
    4b82:	89 2b       	or	r24, r25
    4b84:	19 f4       	brne	.+6      	; 0x4b8c <_ZN6String7reserveEj+0x2e>
    4b86:	e8 81       	ld	r30, Y
    4b88:	f9 81       	ldd	r31, Y+1	; 0x01
    4b8a:	10 82       	st	Z, r1
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	df 91       	pop	r29
    4b90:	cf 91       	pop	r28
    4b92:	08 95       	ret

00004b94 <_ZN6String4copyEPKcj>:
    4b94:	ef 92       	push	r14
    4b96:	ff 92       	push	r15
    4b98:	0f 93       	push	r16
    4b9a:	1f 93       	push	r17
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	ec 01       	movw	r28, r24
    4ba2:	7b 01       	movw	r14, r22
    4ba4:	8a 01       	movw	r16, r20
    4ba6:	ba 01       	movw	r22, r20
    4ba8:	da df       	rcall	.-76     	; 0x4b5e <_ZN6String7reserveEj>
    4baa:	81 11       	cpse	r24, r1
    4bac:	03 c0       	rjmp	.+6      	; 0x4bb4 <_ZN6String4copyEPKcj+0x20>
    4bae:	ce 01       	movw	r24, r28
    4bb0:	aa df       	rcall	.-172    	; 0x4b06 <_ZN6String10invalidateEv>
    4bb2:	07 c0       	rjmp	.+14     	; 0x4bc2 <_ZN6String4copyEPKcj+0x2e>
    4bb4:	1d 83       	std	Y+5, r17	; 0x05
    4bb6:	0c 83       	std	Y+4, r16	; 0x04
    4bb8:	b7 01       	movw	r22, r14
    4bba:	88 81       	ld	r24, Y
    4bbc:	99 81       	ldd	r25, Y+1	; 0x01
    4bbe:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <strcpy>
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	ff 90       	pop	r15
    4bce:	ef 90       	pop	r14
    4bd0:	08 95       	ret

00004bd2 <_ZN6StringC1EPKc>:
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	11 82       	std	Z+1, r1	; 0x01
    4bd6:	10 82       	st	Z, r1
    4bd8:	13 82       	std	Z+3, r1	; 0x03
    4bda:	12 82       	std	Z+2, r1	; 0x02
    4bdc:	15 82       	std	Z+5, r1	; 0x05
    4bde:	14 82       	std	Z+4, r1	; 0x04
    4be0:	61 15       	cp	r22, r1
    4be2:	71 05       	cpc	r23, r1
    4be4:	49 f0       	breq	.+18     	; 0x4bf8 <_ZN6StringC1EPKc+0x26>
    4be6:	fb 01       	movw	r30, r22
    4be8:	01 90       	ld	r0, Z+
    4bea:	00 20       	and	r0, r0
    4bec:	e9 f7       	brne	.-6      	; 0x4be8 <_ZN6StringC1EPKc+0x16>
    4bee:	31 97       	sbiw	r30, 0x01	; 1
    4bf0:	af 01       	movw	r20, r30
    4bf2:	46 1b       	sub	r20, r22
    4bf4:	57 0b       	sbc	r21, r23
    4bf6:	ce cf       	rjmp	.-100    	; 0x4b94 <_ZN6String4copyEPKcj>
    4bf8:	08 95       	ret

00004bfa <_ZN6String4moveERS_>:
    4bfa:	0f 93       	push	r16
    4bfc:	1f 93       	push	r17
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	8c 01       	movw	r16, r24
    4c04:	eb 01       	movw	r28, r22
    4c06:	fc 01       	movw	r30, r24
    4c08:	80 81       	ld	r24, Z
    4c0a:	91 81       	ldd	r25, Z+1	; 0x01
    4c0c:	00 97       	sbiw	r24, 0x00	; 0
    4c0e:	d1 f0       	breq	.+52     	; 0x4c44 <_ZN6String4moveERS_+0x4a>
    4c10:	68 81       	ld	r22, Y
    4c12:	79 81       	ldd	r23, Y+1	; 0x01
    4c14:	61 15       	cp	r22, r1
    4c16:	71 05       	cpc	r23, r1
    4c18:	99 f0       	breq	.+38     	; 0x4c40 <_ZN6String4moveERS_+0x46>
    4c1a:	2d e7       	ldi	r18, 0x7D	; 125
    4c1c:	35 e2       	ldi	r19, 0x25	; 37
    4c1e:	23 2b       	or	r18, r19
    4c20:	79 f0       	breq	.+30     	; 0x4c40 <_ZN6String4moveERS_+0x46>
    4c22:	42 81       	ldd	r20, Z+2	; 0x02
    4c24:	53 81       	ldd	r21, Z+3	; 0x03
    4c26:	2c 81       	ldd	r18, Y+4	; 0x04
    4c28:	3d 81       	ldd	r19, Y+5	; 0x05
    4c2a:	42 17       	cp	r20, r18
    4c2c:	53 07       	cpc	r21, r19
    4c2e:	40 f0       	brcs	.+16     	; 0x4c40 <_ZN6String4moveERS_+0x46>
    4c30:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <strcpy>
    4c34:	8c 81       	ldd	r24, Y+4	; 0x04
    4c36:	9d 81       	ldd	r25, Y+5	; 0x05
    4c38:	f8 01       	movw	r30, r16
    4c3a:	95 83       	std	Z+5, r25	; 0x05
    4c3c:	84 83       	std	Z+4, r24	; 0x04
    4c3e:	13 c0       	rjmp	.+38     	; 0x4c66 <_ZN6String4moveERS_+0x6c>
    4c40:	0e 94 31 36 	call	0x6c62	; 0x6c62 <free>
    4c44:	88 81       	ld	r24, Y
    4c46:	99 81       	ldd	r25, Y+1	; 0x01
    4c48:	f8 01       	movw	r30, r16
    4c4a:	91 83       	std	Z+1, r25	; 0x01
    4c4c:	80 83       	st	Z, r24
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	9b 81       	ldd	r25, Y+3	; 0x03
    4c52:	93 83       	std	Z+3, r25	; 0x03
    4c54:	82 83       	std	Z+2, r24	; 0x02
    4c56:	8c 81       	ldd	r24, Y+4	; 0x04
    4c58:	9d 81       	ldd	r25, Y+5	; 0x05
    4c5a:	95 83       	std	Z+5, r25	; 0x05
    4c5c:	84 83       	std	Z+4, r24	; 0x04
    4c5e:	19 82       	std	Y+1, r1	; 0x01
    4c60:	18 82       	st	Y, r1
    4c62:	1b 82       	std	Y+3, r1	; 0x03
    4c64:	1a 82       	std	Y+2, r1	; 0x02
    4c66:	1d 82       	std	Y+5, r1	; 0x05
    4c68:	1c 82       	std	Y+4, r1	; 0x04
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	08 95       	ret

00004c74 <_ZN6StringaSERKS_>:
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	ec 01       	movw	r28, r24
    4c7a:	fb 01       	movw	r30, r22
    4c7c:	86 17       	cp	r24, r22
    4c7e:	97 07       	cpc	r25, r23
    4c80:	51 f0       	breq	.+20     	; 0x4c96 <_ZN6StringaSERKS_+0x22>
    4c82:	60 81       	ld	r22, Z
    4c84:	71 81       	ldd	r23, Z+1	; 0x01
    4c86:	61 15       	cp	r22, r1
    4c88:	71 05       	cpc	r23, r1
    4c8a:	21 f0       	breq	.+8      	; 0x4c94 <_ZN6StringaSERKS_+0x20>
    4c8c:	44 81       	ldd	r20, Z+4	; 0x04
    4c8e:	55 81       	ldd	r21, Z+5	; 0x05
    4c90:	81 df       	rcall	.-254    	; 0x4b94 <_ZN6String4copyEPKcj>
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <_ZN6StringaSERKS_+0x22>
    4c94:	38 df       	rcall	.-400    	; 0x4b06 <_ZN6String10invalidateEv>
    4c96:	ce 01       	movw	r24, r28
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	08 95       	ret

00004c9e <_ZN6StringaSEOS_>:
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	ec 01       	movw	r28, r24
    4ca4:	86 17       	cp	r24, r22
    4ca6:	97 07       	cpc	r25, r23
    4ca8:	09 f0       	breq	.+2      	; 0x4cac <_ZN6StringaSEOS_+0xe>
    4caa:	a7 df       	rcall	.-178    	; 0x4bfa <_ZN6String4moveERS_>
    4cac:	ce 01       	movw	r24, r28
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	08 95       	ret

00004cb4 <_ZN6StringaSEO15StringSumHelper>:
    4cb4:	cf 93       	push	r28
    4cb6:	df 93       	push	r29
    4cb8:	ec 01       	movw	r28, r24
    4cba:	68 17       	cp	r22, r24
    4cbc:	79 07       	cpc	r23, r25
    4cbe:	09 f0       	breq	.+2      	; 0x4cc2 <_ZN6StringaSEO15StringSumHelper+0xe>
    4cc0:	9c df       	rcall	.-200    	; 0x4bfa <_ZN6String4moveERS_>
    4cc2:	ce 01       	movw	r24, r28
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	08 95       	ret

00004cca <_ZN6StringaSEPKc>:
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	ec 01       	movw	r28, r24
    4cd0:	61 15       	cp	r22, r1
    4cd2:	71 05       	cpc	r23, r1
    4cd4:	51 f0       	breq	.+20     	; 0x4cea <_ZN6StringaSEPKc+0x20>
    4cd6:	fb 01       	movw	r30, r22
    4cd8:	01 90       	ld	r0, Z+
    4cda:	00 20       	and	r0, r0
    4cdc:	e9 f7       	brne	.-6      	; 0x4cd8 <_ZN6StringaSEPKc+0xe>
    4cde:	31 97       	sbiw	r30, 0x01	; 1
    4ce0:	af 01       	movw	r20, r30
    4ce2:	46 1b       	sub	r20, r22
    4ce4:	57 0b       	sbc	r21, r23
    4ce6:	56 df       	rcall	.-340    	; 0x4b94 <_ZN6String4copyEPKcj>
    4ce8:	01 c0       	rjmp	.+2      	; 0x4cec <_ZN6StringaSEPKc+0x22>
    4cea:	0d df       	rcall	.-486    	; 0x4b06 <_ZN6String10invalidateEv>
    4cec:	ce 01       	movw	r24, r28
    4cee:	df 91       	pop	r29
    4cf0:	cf 91       	pop	r28
    4cf2:	08 95       	ret

00004cf4 <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
    4cf4:	0f 93       	push	r16
    4cf6:	1f 93       	push	r17
    4cf8:	cf 93       	push	r28
    4cfa:	df 93       	push	r29
    4cfc:	cd b7       	in	r28, 0x3d	; 61
    4cfe:	de b7       	in	r29, 0x3e	; 62
    4d00:	29 97       	sbiw	r28, 0x09	; 9
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	f8 94       	cli
    4d06:	de bf       	out	0x3e, r29	; 62
    4d08:	0f be       	out	0x3f, r0	; 63
    4d0a:	cd bf       	out	0x3d, r28	; 61
    4d0c:	8c 01       	movw	r16, r24
    4d0e:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d10:	f8 01       	movw	r30, r16
    4d12:	11 82       	std	Z+1, r1	; 0x01
    4d14:	10 82       	st	Z, r1
	capacity = 0;
    4d16:	13 82       	std	Z+3, r1	; 0x03
    4d18:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4d1a:	15 82       	std	Z+5, r1	; 0x05
    4d1c:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    4d1e:	50 e0       	ldi	r21, 0x00	; 0
    4d20:	be 01       	movw	r22, r28
    4d22:	6f 5f       	subi	r22, 0xFF	; 255
    4d24:	7f 4f       	sbci	r23, 0xFF	; 255
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <utoa>
String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
    4d2c:	be 01       	movw	r22, r28
    4d2e:	6f 5f       	subi	r22, 0xFF	; 255
    4d30:	7f 4f       	sbci	r23, 0xFF	; 255
    4d32:	c8 01       	movw	r24, r16
    4d34:	ca df       	rcall	.-108    	; 0x4cca <_ZN6StringaSEPKc>
}
    4d36:	29 96       	adiw	r28, 0x09	; 9
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	f8 94       	cli
    4d3c:	de bf       	out	0x3e, r29	; 62
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	cd bf       	out	0x3d, r28	; 61
    4d42:	df 91       	pop	r29
    4d44:	cf 91       	pop	r28
    4d46:	1f 91       	pop	r17
    4d48:	0f 91       	pop	r16
    4d4a:	08 95       	ret

00004d4c <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	1f 92       	push	r1
    4d52:	cd b7       	in	r28, 0x3d	; 61
    4d54:	de b7       	in	r29, 0x3e	; 62
    4d56:	69 83       	std	Y+1, r22	; 0x01
    4d58:	dc 01       	movw	r26, r24
    4d5a:	ed 91       	ld	r30, X+
    4d5c:	fc 91       	ld	r31, X
    4d5e:	02 80       	ldd	r0, Z+2	; 0x02
    4d60:	f3 81       	ldd	r31, Z+3	; 0x03
    4d62:	e0 2d       	mov	r30, r0
    4d64:	41 e0       	ldi	r20, 0x01	; 1
    4d66:	50 e0       	ldi	r21, 0x00	; 0
    4d68:	be 01       	movw	r22, r28
    4d6a:	6f 5f       	subi	r22, 0xFF	; 255
    4d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6e:	19 95       	eicall
    4d70:	0f 90       	pop	r0
    4d72:	df 91       	pop	r29
    4d74:	cf 91       	pop	r28
    4d76:	08 95       	ret

00004d78 <_ZN5SDLib4File5writeEPKhj>:
    4d78:	cf 93       	push	r28
    4d7a:	df 93       	push	r29
    4d7c:	ec 01       	movw	r28, r24
    4d7e:	89 8d       	ldd	r24, Y+25	; 0x19
    4d80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d82:	00 97       	sbiw	r24, 0x00	; 0
    4d84:	39 f4       	brne	.+14     	; 0x4d94 <_ZN5SDLib4File5writeEPKhj+0x1c>
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	9b 83       	std	Y+3, r25	; 0x03
    4d8c:	8a 83       	std	Y+2, r24	; 0x02
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	0a c0       	rjmp	.+20     	; 0x4da8 <_ZN5SDLib4File5writeEPKhj+0x30>
    4d94:	fc 01       	movw	r30, r24
    4d96:	13 82       	std	Z+3, r1	; 0x03
    4d98:	12 82       	std	Z+2, r1	; 0x02
    4d9a:	a7 d6       	rcall	.+3406   	; 0x5aea <_ZN6SdFile5writeEPKvj>
    4d9c:	e9 8d       	ldd	r30, Y+25	; 0x19
    4d9e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4da0:	22 81       	ldd	r18, Z+2	; 0x02
    4da2:	33 81       	ldd	r19, Z+3	; 0x03
    4da4:	23 2b       	or	r18, r19
    4da6:	79 f7       	brne	.-34     	; 0x4d86 <_ZN5SDLib4File5writeEPKhj+0xe>
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	08 95       	ret

00004dae <_ZN5SDLib4File5flushEv>:
    4dae:	fc 01       	movw	r30, r24
    4db0:	81 8d       	ldd	r24, Z+25	; 0x19
    4db2:	92 8d       	ldd	r25, Z+26	; 0x1a
    4db4:	00 97       	sbiw	r24, 0x00	; 0
    4db6:	09 f0       	breq	.+2      	; 0x4dba <_ZN5SDLib4File5flushEv+0xc>
    4db8:	48 c6       	rjmp	.+3216   	; 0x5a4a <_ZN6SdFile4syncEv>
    4dba:	08 95       	ret

00004dbc <_ZN6SdFile4readEv>:
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
    4dc0:	1f 92       	push	r1
    4dc2:	cd b7       	in	r28, 0x3d	; 61
    4dc4:	de b7       	in	r29, 0x3e	; 62
    4dc6:	41 e0       	ldi	r20, 0x01	; 1
    4dc8:	50 e0       	ldi	r21, 0x00	; 0
    4dca:	be 01       	movw	r22, r28
    4dcc:	6f 5f       	subi	r22, 0xFF	; 255
    4dce:	7f 4f       	sbci	r23, 0xFF	; 255
    4dd0:	a4 d4       	rcall	.+2376   	; 0x571a <_ZN6SdFile4readEPvj>
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	19 f4       	brne	.+6      	; 0x4ddc <_ZN6SdFile4readEv+0x20>
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	02 c0       	rjmp	.+4      	; 0x4de0 <_ZN6SdFile4readEv+0x24>
    4ddc:	8f ef       	ldi	r24, 0xFF	; 255
    4dde:	9f ef       	ldi	r25, 0xFF	; 255
    4de0:	0f 90       	pop	r0
    4de2:	df 91       	pop	r29
    4de4:	cf 91       	pop	r28
    4de6:	08 95       	ret

00004de8 <_ZN5SDLib4File4readEv>:
    4de8:	fc 01       	movw	r30, r24
    4dea:	81 8d       	ldd	r24, Z+25	; 0x19
    4dec:	92 8d       	ldd	r25, Z+26	; 0x1a
    4dee:	00 97       	sbiw	r24, 0x00	; 0
    4df0:	09 f0       	breq	.+2      	; 0x4df4 <_ZN5SDLib4File4readEv+0xc>
    4df2:	e4 cf       	rjmp	.-56     	; 0x4dbc <_ZN6SdFile4readEv>
    4df4:	8f ef       	ldi	r24, 0xFF	; 255
    4df6:	9f ef       	ldi	r25, 0xFF	; 255
    4df8:	08 95       	ret

00004dfa <_ZN5SDLib4File4peekEv>:
    4dfa:	0f 93       	push	r16
    4dfc:	1f 93       	push	r17
    4dfe:	cf 93       	push	r28
    4e00:	df 93       	push	r29
    4e02:	fc 01       	movw	r30, r24
    4e04:	81 8d       	ldd	r24, Z+25	; 0x19
    4e06:	92 8d       	ldd	r25, Z+26	; 0x1a
    4e08:	00 97       	sbiw	r24, 0x00	; 0
    4e0a:	a9 f0       	breq	.+42     	; 0x4e36 <_ZN5SDLib4File4peekEv+0x3c>
    4e0c:	ef 01       	movw	r28, r30
    4e0e:	d6 df       	rcall	.-84     	; 0x4dbc <_ZN6SdFile4readEv>
    4e10:	8c 01       	movw	r16, r24
    4e12:	0f 3f       	cpi	r16, 0xFF	; 255
    4e14:	8f ef       	ldi	r24, 0xFF	; 255
    4e16:	18 07       	cpc	r17, r24
    4e18:	89 f0       	breq	.+34     	; 0x4e3c <_ZN5SDLib4File4peekEv+0x42>
    4e1a:	89 8d       	ldd	r24, Y+25	; 0x19
    4e1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e1e:	fc 01       	movw	r30, r24
    4e20:	42 85       	ldd	r20, Z+10	; 0x0a
    4e22:	53 85       	ldd	r21, Z+11	; 0x0b
    4e24:	64 85       	ldd	r22, Z+12	; 0x0c
    4e26:	75 85       	ldd	r23, Z+13	; 0x0d
    4e28:	41 50       	subi	r20, 0x01	; 1
    4e2a:	51 09       	sbc	r21, r1
    4e2c:	61 09       	sbc	r22, r1
    4e2e:	71 09       	sbc	r23, r1
    4e30:	76 d5       	rcall	.+2796   	; 0x591e <_ZN6SdFile7seekSetEm>
    4e32:	c8 01       	movw	r24, r16
    4e34:	05 c0       	rjmp	.+10     	; 0x4e40 <_ZN5SDLib4File4peekEv+0x46>
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	02 c0       	rjmp	.+4      	; 0x4e40 <_ZN5SDLib4File4peekEv+0x46>
    4e3c:	8f ef       	ldi	r24, 0xFF	; 255
    4e3e:	9f ef       	ldi	r25, 0xFF	; 255
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	1f 91       	pop	r17
    4e46:	0f 91       	pop	r16
    4e48:	08 95       	ret

00004e4a <_ZN5SDLib4FileC1Ev>:
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	13 82       	std	Z+3, r1	; 0x03
    4e4e:	12 82       	std	Z+2, r1	; 0x02
    4e50:	88 ee       	ldi	r24, 0xE8	; 232
    4e52:	93 e0       	ldi	r25, 0x03	; 3
    4e54:	a0 e0       	ldi	r26, 0x00	; 0
    4e56:	b0 e0       	ldi	r27, 0x00	; 0
    4e58:	84 83       	std	Z+4, r24	; 0x04
    4e5a:	95 83       	std	Z+5, r25	; 0x05
    4e5c:	a6 83       	std	Z+6, r26	; 0x06
    4e5e:	b7 83       	std	Z+7, r27	; 0x07
    4e60:	8c ed       	ldi	r24, 0xDC	; 220
    4e62:	95 e0       	ldi	r25, 0x05	; 5
    4e64:	91 83       	std	Z+1, r25	; 0x01
    4e66:	80 83       	st	Z, r24
    4e68:	12 8e       	std	Z+26, r1	; 0x1a
    4e6a:	11 8e       	std	Z+25, r1	; 0x19
    4e6c:	14 86       	std	Z+12, r1	; 0x0c
    4e6e:	08 95       	ret

00004e70 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    4e70:	dc 01       	movw	r26, r24
    4e72:	59 96       	adiw	r26, 0x19	; 25
    4e74:	ed 91       	ld	r30, X+
    4e76:	fc 91       	ld	r31, X
    4e78:	5a 97       	sbiw	r26, 0x1a	; 26
    4e7a:	30 97       	sbiw	r30, 0x00	; 0
    4e7c:	29 f0       	breq	.+10     	; 0x4e88 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    4e7e:	62 85       	ldd	r22, Z+10	; 0x0a
    4e80:	73 85       	ldd	r23, Z+11	; 0x0b
    4e82:	84 85       	ldd	r24, Z+12	; 0x0c
    4e84:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    4e86:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    4e88:	6f ef       	ldi	r22, 0xFF	; 255
    4e8a:	7f ef       	ldi	r23, 0xFF	; 255
    4e8c:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    4e8e:	08 95       	ret

00004e90 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    4e90:	dc 01       	movw	r26, r24
    4e92:	59 96       	adiw	r26, 0x19	; 25
    4e94:	ed 91       	ld	r30, X+
    4e96:	fc 91       	ld	r31, X
    4e98:	5a 97       	sbiw	r26, 0x1a	; 26
    4e9a:	30 97       	sbiw	r30, 0x00	; 0
    4e9c:	29 f0       	breq	.+10     	; 0x4ea8 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    4e9e:	63 89       	ldd	r22, Z+19	; 0x13
    4ea0:	74 89       	ldd	r23, Z+20	; 0x14
    4ea2:	85 89       	ldd	r24, Z+21	; 0x15
    4ea4:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    4ea6:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    4ea8:	60 e0       	ldi	r22, 0x00	; 0
    4eaa:	70 e0       	ldi	r23, 0x00	; 0
    4eac:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    4eae:	08 95       	ret

00004eb0 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    4eb0:	cf 92       	push	r12
    4eb2:	df 92       	push	r13
    4eb4:	ef 92       	push	r14
    4eb6:	ff 92       	push	r15
    4eb8:	cf 93       	push	r28
    4eba:	df 93       	push	r29
  if (! _file) return 0;
    4ebc:	fc 01       	movw	r30, r24
    4ebe:	21 8d       	ldd	r18, Z+25	; 0x19
    4ec0:	32 8d       	ldd	r19, Z+26	; 0x1a
    4ec2:	23 2b       	or	r18, r19
    4ec4:	c9 f0       	breq	.+50     	; 0x4ef8 <_ZN5SDLib4File9availableEv+0x48>
    4ec6:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    4ec8:	e3 df       	rcall	.-58     	; 0x4e90 <_ZN5SDLib4File4sizeEv>
    4eca:	6b 01       	movw	r12, r22
    4ecc:	7c 01       	movw	r14, r24
    4ece:	ce 01       	movw	r24, r28
    4ed0:	cf df       	rcall	.-98     	; 0x4e70 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    4ed2:	a7 01       	movw	r20, r14
    4ed4:	96 01       	movw	r18, r12
    4ed6:	26 1b       	sub	r18, r22
    4ed8:	37 0b       	sbc	r19, r23
    4eda:	48 0b       	sbc	r20, r24
    4edc:	59 0b       	sbc	r21, r25
    4ede:	da 01       	movw	r26, r20
    4ee0:	c9 01       	movw	r24, r18
    4ee2:	81 15       	cp	r24, r1
    4ee4:	30 e8       	ldi	r19, 0x80	; 128
    4ee6:	93 07       	cpc	r25, r19
    4ee8:	a1 05       	cpc	r26, r1
    4eea:	b1 05       	cpc	r27, r1
    4eec:	38 f0       	brcs	.+14     	; 0x4efc <_ZN5SDLib4File9availableEv+0x4c>
    4eee:	8f ef       	ldi	r24, 0xFF	; 255
    4ef0:	9f e7       	ldi	r25, 0x7F	; 127
    4ef2:	a0 e0       	ldi	r26, 0x00	; 0
    4ef4:	b0 e0       	ldi	r27, 0x00	; 0
    4ef6:	02 c0       	rjmp	.+4      	; 0x4efc <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    4efc:	df 91       	pop	r29
    4efe:	cf 91       	pop	r28
    4f00:	ff 90       	pop	r15
    4f02:	ef 90       	pop	r14
    4f04:	df 90       	pop	r13
    4f06:	cf 90       	pop	r12
    4f08:	08 95       	ret

00004f0a <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	ec 01       	movw	r28, r24
    4f14:	8b 01       	movw	r16, r22
    4f16:	41 e0       	ldi	r20, 0x01	; 1
    4f18:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN8SdVolume4initEP7Sd2Cardh>
    4f1c:	81 11       	cpse	r24, r1
    4f1e:	09 c0       	rjmp	.+18     	; 0x4f32 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    4f20:	40 e0       	ldi	r20, 0x00	; 0
    4f22:	b8 01       	movw	r22, r16
    4f24:	ce 01       	movw	r24, r28
    4f26:	df 91       	pop	r29
    4f28:	cf 91       	pop	r28
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <_ZN8SdVolume4initEP7Sd2Cardh>
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	1f 91       	pop	r17
    4f3a:	0f 91       	pop	r16
    4f3c:	08 95       	ret

00004f3e <_ZN5SDLib7SDClass5beginEh>:
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	ec 01       	movw	r28, r24
    4f48:	16 2f       	mov	r17, r22
    4f4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f4c:	88 23       	and	r24, r24
    4f4e:	19 f0       	breq	.+6      	; 0x4f56 <_ZN5SDLib7SDClass5beginEh+0x18>
    4f50:	ce 01       	movw	r24, r28
    4f52:	8a 96       	adiw	r24, 0x2a	; 42
    4f54:	bf d5       	rcall	.+2942   	; 0x5ad4 <_ZN6SdFile5closeEv>
    4f56:	41 2f       	mov	r20, r17
    4f58:	61 e0       	ldi	r22, 0x01	; 1
    4f5a:	ce 01       	movw	r24, r28
    4f5c:	60 d1       	rcall	.+704    	; 0x521e <_ZN7Sd2Card4initEhh>
    4f5e:	88 23       	and	r24, r24
    4f60:	79 f0       	breq	.+30     	; 0x4f80 <_ZN5SDLib7SDClass5beginEh+0x42>
    4f62:	8e 01       	movw	r16, r28
    4f64:	04 5f       	subi	r16, 0xF4	; 244
    4f66:	1f 4f       	sbci	r17, 0xFF	; 255
    4f68:	be 01       	movw	r22, r28
    4f6a:	c8 01       	movw	r24, r16
    4f6c:	ce df       	rcall	.-100    	; 0x4f0a <_ZN8SdVolume4initEP7Sd2Card>
    4f6e:	88 23       	and	r24, r24
    4f70:	39 f0       	breq	.+14     	; 0x4f80 <_ZN5SDLib7SDClass5beginEh+0x42>
    4f72:	b8 01       	movw	r22, r16
    4f74:	ce 01       	movw	r24, r28
    4f76:	8a 96       	adiw	r24, 0x2a	; 42
    4f78:	80 d3       	rcall	.+1792   	; 0x567a <_ZN6SdFile8openRootEP8SdVolume>
    4f7a:	91 e0       	ldi	r25, 0x01	; 1
    4f7c:	81 11       	cpse	r24, r1
    4f7e:	01 c0       	rjmp	.+2      	; 0x4f82 <_ZN5SDLib7SDClass5beginEh+0x44>
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	89 2f       	mov	r24, r25
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	1f 91       	pop	r17
    4f8a:	0f 91       	pop	r16
    4f8c:	08 95       	ret

00004f8e <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    4f8e:	e7 e9       	ldi	r30, 0x97	; 151
    4f90:	f8 e0       	ldi	r31, 0x08	; 8
    4f92:	15 82       	std	Z+5, r1	; 0x05
    4f94:	16 82       	std	Z+6, r1	; 0x06
    4f96:	11 86       	std	Z+9, r1	; 0x09
    4f98:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    4f9a:	82 e0       	ldi	r24, 0x02	; 2
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	a0 e0       	ldi	r26, 0x00	; 0
    4fa0:	b0 e0       	ldi	r27, 0x00	; 0
    4fa2:	84 87       	std	Z+12, r24	; 0x0c
    4fa4:	95 87       	std	Z+13, r25	; 0x0d
    4fa6:	a6 87       	std	Z+14, r26	; 0x0e
    4fa8:	b7 87       	std	Z+15, r27	; 0x0f
    4faa:	13 a2       	std	Z+35, r1	; 0x23
    4fac:	15 a6       	std	Z+45, r1	; 0x2d
    4fae:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4fb0:	8e ee       	ldi	r24, 0xEE	; 238
    4fb2:	95 e0       	ldi	r25, 0x05	; 5
    4fb4:	93 a7       	std	Z+43, r25	; 0x2b
    4fb6:	82 a7       	std	Z+42, r24	; 0x2a
    4fb8:	17 a6       	std	Z+47, r1	; 0x2f
    4fba:	08 95       	ret

00004fbc <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    4fbc:	9f b7       	in	r25, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	20 91 ee 0a 	lds	r18, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    4fc4:	80 91 ec 0a 	lds	r24, 0x0AEC	; 0x800aec <_ZN8SPIClass13interruptSaveE>
    4fc8:	21 30       	cpi	r18, 0x01	; 1
    4fca:	19 f4       	brne	.+6      	; 0x4fd2 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    4fcc:	8d bb       	out	0x1d, r24	; 29
    4fce:	9f bf       	out	0x3f, r25	; 63
    4fd0:	08 95       	ret
    4fd2:	8f bf       	out	0x3f, r24	; 63
    4fd4:	08 95       	ret

00004fd6 <_ZN11SPISettingsC1Emhh>:
    4fd6:	0f 93       	push	r16
    4fd8:	fc 01       	movw	r30, r24
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	92 e1       	ldi	r25, 0x12	; 18
    4fde:	aa e7       	ldi	r26, 0x7A	; 122
    4fe0:	b0 e0       	ldi	r27, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	48 17       	cp	r20, r24
    4fe6:	59 07       	cpc	r21, r25
    4fe8:	6a 07       	cpc	r22, r26
    4fea:	7b 07       	cpc	r23, r27
    4fec:	40 f4       	brcc	.+16     	; 0x4ffe <_ZN11SPISettingsC1Emhh+0x28>
    4fee:	b6 95       	lsr	r27
    4ff0:	a7 95       	ror	r26
    4ff2:	97 95       	ror	r25
    4ff4:	87 95       	ror	r24
    4ff6:	3f 5f       	subi	r19, 0xFF	; 255
    4ff8:	36 30       	cpi	r19, 0x06	; 6
    4ffa:	a1 f7       	brne	.-24     	; 0x4fe4 <_ZN11SPISettingsC1Emhh+0xe>
    4ffc:	37 e0       	ldi	r19, 0x07	; 7
    4ffe:	91 e0       	ldi	r25, 0x01	; 1
    5000:	93 27       	eor	r25, r19
    5002:	22 23       	and	r18, r18
    5004:	11 f0       	breq	.+4      	; 0x500a <_ZN11SPISettingsC1Emhh+0x34>
    5006:	20 e5       	ldi	r18, 0x50	; 80
    5008:	01 c0       	rjmp	.+2      	; 0x500c <_ZN11SPISettingsC1Emhh+0x36>
    500a:	20 e7       	ldi	r18, 0x70	; 112
    500c:	0c 70       	andi	r16, 0x0C	; 12
    500e:	89 2f       	mov	r24, r25
    5010:	86 95       	lsr	r24
    5012:	08 2b       	or	r16, r24
    5014:	02 2b       	or	r16, r18
    5016:	00 83       	st	Z, r16
    5018:	91 70       	andi	r25, 0x01	; 1
    501a:	91 83       	std	Z+1, r25	; 0x01
    501c:	0f 91       	pop	r16
    501e:	08 95       	ret

00005020 <_ZN8SPIClass8transferEh>:
    5020:	8e bd       	out	0x2e, r24	; 46
    5022:	00 00       	nop
    5024:	0d b4       	in	r0, 0x2d	; 45
    5026:	07 fe       	sbrs	r0, 7
    5028:	fd cf       	rjmp	.-6      	; 0x5024 <_ZN8SPIClass8transferEh+0x4>
    502a:	8e b5       	in	r24, 0x2e	; 46
    502c:	08 95       	ret

0000502e <_ZL6spiRecv>:
    502e:	8f ef       	ldi	r24, 0xFF	; 255
    5030:	f7 cf       	rjmp	.-18     	; 0x5020 <_ZN8SPIClass8transferEh>

00005032 <_ZN7Sd2Card14chipSelectHighEv>:
    5032:	61 e0       	ldi	r22, 0x01	; 1
    5034:	fc 01       	movw	r30, r24
    5036:	84 81       	ldd	r24, Z+4	; 0x04
    5038:	0a dd       	rcall	.-1516   	; 0x4a4e <digitalWrite>
    503a:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <_ZL20chip_select_asserted>
    503e:	88 23       	and	r24, r24
    5040:	31 f0       	breq	.+12     	; 0x504e <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    5042:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <_ZL20chip_select_asserted>
    5046:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    504a:	81 11       	cpse	r24, r1
    504c:	b7 cf       	rjmp	.-146    	; 0x4fbc <_ZN8SPIClass14endTransactionEv.part.3>
    504e:	08 95       	ret

00005050 <_ZN7Sd2Card13chipSelectLowEv>:
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	ec 01       	movw	r28, r24
    5056:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <_ZL20chip_select_asserted>
    505a:	81 11       	cpse	r24, r1
    505c:	09 c0       	rjmp	.+18     	; 0x5070 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <_ZL20chip_select_asserted>
    5064:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <_ZL8settings>
    5068:	90 91 e2 08 	lds	r25, 0x08E2	; 0x8008e2 <_ZL8settings+0x1>
    506c:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN8SPIClass16beginTransactionE11SPISettings>
    5070:	60 e0       	ldi	r22, 0x00	; 0
    5072:	8c 81       	ldd	r24, Y+4	; 0x04
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	ea cc       	rjmp	.-1580   	; 0x4a4e <digitalWrite>

0000507a <_ZN7Sd2Card7readEndEv>:
    507a:	cf 93       	push	r28
    507c:	df 93       	push	r29
    507e:	ec 01       	movw	r28, r24
    5080:	8e 81       	ldd	r24, Y+6	; 0x06
    5082:	88 23       	and	r24, r24
    5084:	79 f0       	breq	.+30     	; 0x50a4 <_ZN7Sd2Card7readEndEv+0x2a>
    5086:	8f 81       	ldd	r24, Y+7	; 0x07
    5088:	98 85       	ldd	r25, Y+8	; 0x08
    508a:	9c 01       	movw	r18, r24
    508c:	2f 5f       	subi	r18, 0xFF	; 255
    508e:	3f 4f       	sbci	r19, 0xFF	; 255
    5090:	38 87       	std	Y+8, r19	; 0x08
    5092:	2f 83       	std	Y+7, r18	; 0x07
    5094:	82 30       	cpi	r24, 0x02	; 2
    5096:	92 40       	sbci	r25, 0x02	; 2
    5098:	10 f4       	brcc	.+4      	; 0x509e <_ZN7Sd2Card7readEndEv+0x24>
    509a:	c9 df       	rcall	.-110    	; 0x502e <_ZL6spiRecv>
    509c:	f4 cf       	rjmp	.-24     	; 0x5086 <_ZN7Sd2Card7readEndEv+0xc>
    509e:	ce 01       	movw	r24, r28
    50a0:	c8 df       	rcall	.-112    	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    50a2:	1e 82       	std	Y+6, r1	; 0x06
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	08 95       	ret

000050aa <_ZN7Sd2Card10setSckRateEh>:
    50aa:	0f 93       	push	r16
    50ac:	cf 93       	push	r28
    50ae:	df 93       	push	r29
    50b0:	1f 92       	push	r1
    50b2:	1f 92       	push	r1
    50b4:	cd b7       	in	r28, 0x3d	; 61
    50b6:	de b7       	in	r29, 0x3e	; 62
    50b8:	67 30       	cpi	r22, 0x07	; 7
    50ba:	28 f0       	brcs	.+10     	; 0x50c6 <_ZN7Sd2Card10setSckRateEh+0x1c>
    50bc:	26 e1       	ldi	r18, 0x16	; 22
    50be:	fc 01       	movw	r30, r24
    50c0:	25 83       	std	Z+5, r18	; 0x05
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	46 c0       	rjmp	.+140    	; 0x5152 <_ZN7Sd2Card10setSckRateEh+0xa8>
    50c6:	62 30       	cpi	r22, 0x02	; 2
    50c8:	f9 f0       	breq	.+62     	; 0x5108 <_ZN7Sd2Card10setSckRateEh+0x5e>
    50ca:	58 f4       	brcc	.+22     	; 0x50e2 <_ZN7Sd2Card10setSckRateEh+0x38>
    50cc:	66 23       	and	r22, r22
    50ce:	a9 f0       	breq	.+42     	; 0x50fa <_ZN7Sd2Card10setSckRateEh+0x50>
    50d0:	61 30       	cpi	r22, 0x01	; 1
    50d2:	79 f5       	brne	.+94     	; 0x5132 <_ZN7Sd2Card10setSckRateEh+0x88>
    50d4:	00 e0       	ldi	r16, 0x00	; 0
    50d6:	21 e0       	ldi	r18, 0x01	; 1
    50d8:	40 e0       	ldi	r20, 0x00	; 0
    50da:	59 e0       	ldi	r21, 0x09	; 9
    50dc:	6d e3       	ldi	r22, 0x3D	; 61
    50de:	70 e0       	ldi	r23, 0x00	; 0
    50e0:	2e c0       	rjmp	.+92     	; 0x513e <_ZN7Sd2Card10setSckRateEh+0x94>
    50e2:	64 30       	cpi	r22, 0x04	; 4
    50e4:	f9 f0       	breq	.+62     	; 0x5124 <_ZN7Sd2Card10setSckRateEh+0x7a>
    50e6:	b8 f0       	brcs	.+46     	; 0x5116 <_ZN7Sd2Card10setSckRateEh+0x6c>
    50e8:	65 30       	cpi	r22, 0x05	; 5
    50ea:	19 f5       	brne	.+70     	; 0x5132 <_ZN7Sd2Card10setSckRateEh+0x88>
    50ec:	00 e0       	ldi	r16, 0x00	; 0
    50ee:	21 e0       	ldi	r18, 0x01	; 1
    50f0:	40 e9       	ldi	r20, 0x90	; 144
    50f2:	50 ed       	ldi	r21, 0xD0	; 208
    50f4:	63 e0       	ldi	r22, 0x03	; 3
    50f6:	70 e0       	ldi	r23, 0x00	; 0
    50f8:	22 c0       	rjmp	.+68     	; 0x513e <_ZN7Sd2Card10setSckRateEh+0x94>
    50fa:	00 e0       	ldi	r16, 0x00	; 0
    50fc:	21 e0       	ldi	r18, 0x01	; 1
    50fe:	40 e4       	ldi	r20, 0x40	; 64
    5100:	58 e7       	ldi	r21, 0x78	; 120
    5102:	6d e7       	ldi	r22, 0x7D	; 125
    5104:	71 e0       	ldi	r23, 0x01	; 1
    5106:	1b c0       	rjmp	.+54     	; 0x513e <_ZN7Sd2Card10setSckRateEh+0x94>
    5108:	00 e0       	ldi	r16, 0x00	; 0
    510a:	21 e0       	ldi	r18, 0x01	; 1
    510c:	40 e8       	ldi	r20, 0x80	; 128
    510e:	54 e8       	ldi	r21, 0x84	; 132
    5110:	6e e1       	ldi	r22, 0x1E	; 30
    5112:	70 e0       	ldi	r23, 0x00	; 0
    5114:	14 c0       	rjmp	.+40     	; 0x513e <_ZN7Sd2Card10setSckRateEh+0x94>
    5116:	00 e0       	ldi	r16, 0x00	; 0
    5118:	21 e0       	ldi	r18, 0x01	; 1
    511a:	40 e4       	ldi	r20, 0x40	; 64
    511c:	52 e4       	ldi	r21, 0x42	; 66
    511e:	6f e0       	ldi	r22, 0x0F	; 15
    5120:	70 e0       	ldi	r23, 0x00	; 0
    5122:	0d c0       	rjmp	.+26     	; 0x513e <_ZN7Sd2Card10setSckRateEh+0x94>
    5124:	00 e0       	ldi	r16, 0x00	; 0
    5126:	21 e0       	ldi	r18, 0x01	; 1
    5128:	40 e2       	ldi	r20, 0x20	; 32
    512a:	51 ea       	ldi	r21, 0xA1	; 161
    512c:	67 e0       	ldi	r22, 0x07	; 7
    512e:	70 e0       	ldi	r23, 0x00	; 0
    5130:	06 c0       	rjmp	.+12     	; 0x513e <_ZN7Sd2Card10setSckRateEh+0x94>
    5132:	00 e0       	ldi	r16, 0x00	; 0
    5134:	21 e0       	ldi	r18, 0x01	; 1
    5136:	48 e4       	ldi	r20, 0x48	; 72
    5138:	58 ee       	ldi	r21, 0xE8	; 232
    513a:	61 e0       	ldi	r22, 0x01	; 1
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	ce 01       	movw	r24, r28
    5140:	01 96       	adiw	r24, 0x01	; 1
    5142:	49 df       	rcall	.-366    	; 0x4fd6 <_ZN11SPISettingsC1Emhh>
    5144:	89 81       	ldd	r24, Y+1	; 0x01
    5146:	9a 81       	ldd	r25, Y+2	; 0x02
    5148:	90 93 e2 08 	sts	0x08E2, r25	; 0x8008e2 <_ZL8settings+0x1>
    514c:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <_ZL8settings>
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	df 91       	pop	r29
    5158:	cf 91       	pop	r28
    515a:	0f 91       	pop	r16
    515c:	08 95       	ret

0000515e <_ZN7Sd2Card11waitNotBusyEj>:
    515e:	0f 93       	push	r16
    5160:	1f 93       	push	r17
    5162:	cf 93       	push	r28
    5164:	df 93       	push	r29
    5166:	eb 01       	movw	r28, r22
    5168:	ee da       	rcall	.-2596   	; 0x4746 <millis>
    516a:	8b 01       	movw	r16, r22
    516c:	60 df       	rcall	.-320    	; 0x502e <_ZL6spiRecv>
    516e:	8f 3f       	cpi	r24, 0xFF	; 255
    5170:	41 f0       	breq	.+16     	; 0x5182 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    5172:	e9 da       	rcall	.-2606   	; 0x4746 <millis>
    5174:	60 1b       	sub	r22, r16
    5176:	71 0b       	sbc	r23, r17
    5178:	6c 17       	cp	r22, r28
    517a:	7d 07       	cpc	r23, r29
    517c:	b8 f3       	brcs	.-18     	; 0x516c <_ZN7Sd2Card11waitNotBusyEj+0xe>
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	01 c0       	rjmp	.+2      	; 0x5184 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    5182:	81 e0       	ldi	r24, 0x01	; 1
    5184:	df 91       	pop	r29
    5186:	cf 91       	pop	r28
    5188:	1f 91       	pop	r17
    518a:	0f 91       	pop	r16
    518c:	08 95       	ret

0000518e <_ZN7Sd2Card11cardCommandEhm>:
    518e:	8f 92       	push	r8
    5190:	9f 92       	push	r9
    5192:	af 92       	push	r10
    5194:	bf 92       	push	r11
    5196:	ff 92       	push	r15
    5198:	0f 93       	push	r16
    519a:	1f 93       	push	r17
    519c:	cf 93       	push	r28
    519e:	df 93       	push	r29
    51a0:	ec 01       	movw	r28, r24
    51a2:	f6 2e       	mov	r15, r22
    51a4:	49 01       	movw	r8, r18
    51a6:	5a 01       	movw	r10, r20
    51a8:	68 df       	rcall	.-304    	; 0x507a <_ZN7Sd2Card7readEndEv>
    51aa:	ce 01       	movw	r24, r28
    51ac:	51 df       	rcall	.-350    	; 0x5050 <_ZN7Sd2Card13chipSelectLowEv>
    51ae:	6c e2       	ldi	r22, 0x2C	; 44
    51b0:	71 e0       	ldi	r23, 0x01	; 1
    51b2:	ce 01       	movw	r24, r28
    51b4:	d4 df       	rcall	.-88     	; 0x515e <_ZN7Sd2Card11waitNotBusyEj>
    51b6:	8f 2d       	mov	r24, r15
    51b8:	80 64       	ori	r24, 0x40	; 64
    51ba:	32 df       	rcall	.-412    	; 0x5020 <_ZN8SPIClass8transferEh>
    51bc:	08 e1       	ldi	r16, 0x18	; 24
    51be:	10 e0       	ldi	r17, 0x00	; 0
    51c0:	d5 01       	movw	r26, r10
    51c2:	c4 01       	movw	r24, r8
    51c4:	00 2e       	mov	r0, r16
    51c6:	04 c0       	rjmp	.+8      	; 0x51d0 <_ZN7Sd2Card11cardCommandEhm+0x42>
    51c8:	b6 95       	lsr	r27
    51ca:	a7 95       	ror	r26
    51cc:	97 95       	ror	r25
    51ce:	87 95       	ror	r24
    51d0:	0a 94       	dec	r0
    51d2:	d2 f7       	brpl	.-12     	; 0x51c8 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    51d4:	25 df       	rcall	.-438    	; 0x5020 <_ZN8SPIClass8transferEh>
    51d6:	08 50       	subi	r16, 0x08	; 8
    51d8:	11 09       	sbc	r17, r1
    51da:	08 3f       	cpi	r16, 0xF8	; 248
    51dc:	8f ef       	ldi	r24, 0xFF	; 255
    51de:	18 07       	cpc	r17, r24
    51e0:	79 f7       	brne	.-34     	; 0x51c0 <_ZN7Sd2Card11cardCommandEhm+0x32>
    51e2:	ff 20       	and	r15, r15
    51e4:	29 f0       	breq	.+10     	; 0x51f0 <_ZN7Sd2Card11cardCommandEhm+0x62>
    51e6:	88 e0       	ldi	r24, 0x08	; 8
    51e8:	f8 12       	cpse	r15, r24
    51ea:	04 c0       	rjmp	.+8      	; 0x51f4 <_ZN7Sd2Card11cardCommandEhm+0x66>
    51ec:	87 e8       	ldi	r24, 0x87	; 135
    51ee:	03 c0       	rjmp	.+6      	; 0x51f6 <_ZN7Sd2Card11cardCommandEhm+0x68>
    51f0:	85 e9       	ldi	r24, 0x95	; 149
    51f2:	01 c0       	rjmp	.+2      	; 0x51f6 <_ZN7Sd2Card11cardCommandEhm+0x68>
    51f4:	8f ef       	ldi	r24, 0xFF	; 255
    51f6:	14 df       	rcall	.-472    	; 0x5020 <_ZN8SPIClass8transferEh>
    51f8:	10 e0       	ldi	r17, 0x00	; 0
    51fa:	19 df       	rcall	.-462    	; 0x502e <_ZL6spiRecv>
    51fc:	8a 87       	std	Y+10, r24	; 0x0a
    51fe:	87 ff       	sbrs	r24, 7
    5200:	04 c0       	rjmp	.+8      	; 0x520a <_ZN7Sd2Card11cardCommandEhm+0x7c>
    5202:	1f 3f       	cpi	r17, 0xFF	; 255
    5204:	11 f0       	breq	.+4      	; 0x520a <_ZN7Sd2Card11cardCommandEhm+0x7c>
    5206:	1f 5f       	subi	r17, 0xFF	; 255
    5208:	f8 cf       	rjmp	.-16     	; 0x51fa <_ZN7Sd2Card11cardCommandEhm+0x6c>
    520a:	df 91       	pop	r29
    520c:	cf 91       	pop	r28
    520e:	1f 91       	pop	r17
    5210:	0f 91       	pop	r16
    5212:	ff 90       	pop	r15
    5214:	bf 90       	pop	r11
    5216:	af 90       	pop	r10
    5218:	9f 90       	pop	r9
    521a:	8f 90       	pop	r8
    521c:	08 95       	ret

0000521e <_ZN7Sd2Card4initEhh>:
    521e:	7f 92       	push	r7
    5220:	8f 92       	push	r8
    5222:	9f 92       	push	r9
    5224:	af 92       	push	r10
    5226:	bf 92       	push	r11
    5228:	cf 92       	push	r12
    522a:	df 92       	push	r13
    522c:	ef 92       	push	r14
    522e:	ff 92       	push	r15
    5230:	0f 93       	push	r16
    5232:	1f 93       	push	r17
    5234:	cf 93       	push	r28
    5236:	df 93       	push	r29
    5238:	1f 92       	push	r1
    523a:	1f 92       	push	r1
    523c:	cd b7       	in	r28, 0x3d	; 61
    523e:	de b7       	in	r29, 0x3e	; 62
    5240:	7c 01       	movw	r14, r24
    5242:	76 2e       	mov	r7, r22
    5244:	fc 01       	movw	r30, r24
    5246:	13 86       	std	Z+11, r1	; 0x0b
    5248:	11 86       	std	Z+9, r1	; 0x09
    524a:	16 82       	std	Z+6, r1	; 0x06
    524c:	15 82       	std	Z+5, r1	; 0x05
    524e:	44 83       	std	Z+4, r20	; 0x04
    5250:	7a da       	rcall	.-2828   	; 0x4746 <millis>
    5252:	6b 01       	movw	r12, r22
    5254:	61 e0       	ldi	r22, 0x01	; 1
    5256:	f7 01       	movw	r30, r14
    5258:	84 81       	ldd	r24, Z+4	; 0x04
    525a:	bd db       	rcall	.-2182   	; 0x49d6 <pinMode>
    525c:	61 e0       	ldi	r22, 0x01	; 1
    525e:	f7 01       	movw	r30, r14
    5260:	84 81       	ldd	r24, Z+4	; 0x04
    5262:	f5 db       	rcall	.-2070   	; 0x4a4e <digitalWrite>
    5264:	0e 94 40 33 	call	0x6680	; 0x6680 <_ZN8SPIClass5beginEv>
    5268:	00 e0       	ldi	r16, 0x00	; 0
    526a:	21 e0       	ldi	r18, 0x01	; 1
    526c:	40 e9       	ldi	r20, 0x90	; 144
    526e:	50 ed       	ldi	r21, 0xD0	; 208
    5270:	63 e0       	ldi	r22, 0x03	; 3
    5272:	70 e0       	ldi	r23, 0x00	; 0
    5274:	ce 01       	movw	r24, r28
    5276:	01 96       	adiw	r24, 0x01	; 1
    5278:	ae de       	rcall	.-676    	; 0x4fd6 <_ZN11SPISettingsC1Emhh>
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	9a 81       	ldd	r25, Y+2	; 0x02
    527e:	90 93 e2 08 	sts	0x08E2, r25	; 0x8008e2 <_ZL8settings+0x1>
    5282:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <_ZL8settings>
    5286:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN8SPIClass16beginTransactionE11SPISettings>
    528a:	1a e0       	ldi	r17, 0x0A	; 10
    528c:	8f ef       	ldi	r24, 0xFF	; 255
    528e:	c8 de       	rcall	.-624    	; 0x5020 <_ZN8SPIClass8transferEh>
    5290:	11 50       	subi	r17, 0x01	; 1
    5292:	e1 f7       	brne	.-8      	; 0x528c <_ZN7Sd2Card4initEhh+0x6e>
    5294:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <_ZN8SPIClass13interruptModeE>
    5298:	81 11       	cpse	r24, r1
    529a:	90 de       	rcall	.-736    	; 0x4fbc <_ZN8SPIClass14endTransactionEv.part.3>
    529c:	c7 01       	movw	r24, r14
    529e:	d8 de       	rcall	.-592    	; 0x5050 <_ZN7Sd2Card13chipSelectLowEv>
    52a0:	20 e0       	ldi	r18, 0x00	; 0
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	a9 01       	movw	r20, r18
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	c7 01       	movw	r24, r14
    52aa:	71 df       	rcall	.-286    	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    52ac:	08 2f       	mov	r16, r24
    52ae:	f7 01       	movw	r30, r14
    52b0:	82 87       	std	Z+10, r24	; 0x0a
    52b2:	81 30       	cpi	r24, 0x01	; 1
    52b4:	41 f0       	breq	.+16     	; 0x52c6 <_ZN7Sd2Card4initEhh+0xa8>
    52b6:	47 da       	rcall	.-2930   	; 0x4746 <millis>
    52b8:	6c 19       	sub	r22, r12
    52ba:	7d 09       	sbc	r23, r13
    52bc:	61 3d       	cpi	r22, 0xD1	; 209
    52be:	77 40       	sbci	r23, 0x07	; 7
    52c0:	78 f3       	brcs	.-34     	; 0x52a0 <_ZN7Sd2Card4initEhh+0x82>
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	4a c0       	rjmp	.+148    	; 0x535a <_ZN7Sd2Card4initEhh+0x13c>
    52c6:	2a ea       	ldi	r18, 0xAA	; 170
    52c8:	31 e0       	ldi	r19, 0x01	; 1
    52ca:	40 e0       	ldi	r20, 0x00	; 0
    52cc:	50 e0       	ldi	r21, 0x00	; 0
    52ce:	68 e0       	ldi	r22, 0x08	; 8
    52d0:	c7 01       	movw	r24, r14
    52d2:	5d df       	rcall	.-326    	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    52d4:	82 ff       	sbrs	r24, 2
    52d6:	03 c0       	rjmp	.+6      	; 0x52de <_ZN7Sd2Card4initEhh+0xc0>
    52d8:	f7 01       	movw	r30, r14
    52da:	03 87       	std	Z+11, r16	; 0x0b
    52dc:	0d c0       	rjmp	.+26     	; 0x52f8 <_ZN7Sd2Card4initEhh+0xda>
    52de:	04 e0       	ldi	r16, 0x04	; 4
    52e0:	a6 de       	rcall	.-692    	; 0x502e <_ZL6spiRecv>
    52e2:	f7 01       	movw	r30, r14
    52e4:	82 87       	std	Z+10, r24	; 0x0a
    52e6:	01 50       	subi	r16, 0x01	; 1
    52e8:	d9 f7       	brne	.-10     	; 0x52e0 <_ZN7Sd2Card4initEhh+0xc2>
    52ea:	8a 3a       	cpi	r24, 0xAA	; 170
    52ec:	11 f0       	breq	.+4      	; 0x52f2 <_ZN7Sd2Card4initEhh+0xd4>
    52ee:	82 e0       	ldi	r24, 0x02	; 2
    52f0:	35 c0       	rjmp	.+106    	; 0x535c <_ZN7Sd2Card4initEhh+0x13e>
    52f2:	82 e0       	ldi	r24, 0x02	; 2
    52f4:	f7 01       	movw	r30, r14
    52f6:	83 87       	std	Z+11, r24	; 0x0b
    52f8:	f7 01       	movw	r30, r14
    52fa:	83 85       	ldd	r24, Z+11	; 0x0b
    52fc:	82 30       	cpi	r24, 0x02	; 2
    52fe:	21 f0       	breq	.+8      	; 0x5308 <_ZN7Sd2Card4initEhh+0xea>
    5300:	81 2c       	mov	r8, r1
    5302:	91 2c       	mov	r9, r1
    5304:	54 01       	movw	r10, r8
    5306:	05 c0       	rjmp	.+10     	; 0x5312 <_ZN7Sd2Card4initEhh+0xf4>
    5308:	81 2c       	mov	r8, r1
    530a:	91 2c       	mov	r9, r1
    530c:	a1 2c       	mov	r10, r1
    530e:	80 e4       	ldi	r24, 0x40	; 64
    5310:	b8 2e       	mov	r11, r24
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	a9 01       	movw	r20, r18
    5318:	67 e3       	ldi	r22, 0x37	; 55
    531a:	c7 01       	movw	r24, r14
    531c:	38 df       	rcall	.-400    	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    531e:	a5 01       	movw	r20, r10
    5320:	94 01       	movw	r18, r8
    5322:	69 e2       	ldi	r22, 0x29	; 41
    5324:	c7 01       	movw	r24, r14
    5326:	33 df       	rcall	.-410    	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    5328:	f7 01       	movw	r30, r14
    532a:	82 87       	std	Z+10, r24	; 0x0a
    532c:	88 23       	and	r24, r24
    532e:	41 f0       	breq	.+16     	; 0x5340 <_ZN7Sd2Card4initEhh+0x122>
    5330:	0a da       	rcall	.-3052   	; 0x4746 <millis>
    5332:	6c 19       	sub	r22, r12
    5334:	7d 09       	sbc	r23, r13
    5336:	61 3d       	cpi	r22, 0xD1	; 209
    5338:	77 40       	sbci	r23, 0x07	; 7
    533a:	58 f3       	brcs	.-42     	; 0x5312 <_ZN7Sd2Card4initEhh+0xf4>
    533c:	88 e0       	ldi	r24, 0x08	; 8
    533e:	0d c0       	rjmp	.+26     	; 0x535a <_ZN7Sd2Card4initEhh+0x13c>
    5340:	f7 01       	movw	r30, r14
    5342:	83 85       	ldd	r24, Z+11	; 0x0b
    5344:	82 30       	cpi	r24, 0x02	; 2
    5346:	c1 f4       	brne	.+48     	; 0x5378 <_ZN7Sd2Card4initEhh+0x15a>
    5348:	20 e0       	ldi	r18, 0x00	; 0
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	a9 01       	movw	r20, r18
    534e:	6a e3       	ldi	r22, 0x3A	; 58
    5350:	c7 01       	movw	r24, r14
    5352:	1d df       	rcall	.-454    	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    5354:	88 23       	and	r24, r24
    5356:	31 f0       	breq	.+12     	; 0x5364 <_ZN7Sd2Card4initEhh+0x146>
    5358:	86 e0       	ldi	r24, 0x06	; 6
    535a:	f7 01       	movw	r30, r14
    535c:	85 83       	std	Z+5, r24	; 0x05
    535e:	c7 01       	movw	r24, r14
    5360:	68 de       	rcall	.-816    	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    5362:	10 c0       	rjmp	.+32     	; 0x5384 <_ZN7Sd2Card4initEhh+0x166>
    5364:	64 de       	rcall	.-824    	; 0x502e <_ZL6spiRecv>
    5366:	80 7c       	andi	r24, 0xC0	; 192
    5368:	80 3c       	cpi	r24, 0xC0	; 192
    536a:	19 f4       	brne	.+6      	; 0x5372 <_ZN7Sd2Card4initEhh+0x154>
    536c:	83 e0       	ldi	r24, 0x03	; 3
    536e:	f7 01       	movw	r30, r14
    5370:	83 87       	std	Z+11, r24	; 0x0b
    5372:	5d de       	rcall	.-838    	; 0x502e <_ZL6spiRecv>
    5374:	5c de       	rcall	.-840    	; 0x502e <_ZL6spiRecv>
    5376:	5b de       	rcall	.-842    	; 0x502e <_ZL6spiRecv>
    5378:	c7 01       	movw	r24, r14
    537a:	5b de       	rcall	.-842    	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    537c:	67 2d       	mov	r22, r7
    537e:	c7 01       	movw	r24, r14
    5380:	94 de       	rcall	.-728    	; 0x50aa <_ZN7Sd2Card10setSckRateEh>
    5382:	18 2f       	mov	r17, r24
    5384:	81 2f       	mov	r24, r17
    5386:	0f 90       	pop	r0
    5388:	0f 90       	pop	r0
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	1f 91       	pop	r17
    5390:	0f 91       	pop	r16
    5392:	ff 90       	pop	r15
    5394:	ef 90       	pop	r14
    5396:	df 90       	pop	r13
    5398:	cf 90       	pop	r12
    539a:	bf 90       	pop	r11
    539c:	af 90       	pop	r10
    539e:	9f 90       	pop	r9
    53a0:	8f 90       	pop	r8
    53a2:	7f 90       	pop	r7
    53a4:	08 95       	ret

000053a6 <_ZN7Sd2Card14waitStartBlockEv>:
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	cf 93       	push	r28
    53ac:	df 93       	push	r29
    53ae:	ec 01       	movw	r28, r24
    53b0:	ca d9       	rcall	.-3180   	; 0x4746 <millis>
    53b2:	8b 01       	movw	r16, r22
    53b4:	3c de       	rcall	.-904    	; 0x502e <_ZL6spiRecv>
    53b6:	8a 87       	std	Y+10, r24	; 0x0a
    53b8:	8f 3f       	cpi	r24, 0xFF	; 255
    53ba:	41 f4       	brne	.+16     	; 0x53cc <_ZN7Sd2Card14waitStartBlockEv+0x26>
    53bc:	c4 d9       	rcall	.-3192   	; 0x4746 <millis>
    53be:	60 1b       	sub	r22, r16
    53c0:	71 0b       	sbc	r23, r17
    53c2:	6d 32       	cpi	r22, 0x2D	; 45
    53c4:	71 40       	sbci	r23, 0x01	; 1
    53c6:	b0 f3       	brcs	.-20     	; 0x53b4 <_ZN7Sd2Card14waitStartBlockEv+0xe>
    53c8:	8f e0       	ldi	r24, 0x0F	; 15
    53ca:	03 c0       	rjmp	.+6      	; 0x53d2 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    53cc:	8e 3f       	cpi	r24, 0xFE	; 254
    53ce:	31 f0       	breq	.+12     	; 0x53dc <_ZN7Sd2Card14waitStartBlockEv+0x36>
    53d0:	8d e0       	ldi	r24, 0x0D	; 13
    53d2:	8d 83       	std	Y+5, r24	; 0x05
    53d4:	ce 01       	movw	r24, r28
    53d6:	2d de       	rcall	.-934    	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	01 c0       	rjmp	.+2      	; 0x53de <_ZN7Sd2Card14waitStartBlockEv+0x38>
    53dc:	81 e0       	ldi	r24, 0x01	; 1
    53de:	df 91       	pop	r29
    53e0:	cf 91       	pop	r28
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	08 95       	ret

000053e8 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    53e8:	cf 92       	push	r12
    53ea:	df 92       	push	r13
    53ec:	ef 92       	push	r14
    53ee:	ff 92       	push	r15
    53f0:	0f 93       	push	r16
    53f2:	1f 93       	push	r17
    53f4:	cf 93       	push	r28
    53f6:	df 93       	push	r29
    53f8:	ec 01       	movw	r28, r24
    53fa:	69 01       	movw	r12, r18
    53fc:	c8 01       	movw	r24, r16
    53fe:	82 0f       	add	r24, r18
    5400:	93 1f       	adc	r25, r19
    5402:	81 30       	cpi	r24, 0x01	; 1
    5404:	92 40       	sbci	r25, 0x02	; 2
    5406:	08 f0       	brcs	.+2      	; 0x540a <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    5408:	57 c0       	rjmp	.+174    	; 0x54b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    540a:	8e 81       	ldd	r24, Y+6	; 0x06
    540c:	88 23       	and	r24, r24
    540e:	71 f0       	breq	.+28     	; 0x542c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    5410:	88 81       	ld	r24, Y
    5412:	99 81       	ldd	r25, Y+1	; 0x01
    5414:	aa 81       	ldd	r26, Y+2	; 0x02
    5416:	bb 81       	ldd	r27, Y+3	; 0x03
    5418:	84 17       	cp	r24, r20
    541a:	95 07       	cpc	r25, r21
    541c:	a6 07       	cpc	r26, r22
    541e:	b7 07       	cpc	r27, r23
    5420:	29 f4       	brne	.+10     	; 0x542c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    5422:	8f 81       	ldd	r24, Y+7	; 0x07
    5424:	98 85       	ldd	r25, Y+8	; 0x08
    5426:	c8 16       	cp	r12, r24
    5428:	d9 06       	cpc	r13, r25
    542a:	00 f5       	brcc	.+64     	; 0x546c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    542c:	48 83       	st	Y, r20
    542e:	59 83       	std	Y+1, r21	; 0x01
    5430:	6a 83       	std	Y+2, r22	; 0x02
    5432:	7b 83       	std	Y+3, r23	; 0x03
    5434:	8b 85       	ldd	r24, Y+11	; 0x0b
    5436:	83 30       	cpi	r24, 0x03	; 3
    5438:	39 f0       	breq	.+14     	; 0x5448 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    543a:	89 e0       	ldi	r24, 0x09	; 9
    543c:	44 0f       	add	r20, r20
    543e:	55 1f       	adc	r21, r21
    5440:	66 1f       	adc	r22, r22
    5442:	77 1f       	adc	r23, r23
    5444:	8a 95       	dec	r24
    5446:	d1 f7       	brne	.-12     	; 0x543c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    5448:	9a 01       	movw	r18, r20
    544a:	ab 01       	movw	r20, r22
    544c:	61 e1       	ldi	r22, 0x11	; 17
    544e:	ce 01       	movw	r24, r28
    5450:	9e de       	rcall	.-708    	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    5452:	88 23       	and	r24, r24
    5454:	19 f0       	breq	.+6      	; 0x545c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    5456:	83 e0       	ldi	r24, 0x03	; 3
    5458:	8d 83       	std	Y+5, r24	; 0x05
    545a:	2e c0       	rjmp	.+92     	; 0x54b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    545c:	ce 01       	movw	r24, r28
    545e:	a3 df       	rcall	.-186    	; 0x53a6 <_ZN7Sd2Card14waitStartBlockEv>
    5460:	88 23       	and	r24, r24
    5462:	51 f1       	breq	.+84     	; 0x54b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    5464:	18 86       	std	Y+8, r1	; 0x08
    5466:	1f 82       	std	Y+7, r1	; 0x07
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	8e 83       	std	Y+6, r24	; 0x06
    546c:	8f 81       	ldd	r24, Y+7	; 0x07
    546e:	98 85       	ldd	r25, Y+8	; 0x08
    5470:	8c 15       	cp	r24, r12
    5472:	9d 05       	cpc	r25, r13
    5474:	38 f4       	brcc	.+14     	; 0x5484 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    5476:	db dd       	rcall	.-1098   	; 0x502e <_ZL6spiRecv>
    5478:	8f 81       	ldd	r24, Y+7	; 0x07
    547a:	98 85       	ldd	r25, Y+8	; 0x08
    547c:	01 96       	adiw	r24, 0x01	; 1
    547e:	98 87       	std	Y+8, r25	; 0x08
    5480:	8f 83       	std	Y+7, r24	; 0x07
    5482:	f4 cf       	rjmp	.-24     	; 0x546c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    5484:	67 01       	movw	r12, r14
    5486:	e0 0e       	add	r14, r16
    5488:	f1 1e       	adc	r15, r17
    548a:	ce 14       	cp	r12, r14
    548c:	df 04       	cpc	r13, r15
    548e:	29 f0       	breq	.+10     	; 0x549a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    5490:	ce dd       	rcall	.-1124   	; 0x502e <_ZL6spiRecv>
    5492:	f6 01       	movw	r30, r12
    5494:	81 93       	st	Z+, r24
    5496:	6f 01       	movw	r12, r30
    5498:	f8 cf       	rjmp	.-16     	; 0x548a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    549a:	8f 81       	ldd	r24, Y+7	; 0x07
    549c:	98 85       	ldd	r25, Y+8	; 0x08
    549e:	08 0f       	add	r16, r24
    54a0:	19 1f       	adc	r17, r25
    54a2:	18 87       	std	Y+8, r17	; 0x08
    54a4:	0f 83       	std	Y+7, r16	; 0x07
    54a6:	89 85       	ldd	r24, Y+9	; 0x09
    54a8:	88 23       	and	r24, r24
    54aa:	19 f0       	breq	.+6      	; 0x54b2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    54ac:	01 15       	cp	r16, r1
    54ae:	12 40       	sbci	r17, 0x02	; 2
    54b0:	38 f0       	brcs	.+14     	; 0x54c0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    54b2:	ce 01       	movw	r24, r28
    54b4:	e2 dd       	rcall	.-1084   	; 0x507a <_ZN7Sd2Card7readEndEv>
    54b6:	04 c0       	rjmp	.+8      	; 0x54c0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    54b8:	ce 01       	movw	r24, r28
    54ba:	bb dd       	rcall	.-1162   	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    54bc:	80 e0       	ldi	r24, 0x00	; 0
    54be:	01 c0       	rjmp	.+2      	; 0x54c2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	ff 90       	pop	r15
    54cc:	ef 90       	pop	r14
    54ce:	df 90       	pop	r13
    54d0:	cf 90       	pop	r12
    54d2:	08 95       	ret

000054d4 <_ZN7Sd2Card8readDataEmjjPh>:
    54d4:	ef 92       	push	r14
    54d6:	ff 92       	push	r15
    54d8:	0f 93       	push	r16
    54da:	1f 93       	push	r17
    54dc:	01 15       	cp	r16, r1
    54de:	11 05       	cpc	r17, r1
    54e0:	11 f0       	breq	.+4      	; 0x54e6 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    54e2:	82 df       	rcall	.-252    	; 0x53e8 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    54e4:	01 c0       	rjmp	.+2      	; 0x54e8 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	1f 91       	pop	r17
    54ea:	0f 91       	pop	r16
    54ec:	ff 90       	pop	r15
    54ee:	ef 90       	pop	r14
    54f0:	08 95       	ret

000054f2 <_ZN7Sd2Card9readBlockEmPh>:
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	79 01       	movw	r14, r18
    54fc:	00 e0       	ldi	r16, 0x00	; 0
    54fe:	12 e0       	ldi	r17, 0x02	; 2
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	71 df       	rcall	.-286    	; 0x53e8 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    5506:	1f 91       	pop	r17
    5508:	0f 91       	pop	r16
    550a:	ff 90       	pop	r15
    550c:	ef 90       	pop	r14
    550e:	08 95       	ret

00005510 <_ZN7Sd2Card9writeDataEhPKh>:
    5510:	ef 92       	push	r14
    5512:	ff 92       	push	r15
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	8c 01       	movw	r16, r24
    551e:	86 2f       	mov	r24, r22
    5520:	7a 01       	movw	r14, r20
    5522:	7e dd       	rcall	.-1284   	; 0x5020 <_ZN8SPIClass8transferEh>
    5524:	e7 01       	movw	r28, r14
    5526:	8e ef       	ldi	r24, 0xFE	; 254
    5528:	f8 1a       	sub	r15, r24
    552a:	89 91       	ld	r24, Y+
    552c:	79 dd       	rcall	.-1294   	; 0x5020 <_ZN8SPIClass8transferEh>
    552e:	ce 15       	cp	r28, r14
    5530:	df 05       	cpc	r29, r15
    5532:	d9 f7       	brne	.-10     	; 0x552a <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    5534:	8f ef       	ldi	r24, 0xFF	; 255
    5536:	74 dd       	rcall	.-1304   	; 0x5020 <_ZN8SPIClass8transferEh>
    5538:	8f ef       	ldi	r24, 0xFF	; 255
    553a:	72 dd       	rcall	.-1308   	; 0x5020 <_ZN8SPIClass8transferEh>
    553c:	78 dd       	rcall	.-1296   	; 0x502e <_ZL6spiRecv>
    553e:	f8 01       	movw	r30, r16
    5540:	82 87       	std	Z+10, r24	; 0x0a
    5542:	8f 71       	andi	r24, 0x1F	; 31
    5544:	85 30       	cpi	r24, 0x05	; 5
    5546:	31 f0       	breq	.+12     	; 0x5554 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    5548:	81 e1       	ldi	r24, 0x11	; 17
    554a:	85 83       	std	Z+5, r24	; 0x05
    554c:	c8 01       	movw	r24, r16
    554e:	71 dd       	rcall	.-1310   	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	01 c0       	rjmp	.+2      	; 0x5556 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	1f 91       	pop	r17
    555c:	0f 91       	pop	r16
    555e:	ff 90       	pop	r15
    5560:	ef 90       	pop	r14
    5562:	08 95       	ret

00005564 <_ZN7Sd2Card10writeBlockEmPKh>:
    5564:	0f 93       	push	r16
    5566:	1f 93       	push	r17
    5568:	cf 93       	push	r28
    556a:	df 93       	push	r29
    556c:	ec 01       	movw	r28, r24
    556e:	89 01       	movw	r16, r18
    5570:	41 15       	cp	r20, r1
    5572:	51 05       	cpc	r21, r1
    5574:	61 05       	cpc	r22, r1
    5576:	71 05       	cpc	r23, r1
    5578:	11 f4       	brne	.+4      	; 0x557e <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    557a:	82 e1       	ldi	r24, 0x12	; 18
    557c:	2d c0       	rjmp	.+90     	; 0x55d8 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    557e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5580:	83 30       	cpi	r24, 0x03	; 3
    5582:	39 f0       	breq	.+14     	; 0x5592 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    5584:	89 e0       	ldi	r24, 0x09	; 9
    5586:	44 0f       	add	r20, r20
    5588:	55 1f       	adc	r21, r21
    558a:	66 1f       	adc	r22, r22
    558c:	77 1f       	adc	r23, r23
    558e:	8a 95       	dec	r24
    5590:	d1 f7       	brne	.-12     	; 0x5586 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    5592:	9a 01       	movw	r18, r20
    5594:	ab 01       	movw	r20, r22
    5596:	68 e1       	ldi	r22, 0x18	; 24
    5598:	ce 01       	movw	r24, r28
    559a:	f9 dd       	rcall	.-1038   	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    559c:	88 23       	and	r24, r24
    559e:	11 f0       	breq	.+4      	; 0x55a4 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    55a0:	84 e0       	ldi	r24, 0x04	; 4
    55a2:	1a c0       	rjmp	.+52     	; 0x55d8 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    55a4:	a8 01       	movw	r20, r16
    55a6:	6e ef       	ldi	r22, 0xFE	; 254
    55a8:	ce 01       	movw	r24, r28
    55aa:	b2 df       	rcall	.-156    	; 0x5510 <_ZN7Sd2Card9writeDataEhPKh>
    55ac:	88 23       	and	r24, r24
    55ae:	a9 f0       	breq	.+42     	; 0x55da <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    55b0:	68 e5       	ldi	r22, 0x58	; 88
    55b2:	72 e0       	ldi	r23, 0x02	; 2
    55b4:	ce 01       	movw	r24, r28
    55b6:	d3 dd       	rcall	.-1114   	; 0x515e <_ZN7Sd2Card11waitNotBusyEj>
    55b8:	81 11       	cpse	r24, r1
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    55bc:	85 e1       	ldi	r24, 0x15	; 21
    55be:	0c c0       	rjmp	.+24     	; 0x55d8 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	a9 01       	movw	r20, r18
    55c6:	6d e0       	ldi	r22, 0x0D	; 13
    55c8:	ce 01       	movw	r24, r28
    55ca:	e1 dd       	rcall	.-1086   	; 0x518e <_ZN7Sd2Card11cardCommandEhm>
    55cc:	81 11       	cpse	r24, r1
    55ce:	03 c0       	rjmp	.+6      	; 0x55d6 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    55d0:	2e dd       	rcall	.-1444   	; 0x502e <_ZL6spiRecv>
    55d2:	88 23       	and	r24, r24
    55d4:	31 f0       	breq	.+12     	; 0x55e2 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    55d6:	84 e1       	ldi	r24, 0x14	; 20
    55d8:	8d 83       	std	Y+5, r24	; 0x05
    55da:	ce 01       	movw	r24, r28
    55dc:	2a dd       	rcall	.-1452   	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	03 c0       	rjmp	.+6      	; 0x55e8 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    55e2:	ce 01       	movw	r24, r28
    55e4:	26 dd       	rcall	.-1460   	; 0x5032 <_ZN7Sd2Card14chipSelectHighEv>
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	1f 91       	pop	r17
    55ee:	0f 91       	pop	r16
    55f0:	08 95       	ret

000055f2 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    55f2:	e1 ee       	ldi	r30, 0xE1	; 225
    55f4:	f8 e0       	ldi	r31, 0x08	; 8
    55f6:	80 e5       	ldi	r24, 0x50	; 80
    55f8:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    55fa:	11 82       	std	Z+1, r1	; 0x01
    55fc:	08 95       	ret

000055fe <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	ec 01       	movw	r28, r24
    5604:	9c 01       	movw	r18, r24
    5606:	2a 5f       	subi	r18, 0xFA	; 250
    5608:	3f 4f       	sbci	r19, 0xFF	; 255
    560a:	41 e0       	ldi	r20, 0x01	; 1
    560c:	50 e0       	ldi	r21, 0x00	; 0
    560e:	60 e0       	ldi	r22, 0x00	; 0
    5610:	70 e0       	ldi	r23, 0x00	; 0
    5612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5616:	0f d6       	rcall	.+3102   	; 0x6236 <_ZN8SdVolume15allocContiguousEmPm>
    5618:	88 23       	and	r24, r24
    561a:	a1 f0       	breq	.+40     	; 0x5644 <_ZN6SdFile10addClusterEv+0x46>
    561c:	8f 89       	ldd	r24, Y+23	; 0x17
    561e:	98 8d       	ldd	r25, Y+24	; 0x18
    5620:	a9 8d       	ldd	r26, Y+25	; 0x19
    5622:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5624:	89 2b       	or	r24, r25
    5626:	8a 2b       	or	r24, r26
    5628:	8b 2b       	or	r24, r27
    562a:	59 f4       	brne	.+22     	; 0x5642 <_ZN6SdFile10addClusterEv+0x44>
    562c:	8e 81       	ldd	r24, Y+6	; 0x06
    562e:	9f 81       	ldd	r25, Y+7	; 0x07
    5630:	a8 85       	ldd	r26, Y+8	; 0x08
    5632:	b9 85       	ldd	r27, Y+9	; 0x09
    5634:	8f 8b       	std	Y+23, r24	; 0x17
    5636:	98 8f       	std	Y+24, r25	; 0x18
    5638:	a9 8f       	std	Y+25, r26	; 0x19
    563a:	ba 8f       	std	Y+26, r27	; 0x1a
    563c:	8c 81       	ldd	r24, Y+4	; 0x04
    563e:	80 68       	ori	r24, 0x80	; 128
    5640:	8c 83       	std	Y+4, r24	; 0x04
    5642:	81 e0       	ldi	r24, 0x01	; 1
    5644:	df 91       	pop	r29
    5646:	cf 91       	pop	r28
    5648:	08 95       	ret

0000564a <_ZN6SdFile13cacheDirEntryEh>:
    564a:	cf 93       	push	r28
    564c:	df 93       	push	r29
    564e:	ec 01       	movw	r28, r24
    5650:	46 2f       	mov	r20, r22
    5652:	6e 85       	ldd	r22, Y+14	; 0x0e
    5654:	7f 85       	ldd	r23, Y+15	; 0x0f
    5656:	88 89       	ldd	r24, Y+16	; 0x10
    5658:	99 89       	ldd	r25, Y+17	; 0x11
    565a:	2a d4       	rcall	.+2132   	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    565c:	88 23       	and	r24, r24
    565e:	41 f0       	breq	.+16     	; 0x5670 <_ZN6SdFile13cacheDirEntryEh+0x26>
    5660:	8a 89       	ldd	r24, Y+18	; 0x12
    5662:	20 e2       	ldi	r18, 0x20	; 32
    5664:	82 9f       	mul	r24, r18
    5666:	c0 01       	movw	r24, r0
    5668:	11 24       	eor	r1, r1
    566a:	84 51       	subi	r24, 0x14	; 20
    566c:	97 4f       	sbci	r25, 0xF7	; 247
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    5670:	80 e0       	ldi	r24, 0x00	; 0
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	df 91       	pop	r29
    5676:	cf 91       	pop	r28
    5678:	08 95       	ret

0000567a <_ZN6SdFile8openRootEP8SdVolume>:
    567a:	0f 93       	push	r16
    567c:	1f 93       	push	r17
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
    5682:	fc 01       	movw	r30, r24
    5684:	25 81       	ldd	r18, Z+5	; 0x05
    5686:	22 23       	and	r18, r18
    5688:	11 f0       	breq	.+4      	; 0x568e <_ZN6SdFile8openRootEP8SdVolume+0x14>
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	41 c0       	rjmp	.+130    	; 0x5710 <_ZN6SdFile8openRootEP8SdVolume+0x96>
    568e:	8b 01       	movw	r16, r22
    5690:	ec 01       	movw	r28, r24
    5692:	fb 01       	movw	r30, r22
    5694:	87 89       	ldd	r24, Z+23	; 0x17
    5696:	80 31       	cpi	r24, 0x10	; 16
    5698:	b1 f4       	brne	.+44     	; 0x56c6 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    569a:	82 e0       	ldi	r24, 0x02	; 2
    569c:	8d 83       	std	Y+5, r24	; 0x05
    569e:	1f 8a       	std	Y+23, r1	; 0x17
    56a0:	18 8e       	std	Y+24, r1	; 0x18
    56a2:	19 8e       	std	Y+25, r1	; 0x19
    56a4:	1a 8e       	std	Y+26, r1	; 0x1a
    56a6:	80 8d       	ldd	r24, Z+24	; 0x18
    56a8:	91 8d       	ldd	r25, Z+25	; 0x19
    56aa:	a0 e0       	ldi	r26, 0x00	; 0
    56ac:	b0 e0       	ldi	r27, 0x00	; 0
    56ae:	25 e0       	ldi	r18, 0x05	; 5
    56b0:	88 0f       	add	r24, r24
    56b2:	99 1f       	adc	r25, r25
    56b4:	aa 1f       	adc	r26, r26
    56b6:	bb 1f       	adc	r27, r27
    56b8:	2a 95       	dec	r18
    56ba:	d1 f7       	brne	.-12     	; 0x56b0 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    56bc:	8b 8b       	std	Y+19, r24	; 0x13
    56be:	9c 8b       	std	Y+20, r25	; 0x14
    56c0:	ad 8b       	std	Y+21, r26	; 0x15
    56c2:	be 8b       	std	Y+22, r27	; 0x16
    56c4:	14 c0       	rjmp	.+40     	; 0x56ee <_ZN6SdFile8openRootEP8SdVolume+0x74>
    56c6:	80 32       	cpi	r24, 0x20	; 32
    56c8:	01 f7       	brne	.-64     	; 0x568a <_ZN6SdFile8openRootEP8SdVolume+0x10>
    56ca:	83 e0       	ldi	r24, 0x03	; 3
    56cc:	8d 83       	std	Y+5, r24	; 0x05
    56ce:	fb 01       	movw	r30, r22
    56d0:	42 8d       	ldd	r20, Z+26	; 0x1a
    56d2:	53 8d       	ldd	r21, Z+27	; 0x1b
    56d4:	64 8d       	ldd	r22, Z+28	; 0x1c
    56d6:	75 8d       	ldd	r23, Z+29	; 0x1d
    56d8:	4f 8b       	std	Y+23, r20	; 0x17
    56da:	58 8f       	std	Y+24, r21	; 0x18
    56dc:	69 8f       	std	Y+25, r22	; 0x19
    56de:	7a 8f       	std	Y+26, r23	; 0x1a
    56e0:	9e 01       	movw	r18, r28
    56e2:	2d 5e       	subi	r18, 0xED	; 237
    56e4:	3f 4f       	sbci	r19, 0xFF	; 255
    56e6:	c8 01       	movw	r24, r16
    56e8:	9e d4       	rcall	.+2364   	; 0x6026 <_ZNK8SdVolume9chainSizeEmPm>
    56ea:	88 23       	and	r24, r24
    56ec:	71 f2       	breq	.-100    	; 0x568a <_ZN6SdFile8openRootEP8SdVolume+0x10>
    56ee:	1c 8f       	std	Y+28, r17	; 0x1c
    56f0:	0b 8f       	std	Y+27, r16	; 0x1b
    56f2:	81 e0       	ldi	r24, 0x01	; 1
    56f4:	8c 83       	std	Y+4, r24	; 0x04
    56f6:	1e 82       	std	Y+6, r1	; 0x06
    56f8:	1f 82       	std	Y+7, r1	; 0x07
    56fa:	18 86       	std	Y+8, r1	; 0x08
    56fc:	19 86       	std	Y+9, r1	; 0x09
    56fe:	1a 86       	std	Y+10, r1	; 0x0a
    5700:	1b 86       	std	Y+11, r1	; 0x0b
    5702:	1c 86       	std	Y+12, r1	; 0x0c
    5704:	1d 86       	std	Y+13, r1	; 0x0d
    5706:	1e 86       	std	Y+14, r1	; 0x0e
    5708:	1f 86       	std	Y+15, r1	; 0x0f
    570a:	18 8a       	std	Y+16, r1	; 0x10
    570c:	19 8a       	std	Y+17, r1	; 0x11
    570e:	1a 8a       	std	Y+18, r1	; 0x12
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	1f 91       	pop	r17
    5716:	0f 91       	pop	r16
    5718:	08 95       	ret

0000571a <_ZN6SdFile4readEPvj>:
    571a:	2f 92       	push	r2
    571c:	3f 92       	push	r3
    571e:	4f 92       	push	r4
    5720:	5f 92       	push	r5
    5722:	6f 92       	push	r6
    5724:	7f 92       	push	r7
    5726:	8f 92       	push	r8
    5728:	9f 92       	push	r9
    572a:	af 92       	push	r10
    572c:	bf 92       	push	r11
    572e:	cf 92       	push	r12
    5730:	df 92       	push	r13
    5732:	ef 92       	push	r14
    5734:	ff 92       	push	r15
    5736:	0f 93       	push	r16
    5738:	1f 93       	push	r17
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	ec 01       	movw	r28, r24
    5740:	5b 01       	movw	r10, r22
    5742:	4a 01       	movw	r8, r20
    5744:	8d 81       	ldd	r24, Y+5	; 0x05
    5746:	81 11       	cpse	r24, r1
    5748:	03 c0       	rjmp	.+6      	; 0x5750 <_ZN6SdFile4readEPvj+0x36>
    574a:	8f ef       	ldi	r24, 0xFF	; 255
    574c:	9f ef       	ldi	r25, 0xFF	; 255
    574e:	d4 c0       	rjmp	.+424    	; 0x58f8 <_ZN6SdFile4readEPvj+0x1de>
    5750:	8c 81       	ldd	r24, Y+4	; 0x04
    5752:	80 ff       	sbrs	r24, 0
    5754:	fa cf       	rjmp	.-12     	; 0x574a <_ZN6SdFile4readEPvj+0x30>
    5756:	4b 88       	ldd	r4, Y+19	; 0x13
    5758:	5c 88       	ldd	r5, Y+20	; 0x14
    575a:	6d 88       	ldd	r6, Y+21	; 0x15
    575c:	7e 88       	ldd	r7, Y+22	; 0x16
    575e:	4a 85       	ldd	r20, Y+10	; 0x0a
    5760:	5b 85       	ldd	r21, Y+11	; 0x0b
    5762:	6c 85       	ldd	r22, Y+12	; 0x0c
    5764:	7d 85       	ldd	r23, Y+13	; 0x0d
    5766:	c4 01       	movw	r24, r8
    5768:	a0 e0       	ldi	r26, 0x00	; 0
    576a:	b0 e0       	ldi	r27, 0x00	; 0
    576c:	93 01       	movw	r18, r6
    576e:	82 01       	movw	r16, r4
    5770:	04 1b       	sub	r16, r20
    5772:	15 0b       	sbc	r17, r21
    5774:	26 0b       	sbc	r18, r22
    5776:	37 0b       	sbc	r19, r23
    5778:	08 17       	cp	r16, r24
    577a:	19 07       	cpc	r17, r25
    577c:	2a 07       	cpc	r18, r26
    577e:	3b 07       	cpc	r19, r27
    5780:	18 f4       	brcc	.+6      	; 0x5788 <_ZN6SdFile4readEPvj+0x6e>
    5782:	42 01       	movw	r8, r4
    5784:	84 1a       	sub	r8, r20
    5786:	95 0a       	sbc	r9, r21
    5788:	24 01       	movw	r4, r8
    578a:	1e 01       	movw	r2, r28
    578c:	26 e0       	ldi	r18, 0x06	; 6
    578e:	22 0e       	add	r2, r18
    5790:	31 1c       	adc	r3, r1
    5792:	41 14       	cp	r4, r1
    5794:	51 04       	cpc	r5, r1
    5796:	09 f4       	brne	.+2      	; 0x579a <_ZN6SdFile4readEPvj+0x80>
    5798:	7d c0       	rjmp	.+250    	; 0x5894 <_ZN6SdFile4readEPvj+0x17a>
    579a:	4a 85       	ldd	r20, Y+10	; 0x0a
    579c:	5b 85       	ldd	r21, Y+11	; 0x0b
    579e:	6c 85       	ldd	r22, Y+12	; 0x0c
    57a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    57a2:	6a 01       	movw	r12, r20
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	d8 22       	and	r13, r24
    57a8:	ed 81       	ldd	r30, Y+5	; 0x05
    57aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57ae:	8a 01       	movw	r16, r20
    57b0:	9b 01       	movw	r18, r22
    57b2:	f9 e0       	ldi	r31, 0x09	; 9
    57b4:	36 95       	lsr	r19
    57b6:	27 95       	ror	r18
    57b8:	17 95       	ror	r17
    57ba:	07 95       	ror	r16
    57bc:	fa 95       	dec	r31
    57be:	d1 f7       	brne	.-12     	; 0x57b4 <_ZN6SdFile4readEPvj+0x9a>
    57c0:	e2 30       	cpi	r30, 0x02	; 2
    57c2:	61 f4       	brne	.+24     	; 0x57dc <_ZN6SdFile4readEPvj+0xc2>
    57c4:	fc 01       	movw	r30, r24
    57c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    57c8:	93 8d       	ldd	r25, Z+27	; 0x1b
    57ca:	a4 8d       	ldd	r26, Z+28	; 0x1c
    57cc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    57ce:	bc 01       	movw	r22, r24
    57d0:	cd 01       	movw	r24, r26
    57d2:	60 0f       	add	r22, r16
    57d4:	71 1f       	adc	r23, r17
    57d6:	82 1f       	adc	r24, r18
    57d8:	93 1f       	adc	r25, r19
    57da:	3e c0       	rjmp	.+124    	; 0x5858 <_ZN6SdFile4readEPvj+0x13e>
    57dc:	fc 01       	movw	r30, r24
    57de:	74 80       	ldd	r7, Z+4	; 0x04
    57e0:	7a 94       	dec	r7
    57e2:	70 22       	and	r7, r16
    57e4:	c1 14       	cp	r12, r1
    57e6:	d1 04       	cpc	r13, r1
    57e8:	c1 f4       	brne	.+48     	; 0x581a <_ZN6SdFile4readEPvj+0x100>
    57ea:	71 10       	cpse	r7, r1
    57ec:	16 c0       	rjmp	.+44     	; 0x581a <_ZN6SdFile4readEPvj+0x100>
    57ee:	45 2b       	or	r20, r21
    57f0:	46 2b       	or	r20, r22
    57f2:	47 2b       	or	r20, r23
    57f4:	49 f4       	brne	.+18     	; 0x5808 <_ZN6SdFile4readEPvj+0xee>
    57f6:	8f 89       	ldd	r24, Y+23	; 0x17
    57f8:	98 8d       	ldd	r25, Y+24	; 0x18
    57fa:	a9 8d       	ldd	r26, Y+25	; 0x19
    57fc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    57fe:	8e 83       	std	Y+6, r24	; 0x06
    5800:	9f 83       	std	Y+7, r25	; 0x07
    5802:	a8 87       	std	Y+8, r26	; 0x08
    5804:	b9 87       	std	Y+9, r27	; 0x09
    5806:	09 c0       	rjmp	.+18     	; 0x581a <_ZN6SdFile4readEPvj+0x100>
    5808:	4e 81       	ldd	r20, Y+6	; 0x06
    580a:	5f 81       	ldd	r21, Y+7	; 0x07
    580c:	68 85       	ldd	r22, Y+8	; 0x08
    580e:	79 85       	ldd	r23, Y+9	; 0x09
    5810:	91 01       	movw	r18, r2
    5812:	87 d3       	rcall	.+1806   	; 0x5f22 <_ZNK8SdVolume6fatGetEmPm>
    5814:	88 23       	and	r24, r24
    5816:	09 f4       	brne	.+2      	; 0x581a <_ZN6SdFile4readEPvj+0x100>
    5818:	98 cf       	rjmp	.-208    	; 0x574a <_ZN6SdFile4readEPvj+0x30>
    581a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    581c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    581e:	8e 81       	ldd	r24, Y+6	; 0x06
    5820:	9f 81       	ldd	r25, Y+7	; 0x07
    5822:	a8 85       	ldd	r26, Y+8	; 0x08
    5824:	b9 85       	ldd	r27, Y+9	; 0x09
    5826:	02 97       	sbiw	r24, 0x02	; 2
    5828:	a1 09       	sbc	r26, r1
    582a:	b1 09       	sbc	r27, r1
    582c:	05 84       	ldd	r0, Z+13	; 0x0d
    582e:	04 c0       	rjmp	.+8      	; 0x5838 <_ZN6SdFile4readEPvj+0x11e>
    5830:	88 0f       	add	r24, r24
    5832:	99 1f       	adc	r25, r25
    5834:	aa 1f       	adc	r26, r26
    5836:	bb 1f       	adc	r27, r27
    5838:	0a 94       	dec	r0
    583a:	d2 f7       	brpl	.-12     	; 0x5830 <_ZN6SdFile4readEPvj+0x116>
    583c:	46 85       	ldd	r20, Z+14	; 0x0e
    583e:	57 85       	ldd	r21, Z+15	; 0x0f
    5840:	60 89       	ldd	r22, Z+16	; 0x10
    5842:	71 89       	ldd	r23, Z+17	; 0x11
    5844:	84 0f       	add	r24, r20
    5846:	95 1f       	adc	r25, r21
    5848:	a6 1f       	adc	r26, r22
    584a:	b7 1f       	adc	r27, r23
    584c:	bc 01       	movw	r22, r24
    584e:	cd 01       	movw	r24, r26
    5850:	67 0d       	add	r22, r7
    5852:	71 1d       	adc	r23, r1
    5854:	81 1d       	adc	r24, r1
    5856:	91 1d       	adc	r25, r1
    5858:	20 e0       	ldi	r18, 0x00	; 0
    585a:	32 e0       	ldi	r19, 0x02	; 2
    585c:	2c 19       	sub	r18, r12
    585e:	3d 09       	sbc	r19, r13
    5860:	32 01       	movw	r6, r4
    5862:	24 15       	cp	r18, r4
    5864:	35 05       	cpc	r19, r5
    5866:	08 f4       	brcc	.+2      	; 0x586a <_ZN6SdFile4readEPvj+0x150>
    5868:	39 01       	movw	r6, r18
    586a:	2c 81       	ldd	r18, Y+4	; 0x04
    586c:	26 fd       	sbrc	r18, 6
    586e:	04 c0       	rjmp	.+8      	; 0x5878 <_ZN6SdFile4readEPvj+0x15e>
    5870:	61 14       	cp	r6, r1
    5872:	f2 e0       	ldi	r31, 0x02	; 2
    5874:	7f 06       	cpc	r7, r31
    5876:	71 f5       	brne	.+92     	; 0x58d4 <_ZN6SdFile4readEPvj+0x1ba>
    5878:	00 91 17 02 	lds	r16, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    587c:	10 91 18 02 	lds	r17, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5880:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5884:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5888:	60 17       	cp	r22, r16
    588a:	71 07       	cpc	r23, r17
    588c:	82 07       	cpc	r24, r18
    588e:	93 07       	cpc	r25, r19
    5890:	19 f4       	brne	.+6      	; 0x5898 <_ZN6SdFile4readEPvj+0x17e>
    5892:	20 c0       	rjmp	.+64     	; 0x58d4 <_ZN6SdFile4readEPvj+0x1ba>
    5894:	c4 01       	movw	r24, r8
    5896:	30 c0       	rjmp	.+96     	; 0x58f8 <_ZN6SdFile4readEPvj+0x1de>
    5898:	75 01       	movw	r14, r10
    589a:	83 01       	movw	r16, r6
    589c:	96 01       	movw	r18, r12
    589e:	ab 01       	movw	r20, r22
    58a0:	bc 01       	movw	r22, r24
    58a2:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <_ZN8SdVolume7sdCard_E>
    58a6:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_ZN8SdVolume7sdCard_E+0x1>
    58aa:	14 de       	rcall	.-984    	; 0x54d4 <_ZN7Sd2Card8readDataEmjjPh>
    58ac:	88 23       	and	r24, r24
    58ae:	09 f4       	brne	.+2      	; 0x58b2 <_ZN6SdFile4readEPvj+0x198>
    58b0:	4c cf       	rjmp	.-360    	; 0x574a <_ZN6SdFile4readEPvj+0x30>
    58b2:	a6 0c       	add	r10, r6
    58b4:	b7 1c       	adc	r11, r7
    58b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    58b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    58ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    58bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    58be:	86 0d       	add	r24, r6
    58c0:	97 1d       	adc	r25, r7
    58c2:	a1 1d       	adc	r26, r1
    58c4:	b1 1d       	adc	r27, r1
    58c6:	8a 87       	std	Y+10, r24	; 0x0a
    58c8:	9b 87       	std	Y+11, r25	; 0x0b
    58ca:	ac 87       	std	Y+12, r26	; 0x0c
    58cc:	bd 87       	std	Y+13, r27	; 0x0d
    58ce:	46 18       	sub	r4, r6
    58d0:	57 08       	sbc	r5, r7
    58d2:	5f cf       	rjmp	.-322    	; 0x5792 <_ZN6SdFile4readEPvj+0x78>
    58d4:	40 e0       	ldi	r20, 0x00	; 0
    58d6:	ec d2       	rcall	.+1496   	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    58d8:	88 23       	and	r24, r24
    58da:	09 f4       	brne	.+2      	; 0x58de <_ZN6SdFile4readEPvj+0x1c4>
    58dc:	36 cf       	rjmp	.-404    	; 0x574a <_ZN6SdFile4readEPvj+0x30>
    58de:	f6 01       	movw	r30, r12
    58e0:	e4 51       	subi	r30, 0x14	; 20
    58e2:	f7 4f       	sbci	r31, 0xF7	; 247
    58e4:	d5 01       	movw	r26, r10
    58e6:	cf 01       	movw	r24, r30
    58e8:	86 0d       	add	r24, r6
    58ea:	97 1d       	adc	r25, r7
    58ec:	8e 17       	cp	r24, r30
    58ee:	9f 07       	cpc	r25, r31
    58f0:	01 f3       	breq	.-64     	; 0x58b2 <_ZN6SdFile4readEPvj+0x198>
    58f2:	21 91       	ld	r18, Z+
    58f4:	2d 93       	st	X+, r18
    58f6:	fa cf       	rjmp	.-12     	; 0x58ec <_ZN6SdFile4readEPvj+0x1d2>
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	1f 91       	pop	r17
    58fe:	0f 91       	pop	r16
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	df 90       	pop	r13
    5906:	cf 90       	pop	r12
    5908:	bf 90       	pop	r11
    590a:	af 90       	pop	r10
    590c:	9f 90       	pop	r9
    590e:	8f 90       	pop	r8
    5910:	7f 90       	pop	r7
    5912:	6f 90       	pop	r6
    5914:	5f 90       	pop	r5
    5916:	4f 90       	pop	r4
    5918:	3f 90       	pop	r3
    591a:	2f 90       	pop	r2
    591c:	08 95       	ret

0000591e <_ZN6SdFile7seekSetEm>:
    591e:	8f 92       	push	r8
    5920:	9f 92       	push	r9
    5922:	af 92       	push	r10
    5924:	bf 92       	push	r11
    5926:	cf 92       	push	r12
    5928:	df 92       	push	r13
    592a:	ef 92       	push	r14
    592c:	ff 92       	push	r15
    592e:	0f 93       	push	r16
    5930:	1f 93       	push	r17
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	ec 01       	movw	r28, r24
    5938:	8d 81       	ldd	r24, Y+5	; 0x05
    593a:	81 11       	cpse	r24, r1
    593c:	02 c0       	rjmp	.+4      	; 0x5942 <_ZN6SdFile7seekSetEm+0x24>
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	77 c0       	rjmp	.+238    	; 0x5a30 <_ZN6SdFile7seekSetEm+0x112>
    5942:	0b 89       	ldd	r16, Y+19	; 0x13
    5944:	1c 89       	ldd	r17, Y+20	; 0x14
    5946:	2d 89       	ldd	r18, Y+21	; 0x15
    5948:	3e 89       	ldd	r19, Y+22	; 0x16
    594a:	04 17       	cp	r16, r20
    594c:	15 07       	cpc	r17, r21
    594e:	26 07       	cpc	r18, r22
    5950:	37 07       	cpc	r19, r23
    5952:	a8 f3       	brcs	.-22     	; 0x593e <_ZN6SdFile7seekSetEm+0x20>
    5954:	6a 01       	movw	r12, r20
    5956:	7b 01       	movw	r14, r22
    5958:	82 30       	cpi	r24, 0x02	; 2
    595a:	29 f4       	brne	.+10     	; 0x5966 <_ZN6SdFile7seekSetEm+0x48>
    595c:	ca 86       	std	Y+10, r12	; 0x0a
    595e:	db 86       	std	Y+11, r13	; 0x0b
    5960:	ec 86       	std	Y+12, r14	; 0x0c
    5962:	fd 86       	std	Y+13, r15	; 0x0d
    5964:	0d c0       	rjmp	.+26     	; 0x5980 <_ZN6SdFile7seekSetEm+0x62>
    5966:	c1 14       	cp	r12, r1
    5968:	d1 04       	cpc	r13, r1
    596a:	e1 04       	cpc	r14, r1
    596c:	f1 04       	cpc	r15, r1
    596e:	51 f4       	brne	.+20     	; 0x5984 <_ZN6SdFile7seekSetEm+0x66>
    5970:	1e 82       	std	Y+6, r1	; 0x06
    5972:	1f 82       	std	Y+7, r1	; 0x07
    5974:	18 86       	std	Y+8, r1	; 0x08
    5976:	19 86       	std	Y+9, r1	; 0x09
    5978:	1a 86       	std	Y+10, r1	; 0x0a
    597a:	1b 86       	std	Y+11, r1	; 0x0b
    597c:	1c 86       	std	Y+12, r1	; 0x0c
    597e:	1d 86       	std	Y+13, r1	; 0x0d
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	56 c0       	rjmp	.+172    	; 0x5a30 <_ZN6SdFile7seekSetEm+0x112>
    5984:	8a 84       	ldd	r8, Y+10	; 0x0a
    5986:	9b 84       	ldd	r9, Y+11	; 0x0b
    5988:	ac 84       	ldd	r10, Y+12	; 0x0c
    598a:	bd 84       	ldd	r11, Y+13	; 0x0d
    598c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    598e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5990:	25 85       	ldd	r18, Z+13	; 0x0d
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	27 5f       	subi	r18, 0xF7	; 247
    5996:	3f 4f       	sbci	r19, 0xFF	; 255
    5998:	b5 01       	movw	r22, r10
    599a:	a4 01       	movw	r20, r8
    599c:	41 50       	subi	r20, 0x01	; 1
    599e:	51 09       	sbc	r21, r1
    59a0:	61 09       	sbc	r22, r1
    59a2:	71 09       	sbc	r23, r1
    59a4:	02 2e       	mov	r0, r18
    59a6:	04 c0       	rjmp	.+8      	; 0x59b0 <_ZN6SdFile7seekSetEm+0x92>
    59a8:	76 95       	lsr	r23
    59aa:	67 95       	ror	r22
    59ac:	57 95       	ror	r21
    59ae:	47 95       	ror	r20
    59b0:	0a 94       	dec	r0
    59b2:	d2 f7       	brpl	.-12     	; 0x59a8 <_ZN6SdFile7seekSetEm+0x8a>
    59b4:	d7 01       	movw	r26, r14
    59b6:	c6 01       	movw	r24, r12
    59b8:	01 97       	sbiw	r24, 0x01	; 1
    59ba:	a1 09       	sbc	r26, r1
    59bc:	b1 09       	sbc	r27, r1
    59be:	04 c0       	rjmp	.+8      	; 0x59c8 <_ZN6SdFile7seekSetEm+0xaa>
    59c0:	b6 95       	lsr	r27
    59c2:	a7 95       	ror	r26
    59c4:	97 95       	ror	r25
    59c6:	87 95       	ror	r24
    59c8:	2a 95       	dec	r18
    59ca:	d2 f7       	brpl	.-12     	; 0x59c0 <_ZN6SdFile7seekSetEm+0xa2>
    59cc:	84 17       	cp	r24, r20
    59ce:	95 07       	cpc	r25, r21
    59d0:	a6 07       	cpc	r26, r22
    59d2:	b7 07       	cpc	r27, r23
    59d4:	20 f0       	brcs	.+8      	; 0x59de <_ZN6SdFile7seekSetEm+0xc0>
    59d6:	89 28       	or	r8, r9
    59d8:	8a 28       	or	r8, r10
    59da:	8b 28       	or	r8, r11
    59dc:	71 f4       	brne	.+28     	; 0x59fa <_ZN6SdFile7seekSetEm+0xdc>
    59de:	4f 89       	ldd	r20, Y+23	; 0x17
    59e0:	58 8d       	ldd	r21, Y+24	; 0x18
    59e2:	69 8d       	ldd	r22, Y+25	; 0x19
    59e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59e6:	4e 83       	std	Y+6, r20	; 0x06
    59e8:	5f 83       	std	Y+7, r21	; 0x07
    59ea:	68 87       	std	Y+8, r22	; 0x08
    59ec:	79 87       	std	Y+9, r23	; 0x09
    59ee:	4c 01       	movw	r8, r24
    59f0:	5d 01       	movw	r10, r26
    59f2:	8e 01       	movw	r16, r28
    59f4:	0a 5f       	subi	r16, 0xFA	; 250
    59f6:	1f 4f       	sbci	r17, 0xFF	; 255
    59f8:	15 c0       	rjmp	.+42     	; 0x5a24 <_ZN6SdFile7seekSetEm+0x106>
    59fa:	84 1b       	sub	r24, r20
    59fc:	95 0b       	sbc	r25, r21
    59fe:	a6 0b       	sbc	r26, r22
    5a00:	b7 0b       	sbc	r27, r23
    5a02:	f5 cf       	rjmp	.-22     	; 0x59ee <_ZN6SdFile7seekSetEm+0xd0>
    5a04:	4e 81       	ldd	r20, Y+6	; 0x06
    5a06:	5f 81       	ldd	r21, Y+7	; 0x07
    5a08:	68 85       	ldd	r22, Y+8	; 0x08
    5a0a:	79 85       	ldd	r23, Y+9	; 0x09
    5a0c:	98 01       	movw	r18, r16
    5a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a12:	87 d2       	rcall	.+1294   	; 0x5f22 <_ZNK8SdVolume6fatGetEmPm>
    5a14:	91 e0       	ldi	r25, 0x01	; 1
    5a16:	89 1a       	sub	r8, r25
    5a18:	91 08       	sbc	r9, r1
    5a1a:	a1 08       	sbc	r10, r1
    5a1c:	b1 08       	sbc	r11, r1
    5a1e:	88 23       	and	r24, r24
    5a20:	09 f4       	brne	.+2      	; 0x5a24 <_ZN6SdFile7seekSetEm+0x106>
    5a22:	8d cf       	rjmp	.-230    	; 0x593e <_ZN6SdFile7seekSetEm+0x20>
    5a24:	81 14       	cp	r8, r1
    5a26:	91 04       	cpc	r9, r1
    5a28:	a1 04       	cpc	r10, r1
    5a2a:	b1 04       	cpc	r11, r1
    5a2c:	59 f7       	brne	.-42     	; 0x5a04 <_ZN6SdFile7seekSetEm+0xe6>
    5a2e:	96 cf       	rjmp	.-212    	; 0x595c <_ZN6SdFile7seekSetEm+0x3e>
    5a30:	df 91       	pop	r29
    5a32:	cf 91       	pop	r28
    5a34:	1f 91       	pop	r17
    5a36:	0f 91       	pop	r16
    5a38:	ff 90       	pop	r15
    5a3a:	ef 90       	pop	r14
    5a3c:	df 90       	pop	r13
    5a3e:	cf 90       	pop	r12
    5a40:	bf 90       	pop	r11
    5a42:	af 90       	pop	r10
    5a44:	9f 90       	pop	r9
    5a46:	8f 90       	pop	r8
    5a48:	08 95       	ret

00005a4a <_ZN6SdFile4syncEv>:
    5a4a:	0f 93       	push	r16
    5a4c:	1f 93       	push	r17
    5a4e:	cf 93       	push	r28
    5a50:	df 93       	push	r29
    5a52:	ec 01       	movw	r28, r24
    5a54:	8d 81       	ldd	r24, Y+5	; 0x05
    5a56:	88 23       	and	r24, r24
    5a58:	b9 f1       	breq	.+110    	; 0x5ac8 <_ZN6SdFile4syncEv+0x7e>
    5a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a5c:	87 ff       	sbrs	r24, 7
    5a5e:	2f c0       	rjmp	.+94     	; 0x5abe <_ZN6SdFile4syncEv+0x74>
    5a60:	61 e0       	ldi	r22, 0x01	; 1
    5a62:	ce 01       	movw	r24, r28
    5a64:	f2 dd       	rcall	.-1052   	; 0x564a <_ZN6SdFile13cacheDirEntryEh>
    5a66:	8c 01       	movw	r16, r24
    5a68:	89 2b       	or	r24, r25
    5a6a:	71 f1       	breq	.+92     	; 0x5ac8 <_ZN6SdFile4syncEv+0x7e>
    5a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a6e:	82 30       	cpi	r24, 0x02	; 2
    5a70:	48 f4       	brcc	.+18     	; 0x5a84 <_ZN6SdFile4syncEv+0x3a>
    5a72:	8b 89       	ldd	r24, Y+19	; 0x13
    5a74:	9c 89       	ldd	r25, Y+20	; 0x14
    5a76:	ad 89       	ldd	r26, Y+21	; 0x15
    5a78:	be 89       	ldd	r27, Y+22	; 0x16
    5a7a:	f8 01       	movw	r30, r16
    5a7c:	84 8f       	std	Z+28, r24	; 0x1c
    5a7e:	95 8f       	std	Z+29, r25	; 0x1d
    5a80:	a6 8f       	std	Z+30, r26	; 0x1e
    5a82:	b7 8f       	std	Z+31, r27	; 0x1f
    5a84:	8f 89       	ldd	r24, Y+23	; 0x17
    5a86:	98 8d       	ldd	r25, Y+24	; 0x18
    5a88:	a9 8d       	ldd	r26, Y+25	; 0x19
    5a8a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5a8c:	f8 01       	movw	r30, r16
    5a8e:	93 8f       	std	Z+27, r25	; 0x1b
    5a90:	82 8f       	std	Z+26, r24	; 0x1a
    5a92:	b5 8b       	std	Z+21, r27	; 0x15
    5a94:	a4 8b       	std	Z+20, r26	; 0x14
    5a96:	e0 91 e3 08 	lds	r30, 0x08E3	; 0x8008e3 <_ZN6SdFile9dateTime_E>
    5a9a:	f0 91 e4 08 	lds	r31, 0x08E4	; 0x8008e4 <_ZN6SdFile9dateTime_E+0x1>
    5a9e:	30 97       	sbiw	r30, 0x00	; 0
    5aa0:	59 f0       	breq	.+22     	; 0x5ab8 <_ZN6SdFile4syncEv+0x6e>
    5aa2:	b8 01       	movw	r22, r16
    5aa4:	6a 5e       	subi	r22, 0xEA	; 234
    5aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa8:	c8 01       	movw	r24, r16
    5aaa:	48 96       	adiw	r24, 0x18	; 24
    5aac:	19 95       	eicall
    5aae:	f8 01       	movw	r30, r16
    5ab0:	80 8d       	ldd	r24, Z+24	; 0x18
    5ab2:	91 8d       	ldd	r25, Z+25	; 0x19
    5ab4:	93 8b       	std	Z+19, r25	; 0x13
    5ab6:	82 8b       	std	Z+18, r24	; 0x12
    5ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    5aba:	8f 77       	andi	r24, 0x7F	; 127
    5abc:	8c 83       	std	Y+4, r24	; 0x04
    5abe:	df 91       	pop	r29
    5ac0:	cf 91       	pop	r28
    5ac2:	1f 91       	pop	r17
    5ac4:	0f 91       	pop	r16
    5ac6:	bb c1       	rjmp	.+886    	; 0x5e3e <_ZN8SdVolume10cacheFlushEv>
    5ac8:	80 e0       	ldi	r24, 0x00	; 0
    5aca:	df 91       	pop	r29
    5acc:	cf 91       	pop	r28
    5ace:	1f 91       	pop	r17
    5ad0:	0f 91       	pop	r16
    5ad2:	08 95       	ret

00005ad4 <_ZN6SdFile5closeEv>:
    5ad4:	cf 93       	push	r28
    5ad6:	df 93       	push	r29
    5ad8:	ec 01       	movw	r28, r24
    5ada:	b7 df       	rcall	.-146    	; 0x5a4a <_ZN6SdFile4syncEv>
    5adc:	88 23       	and	r24, r24
    5ade:	11 f0       	breq	.+4      	; 0x5ae4 <_ZN6SdFile5closeEv+0x10>
    5ae0:	1d 82       	std	Y+5, r1	; 0x05
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	08 95       	ret

00005aea <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    5aea:	2f 92       	push	r2
    5aec:	3f 92       	push	r3
    5aee:	4f 92       	push	r4
    5af0:	5f 92       	push	r5
    5af2:	6f 92       	push	r6
    5af4:	7f 92       	push	r7
    5af6:	8f 92       	push	r8
    5af8:	9f 92       	push	r9
    5afa:	af 92       	push	r10
    5afc:	bf 92       	push	r11
    5afe:	cf 92       	push	r12
    5b00:	df 92       	push	r13
    5b02:	ef 92       	push	r14
    5b04:	ff 92       	push	r15
    5b06:	0f 93       	push	r16
    5b08:	1f 93       	push	r17
    5b0a:	cf 93       	push	r28
    5b0c:	df 93       	push	r29
    5b0e:	00 d0       	rcall	.+0      	; 0x5b10 <_ZN6SdFile5writeEPKvj+0x26>
    5b10:	1f 92       	push	r1
    5b12:	cd b7       	in	r28, 0x3d	; 61
    5b14:	de b7       	in	r29, 0x3e	; 62
    5b16:	8c 01       	movw	r16, r24
    5b18:	6b 01       	movw	r12, r22
    5b1a:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	15 96       	adiw	r26, 0x05	; 5
    5b20:	8c 91       	ld	r24, X
    5b22:	15 97       	sbiw	r26, 0x05	; 5
    5b24:	81 30       	cpi	r24, 0x01	; 1
    5b26:	c1 f4       	brne	.+48     	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>
    5b28:	14 96       	adiw	r26, 0x04	; 4
    5b2a:	8c 91       	ld	r24, X
    5b2c:	81 ff       	sbrs	r24, 1
    5b2e:	14 c0       	rjmp	.+40     	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    5b30:	82 ff       	sbrs	r24, 2
    5b32:	1c c0       	rjmp	.+56     	; 0x5b6c <_ZN6SdFile5writeEPKvj+0x82>
    5b34:	f8 01       	movw	r30, r16
    5b36:	43 89       	ldd	r20, Z+19	; 0x13
    5b38:	54 89       	ldd	r21, Z+20	; 0x14
    5b3a:	65 89       	ldd	r22, Z+21	; 0x15
    5b3c:	76 89       	ldd	r23, Z+22	; 0x16
    5b3e:	82 85       	ldd	r24, Z+10	; 0x0a
    5b40:	93 85       	ldd	r25, Z+11	; 0x0b
    5b42:	a4 85       	ldd	r26, Z+12	; 0x0c
    5b44:	b5 85       	ldd	r27, Z+13	; 0x0d
    5b46:	84 17       	cp	r24, r20
    5b48:	95 07       	cpc	r25, r21
    5b4a:	a6 07       	cpc	r26, r22
    5b4c:	b7 07       	cpc	r27, r23
    5b4e:	71 f0       	breq	.+28     	; 0x5b6c <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    5b50:	c8 01       	movw	r24, r16
    5b52:	e5 de       	rcall	.-566    	; 0x591e <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    5b54:	81 11       	cpse	r24, r1
    5b56:	0a c0       	rjmp	.+20     	; 0x5b6c <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    5b58:	81 e0       	ldi	r24, 0x01	; 1
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	d8 01       	movw	r26, r16
    5b5e:	13 96       	adiw	r26, 0x03	; 3
    5b60:	9c 93       	st	X, r25
    5b62:	8e 93       	st	-X, r24
    5b64:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	42 c1       	rjmp	.+644    	; 0x5df0 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    5b6c:	41 01       	movw	r8, r2
    5b6e:	82 c0       	rjmp	.+260    	; 0x5c74 <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    5b70:	5b 96       	adiw	r26, 0x1b	; 27
    5b72:	8d 91       	ld	r24, X+
    5b74:	9c 91       	ld	r25, X
    5b76:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    5b78:	fc 01       	movw	r30, r24
    5b7a:	74 80       	ldd	r7, Z+4	; 0x04
    5b7c:	2f ef       	ldi	r18, 0xFF	; 255
    5b7e:	27 0d       	add	r18, r7
    5b80:	2a 01       	movw	r4, r20
    5b82:	3b 01       	movw	r6, r22
    5b84:	39 e0       	ldi	r19, 0x09	; 9
    5b86:	76 94       	lsr	r7
    5b88:	67 94       	ror	r6
    5b8a:	57 94       	ror	r5
    5b8c:	47 94       	ror	r4
    5b8e:	3a 95       	dec	r19
    5b90:	d1 f7       	brne	.-12     	; 0x5b86 <_ZN6SdFile5writeEPKvj+0x9c>
    5b92:	72 2e       	mov	r7, r18
    5b94:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    5b96:	7a 01       	movw	r14, r20
    5b98:	f1 e0       	ldi	r31, 0x01	; 1
    5b9a:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    5b9c:	77 20       	and	r7, r7
    5b9e:	09 f4       	brne	.+2      	; 0x5ba2 <_ZN6SdFile5writeEPKvj+0xb8>
    5ba0:	75 c0       	rjmp	.+234    	; 0x5c8c <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
    5ba4:	92 e0       	ldi	r25, 0x02	; 2
    5ba6:	8e 19       	sub	r24, r14
    5ba8:	9f 09       	sbc	r25, r15
    5baa:	54 01       	movw	r10, r8
    5bac:	88 15       	cp	r24, r8
    5bae:	99 05       	cpc	r25, r9
    5bb0:	08 f4       	brcc	.+2      	; 0x5bb4 <_ZN6SdFile5writeEPKvj+0xca>
    5bb2:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    5bb4:	d8 01       	movw	r26, r16
    5bb6:	5b 96       	adiw	r26, 0x1b	; 27
    5bb8:	2d 91       	ld	r18, X+
    5bba:	3c 91       	ld	r19, X
    5bbc:	5c 97       	sbiw	r26, 0x1c	; 28
    5bbe:	16 96       	adiw	r26, 0x06	; 6
    5bc0:	8d 91       	ld	r24, X+
    5bc2:	9d 91       	ld	r25, X+
    5bc4:	0d 90       	ld	r0, X+
    5bc6:	bc 91       	ld	r27, X
    5bc8:	a0 2d       	mov	r26, r0
    5bca:	02 97       	sbiw	r24, 0x02	; 2
    5bcc:	a1 09       	sbc	r26, r1
    5bce:	b1 09       	sbc	r27, r1
    5bd0:	f9 01       	movw	r30, r18
    5bd2:	05 84       	ldd	r0, Z+13	; 0x0d
    5bd4:	04 c0       	rjmp	.+8      	; 0x5bde <_ZN6SdFile5writeEPKvj+0xf4>
    5bd6:	88 0f       	add	r24, r24
    5bd8:	99 1f       	adc	r25, r25
    5bda:	aa 1f       	adc	r26, r26
    5bdc:	bb 1f       	adc	r27, r27
    5bde:	0a 94       	dec	r0
    5be0:	d2 f7       	brpl	.-12     	; 0x5bd6 <_ZN6SdFile5writeEPKvj+0xec>
    5be2:	46 85       	ldd	r20, Z+14	; 0x0e
    5be4:	57 85       	ldd	r21, Z+15	; 0x0f
    5be6:	60 89       	ldd	r22, Z+16	; 0x10
    5be8:	71 89       	ldd	r23, Z+17	; 0x11
    5bea:	84 0f       	add	r24, r20
    5bec:	95 1f       	adc	r25, r21
    5bee:	a6 1f       	adc	r26, r22
    5bf0:	b7 1f       	adc	r27, r23
    5bf2:	9c 01       	movw	r18, r24
    5bf4:	ad 01       	movw	r20, r26
    5bf6:	27 0d       	add	r18, r7
    5bf8:	31 1d       	adc	r19, r1
    5bfa:	41 1d       	adc	r20, r1
    5bfc:	51 1d       	adc	r21, r1
    5bfe:	29 01       	movw	r4, r18
    5c00:	3a 01       	movw	r6, r20
    if (n == 512) {
    5c02:	a1 14       	cp	r10, r1
    5c04:	32 e0       	ldi	r19, 0x02	; 2
    5c06:	b3 06       	cpc	r11, r19
    5c08:	09 f0       	breq	.+2      	; 0x5c0c <_ZN6SdFile5writeEPKvj+0x122>
    5c0a:	85 c0       	rjmp	.+266    	; 0x5d16 <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    5c0c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5c10:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5c14:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5c18:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5c1c:	48 16       	cp	r4, r24
    5c1e:	59 06       	cpc	r5, r25
    5c20:	6a 06       	cpc	r6, r26
    5c22:	7b 06       	cpc	r7, r27
    5c24:	59 f4       	brne	.+22     	; 0x5c3c <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    5c26:	8f ef       	ldi	r24, 0xFF	; 255
    5c28:	9f ef       	ldi	r25, 0xFF	; 255
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5c30:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5c34:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5c38:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    5c3c:	96 01       	movw	r18, r12
    5c3e:	b3 01       	movw	r22, r6
    5c40:	a2 01       	movw	r20, r4
    5c42:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <_ZN8SdVolume7sdCard_E>
    5c46:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_ZN8SdVolume7sdCard_E+0x1>
    5c4a:	8c dc       	rcall	.-1768   	; 0x5564 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    5c4c:	88 23       	and	r24, r24
    5c4e:	09 f4       	brne	.+2      	; 0x5c52 <_ZN6SdFile5writeEPKvj+0x168>
    5c50:	83 cf       	rjmp	.-250    	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    5c52:	9e ef       	ldi	r25, 0xFE	; 254
    5c54:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    5c56:	8a 18       	sub	r8, r10
    5c58:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    5c5a:	f8 01       	movw	r30, r16
    5c5c:	82 85       	ldd	r24, Z+10	; 0x0a
    5c5e:	93 85       	ldd	r25, Z+11	; 0x0b
    5c60:	a4 85       	ldd	r26, Z+12	; 0x0c
    5c62:	b5 85       	ldd	r27, Z+13	; 0x0d
    5c64:	8a 0d       	add	r24, r10
    5c66:	9b 1d       	adc	r25, r11
    5c68:	a1 1d       	adc	r26, r1
    5c6a:	b1 1d       	adc	r27, r1
    5c6c:	82 87       	std	Z+10, r24	; 0x0a
    5c6e:	93 87       	std	Z+11, r25	; 0x0b
    5c70:	a4 87       	std	Z+12, r26	; 0x0c
    5c72:	b5 87       	std	Z+13, r27	; 0x0d
    5c74:	d8 01       	movw	r26, r16
    5c76:	1a 96       	adiw	r26, 0x0a	; 10
    5c78:	4d 91       	ld	r20, X+
    5c7a:	5d 91       	ld	r21, X+
    5c7c:	6d 91       	ld	r22, X+
    5c7e:	7c 91       	ld	r23, X
    5c80:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    5c82:	81 14       	cp	r8, r1
    5c84:	91 04       	cpc	r9, r1
    5c86:	09 f0       	breq	.+2      	; 0x5c8a <_ZN6SdFile5writeEPKvj+0x1a0>
    5c88:	73 cf       	rjmp	.-282    	; 0x5b70 <_ZN6SdFile5writeEPKvj+0x86>
    5c8a:	83 c0       	rjmp	.+262    	; 0x5d92 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    5c8c:	e1 14       	cp	r14, r1
    5c8e:	f1 04       	cpc	r15, r1
    5c90:	09 f0       	breq	.+2      	; 0x5c94 <_ZN6SdFile5writeEPKvj+0x1aa>
    5c92:	87 cf       	rjmp	.-242    	; 0x5ba2 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    5c94:	16 96       	adiw	r26, 0x06	; 6
    5c96:	4d 91       	ld	r20, X+
    5c98:	5d 91       	ld	r21, X+
    5c9a:	6d 91       	ld	r22, X+
    5c9c:	7c 91       	ld	r23, X
    5c9e:	19 97       	sbiw	r26, 0x09	; 9
    5ca0:	41 15       	cp	r20, r1
    5ca2:	51 05       	cpc	r21, r1
    5ca4:	61 05       	cpc	r22, r1
    5ca6:	71 05       	cpc	r23, r1
    5ca8:	59 f4       	brne	.+22     	; 0x5cc0 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    5caa:	57 96       	adiw	r26, 0x17	; 23
    5cac:	8d 91       	ld	r24, X+
    5cae:	9d 91       	ld	r25, X+
    5cb0:	0d 90       	ld	r0, X+
    5cb2:	bc 91       	ld	r27, X
    5cb4:	a0 2d       	mov	r26, r0
    5cb6:	00 97       	sbiw	r24, 0x00	; 0
    5cb8:	a1 05       	cpc	r26, r1
    5cba:	b1 05       	cpc	r27, r1
    5cbc:	31 f5       	brne	.+76     	; 0x5d0a <_ZN6SdFile5writeEPKvj+0x220>
    5cbe:	20 c0       	rjmp	.+64     	; 0x5d00 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    5cc0:	9e 01       	movw	r18, r28
    5cc2:	2f 5f       	subi	r18, 0xFF	; 255
    5cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    5cc6:	2d d1       	rcall	.+602    	; 0x5f22 <_ZNK8SdVolume6fatGetEmPm>
    5cc8:	88 23       	and	r24, r24
    5cca:	09 f4       	brne	.+2      	; 0x5cce <_ZN6SdFile5writeEPKvj+0x1e4>
    5ccc:	4d cf       	rjmp	.-358    	; 0x5b68 <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    5cce:	89 81       	ldd	r24, Y+1	; 0x01
    5cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd2:	ab 81       	ldd	r26, Y+3	; 0x03
    5cd4:	bc 81       	ldd	r27, Y+4	; 0x04
    5cd6:	f8 01       	movw	r30, r16
    5cd8:	23 8d       	ldd	r18, Z+27	; 0x1b
    5cda:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    5cdc:	f9 01       	movw	r30, r18
    5cde:	27 89       	ldd	r18, Z+23	; 0x17
    5ce0:	20 31       	cpi	r18, 0x10	; 16
    5ce2:	29 f0       	breq	.+10     	; 0x5cee <_ZN6SdFile5writeEPKvj+0x204>
    5ce4:	48 ef       	ldi	r20, 0xF8	; 248
    5ce6:	5f ef       	ldi	r21, 0xFF	; 255
    5ce8:	6f ef       	ldi	r22, 0xFF	; 255
    5cea:	7f e0       	ldi	r23, 0x0F	; 15
    5cec:	04 c0       	rjmp	.+8      	; 0x5cf6 <_ZN6SdFile5writeEPKvj+0x20c>
    5cee:	48 ef       	ldi	r20, 0xF8	; 248
    5cf0:	5f ef       	ldi	r21, 0xFF	; 255
    5cf2:	60 e0       	ldi	r22, 0x00	; 0
    5cf4:	70 e0       	ldi	r23, 0x00	; 0
    5cf6:	84 17       	cp	r24, r20
    5cf8:	95 07       	cpc	r25, r21
    5cfa:	a6 07       	cpc	r26, r22
    5cfc:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    5cfe:	28 f0       	brcs	.+10     	; 0x5d0a <_ZN6SdFile5writeEPKvj+0x220>
    5d00:	c8 01       	movw	r24, r16
    5d02:	7d dc       	rcall	.-1798   	; 0x55fe <_ZN6SdFile10addClusterEv>
    5d04:	81 11       	cpse	r24, r1
    5d06:	4d cf       	rjmp	.-358    	; 0x5ba2 <_ZN6SdFile5writeEPKvj+0xb8>
    5d08:	27 cf       	rjmp	.-434    	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    5d0a:	f8 01       	movw	r30, r16
    5d0c:	86 83       	std	Z+6, r24	; 0x06
    5d0e:	97 83       	std	Z+7, r25	; 0x07
    5d10:	a0 87       	std	Z+8, r26	; 0x08
    5d12:	b1 87       	std	Z+9, r27	; 0x09
    5d14:	46 cf       	rjmp	.-372    	; 0x5ba2 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    5d16:	e1 14       	cp	r14, r1
    5d18:	f1 04       	cpc	r15, r1
    5d1a:	21 f5       	brne	.+72     	; 0x5d64 <_ZN6SdFile5writeEPKvj+0x27a>
    5d1c:	d8 01       	movw	r26, r16
    5d1e:	1a 96       	adiw	r26, 0x0a	; 10
    5d20:	4d 91       	ld	r20, X+
    5d22:	5d 91       	ld	r21, X+
    5d24:	6d 91       	ld	r22, X+
    5d26:	7c 91       	ld	r23, X
    5d28:	1d 97       	sbiw	r26, 0x0d	; 13
    5d2a:	53 96       	adiw	r26, 0x13	; 19
    5d2c:	8d 91       	ld	r24, X+
    5d2e:	9d 91       	ld	r25, X+
    5d30:	0d 90       	ld	r0, X+
    5d32:	bc 91       	ld	r27, X
    5d34:	a0 2d       	mov	r26, r0
    5d36:	48 17       	cp	r20, r24
    5d38:	59 07       	cpc	r21, r25
    5d3a:	6a 07       	cpc	r22, r26
    5d3c:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    5d3e:	90 f0       	brcs	.+36     	; 0x5d64 <_ZN6SdFile5writeEPKvj+0x27a>
    5d40:	7e d0       	rcall	.+252    	; 0x5e3e <_ZN8SdVolume10cacheFlushEv>
    5d42:	88 23       	and	r24, r24
    5d44:	09 f4       	brne	.+2      	; 0x5d48 <_ZN6SdFile5writeEPKvj+0x25e>
    5d46:	08 cf       	rjmp	.-496    	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    5d48:	40 92 17 02 	sts	0x0217, r4	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5d4c:	50 92 18 02 	sts	0x0218, r5	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5d50:	60 92 19 02 	sts	0x0219, r6	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5d54:	70 92 1a 02 	sts	0x021A, r7	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    5d58:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    5d5c:	81 60       	ori	r24, 0x01	; 1
    5d5e:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    5d62:	07 c0       	rjmp	.+14     	; 0x5d72 <_ZN6SdFile5writeEPKvj+0x288>
    5d64:	41 e0       	ldi	r20, 0x01	; 1
    5d66:	c3 01       	movw	r24, r6
    5d68:	b2 01       	movw	r22, r4
    5d6a:	a2 d0       	rcall	.+324    	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    5d6c:	88 23       	and	r24, r24
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <_ZN6SdFile5writeEPKvj+0x288>
    5d70:	f3 ce       	rjmp	.-538    	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>
    5d72:	d6 01       	movw	r26, r12
    5d74:	f7 01       	movw	r30, r14
    5d76:	e4 51       	subi	r30, 0x14	; 20
    5d78:	f7 4f       	sbci	r31, 0xF7	; 247
    5d7a:	9f 01       	movw	r18, r30
    5d7c:	2a 0d       	add	r18, r10
    5d7e:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    5d80:	2e 17       	cp	r18, r30
    5d82:	3f 07       	cpc	r19, r31
    5d84:	19 f0       	breq	.+6      	; 0x5d8c <_ZN6SdFile5writeEPKvj+0x2a2>
    5d86:	8d 91       	ld	r24, X+
    5d88:	81 93       	st	Z+, r24
    5d8a:	fa cf       	rjmp	.-12     	; 0x5d80 <_ZN6SdFile5writeEPKvj+0x296>
    5d8c:	ca 0c       	add	r12, r10
    5d8e:	db 1c       	adc	r13, r11
    5d90:	62 cf       	rjmp	.-316    	; 0x5c56 <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    5d92:	d8 01       	movw	r26, r16
    5d94:	53 96       	adiw	r26, 0x13	; 19
    5d96:	cd 90       	ld	r12, X+
    5d98:	dd 90       	ld	r13, X+
    5d9a:	ed 90       	ld	r14, X+
    5d9c:	fc 90       	ld	r15, X
    5d9e:	56 97       	sbiw	r26, 0x16	; 22
    5da0:	14 96       	adiw	r26, 0x04	; 4
    5da2:	8c 91       	ld	r24, X
    5da4:	c4 16       	cp	r12, r20
    5da6:	d5 06       	cpc	r13, r21
    5da8:	e6 06       	cpc	r14, r22
    5daa:	f7 06       	cpc	r15, r23
    5dac:	40 f4       	brcc	.+16     	; 0x5dbe <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    5dae:	f8 01       	movw	r30, r16
    5db0:	43 8b       	std	Z+19, r20	; 0x13
    5db2:	54 8b       	std	Z+20, r21	; 0x14
    5db4:	65 8b       	std	Z+21, r22	; 0x15
    5db6:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    5db8:	80 68       	ori	r24, 0x80	; 128
    5dba:	84 83       	std	Z+4, r24	; 0x04
    5dbc:	0d c0       	rjmp	.+26     	; 0x5dd8 <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    5dbe:	20 91 e3 08 	lds	r18, 0x08E3	; 0x8008e3 <_ZN6SdFile9dateTime_E>
    5dc2:	30 91 e4 08 	lds	r19, 0x08E4	; 0x8008e4 <_ZN6SdFile9dateTime_E+0x1>
    5dc6:	23 2b       	or	r18, r19
    5dc8:	39 f0       	breq	.+14     	; 0x5dd8 <_ZN6SdFile5writeEPKvj+0x2ee>
    5dca:	21 14       	cp	r2, r1
    5dcc:	31 04       	cpc	r3, r1
    5dce:	21 f0       	breq	.+8      	; 0x5dd8 <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    5dd0:	80 68       	ori	r24, 0x80	; 128
    5dd2:	d8 01       	movw	r26, r16
    5dd4:	14 96       	adiw	r26, 0x04	; 4
    5dd6:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    5dd8:	f8 01       	movw	r30, r16
    5dda:	84 81       	ldd	r24, Z+4	; 0x04
    5ddc:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    5dde:	02 c0       	rjmp	.+4      	; 0x5de4 <_ZN6SdFile5writeEPKvj+0x2fa>
    5de0:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    5de2:	06 c0       	rjmp	.+12     	; 0x5df0 <_ZN6SdFile5writeEPKvj+0x306>
    5de4:	c8 01       	movw	r24, r16
    5de6:	31 de       	rcall	.-926    	; 0x5a4a <_ZN6SdFile4syncEv>
    5de8:	88 23       	and	r24, r24
    5dea:	09 f4       	brne	.+2      	; 0x5dee <_ZN6SdFile5writeEPKvj+0x304>
    5dec:	b5 ce       	rjmp	.-662    	; 0x5b58 <_ZN6SdFile5writeEPKvj+0x6e>
    5dee:	f8 cf       	rjmp	.-16     	; 0x5de0 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    5df0:	0f 90       	pop	r0
    5df2:	0f 90       	pop	r0
    5df4:	0f 90       	pop	r0
    5df6:	0f 90       	pop	r0
    5df8:	df 91       	pop	r29
    5dfa:	cf 91       	pop	r28
    5dfc:	1f 91       	pop	r17
    5dfe:	0f 91       	pop	r16
    5e00:	ff 90       	pop	r15
    5e02:	ef 90       	pop	r14
    5e04:	df 90       	pop	r13
    5e06:	cf 90       	pop	r12
    5e08:	bf 90       	pop	r11
    5e0a:	af 90       	pop	r10
    5e0c:	9f 90       	pop	r9
    5e0e:	8f 90       	pop	r8
    5e10:	7f 90       	pop	r7
    5e12:	6f 90       	pop	r6
    5e14:	5f 90       	pop	r5
    5e16:	4f 90       	pop	r4
    5e18:	3f 90       	pop	r3
    5e1a:	2f 90       	pop	r2
    5e1c:	08 95       	ret

00005e1e <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	1f 92       	push	r1
    5e24:	cd b7       	in	r28, 0x3d	; 61
    5e26:	de b7       	in	r29, 0x3e	; 62
    5e28:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    5e2a:	41 e0       	ldi	r20, 0x01	; 1
    5e2c:	50 e0       	ldi	r21, 0x00	; 0
    5e2e:	be 01       	movw	r22, r28
    5e30:	6f 5f       	subi	r22, 0xFF	; 255
    5e32:	7f 4f       	sbci	r23, 0xFF	; 255
    5e34:	5a de       	rcall	.-844    	; 0x5aea <_ZN6SdFile5writeEPKvj>
}
    5e36:	0f 90       	pop	r0
    5e38:	df 91       	pop	r29
    5e3a:	cf 91       	pop	r28
    5e3c:	08 95       	ret

00005e3e <_ZN8SdVolume10cacheFlushEv>:

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    5e3e:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    5e42:	88 23       	and	r24, r24
    5e44:	99 f1       	breq	.+102    	; 0x5eac <_ZN8SdVolume10cacheFlushEv+0x6e>
    5e46:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5e4a:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5e4e:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5e52:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5e56:	2c ee       	ldi	r18, 0xEC	; 236
    5e58:	38 e0       	ldi	r19, 0x08	; 8
    5e5a:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <_ZN8SdVolume7sdCard_E>
    5e5e:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_ZN8SdVolume7sdCard_E+0x1>
    5e62:	80 db       	rcall	.-2304   	; 0x5564 <_ZN7Sd2Card10writeBlockEmPKh>
    5e64:	81 11       	cpse	r24, r1
    5e66:	02 c0       	rjmp	.+4      	; 0x5e6c <_ZN8SdVolume10cacheFlushEv+0x2e>
    5e68:	80 e0       	ldi	r24, 0x00	; 0
    5e6a:	08 95       	ret
    5e6c:	40 91 e5 08 	lds	r20, 0x08E5	; 0x8008e5 <_ZN8SdVolume17cacheMirrorBlock_E>
    5e70:	50 91 e6 08 	lds	r21, 0x08E6	; 0x8008e6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    5e74:	60 91 e7 08 	lds	r22, 0x08E7	; 0x8008e7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    5e78:	70 91 e8 08 	lds	r23, 0x08E8	; 0x8008e8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    5e7c:	41 15       	cp	r20, r1
    5e7e:	51 05       	cpc	r21, r1
    5e80:	61 05       	cpc	r22, r1
    5e82:	71 05       	cpc	r23, r1
    5e84:	89 f0       	breq	.+34     	; 0x5ea8 <_ZN8SdVolume10cacheFlushEv+0x6a>
    5e86:	2c ee       	ldi	r18, 0xEC	; 236
    5e88:	38 e0       	ldi	r19, 0x08	; 8
    5e8a:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <_ZN8SdVolume7sdCard_E>
    5e8e:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_ZN8SdVolume7sdCard_E+0x1>
    5e92:	68 db       	rcall	.-2352   	; 0x5564 <_ZN7Sd2Card10writeBlockEmPKh>
    5e94:	88 23       	and	r24, r24
    5e96:	41 f3       	breq	.-48     	; 0x5e68 <_ZN8SdVolume10cacheFlushEv+0x2a>
    5e98:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <_ZN8SdVolume17cacheMirrorBlock_E>
    5e9c:	10 92 e6 08 	sts	0x08E6, r1	; 0x8008e6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    5ea0:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    5ea4:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    5ea8:	10 92 e9 08 	sts	0x08E9, r1	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    5eac:	81 e0       	ldi	r24, 0x01	; 1
    5eae:	08 95       	ret

00005eb0 <_ZN8SdVolume13cacheRawBlockEmh>:
    5eb0:	cf 92       	push	r12
    5eb2:	df 92       	push	r13
    5eb4:	ef 92       	push	r14
    5eb6:	ff 92       	push	r15
    5eb8:	cf 93       	push	r28
    5eba:	6b 01       	movw	r12, r22
    5ebc:	7c 01       	movw	r14, r24
    5ebe:	c4 2f       	mov	r28, r20
    5ec0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5ec4:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5ec8:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5ecc:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5ed0:	8c 15       	cp	r24, r12
    5ed2:	9d 05       	cpc	r25, r13
    5ed4:	ae 05       	cpc	r26, r14
    5ed6:	bf 05       	cpc	r27, r15
    5ed8:	c1 f0       	breq	.+48     	; 0x5f0a <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    5eda:	b1 df       	rcall	.-158    	; 0x5e3e <_ZN8SdVolume10cacheFlushEv>
    5edc:	81 11       	cpse	r24, r1
    5ede:	02 c0       	rjmp	.+4      	; 0x5ee4 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    5ee0:	80 e0       	ldi	r24, 0x00	; 0
    5ee2:	19 c0       	rjmp	.+50     	; 0x5f16 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    5ee4:	2c ee       	ldi	r18, 0xEC	; 236
    5ee6:	38 e0       	ldi	r19, 0x08	; 8
    5ee8:	b7 01       	movw	r22, r14
    5eea:	a6 01       	movw	r20, r12
    5eec:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <_ZN8SdVolume7sdCard_E>
    5ef0:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_ZN8SdVolume7sdCard_E+0x1>
    5ef4:	fe da       	rcall	.-2564   	; 0x54f2 <_ZN7Sd2Card9readBlockEmPh>
    5ef6:	88 23       	and	r24, r24
    5ef8:	99 f3       	breq	.-26     	; 0x5ee0 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    5efa:	c0 92 17 02 	sts	0x0217, r12	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5efe:	d0 92 18 02 	sts	0x0218, r13	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5f02:	e0 92 19 02 	sts	0x0219, r14	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5f06:	f0 92 1a 02 	sts	0x021A, r15	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5f0a:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    5f0e:	c8 2b       	or	r28, r24
    5f10:	c0 93 e9 08 	sts	0x08E9, r28	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    5f14:	81 e0       	ldi	r24, 0x01	; 1
    5f16:	cf 91       	pop	r28
    5f18:	ff 90       	pop	r15
    5f1a:	ef 90       	pop	r14
    5f1c:	df 90       	pop	r13
    5f1e:	cf 90       	pop	r12
    5f20:	08 95       	ret

00005f22 <_ZNK8SdVolume6fatGetEmPm>:
    5f22:	8f 92       	push	r8
    5f24:	9f 92       	push	r9
    5f26:	af 92       	push	r10
    5f28:	bf 92       	push	r11
    5f2a:	cf 92       	push	r12
    5f2c:	df 92       	push	r13
    5f2e:	ef 92       	push	r14
    5f30:	ff 92       	push	r15
    5f32:	0f 93       	push	r16
    5f34:	1f 93       	push	r17
    5f36:	cf 93       	push	r28
    5f38:	df 93       	push	r29
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	81 85       	ldd	r24, Z+9	; 0x09
    5f3e:	92 85       	ldd	r25, Z+10	; 0x0a
    5f40:	a3 85       	ldd	r26, Z+11	; 0x0b
    5f42:	b4 85       	ldd	r27, Z+12	; 0x0c
    5f44:	01 96       	adiw	r24, 0x01	; 1
    5f46:	a1 1d       	adc	r26, r1
    5f48:	b1 1d       	adc	r27, r1
    5f4a:	84 17       	cp	r24, r20
    5f4c:	95 07       	cpc	r25, r21
    5f4e:	a6 07       	cpc	r26, r22
    5f50:	b7 07       	cpc	r27, r23
    5f52:	10 f4       	brcc	.+4      	; 0x5f58 <_ZNK8SdVolume6fatGetEmPm+0x36>
    5f54:	80 e0       	ldi	r24, 0x00	; 0
    5f56:	5a c0       	rjmp	.+180    	; 0x600c <_ZNK8SdVolume6fatGetEmPm+0xea>
    5f58:	83 88       	ldd	r8, Z+19	; 0x13
    5f5a:	94 88       	ldd	r9, Z+20	; 0x14
    5f5c:	a5 88       	ldd	r10, Z+21	; 0x15
    5f5e:	b6 88       	ldd	r11, Z+22	; 0x16
    5f60:	87 89       	ldd	r24, Z+23	; 0x17
    5f62:	80 31       	cpi	r24, 0x10	; 16
    5f64:	29 f4       	brne	.+10     	; 0x5f70 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    5f66:	bb 27       	eor	r27, r27
    5f68:	a7 2f       	mov	r26, r23
    5f6a:	96 2f       	mov	r25, r22
    5f6c:	85 2f       	mov	r24, r21
    5f6e:	09 c0       	rjmp	.+18     	; 0x5f82 <_ZNK8SdVolume6fatGetEmPm+0x60>
    5f70:	db 01       	movw	r26, r22
    5f72:	ca 01       	movw	r24, r20
    5f74:	c7 e0       	ldi	r28, 0x07	; 7
    5f76:	b6 95       	lsr	r27
    5f78:	a7 95       	ror	r26
    5f7a:	97 95       	ror	r25
    5f7c:	87 95       	ror	r24
    5f7e:	ca 95       	dec	r28
    5f80:	d1 f7       	brne	.-12     	; 0x5f76 <_ZNK8SdVolume6fatGetEmPm+0x54>
    5f82:	e9 01       	movw	r28, r18
    5f84:	6a 01       	movw	r12, r20
    5f86:	7b 01       	movw	r14, r22
    5f88:	8f 01       	movw	r16, r30
    5f8a:	bc 01       	movw	r22, r24
    5f8c:	cd 01       	movw	r24, r26
    5f8e:	68 0d       	add	r22, r8
    5f90:	79 1d       	adc	r23, r9
    5f92:	8a 1d       	adc	r24, r10
    5f94:	9b 1d       	adc	r25, r11
    5f96:	80 90 17 02 	lds	r8, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5f9a:	90 90 18 02 	lds	r9, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5f9e:	a0 90 19 02 	lds	r10, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5fa2:	b0 90 1a 02 	lds	r11, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5fa6:	68 15       	cp	r22, r8
    5fa8:	79 05       	cpc	r23, r9
    5faa:	8a 05       	cpc	r24, r10
    5fac:	9b 05       	cpc	r25, r11
    5fae:	91 f4       	brne	.+36     	; 0x5fd4 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    5fb0:	f8 01       	movw	r30, r16
    5fb2:	87 89       	ldd	r24, Z+23	; 0x17
    5fb4:	80 31       	cpi	r24, 0x10	; 16
    5fb6:	99 f4       	brne	.+38     	; 0x5fde <_ZNK8SdVolume6fatGetEmPm+0xbc>
    5fb8:	dd 24       	eor	r13, r13
    5fba:	ee 24       	eor	r14, r14
    5fbc:	ff 24       	eor	r15, r15
    5fbe:	c6 01       	movw	r24, r12
    5fc0:	88 0f       	add	r24, r24
    5fc2:	99 1f       	adc	r25, r25
    5fc4:	fc 01       	movw	r30, r24
    5fc6:	e4 51       	subi	r30, 0x14	; 20
    5fc8:	f7 4f       	sbci	r31, 0xF7	; 247
    5fca:	80 81       	ld	r24, Z
    5fcc:	91 81       	ldd	r25, Z+1	; 0x01
    5fce:	a0 e0       	ldi	r26, 0x00	; 0
    5fd0:	b0 e0       	ldi	r27, 0x00	; 0
    5fd2:	17 c0       	rjmp	.+46     	; 0x6002 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    5fd4:	40 e0       	ldi	r20, 0x00	; 0
    5fd6:	6c df       	rcall	.-296    	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    5fd8:	81 11       	cpse	r24, r1
    5fda:	ea cf       	rjmp	.-44     	; 0x5fb0 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    5fdc:	bb cf       	rjmp	.-138    	; 0x5f54 <_ZNK8SdVolume6fatGetEmPm+0x32>
    5fde:	e8 94       	clt
    5fe0:	c7 f8       	bld	r12, 7
    5fe2:	dd 24       	eor	r13, r13
    5fe4:	ee 24       	eor	r14, r14
    5fe6:	ff 24       	eor	r15, r15
    5fe8:	c6 01       	movw	r24, r12
    5fea:	88 0f       	add	r24, r24
    5fec:	99 1f       	adc	r25, r25
    5fee:	88 0f       	add	r24, r24
    5ff0:	99 1f       	adc	r25, r25
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	e4 51       	subi	r30, 0x14	; 20
    5ff6:	f7 4f       	sbci	r31, 0xF7	; 247
    5ff8:	80 81       	ld	r24, Z
    5ffa:	91 81       	ldd	r25, Z+1	; 0x01
    5ffc:	a2 81       	ldd	r26, Z+2	; 0x02
    5ffe:	b3 81       	ldd	r27, Z+3	; 0x03
    6000:	bf 70       	andi	r27, 0x0F	; 15
    6002:	88 83       	st	Y, r24
    6004:	99 83       	std	Y+1, r25	; 0x01
    6006:	aa 83       	std	Y+2, r26	; 0x02
    6008:	bb 83       	std	Y+3, r27	; 0x03
    600a:	81 e0       	ldi	r24, 0x01	; 1
    600c:	df 91       	pop	r29
    600e:	cf 91       	pop	r28
    6010:	1f 91       	pop	r17
    6012:	0f 91       	pop	r16
    6014:	ff 90       	pop	r15
    6016:	ef 90       	pop	r14
    6018:	df 90       	pop	r13
    601a:	cf 90       	pop	r12
    601c:	bf 90       	pop	r11
    601e:	af 90       	pop	r10
    6020:	9f 90       	pop	r9
    6022:	8f 90       	pop	r8
    6024:	08 95       	ret

00006026 <_ZNK8SdVolume9chainSizeEmPm>:
    6026:	4f 92       	push	r4
    6028:	5f 92       	push	r5
    602a:	6f 92       	push	r6
    602c:	7f 92       	push	r7
    602e:	af 92       	push	r10
    6030:	bf 92       	push	r11
    6032:	cf 92       	push	r12
    6034:	df 92       	push	r13
    6036:	ef 92       	push	r14
    6038:	ff 92       	push	r15
    603a:	0f 93       	push	r16
    603c:	1f 93       	push	r17
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	00 d0       	rcall	.+0      	; 0x6044 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    6044:	1f 92       	push	r1
    6046:	cd b7       	in	r28, 0x3d	; 61
    6048:	de b7       	in	r29, 0x3e	; 62
    604a:	8c 01       	movw	r16, r24
    604c:	49 83       	std	Y+1, r20	; 0x01
    604e:	5a 83       	std	Y+2, r21	; 0x02
    6050:	6b 83       	std	Y+3, r22	; 0x03
    6052:	7c 83       	std	Y+4, r23	; 0x04
    6054:	59 01       	movw	r10, r18
    6056:	c1 2c       	mov	r12, r1
    6058:	d1 2c       	mov	r13, r1
    605a:	76 01       	movw	r14, r12
    605c:	41 2c       	mov	r4, r1
    605e:	82 e0       	ldi	r24, 0x02	; 2
    6060:	58 2e       	mov	r5, r24
    6062:	61 2c       	mov	r6, r1
    6064:	71 2c       	mov	r7, r1
    6066:	49 81       	ldd	r20, Y+1	; 0x01
    6068:	5a 81       	ldd	r21, Y+2	; 0x02
    606a:	6b 81       	ldd	r22, Y+3	; 0x03
    606c:	7c 81       	ldd	r23, Y+4	; 0x04
    606e:	9e 01       	movw	r18, r28
    6070:	2f 5f       	subi	r18, 0xFF	; 255
    6072:	3f 4f       	sbci	r19, 0xFF	; 255
    6074:	c8 01       	movw	r24, r16
    6076:	55 df       	rcall	.-342    	; 0x5f22 <_ZNK8SdVolume6fatGetEmPm>
    6078:	88 23       	and	r24, r24
    607a:	51 f1       	breq	.+84     	; 0x60d0 <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    607c:	d3 01       	movw	r26, r6
    607e:	c2 01       	movw	r24, r4
    6080:	f8 01       	movw	r30, r16
    6082:	05 84       	ldd	r0, Z+13	; 0x0d
    6084:	04 c0       	rjmp	.+8      	; 0x608e <_ZNK8SdVolume9chainSizeEmPm+0x68>
    6086:	88 0f       	add	r24, r24
    6088:	99 1f       	adc	r25, r25
    608a:	aa 1f       	adc	r26, r26
    608c:	bb 1f       	adc	r27, r27
    608e:	0a 94       	dec	r0
    6090:	d2 f7       	brpl	.-12     	; 0x6086 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    6092:	c8 0e       	add	r12, r24
    6094:	d9 1e       	adc	r13, r25
    6096:	ea 1e       	adc	r14, r26
    6098:	fb 1e       	adc	r15, r27
    609a:	49 81       	ldd	r20, Y+1	; 0x01
    609c:	5a 81       	ldd	r21, Y+2	; 0x02
    609e:	6b 81       	ldd	r22, Y+3	; 0x03
    60a0:	7c 81       	ldd	r23, Y+4	; 0x04
    60a2:	87 89       	ldd	r24, Z+23	; 0x17
    60a4:	80 31       	cpi	r24, 0x10	; 16
    60a6:	29 f0       	breq	.+10     	; 0x60b2 <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    60a8:	88 ef       	ldi	r24, 0xF8	; 248
    60aa:	9f ef       	ldi	r25, 0xFF	; 255
    60ac:	af ef       	ldi	r26, 0xFF	; 255
    60ae:	bf e0       	ldi	r27, 0x0F	; 15
    60b0:	04 c0       	rjmp	.+8      	; 0x60ba <_ZNK8SdVolume9chainSizeEmPm+0x94>
    60b2:	88 ef       	ldi	r24, 0xF8	; 248
    60b4:	9f ef       	ldi	r25, 0xFF	; 255
    60b6:	a0 e0       	ldi	r26, 0x00	; 0
    60b8:	b0 e0       	ldi	r27, 0x00	; 0
    60ba:	48 17       	cp	r20, r24
    60bc:	59 07       	cpc	r21, r25
    60be:	6a 07       	cpc	r22, r26
    60c0:	7b 07       	cpc	r23, r27
    60c2:	88 f2       	brcs	.-94     	; 0x6066 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    60c4:	f5 01       	movw	r30, r10
    60c6:	c0 82       	st	Z, r12
    60c8:	d1 82       	std	Z+1, r13	; 0x01
    60ca:	e2 82       	std	Z+2, r14	; 0x02
    60cc:	f3 82       	std	Z+3, r15	; 0x03
    60ce:	81 e0       	ldi	r24, 0x01	; 1
    60d0:	0f 90       	pop	r0
    60d2:	0f 90       	pop	r0
    60d4:	0f 90       	pop	r0
    60d6:	0f 90       	pop	r0
    60d8:	df 91       	pop	r29
    60da:	cf 91       	pop	r28
    60dc:	1f 91       	pop	r17
    60de:	0f 91       	pop	r16
    60e0:	ff 90       	pop	r15
    60e2:	ef 90       	pop	r14
    60e4:	df 90       	pop	r13
    60e6:	cf 90       	pop	r12
    60e8:	bf 90       	pop	r11
    60ea:	af 90       	pop	r10
    60ec:	7f 90       	pop	r7
    60ee:	6f 90       	pop	r6
    60f0:	5f 90       	pop	r5
    60f2:	4f 90       	pop	r4
    60f4:	08 95       	ret

000060f6 <_ZN8SdVolume6fatPutEmm>:
    60f6:	4f 92       	push	r4
    60f8:	5f 92       	push	r5
    60fa:	6f 92       	push	r6
    60fc:	7f 92       	push	r7
    60fe:	8f 92       	push	r8
    6100:	9f 92       	push	r9
    6102:	af 92       	push	r10
    6104:	bf 92       	push	r11
    6106:	cf 92       	push	r12
    6108:	df 92       	push	r13
    610a:	ef 92       	push	r14
    610c:	ff 92       	push	r15
    610e:	0f 93       	push	r16
    6110:	1f 93       	push	r17
    6112:	cf 93       	push	r28
    6114:	df 93       	push	r29
    6116:	ec 01       	movw	r28, r24
    6118:	42 30       	cpi	r20, 0x02	; 2
    611a:	51 05       	cpc	r21, r1
    611c:	61 05       	cpc	r22, r1
    611e:	71 05       	cpc	r23, r1
    6120:	10 f4       	brcc	.+4      	; 0x6126 <_ZN8SdVolume6fatPutEmm+0x30>
    6122:	80 e0       	ldi	r24, 0x00	; 0
    6124:	77 c0       	rjmp	.+238    	; 0x6214 <_ZN8SdVolume6fatPutEmm+0x11e>
    6126:	89 85       	ldd	r24, Y+9	; 0x09
    6128:	9a 85       	ldd	r25, Y+10	; 0x0a
    612a:	ab 85       	ldd	r26, Y+11	; 0x0b
    612c:	bc 85       	ldd	r27, Y+12	; 0x0c
    612e:	01 96       	adiw	r24, 0x01	; 1
    6130:	a1 1d       	adc	r26, r1
    6132:	b1 1d       	adc	r27, r1
    6134:	84 17       	cp	r24, r20
    6136:	95 07       	cpc	r25, r21
    6138:	a6 07       	cpc	r26, r22
    613a:	b7 07       	cpc	r27, r23
    613c:	90 f3       	brcs	.-28     	; 0x6122 <_ZN8SdVolume6fatPutEmm+0x2c>
    613e:	cb 88       	ldd	r12, Y+19	; 0x13
    6140:	dc 88       	ldd	r13, Y+20	; 0x14
    6142:	ed 88       	ldd	r14, Y+21	; 0x15
    6144:	fe 88       	ldd	r15, Y+22	; 0x16
    6146:	8f 89       	ldd	r24, Y+23	; 0x17
    6148:	80 31       	cpi	r24, 0x10	; 16
    614a:	29 f4       	brne	.+10     	; 0x6156 <_ZN8SdVolume6fatPutEmm+0x60>
    614c:	bb 27       	eor	r27, r27
    614e:	a7 2f       	mov	r26, r23
    6150:	96 2f       	mov	r25, r22
    6152:	85 2f       	mov	r24, r21
    6154:	09 c0       	rjmp	.+18     	; 0x6168 <_ZN8SdVolume6fatPutEmm+0x72>
    6156:	db 01       	movw	r26, r22
    6158:	ca 01       	movw	r24, r20
    615a:	e7 e0       	ldi	r30, 0x07	; 7
    615c:	b6 95       	lsr	r27
    615e:	a7 95       	ror	r26
    6160:	97 95       	ror	r25
    6162:	87 95       	ror	r24
    6164:	ea 95       	dec	r30
    6166:	d1 f7       	brne	.-12     	; 0x615c <_ZN8SdVolume6fatPutEmm+0x66>
    6168:	48 01       	movw	r8, r16
    616a:	59 01       	movw	r10, r18
    616c:	2a 01       	movw	r4, r20
    616e:	3b 01       	movw	r6, r22
    6170:	c8 0e       	add	r12, r24
    6172:	d9 1e       	adc	r13, r25
    6174:	ea 1e       	adc	r14, r26
    6176:	fb 1e       	adc	r15, r27
    6178:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    617c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    6180:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    6184:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    6188:	c8 16       	cp	r12, r24
    618a:	d9 06       	cpc	r13, r25
    618c:	ea 06       	cpc	r14, r26
    618e:	fb 06       	cpc	r15, r27
    6190:	81 f4       	brne	.+32     	; 0x61b2 <_ZN8SdVolume6fatPutEmm+0xbc>
    6192:	8f 89       	ldd	r24, Y+23	; 0x17
    6194:	80 31       	cpi	r24, 0x10	; 16
    6196:	a1 f4       	brne	.+40     	; 0x61c0 <_ZN8SdVolume6fatPutEmm+0xca>
    6198:	b3 01       	movw	r22, r6
    619a:	a2 01       	movw	r20, r4
    619c:	55 27       	eor	r21, r21
    619e:	66 27       	eor	r22, r22
    61a0:	77 27       	eor	r23, r23
    61a2:	44 0f       	add	r20, r20
    61a4:	55 1f       	adc	r21, r21
    61a6:	fa 01       	movw	r30, r20
    61a8:	e4 51       	subi	r30, 0x14	; 20
    61aa:	f7 4f       	sbci	r31, 0xF7	; 247
    61ac:	91 82       	std	Z+1, r9	; 0x01
    61ae:	80 82       	st	Z, r8
    61b0:	18 c0       	rjmp	.+48     	; 0x61e2 <_ZN8SdVolume6fatPutEmm+0xec>
    61b2:	40 e0       	ldi	r20, 0x00	; 0
    61b4:	c7 01       	movw	r24, r14
    61b6:	b6 01       	movw	r22, r12
    61b8:	7b de       	rcall	.-778    	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    61ba:	81 11       	cpse	r24, r1
    61bc:	ea cf       	rjmp	.-44     	; 0x6192 <_ZN8SdVolume6fatPutEmm+0x9c>
    61be:	b1 cf       	rjmp	.-158    	; 0x6122 <_ZN8SdVolume6fatPutEmm+0x2c>
    61c0:	b3 01       	movw	r22, r6
    61c2:	a2 01       	movw	r20, r4
    61c4:	4f 77       	andi	r20, 0x7F	; 127
    61c6:	55 27       	eor	r21, r21
    61c8:	66 27       	eor	r22, r22
    61ca:	77 27       	eor	r23, r23
    61cc:	44 0f       	add	r20, r20
    61ce:	55 1f       	adc	r21, r21
    61d0:	44 0f       	add	r20, r20
    61d2:	55 1f       	adc	r21, r21
    61d4:	fa 01       	movw	r30, r20
    61d6:	e4 51       	subi	r30, 0x14	; 20
    61d8:	f7 4f       	sbci	r31, 0xF7	; 247
    61da:	80 82       	st	Z, r8
    61dc:	91 82       	std	Z+1, r9	; 0x01
    61de:	a2 82       	std	Z+2, r10	; 0x02
    61e0:	b3 82       	std	Z+3, r11	; 0x03
    61e2:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    61e6:	81 60       	ori	r24, 0x01	; 1
    61e8:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <_ZN8SdVolume11cacheDirty_E>
    61ec:	8a 89       	ldd	r24, Y+18	; 0x12
    61ee:	82 30       	cpi	r24, 0x02	; 2
    61f0:	80 f0       	brcs	.+32     	; 0x6212 <_ZN8SdVolume6fatPutEmm+0x11c>
    61f2:	8d 81       	ldd	r24, Y+5	; 0x05
    61f4:	9e 81       	ldd	r25, Y+6	; 0x06
    61f6:	af 81       	ldd	r26, Y+7	; 0x07
    61f8:	b8 85       	ldd	r27, Y+8	; 0x08
    61fa:	c8 0e       	add	r12, r24
    61fc:	d9 1e       	adc	r13, r25
    61fe:	ea 1e       	adc	r14, r26
    6200:	fb 1e       	adc	r15, r27
    6202:	c0 92 e5 08 	sts	0x08E5, r12	; 0x8008e5 <_ZN8SdVolume17cacheMirrorBlock_E>
    6206:	d0 92 e6 08 	sts	0x08E6, r13	; 0x8008e6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    620a:	e0 92 e7 08 	sts	0x08E7, r14	; 0x8008e7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    620e:	f0 92 e8 08 	sts	0x08E8, r15	; 0x8008e8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	df 91       	pop	r29
    6216:	cf 91       	pop	r28
    6218:	1f 91       	pop	r17
    621a:	0f 91       	pop	r16
    621c:	ff 90       	pop	r15
    621e:	ef 90       	pop	r14
    6220:	df 90       	pop	r13
    6222:	cf 90       	pop	r12
    6224:	bf 90       	pop	r11
    6226:	af 90       	pop	r10
    6228:	9f 90       	pop	r9
    622a:	8f 90       	pop	r8
    622c:	7f 90       	pop	r7
    622e:	6f 90       	pop	r6
    6230:	5f 90       	pop	r5
    6232:	4f 90       	pop	r4
    6234:	08 95       	ret

00006236 <_ZN8SdVolume15allocContiguousEmPm>:
    6236:	2f 92       	push	r2
    6238:	3f 92       	push	r3
    623a:	4f 92       	push	r4
    623c:	5f 92       	push	r5
    623e:	6f 92       	push	r6
    6240:	7f 92       	push	r7
    6242:	9f 92       	push	r9
    6244:	af 92       	push	r10
    6246:	bf 92       	push	r11
    6248:	cf 92       	push	r12
    624a:	df 92       	push	r13
    624c:	ef 92       	push	r14
    624e:	ff 92       	push	r15
    6250:	0f 93       	push	r16
    6252:	1f 93       	push	r17
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
    6258:	cd b7       	in	r28, 0x3d	; 61
    625a:	de b7       	in	r29, 0x3e	; 62
    625c:	60 97       	sbiw	r28, 0x10	; 16
    625e:	0f b6       	in	r0, 0x3f	; 63
    6260:	f8 94       	cli
    6262:	de bf       	out	0x3e, r29	; 62
    6264:	0f be       	out	0x3f, r0	; 63
    6266:	cd bf       	out	0x3d, r28	; 61
    6268:	5c 01       	movw	r10, r24
    626a:	49 87       	std	Y+9, r20	; 0x09
    626c:	5a 87       	std	Y+10, r21	; 0x0a
    626e:	6b 87       	std	Y+11, r22	; 0x0b
    6270:	7c 87       	std	Y+12, r23	; 0x0c
    6272:	19 01       	movw	r2, r18
    6274:	d9 01       	movw	r26, r18
    6276:	cd 90       	ld	r12, X+
    6278:	dd 90       	ld	r13, X+
    627a:	ed 90       	ld	r14, X+
    627c:	fc 90       	ld	r15, X
    627e:	c1 14       	cp	r12, r1
    6280:	d1 04       	cpc	r13, r1
    6282:	e1 04       	cpc	r14, r1
    6284:	f1 04       	cpc	r15, r1
    6286:	31 f0       	breq	.+12     	; 0x6294 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    6288:	bf ef       	ldi	r27, 0xFF	; 255
    628a:	cb 1a       	sub	r12, r27
    628c:	db 0a       	sbc	r13, r27
    628e:	eb 0a       	sbc	r14, r27
    6290:	fb 0a       	sbc	r15, r27
    6292:	10 c0       	rjmp	.+32     	; 0x62b4 <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    6294:	fc 01       	movw	r30, r24
    6296:	c0 80       	ld	r12, Z
    6298:	d1 80       	ldd	r13, Z+1	; 0x01
    629a:	e2 80       	ldd	r14, Z+2	; 0x02
    629c:	f3 80       	ldd	r15, Z+3	; 0x03
    629e:	99 24       	eor	r9, r9
    62a0:	93 94       	inc	r9
    62a2:	09 85       	ldd	r16, Y+9	; 0x09
    62a4:	1a 85       	ldd	r17, Y+10	; 0x0a
    62a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    62a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    62aa:	01 30       	cpi	r16, 0x01	; 1
    62ac:	11 05       	cpc	r17, r1
    62ae:	21 05       	cpc	r18, r1
    62b0:	31 05       	cpc	r19, r1
    62b2:	09 f0       	breq	.+2      	; 0x62b6 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    62b4:	91 2c       	mov	r9, r1
    62b6:	f5 01       	movw	r30, r10
    62b8:	81 85       	ldd	r24, Z+9	; 0x09
    62ba:	92 85       	ldd	r25, Z+10	; 0x0a
    62bc:	a3 85       	ldd	r26, Z+11	; 0x0b
    62be:	b4 85       	ldd	r27, Z+12	; 0x0c
    62c0:	8c 01       	movw	r16, r24
    62c2:	9d 01       	movw	r18, r26
    62c4:	0f 5f       	subi	r16, 0xFF	; 255
    62c6:	1f 4f       	sbci	r17, 0xFF	; 255
    62c8:	2f 4f       	sbci	r18, 0xFF	; 255
    62ca:	3f 4f       	sbci	r19, 0xFF	; 255
    62cc:	0d 87       	std	Y+13, r16	; 0x0d
    62ce:	1e 87       	std	Y+14, r17	; 0x0e
    62d0:	2f 87       	std	Y+15, r18	; 0x0f
    62d2:	38 8b       	std	Y+16, r19	; 0x10
    62d4:	26 01       	movw	r4, r12
    62d6:	37 01       	movw	r6, r14
    62d8:	1d 82       	std	Y+5, r1	; 0x05
    62da:	1e 82       	std	Y+6, r1	; 0x06
    62dc:	1f 82       	std	Y+7, r1	; 0x07
    62de:	18 86       	std	Y+8, r1	; 0x08
    62e0:	f5 01       	movw	r30, r10
    62e2:	81 85       	ldd	r24, Z+9	; 0x09
    62e4:	92 85       	ldd	r25, Z+10	; 0x0a
    62e6:	a3 85       	ldd	r26, Z+11	; 0x0b
    62e8:	b4 85       	ldd	r27, Z+12	; 0x0c
    62ea:	0d 81       	ldd	r16, Y+5	; 0x05
    62ec:	1e 81       	ldd	r17, Y+6	; 0x06
    62ee:	2f 81       	ldd	r18, Y+7	; 0x07
    62f0:	38 85       	ldd	r19, Y+8	; 0x08
    62f2:	08 17       	cp	r16, r24
    62f4:	19 07       	cpc	r17, r25
    62f6:	2a 07       	cpc	r18, r26
    62f8:	3b 07       	cpc	r19, r27
    62fa:	08 f0       	brcs	.+2      	; 0x62fe <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    62fc:	54 c0       	rjmp	.+168    	; 0x63a6 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    62fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    6300:	3e 85       	ldd	r19, Y+14	; 0x0e
    6302:	4f 85       	ldd	r20, Y+15	; 0x0f
    6304:	58 89       	ldd	r21, Y+16	; 0x10
    6306:	24 15       	cp	r18, r4
    6308:	35 05       	cpc	r19, r5
    630a:	46 05       	cpc	r20, r6
    630c:	57 05       	cpc	r21, r7
    630e:	50 f4       	brcc	.+20     	; 0x6324 <_ZN8SdVolume15allocContiguousEmPm+0xee>
    6310:	82 e0       	ldi	r24, 0x02	; 2
    6312:	48 2e       	mov	r4, r24
    6314:	51 2c       	mov	r5, r1
    6316:	61 2c       	mov	r6, r1
    6318:	71 2c       	mov	r7, r1
    631a:	92 e0       	ldi	r25, 0x02	; 2
    631c:	c9 2e       	mov	r12, r25
    631e:	d1 2c       	mov	r13, r1
    6320:	e1 2c       	mov	r14, r1
    6322:	f1 2c       	mov	r15, r1
    6324:	9e 01       	movw	r18, r28
    6326:	2f 5f       	subi	r18, 0xFF	; 255
    6328:	3f 4f       	sbci	r19, 0xFF	; 255
    632a:	b3 01       	movw	r22, r6
    632c:	a2 01       	movw	r20, r4
    632e:	c5 01       	movw	r24, r10
    6330:	f8 dd       	rcall	.-1040   	; 0x5f22 <_ZNK8SdVolume6fatGetEmPm>
    6332:	88 23       	and	r24, r24
    6334:	c1 f1       	breq	.+112    	; 0x63a6 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    6336:	49 81       	ldd	r20, Y+1	; 0x01
    6338:	5a 81       	ldd	r21, Y+2	; 0x02
    633a:	6b 81       	ldd	r22, Y+3	; 0x03
    633c:	7c 81       	ldd	r23, Y+4	; 0x04
    633e:	d3 01       	movw	r26, r6
    6340:	c2 01       	movw	r24, r4
    6342:	01 96       	adiw	r24, 0x01	; 1
    6344:	a1 1d       	adc	r26, r1
    6346:	b1 1d       	adc	r27, r1
    6348:	45 2b       	or	r20, r21
    634a:	46 2b       	or	r20, r22
    634c:	47 2b       	or	r20, r23
    634e:	19 f0       	breq	.+6      	; 0x6356 <_ZN8SdVolume15allocContiguousEmPm+0x120>
    6350:	6c 01       	movw	r12, r24
    6352:	7d 01       	movw	r14, r26
    6354:	0f c0       	rjmp	.+30     	; 0x6374 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    6356:	ac 01       	movw	r20, r24
    6358:	bd 01       	movw	r22, r26
    635a:	4c 19       	sub	r20, r12
    635c:	5d 09       	sbc	r21, r13
    635e:	6e 09       	sbc	r22, r14
    6360:	7f 09       	sbc	r23, r15
    6362:	09 85       	ldd	r16, Y+9	; 0x09
    6364:	1a 85       	ldd	r17, Y+10	; 0x0a
    6366:	2b 85       	ldd	r18, Y+11	; 0x0b
    6368:	3c 85       	ldd	r19, Y+12	; 0x0c
    636a:	04 17       	cp	r16, r20
    636c:	15 07       	cpc	r17, r21
    636e:	26 07       	cpc	r18, r22
    6370:	37 07       	cpc	r19, r23
    6372:	79 f0       	breq	.+30     	; 0x6392 <_ZN8SdVolume15allocContiguousEmPm+0x15c>
    6374:	2d 81       	ldd	r18, Y+5	; 0x05
    6376:	3e 81       	ldd	r19, Y+6	; 0x06
    6378:	4f 81       	ldd	r20, Y+7	; 0x07
    637a:	58 85       	ldd	r21, Y+8	; 0x08
    637c:	2f 5f       	subi	r18, 0xFF	; 255
    637e:	3f 4f       	sbci	r19, 0xFF	; 255
    6380:	4f 4f       	sbci	r20, 0xFF	; 255
    6382:	5f 4f       	sbci	r21, 0xFF	; 255
    6384:	2d 83       	std	Y+5, r18	; 0x05
    6386:	3e 83       	std	Y+6, r19	; 0x06
    6388:	4f 83       	std	Y+7, r20	; 0x07
    638a:	58 87       	std	Y+8, r21	; 0x08
    638c:	2c 01       	movw	r4, r24
    638e:	3d 01       	movw	r6, r26
    6390:	a7 cf       	rjmp	.-178    	; 0x62e0 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    6392:	0f ef       	ldi	r16, 0xFF	; 255
    6394:	1f ef       	ldi	r17, 0xFF	; 255
    6396:	2f ef       	ldi	r18, 0xFF	; 255
    6398:	3f e0       	ldi	r19, 0x0F	; 15
    639a:	b3 01       	movw	r22, r6
    639c:	a2 01       	movw	r20, r4
    639e:	c5 01       	movw	r24, r10
    63a0:	aa de       	rcall	.-684    	; 0x60f6 <_ZN8SdVolume6fatPutEmm>
    63a2:	81 11       	cpse	r24, r1
    63a4:	17 c0       	rjmp	.+46     	; 0x63d4 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    63a6:	80 e0       	ldi	r24, 0x00	; 0
    63a8:	3f c0       	rjmp	.+126    	; 0x6428 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    63aa:	d3 01       	movw	r26, r6
    63ac:	c2 01       	movw	r24, r4
    63ae:	01 97       	sbiw	r24, 0x01	; 1
    63b0:	a1 09       	sbc	r26, r1
    63b2:	b1 09       	sbc	r27, r1
    63b4:	8d 83       	std	Y+5, r24	; 0x05
    63b6:	9e 83       	std	Y+6, r25	; 0x06
    63b8:	af 83       	std	Y+7, r26	; 0x07
    63ba:	b8 87       	std	Y+8, r27	; 0x08
    63bc:	93 01       	movw	r18, r6
    63be:	82 01       	movw	r16, r4
    63c0:	ac 01       	movw	r20, r24
    63c2:	bd 01       	movw	r22, r26
    63c4:	c5 01       	movw	r24, r10
    63c6:	97 de       	rcall	.-722    	; 0x60f6 <_ZN8SdVolume6fatPutEmm>
    63c8:	88 23       	and	r24, r24
    63ca:	69 f3       	breq	.-38     	; 0x63a6 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    63cc:	4d 80       	ldd	r4, Y+5	; 0x05
    63ce:	5e 80       	ldd	r5, Y+6	; 0x06
    63d0:	6f 80       	ldd	r6, Y+7	; 0x07
    63d2:	78 84       	ldd	r7, Y+8	; 0x08
    63d4:	c4 14       	cp	r12, r4
    63d6:	d5 04       	cpc	r13, r5
    63d8:	e6 04       	cpc	r14, r6
    63da:	f7 04       	cpc	r15, r7
    63dc:	30 f3       	brcs	.-52     	; 0x63aa <_ZN8SdVolume15allocContiguousEmPm+0x174>
    63de:	d1 01       	movw	r26, r2
    63e0:	4d 91       	ld	r20, X+
    63e2:	5d 91       	ld	r21, X+
    63e4:	6d 91       	ld	r22, X+
    63e6:	7c 91       	ld	r23, X
    63e8:	41 15       	cp	r20, r1
    63ea:	51 05       	cpc	r21, r1
    63ec:	61 05       	cpc	r22, r1
    63ee:	71 05       	cpc	r23, r1
    63f0:	99 f4       	brne	.+38     	; 0x6418 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    63f2:	f1 01       	movw	r30, r2
    63f4:	c0 82       	st	Z, r12
    63f6:	d1 82       	std	Z+1, r13	; 0x01
    63f8:	e2 82       	std	Z+2, r14	; 0x02
    63fa:	f3 82       	std	Z+3, r15	; 0x03
    63fc:	99 20       	and	r9, r9
    63fe:	99 f0       	breq	.+38     	; 0x6426 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    6400:	ff ef       	ldi	r31, 0xFF	; 255
    6402:	cf 1a       	sub	r12, r31
    6404:	df 0a       	sbc	r13, r31
    6406:	ef 0a       	sbc	r14, r31
    6408:	ff 0a       	sbc	r15, r31
    640a:	d5 01       	movw	r26, r10
    640c:	cd 92       	st	X+, r12
    640e:	dd 92       	st	X+, r13
    6410:	ed 92       	st	X+, r14
    6412:	fc 92       	st	X, r15
    6414:	13 97       	sbiw	r26, 0x03	; 3
    6416:	07 c0       	rjmp	.+14     	; 0x6426 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    6418:	97 01       	movw	r18, r14
    641a:	86 01       	movw	r16, r12
    641c:	c5 01       	movw	r24, r10
    641e:	6b de       	rcall	.-810    	; 0x60f6 <_ZN8SdVolume6fatPutEmm>
    6420:	81 11       	cpse	r24, r1
    6422:	e7 cf       	rjmp	.-50     	; 0x63f2 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    6424:	c0 cf       	rjmp	.-128    	; 0x63a6 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    6426:	81 e0       	ldi	r24, 0x01	; 1
    6428:	60 96       	adiw	r28, 0x10	; 16
    642a:	0f b6       	in	r0, 0x3f	; 63
    642c:	f8 94       	cli
    642e:	de bf       	out	0x3e, r29	; 62
    6430:	0f be       	out	0x3f, r0	; 63
    6432:	cd bf       	out	0x3d, r28	; 61
    6434:	df 91       	pop	r29
    6436:	cf 91       	pop	r28
    6438:	1f 91       	pop	r17
    643a:	0f 91       	pop	r16
    643c:	ff 90       	pop	r15
    643e:	ef 90       	pop	r14
    6440:	df 90       	pop	r13
    6442:	cf 90       	pop	r12
    6444:	bf 90       	pop	r11
    6446:	af 90       	pop	r10
    6448:	9f 90       	pop	r9
    644a:	7f 90       	pop	r7
    644c:	6f 90       	pop	r6
    644e:	5f 90       	pop	r5
    6450:	4f 90       	pop	r4
    6452:	3f 90       	pop	r3
    6454:	2f 90       	pop	r2
    6456:	08 95       	ret

00006458 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    6458:	8f 92       	push	r8
    645a:	9f 92       	push	r9
    645c:	af 92       	push	r10
    645e:	bf 92       	push	r11
    6460:	cf 92       	push	r12
    6462:	df 92       	push	r13
    6464:	ef 92       	push	r14
    6466:	ff 92       	push	r15
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	cf 93       	push	r28
    646e:	df 93       	push	r29
    6470:	ec 01       	movw	r28, r24
    6472:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    6474:	70 93 eb 08 	sts	0x08EB, r23	; 0x8008eb <_ZN8SdVolume7sdCard_E+0x1>
    6478:	60 93 ea 08 	sts	0x08EA, r22	; 0x8008ea <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    647c:	44 23       	and	r20, r20
    647e:	61 f1       	breq	.+88     	; 0x64d8 <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    6480:	45 30       	cpi	r20, 0x05	; 5
    6482:	10 f0       	brcs	.+4      	; 0x6488 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    6484:	80 e0       	ldi	r24, 0x00	; 0
    6486:	ef c0       	rjmp	.+478    	; 0x6666 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    6488:	40 e0       	ldi	r20, 0x00	; 0
    648a:	60 e0       	ldi	r22, 0x00	; 0
    648c:	70 e0       	ldi	r23, 0x00	; 0
    648e:	cb 01       	movw	r24, r22
    6490:	0f dd       	rcall	.-1506   	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    6492:	88 23       	and	r24, r24
    6494:	b9 f3       	breq	.-18     	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    6496:	20 e1       	ldi	r18, 0x10	; 16
    6498:	12 9f       	mul	r17, r18
    649a:	a0 01       	movw	r20, r0
    649c:	11 24       	eor	r1, r1
    649e:	44 52       	subi	r20, 0x24	; 36
    64a0:	57 4f       	sbci	r21, 0xF7	; 247
    64a2:	fa 01       	movw	r30, r20
    64a4:	e2 54       	subi	r30, 0x42	; 66
    64a6:	fe 4f       	sbci	r31, 0xFE	; 254
    64a8:	80 81       	ld	r24, Z
    64aa:	8f 77       	andi	r24, 0x7F	; 127
    64ac:	59 f7       	brne	.-42     	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    64ae:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    64b0:	80 81       	ld	r24, Z
    64b2:	91 81       	ldd	r25, Z+1	; 0x01
    64b4:	a2 81       	ldd	r26, Z+2	; 0x02
    64b6:	b3 81       	ldd	r27, Z+3	; 0x03
    64b8:	84 36       	cpi	r24, 0x64	; 100
    64ba:	91 05       	cpc	r25, r1
    64bc:	a1 05       	cpc	r26, r1
    64be:	b1 05       	cpc	r27, r1
    64c0:	08 f3       	brcs	.-62     	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    64c2:	34 97       	sbiw	r30, 0x04	; 4
    64c4:	c0 80       	ld	r12, Z
    64c6:	d1 80       	ldd	r13, Z+1	; 0x01
    64c8:	e2 80       	ldd	r14, Z+2	; 0x02
    64ca:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    64cc:	c1 14       	cp	r12, r1
    64ce:	d1 04       	cpc	r13, r1
    64d0:	e1 04       	cpc	r14, r1
    64d2:	f1 04       	cpc	r15, r1
    64d4:	21 f4       	brne	.+8      	; 0x64de <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    64d6:	d6 cf       	rjmp	.-84     	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    64d8:	c1 2c       	mov	r12, r1
    64da:	d1 2c       	mov	r13, r1
    64dc:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    64de:	40 e0       	ldi	r20, 0x00	; 0
    64e0:	c7 01       	movw	r24, r14
    64e2:	b6 01       	movw	r22, r12
    64e4:	e5 dc       	rcall	.-1590   	; 0x5eb0 <_ZN8SdVolume13cacheRawBlockEmh>
    64e6:	88 23       	and	r24, r24
    64e8:	69 f2       	breq	.-102    	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    64ea:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <_ZN8SdVolume12cacheBuffer_E+0xb>
    64ee:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <_ZN8SdVolume12cacheBuffer_E+0xc>
    64f2:	81 15       	cp	r24, r1
    64f4:	92 40       	sbci	r25, 0x02	; 2
    64f6:	31 f6       	brne	.-116    	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    64f8:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    64fc:	99 23       	and	r25, r25
    64fe:	09 f4       	brne	.+2      	; 0x6502 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    6500:	c1 cf       	rjmp	.-126    	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    6502:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <_ZN8SdVolume12cacheBuffer_E+0xe>
    6506:	30 91 fb 08 	lds	r19, 0x08FB	; 0x8008fb <_ZN8SdVolume12cacheBuffer_E+0xf>
    650a:	23 2b       	or	r18, r19
    650c:	09 f4       	brne	.+2      	; 0x6510 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    650e:	ba cf       	rjmp	.-140    	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    6510:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    6514:	88 23       	and	r24, r24
    6516:	09 f4       	brne	.+2      	; 0x651a <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    6518:	b5 cf       	rjmp	.-150    	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    651a:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    651c:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    651e:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	41 e0       	ldi	r20, 0x01	; 1
    6524:	50 e0       	ldi	r21, 0x00	; 0
    6526:	2d 85       	ldd	r18, Y+13	; 0x0d
    6528:	e2 2f       	mov	r30, r18
    652a:	ba 01       	movw	r22, r20
    652c:	02 2e       	mov	r0, r18
    652e:	02 c0       	rjmp	.+4      	; 0x6534 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    6530:	66 0f       	add	r22, r22
    6532:	77 1f       	adc	r23, r23
    6534:	0a 94       	dec	r0
    6536:	e2 f7       	brpl	.-8      	; 0x6530 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    6538:	86 17       	cp	r24, r22
    653a:	97 07       	cpc	r25, r23
    653c:	31 f0       	breq	.+12     	; 0x654a <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    653e:	31 e0       	ldi	r19, 0x01	; 1
    6540:	32 0f       	add	r19, r18
    6542:	3d 87       	std	Y+13, r19	; 0x0d
    6544:	28 30       	cpi	r18, 0x08	; 8
    6546:	78 f3       	brcs	.-34     	; 0x6526 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    6548:	9d cf       	rjmp	.-198    	; 0x6484 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    654a:	20 91 02 09 	lds	r18, 0x0902	; 0x800902 <_ZN8SdVolume12cacheBuffer_E+0x16>
    654e:	30 91 03 09 	lds	r19, 0x0903	; 0x800903 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    6552:	21 15       	cp	r18, r1
    6554:	31 05       	cpc	r19, r1
    6556:	19 f0       	breq	.+6      	; 0x655e <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    6558:	40 e0       	ldi	r20, 0x00	; 0
    655a:	50 e0       	ldi	r21, 0x00	; 0
    655c:	08 c0       	rjmp	.+16     	; 0x656e <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    655e:	20 91 10 09 	lds	r18, 0x0910	; 0x800910 <_ZN8SdVolume12cacheBuffer_E+0x24>
    6562:	30 91 11 09 	lds	r19, 0x0911	; 0x800911 <_ZN8SdVolume12cacheBuffer_E+0x25>
    6566:	40 91 12 09 	lds	r20, 0x0912	; 0x800912 <_ZN8SdVolume12cacheBuffer_E+0x26>
    656a:	50 91 13 09 	lds	r21, 0x0913	; 0x800913 <_ZN8SdVolume12cacheBuffer_E+0x27>
    656e:	2d 83       	std	Y+5, r18	; 0x05
    6570:	3e 83       	std	Y+6, r19	; 0x06
    6572:	4f 83       	std	Y+7, r20	; 0x07
    6574:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    6576:	80 91 fa 08 	lds	r24, 0x08FA	; 0x8008fa <_ZN8SdVolume12cacheBuffer_E+0xe>
    657a:	90 91 fb 08 	lds	r25, 0x08FB	; 0x8008fb <_ZN8SdVolume12cacheBuffer_E+0xf>
    657e:	46 01       	movw	r8, r12
    6580:	57 01       	movw	r10, r14
    6582:	88 0e       	add	r8, r24
    6584:	99 1e       	adc	r9, r25
    6586:	a1 1c       	adc	r10, r1
    6588:	b1 1c       	adc	r11, r1
    658a:	8b 8a       	std	Y+19, r8	; 0x13
    658c:	9c 8a       	std	Y+20, r9	; 0x14
    658e:	ad 8a       	std	Y+21, r10	; 0x15
    6590:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    6592:	00 91 fd 08 	lds	r16, 0x08FD	; 0x8008fd <_ZN8SdVolume12cacheBuffer_E+0x11>
    6596:	10 91 fe 08 	lds	r17, 0x08FE	; 0x8008fe <_ZN8SdVolume12cacheBuffer_E+0x12>
    659a:	19 8f       	std	Y+25, r17	; 0x19
    659c:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    659e:	a0 91 fc 08 	lds	r26, 0x08FC	; 0x8008fc <_ZN8SdVolume12cacheBuffer_E+0x10>
    65a2:	b0 e0       	ldi	r27, 0x00	; 0
    65a4:	40 d1       	rcall	.+640    	; 0x6826 <__muluhisi3>
    65a6:	86 0e       	add	r8, r22
    65a8:	97 1e       	adc	r9, r23
    65aa:	a8 1e       	adc	r10, r24
    65ac:	b9 1e       	adc	r11, r25
    65ae:	8a 8e       	std	Y+26, r8	; 0x1a
    65b0:	9b 8e       	std	Y+27, r9	; 0x1b
    65b2:	ac 8e       	std	Y+28, r10	; 0x1c
    65b4:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    65b6:	85 e0       	ldi	r24, 0x05	; 5
    65b8:	00 0f       	add	r16, r16
    65ba:	11 1f       	adc	r17, r17
    65bc:	8a 95       	dec	r24
    65be:	e1 f7       	brne	.-8      	; 0x65b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    65c0:	01 50       	subi	r16, 0x01	; 1
    65c2:	1e 4f       	sbci	r17, 0xFE	; 254
    65c4:	01 2f       	mov	r16, r17
    65c6:	11 27       	eor	r17, r17
    65c8:	06 95       	lsr	r16
    65ca:	80 0e       	add	r8, r16
    65cc:	91 1e       	adc	r9, r17
    65ce:	a1 1c       	adc	r10, r1
    65d0:	b1 1c       	adc	r11, r1
    65d2:	8e 86       	std	Y+14, r8	; 0x0e
    65d4:	9f 86       	std	Y+15, r9	; 0x0f
    65d6:	a8 8a       	std	Y+16, r10	; 0x10
    65d8:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    65da:	20 91 ff 08 	lds	r18, 0x08FF	; 0x8008ff <_ZN8SdVolume12cacheBuffer_E+0x13>
    65de:	30 91 00 09 	lds	r19, 0x0900	; 0x800900 <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    65e2:	21 15       	cp	r18, r1
    65e4:	31 05       	cpc	r19, r1
    65e6:	21 f0       	breq	.+8      	; 0x65f0 <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    65e8:	a9 01       	movw	r20, r18
    65ea:	60 e0       	ldi	r22, 0x00	; 0
    65ec:	70 e0       	ldi	r23, 0x00	; 0
    65ee:	08 c0       	rjmp	.+16     	; 0x6600 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    65f0:	40 91 0c 09 	lds	r20, 0x090C	; 0x80090c <_ZN8SdVolume12cacheBuffer_E+0x20>
    65f4:	50 91 0d 09 	lds	r21, 0x090D	; 0x80090d <_ZN8SdVolume12cacheBuffer_E+0x21>
    65f8:	60 91 0e 09 	lds	r22, 0x090E	; 0x80090e <_ZN8SdVolume12cacheBuffer_E+0x22>
    65fc:	70 91 0f 09 	lds	r23, 0x090F	; 0x80090f <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    6600:	d7 01       	movw	r26, r14
    6602:	c6 01       	movw	r24, r12
    6604:	88 19       	sub	r24, r8
    6606:	99 09       	sbc	r25, r9
    6608:	aa 09       	sbc	r26, r10
    660a:	bb 09       	sbc	r27, r11
    660c:	84 0f       	add	r24, r20
    660e:	95 1f       	adc	r25, r21
    6610:	a6 1f       	adc	r26, r22
    6612:	b7 1f       	adc	r27, r23
    6614:	04 c0       	rjmp	.+8      	; 0x661e <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    6616:	b6 95       	lsr	r27
    6618:	a7 95       	ror	r26
    661a:	97 95       	ror	r25
    661c:	87 95       	ror	r24
    661e:	ea 95       	dec	r30
    6620:	d2 f7       	brpl	.-12     	; 0x6616 <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    6622:	89 87       	std	Y+9, r24	; 0x09
    6624:	9a 87       	std	Y+10, r25	; 0x0a
    6626:	ab 87       	std	Y+11, r26	; 0x0b
    6628:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    662a:	85 3f       	cpi	r24, 0xF5	; 245
    662c:	2f e0       	ldi	r18, 0x0F	; 15
    662e:	92 07       	cpc	r25, r18
    6630:	a1 05       	cpc	r26, r1
    6632:	b1 05       	cpc	r27, r1
    6634:	10 f4       	brcc	.+4      	; 0x663a <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    6636:	8c e0       	ldi	r24, 0x0C	; 12
    6638:	14 c0       	rjmp	.+40     	; 0x6662 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    663a:	85 3f       	cpi	r24, 0xF5	; 245
    663c:	9f 4f       	sbci	r25, 0xFF	; 255
    663e:	a1 05       	cpc	r26, r1
    6640:	b1 05       	cpc	r27, r1
    6642:	10 f4       	brcc	.+4      	; 0x6648 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    6644:	80 e1       	ldi	r24, 0x10	; 16
    6646:	0d c0       	rjmp	.+26     	; 0x6662 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    6648:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    664c:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    6650:	a0 91 1a 09 	lds	r26, 0x091A	; 0x80091a <_ZN8SdVolume12cacheBuffer_E+0x2e>
    6654:	b0 91 1b 09 	lds	r27, 0x091B	; 0x80091b <_ZN8SdVolume12cacheBuffer_E+0x2f>
    6658:	8a 8f       	std	Y+26, r24	; 0x1a
    665a:	9b 8f       	std	Y+27, r25	; 0x1b
    665c:	ac 8f       	std	Y+28, r26	; 0x1c
    665e:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    6660:	80 e2       	ldi	r24, 0x20	; 32
    6662:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    6664:	81 e0       	ldi	r24, 0x01	; 1
}
    6666:	df 91       	pop	r29
    6668:	cf 91       	pop	r28
    666a:	1f 91       	pop	r17
    666c:	0f 91       	pop	r16
    666e:	ff 90       	pop	r15
    6670:	ef 90       	pop	r14
    6672:	df 90       	pop	r13
    6674:	cf 90       	pop	r12
    6676:	bf 90       	pop	r11
    6678:	af 90       	pop	r10
    667a:	9f 90       	pop	r9
    667c:	8f 90       	pop	r8
    667e:	08 95       	ret

00006680 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6680:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6682:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6684:	f8 94       	cli
  if (!initialized) {
    6686:	80 91 ef 0a 	lds	r24, 0x0AEF	; 0x800aef <_ZN8SPIClass11initializedE>
    668a:	81 11       	cpse	r24, r1
    668c:	27 c0       	rjmp	.+78     	; 0x66dc <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    668e:	e0 ea       	ldi	r30, 0xA0	; 160
    6690:	f2 e0       	ldi	r31, 0x02	; 2
    6692:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6694:	ea e5       	ldi	r30, 0x5A	; 90
    6696:	f2 e0       	ldi	r31, 0x02	; 2
    6698:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    669a:	e8 2f       	mov	r30, r24
    669c:	f0 e0       	ldi	r31, 0x00	; 0
    669e:	ee 0f       	add	r30, r30
    66a0:	ff 1f       	adc	r31, r31
    66a2:	eb 51       	subi	r30, 0x1B	; 27
    66a4:	fd 4f       	sbci	r31, 0xFD	; 253
    66a6:	a5 91       	lpm	r26, Z+
    66a8:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    66aa:	ec 91       	ld	r30, X
    66ac:	e9 23       	and	r30, r25
    66ae:	21 f4       	brne	.+8      	; 0x66b8 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    66b0:	61 e0       	ldi	r22, 0x01	; 1
    66b2:	85 e3       	ldi	r24, 0x35	; 53
    66b4:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    66b8:	61 e0       	ldi	r22, 0x01	; 1
    66ba:	85 e3       	ldi	r24, 0x35	; 53
    66bc:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    66c0:	8c b5       	in	r24, 0x2c	; 44
    66c2:	80 61       	ori	r24, 0x10	; 16
    66c4:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    66c6:	8c b5       	in	r24, 0x2c	; 44
    66c8:	80 64       	ori	r24, 0x40	; 64
    66ca:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    66cc:	61 e0       	ldi	r22, 0x01	; 1
    66ce:	84 e3       	ldi	r24, 0x34	; 52
    66d0:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>
    pinMode(MOSI, OUTPUT);
    66d4:	61 e0       	ldi	r22, 0x01	; 1
    66d6:	83 e3       	ldi	r24, 0x33	; 51
    66d8:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <pinMode>
  }
  initialized++; // reference count
    66dc:	80 91 ef 0a 	lds	r24, 0x0AEF	; 0x800aef <_ZN8SPIClass11initializedE>
    66e0:	8f 5f       	subi	r24, 0xFF	; 255
    66e2:	80 93 ef 0a 	sts	0x0AEF, r24	; 0x800aef <_ZN8SPIClass11initializedE>
  SREG = sreg;
    66e6:	cf bf       	out	0x3f, r28	; 63
}
    66e8:	cf 91       	pop	r28
    66ea:	08 95       	ret

000066ec <yield>:
    66ec:	08 95       	ret

000066ee <__fixunssfsi>:
    66ee:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__fp_splitA>
    66f2:	88 f0       	brcs	.+34     	; 0x6716 <__fixunssfsi+0x28>
    66f4:	9f 57       	subi	r25, 0x7F	; 127
    66f6:	98 f0       	brcs	.+38     	; 0x671e <__fixunssfsi+0x30>
    66f8:	b9 2f       	mov	r27, r25
    66fa:	99 27       	eor	r25, r25
    66fc:	b7 51       	subi	r27, 0x17	; 23
    66fe:	b0 f0       	brcs	.+44     	; 0x672c <__fixunssfsi+0x3e>
    6700:	e1 f0       	breq	.+56     	; 0x673a <__fixunssfsi+0x4c>
    6702:	66 0f       	add	r22, r22
    6704:	77 1f       	adc	r23, r23
    6706:	88 1f       	adc	r24, r24
    6708:	99 1f       	adc	r25, r25
    670a:	1a f0       	brmi	.+6      	; 0x6712 <__fixunssfsi+0x24>
    670c:	ba 95       	dec	r27
    670e:	c9 f7       	brne	.-14     	; 0x6702 <__fixunssfsi+0x14>
    6710:	14 c0       	rjmp	.+40     	; 0x673a <__fixunssfsi+0x4c>
    6712:	b1 30       	cpi	r27, 0x01	; 1
    6714:	91 f0       	breq	.+36     	; 0x673a <__fixunssfsi+0x4c>
    6716:	0e 94 05 1c 	call	0x380a	; 0x380a <__fp_zero>
    671a:	b1 e0       	ldi	r27, 0x01	; 1
    671c:	08 95       	ret
    671e:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__fp_zero>
    6722:	67 2f       	mov	r22, r23
    6724:	78 2f       	mov	r23, r24
    6726:	88 27       	eor	r24, r24
    6728:	b8 5f       	subi	r27, 0xF8	; 248
    672a:	39 f0       	breq	.+14     	; 0x673a <__fixunssfsi+0x4c>
    672c:	b9 3f       	cpi	r27, 0xF9	; 249
    672e:	cc f3       	brlt	.-14     	; 0x6722 <__fixunssfsi+0x34>
    6730:	86 95       	lsr	r24
    6732:	77 95       	ror	r23
    6734:	67 95       	ror	r22
    6736:	b3 95       	inc	r27
    6738:	d9 f7       	brne	.-10     	; 0x6730 <__fixunssfsi+0x42>
    673a:	3e f4       	brtc	.+14     	; 0x674a <__fixunssfsi+0x5c>
    673c:	90 95       	com	r25
    673e:	80 95       	com	r24
    6740:	70 95       	com	r23
    6742:	61 95       	neg	r22
    6744:	7f 4f       	sbci	r23, 0xFF	; 255
    6746:	8f 4f       	sbci	r24, 0xFF	; 255
    6748:	9f 4f       	sbci	r25, 0xFF	; 255
    674a:	08 95       	ret

0000674c <__unordsf2>:
    674c:	0e 94 87 1b 	call	0x370e	; 0x370e <__fp_cmp>
    6750:	88 0b       	sbc	r24, r24
    6752:	99 0b       	sbc	r25, r25
    6754:	08 95       	ret

00006756 <__mulsi3>:
    6756:	db 01       	movw	r26, r22
    6758:	8f 93       	push	r24
    675a:	9f 93       	push	r25
    675c:	64 d0       	rcall	.+200    	; 0x6826 <__muluhisi3>
    675e:	bf 91       	pop	r27
    6760:	af 91       	pop	r26
    6762:	a2 9f       	mul	r26, r18
    6764:	80 0d       	add	r24, r0
    6766:	91 1d       	adc	r25, r1
    6768:	a3 9f       	mul	r26, r19
    676a:	90 0d       	add	r25, r0
    676c:	b2 9f       	mul	r27, r18
    676e:	90 0d       	add	r25, r0
    6770:	11 24       	eor	r1, r1
    6772:	08 95       	ret

00006774 <__udivmodqi4>:
    6774:	99 1b       	sub	r25, r25
    6776:	79 e0       	ldi	r23, 0x09	; 9
    6778:	04 c0       	rjmp	.+8      	; 0x6782 <__udivmodqi4_ep>

0000677a <__udivmodqi4_loop>:
    677a:	99 1f       	adc	r25, r25
    677c:	96 17       	cp	r25, r22
    677e:	08 f0       	brcs	.+2      	; 0x6782 <__udivmodqi4_ep>
    6780:	96 1b       	sub	r25, r22

00006782 <__udivmodqi4_ep>:
    6782:	88 1f       	adc	r24, r24
    6784:	7a 95       	dec	r23
    6786:	c9 f7       	brne	.-14     	; 0x677a <__udivmodqi4_loop>
    6788:	80 95       	com	r24
    678a:	08 95       	ret

0000678c <__udivmodhi4>:
    678c:	aa 1b       	sub	r26, r26
    678e:	bb 1b       	sub	r27, r27
    6790:	51 e1       	ldi	r21, 0x11	; 17
    6792:	07 c0       	rjmp	.+14     	; 0x67a2 <__udivmodhi4_ep>

00006794 <__udivmodhi4_loop>:
    6794:	aa 1f       	adc	r26, r26
    6796:	bb 1f       	adc	r27, r27
    6798:	a6 17       	cp	r26, r22
    679a:	b7 07       	cpc	r27, r23
    679c:	10 f0       	brcs	.+4      	; 0x67a2 <__udivmodhi4_ep>
    679e:	a6 1b       	sub	r26, r22
    67a0:	b7 0b       	sbc	r27, r23

000067a2 <__udivmodhi4_ep>:
    67a2:	88 1f       	adc	r24, r24
    67a4:	99 1f       	adc	r25, r25
    67a6:	5a 95       	dec	r21
    67a8:	a9 f7       	brne	.-22     	; 0x6794 <__udivmodhi4_loop>
    67aa:	80 95       	com	r24
    67ac:	90 95       	com	r25
    67ae:	bc 01       	movw	r22, r24
    67b0:	cd 01       	movw	r24, r26
    67b2:	08 95       	ret

000067b4 <__udivmodsi4>:
    67b4:	a1 e2       	ldi	r26, 0x21	; 33
    67b6:	1a 2e       	mov	r1, r26
    67b8:	aa 1b       	sub	r26, r26
    67ba:	bb 1b       	sub	r27, r27
    67bc:	fd 01       	movw	r30, r26
    67be:	0d c0       	rjmp	.+26     	; 0x67da <__udivmodsi4_ep>

000067c0 <__udivmodsi4_loop>:
    67c0:	aa 1f       	adc	r26, r26
    67c2:	bb 1f       	adc	r27, r27
    67c4:	ee 1f       	adc	r30, r30
    67c6:	ff 1f       	adc	r31, r31
    67c8:	a2 17       	cp	r26, r18
    67ca:	b3 07       	cpc	r27, r19
    67cc:	e4 07       	cpc	r30, r20
    67ce:	f5 07       	cpc	r31, r21
    67d0:	20 f0       	brcs	.+8      	; 0x67da <__udivmodsi4_ep>
    67d2:	a2 1b       	sub	r26, r18
    67d4:	b3 0b       	sbc	r27, r19
    67d6:	e4 0b       	sbc	r30, r20
    67d8:	f5 0b       	sbc	r31, r21

000067da <__udivmodsi4_ep>:
    67da:	66 1f       	adc	r22, r22
    67dc:	77 1f       	adc	r23, r23
    67de:	88 1f       	adc	r24, r24
    67e0:	99 1f       	adc	r25, r25
    67e2:	1a 94       	dec	r1
    67e4:	69 f7       	brne	.-38     	; 0x67c0 <__udivmodsi4_loop>
    67e6:	60 95       	com	r22
    67e8:	70 95       	com	r23
    67ea:	80 95       	com	r24
    67ec:	90 95       	com	r25
    67ee:	9b 01       	movw	r18, r22
    67f0:	ac 01       	movw	r20, r24
    67f2:	bd 01       	movw	r22, r26
    67f4:	cf 01       	movw	r24, r30
    67f6:	08 95       	ret

000067f8 <__tablejump2__>:
    67f8:	ee 0f       	add	r30, r30
    67fa:	ff 1f       	adc	r31, r31
    67fc:	88 1f       	adc	r24, r24
    67fe:	8b bf       	out	0x3b, r24	; 59
    6800:	07 90       	elpm	r0, Z+
    6802:	f6 91       	elpm	r31, Z
    6804:	e0 2d       	mov	r30, r0
    6806:	19 94       	eijmp

00006808 <__umulhisi3>:
    6808:	a2 9f       	mul	r26, r18
    680a:	b0 01       	movw	r22, r0
    680c:	b3 9f       	mul	r27, r19
    680e:	c0 01       	movw	r24, r0
    6810:	a3 9f       	mul	r26, r19
    6812:	70 0d       	add	r23, r0
    6814:	81 1d       	adc	r24, r1
    6816:	11 24       	eor	r1, r1
    6818:	91 1d       	adc	r25, r1
    681a:	b2 9f       	mul	r27, r18
    681c:	70 0d       	add	r23, r0
    681e:	81 1d       	adc	r24, r1
    6820:	11 24       	eor	r1, r1
    6822:	91 1d       	adc	r25, r1
    6824:	08 95       	ret

00006826 <__muluhisi3>:
    6826:	f0 df       	rcall	.-32     	; 0x6808 <__umulhisi3>
    6828:	a5 9f       	mul	r26, r21
    682a:	90 0d       	add	r25, r0
    682c:	b4 9f       	mul	r27, r20
    682e:	90 0d       	add	r25, r0
    6830:	a4 9f       	mul	r26, r20
    6832:	80 0d       	add	r24, r0
    6834:	91 1d       	adc	r25, r1
    6836:	11 24       	eor	r1, r1
    6838:	08 95       	ret

0000683a <__mulshisi3>:
    683a:	b7 ff       	sbrs	r27, 7
    683c:	f4 cf       	rjmp	.-24     	; 0x6826 <__muluhisi3>

0000683e <__mulohisi3>:
    683e:	f3 df       	rcall	.-26     	; 0x6826 <__muluhisi3>
    6840:	82 1b       	sub	r24, r18
    6842:	93 0b       	sbc	r25, r19
    6844:	08 95       	ret

00006846 <__muldi3>:
    6846:	df 93       	push	r29
    6848:	cf 93       	push	r28
    684a:	1f 93       	push	r17
    684c:	0f 93       	push	r16
    684e:	9a 9d       	mul	r25, r10
    6850:	f0 2d       	mov	r31, r0
    6852:	21 9f       	mul	r18, r17
    6854:	f0 0d       	add	r31, r0
    6856:	8b 9d       	mul	r24, r11
    6858:	f0 0d       	add	r31, r0
    685a:	8a 9d       	mul	r24, r10
    685c:	e0 2d       	mov	r30, r0
    685e:	f1 0d       	add	r31, r1
    6860:	03 9f       	mul	r16, r19
    6862:	f0 0d       	add	r31, r0
    6864:	02 9f       	mul	r16, r18
    6866:	e0 0d       	add	r30, r0
    6868:	f1 1d       	adc	r31, r1
    686a:	4e 9d       	mul	r20, r14
    686c:	e0 0d       	add	r30, r0
    686e:	f1 1d       	adc	r31, r1
    6870:	5e 9d       	mul	r21, r14
    6872:	f0 0d       	add	r31, r0
    6874:	4f 9d       	mul	r20, r15
    6876:	f0 0d       	add	r31, r0
    6878:	7f 93       	push	r23
    687a:	6f 93       	push	r22
    687c:	bf 92       	push	r11
    687e:	af 92       	push	r10
    6880:	5f 93       	push	r21
    6882:	4f 93       	push	r20
    6884:	d5 01       	movw	r26, r10
    6886:	c0 df       	rcall	.-128    	; 0x6808 <__umulhisi3>
    6888:	8b 01       	movw	r16, r22
    688a:	ac 01       	movw	r20, r24
    688c:	d7 01       	movw	r26, r14
    688e:	bc df       	rcall	.-136    	; 0x6808 <__umulhisi3>
    6890:	eb 01       	movw	r28, r22
    6892:	e8 0f       	add	r30, r24
    6894:	f9 1f       	adc	r31, r25
    6896:	d6 01       	movw	r26, r12
    6898:	1f d0       	rcall	.+62     	; 0x68d8 <__muldi3_6>
    689a:	2f 91       	pop	r18
    689c:	3f 91       	pop	r19
    689e:	d6 01       	movw	r26, r12
    68a0:	b3 df       	rcall	.-154    	; 0x6808 <__umulhisi3>
    68a2:	c6 0f       	add	r28, r22
    68a4:	d7 1f       	adc	r29, r23
    68a6:	e8 1f       	adc	r30, r24
    68a8:	f9 1f       	adc	r31, r25
    68aa:	af 91       	pop	r26
    68ac:	bf 91       	pop	r27
    68ae:	14 d0       	rcall	.+40     	; 0x68d8 <__muldi3_6>
    68b0:	2f 91       	pop	r18
    68b2:	3f 91       	pop	r19
    68b4:	a9 df       	rcall	.-174    	; 0x6808 <__umulhisi3>
    68b6:	c6 0f       	add	r28, r22
    68b8:	d7 1f       	adc	r29, r23
    68ba:	e8 1f       	adc	r30, r24
    68bc:	f9 1f       	adc	r31, r25
    68be:	d6 01       	movw	r26, r12
    68c0:	a3 df       	rcall	.-186    	; 0x6808 <__umulhisi3>
    68c2:	e6 0f       	add	r30, r22
    68c4:	f7 1f       	adc	r31, r23
    68c6:	98 01       	movw	r18, r16
    68c8:	be 01       	movw	r22, r28
    68ca:	cf 01       	movw	r24, r30
    68cc:	11 24       	eor	r1, r1
    68ce:	0f 91       	pop	r16
    68d0:	1f 91       	pop	r17
    68d2:	cf 91       	pop	r28
    68d4:	df 91       	pop	r29
    68d6:	08 95       	ret

000068d8 <__muldi3_6>:
    68d8:	97 df       	rcall	.-210    	; 0x6808 <__umulhisi3>
    68da:	46 0f       	add	r20, r22
    68dc:	57 1f       	adc	r21, r23
    68de:	c8 1f       	adc	r28, r24
    68e0:	d9 1f       	adc	r29, r25
    68e2:	08 f4       	brcc	.+2      	; 0x68e6 <__muldi3_6+0xe>
    68e4:	31 96       	adiw	r30, 0x01	; 1
    68e6:	08 95       	ret

000068e8 <__moddi3>:
    68e8:	68 94       	set
    68ea:	01 c0       	rjmp	.+2      	; 0x68ee <__divdi3_moddi3>

000068ec <__divdi3>:
    68ec:	e8 94       	clt

000068ee <__divdi3_moddi3>:
    68ee:	f9 2f       	mov	r31, r25
    68f0:	f1 2b       	or	r31, r17
    68f2:	0a f0       	brmi	.+2      	; 0x68f6 <__divdi3_moddi3+0x8>
    68f4:	27 c0       	rjmp	.+78     	; 0x6944 <__udivdi3_umoddi3>
    68f6:	a0 e0       	ldi	r26, 0x00	; 0
    68f8:	b0 e0       	ldi	r27, 0x00	; 0
    68fa:	e0 e8       	ldi	r30, 0x80	; 128
    68fc:	f4 e3       	ldi	r31, 0x34	; 52
    68fe:	93 c0       	rjmp	.+294    	; 0x6a26 <__prologue_saves__+0xc>
    6900:	09 2e       	mov	r0, r25
    6902:	05 94       	asr	r0
    6904:	1a f4       	brpl	.+6      	; 0x690c <__divdi3_moddi3+0x1e>
    6906:	79 d0       	rcall	.+242    	; 0x69fa <__negdi2>
    6908:	11 23       	and	r17, r17
    690a:	92 f4       	brpl	.+36     	; 0x6930 <__divdi3_moddi3+0x42>
    690c:	f0 e8       	ldi	r31, 0x80	; 128
    690e:	0f 26       	eor	r0, r31
    6910:	ff ef       	ldi	r31, 0xFF	; 255
    6912:	e0 94       	com	r14
    6914:	f0 94       	com	r15
    6916:	00 95       	com	r16
    6918:	10 95       	com	r17
    691a:	b0 94       	com	r11
    691c:	c0 94       	com	r12
    691e:	d0 94       	com	r13
    6920:	a1 94       	neg	r10
    6922:	bf 0a       	sbc	r11, r31
    6924:	cf 0a       	sbc	r12, r31
    6926:	df 0a       	sbc	r13, r31
    6928:	ef 0a       	sbc	r14, r31
    692a:	ff 0a       	sbc	r15, r31
    692c:	0f 0b       	sbc	r16, r31
    692e:	1f 0b       	sbc	r17, r31
    6930:	13 d0       	rcall	.+38     	; 0x6958 <__udivmod64>
    6932:	07 fc       	sbrc	r0, 7
    6934:	62 d0       	rcall	.+196    	; 0x69fa <__negdi2>
    6936:	cd b7       	in	r28, 0x3d	; 61
    6938:	de b7       	in	r29, 0x3e	; 62
    693a:	ec e0       	ldi	r30, 0x0C	; 12
    693c:	90 c0       	rjmp	.+288    	; 0x6a5e <__epilogue_restores__+0xc>

0000693e <__umoddi3>:
    693e:	68 94       	set
    6940:	01 c0       	rjmp	.+2      	; 0x6944 <__udivdi3_umoddi3>

00006942 <__udivdi3>:
    6942:	e8 94       	clt

00006944 <__udivdi3_umoddi3>:
    6944:	8f 92       	push	r8
    6946:	9f 92       	push	r9
    6948:	cf 93       	push	r28
    694a:	df 93       	push	r29
    694c:	05 d0       	rcall	.+10     	; 0x6958 <__udivmod64>
    694e:	df 91       	pop	r29
    6950:	cf 91       	pop	r28
    6952:	9f 90       	pop	r9
    6954:	8f 90       	pop	r8
    6956:	08 95       	ret

00006958 <__udivmod64>:
    6958:	88 24       	eor	r8, r8
    695a:	99 24       	eor	r9, r9
    695c:	f4 01       	movw	r30, r8
    695e:	e4 01       	movw	r28, r8
    6960:	b0 e4       	ldi	r27, 0x40	; 64
    6962:	9f 93       	push	r25
    6964:	aa 27       	eor	r26, r26
    6966:	9a 15       	cp	r25, r10
    6968:	8b 04       	cpc	r8, r11
    696a:	9c 04       	cpc	r9, r12
    696c:	ed 05       	cpc	r30, r13
    696e:	fe 05       	cpc	r31, r14
    6970:	cf 05       	cpc	r28, r15
    6972:	d0 07       	cpc	r29, r16
    6974:	a1 07       	cpc	r26, r17
    6976:	98 f4       	brcc	.+38     	; 0x699e <__udivmod64+0x46>
    6978:	ad 2f       	mov	r26, r29
    697a:	dc 2f       	mov	r29, r28
    697c:	cf 2f       	mov	r28, r31
    697e:	fe 2f       	mov	r31, r30
    6980:	e9 2d       	mov	r30, r9
    6982:	98 2c       	mov	r9, r8
    6984:	89 2e       	mov	r8, r25
    6986:	98 2f       	mov	r25, r24
    6988:	87 2f       	mov	r24, r23
    698a:	76 2f       	mov	r23, r22
    698c:	65 2f       	mov	r22, r21
    698e:	54 2f       	mov	r21, r20
    6990:	43 2f       	mov	r20, r19
    6992:	32 2f       	mov	r19, r18
    6994:	22 27       	eor	r18, r18
    6996:	b8 50       	subi	r27, 0x08	; 8
    6998:	31 f7       	brne	.-52     	; 0x6966 <__udivmod64+0xe>
    699a:	bf 91       	pop	r27
    699c:	27 c0       	rjmp	.+78     	; 0x69ec <__udivmod64+0x94>
    699e:	1b 2e       	mov	r1, r27
    69a0:	bf 91       	pop	r27
    69a2:	bb 27       	eor	r27, r27
    69a4:	22 0f       	add	r18, r18
    69a6:	33 1f       	adc	r19, r19
    69a8:	44 1f       	adc	r20, r20
    69aa:	55 1f       	adc	r21, r21
    69ac:	66 1f       	adc	r22, r22
    69ae:	77 1f       	adc	r23, r23
    69b0:	88 1f       	adc	r24, r24
    69b2:	99 1f       	adc	r25, r25
    69b4:	88 1c       	adc	r8, r8
    69b6:	99 1c       	adc	r9, r9
    69b8:	ee 1f       	adc	r30, r30
    69ba:	ff 1f       	adc	r31, r31
    69bc:	cc 1f       	adc	r28, r28
    69be:	dd 1f       	adc	r29, r29
    69c0:	aa 1f       	adc	r26, r26
    69c2:	bb 1f       	adc	r27, r27
    69c4:	8a 14       	cp	r8, r10
    69c6:	9b 04       	cpc	r9, r11
    69c8:	ec 05       	cpc	r30, r12
    69ca:	fd 05       	cpc	r31, r13
    69cc:	ce 05       	cpc	r28, r14
    69ce:	df 05       	cpc	r29, r15
    69d0:	a0 07       	cpc	r26, r16
    69d2:	b1 07       	cpc	r27, r17
    69d4:	48 f0       	brcs	.+18     	; 0x69e8 <__udivmod64+0x90>
    69d6:	8a 18       	sub	r8, r10
    69d8:	9b 08       	sbc	r9, r11
    69da:	ec 09       	sbc	r30, r12
    69dc:	fd 09       	sbc	r31, r13
    69de:	ce 09       	sbc	r28, r14
    69e0:	df 09       	sbc	r29, r15
    69e2:	a0 0b       	sbc	r26, r16
    69e4:	b1 0b       	sbc	r27, r17
    69e6:	21 60       	ori	r18, 0x01	; 1
    69e8:	1a 94       	dec	r1
    69ea:	e1 f6       	brne	.-72     	; 0x69a4 <__udivmod64+0x4c>
    69ec:	2e f4       	brtc	.+10     	; 0x69f8 <__udivmod64+0xa0>
    69ee:	94 01       	movw	r18, r8
    69f0:	af 01       	movw	r20, r30
    69f2:	be 01       	movw	r22, r28
    69f4:	cd 01       	movw	r24, r26
    69f6:	00 0c       	add	r0, r0
    69f8:	08 95       	ret

000069fa <__negdi2>:
    69fa:	60 95       	com	r22
    69fc:	70 95       	com	r23
    69fe:	80 95       	com	r24
    6a00:	90 95       	com	r25
    6a02:	30 95       	com	r19
    6a04:	40 95       	com	r20
    6a06:	50 95       	com	r21
    6a08:	21 95       	neg	r18
    6a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a0c:	4f 4f       	sbci	r20, 0xFF	; 255
    6a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a10:	6f 4f       	sbci	r22, 0xFF	; 255
    6a12:	7f 4f       	sbci	r23, 0xFF	; 255
    6a14:	8f 4f       	sbci	r24, 0xFF	; 255
    6a16:	9f 4f       	sbci	r25, 0xFF	; 255
    6a18:	08 95       	ret

00006a1a <__prologue_saves__>:
    6a1a:	2f 92       	push	r2
    6a1c:	3f 92       	push	r3
    6a1e:	4f 92       	push	r4
    6a20:	5f 92       	push	r5
    6a22:	6f 92       	push	r6
    6a24:	7f 92       	push	r7
    6a26:	8f 92       	push	r8
    6a28:	9f 92       	push	r9
    6a2a:	af 92       	push	r10
    6a2c:	bf 92       	push	r11
    6a2e:	cf 92       	push	r12
    6a30:	df 92       	push	r13
    6a32:	ef 92       	push	r14
    6a34:	ff 92       	push	r15
    6a36:	0f 93       	push	r16
    6a38:	1f 93       	push	r17
    6a3a:	cf 93       	push	r28
    6a3c:	df 93       	push	r29
    6a3e:	cd b7       	in	r28, 0x3d	; 61
    6a40:	de b7       	in	r29, 0x3e	; 62
    6a42:	ca 1b       	sub	r28, r26
    6a44:	db 0b       	sbc	r29, r27
    6a46:	0f b6       	in	r0, 0x3f	; 63
    6a48:	f8 94       	cli
    6a4a:	de bf       	out	0x3e, r29	; 62
    6a4c:	0f be       	out	0x3f, r0	; 63
    6a4e:	cd bf       	out	0x3d, r28	; 61
    6a50:	19 94       	eijmp

00006a52 <__epilogue_restores__>:
    6a52:	2a 88       	ldd	r2, Y+18	; 0x12
    6a54:	39 88       	ldd	r3, Y+17	; 0x11
    6a56:	48 88       	ldd	r4, Y+16	; 0x10
    6a58:	5f 84       	ldd	r5, Y+15	; 0x0f
    6a5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    6a5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    6a5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6a60:	9b 84       	ldd	r9, Y+11	; 0x0b
    6a62:	aa 84       	ldd	r10, Y+10	; 0x0a
    6a64:	b9 84       	ldd	r11, Y+9	; 0x09
    6a66:	c8 84       	ldd	r12, Y+8	; 0x08
    6a68:	df 80       	ldd	r13, Y+7	; 0x07
    6a6a:	ee 80       	ldd	r14, Y+6	; 0x06
    6a6c:	fd 80       	ldd	r15, Y+5	; 0x05
    6a6e:	0c 81       	ldd	r16, Y+4	; 0x04
    6a70:	1b 81       	ldd	r17, Y+3	; 0x03
    6a72:	aa 81       	ldd	r26, Y+2	; 0x02
    6a74:	b9 81       	ldd	r27, Y+1	; 0x01
    6a76:	ce 0f       	add	r28, r30
    6a78:	d1 1d       	adc	r29, r1
    6a7a:	0f b6       	in	r0, 0x3f	; 63
    6a7c:	f8 94       	cli
    6a7e:	de bf       	out	0x3e, r29	; 62
    6a80:	0f be       	out	0x3f, r0	; 63
    6a82:	cd bf       	out	0x3d, r28	; 61
    6a84:	ed 01       	movw	r28, r26
    6a86:	08 95       	ret

00006a88 <__ashldi3>:
    6a88:	0f 93       	push	r16
    6a8a:	08 30       	cpi	r16, 0x08	; 8
    6a8c:	90 f0       	brcs	.+36     	; 0x6ab2 <__ashldi3+0x2a>
    6a8e:	98 2f       	mov	r25, r24
    6a90:	87 2f       	mov	r24, r23
    6a92:	76 2f       	mov	r23, r22
    6a94:	65 2f       	mov	r22, r21
    6a96:	54 2f       	mov	r21, r20
    6a98:	43 2f       	mov	r20, r19
    6a9a:	32 2f       	mov	r19, r18
    6a9c:	22 27       	eor	r18, r18
    6a9e:	08 50       	subi	r16, 0x08	; 8
    6aa0:	f4 cf       	rjmp	.-24     	; 0x6a8a <__ashldi3+0x2>
    6aa2:	22 0f       	add	r18, r18
    6aa4:	33 1f       	adc	r19, r19
    6aa6:	44 1f       	adc	r20, r20
    6aa8:	55 1f       	adc	r21, r21
    6aaa:	66 1f       	adc	r22, r22
    6aac:	77 1f       	adc	r23, r23
    6aae:	88 1f       	adc	r24, r24
    6ab0:	99 1f       	adc	r25, r25
    6ab2:	0a 95       	dec	r16
    6ab4:	b2 f7       	brpl	.-20     	; 0x6aa2 <__ashldi3+0x1a>
    6ab6:	0f 91       	pop	r16
    6ab8:	08 95       	ret

00006aba <__ashrdi3>:
    6aba:	97 fb       	bst	r25, 7
    6abc:	10 f8       	bld	r1, 0

00006abe <__lshrdi3>:
    6abe:	16 94       	lsr	r1
    6ac0:	00 08       	sbc	r0, r0
    6ac2:	0f 93       	push	r16
    6ac4:	08 30       	cpi	r16, 0x08	; 8
    6ac6:	98 f0       	brcs	.+38     	; 0x6aee <__lshrdi3+0x30>
    6ac8:	08 50       	subi	r16, 0x08	; 8
    6aca:	23 2f       	mov	r18, r19
    6acc:	34 2f       	mov	r19, r20
    6ace:	45 2f       	mov	r20, r21
    6ad0:	56 2f       	mov	r21, r22
    6ad2:	67 2f       	mov	r22, r23
    6ad4:	78 2f       	mov	r23, r24
    6ad6:	89 2f       	mov	r24, r25
    6ad8:	90 2d       	mov	r25, r0
    6ada:	f4 cf       	rjmp	.-24     	; 0x6ac4 <__lshrdi3+0x6>
    6adc:	05 94       	asr	r0
    6ade:	97 95       	ror	r25
    6ae0:	87 95       	ror	r24
    6ae2:	77 95       	ror	r23
    6ae4:	67 95       	ror	r22
    6ae6:	57 95       	ror	r21
    6ae8:	47 95       	ror	r20
    6aea:	37 95       	ror	r19
    6aec:	27 95       	ror	r18
    6aee:	0a 95       	dec	r16
    6af0:	aa f7       	brpl	.-22     	; 0x6adc <__lshrdi3+0x1e>
    6af2:	0f 91       	pop	r16
    6af4:	08 95       	ret

00006af6 <__adddi3>:
    6af6:	2a 0d       	add	r18, r10
    6af8:	3b 1d       	adc	r19, r11
    6afa:	4c 1d       	adc	r20, r12
    6afc:	5d 1d       	adc	r21, r13
    6afe:	6e 1d       	adc	r22, r14
    6b00:	7f 1d       	adc	r23, r15
    6b02:	80 1f       	adc	r24, r16
    6b04:	91 1f       	adc	r25, r17
    6b06:	08 95       	ret

00006b08 <__subdi3>:
    6b08:	2a 19       	sub	r18, r10
    6b0a:	3b 09       	sbc	r19, r11
    6b0c:	4c 09       	sbc	r20, r12
    6b0e:	5d 09       	sbc	r21, r13
    6b10:	6e 09       	sbc	r22, r14
    6b12:	7f 09       	sbc	r23, r15
    6b14:	80 0b       	sbc	r24, r16
    6b16:	91 0b       	sbc	r25, r17
    6b18:	08 95       	ret

00006b1a <__cmpdi2_s8>:
    6b1a:	00 24       	eor	r0, r0
    6b1c:	a7 fd       	sbrc	r26, 7
    6b1e:	00 94       	com	r0
    6b20:	2a 17       	cp	r18, r26
    6b22:	30 05       	cpc	r19, r0
    6b24:	40 05       	cpc	r20, r0
    6b26:	50 05       	cpc	r21, r0
    6b28:	60 05       	cpc	r22, r0
    6b2a:	70 05       	cpc	r23, r0
    6b2c:	80 05       	cpc	r24, r0
    6b2e:	90 05       	cpc	r25, r0
    6b30:	08 95       	ret

00006b32 <malloc>:
    6b32:	0f 93       	push	r16
    6b34:	1f 93       	push	r17
    6b36:	cf 93       	push	r28
    6b38:	df 93       	push	r29
    6b3a:	82 30       	cpi	r24, 0x02	; 2
    6b3c:	91 05       	cpc	r25, r1
    6b3e:	10 f4       	brcc	.+4      	; 0x6b44 <malloc+0x12>
    6b40:	82 e0       	ldi	r24, 0x02	; 2
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	e0 91 f2 0a 	lds	r30, 0x0AF2	; 0x800af2 <__flp>
    6b48:	f0 91 f3 0a 	lds	r31, 0x0AF3	; 0x800af3 <__flp+0x1>
    6b4c:	20 e0       	ldi	r18, 0x00	; 0
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	a0 e0       	ldi	r26, 0x00	; 0
    6b52:	b0 e0       	ldi	r27, 0x00	; 0
    6b54:	30 97       	sbiw	r30, 0x00	; 0
    6b56:	19 f1       	breq	.+70     	; 0x6b9e <malloc+0x6c>
    6b58:	40 81       	ld	r20, Z
    6b5a:	51 81       	ldd	r21, Z+1	; 0x01
    6b5c:	02 81       	ldd	r16, Z+2	; 0x02
    6b5e:	13 81       	ldd	r17, Z+3	; 0x03
    6b60:	48 17       	cp	r20, r24
    6b62:	59 07       	cpc	r21, r25
    6b64:	c8 f0       	brcs	.+50     	; 0x6b98 <malloc+0x66>
    6b66:	84 17       	cp	r24, r20
    6b68:	95 07       	cpc	r25, r21
    6b6a:	69 f4       	brne	.+26     	; 0x6b86 <malloc+0x54>
    6b6c:	10 97       	sbiw	r26, 0x00	; 0
    6b6e:	31 f0       	breq	.+12     	; 0x6b7c <malloc+0x4a>
    6b70:	12 96       	adiw	r26, 0x02	; 2
    6b72:	0c 93       	st	X, r16
    6b74:	12 97       	sbiw	r26, 0x02	; 2
    6b76:	13 96       	adiw	r26, 0x03	; 3
    6b78:	1c 93       	st	X, r17
    6b7a:	27 c0       	rjmp	.+78     	; 0x6bca <malloc+0x98>
    6b7c:	00 93 f2 0a 	sts	0x0AF2, r16	; 0x800af2 <__flp>
    6b80:	10 93 f3 0a 	sts	0x0AF3, r17	; 0x800af3 <__flp+0x1>
    6b84:	22 c0       	rjmp	.+68     	; 0x6bca <malloc+0x98>
    6b86:	21 15       	cp	r18, r1
    6b88:	31 05       	cpc	r19, r1
    6b8a:	19 f0       	breq	.+6      	; 0x6b92 <malloc+0x60>
    6b8c:	42 17       	cp	r20, r18
    6b8e:	53 07       	cpc	r21, r19
    6b90:	18 f4       	brcc	.+6      	; 0x6b98 <malloc+0x66>
    6b92:	9a 01       	movw	r18, r20
    6b94:	bd 01       	movw	r22, r26
    6b96:	ef 01       	movw	r28, r30
    6b98:	df 01       	movw	r26, r30
    6b9a:	f8 01       	movw	r30, r16
    6b9c:	db cf       	rjmp	.-74     	; 0x6b54 <malloc+0x22>
    6b9e:	21 15       	cp	r18, r1
    6ba0:	31 05       	cpc	r19, r1
    6ba2:	f9 f0       	breq	.+62     	; 0x6be2 <malloc+0xb0>
    6ba4:	28 1b       	sub	r18, r24
    6ba6:	39 0b       	sbc	r19, r25
    6ba8:	24 30       	cpi	r18, 0x04	; 4
    6baa:	31 05       	cpc	r19, r1
    6bac:	80 f4       	brcc	.+32     	; 0x6bce <malloc+0x9c>
    6bae:	8a 81       	ldd	r24, Y+2	; 0x02
    6bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    6bb2:	61 15       	cp	r22, r1
    6bb4:	71 05       	cpc	r23, r1
    6bb6:	21 f0       	breq	.+8      	; 0x6bc0 <malloc+0x8e>
    6bb8:	fb 01       	movw	r30, r22
    6bba:	93 83       	std	Z+3, r25	; 0x03
    6bbc:	82 83       	std	Z+2, r24	; 0x02
    6bbe:	04 c0       	rjmp	.+8      	; 0x6bc8 <malloc+0x96>
    6bc0:	90 93 f3 0a 	sts	0x0AF3, r25	; 0x800af3 <__flp+0x1>
    6bc4:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <__flp>
    6bc8:	fe 01       	movw	r30, r28
    6bca:	32 96       	adiw	r30, 0x02	; 2
    6bcc:	44 c0       	rjmp	.+136    	; 0x6c56 <malloc+0x124>
    6bce:	fe 01       	movw	r30, r28
    6bd0:	e2 0f       	add	r30, r18
    6bd2:	f3 1f       	adc	r31, r19
    6bd4:	81 93       	st	Z+, r24
    6bd6:	91 93       	st	Z+, r25
    6bd8:	22 50       	subi	r18, 0x02	; 2
    6bda:	31 09       	sbc	r19, r1
    6bdc:	39 83       	std	Y+1, r19	; 0x01
    6bde:	28 83       	st	Y, r18
    6be0:	3a c0       	rjmp	.+116    	; 0x6c56 <malloc+0x124>
    6be2:	20 91 f0 0a 	lds	r18, 0x0AF0	; 0x800af0 <__brkval>
    6be6:	30 91 f1 0a 	lds	r19, 0x0AF1	; 0x800af1 <__brkval+0x1>
    6bea:	23 2b       	or	r18, r19
    6bec:	41 f4       	brne	.+16     	; 0x6bfe <malloc+0xcc>
    6bee:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6bf2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6bf6:	30 93 f1 0a 	sts	0x0AF1, r19	; 0x800af1 <__brkval+0x1>
    6bfa:	20 93 f0 0a 	sts	0x0AF0, r18	; 0x800af0 <__brkval>
    6bfe:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6c02:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6c06:	21 15       	cp	r18, r1
    6c08:	31 05       	cpc	r19, r1
    6c0a:	41 f4       	brne	.+16     	; 0x6c1c <malloc+0xea>
    6c0c:	2d b7       	in	r18, 0x3d	; 61
    6c0e:	3e b7       	in	r19, 0x3e	; 62
    6c10:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6c14:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6c18:	24 1b       	sub	r18, r20
    6c1a:	35 0b       	sbc	r19, r21
    6c1c:	e0 91 f0 0a 	lds	r30, 0x0AF0	; 0x800af0 <__brkval>
    6c20:	f0 91 f1 0a 	lds	r31, 0x0AF1	; 0x800af1 <__brkval+0x1>
    6c24:	e2 17       	cp	r30, r18
    6c26:	f3 07       	cpc	r31, r19
    6c28:	a0 f4       	brcc	.+40     	; 0x6c52 <malloc+0x120>
    6c2a:	2e 1b       	sub	r18, r30
    6c2c:	3f 0b       	sbc	r19, r31
    6c2e:	28 17       	cp	r18, r24
    6c30:	39 07       	cpc	r19, r25
    6c32:	78 f0       	brcs	.+30     	; 0x6c52 <malloc+0x120>
    6c34:	ac 01       	movw	r20, r24
    6c36:	4e 5f       	subi	r20, 0xFE	; 254
    6c38:	5f 4f       	sbci	r21, 0xFF	; 255
    6c3a:	24 17       	cp	r18, r20
    6c3c:	35 07       	cpc	r19, r21
    6c3e:	48 f0       	brcs	.+18     	; 0x6c52 <malloc+0x120>
    6c40:	4e 0f       	add	r20, r30
    6c42:	5f 1f       	adc	r21, r31
    6c44:	50 93 f1 0a 	sts	0x0AF1, r21	; 0x800af1 <__brkval+0x1>
    6c48:	40 93 f0 0a 	sts	0x0AF0, r20	; 0x800af0 <__brkval>
    6c4c:	81 93       	st	Z+, r24
    6c4e:	91 93       	st	Z+, r25
    6c50:	02 c0       	rjmp	.+4      	; 0x6c56 <malloc+0x124>
    6c52:	e0 e0       	ldi	r30, 0x00	; 0
    6c54:	f0 e0       	ldi	r31, 0x00	; 0
    6c56:	cf 01       	movw	r24, r30
    6c58:	df 91       	pop	r29
    6c5a:	cf 91       	pop	r28
    6c5c:	1f 91       	pop	r17
    6c5e:	0f 91       	pop	r16
    6c60:	08 95       	ret

00006c62 <free>:
    6c62:	cf 93       	push	r28
    6c64:	df 93       	push	r29
    6c66:	00 97       	sbiw	r24, 0x00	; 0
    6c68:	09 f4       	brne	.+2      	; 0x6c6c <free+0xa>
    6c6a:	81 c0       	rjmp	.+258    	; 0x6d6e <free+0x10c>
    6c6c:	fc 01       	movw	r30, r24
    6c6e:	32 97       	sbiw	r30, 0x02	; 2
    6c70:	13 82       	std	Z+3, r1	; 0x03
    6c72:	12 82       	std	Z+2, r1	; 0x02
    6c74:	a0 91 f2 0a 	lds	r26, 0x0AF2	; 0x800af2 <__flp>
    6c78:	b0 91 f3 0a 	lds	r27, 0x0AF3	; 0x800af3 <__flp+0x1>
    6c7c:	10 97       	sbiw	r26, 0x00	; 0
    6c7e:	81 f4       	brne	.+32     	; 0x6ca0 <free+0x3e>
    6c80:	20 81       	ld	r18, Z
    6c82:	31 81       	ldd	r19, Z+1	; 0x01
    6c84:	82 0f       	add	r24, r18
    6c86:	93 1f       	adc	r25, r19
    6c88:	20 91 f0 0a 	lds	r18, 0x0AF0	; 0x800af0 <__brkval>
    6c8c:	30 91 f1 0a 	lds	r19, 0x0AF1	; 0x800af1 <__brkval+0x1>
    6c90:	28 17       	cp	r18, r24
    6c92:	39 07       	cpc	r19, r25
    6c94:	51 f5       	brne	.+84     	; 0x6cea <free+0x88>
    6c96:	f0 93 f1 0a 	sts	0x0AF1, r31	; 0x800af1 <__brkval+0x1>
    6c9a:	e0 93 f0 0a 	sts	0x0AF0, r30	; 0x800af0 <__brkval>
    6c9e:	67 c0       	rjmp	.+206    	; 0x6d6e <free+0x10c>
    6ca0:	ed 01       	movw	r28, r26
    6ca2:	20 e0       	ldi	r18, 0x00	; 0
    6ca4:	30 e0       	ldi	r19, 0x00	; 0
    6ca6:	ce 17       	cp	r28, r30
    6ca8:	df 07       	cpc	r29, r31
    6caa:	40 f4       	brcc	.+16     	; 0x6cbc <free+0x5a>
    6cac:	4a 81       	ldd	r20, Y+2	; 0x02
    6cae:	5b 81       	ldd	r21, Y+3	; 0x03
    6cb0:	9e 01       	movw	r18, r28
    6cb2:	41 15       	cp	r20, r1
    6cb4:	51 05       	cpc	r21, r1
    6cb6:	f1 f0       	breq	.+60     	; 0x6cf4 <free+0x92>
    6cb8:	ea 01       	movw	r28, r20
    6cba:	f5 cf       	rjmp	.-22     	; 0x6ca6 <free+0x44>
    6cbc:	d3 83       	std	Z+3, r29	; 0x03
    6cbe:	c2 83       	std	Z+2, r28	; 0x02
    6cc0:	40 81       	ld	r20, Z
    6cc2:	51 81       	ldd	r21, Z+1	; 0x01
    6cc4:	84 0f       	add	r24, r20
    6cc6:	95 1f       	adc	r25, r21
    6cc8:	c8 17       	cp	r28, r24
    6cca:	d9 07       	cpc	r29, r25
    6ccc:	59 f4       	brne	.+22     	; 0x6ce4 <free+0x82>
    6cce:	88 81       	ld	r24, Y
    6cd0:	99 81       	ldd	r25, Y+1	; 0x01
    6cd2:	84 0f       	add	r24, r20
    6cd4:	95 1f       	adc	r25, r21
    6cd6:	02 96       	adiw	r24, 0x02	; 2
    6cd8:	91 83       	std	Z+1, r25	; 0x01
    6cda:	80 83       	st	Z, r24
    6cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    6cde:	9b 81       	ldd	r25, Y+3	; 0x03
    6ce0:	93 83       	std	Z+3, r25	; 0x03
    6ce2:	82 83       	std	Z+2, r24	; 0x02
    6ce4:	21 15       	cp	r18, r1
    6ce6:	31 05       	cpc	r19, r1
    6ce8:	29 f4       	brne	.+10     	; 0x6cf4 <free+0x92>
    6cea:	f0 93 f3 0a 	sts	0x0AF3, r31	; 0x800af3 <__flp+0x1>
    6cee:	e0 93 f2 0a 	sts	0x0AF2, r30	; 0x800af2 <__flp>
    6cf2:	3d c0       	rjmp	.+122    	; 0x6d6e <free+0x10c>
    6cf4:	e9 01       	movw	r28, r18
    6cf6:	fb 83       	std	Y+3, r31	; 0x03
    6cf8:	ea 83       	std	Y+2, r30	; 0x02
    6cfa:	49 91       	ld	r20, Y+
    6cfc:	59 91       	ld	r21, Y+
    6cfe:	c4 0f       	add	r28, r20
    6d00:	d5 1f       	adc	r29, r21
    6d02:	ec 17       	cp	r30, r28
    6d04:	fd 07       	cpc	r31, r29
    6d06:	61 f4       	brne	.+24     	; 0x6d20 <free+0xbe>
    6d08:	80 81       	ld	r24, Z
    6d0a:	91 81       	ldd	r25, Z+1	; 0x01
    6d0c:	84 0f       	add	r24, r20
    6d0e:	95 1f       	adc	r25, r21
    6d10:	02 96       	adiw	r24, 0x02	; 2
    6d12:	e9 01       	movw	r28, r18
    6d14:	99 83       	std	Y+1, r25	; 0x01
    6d16:	88 83       	st	Y, r24
    6d18:	82 81       	ldd	r24, Z+2	; 0x02
    6d1a:	93 81       	ldd	r25, Z+3	; 0x03
    6d1c:	9b 83       	std	Y+3, r25	; 0x03
    6d1e:	8a 83       	std	Y+2, r24	; 0x02
    6d20:	e0 e0       	ldi	r30, 0x00	; 0
    6d22:	f0 e0       	ldi	r31, 0x00	; 0
    6d24:	12 96       	adiw	r26, 0x02	; 2
    6d26:	8d 91       	ld	r24, X+
    6d28:	9c 91       	ld	r25, X
    6d2a:	13 97       	sbiw	r26, 0x03	; 3
    6d2c:	00 97       	sbiw	r24, 0x00	; 0
    6d2e:	19 f0       	breq	.+6      	; 0x6d36 <free+0xd4>
    6d30:	fd 01       	movw	r30, r26
    6d32:	dc 01       	movw	r26, r24
    6d34:	f7 cf       	rjmp	.-18     	; 0x6d24 <free+0xc2>
    6d36:	8d 91       	ld	r24, X+
    6d38:	9c 91       	ld	r25, X
    6d3a:	11 97       	sbiw	r26, 0x01	; 1
    6d3c:	9d 01       	movw	r18, r26
    6d3e:	2e 5f       	subi	r18, 0xFE	; 254
    6d40:	3f 4f       	sbci	r19, 0xFF	; 255
    6d42:	82 0f       	add	r24, r18
    6d44:	93 1f       	adc	r25, r19
    6d46:	20 91 f0 0a 	lds	r18, 0x0AF0	; 0x800af0 <__brkval>
    6d4a:	30 91 f1 0a 	lds	r19, 0x0AF1	; 0x800af1 <__brkval+0x1>
    6d4e:	28 17       	cp	r18, r24
    6d50:	39 07       	cpc	r19, r25
    6d52:	69 f4       	brne	.+26     	; 0x6d6e <free+0x10c>
    6d54:	30 97       	sbiw	r30, 0x00	; 0
    6d56:	29 f4       	brne	.+10     	; 0x6d62 <free+0x100>
    6d58:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <__flp+0x1>
    6d5c:	10 92 f2 0a 	sts	0x0AF2, r1	; 0x800af2 <__flp>
    6d60:	02 c0       	rjmp	.+4      	; 0x6d66 <free+0x104>
    6d62:	13 82       	std	Z+3, r1	; 0x03
    6d64:	12 82       	std	Z+2, r1	; 0x02
    6d66:	b0 93 f1 0a 	sts	0x0AF1, r27	; 0x800af1 <__brkval+0x1>
    6d6a:	a0 93 f0 0a 	sts	0x0AF0, r26	; 0x800af0 <__brkval>
    6d6e:	df 91       	pop	r29
    6d70:	cf 91       	pop	r28
    6d72:	08 95       	ret

00006d74 <realloc>:
    6d74:	6f 92       	push	r6
    6d76:	7f 92       	push	r7
    6d78:	8f 92       	push	r8
    6d7a:	9f 92       	push	r9
    6d7c:	af 92       	push	r10
    6d7e:	bf 92       	push	r11
    6d80:	cf 92       	push	r12
    6d82:	df 92       	push	r13
    6d84:	ef 92       	push	r14
    6d86:	ff 92       	push	r15
    6d88:	0f 93       	push	r16
    6d8a:	1f 93       	push	r17
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	00 97       	sbiw	r24, 0x00	; 0
    6d92:	81 f4       	brne	.+32     	; 0x6db4 <realloc+0x40>
    6d94:	cb 01       	movw	r24, r22
    6d96:	df 91       	pop	r29
    6d98:	cf 91       	pop	r28
    6d9a:	1f 91       	pop	r17
    6d9c:	0f 91       	pop	r16
    6d9e:	ff 90       	pop	r15
    6da0:	ef 90       	pop	r14
    6da2:	df 90       	pop	r13
    6da4:	cf 90       	pop	r12
    6da6:	bf 90       	pop	r11
    6da8:	af 90       	pop	r10
    6daa:	9f 90       	pop	r9
    6dac:	8f 90       	pop	r8
    6dae:	7f 90       	pop	r7
    6db0:	6f 90       	pop	r6
    6db2:	bf ce       	rjmp	.-642    	; 0x6b32 <malloc>
    6db4:	fc 01       	movw	r30, r24
    6db6:	e6 0f       	add	r30, r22
    6db8:	f7 1f       	adc	r31, r23
    6dba:	9c 01       	movw	r18, r24
    6dbc:	22 50       	subi	r18, 0x02	; 2
    6dbe:	31 09       	sbc	r19, r1
    6dc0:	e2 17       	cp	r30, r18
    6dc2:	f3 07       	cpc	r31, r19
    6dc4:	08 f4       	brcc	.+2      	; 0x6dc8 <realloc+0x54>
    6dc6:	a5 c0       	rjmp	.+330    	; 0x6f12 <realloc+0x19e>
    6dc8:	ec 01       	movw	r28, r24
    6dca:	d9 01       	movw	r26, r18
    6dcc:	0d 91       	ld	r16, X+
    6dce:	1c 91       	ld	r17, X
    6dd0:	11 97       	sbiw	r26, 0x01	; 1
    6dd2:	06 17       	cp	r16, r22
    6dd4:	17 07       	cpc	r17, r23
    6dd6:	a8 f0       	brcs	.+42     	; 0x6e02 <realloc+0x8e>
    6dd8:	05 30       	cpi	r16, 0x05	; 5
    6dda:	11 05       	cpc	r17, r1
    6ddc:	08 f4       	brcc	.+2      	; 0x6de0 <realloc+0x6c>
    6dde:	97 c0       	rjmp	.+302    	; 0x6f0e <realloc+0x19a>
    6de0:	c8 01       	movw	r24, r16
    6de2:	04 97       	sbiw	r24, 0x04	; 4
    6de4:	86 17       	cp	r24, r22
    6de6:	97 07       	cpc	r25, r23
    6de8:	08 f4       	brcc	.+2      	; 0x6dec <realloc+0x78>
    6dea:	91 c0       	rjmp	.+290    	; 0x6f0e <realloc+0x19a>
    6dec:	02 50       	subi	r16, 0x02	; 2
    6dee:	11 09       	sbc	r17, r1
    6df0:	06 1b       	sub	r16, r22
    6df2:	17 0b       	sbc	r17, r23
    6df4:	01 93       	st	Z+, r16
    6df6:	11 93       	st	Z+, r17
    6df8:	6d 93       	st	X+, r22
    6dfa:	7c 93       	st	X, r23
    6dfc:	cf 01       	movw	r24, r30
    6dfe:	31 df       	rcall	.-414    	; 0x6c62 <free>
    6e00:	86 c0       	rjmp	.+268    	; 0x6f0e <realloc+0x19a>
    6e02:	5b 01       	movw	r10, r22
    6e04:	a0 1a       	sub	r10, r16
    6e06:	b1 0a       	sbc	r11, r17
    6e08:	4c 01       	movw	r8, r24
    6e0a:	80 0e       	add	r8, r16
    6e0c:	91 1e       	adc	r9, r17
    6e0e:	a0 91 f2 0a 	lds	r26, 0x0AF2	; 0x800af2 <__flp>
    6e12:	b0 91 f3 0a 	lds	r27, 0x0AF3	; 0x800af3 <__flp+0x1>
    6e16:	61 2c       	mov	r6, r1
    6e18:	71 2c       	mov	r7, r1
    6e1a:	e1 2c       	mov	r14, r1
    6e1c:	f1 2c       	mov	r15, r1
    6e1e:	10 97       	sbiw	r26, 0x00	; 0
    6e20:	09 f4       	brne	.+2      	; 0x6e24 <realloc+0xb0>
    6e22:	46 c0       	rjmp	.+140    	; 0x6eb0 <realloc+0x13c>
    6e24:	8d 91       	ld	r24, X+
    6e26:	9c 91       	ld	r25, X
    6e28:	11 97       	sbiw	r26, 0x01	; 1
    6e2a:	a8 15       	cp	r26, r8
    6e2c:	b9 05       	cpc	r27, r9
    6e2e:	b1 f5       	brne	.+108    	; 0x6e9c <realloc+0x128>
    6e30:	6c 01       	movw	r12, r24
    6e32:	42 e0       	ldi	r20, 0x02	; 2
    6e34:	c4 0e       	add	r12, r20
    6e36:	d1 1c       	adc	r13, r1
    6e38:	ca 14       	cp	r12, r10
    6e3a:	db 04       	cpc	r13, r11
    6e3c:	78 f1       	brcs	.+94     	; 0x6e9c <realloc+0x128>
    6e3e:	4c 01       	movw	r8, r24
    6e40:	8a 18       	sub	r8, r10
    6e42:	9b 08       	sbc	r9, r11
    6e44:	64 01       	movw	r12, r8
    6e46:	42 e0       	ldi	r20, 0x02	; 2
    6e48:	c4 0e       	add	r12, r20
    6e4a:	d1 1c       	adc	r13, r1
    6e4c:	12 96       	adiw	r26, 0x02	; 2
    6e4e:	bc 90       	ld	r11, X
    6e50:	12 97       	sbiw	r26, 0x02	; 2
    6e52:	13 96       	adiw	r26, 0x03	; 3
    6e54:	ac 91       	ld	r26, X
    6e56:	b5 e0       	ldi	r27, 0x05	; 5
    6e58:	cb 16       	cp	r12, r27
    6e5a:	d1 04       	cpc	r13, r1
    6e5c:	40 f0       	brcs	.+16     	; 0x6e6e <realloc+0xfa>
    6e5e:	b2 82       	std	Z+2, r11	; 0x02
    6e60:	a3 83       	std	Z+3, r26	; 0x03
    6e62:	91 82       	std	Z+1, r9	; 0x01
    6e64:	80 82       	st	Z, r8
    6e66:	d9 01       	movw	r26, r18
    6e68:	6d 93       	st	X+, r22
    6e6a:	7c 93       	st	X, r23
    6e6c:	09 c0       	rjmp	.+18     	; 0x6e80 <realloc+0x10c>
    6e6e:	0e 5f       	subi	r16, 0xFE	; 254
    6e70:	1f 4f       	sbci	r17, 0xFF	; 255
    6e72:	80 0f       	add	r24, r16
    6e74:	91 1f       	adc	r25, r17
    6e76:	f9 01       	movw	r30, r18
    6e78:	91 83       	std	Z+1, r25	; 0x01
    6e7a:	80 83       	st	Z, r24
    6e7c:	eb 2d       	mov	r30, r11
    6e7e:	fa 2f       	mov	r31, r26
    6e80:	e1 14       	cp	r14, r1
    6e82:	f1 04       	cpc	r15, r1
    6e84:	31 f0       	breq	.+12     	; 0x6e92 <realloc+0x11e>
    6e86:	d7 01       	movw	r26, r14
    6e88:	13 96       	adiw	r26, 0x03	; 3
    6e8a:	fc 93       	st	X, r31
    6e8c:	ee 93       	st	-X, r30
    6e8e:	12 97       	sbiw	r26, 0x02	; 2
    6e90:	3e c0       	rjmp	.+124    	; 0x6f0e <realloc+0x19a>
    6e92:	f0 93 f3 0a 	sts	0x0AF3, r31	; 0x800af3 <__flp+0x1>
    6e96:	e0 93 f2 0a 	sts	0x0AF2, r30	; 0x800af2 <__flp>
    6e9a:	39 c0       	rjmp	.+114    	; 0x6f0e <realloc+0x19a>
    6e9c:	68 16       	cp	r6, r24
    6e9e:	79 06       	cpc	r7, r25
    6ea0:	08 f4       	brcc	.+2      	; 0x6ea4 <realloc+0x130>
    6ea2:	3c 01       	movw	r6, r24
    6ea4:	7d 01       	movw	r14, r26
    6ea6:	12 96       	adiw	r26, 0x02	; 2
    6ea8:	0d 90       	ld	r0, X+
    6eaa:	bc 91       	ld	r27, X
    6eac:	a0 2d       	mov	r26, r0
    6eae:	b7 cf       	rjmp	.-146    	; 0x6e1e <realloc+0xaa>
    6eb0:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <__brkval>
    6eb4:	90 91 f1 0a 	lds	r25, 0x0AF1	; 0x800af1 <__brkval+0x1>
    6eb8:	88 16       	cp	r8, r24
    6eba:	99 06       	cpc	r9, r25
    6ebc:	e1 f4       	brne	.+56     	; 0x6ef6 <realloc+0x182>
    6ebe:	66 16       	cp	r6, r22
    6ec0:	77 06       	cpc	r7, r23
    6ec2:	c8 f4       	brcc	.+50     	; 0x6ef6 <realloc+0x182>
    6ec4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    6ec8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    6ecc:	00 97       	sbiw	r24, 0x00	; 0
    6ece:	41 f4       	brne	.+16     	; 0x6ee0 <realloc+0x16c>
    6ed0:	8d b7       	in	r24, 0x3d	; 61
    6ed2:	9e b7       	in	r25, 0x3e	; 62
    6ed4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6ed8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6edc:	84 1b       	sub	r24, r20
    6ede:	95 0b       	sbc	r25, r21
    6ee0:	e8 17       	cp	r30, r24
    6ee2:	f9 07       	cpc	r31, r25
    6ee4:	b0 f4       	brcc	.+44     	; 0x6f12 <realloc+0x19e>
    6ee6:	f0 93 f1 0a 	sts	0x0AF1, r31	; 0x800af1 <__brkval+0x1>
    6eea:	e0 93 f0 0a 	sts	0x0AF0, r30	; 0x800af0 <__brkval>
    6eee:	f9 01       	movw	r30, r18
    6ef0:	71 83       	std	Z+1, r23	; 0x01
    6ef2:	60 83       	st	Z, r22
    6ef4:	0c c0       	rjmp	.+24     	; 0x6f0e <realloc+0x19a>
    6ef6:	cb 01       	movw	r24, r22
    6ef8:	1c de       	rcall	.-968    	; 0x6b32 <malloc>
    6efa:	7c 01       	movw	r14, r24
    6efc:	00 97       	sbiw	r24, 0x00	; 0
    6efe:	49 f0       	breq	.+18     	; 0x6f12 <realloc+0x19e>
    6f00:	a8 01       	movw	r20, r16
    6f02:	be 01       	movw	r22, r28
    6f04:	20 d0       	rcall	.+64     	; 0x6f46 <memcpy>
    6f06:	ce 01       	movw	r24, r28
    6f08:	ac de       	rcall	.-680    	; 0x6c62 <free>
    6f0a:	c7 01       	movw	r24, r14
    6f0c:	04 c0       	rjmp	.+8      	; 0x6f16 <realloc+0x1a2>
    6f0e:	ce 01       	movw	r24, r28
    6f10:	02 c0       	rjmp	.+4      	; 0x6f16 <realloc+0x1a2>
    6f12:	80 e0       	ldi	r24, 0x00	; 0
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	df 91       	pop	r29
    6f18:	cf 91       	pop	r28
    6f1a:	1f 91       	pop	r17
    6f1c:	0f 91       	pop	r16
    6f1e:	ff 90       	pop	r15
    6f20:	ef 90       	pop	r14
    6f22:	df 90       	pop	r13
    6f24:	cf 90       	pop	r12
    6f26:	bf 90       	pop	r11
    6f28:	af 90       	pop	r10
    6f2a:	9f 90       	pop	r9
    6f2c:	8f 90       	pop	r8
    6f2e:	7f 90       	pop	r7
    6f30:	6f 90       	pop	r6
    6f32:	08 95       	ret

00006f34 <memcpy_P>:
    6f34:	fb 01       	movw	r30, r22
    6f36:	dc 01       	movw	r26, r24
    6f38:	02 c0       	rjmp	.+4      	; 0x6f3e <memcpy_P+0xa>
    6f3a:	05 90       	lpm	r0, Z+
    6f3c:	0d 92       	st	X+, r0
    6f3e:	41 50       	subi	r20, 0x01	; 1
    6f40:	50 40       	sbci	r21, 0x00	; 0
    6f42:	d8 f7       	brcc	.-10     	; 0x6f3a <memcpy_P+0x6>
    6f44:	08 95       	ret

00006f46 <memcpy>:
    6f46:	fb 01       	movw	r30, r22
    6f48:	dc 01       	movw	r26, r24
    6f4a:	02 c0       	rjmp	.+4      	; 0x6f50 <memcpy+0xa>
    6f4c:	01 90       	ld	r0, Z+
    6f4e:	0d 92       	st	X+, r0
    6f50:	41 50       	subi	r20, 0x01	; 1
    6f52:	50 40       	sbci	r21, 0x00	; 0
    6f54:	d8 f7       	brcc	.-10     	; 0x6f4c <memcpy+0x6>
    6f56:	08 95       	ret

00006f58 <strcpy>:
    6f58:	fb 01       	movw	r30, r22
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	01 90       	ld	r0, Z+
    6f5e:	0d 92       	st	X+, r0
    6f60:	00 20       	and	r0, r0
    6f62:	e1 f7       	brne	.-8      	; 0x6f5c <strcpy+0x4>
    6f64:	08 95       	ret

00006f66 <strncpy>:
    6f66:	fb 01       	movw	r30, r22
    6f68:	dc 01       	movw	r26, r24
    6f6a:	41 50       	subi	r20, 0x01	; 1
    6f6c:	50 40       	sbci	r21, 0x00	; 0
    6f6e:	48 f0       	brcs	.+18     	; 0x6f82 <strncpy+0x1c>
    6f70:	01 90       	ld	r0, Z+
    6f72:	0d 92       	st	X+, r0
    6f74:	00 20       	and	r0, r0
    6f76:	c9 f7       	brne	.-14     	; 0x6f6a <strncpy+0x4>
    6f78:	01 c0       	rjmp	.+2      	; 0x6f7c <strncpy+0x16>
    6f7a:	1d 92       	st	X+, r1
    6f7c:	41 50       	subi	r20, 0x01	; 1
    6f7e:	50 40       	sbci	r21, 0x00	; 0
    6f80:	e0 f7       	brcc	.-8      	; 0x6f7a <strncpy+0x14>
    6f82:	08 95       	ret

00006f84 <utoa>:
    6f84:	45 32       	cpi	r20, 0x25	; 37
    6f86:	51 05       	cpc	r21, r1
    6f88:	18 f4       	brcc	.+6      	; 0x6f90 <utoa+0xc>
    6f8a:	42 30       	cpi	r20, 0x02	; 2
    6f8c:	08 f0       	brcs	.+2      	; 0x6f90 <utoa+0xc>
    6f8e:	04 c0       	rjmp	.+8      	; 0x6f98 <__utoa_ncheck>
    6f90:	fb 01       	movw	r30, r22
    6f92:	10 82       	st	Z, r1
    6f94:	cb 01       	movw	r24, r22
    6f96:	08 95       	ret

00006f98 <__utoa_ncheck>:
    6f98:	bb 27       	eor	r27, r27

00006f9a <__utoa_common>:
    6f9a:	fb 01       	movw	r30, r22
    6f9c:	55 27       	eor	r21, r21
    6f9e:	aa 27       	eor	r26, r26
    6fa0:	88 0f       	add	r24, r24
    6fa2:	99 1f       	adc	r25, r25
    6fa4:	aa 1f       	adc	r26, r26
    6fa6:	a4 17       	cp	r26, r20
    6fa8:	10 f0       	brcs	.+4      	; 0x6fae <__utoa_common+0x14>
    6faa:	a4 1b       	sub	r26, r20
    6fac:	83 95       	inc	r24
    6fae:	50 51       	subi	r21, 0x10	; 16
    6fb0:	b9 f7       	brne	.-18     	; 0x6fa0 <__utoa_common+0x6>
    6fb2:	a0 5d       	subi	r26, 0xD0	; 208
    6fb4:	aa 33       	cpi	r26, 0x3A	; 58
    6fb6:	08 f0       	brcs	.+2      	; 0x6fba <__utoa_common+0x20>
    6fb8:	a9 5d       	subi	r26, 0xD9	; 217
    6fba:	a1 93       	st	Z+, r26
    6fbc:	00 97       	sbiw	r24, 0x00	; 0
    6fbe:	79 f7       	brne	.-34     	; 0x6f9e <__utoa_common+0x4>
    6fc0:	b1 11       	cpse	r27, r1
    6fc2:	b1 93       	st	Z+, r27
    6fc4:	11 92       	st	Z+, r1
    6fc6:	cb 01       	movw	r24, r22
    6fc8:	00 c0       	rjmp	.+0      	; 0x6fca <strrev>

00006fca <strrev>:
    6fca:	dc 01       	movw	r26, r24
    6fcc:	fc 01       	movw	r30, r24
    6fce:	67 2f       	mov	r22, r23
    6fd0:	71 91       	ld	r23, Z+
    6fd2:	77 23       	and	r23, r23
    6fd4:	e1 f7       	brne	.-8      	; 0x6fce <strrev+0x4>
    6fd6:	32 97       	sbiw	r30, 0x02	; 2
    6fd8:	04 c0       	rjmp	.+8      	; 0x6fe2 <strrev+0x18>
    6fda:	7c 91       	ld	r23, X
    6fdc:	6d 93       	st	X+, r22
    6fde:	70 83       	st	Z, r23
    6fe0:	62 91       	ld	r22, -Z
    6fe2:	ae 17       	cp	r26, r30
    6fe4:	bf 07       	cpc	r27, r31
    6fe6:	c8 f3       	brcs	.-14     	; 0x6fda <strrev+0x10>
    6fe8:	08 95       	ret

00006fea <__do_global_dtors>:
    6fea:	11 e0       	ldi	r17, 0x01	; 1
    6fec:	c8 e8       	ldi	r28, 0x88	; 136
    6fee:	d1 e0       	ldi	r29, 0x01	; 1
    6ff0:	00 e0       	ldi	r16, 0x00	; 0
    6ff2:	05 c0       	rjmp	.+10     	; 0x6ffe <__do_global_dtors+0x14>
    6ff4:	80 2f       	mov	r24, r16
    6ff6:	fe 01       	movw	r30, r28
    6ff8:	ff db       	rcall	.-2050   	; 0x67f8 <__tablejump2__>
    6ffa:	21 96       	adiw	r28, 0x01	; 1
    6ffc:	01 1d       	adc	r16, r1
    6ffe:	c9 38       	cpi	r28, 0x89	; 137
    7000:	d1 07       	cpc	r29, r17
    7002:	80 e0       	ldi	r24, 0x00	; 0
    7004:	08 07       	cpc	r16, r24
    7006:	b1 f7       	brne	.-20     	; 0x6ff4 <__do_global_dtors+0xa>
    7008:	f8 94       	cli

0000700a <__stop_program>:
    700a:	ff cf       	rjmp	.-2      	; 0x700a <__stop_program>
