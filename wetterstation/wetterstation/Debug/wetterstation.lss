
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000304  00800200  00003406  0000349a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047a  00800504  00800504  0000379e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000379e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000eb0  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002e8ff  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006aed  00000000  00000000  00032fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000928f  00000000  00000000  00039aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003750  00000000  00000000  00042d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000749f  00000000  00000000  0004648c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00014620  00000000  00000000  0004d92b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001080  00000000  00000000  00061f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	25 c1       	rjmp	.+586    	; 0x24c <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_1>
       8:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_2>
       c:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_3>
      10:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__vector_4>
      14:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_5>
      18:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_6>
      1c:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_7>
      20:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_8>
      24:	44 c1       	rjmp	.+648    	; 0x2ae <__bad_interrupt>
      26:	00 00       	nop
      28:	42 c1       	rjmp	.+644    	; 0x2ae <__bad_interrupt>
      2a:	00 00       	nop
      2c:	40 c1       	rjmp	.+640    	; 0x2ae <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c1       	rjmp	.+636    	; 0x2ae <__bad_interrupt>
      32:	00 00       	nop
      34:	3c c1       	rjmp	.+632    	; 0x2ae <__bad_interrupt>
      36:	00 00       	nop
      38:	3a c1       	rjmp	.+628    	; 0x2ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	38 c1       	rjmp	.+624    	; 0x2ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	36 c1       	rjmp	.+620    	; 0x2ae <__bad_interrupt>
      42:	00 00       	nop
      44:	34 c1       	rjmp	.+616    	; 0x2ae <__bad_interrupt>
      46:	00 00       	nop
      48:	32 c1       	rjmp	.+612    	; 0x2ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	30 c1       	rjmp	.+608    	; 0x2ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	2e c1       	rjmp	.+604    	; 0x2ae <__bad_interrupt>
      52:	00 00       	nop
      54:	2c c1       	rjmp	.+600    	; 0x2ae <__bad_interrupt>
      56:	00 00       	nop
      58:	2a c1       	rjmp	.+596    	; 0x2ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_23>
      60:	26 c1       	rjmp	.+588    	; 0x2ae <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_25>
      68:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_26>
      6c:	20 c1       	rjmp	.+576    	; 0x2ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	1e c1       	rjmp	.+572    	; 0x2ae <__bad_interrupt>
      72:	00 00       	nop
      74:	1c c1       	rjmp	.+568    	; 0x2ae <__bad_interrupt>
      76:	00 00       	nop
      78:	1a c1       	rjmp	.+564    	; 0x2ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	18 c1       	rjmp	.+560    	; 0x2ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	16 c1       	rjmp	.+556    	; 0x2ae <__bad_interrupt>
      82:	00 00       	nop
      84:	14 c1       	rjmp	.+552    	; 0x2ae <__bad_interrupt>
      86:	00 00       	nop
      88:	12 c1       	rjmp	.+548    	; 0x2ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	10 c1       	rjmp	.+544    	; 0x2ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	0e c1       	rjmp	.+540    	; 0x2ae <__bad_interrupt>
      92:	00 00       	nop
      94:	0c c1       	rjmp	.+536    	; 0x2ae <__bad_interrupt>
      96:	00 00       	nop
      98:	0a c1       	rjmp	.+532    	; 0x2ae <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2a c5       	rjmp	.+2644   	; 0xaf2 <__vector_39>
      9e:	00 00       	nop
      a0:	06 c1       	rjmp	.+524    	; 0x2ae <__bad_interrupt>
      a2:	00 00       	nop
      a4:	04 c1       	rjmp	.+520    	; 0x2ae <__bad_interrupt>
      a6:	00 00       	nop
      a8:	02 c1       	rjmp	.+516    	; 0x2ae <__bad_interrupt>
      aa:	00 00       	nop
      ac:	00 c1       	rjmp	.+512    	; 0x2ae <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fe c0       	rjmp	.+508    	; 0x2ae <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fc c0       	rjmp	.+504    	; 0x2ae <__bad_interrupt>
      b6:	00 00       	nop
      b8:	fa c0       	rjmp	.+500    	; 0x2ae <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f8 c0       	rjmp	.+496    	; 0x2ae <__bad_interrupt>
      be:	00 00       	nop
      c0:	f6 c0       	rjmp	.+492    	; 0x2ae <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f4 c0       	rjmp	.+488    	; 0x2ae <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f2 c0       	rjmp	.+484    	; 0x2ae <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f0 c0       	rjmp	.+480    	; 0x2ae <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ee c0       	rjmp	.+476    	; 0x2ae <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ec c0       	rjmp	.+472    	; 0x2ae <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ea c0       	rjmp	.+468    	; 0x2ae <__bad_interrupt>
      da:	00 00       	nop
      dc:	e8 c0       	rjmp	.+464    	; 0x2ae <__bad_interrupt>
      de:	00 00       	nop
      e0:	e6 c0       	rjmp	.+460    	; 0x2ae <__bad_interrupt>
      e2:	00 00       	nop
      e4:	09 03       	fmul	r16, r17
      e6:	20 03       	mulsu	r18, r16
      e8:	20 03       	mulsu	r18, r16
      ea:	1d 03       	fmul	r17, r21
      ec:	20 03       	mulsu	r18, r16
      ee:	07 03       	mulsu	r16, r23
      f0:	20 03       	mulsu	r18, r16
      f2:	20 03       	mulsu	r18, r16
      f4:	20 03       	mulsu	r18, r16
      f6:	fb 02       	muls	r31, r27
      f8:	20 03       	mulsu	r18, r16
      fa:	20 03       	mulsu	r18, r16
      fc:	10 03       	mulsu	r17, r16
      fe:	1b 03       	fmul	r17, r19
     100:	19 03       	fmul	r17, r17
     102:	20 03       	mulsu	r18, r16
     104:	20 03       	mulsu	r18, r16
     106:	20 03       	mulsu	r18, r16
     108:	17 03       	mulsu	r17, r23
     10a:	67 0d       	add	r22, r7
     10c:	6a 0d       	add	r22, r10
     10e:	59 0d       	add	r21, r9
     110:	5d 0d       	add	r21, r13
     112:	63 0d       	add	r22, r3
     114:	a1 0d       	add	r26, r1
     116:	6e 0d       	add	r22, r14
     118:	72 0d       	add	r23, r2
     11a:	78 0d       	add	r23, r8
     11c:	7c 0d       	add	r23, r12
     11e:	80 0d       	add	r24, r0
     120:	86 0d       	add	r24, r6
     122:	8a 0d       	add	r24, r10
     124:	8e 0d       	add	r24, r14
     126:	a1 0d       	add	r26, r1
     128:	94 0d       	add	r25, r4
     12a:	98 0d       	add	r25, r8
     12c:	9c 0d       	add	r25, r12

0000012e <__trampolines_end>:
     12e:	44 65       	ori	r20, 0x54	; 84
     130:	63 20       	and	r6, r3
     132:	20 35       	cpi	r18, 0x50	; 80
     134:	20 32       	cpi	r18, 0x20	; 32
     136:	30 31       	cpi	r19, 0x10	; 16
     138:	38 00       	.word	0x0038	; ????

0000013a <_ZZ7initRTCvE3__c_0>:
     13a:	31 32 3a 34 35 3a 30 35 00                          12:45:05.

00000143 <_ZL11daysInMonth>:
     143:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

0000014f <digital_pin_to_timer_PGM>:
     14f:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     17b:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000195 <digital_pin_to_bit_mask_PGM>:
     195:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1a5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1b5:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1c5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1d5:	04 08 10 20 40 80                                   ... @.

000001db <digital_pin_to_port_PGM>:
     1db:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1eb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1fb:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     20b:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     21b:	0b 0b 0b 0b 0b 0b                                   ......

00000221 <port_to_output_PGM>:
     221:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     231:	02 01 00 00 05 01 08 01 0b 01 00                    ...........

0000023c <__ctors_start>:
     23c:	58 01       	movw	r10, r16
     23e:	47 02       	muls	r20, r23
     240:	09 08       	sbc	r0, r9
     242:	0c 08       	sbc	r0, r12
     244:	eb 09       	sbc	r30, r11
     246:	2e 0f       	add	r18, r30
     248:	1d 11       	cpse	r17, r13

0000024a <__ctors_end>:
     24a:	76 01       	movw	r14, r12

0000024c <__dtors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d1 e2       	ldi	r29, 0x21	; 33
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0c bf       	out	0x3c, r16	; 60

0000025c <__do_copy_data>:
     25c:	15 e0       	ldi	r17, 0x05	; 5
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b2 e0       	ldi	r27, 0x02	; 2
     262:	e6 e0       	ldi	r30, 0x06	; 6
     264:	f4 e3       	ldi	r31, 0x34	; 52
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	0b bf       	out	0x3b, r16	; 59
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x14>
     26c:	07 90       	elpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0x10>

00000276 <__do_clear_bss>:
     276:	29 e0       	ldi	r18, 0x09	; 9
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b5 e0       	ldi	r27, 0x05	; 5
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	ae 37       	cpi	r26, 0x7E	; 126
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>

00000286 <__do_global_ctors>:
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	c5 e2       	ldi	r28, 0x25	; 37
     28a:	d1 e0       	ldi	r29, 0x01	; 1
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	06 c0       	rjmp	.+12     	; 0x29c <__do_global_ctors+0x16>
     290:	21 97       	sbiw	r28, 0x01	; 1
     292:	01 09       	sbc	r16, r1
     294:	80 2f       	mov	r24, r16
     296:	fe 01       	movw	r30, r28
     298:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <__tablejump2__>
     29c:	ce 31       	cpi	r28, 0x1E	; 30
     29e:	d1 07       	cpc	r29, r17
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	08 07       	cpc	r16, r24
     2a4:	a9 f7       	brne	.-22     	; 0x290 <__do_global_ctors+0xa>
     2a6:	0e 94 19 0a 	call	0x1432	; 0x1432 <main>
     2aa:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__do_global_dtors>

000002ae <__bad_interrupt>:
     2ae:	a8 ce       	rjmp	.-688    	; 0x0 <__vectors>

000002b0 <_GLOBAL__sub_I_command_help>:
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     2b0:	6e e6       	ldi	r22, 0x6E	; 110
     2b2:	72 e0       	ldi	r23, 0x02	; 2
     2b4:	8c e1       	ldi	r24, 0x1C	; 28
     2b6:	95 e0       	ldi	r25, 0x05	; 5
     2b8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6StringC1EPKc>
String command_config = "config\r";
     2bc:	64 e7       	ldi	r22, 0x74	; 116
     2be:	72 e0       	ldi	r23, 0x02	; 2
     2c0:	86 e1       	ldi	r24, 0x16	; 22
     2c2:	95 e0       	ldi	r25, 0x05	; 5
     2c4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6StringC1EPKc>
String command_exit = "exit\r";
     2c8:	6c e7       	ldi	r22, 0x7C	; 124
     2ca:	72 e0       	ldi	r23, 0x02	; 2
     2cc:	80 e1       	ldi	r24, 0x10	; 16
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6StringC1EPKc>
String command_show = "show\r";
     2d4:	62 e8       	ldi	r22, 0x82	; 130
     2d6:	72 e0       	ldi	r23, 0x02	; 2
     2d8:	8a e0       	ldi	r24, 0x0A	; 10
     2da:	95 e0       	ldi	r25, 0x05	; 5
     2dc:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6StringC1EPKc>
String show_sdCardInfo = "sd card informations\r";
     2e0:	68 e8       	ldi	r22, 0x88	; 136
     2e2:	72 e0       	ldi	r23, 0x02	; 2
     2e4:	84 e0       	ldi	r24, 0x04	; 4
     2e6:	95 e0       	ldi	r25, 0x05	; 5
     2e8:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_ZN6StringC1EPKc>

000002ec <_GLOBAL__sub_D_command_help>:
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	95 e0       	ldi	r25, 0x05	; 5
     2f0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN6StringD1Ev>
#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
String command_show = "show\r";
     2f4:	8a e0       	ldi	r24, 0x0A	; 10
     2f6:	95 e0       	ldi	r25, 0x05	; 5
     2f8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN6StringD1Ev>

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
     2fc:	80 e1       	ldi	r24, 0x10	; 16
     2fe:	95 e0       	ldi	r25, 0x05	; 5
     300:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN6StringD1Ev>
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
     304:	86 e1       	ldi	r24, 0x16	; 22
     306:	95 e0       	ldi	r25, 0x05	; 5
     308:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN6StringD1Ev>
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     30c:	8c e1       	ldi	r24, 0x1C	; 28
     30e:	95 e0       	ldi	r25, 0x05	; 5
     310:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <_ZN6StringD1Ev>

00000314 <_Z7initRTCv>:
RTC_DS3231 rtc;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

void initRTC()
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <_Z7initRTCv+0x6>
     31a:	00 d0       	rcall	.+0      	; 0x31c <_Z7initRTCv+0x8>
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     320:	26 e0       	ldi	r18, 0x06	; 6
     322:	40 e8       	ldi	r20, 0x80	; 128
     324:	55 e2       	ldi	r21, 0x25	; 37
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	8c e7       	ldi	r24, 0x7C	; 124
     32c:	96 e0       	ldi	r25, 0x06	; 6
     32e:	86 d7       	rcall	.+3852   	; 0x123c <_ZN14HardwareSerial5beginEmh>
	while (!Serial); // for Leonardo/Micro/Zero
	#endif

	Serial.begin(9600);

	delay(3000); // wait for console opening
     330:	68 eb       	ldi	r22, 0xB8	; 184
     332:	7b e0       	ldi	r23, 0x0B	; 11
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 b0 0c 	call	0x1960	; 0x1960 <delay>

	if (! rtc.begin()) {
     33c:	82 e2       	ldi	r24, 0x22	; 34
     33e:	95 e0       	ldi	r25, 0x05	; 5
     340:	b3 d1       	rcall	.+870    	; 0x6a8 <_ZN10RTC_DS32315beginEv>
     342:	81 11       	cpse	r24, r1
     344:	07 c0       	rjmp	.+14     	; 0x354 <_Z7initRTCv+0x40>
		Serial.println("Couldn't find RTC");
     346:	6a e7       	ldi	r22, 0x7A	; 122
     348:	74 e0       	ldi	r23, 0x04	; 4
     34a:	8c e7       	ldi	r24, 0x7C	; 124
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN5Print7printlnEPKc>
     352:	ff cf       	rjmp	.-2      	; 0x352 <_Z7initRTCv+0x3e>
		while (1);
	}

	if (rtc.lostPower()) {
     354:	82 e2       	ldi	r24, 0x22	; 34
     356:	95 e0       	ldi	r25, 0x05	; 5
     358:	c8 d2       	rcall	.+1424   	; 0x8ea <_ZN10RTC_DS32319lostPowerEv>
     35a:	88 23       	and	r24, r24
     35c:	81 f0       	breq	.+32     	; 0x37e <_Z7initRTCv+0x6a>
		Serial.println("RTC lost power, lets set the time!");
     35e:	6c e8       	ldi	r22, 0x8C	; 140
     360:	74 e0       	ldi	r23, 0x04	; 4
     362:	8c e7       	ldi	r24, 0x7C	; 124
     364:	96 e0       	ldi	r25, 0x06	; 6
     366:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this sketch was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     36a:	4a e3       	ldi	r20, 0x3A	; 58
     36c:	51 e0       	ldi	r21, 0x01	; 1
     36e:	6e e2       	ldi	r22, 0x2E	; 46
     370:	71 e0       	ldi	r23, 0x01	; 1
     372:	ce 01       	movw	r24, r28
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	15 d1       	rcall	.+554    	; 0x5a2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     378:	ce 01       	movw	r24, r28
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	31 d2       	rcall	.+1122   	; 0x7e0 <_ZN10RTC_DS32316adjustERK8DateTime>
		// This line sets the RTC with an explicit date & time, for example to set
		// January 21, 2014 at 3am you would call:
		// rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
	}
}
     37e:	26 96       	adiw	r28, 0x06	; 6
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <_Z9timeStampv>:

void timeStamp()
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <_Z9timeStampv+0x6>
     396:	00 d0       	rcall	.+0      	; 0x398 <_Z9timeStampv+0x8>
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	DateTime now = rtc.now();
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	88 d1       	rcall	.+784    	; 0x6b2 <_ZN10RTC_DS32313nowEv>
	
	Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	74 d1       	rcall	.+744    	; 0x690 <_ZNK8DateTime12dayOfTheWeekEv>
     3a8:	2c e0       	ldi	r18, 0x0C	; 12
     3aa:	82 9f       	mul	r24, r18
     3ac:	c0 01       	movw	r24, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	bc 01       	movw	r22, r24
     3b2:	6a 5f       	subi	r22, 0xFA	; 250
     3b4:	7d 4f       	sbci	r23, 0xFD	; 253
     3b6:	8c e7       	ldi	r24, 0x7C	; 124
     3b8:	96 e0       	ldi	r25, 0x06	; 6
     3ba:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN5Print5printEPKc>
	Serial.print(": ");
     3be:	6f ea       	ldi	r22, 0xAF	; 175
     3c0:	74 e0       	ldi	r23, 0x04	; 4
     3c2:	8c e7       	ldi	r24, 0x7C	; 124
     3c4:	96 e0       	ldi	r25, 0x06	; 6
     3c6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN5Print5printEPKc>
	Serial.print(now.day(), DEC);
     3ca:	4a e0       	ldi	r20, 0x0A	; 10
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	6b 81       	ldd	r22, Y+3	; 0x03
     3d0:	8c e7       	ldi	r24, 0x7C	; 124
     3d2:	96 e0       	ldi	r25, 0x06	; 6
     3d4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN5Print5printEhi>
	Serial.print('/');
     3d8:	6f e2       	ldi	r22, 0x2F	; 47
     3da:	8c e7       	ldi	r24, 0x7C	; 124
     3dc:	96 e0       	ldi	r25, 0x06	; 6
     3de:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print5printEc>
	Serial.print(now.month(), DEC);
     3e2:	4a e0       	ldi	r20, 0x0A	; 10
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	6a 81       	ldd	r22, Y+2	; 0x02
     3e8:	8c e7       	ldi	r24, 0x7C	; 124
     3ea:	96 e0       	ldi	r25, 0x06	; 6
     3ec:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN5Print5printEhi>
	Serial.print('/');
     3f0:	6f e2       	ldi	r22, 0x2F	; 47
     3f2:	8c e7       	ldi	r24, 0x7C	; 124
     3f4:	96 e0       	ldi	r25, 0x06	; 6
     3f6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print5printEc>
	Serial.print(now.year(), DEC);
     3fa:	69 81       	ldd	r22, Y+1	; 0x01
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	60 53       	subi	r22, 0x30	; 48
     400:	78 4f       	sbci	r23, 0xF8	; 248
     402:	4a e0       	ldi	r20, 0x0A	; 10
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	8c e7       	ldi	r24, 0x7C	; 124
     408:	96 e0       	ldi	r25, 0x06	; 6
     40a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN5Print5printEji>
	Serial.print(" ");
     40e:	60 eb       	ldi	r22, 0xB0	; 176
     410:	74 e0       	ldi	r23, 0x04	; 4
     412:	8c e7       	ldi	r24, 0x7C	; 124
     414:	96 e0       	ldi	r25, 0x06	; 6
     416:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN5Print5printEPKc>
	Serial.print(now.hour(), DEC);
     41a:	4a e0       	ldi	r20, 0x0A	; 10
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	6c 81       	ldd	r22, Y+4	; 0x04
     420:	8c e7       	ldi	r24, 0x7C	; 124
     422:	96 e0       	ldi	r25, 0x06	; 6
     424:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN5Print5printEhi>
	Serial.print(':');
     428:	6a e3       	ldi	r22, 0x3A	; 58
     42a:	8c e7       	ldi	r24, 0x7C	; 124
     42c:	96 e0       	ldi	r25, 0x06	; 6
     42e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print5printEc>
	Serial.print(now.minute(), DEC);
     432:	4a e0       	ldi	r20, 0x0A	; 10
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	6d 81       	ldd	r22, Y+5	; 0x05
     438:	8c e7       	ldi	r24, 0x7C	; 124
     43a:	96 e0       	ldi	r25, 0x06	; 6
     43c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN5Print5printEhi>
	Serial.print(':');
     440:	6a e3       	ldi	r22, 0x3A	; 58
     442:	8c e7       	ldi	r24, 0x7C	; 124
     444:	96 e0       	ldi	r25, 0x06	; 6
     446:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print5printEc>
	Serial.print(now.second(), DEC);
     44a:	4a e0       	ldi	r20, 0x0A	; 10
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	6e 81       	ldd	r22, Y+6	; 0x06
     450:	8c e7       	ldi	r24, 0x7C	; 124
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN5Print5printEhi>
	Serial.println();
     458:	8c e7       	ldi	r24, 0x7C	; 124
     45a:	96 e0       	ldi	r25, 0x06	; 6
     45c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN5Print7printlnEv>
// 	Serial.print(future.hour(), DEC);
// 	Serial.print(':');
// 	Serial.print(future.minute(), DEC);
// 	Serial.print(':');
// 	Serial.print(future.second(), DEC);
	Serial.println();
     460:	8c e7       	ldi	r24, 0x7C	; 124
     462:	96 e0       	ldi	r25, 0x06	; 6
     464:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN5Print7printlnEv>
	
	Serial.println();
     468:	8c e7       	ldi	r24, 0x7C	; 124
     46a:	96 e0       	ldi	r25, 0x06	; 6
     46c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN5Print7printlnEv>
	delay(3000);
     470:	68 eb       	ldi	r22, 0xB8	; 184
     472:	7b e0       	ldi	r23, 0x0B	; 11
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 b0 0c 	call	0x1960	; 0x1960 <delay>
     47c:	26 96       	adiw	r28, 0x06	; 6
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <_GLOBAL__sub_I_myFile>:

#include "SDCard.h"

const int chipSelect = 53;

File myFile;
     48e:	8a e6       	ldi	r24, 0x6A	; 106
     490:	95 e0       	ldi	r25, 0x05	; 5
     492:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN5SDLib4FileC1Ev>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     496:	ee e5       	ldi	r30, 0x5E	; 94
     498:	f5 e0       	ldi	r31, 0x05	; 5
     49a:	15 82       	std	Z+5, r1	; 0x05
     49c:	16 82       	std	Z+6, r1	; 0x06
     49e:	11 86       	std	Z+9, r1	; 0x09
     4a0:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     4a2:	e0 e4       	ldi	r30, 0x40	; 64
     4a4:	f5 e0       	ldi	r31, 0x05	; 5
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 e0       	ldi	r26, 0x00	; 0
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	80 83       	st	Z, r24
     4b0:	91 83       	std	Z+1, r25	; 0x01
     4b2:	a2 83       	std	Z+2, r26	; 0x02
     4b4:	b3 83       	std	Z+3, r27	; 0x03
     4b6:	17 8a       	std	Z+23, r1	; 0x17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4b8:	e3 e2       	ldi	r30, 0x23	; 35
     4ba:	f5 e0       	ldi	r31, 0x05	; 5
     4bc:	13 82       	std	Z+3, r1	; 0x03
     4be:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     4c0:	8b ef       	ldi	r24, 0xFB	; 251
     4c2:	94 e0       	ldi	r25, 0x04	; 4
     4c4:	91 83       	std	Z+1, r25	; 0x01
     4c6:	80 83       	st	Z, r24
     4c8:	15 82       	std	Z+5, r1	; 0x05
     4ca:	08 95       	ret

000004cc <setup>:
     4cc:	26 e0       	ldi	r18, 0x06	; 6
     4ce:	40 e8       	ldi	r20, 0x80	; 128
     4d0:	55 e2       	ldi	r21, 0x25	; 37
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	8c e7       	ldi	r24, 0x7C	; 124
     4d8:	96 e0       	ldi	r25, 0x06	; 6
     4da:	b0 d6       	rcall	.+3424   	; 0x123c <_ZN14HardwareSerial5beginEmh>
#include "myRTC.h"

void setup()
{
	Serial.begin(9600);
	initRTC();
     4dc:	1b cf       	rjmp	.-458    	; 0x314 <_Z7initRTCv>

000004de <loop>:
     4de:	58 cf       	rjmp	.-336    	; 0x390 <_Z9timeStampv>

000004e0 <_ZN8SPIClass16beginTransactionE11SPISettings>:
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
{ }

Adafruit_BME280::Adafruit_BME280(int8_t cspin)
    : _cs(cspin), _mosi(-1), _miso(-1), _sck(-1)
     4e0:	20 91 79 09 	lds	r18, 0x0979	; 0x800979 <_ZN8SPIClass13interruptModeE>
     4e4:	22 23       	and	r18, r18
     4e6:	99 f0       	breq	.+38     	; 0x50e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     4e8:	4f b7       	in	r20, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	20 91 79 09 	lds	r18, 0x0979	; 0x800979 <_ZN8SPIClass13interruptModeE>
     4f0:	21 30       	cpi	r18, 0x01	; 1
     4f2:	59 f4       	brne	.+22     	; 0x50a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     4f4:	2d b3       	in	r18, 0x1d	; 29
     4f6:	20 93 77 09 	sts	0x0977, r18	; 0x800977 <_ZN8SPIClass13interruptSaveE>
     4fa:	3d b3       	in	r19, 0x1d	; 29
     4fc:	20 91 78 09 	lds	r18, 0x0978	; 0x800978 <_ZN8SPIClass13interruptMaskE>
     500:	20 95       	com	r18
     502:	23 23       	and	r18, r19
     504:	2d bb       	out	0x1d, r18	; 29
     506:	4f bf       	out	0x3f, r20	; 63
     508:	02 c0       	rjmp	.+4      	; 0x50e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     50a:	40 93 77 09 	sts	0x0977, r20	; 0x800977 <_ZN8SPIClass13interruptSaveE>
     50e:	8c bd       	out	0x2c, r24	; 44
     510:	9d bd       	out	0x2d, r25	; 45
     512:	08 95       	ret

00000514 <_ZN15Adafruit_BME280C1Eaaaa>:
{ }

Adafruit_BME280::Adafruit_BME280(int8_t cspin, int8_t mosipin, int8_t misopin, int8_t sckpin)
     514:	0f 93       	push	r16
     516:	fc 01       	movw	r30, r24
    : _cs(cspin), _mosi(mosipin), _miso(misopin), _sck(sckpin)
     518:	63 87       	std	Z+11, r22	; 0x0b
     51a:	44 87       	std	Z+12, r20	; 0x0c
     51c:	25 87       	std	Z+13, r18	; 0x0d
     51e:	06 87       	std	Z+14, r16	; 0x0e
{ }
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <_ZL9date2daysjhh>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     524:	80 3d       	cpi	r24, 0xD0	; 208
     526:	27 e0       	ldi	r18, 0x07	; 7
     528:	92 07       	cpc	r25, r18
     52a:	10 f0       	brcs	.+4      	; 0x530 <_ZL9date2daysjhh+0xc>
     52c:	80 5d       	subi	r24, 0xD0	; 208
     52e:	97 40       	sbci	r25, 0x07	; 7
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	e3 e4       	ldi	r30, 0x43	; 67
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	26 17       	cp	r18, r22
     53a:	30 f4       	brcc	.+12     	; 0x548 <_ZL9date2daysjhh+0x24>
     53c:	34 91       	lpm	r19, Z
     53e:	43 0f       	add	r20, r19
     540:	51 1d       	adc	r21, r1
     542:	2f 5f       	subi	r18, 0xFF	; 255
     544:	31 96       	adiw	r30, 0x01	; 1
     546:	f8 cf       	rjmp	.-16     	; 0x538 <_ZL9date2daysjhh+0x14>
     548:	63 30       	cpi	r22, 0x03	; 3
     54a:	38 f0       	brcs	.+14     	; 0x55a <_ZL9date2daysjhh+0x36>
     54c:	9c 01       	movw	r18, r24
     54e:	23 70       	andi	r18, 0x03	; 3
     550:	33 27       	eor	r19, r19
     552:	23 2b       	or	r18, r19
     554:	11 f4       	brne	.+4      	; 0x55a <_ZL9date2daysjhh+0x36>
     556:	4f 5f       	subi	r20, 0xFF	; 255
     558:	5f 4f       	sbci	r21, 0xFF	; 255
     55a:	bc 01       	movw	r22, r24
     55c:	6d 5f       	subi	r22, 0xFD	; 253
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	76 95       	lsr	r23
     562:	67 95       	ror	r22
     564:	76 95       	lsr	r23
     566:	67 95       	ror	r22
     568:	ed e6       	ldi	r30, 0x6D	; 109
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	8e 9f       	mul	r24, r30
     56e:	90 01       	movw	r18, r0
     570:	8f 9f       	mul	r24, r31
     572:	30 0d       	add	r19, r0
     574:	9e 9f       	mul	r25, r30
     576:	30 0d       	add	r19, r0
     578:	11 24       	eor	r1, r1
     57a:	c9 01       	movw	r24, r18
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	86 0f       	add	r24, r22
     580:	97 1f       	adc	r25, r23
     582:	84 0f       	add	r24, r20
     584:	95 1f       	adc	r25, r21
     586:	08 95       	ret

00000588 <_ZL6conv2dPKc>:
     588:	fc 01       	movw	r30, r24
     58a:	90 81       	ld	r25, Z
     58c:	90 53       	subi	r25, 0x30	; 48
     58e:	9a 30       	cpi	r25, 0x0A	; 10
     590:	08 f0       	brcs	.+2      	; 0x594 <_ZL6conv2dPKc+0xc>
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	81 81       	ldd	r24, Z+1	; 0x01
     596:	80 53       	subi	r24, 0x30	; 48
     598:	2a e0       	ldi	r18, 0x0A	; 10
     59a:	92 9f       	mul	r25, r18
     59c:	80 0d       	add	r24, r0
     59e:	11 24       	eor	r1, r1
     5a0:	08 95       	ret

000005a2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	2b 97       	sbiw	r28, 0x0b	; 11
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	8c 01       	movw	r16, r24
     5c0:	7a 01       	movw	r14, r20
     5c2:	4b e0       	ldi	r20, 0x0B	; 11
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <memcpy_P>
     5ce:	ce 01       	movw	r24, r28
     5d0:	0a 96       	adiw	r24, 0x0a	; 10
     5d2:	da df       	rcall	.-76     	; 0x588 <_ZL6conv2dPKc>
     5d4:	f8 01       	movw	r30, r16
     5d6:	80 83       	st	Z, r24
     5d8:	e9 81       	ldd	r30, Y+1	; 0x01
     5da:	8e 2f       	mov	r24, r30
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	e1 54       	subi	r30, 0x41	; 65
     5e2:	f1 09       	sbc	r31, r1
     5e4:	e3 31       	cpi	r30, 0x13	; 19
     5e6:	f1 05       	cpc	r31, r1
     5e8:	58 f5       	brcc	.+86     	; 0x640 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9e>
     5ea:	88 27       	eor	r24, r24
     5ec:	ee 58       	subi	r30, 0x8E	; 142
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	8f 4f       	sbci	r24, 0xFF	; 255
     5f2:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__tablejump2__>
     5f6:	8a 81       	ldd	r24, Y+2	; 0x02
     5f8:	81 36       	cpi	r24, 0x61	; 97
     5fa:	29 f0       	breq	.+10     	; 0x606 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
     5fc:	8b 81       	ldd	r24, Y+3	; 0x03
     5fe:	8e 36       	cpi	r24, 0x6E	; 110
     600:	21 f0       	breq	.+8      	; 0x60a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x68>
     602:	87 e0       	ldi	r24, 0x07	; 7
     604:	1b c0       	rjmp	.+54     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	19 c0       	rjmp	.+50     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	17 c0       	rjmp	.+46     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	15 c0       	rjmp	.+42     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	82 37       	cpi	r24, 0x72	; 114
     616:	11 f0       	breq	.+4      	; 0x61c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x7a>
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	10 c0       	rjmp	.+32     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     61c:	84 e0       	ldi	r24, 0x04	; 4
     61e:	0e c0       	rjmp	.+28     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	82 37       	cpi	r24, 0x72	; 114
     624:	11 f0       	breq	.+4      	; 0x62a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x88>
     626:	85 e0       	ldi	r24, 0x05	; 5
     628:	09 c0       	rjmp	.+18     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	07 c0       	rjmp	.+14     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	05 c0       	rjmp	.+10     	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     632:	8a e0       	ldi	r24, 0x0A	; 10
     634:	03 c0       	rjmp	.+6      	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     636:	8b e0       	ldi	r24, 0x0B	; 11
     638:	01 c0       	rjmp	.+2      	; 0x63c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     63a:	8c e0       	ldi	r24, 0x0C	; 12
     63c:	f8 01       	movw	r30, r16
     63e:	81 83       	std	Z+1, r24	; 0x01
     640:	ce 01       	movw	r24, r28
     642:	05 96       	adiw	r24, 0x05	; 5
     644:	a1 df       	rcall	.-190    	; 0x588 <_ZL6conv2dPKc>
     646:	f8 01       	movw	r30, r16
     648:	82 83       	std	Z+2, r24	; 0x02
     64a:	48 e0       	ldi	r20, 0x08	; 8
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	b7 01       	movw	r22, r14
     650:	ce 01       	movw	r24, r28
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <memcpy_P>
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	95 df       	rcall	.-214    	; 0x588 <_ZL6conv2dPKc>
     65e:	f8 01       	movw	r30, r16
     660:	83 83       	std	Z+3, r24	; 0x03
     662:	ce 01       	movw	r24, r28
     664:	04 96       	adiw	r24, 0x04	; 4
     666:	90 df       	rcall	.-224    	; 0x588 <_ZL6conv2dPKc>
     668:	f8 01       	movw	r30, r16
     66a:	84 83       	std	Z+4, r24	; 0x04
     66c:	ce 01       	movw	r24, r28
     66e:	07 96       	adiw	r24, 0x07	; 7
     670:	8b df       	rcall	.-234    	; 0x588 <_ZL6conv2dPKc>
     672:	f8 01       	movw	r30, r16
     674:	85 83       	std	Z+5, r24	; 0x05
     676:	2b 96       	adiw	r28, 0x0b	; 11
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <_ZNK8DateTime12dayOfTheWeekEv>:
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	42 81       	ldd	r20, Z+2	; 0x02
     696:	61 81       	ldd	r22, Z+1	; 0x01
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	44 df       	rcall	.-376    	; 0x524 <_ZL9date2daysjhh>
     69c:	06 96       	adiw	r24, 0x06	; 6
     69e:	67 e0       	ldi	r22, 0x07	; 7
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__udivmodhi4>
     6a6:	08 95       	ret

000006a8 <_ZN10RTC_DS32315beginEv>:
     6a8:	83 ef       	ldi	r24, 0xF3	; 243
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	20 d4       	rcall	.+2112   	; 0xeee <_ZN7TwoWire5beginEv>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret

000006b2 <_ZN10RTC_DS32313nowEv>:
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	68 e6       	ldi	r22, 0x68	; 104
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	83 ef       	ldi	r24, 0xF3	; 243
     6ca:	95 e0       	ldi	r25, 0x05	; 5
     6cc:	29 d4       	rcall	.+2130   	; 0xf20 <_ZN7TwoWire17beginTransmissionEi>
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	83 ef       	ldi	r24, 0xF3	; 243
     6d2:	95 e0       	ldi	r25, 0x05	; 5
     6d4:	ce d3       	rcall	.+1948   	; 0xe72 <_ZN7TwoWire5writeEh>
     6d6:	83 ef       	ldi	r24, 0xF3	; 243
     6d8:	95 e0       	ldi	r25, 0x05	; 5
     6da:	99 d4       	rcall	.+2354   	; 0x100e <_ZN7TwoWire15endTransmissionEv>
     6dc:	47 e0       	ldi	r20, 0x07	; 7
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	68 e6       	ldi	r22, 0x68	; 104
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	83 ef       	ldi	r24, 0xF3	; 243
     6e6:	95 e0       	ldi	r25, 0x05	; 5
     6e8:	90 d4       	rcall	.+2336   	; 0x100a <_ZN7TwoWire11requestFromEii>
     6ea:	83 ef       	ldi	r24, 0xF3	; 243
     6ec:	95 e0       	ldi	r25, 0x05	; 5
     6ee:	3b d3       	rcall	.+1654   	; 0xd66 <_ZN7TwoWire4readEv>
     6f0:	8f 77       	andi	r24, 0x7F	; 127
     6f2:	98 2f       	mov	r25, r24
     6f4:	92 95       	swap	r25
     6f6:	9f 70       	andi	r25, 0x0F	; 15
     6f8:	1a ef       	ldi	r17, 0xFA	; 250
     6fa:	08 2f       	mov	r16, r24
     6fc:	91 9f       	mul	r25, r17
     6fe:	00 0d       	add	r16, r0
     700:	11 24       	eor	r1, r1
     702:	83 ef       	ldi	r24, 0xF3	; 243
     704:	95 e0       	ldi	r25, 0x05	; 5
     706:	2f d3       	rcall	.+1630   	; 0xd66 <_ZN7TwoWire4readEv>
     708:	9c 01       	movw	r18, r24
     70a:	33 27       	eor	r19, r19
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	35 95       	asr	r19
     710:	27 95       	ror	r18
     712:	9a 95       	dec	r25
     714:	e1 f7       	brne	.-8      	; 0x70e <_ZN10RTC_DS32313nowEv+0x5c>
     716:	f8 2e       	mov	r15, r24
     718:	12 9f       	mul	r17, r18
     71a:	f0 0c       	add	r15, r0
     71c:	11 24       	eor	r1, r1
     71e:	83 ef       	ldi	r24, 0xF3	; 243
     720:	95 e0       	ldi	r25, 0x05	; 5
     722:	21 d3       	rcall	.+1602   	; 0xd66 <_ZN7TwoWire4readEv>
     724:	9c 01       	movw	r18, r24
     726:	33 27       	eor	r19, r19
     728:	44 e0       	ldi	r20, 0x04	; 4
     72a:	35 95       	asr	r19
     72c:	27 95       	ror	r18
     72e:	4a 95       	dec	r20
     730:	e1 f7       	brne	.-8      	; 0x72a <_ZN10RTC_DS32313nowEv+0x78>
     732:	e8 2e       	mov	r14, r24
     734:	12 9f       	mul	r17, r18
     736:	e0 0c       	add	r14, r0
     738:	11 24       	eor	r1, r1
     73a:	83 ef       	ldi	r24, 0xF3	; 243
     73c:	95 e0       	ldi	r25, 0x05	; 5
     73e:	13 d3       	rcall	.+1574   	; 0xd66 <_ZN7TwoWire4readEv>
     740:	83 ef       	ldi	r24, 0xF3	; 243
     742:	95 e0       	ldi	r25, 0x05	; 5
     744:	10 d3       	rcall	.+1568   	; 0xd66 <_ZN7TwoWire4readEv>
     746:	9c 01       	movw	r18, r24
     748:	33 27       	eor	r19, r19
     74a:	54 e0       	ldi	r21, 0x04	; 4
     74c:	35 95       	asr	r19
     74e:	27 95       	ror	r18
     750:	5a 95       	dec	r21
     752:	e1 f7       	brne	.-8      	; 0x74c <_ZN10RTC_DS32313nowEv+0x9a>
     754:	d8 2e       	mov	r13, r24
     756:	12 9f       	mul	r17, r18
     758:	d0 0c       	add	r13, r0
     75a:	11 24       	eor	r1, r1
     75c:	83 ef       	ldi	r24, 0xF3	; 243
     75e:	95 e0       	ldi	r25, 0x05	; 5
     760:	02 d3       	rcall	.+1540   	; 0xd66 <_ZN7TwoWire4readEv>
     762:	9c 01       	movw	r18, r24
     764:	33 27       	eor	r19, r19
     766:	64 e0       	ldi	r22, 0x04	; 4
     768:	35 95       	asr	r19
     76a:	27 95       	ror	r18
     76c:	6a 95       	dec	r22
     76e:	e1 f7       	brne	.-8      	; 0x768 <_ZN10RTC_DS32313nowEv+0xb6>
     770:	c8 2e       	mov	r12, r24
     772:	12 9f       	mul	r17, r18
     774:	c0 0c       	add	r12, r0
     776:	11 24       	eor	r1, r1
     778:	83 ef       	ldi	r24, 0xF3	; 243
     77a:	95 e0       	ldi	r25, 0x05	; 5
     77c:	f4 d2       	rcall	.+1512   	; 0xd66 <_ZN7TwoWire4readEv>
     77e:	9c 01       	movw	r18, r24
     780:	33 27       	eor	r19, r19
     782:	74 e0       	ldi	r23, 0x04	; 4
     784:	35 95       	asr	r19
     786:	27 95       	ror	r18
     788:	7a 95       	dec	r23
     78a:	e1 f7       	brne	.-8      	; 0x784 <_ZN10RTC_DS32313nowEv+0xd2>
     78c:	12 9f       	mul	r17, r18
     78e:	80 0d       	add	r24, r0
     790:	11 24       	eor	r1, r1
     792:	88 83       	st	Y, r24
     794:	c9 82       	std	Y+1, r12	; 0x01
     796:	da 82       	std	Y+2, r13	; 0x02
     798:	eb 82       	std	Y+3, r14	; 0x03
     79a:	fc 82       	std	Y+4, r15	; 0x04
     79c:	0d 83       	std	Y+5, r16	; 0x05
     79e:	ce 01       	movw	r24, r28
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <_ZL17read_i2c_registerhh.constprop.7>:
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
     7b6:	68 e6       	ldi	r22, 0x68	; 104
     7b8:	83 ef       	ldi	r24, 0xF3	; 243
     7ba:	95 e0       	ldi	r25, 0x05	; 5
     7bc:	a7 d3       	rcall	.+1870   	; 0xf0c <_ZN7TwoWire17beginTransmissionEh>
     7be:	6c 2f       	mov	r22, r28
     7c0:	83 ef       	ldi	r24, 0xF3	; 243
     7c2:	95 e0       	ldi	r25, 0x05	; 5
     7c4:	56 d3       	rcall	.+1708   	; 0xe72 <_ZN7TwoWire5writeEh>
     7c6:	83 ef       	ldi	r24, 0xF3	; 243
     7c8:	95 e0       	ldi	r25, 0x05	; 5
     7ca:	21 d4       	rcall	.+2114   	; 0x100e <_ZN7TwoWire15endTransmissionEv>
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	68 e6       	ldi	r22, 0x68	; 104
     7d0:	83 ef       	ldi	r24, 0xF3	; 243
     7d2:	95 e0       	ldi	r25, 0x05	; 5
     7d4:	18 d4       	rcall	.+2096   	; 0x1006 <_ZN7TwoWire11requestFromEhh>
     7d6:	83 ef       	ldi	r24, 0xF3	; 243
     7d8:	95 e0       	ldi	r25, 0x05	; 5
     7da:	c5 d2       	rcall	.+1418   	; 0xd66 <_ZN7TwoWire4readEv>
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
     7e8:	68 e6       	ldi	r22, 0x68	; 104
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	83 ef       	ldi	r24, 0xF3	; 243
     7ee:	95 e0       	ldi	r25, 0x05	; 5
     7f0:	97 d3       	rcall	.+1838   	; 0xf20 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	83 ef       	ldi	r24, 0xF3	; 243
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	3c d3       	rcall	.+1656   	; 0xe72 <_ZN7TwoWire5writeEh>
     7fa:	f8 01       	movw	r30, r16
     7fc:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
     7fe:	ca e0       	ldi	r28, 0x0A	; 10
     800:	82 2f       	mov	r24, r18
     802:	6c 2f       	mov	r22, r28
     804:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodqi4>
     808:	68 2f       	mov	r22, r24
     80a:	66 0f       	add	r22, r22
     80c:	86 0f       	add	r24, r22
     80e:	88 0f       	add	r24, r24
     810:	68 2f       	mov	r22, r24
     812:	62 0f       	add	r22, r18
     814:	83 ef       	ldi	r24, 0xF3	; 243
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	2c d3       	rcall	.+1624   	; 0xe72 <_ZN7TwoWire5writeEh>
     81a:	f8 01       	movw	r30, r16
     81c:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
     81e:	82 2f       	mov	r24, r18
     820:	6c 2f       	mov	r22, r28
     822:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodqi4>
     826:	68 2f       	mov	r22, r24
     828:	66 0f       	add	r22, r22
     82a:	86 0f       	add	r24, r22
     82c:	88 0f       	add	r24, r24
     82e:	68 2f       	mov	r22, r24
     830:	62 0f       	add	r22, r18
     832:	83 ef       	ldi	r24, 0xF3	; 243
     834:	95 e0       	ldi	r25, 0x05	; 5
     836:	1d d3       	rcall	.+1594   	; 0xe72 <_ZN7TwoWire5writeEh>
     838:	f8 01       	movw	r30, r16
     83a:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
     83c:	82 2f       	mov	r24, r18
     83e:	6c 2f       	mov	r22, r28
     840:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodqi4>
     844:	68 2f       	mov	r22, r24
     846:	66 0f       	add	r22, r22
     848:	86 0f       	add	r24, r22
     84a:	88 0f       	add	r24, r24
     84c:	68 2f       	mov	r22, r24
     84e:	62 0f       	add	r22, r18
     850:	83 ef       	ldi	r24, 0xF3	; 243
     852:	95 e0       	ldi	r25, 0x05	; 5
  Wire._I2C_WRITE(bin2bcd(0));
     854:	0e d3       	rcall	.+1564   	; 0xe72 <_ZN7TwoWire5writeEh>
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	83 ef       	ldi	r24, 0xF3	; 243
     85a:	95 e0       	ldi	r25, 0x05	; 5
     85c:	0a d3       	rcall	.+1556   	; 0xe72 <_ZN7TwoWire5writeEh>
     85e:	f8 01       	movw	r30, r16
     860:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
     862:	82 2f       	mov	r24, r18
     864:	6c 2f       	mov	r22, r28
     866:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodqi4>
     86a:	68 2f       	mov	r22, r24
     86c:	66 0f       	add	r22, r22
     86e:	86 0f       	add	r24, r22
     870:	88 0f       	add	r24, r24
     872:	68 2f       	mov	r22, r24
     874:	62 0f       	add	r22, r18
     876:	83 ef       	ldi	r24, 0xF3	; 243
     878:	95 e0       	ldi	r25, 0x05	; 5
     87a:	fb d2       	rcall	.+1526   	; 0xe72 <_ZN7TwoWire5writeEh>
     87c:	f8 01       	movw	r30, r16
     87e:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
     880:	82 2f       	mov	r24, r18
     882:	6c 2f       	mov	r22, r28
     884:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodqi4>
     888:	68 2f       	mov	r22, r24
     88a:	66 0f       	add	r22, r22
     88c:	86 0f       	add	r24, r22
     88e:	88 0f       	add	r24, r24
     890:	68 2f       	mov	r22, r24
     892:	62 0f       	add	r22, r18
     894:	83 ef       	ldi	r24, 0xF3	; 243
     896:	95 e0       	ldi	r25, 0x05	; 5
     898:	ec d2       	rcall	.+1496   	; 0xe72 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
     89a:	f8 01       	movw	r30, r16
     89c:	20 81       	ld	r18, Z
     89e:	82 2f       	mov	r24, r18
     8a0:	6c 2f       	mov	r22, r28
     8a2:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodqi4>
     8a6:	68 2f       	mov	r22, r24
     8a8:	66 0f       	add	r22, r22
     8aa:	86 0f       	add	r24, r22
     8ac:	88 0f       	add	r24, r24
     8ae:	68 2f       	mov	r22, r24
     8b0:	62 0f       	add	r22, r18
     8b2:	83 ef       	ldi	r24, 0xF3	; 243
  Wire.endTransmission();
     8b4:	95 e0       	ldi	r25, 0x05	; 5
     8b6:	dd d2       	rcall	.+1466   	; 0xe72 <_ZN7TwoWire5writeEh>
     8b8:	83 ef       	ldi	r24, 0xF3	; 243

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
     8ba:	95 e0       	ldi	r25, 0x05	; 5
     8bc:	a8 d3       	rcall	.+1872   	; 0x100e <_ZN7TwoWire15endTransmissionEv>
     8be:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
     8c0:	78 df       	rcall	.-272    	; 0x7b2 <_ZL17read_i2c_registerhh.constprop.7>
     8c2:	c8 2f       	mov	r28, r24
     8c4:	68 e6       	ldi	r22, 0x68	; 104
     8c6:	83 ef       	ldi	r24, 0xF3	; 243
  Wire._I2C_WRITE((byte)reg);
     8c8:	95 e0       	ldi	r25, 0x05	; 5
     8ca:	20 d3       	rcall	.+1600   	; 0xf0c <_ZN7TwoWire17beginTransmissionEh>
     8cc:	6f e0       	ldi	r22, 0x0F	; 15
     8ce:	83 ef       	ldi	r24, 0xF3	; 243
  Wire._I2C_WRITE((byte)val);
     8d0:	95 e0       	ldi	r25, 0x05	; 5
     8d2:	cf d2       	rcall	.+1438   	; 0xe72 <_ZN7TwoWire5writeEh>
     8d4:	6c 2f       	mov	r22, r28
     8d6:	6f 77       	andi	r22, 0x7F	; 127
     8d8:	83 ef       	ldi	r24, 0xF3	; 243
     8da:	95 e0       	ldi	r25, 0x05	; 5
  Wire.endTransmission();
     8dc:	ca d2       	rcall	.+1428   	; 0xe72 <_ZN7TwoWire5writeEh>
     8de:	83 ef       	ldi	r24, 0xF3	; 243
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     8e6:	0f 91       	pop	r16
     8e8:	92 c3       	rjmp	.+1828   	; 0x100e <_ZN7TwoWire15endTransmissionEv>

000008ea <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
     8ea:	8f e0       	ldi	r24, 0x0F	; 15
     8ec:	62 df       	rcall	.-316    	; 0x7b2 <_ZL17read_i2c_registerhh.constprop.7>
     8ee:	87 fb       	bst	r24, 7
     8f0:	88 27       	eor	r24, r24
     8f2:	80 f9       	bld	r24, 0
}
     8f4:	08 95       	ret

000008f6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     8f6:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <twi_state>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <twi_sendStop>
     900:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <twi_inRepStart>
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	84 e1       	ldi	r24, 0x14	; 20
     908:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <digitalWrite>
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	85 e1       	ldi	r24, 0x15	; 21
     910:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <digitalWrite>
     914:	e9 eb       	ldi	r30, 0xB9	; 185
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8e 7f       	andi	r24, 0xFE	; 254
     91c:	80 83       	st	Z, r24
     91e:	80 81       	ld	r24, Z
     920:	8d 7f       	andi	r24, 0xFD	; 253
     922:	80 83       	st	Z, r24
     924:	88 e4       	ldi	r24, 0x48	; 72
     926:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     92a:	85 e4       	ldi	r24, 0x45	; 69
     92c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     930:	08 95       	ret

00000932 <twi_readFrom>:
     932:	41 32       	cpi	r20, 0x21	; 33
     934:	08 f0       	brcs	.+2      	; 0x938 <twi_readFrom+0x6>
     936:	43 c0       	rjmp	.+134    	; 0x9be <twi_readFrom+0x8c>
     938:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <twi_state>
     93c:	91 11       	cpse	r25, r1
     93e:	fc cf       	rjmp	.-8      	; 0x938 <twi_readFrom+0x6>
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <twi_state>
     946:	20 93 f0 05 	sts	0x05F0, r18	; 0x8005f0 <twi_sendStop>
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	20 93 85 05 	sts	0x0585, r18	; 0x800585 <twi_error>
     950:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_masterBufferIndex>
     954:	24 0f       	add	r18, r20
     956:	20 93 c9 05 	sts	0x05C9, r18	; 0x8005c9 <twi_masterBufferLength>
     95a:	90 93 f1 05 	sts	0x05F1, r25	; 0x8005f1 <twi_slarw>
     95e:	90 91 f1 05 	lds	r25, 0x05F1	; 0x8005f1 <twi_slarw>
     962:	88 0f       	add	r24, r24
     964:	89 2b       	or	r24, r25
     966:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <twi_slarw>
     96a:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_inRepStart>
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	61 f4       	brne	.+24     	; 0x98a <twi_readFrom+0x58>
     972:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <twi_inRepStart>
     976:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <twi_slarw>
     97a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     97e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     982:	83 fd       	sbrc	r24, 3
     984:	f8 cf       	rjmp	.-16     	; 0x976 <twi_readFrom+0x44>
     986:	85 ec       	ldi	r24, 0xC5	; 197
     988:	01 c0       	rjmp	.+2      	; 0x98c <twi_readFrom+0x5a>
     98a:	85 ee       	ldi	r24, 0xE5	; 229
     98c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     990:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_state>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	e1 f3       	breq	.-8      	; 0x990 <twi_readFrom+0x5e>
     998:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     99c:	84 17       	cp	r24, r20
     99e:	10 f4       	brcc	.+4      	; 0x9a4 <twi_readFrom+0x72>
     9a0:	40 91 ca 05 	lds	r20, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     9a4:	ab ec       	ldi	r26, 0xCB	; 203
     9a6:	b5 e0       	ldi	r27, 0x05	; 5
     9a8:	96 2f       	mov	r25, r22
     9aa:	fb 01       	movw	r30, r22
     9ac:	8e 2f       	mov	r24, r30
     9ae:	89 1b       	sub	r24, r25
     9b0:	84 17       	cp	r24, r20
     9b2:	18 f4       	brcc	.+6      	; 0x9ba <twi_readFrom+0x88>
     9b4:	8d 91       	ld	r24, X+
     9b6:	81 93       	st	Z+, r24
     9b8:	f9 cf       	rjmp	.-14     	; 0x9ac <twi_readFrom+0x7a>
     9ba:	84 2f       	mov	r24, r20
     9bc:	08 95       	ret
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	08 95       	ret

000009c2 <twi_writeTo>:
     9c2:	0f 93       	push	r16
     9c4:	41 32       	cpi	r20, 0x21	; 33
     9c6:	08 f0       	brcs	.+2      	; 0x9ca <twi_writeTo+0x8>
     9c8:	4a c0       	rjmp	.+148    	; 0xa5e <twi_writeTo+0x9c>
     9ca:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <twi_state>
     9ce:	91 11       	cpse	r25, r1
     9d0:	fc cf       	rjmp	.-8      	; 0x9ca <twi_writeTo+0x8>
     9d2:	32 e0       	ldi	r19, 0x02	; 2
     9d4:	30 93 f2 05 	sts	0x05F2, r19	; 0x8005f2 <twi_state>
     9d8:	00 93 f0 05 	sts	0x05F0, r16	; 0x8005f0 <twi_sendStop>
     9dc:	3f ef       	ldi	r19, 0xFF	; 255
     9de:	30 93 85 05 	sts	0x0585, r19	; 0x800585 <twi_error>
     9e2:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_masterBufferIndex>
     9e6:	40 93 c9 05 	sts	0x05C9, r20	; 0x8005c9 <twi_masterBufferLength>
     9ea:	56 2f       	mov	r21, r22
     9ec:	ab ec       	ldi	r26, 0xCB	; 203
     9ee:	b5 e0       	ldi	r27, 0x05	; 5
     9f0:	fb 01       	movw	r30, r22
     9f2:	3e 2f       	mov	r19, r30
     9f4:	35 1b       	sub	r19, r21
     9f6:	34 17       	cp	r19, r20
     9f8:	18 f4       	brcc	.+6      	; 0xa00 <twi_writeTo+0x3e>
     9fa:	31 91       	ld	r19, Z+
     9fc:	3d 93       	st	X+, r19
     9fe:	f9 cf       	rjmp	.-14     	; 0x9f2 <twi_writeTo+0x30>
     a00:	10 92 f1 05 	sts	0x05F1, r1	; 0x8005f1 <twi_slarw>
     a04:	30 91 f1 05 	lds	r19, 0x05F1	; 0x8005f1 <twi_slarw>
     a08:	88 0f       	add	r24, r24
     a0a:	83 2b       	or	r24, r19
     a0c:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <twi_slarw>
     a10:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_inRepStart>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	61 f4       	brne	.+24     	; 0xa30 <twi_writeTo+0x6e>
     a18:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <twi_inRepStart>
     a1c:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <twi_slarw>
     a20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a28:	83 fd       	sbrc	r24, 3
     a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <twi_writeTo+0x5a>
     a2c:	85 ec       	ldi	r24, 0xC5	; 197
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <twi_writeTo+0x70>
     a30:	85 ee       	ldi	r24, 0xE5	; 229
     a32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a36:	22 23       	and	r18, r18
     a38:	21 f0       	breq	.+8      	; 0xa42 <twi_writeTo+0x80>
     a3a:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_state>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	d1 f3       	breq	.-12     	; 0xa36 <twi_writeTo+0x74>
     a42:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <twi_error>
     a46:	8f 3f       	cpi	r24, 0xFF	; 255
     a48:	79 f0       	breq	.+30     	; 0xa68 <twi_writeTo+0xa6>
     a4a:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <twi_error>
     a4e:	80 32       	cpi	r24, 0x20	; 32
     a50:	41 f0       	breq	.+16     	; 0xa62 <twi_writeTo+0xa0>
     a52:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <twi_error>
     a56:	80 33       	cpi	r24, 0x30	; 48
     a58:	31 f0       	breq	.+12     	; 0xa66 <twi_writeTo+0xa4>
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <twi_writeTo+0xa6>
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <twi_writeTo+0xa6>
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <twi_writeTo+0xa6>
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	89 2f       	mov	r24, r25
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <twi_transmit>:
     a6e:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <twi_txBufferLength>
     a72:	26 2f       	mov	r18, r22
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	24 0f       	add	r18, r20
     a78:	31 1d       	adc	r19, r1
     a7a:	21 32       	cpi	r18, 0x21	; 33
     a7c:	31 05       	cpc	r19, r1
     a7e:	dc f4       	brge	.+54     	; 0xab6 <twi_transmit+0x48>
     a80:	20 91 f2 05 	lds	r18, 0x05F2	; 0x8005f2 <twi_state>
     a84:	24 30       	cpi	r18, 0x04	; 4
     a86:	c9 f4       	brne	.+50     	; 0xaba <twi_transmit+0x4c>
     a88:	fc 01       	movw	r30, r24
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	86 17       	cp	r24, r22
     a90:	58 f4       	brcc	.+22     	; 0xaa8 <twi_transmit+0x3a>
     a92:	30 91 a7 05 	lds	r19, 0x05A7	; 0x8005a7 <twi_txBufferLength>
     a96:	21 91       	ld	r18, Z+
     a98:	dc 01       	movw	r26, r24
     a9a:	a7 55       	subi	r26, 0x57	; 87
     a9c:	ba 4f       	sbci	r27, 0xFA	; 250
     a9e:	a3 0f       	add	r26, r19
     aa0:	b1 1d       	adc	r27, r1
     aa2:	2c 93       	st	X, r18
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	f3 cf       	rjmp	.-26     	; 0xa8e <twi_transmit+0x20>
     aa8:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <twi_txBufferLength>
     aac:	68 0f       	add	r22, r24
     aae:	60 93 a7 05 	sts	0x05A7, r22	; 0x8005a7 <twi_txBufferLength>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	08 95       	ret
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	08 95       	ret
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	08 95       	ret

00000abe <twi_attachSlaveRxEvent>:
     abe:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <twi_onSlaveReceive+0x1>
     ac2:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <twi_onSlaveReceive>
     ac6:	08 95       	ret

00000ac8 <twi_attachSlaveTxEvent>:
     ac8:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <twi_onSlaveTransmit+0x1>
     acc:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <twi_onSlaveTransmit>
     ad0:	08 95       	ret

00000ad2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     ad2:	85 ed       	ldi	r24, 0xD5	; 213
     ad4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     ad8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     adc:	84 fd       	sbrc	r24, 4
     ade:	fc cf       	rjmp	.-8      	; 0xad8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     ae0:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <twi_state>
     ae4:	08 95       	ret

00000ae6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     ae6:	85 ec       	ldi	r24, 0xC5	; 197
     ae8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
     aec:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <twi_state>
     af0:	08 95       	ret

00000af2 <__vector_39>:
}

ISR(TWI_vect)
{
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	2f 93       	push	r18
     b02:	3f 93       	push	r19
     b04:	4f 93       	push	r20
     b06:	5f 93       	push	r21
     b08:	6f 93       	push	r22
     b0a:	7f 93       	push	r23
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31
  switch(TW_STATUS){
     b18:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b1c:	88 7f       	andi	r24, 0xF8	; 248
     b1e:	80 36       	cpi	r24, 0x60	; 96
     b20:	09 f4       	brne	.+2      	; 0xb24 <__vector_39+0x32>
     b22:	9d c0       	rjmp	.+314    	; 0xc5e <__vector_39+0x16c>
     b24:	70 f5       	brcc	.+92     	; 0xb82 <__vector_39+0x90>
     b26:	88 32       	cpi	r24, 0x28	; 40
     b28:	09 f4       	brne	.+2      	; 0xb2c <__vector_39+0x3a>
     b2a:	5c c0       	rjmp	.+184    	; 0xbe4 <__vector_39+0xf2>
     b2c:	90 f4       	brcc	.+36     	; 0xb52 <__vector_39+0x60>
     b2e:	80 31       	cpi	r24, 0x10	; 16
     b30:	09 f4       	brne	.+2      	; 0xb34 <__vector_39+0x42>
     b32:	55 c0       	rjmp	.+170    	; 0xbde <__vector_39+0xec>
     b34:	38 f4       	brcc	.+14     	; 0xb44 <__vector_39+0x52>
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <__vector_39+0x4a>
     b3a:	f3 c0       	rjmp	.+486    	; 0xd22 <__vector_39+0x230>
     b3c:	88 30       	cpi	r24, 0x08	; 8
     b3e:	09 f4       	brne	.+2      	; 0xb42 <__vector_39+0x50>
     b40:	4e c0       	rjmp	.+156    	; 0xbde <__vector_39+0xec>
     b42:	f2 c0       	rjmp	.+484    	; 0xd28 <__vector_39+0x236>
     b44:	88 31       	cpi	r24, 0x18	; 24
     b46:	09 f4       	brne	.+2      	; 0xb4a <__vector_39+0x58>
     b48:	4d c0       	rjmp	.+154    	; 0xbe4 <__vector_39+0xf2>
     b4a:	80 32       	cpi	r24, 0x20	; 32
     b4c:	09 f4       	brne	.+2      	; 0xb50 <__vector_39+0x5e>
     b4e:	5e c0       	rjmp	.+188    	; 0xc0c <__vector_39+0x11a>
     b50:	eb c0       	rjmp	.+470    	; 0xd28 <__vector_39+0x236>
     b52:	80 34       	cpi	r24, 0x40	; 64
     b54:	09 f4       	brne	.+2      	; 0xb58 <__vector_39+0x66>
     b56:	69 c0       	rjmp	.+210    	; 0xc2a <__vector_39+0x138>
     b58:	50 f4       	brcc	.+20     	; 0xb6e <__vector_39+0x7c>
     b5a:	80 33       	cpi	r24, 0x30	; 48
     b5c:	09 f4       	brne	.+2      	; 0xb60 <__vector_39+0x6e>
     b5e:	56 c0       	rjmp	.+172    	; 0xc0c <__vector_39+0x11a>
     b60:	88 33       	cpi	r24, 0x38	; 56
     b62:	09 f0       	breq	.+2      	; 0xb66 <__vector_39+0x74>
     b64:	e1 c0       	rjmp	.+450    	; 0xd28 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     b66:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <twi_error>
      twi_releaseBus();
     b6a:	bd df       	rcall	.-134    	; 0xae6 <twi_releaseBus>
      break;
     b6c:	dd c0       	rjmp	.+442    	; 0xd28 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     b6e:	80 35       	cpi	r24, 0x50	; 80
     b70:	09 f4       	brne	.+2      	; 0xb74 <__vector_39+0x82>
     b72:	4f c0       	rjmp	.+158    	; 0xc12 <__vector_39+0x120>
     b74:	88 35       	cpi	r24, 0x58	; 88
     b76:	09 f4       	brne	.+2      	; 0xb7a <__vector_39+0x88>
     b78:	5d c0       	rjmp	.+186    	; 0xc34 <__vector_39+0x142>
     b7a:	88 34       	cpi	r24, 0x48	; 72
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__vector_39+0x8e>
     b7e:	d4 c0       	rjmp	.+424    	; 0xd28 <__vector_39+0x236>
     b80:	d2 c0       	rjmp	.+420    	; 0xd26 <__vector_39+0x234>
     b82:	88 39       	cpi	r24, 0x98	; 152
     b84:	09 f4       	brne	.+2      	; 0xb88 <__vector_39+0x96>
     b86:	c3 c0       	rjmp	.+390    	; 0xd0e <__vector_39+0x21c>
     b88:	a8 f4       	brcc	.+42     	; 0xbb4 <__vector_39+0xc2>
     b8a:	88 37       	cpi	r24, 0x78	; 120
     b8c:	09 f4       	brne	.+2      	; 0xb90 <__vector_39+0x9e>
     b8e:	67 c0       	rjmp	.+206    	; 0xc5e <__vector_39+0x16c>
     b90:	38 f4       	brcc	.+14     	; 0xba0 <__vector_39+0xae>
     b92:	88 36       	cpi	r24, 0x68	; 104
     b94:	09 f4       	brne	.+2      	; 0xb98 <__vector_39+0xa6>
     b96:	63 c0       	rjmp	.+198    	; 0xc5e <__vector_39+0x16c>
     b98:	80 37       	cpi	r24, 0x70	; 112
     b9a:	09 f4       	brne	.+2      	; 0xb9e <__vector_39+0xac>
     b9c:	60 c0       	rjmp	.+192    	; 0xc5e <__vector_39+0x16c>
     b9e:	c4 c0       	rjmp	.+392    	; 0xd28 <__vector_39+0x236>
     ba0:	88 38       	cpi	r24, 0x88	; 136
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__vector_39+0xb4>
     ba4:	b4 c0       	rjmp	.+360    	; 0xd0e <__vector_39+0x21c>
     ba6:	80 39       	cpi	r24, 0x90	; 144
     ba8:	09 f4       	brne	.+2      	; 0xbac <__vector_39+0xba>
     baa:	5f c0       	rjmp	.+190    	; 0xc6a <__vector_39+0x178>
     bac:	80 38       	cpi	r24, 0x80	; 128
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_39+0xc0>
     bb0:	bb c0       	rjmp	.+374    	; 0xd28 <__vector_39+0x236>
     bb2:	5b c0       	rjmp	.+182    	; 0xc6a <__vector_39+0x178>
     bb4:	80 3b       	cpi	r24, 0xB0	; 176
     bb6:	09 f4       	brne	.+2      	; 0xbba <__vector_39+0xc8>
     bb8:	82 c0       	rjmp	.+260    	; 0xcbe <__vector_39+0x1cc>
     bba:	38 f4       	brcc	.+14     	; 0xbca <__vector_39+0xd8>
     bbc:	80 3a       	cpi	r24, 0xA0	; 160
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__vector_39+0xd0>
     bc0:	66 c0       	rjmp	.+204    	; 0xc8e <__vector_39+0x19c>
     bc2:	88 3a       	cpi	r24, 0xA8	; 168
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <__vector_39+0xd6>
     bc6:	7b c0       	rjmp	.+246    	; 0xcbe <__vector_39+0x1cc>
     bc8:	af c0       	rjmp	.+350    	; 0xd28 <__vector_39+0x236>
     bca:	80 3c       	cpi	r24, 0xC0	; 192
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <__vector_39+0xde>
     bce:	a3 c0       	rjmp	.+326    	; 0xd16 <__vector_39+0x224>
     bd0:	88 3c       	cpi	r24, 0xC8	; 200
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__vector_39+0xe4>
     bd4:	a0 c0       	rjmp	.+320    	; 0xd16 <__vector_39+0x224>
     bd6:	88 3b       	cpi	r24, 0xB8	; 184
     bd8:	09 f4       	brne	.+2      	; 0xbdc <__vector_39+0xea>
     bda:	86 c0       	rjmp	.+268    	; 0xce8 <__vector_39+0x1f6>
     bdc:	a5 c0       	rjmp	.+330    	; 0xd28 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     bde:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <twi_slarw>
     be2:	10 c0       	rjmp	.+32     	; 0xc04 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     be4:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     be8:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <twi_masterBufferLength>
     bec:	98 17       	cp	r25, r24
     bee:	70 f5       	brcc	.+92     	; 0xc4c <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     bf0:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	8e 0f       	add	r24, r30
     bf8:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_masterBufferIndex>
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	e5 53       	subi	r30, 0x35	; 53
     c00:	fa 4f       	sbci	r31, 0xFA	; 250
     c02:	80 81       	ld	r24, Z
     c04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     c08:	85 ec       	ldi	r24, 0xC5	; 197
     c0a:	82 c0       	rjmp	.+260    	; 0xd10 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     c0c:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <twi_error>
     c10:	8a c0       	rjmp	.+276    	; 0xd26 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     c12:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8e 0f       	add	r24, r30
     c1a:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_masterBufferIndex>
     c1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	e5 53       	subi	r30, 0x35	; 53
     c26:	fa 4f       	sbci	r31, 0xFA	; 250
     c28:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     c2a:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     c2e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <twi_masterBufferLength>
     c32:	6a c0       	rjmp	.+212    	; 0xd08 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     c34:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <twi_masterBufferIndex>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8e 0f       	add	r24, r30
     c3c:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_masterBufferIndex>
     c40:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	e5 53       	subi	r30, 0x35	; 53
     c48:	fa 4f       	sbci	r31, 0xFA	; 250
     c4a:	80 83       	st	Z, r24
	if (twi_sendStop)
     c4c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <twi_sendStop>
     c50:	81 11       	cpse	r24, r1
     c52:	69 c0       	rjmp	.+210    	; 0xd26 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     c5a:	84 ea       	ldi	r24, 0xA4	; 164
     c5c:	5d c0       	rjmp	.+186    	; 0xd18 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     c64:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <twi_rxBufferIndex>
     c68:	cf cf       	rjmp	.-98     	; 0xc08 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     c6a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <twi_rxBufferIndex>
     c6e:	80 32       	cpi	r24, 0x20	; 32
     c70:	08 f0       	brcs	.+2      	; 0xc74 <__vector_39+0x182>
     c72:	4d c0       	rjmp	.+154    	; 0xd0e <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     c74:	e0 91 86 05 	lds	r30, 0x0586	; 0x800586 <twi_rxBufferIndex>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	8e 0f       	add	r24, r30
     c7c:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <twi_rxBufferIndex>
     c80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	e9 57       	subi	r30, 0x79	; 121
     c88:	fa 4f       	sbci	r31, 0xFA	; 250
     c8a:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     c8c:	bd cf       	rjmp	.-134    	; 0xc08 <__vector_39+0x116>
     c8e:	2b df       	rcall	.-426    	; 0xae6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     c90:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <twi_rxBufferIndex>
     c94:	80 32       	cpi	r24, 0x20	; 32
     c96:	30 f4       	brcc	.+12     	; 0xca4 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     c98:	e0 91 86 05 	lds	r30, 0x0586	; 0x800586 <twi_rxBufferIndex>
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	e9 57       	subi	r30, 0x79	; 121
     ca0:	fa 4f       	sbci	r31, 0xFA	; 250
     ca2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     ca4:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <twi_rxBufferIndex>
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	e0 91 eb 05 	lds	r30, 0x05EB	; 0x8005eb <twi_onSlaveReceive>
     cae:	f0 91 ec 05 	lds	r31, 0x05EC	; 0x8005ec <twi_onSlaveReceive+0x1>
     cb2:	87 e8       	ldi	r24, 0x87	; 135
     cb4:	95 e0       	ldi	r25, 0x05	; 5
     cb6:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     cb8:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <twi_rxBufferIndex>
      break;
     cbc:	35 c0       	rjmp	.+106    	; 0xd28 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     cbe:	84 e0       	ldi	r24, 0x04	; 4
     cc0:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     cc4:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     cc8:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     ccc:	e0 91 ed 05 	lds	r30, 0x05ED	; 0x8005ed <twi_onSlaveTransmit>
     cd0:	f0 91 ee 05 	lds	r31, 0x05EE	; 0x8005ee <twi_onSlaveTransmit+0x1>
     cd4:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     cd6:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <twi_txBufferLength>
     cda:	81 11       	cpse	r24, r1
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     ce4:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     ce8:	e0 91 a8 05 	lds	r30, 0x05A8	; 0x8005a8 <twi_txBufferIndex>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	8e 0f       	add	r24, r30
     cf0:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <twi_txBufferIndex>
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e7 55       	subi	r30, 0x57	; 87
     cf8:	fa 4f       	sbci	r31, 0xFA	; 250
     cfa:	80 81       	ld	r24, Z
     cfc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     d00:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <twi_txBufferIndex>
     d04:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <twi_txBufferLength>
     d08:	98 17       	cp	r25, r24
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <__vector_39+0x21c>
     d0c:	7d cf       	rjmp	.-262    	; 0xc08 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     d0e:	85 e8       	ldi	r24, 0x85	; 133
     d10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     d16:	85 ec       	ldi	r24, 0xC5	; 197
     d18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     d1c:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <twi_state>
      break;
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     d22:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <twi_error>
      twi_stop();
     d26:	d5 de       	rcall	.-598    	; 0xad2 <twi_stop>
      break;
  }
}
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	08 95       	ret

00000d54 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     d54:	08 95       	ret

00000d56 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     d56:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     d60:	82 1b       	sub	r24, r18
     d62:	91 09       	sbc	r25, r1
     d64:	08 95       	ret

00000d66 <_ZN7TwoWire4readEv>:
     d66:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     d6a:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     d6e:	98 17       	cp	r25, r24
     d70:	50 f4       	brcc	.+20     	; 0xd86 <_ZN7TwoWire4readEv+0x20>
     d72:	e9 2f       	mov	r30, r25
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e7 5d       	subi	r30, 0xD7	; 215
     d78:	f9 4f       	sbci	r31, 0xF9	; 249
     d7a:	20 81       	ld	r18, Z
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	9f 5f       	subi	r25, 0xFF	; 255
     d80:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <_ZN7TwoWire4readEv+0x24>
     d86:	2f ef       	ldi	r18, 0xFF	; 255
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	c9 01       	movw	r24, r18
     d8c:	08 95       	ret

00000d8e <_ZN7TwoWire4peekEv>:
     d8e:	e0 91 28 06 	lds	r30, 0x0628	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     d92:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     d96:	e8 17       	cp	r30, r24
     d98:	30 f4       	brcc	.+12     	; 0xda6 <_ZN7TwoWire4peekEv+0x18>
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	e7 5d       	subi	r30, 0xD7	; 215
     d9e:	f9 4f       	sbci	r31, 0xF9	; 249
     da0:	80 81       	ld	r24, Z
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	9f ef       	ldi	r25, 0xFF	; 255
     daa:	08 95       	ret

00000dac <_ZN7TwoWire5flushEv>:
     dac:	08 95       	ret

00000dae <_ZN7TwoWire16onReceiveServiceEPhi>:
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
     db4:	e0 91 ff 05 	lds	r30, 0x05FF	; 0x8005ff <_ZN7TwoWire14user_onReceiveE>
     db8:	f0 91 00 06 	lds	r31, 0x0600	; 0x800600 <_ZN7TwoWire14user_onReceiveE+0x1>
     dbc:	30 97       	sbiw	r30, 0x00	; 0
     dbe:	f1 f0       	breq	.+60     	; 0xdfc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     dc0:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     dc4:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     dc8:	98 17       	cp	r25, r24
     dca:	c0 f0       	brcs	.+48     	; 0xdfc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	29 2f       	mov	r18, r25
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	26 17       	cp	r18, r22
     dd4:	37 07       	cpc	r19, r23
     dd6:	54 f4       	brge	.+20     	; 0xdec <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
     dd8:	de 01       	movw	r26, r28
     dda:	a2 0f       	add	r26, r18
     ddc:	b3 1f       	adc	r27, r19
     dde:	4c 91       	ld	r20, X
     de0:	d9 01       	movw	r26, r18
     de2:	a7 5d       	subi	r26, 0xD7	; 215
     de4:	b9 4f       	sbci	r27, 0xF9	; 249
     de6:	4c 93       	st	X, r20
     de8:	9f 5f       	subi	r25, 0xFF	; 255
     dea:	f1 cf       	rjmp	.-30     	; 0xdce <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
     dec:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     df0:	60 93 27 06 	sts	0x0627, r22	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     df4:	cb 01       	movw	r24, r22
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	19 94       	eijmp
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <_ZN7TwoWire16onRequestServiceEv>:
     e02:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <_ZN7TwoWire14user_onRequestE>
     e06:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <_ZN7TwoWire14user_onRequestE+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	29 f0       	breq	.+10     	; 0xe18 <_ZN7TwoWire16onRequestServiceEv+0x16>
     e0e:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <_ZN7TwoWire13txBufferIndexE>
     e12:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     e16:	19 94       	eijmp
     e18:	08 95       	ret

00000e1a <_ZN7TwoWire5writeEPKhj>:
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	7c 01       	movw	r14, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8a 01       	movw	r16, r20
     e30:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <_ZN7TwoWire12transmittingE>
     e34:	22 23       	and	r18, r18
     e36:	89 f0       	breq	.+34     	; 0xe5a <_ZN7TwoWire5writeEPKhj+0x40>
     e38:	eb 01       	movw	r28, r22
     e3a:	6b 01       	movw	r12, r22
     e3c:	c4 0e       	add	r12, r20
     e3e:	d5 1e       	adc	r13, r21
     e40:	cc 15       	cp	r28, r12
     e42:	dd 05       	cpc	r29, r13
     e44:	61 f0       	breq	.+24     	; 0xe5e <_ZN7TwoWire5writeEPKhj+0x44>
     e46:	69 91       	ld	r22, Y+
     e48:	d7 01       	movw	r26, r14
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
     e4e:	01 90       	ld	r0, Z+
     e50:	f0 81       	ld	r31, Z
     e52:	e0 2d       	mov	r30, r0
     e54:	c7 01       	movw	r24, r14
     e56:	19 95       	eicall
     e58:	f3 cf       	rjmp	.-26     	; 0xe40 <_ZN7TwoWire5writeEPKhj+0x26>
     e5a:	64 2f       	mov	r22, r20
     e5c:	08 de       	rcall	.-1008   	; 0xa6e <twi_transmit>
     e5e:	c8 01       	movw	r24, r16
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	08 95       	ret

00000e72 <_ZN7TwoWire5writeEh>:
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	1f 92       	push	r1
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	69 83       	std	Y+1, r22	; 0x01
     e7e:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <_ZN7TwoWire12transmittingE>
     e82:	22 23       	and	r18, r18
     e84:	d1 f0       	breq	.+52     	; 0xeba <_ZN7TwoWire5writeEh+0x48>
     e86:	20 91 04 06 	lds	r18, 0x0604	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     e8a:	20 32       	cpi	r18, 0x20	; 32
     e8c:	40 f0       	brcs	.+16     	; 0xe9e <_ZN7TwoWire5writeEh+0x2c>
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	fc 01       	movw	r30, r24
     e94:	33 83       	std	Z+3, r19	; 0x03
     e96:	22 83       	std	Z+2, r18	; 0x02
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <_ZN7TwoWire5writeEh+0x54>
     e9e:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <_ZN7TwoWire13txBufferIndexE>
     ea2:	e8 2f       	mov	r30, r24
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	ea 5f       	subi	r30, 0xFA	; 250
     ea8:	f9 4f       	sbci	r31, 0xF9	; 249
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	90 83       	st	Z, r25
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <_ZN7TwoWire13txBufferIndexE>
     eb4:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <_ZN7TwoWire5writeEh+0x50>
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	d6 dd       	rcall	.-1108   	; 0xa6e <twi_transmit>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <_ZN7TwoWireC1Ev>:
     ece:	fc 01       	movw	r30, r24
     ed0:	13 82       	std	Z+3, r1	; 0x03
     ed2:	12 82       	std	Z+2, r1	; 0x02
     ed4:	88 ee       	ldi	r24, 0xE8	; 232
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	84 83       	std	Z+4, r24	; 0x04
     ede:	95 83       	std	Z+5, r25	; 0x05
     ee0:	a6 83       	std	Z+6, r26	; 0x06
     ee2:	b7 83       	std	Z+7, r27	; 0x07
     ee4:	86 eb       	ldi	r24, 0xB6	; 182
     ee6:	94 e0       	ldi	r25, 0x04	; 4
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
     eec:	08 95       	ret

00000eee <_ZN7TwoWire5beginEv>:
     eee:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     ef2:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     ef6:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <_ZN7TwoWire13txBufferIndexE>
     efa:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     efe:	fb dc       	rcall	.-1546   	; 0x8f6 <twi_init>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	e1 dd       	rcall	.-1086   	; 0xac8 <twi_attachSlaveTxEvent>
     f06:	87 ed       	ldi	r24, 0xD7	; 215
     f08:	96 e0       	ldi	r25, 0x06	; 6
     f0a:	d9 cd       	rjmp	.-1102   	; 0xabe <twi_attachSlaveRxEvent>

00000f0c <_ZN7TwoWire17beginTransmissionEh>:
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <_ZN7TwoWire12transmittingE>
     f12:	60 93 26 06 	sts	0x0626, r22	; 0x800626 <_ZN7TwoWire9txAddressE>
     f16:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <_ZN7TwoWire13txBufferIndexE>
     f1a:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     f1e:	08 95       	ret

00000f20 <_ZN7TwoWire17beginTransmissionEi>:
     f20:	f5 cf       	rjmp	.-22     	; 0xf0c <_ZN7TwoWire17beginTransmissionEh>

00000f22 <_ZN7TwoWire15endTransmissionEh>:
     f22:	0f 93       	push	r16
     f24:	06 2f       	mov	r16, r22
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	40 91 04 06 	lds	r20, 0x0604	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     f2c:	66 e0       	ldi	r22, 0x06	; 6
     f2e:	76 e0       	ldi	r23, 0x06	; 6
     f30:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZN7TwoWire9txAddressE>
     f34:	46 dd       	rcall	.-1396   	; 0x9c2 <twi_writeTo>
     f36:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <_ZN7TwoWire13txBufferIndexE>
     f3a:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <_ZN7TwoWire14txBufferLengthE>
     f3e:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <_ZN7TwoWire12transmittingE>
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <_ZN7TwoWire11requestFromEhhmhh>:
     f46:	4f 92       	push	r4
     f48:	5f 92       	push	r5
     f4a:	6f 92       	push	r6
     f4c:	7f 92       	push	r7
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	5c 01       	movw	r10, r24
     f62:	f6 2e       	mov	r15, r22
     f64:	d4 2f       	mov	r29, r20
     f66:	28 01       	movw	r4, r16
     f68:	39 01       	movw	r6, r18
     f6a:	ee 20       	and	r14, r14
     f6c:	11 f1       	breq	.+68     	; 0xfb2 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
     f6e:	ce df       	rcall	.-100    	; 0xf0c <_ZN7TwoWire17beginTransmissionEh>
     f70:	ce 2d       	mov	r28, r14
     f72:	c4 30       	cpi	r28, 0x04	; 4
     f74:	08 f0       	brcs	.+2      	; 0xf78 <_ZN7TwoWire11requestFromEhhmhh+0x32>
     f76:	c3 e0       	ldi	r28, 0x03	; 3
     f78:	c1 50       	subi	r28, 0x01	; 1
     f7a:	c0 f0       	brcs	.+48     	; 0xfac <_ZN7TwoWire11requestFromEhhmhh+0x66>
     f7c:	28 e0       	ldi	r18, 0x08	; 8
     f7e:	c2 9f       	mul	r28, r18
     f80:	c0 01       	movw	r24, r0
     f82:	11 24       	eor	r1, r1
     f84:	a3 01       	movw	r20, r6
     f86:	92 01       	movw	r18, r4
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
     f8a:	56 95       	lsr	r21
     f8c:	47 95       	ror	r20
     f8e:	37 95       	ror	r19
     f90:	27 95       	ror	r18
     f92:	8a 95       	dec	r24
     f94:	d2 f7       	brpl	.-12     	; 0xf8a <_ZN7TwoWire11requestFromEhhmhh+0x44>
     f96:	ca 01       	movw	r24, r20
     f98:	b9 01       	movw	r22, r18
     f9a:	d5 01       	movw	r26, r10
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	01 90       	ld	r0, Z+
     fa2:	f0 81       	ld	r31, Z
     fa4:	e0 2d       	mov	r30, r0
     fa6:	c5 01       	movw	r24, r10
     fa8:	19 95       	eicall
     faa:	e6 cf       	rjmp	.-52     	; 0xf78 <_ZN7TwoWire11requestFromEhhmhh+0x32>
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	c5 01       	movw	r24, r10
     fb0:	b8 df       	rcall	.-144    	; 0xf22 <_ZN7TwoWire15endTransmissionEh>
     fb2:	4d 2f       	mov	r20, r29
     fb4:	d1 32       	cpi	r29, 0x21	; 33
     fb6:	08 f0       	brcs	.+2      	; 0xfba <_ZN7TwoWire11requestFromEhhmhh+0x74>
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	2c 2d       	mov	r18, r12
     fbc:	69 e2       	ldi	r22, 0x29	; 41
     fbe:	76 e0       	ldi	r23, 0x06	; 6
     fc0:	8f 2d       	mov	r24, r15
     fc2:	b7 dc       	rcall	.-1682   	; 0x932 <twi_readFrom>
     fc4:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <_ZN7TwoWire13rxBufferIndexE>
     fc8:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <_ZN7TwoWire14rxBufferLengthE>
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	7f 90       	pop	r7
     fe0:	6f 90       	pop	r6
     fe2:	5f 90       	pop	r5
     fe4:	4f 90       	pop	r4
     fe6:	08 95       	ret

00000fe8 <_ZN7TwoWire11requestFromEhhh>:
     fe8:	cf 92       	push	r12
     fea:	ef 92       	push	r14
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	c2 2e       	mov	r12, r18
     ff2:	e1 2c       	mov	r14, r1
     ff4:	00 e0       	ldi	r16, 0x00	; 0
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	98 01       	movw	r18, r16
     ffa:	a5 df       	rcall	.-182    	; 0xf46 <_ZN7TwoWire11requestFromEhhmhh>
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ef 90       	pop	r14
    1002:	cf 90       	pop	r12
    1004:	08 95       	ret

00001006 <_ZN7TwoWire11requestFromEhh>:
    1006:	21 e0       	ldi	r18, 0x01	; 1
    1008:	ef cf       	rjmp	.-34     	; 0xfe8 <_ZN7TwoWire11requestFromEhhh>

0000100a <_ZN7TwoWire11requestFromEii>:
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	ed cf       	rjmp	.-38     	; 0xfe8 <_ZN7TwoWire11requestFromEhhh>

0000100e <_ZN7TwoWire15endTransmissionEv>:
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	88 cf       	rjmp	.-240    	; 0xf22 <_ZN7TwoWire15endTransmissionEh>

00001012 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1012:	83 ef       	ldi	r24, 0xF3	; 243
    1014:	95 e0       	ldi	r25, 0x05	; 5
    1016:	5b cf       	rjmp	.-330    	; 0xece <_ZN7TwoWireC1Ev>

00001018 <_GLOBAL__sub_I_bme>:
	Serial.print("Humidity = ");
	Serial.print(bme.readHumidity());
	Serial.println(" %");

	Serial.println();
    1018:	0f 93       	push	r16

#define SEALEVELPRESSURE_HPA (1013.25)

//Adafruit_BME280 bme; // I2C
//Adafruit_BME280 bme(BME_CS); // hardware SPI
Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK); // software SPI
    101a:	04 e3       	ldi	r16, 0x34	; 52
    101c:	22 e3       	ldi	r18, 0x32	; 50
    101e:	43 e3       	ldi	r20, 0x33	; 51
    1020:	60 e3       	ldi	r22, 0x30	; 48
    1022:	89 e4       	ldi	r24, 0x49	; 73
    1024:	96 e0       	ldi	r25, 0x06	; 6
    1026:	76 da       	rcall	.-2836   	; 0x514 <_ZN15Adafruit_BME280C1Eaaaa>
	Serial.print("Humidity = ");
	Serial.print(bme.readHumidity());
	Serial.println(" %");

	Serial.println();
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    102c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    102e:	91 8d       	ldd	r25, Z+25	; 0x19
    1030:	22 8d       	ldd	r18, Z+26	; 0x1a
    1032:	89 2f       	mov	r24, r25
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	80 5c       	subi	r24, 0xC0	; 192
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	82 1b       	sub	r24, r18
    103c:	91 09       	sbc	r25, r1
}
    103e:	8f 73       	andi	r24, 0x3F	; 63
    1040:	99 27       	eor	r25, r25
    1042:	08 95       	ret

00001044 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1044:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1046:	91 8d       	ldd	r25, Z+25	; 0x19
    1048:	82 8d       	ldd	r24, Z+26	; 0x1a
    104a:	98 17       	cp	r25, r24
    104c:	31 f0       	breq	.+12     	; 0x105a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    104e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1050:	e8 0f       	add	r30, r24
    1052:	f1 1d       	adc	r31, r1
    1054:	85 8d       	ldd	r24, Z+29	; 0x1d
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    105e:	08 95       	ret

00001060 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1060:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1062:	91 8d       	ldd	r25, Z+25	; 0x19
    1064:	82 8d       	ldd	r24, Z+26	; 0x1a
    1066:	98 17       	cp	r25, r24
    1068:	61 f0       	breq	.+24     	; 0x1082 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    106a:	82 8d       	ldd	r24, Z+26	; 0x1a
    106c:	df 01       	movw	r26, r30
    106e:	a8 0f       	add	r26, r24
    1070:	b1 1d       	adc	r27, r1
    1072:	5d 96       	adiw	r26, 0x1d	; 29
    1074:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1076:	92 8d       	ldd	r25, Z+26	; 0x1a
    1078:	9f 5f       	subi	r25, 0xFF	; 255
    107a:	9f 73       	andi	r25, 0x3F	; 63
    107c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1086:	08 95       	ret

00001088 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1088:	fc 01       	movw	r30, r24
    108a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    108c:	44 8d       	ldd	r20, Z+28	; 0x1c
    108e:	25 2f       	mov	r18, r21
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	84 2f       	mov	r24, r20
    1094:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1096:	82 1b       	sub	r24, r18
    1098:	93 0b       	sbc	r25, r19
    109a:	54 17       	cp	r21, r20
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    109e:	cf 96       	adiw	r24, 0x3f	; 63
    10a0:	08 95       	ret
  return tail - head - 1;
    10a2:	01 97       	sbiw	r24, 0x01	; 1
}
    10a4:	08 95       	ret

000010a6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    10a6:	82 ee       	ldi	r24, 0xE2	; 226
    10a8:	99 e0       	ldi	r25, 0x09	; 9
    10aa:	89 2b       	or	r24, r25
    10ac:	39 f0       	breq	.+14     	; 0x10bc <_Z14serialEventRunv+0x16>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	89 2b       	or	r24, r25
    10b4:	19 f0       	breq	.+6      	; 0x10bc <_Z14serialEventRunv+0x16>
    10b6:	86 d1       	rcall	.+780    	; 0x13c4 <_Z17Serial0_availablev>
    10b8:	81 11       	cpse	r24, r1
    10ba:	25 c0       	rjmp	.+74     	; 0x1106 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	89 2b       	or	r24, r25
    10c2:	41 f0       	breq	.+16     	; 0x10d4 <_Z14serialEventRunv+0x2e>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	89 2b       	or	r24, r25
    10ca:	21 f0       	breq	.+8      	; 0x10d4 <_Z14serialEventRunv+0x2e>
    10cc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    10d0:	81 11       	cpse	r24, r1
    10d2:	1c c0       	rjmp	.+56     	; 0x110c <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	89 2b       	or	r24, r25
    10da:	41 f0       	breq	.+16     	; 0x10ec <_Z14serialEventRunv+0x46>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	89 2b       	or	r24, r25
    10e2:	21 f0       	breq	.+8      	; 0x10ec <_Z14serialEventRunv+0x46>
    10e4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    10e8:	81 11       	cpse	r24, r1
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	89 2b       	or	r24, r25
    10f2:	a1 f0       	breq	.+40     	; 0x111c <_Z14serialEventRunv+0x76>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	89 2b       	or	r24, r25
    10fa:	81 f0       	breq	.+32     	; 0x111c <_Z14serialEventRunv+0x76>
    10fc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1100:	81 11       	cpse	r24, r1
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <_Z14serialEventRunv+0x72>
    1104:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1106:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    110a:	d8 cf       	rjmp	.-80     	; 0x10bc <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    110c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1110:	e1 cf       	rjmp	.-62     	; 0x10d4 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1112:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1116:	ea cf       	rjmp	.-44     	; 0x10ec <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    111c:	08 95       	ret

0000111e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    111e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1120:	84 8d       	ldd	r24, Z+28	; 0x1c
    1122:	df 01       	movw	r26, r30
    1124:	a8 0f       	add	r26, r24
    1126:	b1 1d       	adc	r27, r1
    1128:	a3 5a       	subi	r26, 0xA3	; 163
    112a:	bf 4f       	sbci	r27, 0xFF	; 255
    112c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    112e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	8f 73       	andi	r24, 0x3F	; 63
    1136:	99 27       	eor	r25, r25
    1138:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    113a:	a6 89       	ldd	r26, Z+22	; 0x16
    113c:	b7 89       	ldd	r27, Z+23	; 0x17
    113e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1140:	a0 89       	ldd	r26, Z+16	; 0x10
    1142:	b1 89       	ldd	r27, Z+17	; 0x11
    1144:	8c 91       	ld	r24, X
    1146:	83 70       	andi	r24, 0x03	; 3
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    114c:	93 8d       	ldd	r25, Z+27	; 0x1b
    114e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1150:	98 13       	cpse	r25, r24
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1154:	02 88       	ldd	r0, Z+18	; 0x12
    1156:	f3 89       	ldd	r31, Z+19	; 0x13
    1158:	e0 2d       	mov	r30, r0
    115a:	80 81       	ld	r24, Z
    115c:	8f 7d       	andi	r24, 0xDF	; 223
    115e:	80 83       	st	Z, r24
    1160:	08 95       	ret

00001162 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
  _written = true;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1174:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1176:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1178:	98 13       	cpse	r25, r24
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <_ZN14HardwareSerial5writeEh+0x24>
    117c:	e8 89       	ldd	r30, Y+16	; 0x10
    117e:	f9 89       	ldd	r31, Y+17	; 0x11
    1180:	80 81       	ld	r24, Z
    1182:	85 fd       	sbrc	r24, 5
    1184:	25 c0       	rjmp	.+74     	; 0x11d0 <_ZN14HardwareSerial5writeEh+0x6e>
    1186:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1188:	0b 8d       	ldd	r16, Y+27	; 0x1b
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	0f 5f       	subi	r16, 0xFF	; 255
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	0f 73       	andi	r16, 0x3F	; 63
    1192:	11 27       	eor	r17, r17
    1194:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1196:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1198:	e8 12       	cpse	r14, r24
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	07 fc       	sbrc	r0, 7
    11a0:	fa cf       	rjmp	.-12     	; 0x1196 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11a2:	e8 89       	ldd	r30, Y+16	; 0x10
    11a4:	f9 89       	ldd	r31, Y+17	; 0x11
    11a6:	80 81       	ld	r24, Z
    11a8:	85 ff       	sbrs	r24, 5
    11aa:	f5 cf       	rjmp	.-22     	; 0x1196 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    11ac:	ce 01       	movw	r24, r28
    11ae:	b7 df       	rcall	.-146    	; 0x111e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11b0:	f2 cf       	rjmp	.-28     	; 0x1196 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b4:	fe 01       	movw	r30, r28
    11b6:	e8 0f       	add	r30, r24
    11b8:	f1 1d       	adc	r31, r1
    11ba:	e3 5a       	subi	r30, 0xA3	; 163
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11c0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11c2:	f8 94       	cli
    _tx_buffer_head = i;
    11c4:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    11c6:	ea 89       	ldd	r30, Y+18	; 0x12
    11c8:	fb 89       	ldd	r31, Y+19	; 0x13
    11ca:	80 81       	ld	r24, Z
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	0a c0       	rjmp	.+20     	; 0x11e4 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11d0:	9f b7       	in	r25, 0x3f	; 63
    11d2:	f8 94       	cli
      *_udr = c;
    11d4:	ee 89       	ldd	r30, Y+22	; 0x16
    11d6:	ff 89       	ldd	r31, Y+23	; 0x17
    11d8:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    11da:	e8 89       	ldd	r30, Y+16	; 0x10
    11dc:	f9 89       	ldd	r31, Y+17	; 0x11
    11de:	80 81       	ld	r24, Z
    11e0:	83 70       	andi	r24, 0x03	; 3
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11e6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1200:	88 8d       	ldd	r24, Y+24	; 0x18
    1202:	88 23       	and	r24, r24
    1204:	c1 f0       	breq	.+48     	; 0x1236 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1206:	ea 89       	ldd	r30, Y+18	; 0x12
    1208:	fb 89       	ldd	r31, Y+19	; 0x13
    120a:	80 81       	ld	r24, Z
    120c:	85 fd       	sbrc	r24, 5
    120e:	05 c0       	rjmp	.+10     	; 0x121a <_ZN14HardwareSerial5flushEv+0x20>
    1210:	a8 89       	ldd	r26, Y+16	; 0x10
    1212:	b9 89       	ldd	r27, Y+17	; 0x11
    1214:	8c 91       	ld	r24, X
    1216:	86 fd       	sbrc	r24, 6
    1218:	0e c0       	rjmp	.+28     	; 0x1236 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	07 fc       	sbrc	r0, 7
    121e:	f5 cf       	rjmp	.-22     	; 0x120a <_ZN14HardwareSerial5flushEv+0x10>
    1220:	80 81       	ld	r24, Z
    1222:	85 ff       	sbrs	r24, 5
    1224:	f2 cf       	rjmp	.-28     	; 0x120a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1226:	a8 89       	ldd	r26, Y+16	; 0x10
    1228:	b9 89       	ldd	r27, Y+17	; 0x11
    122a:	8c 91       	ld	r24, X
    122c:	85 ff       	sbrs	r24, 5
    122e:	ed cf       	rjmp	.-38     	; 0x120a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1230:	ce 01       	movw	r24, r28
    1232:	75 df       	rcall	.-278    	; 0x111e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1234:	e8 cf       	rjmp	.-48     	; 0x1206 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	ec 01       	movw	r28, r24
    124c:	6a 01       	movw	r12, r20
    124e:	7b 01       	movw	r14, r22
    1250:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1252:	e8 89       	ldd	r30, Y+16	; 0x10
    1254:	f9 89       	ldd	r31, Y+17	; 0x11
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    125a:	41 15       	cp	r20, r1
    125c:	51 4e       	sbci	r21, 0xE1	; 225
    125e:	61 05       	cpc	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	b1 f0       	breq	.+44     	; 0x1290 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	79 e0       	ldi	r23, 0x09	; 9
    1268:	8d e3       	ldi	r24, 0x3D	; 61
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a7 01       	movw	r20, r14
    126e:	96 01       	movw	r18, r12
    1270:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodsi4>
    1274:	da 01       	movw	r26, r20
    1276:	c9 01       	movw	r24, r18
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	a1 09       	sbc	r26, r1
    127c:	b1 09       	sbc	r27, r1
    127e:	b6 95       	lsr	r27
    1280:	a7 95       	ror	r26
    1282:	97 95       	ror	r25
    1284:	87 95       	ror	r24
    1286:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1288:	21 15       	cp	r18, r1
    128a:	80 e1       	ldi	r24, 0x10	; 16
    128c:	38 07       	cpc	r19, r24
    128e:	a8 f0       	brcs	.+42     	; 0x12ba <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1290:	e8 89       	ldd	r30, Y+16	; 0x10
    1292:	f9 89       	ldd	r31, Y+17	; 0x11
    1294:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1296:	60 e8       	ldi	r22, 0x80	; 128
    1298:	74 e8       	ldi	r23, 0x84	; 132
    129a:	8e e1       	ldi	r24, 0x1E	; 30
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a7 01       	movw	r20, r14
    12a0:	96 01       	movw	r18, r12
    12a2:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodsi4>
    12a6:	da 01       	movw	r26, r20
    12a8:	c9 01       	movw	r24, r18
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	a1 09       	sbc	r26, r1
    12ae:	b1 09       	sbc	r27, r1
    12b0:	b6 95       	lsr	r27
    12b2:	a7 95       	ror	r26
    12b4:	97 95       	ror	r25
    12b6:	87 95       	ror	r24
    12b8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    12ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    12bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    12be:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    12c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    12c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    12c4:	20 83       	st	Z, r18

  _written = false;
    12c6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    12c8:	ec 89       	ldd	r30, Y+20	; 0x14
    12ca:	fd 89       	ldd	r31, Y+21	; 0x15
    12cc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    12ce:	ea 89       	ldd	r30, Y+18	; 0x12
    12d0:	fb 89       	ldd	r31, Y+19	; 0x13
    12d2:	80 81       	ld	r24, Z
    12d4:	80 61       	ori	r24, 0x10	; 16
    12d6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    12d8:	ea 89       	ldd	r30, Y+18	; 0x12
    12da:	fb 89       	ldd	r31, Y+19	; 0x13
    12dc:	80 81       	ld	r24, Z
    12de:	88 60       	ori	r24, 0x08	; 8
    12e0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    12e2:	ea 89       	ldd	r30, Y+18	; 0x12
    12e4:	fb 89       	ldd	r31, Y+19	; 0x13
    12e6:	80 81       	ld	r24, Z
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    12ec:	ea 89       	ldd	r30, Y+18	; 0x12
    12ee:	fb 89       	ldd	r31, Y+19	; 0x13
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 7d       	andi	r24, 0xDF	; 223
    12f4:	80 83       	st	Z, r24
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	08 95       	ret

00001306 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	0b b6       	in	r0, 0x3b	; 59
    1312:	0f 92       	push	r0
    1314:	2f 93       	push	r18
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    131e:	e0 91 8c 06 	lds	r30, 0x068C	; 0x80068c <Serial+0x10>
    1322:	f0 91 8d 06 	lds	r31, 0x068D	; 0x80068d <Serial+0x11>
    1326:	80 81       	ld	r24, Z
    1328:	e0 91 92 06 	lds	r30, 0x0692	; 0x800692 <Serial+0x16>
    132c:	f0 91 93 06 	lds	r31, 0x0693	; 0x800693 <Serial+0x17>
    1330:	82 fd       	sbrc	r24, 2
    1332:	12 c0       	rjmp	.+36     	; 0x1358 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1334:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1336:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <Serial+0x19>
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    133e:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <Serial+0x1a>
    1342:	82 17       	cp	r24, r18
    1344:	51 f0       	breq	.+20     	; 0x135a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1346:	e0 91 95 06 	lds	r30, 0x0695	; 0x800695 <Serial+0x19>
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	e4 58       	subi	r30, 0x84	; 132
    134e:	f9 4f       	sbci	r31, 0xF9	; 249
    1350:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1352:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <Serial+0x19>
    1356:	01 c0       	rjmp	.+2      	; 0x135a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1358:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0b be       	out	0x3b, r0	; 59
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	0b b6       	in	r0, 0x3b	; 59
    137e:	0f 92       	push	r0
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1398:	8c e7       	ldi	r24, 0x7C	; 124
    139a:	96 e0       	ldi	r25, 0x06	; 6
    139c:	c0 de       	rcall	.-640    	; 0x111e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0b be       	out	0x3b, r0	; 59
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    13c4:	8c e7       	ldi	r24, 0x7C	; 124
    13c6:	96 e0       	ldi	r25, 0x06	; 6
    13c8:	31 de       	rcall	.-926    	; 0x102c <_ZN14HardwareSerial9availableEv>
    13ca:	21 e0       	ldi	r18, 0x01	; 1
    13cc:	89 2b       	or	r24, r25
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <_Z17Serial0_availablev+0xe>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
}
    13d2:	82 2f       	mov	r24, r18
    13d4:	08 95       	ret

000013d6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    13d6:	ec e7       	ldi	r30, 0x7C	; 124
    13d8:	f6 e0       	ldi	r31, 0x06	; 6
    13da:	13 82       	std	Z+3, r1	; 0x03
    13dc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    13de:	88 ee       	ldi	r24, 0xE8	; 232
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    13e2:	a0 e0       	ldi	r26, 0x00	; 0
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	84 83       	std	Z+4, r24	; 0x04
    13e8:	95 83       	std	Z+5, r25	; 0x05
    13ea:	a6 83       	std	Z+6, r26	; 0x06
    13ec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    13ee:	88 ec       	ldi	r24, 0xC8	; 200
    13f0:	94 e0       	ldi	r25, 0x04	; 4
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
    13f6:	85 ec       	ldi	r24, 0xC5	; 197
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	95 87       	std	Z+13, r25	; 0x0d
    13fc:	84 87       	std	Z+12, r24	; 0x0c
    13fe:	84 ec       	ldi	r24, 0xC4	; 196
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	97 87       	std	Z+15, r25	; 0x0f
    1404:	86 87       	std	Z+14, r24	; 0x0e
    1406:	80 ec       	ldi	r24, 0xC0	; 192
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	91 8b       	std	Z+17, r25	; 0x11
    140c:	80 8b       	std	Z+16, r24	; 0x10
    140e:	81 ec       	ldi	r24, 0xC1	; 193
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	93 8b       	std	Z+19, r25	; 0x13
    1414:	82 8b       	std	Z+18, r24	; 0x12
    1416:	82 ec       	ldi	r24, 0xC2	; 194
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	95 8b       	std	Z+21, r25	; 0x15
    141c:	84 8b       	std	Z+20, r24	; 0x14
    141e:	86 ec       	ldi	r24, 0xC6	; 198
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	97 8b       	std	Z+23, r25	; 0x17
    1424:	86 8b       	std	Z+22, r24	; 0x16
    1426:	11 8e       	std	Z+25, r1	; 0x19
    1428:	12 8e       	std	Z+26, r1	; 0x1a
    142a:	13 8e       	std	Z+27, r1	; 0x1b
    142c:	14 8e       	std	Z+28, r1	; 0x1c
    142e:	08 95       	ret

00001430 <initVariant>:
    1430:	08 95       	ret

00001432 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1432:	d0 d2       	rcall	.+1440   	; 0x19d4 <init>

	initVariant();
    1434:	fd df       	rcall	.-6      	; 0x1430 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1436:	4a d8       	rcall	.-3948   	; 0x4cc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1438:	c3 e5       	ldi	r28, 0x53	; 83
    143a:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    143c:	50 d8       	rcall	.-3936   	; 0x4de <loop>
    143e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    1440:	e9 f3       	breq	.-6      	; 0x143c <main+0xa>
    1442:	31 de       	rcall	.-926    	; 0x10a6 <_Z14serialEventRunv>
    1444:	fb cf       	rjmp	.-10     	; 0x143c <main+0xa>

00001446 <_ZN5Print5writeEPKhj>:
    1446:	cf 92       	push	r12
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	6c 01       	movw	r12, r24
    1458:	7a 01       	movw	r14, r20
    145a:	8b 01       	movw	r16, r22
    145c:	c0 e0       	ldi	r28, 0x00	; 0
    145e:	d0 e0       	ldi	r29, 0x00	; 0
    1460:	ce 15       	cp	r28, r14
    1462:	df 05       	cpc	r29, r15
    1464:	81 f0       	breq	.+32     	; 0x1486 <_ZN5Print5writeEPKhj+0x40>
    1466:	d8 01       	movw	r26, r16
    1468:	6d 91       	ld	r22, X+
    146a:	8d 01       	movw	r16, r26
    146c:	d6 01       	movw	r26, r12
    146e:	ed 91       	ld	r30, X+
    1470:	fc 91       	ld	r31, X
    1472:	01 90       	ld	r0, Z+
    1474:	f0 81       	ld	r31, Z
    1476:	e0 2d       	mov	r30, r0
    1478:	c6 01       	movw	r24, r12
    147a:	19 95       	eicall
    147c:	89 2b       	or	r24, r25
    147e:	11 f0       	breq	.+4      	; 0x1484 <_ZN5Print5writeEPKhj+0x3e>
    1480:	21 96       	adiw	r28, 0x01	; 1
    1482:	ee cf       	rjmp	.-36     	; 0x1460 <_ZN5Print5writeEPKhj+0x1a>
    1484:	7e 01       	movw	r14, r28
    1486:	c7 01       	movw	r24, r14
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	08 95       	ret

0000149a <_ZN5Print5writeEPKc>:
    149a:	61 15       	cp	r22, r1
    149c:	71 05       	cpc	r23, r1
    149e:	79 f0       	breq	.+30     	; 0x14be <_ZN5Print5writeEPKc+0x24>
    14a0:	fb 01       	movw	r30, r22
    14a2:	01 90       	ld	r0, Z+
    14a4:	00 20       	and	r0, r0
    14a6:	e9 f7       	brne	.-6      	; 0x14a2 <_ZN5Print5writeEPKc+0x8>
    14a8:	31 97       	sbiw	r30, 0x01	; 1
    14aa:	af 01       	movw	r20, r30
    14ac:	46 1b       	sub	r20, r22
    14ae:	57 0b       	sbc	r21, r23
    14b0:	dc 01       	movw	r26, r24
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	02 80       	ldd	r0, Z+2	; 0x02
    14b8:	f3 81       	ldd	r31, Z+3	; 0x03
    14ba:	e0 2d       	mov	r30, r0
    14bc:	19 94       	eijmp
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <_ZN5Print5printEPKc>:
    14c4:	ea cf       	rjmp	.-44     	; 0x149a <_ZN5Print5writeEPKc>

000014c6 <_ZN5Print5printEc>:
    14c6:	dc 01       	movw	r26, r24
    14c8:	ed 91       	ld	r30, X+
    14ca:	fc 91       	ld	r31, X
    14cc:	01 90       	ld	r0, Z+
    14ce:	f0 81       	ld	r31, Z
    14d0:	e0 2d       	mov	r30, r0
    14d2:	19 94       	eijmp

000014d4 <_ZN5Print7printlnEv>:
    14d4:	66 ed       	ldi	r22, 0xD6	; 214
    14d6:	74 e0       	ldi	r23, 0x04	; 4
    14d8:	e0 cf       	rjmp	.-64     	; 0x149a <_ZN5Print5writeEPKc>

000014da <_ZN5Print7printlnEPKc>:
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ec 01       	movw	r28, r24
    14e4:	da df       	rcall	.-76     	; 0x149a <_ZN5Print5writeEPKc>
    14e6:	8c 01       	movw	r16, r24
    14e8:	ce 01       	movw	r24, r28
    14ea:	f4 df       	rcall	.-24     	; 0x14d4 <_ZN5Print7printlnEv>
    14ec:	80 0f       	add	r24, r16
    14ee:	91 1f       	adc	r25, r17
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <_ZN5Print11printNumberEmh>:
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	a1 97       	sbiw	r28, 0x21	; 33
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	7c 01       	movw	r14, r24
    1520:	fa 01       	movw	r30, r20
    1522:	cb 01       	movw	r24, r22
    1524:	19 a2       	std	Y+33, r1	; 0x21
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	08 f4       	brcc	.+2      	; 0x152c <_ZN5Print11printNumberEmh+0x32>
    152a:	2a e0       	ldi	r18, 0x0A	; 10
    152c:	8e 01       	movw	r16, r28
    152e:	0f 5d       	subi	r16, 0xDF	; 223
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	82 2e       	mov	r8, r18
    1534:	91 2c       	mov	r9, r1
    1536:	a1 2c       	mov	r10, r1
    1538:	b1 2c       	mov	r11, r1
    153a:	bf 01       	movw	r22, r30
    153c:	a5 01       	movw	r20, r10
    153e:	94 01       	movw	r18, r8
    1540:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodsi4>
    1544:	f9 01       	movw	r30, r18
    1546:	ca 01       	movw	r24, r20
    1548:	01 50       	subi	r16, 0x01	; 1
    154a:	11 09       	sbc	r17, r1
    154c:	6a 30       	cpi	r22, 0x0A	; 10
    154e:	10 f4       	brcc	.+4      	; 0x1554 <_ZN5Print11printNumberEmh+0x5a>
    1550:	60 5d       	subi	r22, 0xD0	; 208
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <_ZN5Print11printNumberEmh+0x5c>
    1554:	69 5c       	subi	r22, 0xC9	; 201
    1556:	d8 01       	movw	r26, r16
    1558:	6c 93       	st	X, r22
    155a:	23 2b       	or	r18, r19
    155c:	24 2b       	or	r18, r20
    155e:	25 2b       	or	r18, r21
    1560:	61 f7       	brne	.-40     	; 0x153a <_ZN5Print11printNumberEmh+0x40>
    1562:	b8 01       	movw	r22, r16
    1564:	c7 01       	movw	r24, r14
    1566:	99 df       	rcall	.-206    	; 0x149a <_ZN5Print5writeEPKc>
    1568:	a1 96       	adiw	r28, 0x21	; 33
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	bf 90       	pop	r11
    1582:	af 90       	pop	r10
    1584:	9f 90       	pop	r9
    1586:	8f 90       	pop	r8
    1588:	08 95       	ret

0000158a <_ZN5Print5printEmi>:
    158a:	21 15       	cp	r18, r1
    158c:	31 05       	cpc	r19, r1
    158e:	41 f4       	brne	.+16     	; 0x15a0 <_ZN5Print5printEmi+0x16>
    1590:	dc 01       	movw	r26, r24
    1592:	ed 91       	ld	r30, X+
    1594:	fc 91       	ld	r31, X
    1596:	01 90       	ld	r0, Z+
    1598:	f0 81       	ld	r31, Z
    159a:	e0 2d       	mov	r30, r0
    159c:	64 2f       	mov	r22, r20
    159e:	19 94       	eijmp
    15a0:	ac cf       	rjmp	.-168    	; 0x14fa <_ZN5Print11printNumberEmh>

000015a2 <_ZN5Print5printEhi>:
    15a2:	9a 01       	movw	r18, r20
    15a4:	46 2f       	mov	r20, r22
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	ee cf       	rjmp	.-36     	; 0x158a <_ZN5Print5printEmi>

000015ae <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    15ae:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    15b0:	ab 01       	movw	r20, r22
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	e9 cf       	rjmp	.-46     	; 0x158a <_ZN5Print5printEmi>

000015b8 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    15b8:	08 95       	ret

000015ba <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <intFunc+0x4>
    15e4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <intFunc+0x5>
    15e8:	19 95       	eicall
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0b be       	out	0x3b, r0	; 59
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	0b b6       	in	r0, 0x3b	; 59
    161c:	0f 92       	push	r0
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <intFunc+0x6>
    163a:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <intFunc+0x7>
    163e:	19 95       	eicall
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0b be       	out	0x3b, r0	; 59
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <intFunc+0x8>
    1690:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <intFunc+0x9>
    1694:	19 95       	eicall
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0b be       	out	0x3b, r0	; 59
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    16bc:	1f 92       	push	r1
    16be:	0f 92       	push	r0
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	0f 92       	push	r0
    16c4:	11 24       	eor	r1, r1
    16c6:	0b b6       	in	r0, 0x3b	; 59
    16c8:	0f 92       	push	r0
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    16e2:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <intFunc+0xa>
    16e6:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <intFunc+0xb>
    16ea:	19 95       	eicall
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	0f 90       	pop	r0
    1706:	0b be       	out	0x3b, r0	; 59
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	0b b6       	in	r0, 0x3b	; 59
    171e:	0f 92       	push	r0
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <intFunc>
    173c:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <intFunc+0x1>
    1740:	19 95       	eicall
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0b be       	out	0x3b, r0	; 59
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	0b b6       	in	r0, 0x3b	; 59
    1774:	0f 92       	push	r0
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <intFunc+0x2>
    1792:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <intFunc+0x3>
    1796:	19 95       	eicall
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0b be       	out	0x3b, r0	; 59
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	0f 90       	pop	r0
    17ba:	1f 90       	pop	r1
    17bc:	18 95       	reti

000017be <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	0b b6       	in	r0, 0x3b	; 59
    17ca:	0f 92       	push	r0
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <intFunc+0xc>
    17e8:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <intFunc+0xd>
    17ec:	19 95       	eicall
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0b be       	out	0x3b, r0	; 59
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	0f 90       	pop	r0
    1810:	1f 90       	pop	r1
    1812:	18 95       	reti

00001814 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    1814:	1f 92       	push	r1
    1816:	0f 92       	push	r0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	0f 92       	push	r0
    181c:	11 24       	eor	r1, r1
    181e:	0b b6       	in	r0, 0x3b	; 59
    1820:	0f 92       	push	r0
    1822:	2f 93       	push	r18
    1824:	3f 93       	push	r19
    1826:	4f 93       	push	r20
    1828:	5f 93       	push	r21
    182a:	6f 93       	push	r22
    182c:	7f 93       	push	r23
    182e:	8f 93       	push	r24
    1830:	9f 93       	push	r25
    1832:	af 93       	push	r26
    1834:	bf 93       	push	r27
    1836:	ef 93       	push	r30
    1838:	ff 93       	push	r31
    183a:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <intFunc+0xe>
    183e:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <intFunc+0xf>
    1842:	19 95       	eicall
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	bf 91       	pop	r27
    184a:	af 91       	pop	r26
    184c:	9f 91       	pop	r25
    184e:	8f 91       	pop	r24
    1850:	7f 91       	pop	r23
    1852:	6f 91       	pop	r22
    1854:	5f 91       	pop	r21
    1856:	4f 91       	pop	r20
    1858:	3f 91       	pop	r19
    185a:	2f 91       	pop	r18
    185c:	0f 90       	pop	r0
    185e:	0b be       	out	0x3b, r0	; 59
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	0f 90       	pop	r0
    1866:	1f 90       	pop	r1
    1868:	18 95       	reti

0000186a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	8f 93       	push	r24
    187a:	9f 93       	push	r25
    187c:	af 93       	push	r26
    187e:	bf 93       	push	r27
    1880:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <timer0_millis>
    1884:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <timer0_millis+0x1>
    1888:	a0 91 1c 07 	lds	r26, 0x071C	; 0x80071c <timer0_millis+0x2>
    188c:	b0 91 1d 07 	lds	r27, 0x071D	; 0x80071d <timer0_millis+0x3>
    1890:	30 91 19 07 	lds	r19, 0x0719	; 0x800719 <timer0_fract>
    1894:	23 e0       	ldi	r18, 0x03	; 3
    1896:	23 0f       	add	r18, r19
    1898:	2d 37       	cpi	r18, 0x7D	; 125
    189a:	20 f4       	brcc	.+8      	; 0x18a4 <__vector_23+0x3a>
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	a1 1d       	adc	r26, r1
    18a0:	b1 1d       	adc	r27, r1
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <__vector_23+0x44>
    18a4:	26 e8       	ldi	r18, 0x86	; 134
    18a6:	23 0f       	add	r18, r19
    18a8:	02 96       	adiw	r24, 0x02	; 2
    18aa:	a1 1d       	adc	r26, r1
    18ac:	b1 1d       	adc	r27, r1
    18ae:	20 93 19 07 	sts	0x0719, r18	; 0x800719 <timer0_fract>
    18b2:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <timer0_millis>
    18b6:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <timer0_millis+0x1>
    18ba:	a0 93 1c 07 	sts	0x071C, r26	; 0x80071c <timer0_millis+0x2>
    18be:	b0 93 1d 07 	sts	0x071D, r27	; 0x80071d <timer0_millis+0x3>
    18c2:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <timer0_overflow_count>
    18c6:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <timer0_overflow_count+0x1>
    18ca:	a0 91 20 07 	lds	r26, 0x0720	; 0x800720 <timer0_overflow_count+0x2>
    18ce:	b0 91 21 07 	lds	r27, 0x0721	; 0x800721 <timer0_overflow_count+0x3>
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	a1 1d       	adc	r26, r1
    18d6:	b1 1d       	adc	r27, r1
    18d8:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <timer0_overflow_count>
    18dc:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <timer0_overflow_count+0x1>
    18e0:	a0 93 20 07 	sts	0x0720, r26	; 0x800720 <timer0_overflow_count+0x2>
    18e4:	b0 93 21 07 	sts	0x0721, r27	; 0x800721 <timer0_overflow_count+0x3>
    18e8:	bf 91       	pop	r27
    18ea:	af 91       	pop	r26
    18ec:	9f 91       	pop	r25
    18ee:	8f 91       	pop	r24
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <millis>:
    18fe:	2f b7       	in	r18, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	60 91 1a 07 	lds	r22, 0x071A	; 0x80071a <timer0_millis>
    1906:	70 91 1b 07 	lds	r23, 0x071B	; 0x80071b <timer0_millis+0x1>
    190a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <timer0_millis+0x2>
    190e:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <timer0_millis+0x3>
    1912:	2f bf       	out	0x3f, r18	; 63
    1914:	08 95       	ret

00001916 <micros>:
    1916:	3f b7       	in	r19, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <timer0_overflow_count>
    191e:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <timer0_overflow_count+0x1>
    1922:	a0 91 20 07 	lds	r26, 0x0720	; 0x800720 <timer0_overflow_count+0x2>
    1926:	b0 91 21 07 	lds	r27, 0x0721	; 0x800721 <timer0_overflow_count+0x3>
    192a:	26 b5       	in	r18, 0x26	; 38
    192c:	a8 9b       	sbis	0x15, 0	; 21
    192e:	05 c0       	rjmp	.+10     	; 0x193a <micros+0x24>
    1930:	2f 3f       	cpi	r18, 0xFF	; 255
    1932:	19 f0       	breq	.+6      	; 0x193a <micros+0x24>
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	a1 1d       	adc	r26, r1
    1938:	b1 1d       	adc	r27, r1
    193a:	3f bf       	out	0x3f, r19	; 63
    193c:	ba 2f       	mov	r27, r26
    193e:	a9 2f       	mov	r26, r25
    1940:	98 2f       	mov	r25, r24
    1942:	88 27       	eor	r24, r24
    1944:	82 0f       	add	r24, r18
    1946:	91 1d       	adc	r25, r1
    1948:	a1 1d       	adc	r26, r1
    194a:	b1 1d       	adc	r27, r1
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	42 e0       	ldi	r20, 0x02	; 2
    1952:	66 0f       	add	r22, r22
    1954:	77 1f       	adc	r23, r23
    1956:	88 1f       	adc	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	4a 95       	dec	r20
    195c:	d1 f7       	brne	.-12     	; 0x1952 <micros+0x3c>
    195e:	08 95       	ret

00001960 <delay>:
    1960:	8f 92       	push	r8
    1962:	9f 92       	push	r9
    1964:	af 92       	push	r10
    1966:	bf 92       	push	r11
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	6b 01       	movw	r12, r22
    1972:	7c 01       	movw	r14, r24
    1974:	d0 df       	rcall	.-96     	; 0x1916 <micros>
    1976:	4b 01       	movw	r8, r22
    1978:	5c 01       	movw	r10, r24
    197a:	c1 14       	cp	r12, r1
    197c:	d1 04       	cpc	r13, r1
    197e:	e1 04       	cpc	r14, r1
    1980:	f1 04       	cpc	r15, r1
    1982:	f9 f0       	breq	.+62     	; 0x19c2 <delay+0x62>
    1984:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <yield>
    1988:	c6 df       	rcall	.-116    	; 0x1916 <micros>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	88 19       	sub	r24, r8
    1990:	99 09       	sbc	r25, r9
    1992:	aa 09       	sbc	r26, r10
    1994:	bb 09       	sbc	r27, r11
    1996:	88 3e       	cpi	r24, 0xE8	; 232
    1998:	93 40       	sbci	r25, 0x03	; 3
    199a:	a1 05       	cpc	r26, r1
    199c:	b1 05       	cpc	r27, r1
    199e:	68 f3       	brcs	.-38     	; 0x197a <delay+0x1a>
    19a0:	21 e0       	ldi	r18, 0x01	; 1
    19a2:	c2 1a       	sub	r12, r18
    19a4:	d1 08       	sbc	r13, r1
    19a6:	e1 08       	sbc	r14, r1
    19a8:	f1 08       	sbc	r15, r1
    19aa:	88 ee       	ldi	r24, 0xE8	; 232
    19ac:	88 0e       	add	r8, r24
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	98 1e       	adc	r9, r24
    19b2:	a1 1c       	adc	r10, r1
    19b4:	b1 1c       	adc	r11, r1
    19b6:	c1 14       	cp	r12, r1
    19b8:	d1 04       	cpc	r13, r1
    19ba:	e1 04       	cpc	r14, r1
    19bc:	f1 04       	cpc	r15, r1
    19be:	21 f7       	brne	.-56     	; 0x1988 <delay+0x28>
    19c0:	dc cf       	rjmp	.-72     	; 0x197a <delay+0x1a>
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	af 90       	pop	r10
    19ce:	9f 90       	pop	r9
    19d0:	8f 90       	pop	r8
    19d2:	08 95       	ret

000019d4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    19d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    19d6:	84 b5       	in	r24, 0x24	; 36
    19d8:	82 60       	ori	r24, 0x02	; 2
    19da:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    19dc:	84 b5       	in	r24, 0x24	; 36
    19de:	81 60       	ori	r24, 0x01	; 1
    19e0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    19e2:	85 b5       	in	r24, 0x25	; 37
    19e4:	82 60       	ori	r24, 0x02	; 2
    19e6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    19e8:	85 b5       	in	r24, 0x25	; 37
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    19ee:	ee e6       	ldi	r30, 0x6E	; 110
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	81 60       	ori	r24, 0x01	; 1
    19f6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    19f8:	e1 e8       	ldi	r30, 0x81	; 129
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    19fe:	80 81       	ld	r24, Z
    1a00:	82 60       	ori	r24, 0x02	; 2
    1a02:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a0a:	e0 e8       	ldi	r30, 0x80	; 128
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	81 60       	ori	r24, 0x01	; 1
    1a12:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a14:	e1 eb       	ldi	r30, 0xB1	; 177
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	84 60       	ori	r24, 0x04	; 4
    1a1c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1a1e:	e0 eb       	ldi	r30, 0xB0	; 176
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	81 60       	ori	r24, 0x01	; 1
    1a26:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1a28:	e1 e9       	ldi	r30, 0x91	; 145
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	82 60       	ori	r24, 0x02	; 2
    1a30:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1a32:	80 81       	ld	r24, Z
    1a34:	81 60       	ori	r24, 0x01	; 1
    1a36:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1a38:	e0 e9       	ldi	r30, 0x90	; 144
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1a42:	e1 ea       	ldi	r30, 0xA1	; 161
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	82 60       	ori	r24, 0x02	; 2
    1a4a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1a4c:	80 81       	ld	r24, Z
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1a52:	e0 ea       	ldi	r30, 0xA0	; 160
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	81 60       	ori	r24, 0x01	; 1
    1a5a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1a5c:	e1 e2       	ldi	r30, 0x21	; 33
    1a5e:	f1 e0       	ldi	r31, 0x01	; 1
    1a60:	80 81       	ld	r24, Z
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1a66:	80 81       	ld	r24, Z
    1a68:	81 60       	ori	r24, 0x01	; 1
    1a6a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1a6c:	e0 e2       	ldi	r30, 0x20	; 32
    1a6e:	f1 e0       	ldi	r31, 0x01	; 1
    1a70:	80 81       	ld	r24, Z
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1a76:	ea e7       	ldi	r30, 0x7A	; 122
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	84 60       	ori	r24, 0x04	; 4
    1a7e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1a80:	80 81       	ld	r24, Z
    1a82:	82 60       	ori	r24, 0x02	; 2
    1a84:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1a86:	80 81       	ld	r24, Z
    1a88:	81 60       	ori	r24, 0x01	; 1
    1a8a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 68       	ori	r24, 0x80	; 128
    1a90:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1a96:	08 95       	ret

00001a98 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	31 97       	sbiw	r30, 0x01	; 1
    1a9e:	e2 31       	cpi	r30, 0x12	; 18
    1aa0:	f1 05       	cpc	r31, r1
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <turnOffPWM+0xe>
    1aa4:	4e c0       	rjmp	.+156    	; 0x1b42 <turnOffPWM+0xaa>
    1aa6:	88 27       	eor	r24, r24
    1aa8:	eb 57       	subi	r30, 0x7B	; 123
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__tablejump2__>
    1ab2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1ab6:	8f 77       	andi	r24, 0x7F	; 127
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <turnOffPWM+0x28>
    1aba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1abe:	8f 7d       	andi	r24, 0xDF	; 223
    1ac0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1ac4:	08 95       	ret
    1ac6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1aca:	87 7f       	andi	r24, 0xF7	; 247
    1acc:	f9 cf       	rjmp	.-14     	; 0x1ac0 <turnOffPWM+0x28>
    1ace:	84 b5       	in	r24, 0x24	; 36
    1ad0:	8f 77       	andi	r24, 0x7F	; 127
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <turnOffPWM+0x40>
    1ad4:	84 b5       	in	r24, 0x24	; 36
    1ad6:	8f 7d       	andi	r24, 0xDF	; 223
    1ad8:	84 bd       	out	0x24, r24	; 36
    1ada:	08 95       	ret
    1adc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1ae0:	8f 77       	andi	r24, 0x7F	; 127
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <turnOffPWM+0x52>
    1ae4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1ae8:	8f 7d       	andi	r24, 0xDF	; 223
    1aea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1aee:	08 95       	ret
    1af0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1af4:	8f 77       	andi	r24, 0x7F	; 127
    1af6:	07 c0       	rjmp	.+14     	; 0x1b06 <turnOffPWM+0x6e>
    1af8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1afc:	8f 7d       	andi	r24, 0xDF	; 223
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <turnOffPWM+0x6e>
    1b00:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1b04:	87 7f       	andi	r24, 0xF7	; 247
    1b06:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1b0a:	08 95       	ret
    1b0c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b10:	8f 77       	andi	r24, 0x7F	; 127
    1b12:	07 c0       	rjmp	.+14     	; 0x1b22 <turnOffPWM+0x8a>
    1b14:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b18:	8f 7d       	andi	r24, 0xDF	; 223
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <turnOffPWM+0x8a>
    1b1c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b20:	87 7f       	andi	r24, 0xF7	; 247
    1b22:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b26:	08 95       	ret
    1b28:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1b2c:	8f 77       	andi	r24, 0x7F	; 127
    1b2e:	07 c0       	rjmp	.+14     	; 0x1b3e <turnOffPWM+0xa6>
    1b30:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1b34:	8f 7d       	andi	r24, 0xDF	; 223
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <turnOffPWM+0xa6>
    1b38:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1b3c:	87 7f       	andi	r24, 0xF7	; 247
    1b3e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1b42:	08 95       	ret

00001b44 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	f9 01       	movw	r30, r18
    1b50:	e1 5b       	subi	r30, 0xB1	; 177
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1b56:	f9 01       	movw	r30, r18
    1b58:	eb 56       	subi	r30, 0x6B	; 107
    1b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1b5e:	f9 01       	movw	r30, r18
    1b60:	e5 52       	subi	r30, 0x25	; 37
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b66:	cc 23       	and	r28, r28
    1b68:	b9 f0       	breq	.+46     	; 0x1b98 <digitalWrite+0x54>
    1b6a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	94 df       	rcall	.-216    	; 0x1a98 <turnOffPWM>

	out = portOutputRegister(port);
    1b70:	ec 2f       	mov	r30, r28
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	ef 5d       	subi	r30, 0xDF	; 223
    1b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7c:	a5 91       	lpm	r26, Z+
    1b7e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1b80:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b82:	f8 94       	cli

	if (val == LOW) {
    1b84:	11 11       	cpse	r17, r1
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <digitalWrite+0x4c>
		*out &= ~bit;
    1b88:	8c 91       	ld	r24, X
    1b8a:	d0 95       	com	r29
    1b8c:	d8 23       	and	r29, r24
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1b90:	ec 91       	ld	r30, X
    1b92:	de 2b       	or	r29, r30
    1b94:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1b96:	9f bf       	out	0x3f, r25	; 63
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	08 95       	ret

00001ba0 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <free>

00001baa <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    1bb0:	88 81       	ld	r24, Y
    1bb2:	99 81       	ldd	r25, Y+1	; 0x01
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	11 f0       	breq	.+4      	; 0x1bbc <_ZN6String10invalidateEv+0x12>
    1bb8:	0e 94 70 18 	call	0x30e0	; 0x30e0 <free>
	buffer = NULL;
    1bbc:	19 82       	std	Y+1, r1	; 0x01
    1bbe:	18 82       	st	Y, r1
	capacity = len = 0;
    1bc0:	1d 82       	std	Y+5, r1	; 0x05
    1bc2:	1c 82       	std	Y+4, r1	; 0x04
    1bc4:	1b 82       	std	Y+3, r1	; 0x03
    1bc6:	1a 82       	std	Y+2, r1	; 0x02
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1bda:	6f 5f       	subi	r22, 0xFF	; 255
    1bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bde:	88 81       	ld	r24, Y
    1be0:	99 81       	ldd	r25, Y+1	; 0x01
    1be2:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <realloc>
	if (newbuffer) {
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	31 f0       	breq	.+12     	; 0x1bf6 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    1bea:	99 83       	std	Y+1, r25	; 0x01
    1bec:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1bee:	1b 83       	std	Y+3, r17	; 0x03
    1bf0:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	08 95       	ret

00001c02 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    1c08:	88 81       	ld	r24, Y
    1c0a:	99 81       	ldd	r25, Y+1	; 0x01
    1c0c:	89 2b       	or	r24, r25
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <_ZN6String7reserveEj+0x18>
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	86 17       	cp	r24, r22
    1c16:	97 07       	cpc	r25, r23
    1c18:	58 f4       	brcc	.+22     	; 0x1c30 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	d8 df       	rcall	.-80     	; 0x1bce <_ZN6String12changeBufferEj>
    1c1e:	88 23       	and	r24, r24
    1c20:	41 f0       	breq	.+16     	; 0x1c32 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	9d 81       	ldd	r25, Y+5	; 0x05
    1c26:	89 2b       	or	r24, r25
    1c28:	19 f4       	brne	.+6      	; 0x1c30 <_ZN6String7reserveEj+0x2e>
    1c2a:	e8 81       	ld	r30, Y
    1c2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c2e:	10 82       	st	Z, r1
    1c30:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
    1c46:	7b 01       	movw	r14, r22
    1c48:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    1c4a:	ba 01       	movw	r22, r20
    1c4c:	da df       	rcall	.-76     	; 0x1c02 <_ZN6String7reserveEj>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <_ZN6String4copyEPKcj+0x20>
		invalidate();
    1c52:	ce 01       	movw	r24, r28
    1c54:	aa df       	rcall	.-172    	; 0x1baa <_ZN6String10invalidateEv>
		return *this;
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    1c58:	1d 83       	std	Y+5, r17	; 0x05
    1c5a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1c5c:	b7 01       	movw	r22, r14
    1c5e:	88 81       	ld	r24, Y
    1c60:	99 81       	ldd	r25, Y+1	; 0x01
    1c62:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <strcpy>
	return *this;
}
    1c66:	ce 01       	movw	r24, r28
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	08 95       	ret

00001c76 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1c76:	fc 01       	movw	r30, r24
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	10 82       	st	Z, r1
	capacity = 0;
    1c7c:	13 82       	std	Z+3, r1	; 0x03
    1c7e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1c80:	15 82       	std	Z+5, r1	; 0x05
    1c82:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1c84:	61 15       	cp	r22, r1
    1c86:	71 05       	cpc	r23, r1
    1c88:	49 f0       	breq	.+18     	; 0x1c9c <_ZN6StringC1EPKc+0x26>
    1c8a:	fb 01       	movw	r30, r22
    1c8c:	01 90       	ld	r0, Z+
    1c8e:	00 20       	and	r0, r0
    1c90:	e9 f7       	brne	.-6      	; 0x1c8c <_ZN6StringC1EPKc+0x16>
    1c92:	31 97       	sbiw	r30, 0x01	; 1
    1c94:	af 01       	movw	r20, r30
    1c96:	46 1b       	sub	r20, r22
    1c98:	57 0b       	sbc	r21, r23
    1c9a:	ce cf       	rjmp	.-100    	; 0x1c38 <_ZN6String4copyEPKcj>
    1c9c:	08 95       	ret

00001c9e <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	1f 92       	push	r1
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	69 83       	std	Y+1, r22	; 0x01
    1caa:	dc 01       	movw	r26, r24
    1cac:	ed 91       	ld	r30, X+
    1cae:	fc 91       	ld	r31, X
    1cb0:	02 80       	ldd	r0, Z+2	; 0x02
    1cb2:	f3 81       	ldd	r31, Z+3	; 0x03
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	be 01       	movw	r22, r28
    1cbc:	6f 5f       	subi	r22, 0xFF	; 255
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	19 95       	eicall
    1cc2:	0f 90       	pop	r0
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <_ZN5SDLib4File5writeEPKhj>:
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	ec 01       	movw	r28, r24
    1cd0:	89 8d       	ldd	r24, Y+25	; 0x19
    1cd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	39 f4       	brne	.+14     	; 0x1ce6 <_ZN5SDLib4File5writeEPKhj+0x1c>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9b 83       	std	Y+3, r25	; 0x03
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <_ZN5SDLib4File5writeEPKhj+0x30>
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	13 82       	std	Z+3, r1	; 0x03
    1cea:	12 82       	std	Z+2, r1	; 0x02
    1cec:	c7 d4       	rcall	.+2446   	; 0x267c <_ZN6SdFile5writeEPKvj>
    1cee:	e9 8d       	ldd	r30, Y+25	; 0x19
    1cf0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1cf2:	22 81       	ldd	r18, Z+2	; 0x02
    1cf4:	33 81       	ldd	r19, Z+3	; 0x03
    1cf6:	23 2b       	or	r18, r19
    1cf8:	79 f7       	brne	.-34     	; 0x1cd8 <_ZN5SDLib4File5writeEPKhj+0xe>
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <_ZN5SDLib4File5flushEv>:
    1d00:	fc 01       	movw	r30, r24
    1d02:	81 8d       	ldd	r24, Z+25	; 0x19
    1d04:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <_ZN5SDLib4File5flushEv+0xc>
    1d0a:	73 c4       	rjmp	.+2278   	; 0x25f2 <_ZN6SdFile4syncEv>
    1d0c:	08 95       	ret

00001d0e <_ZN6SdFile4readEv>:
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	1f 92       	push	r1
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	be 01       	movw	r22, r28
    1d1e:	6f 5f       	subi	r22, 0xFF	; 255
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	cf d2       	rcall	.+1438   	; 0x22c2 <_ZN6SdFile4readEPvj>
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	19 f4       	brne	.+6      	; 0x1d2e <_ZN6SdFile4readEv+0x20>
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <_ZN6SdFile4readEv+0x24>
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	0f 90       	pop	r0
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <_ZN5SDLib4File4readEv>:
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	81 8d       	ldd	r24, Z+25	; 0x19
    1d3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <_ZN5SDLib4File4readEv+0xc>
    1d44:	e4 cf       	rjmp	.-56     	; 0x1d0e <_ZN6SdFile4readEv>
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	08 95       	ret

00001d4c <_ZN5SDLib4File4peekEv>:
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	fc 01       	movw	r30, r24
    1d56:	81 8d       	ldd	r24, Z+25	; 0x19
    1d58:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	a9 f0       	breq	.+42     	; 0x1d88 <_ZN5SDLib4File4peekEv+0x3c>
    1d5e:	ef 01       	movw	r28, r30
    1d60:	d6 df       	rcall	.-84     	; 0x1d0e <_ZN6SdFile4readEv>
    1d62:	8c 01       	movw	r16, r24
    1d64:	0f 3f       	cpi	r16, 0xFF	; 255
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	18 07       	cpc	r17, r24
    1d6a:	89 f0       	breq	.+34     	; 0x1d8e <_ZN5SDLib4File4peekEv+0x42>
    1d6c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d70:	fc 01       	movw	r30, r24
    1d72:	42 85       	ldd	r20, Z+10	; 0x0a
    1d74:	53 85       	ldd	r21, Z+11	; 0x0b
    1d76:	64 85       	ldd	r22, Z+12	; 0x0c
    1d78:	75 85       	ldd	r23, Z+13	; 0x0d
    1d7a:	41 50       	subi	r20, 0x01	; 1
    1d7c:	51 09       	sbc	r21, r1
    1d7e:	61 09       	sbc	r22, r1
    1d80:	71 09       	sbc	r23, r1
    1d82:	a1 d3       	rcall	.+1858   	; 0x24c6 <_ZN6SdFile7seekSetEm>
    1d84:	c8 01       	movw	r24, r16
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <_ZN5SDLib4File4peekEv+0x46>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <_ZN5SDLib4File4peekEv+0x46>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <_ZN5SDLib4FileC1Ev>:
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	13 82       	std	Z+3, r1	; 0x03
    1da0:	12 82       	std	Z+2, r1	; 0x02
    1da2:	88 ee       	ldi	r24, 0xE8	; 232
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	a0 e0       	ldi	r26, 0x00	; 0
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	84 83       	std	Z+4, r24	; 0x04
    1dac:	95 83       	std	Z+5, r25	; 0x05
    1dae:	a6 83       	std	Z+6, r26	; 0x06
    1db0:	b7 83       	std	Z+7, r27	; 0x07
    1db2:	89 ee       	ldi	r24, 0xE9	; 233
    1db4:	94 e0       	ldi	r25, 0x04	; 4
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	12 8e       	std	Z+26, r1	; 0x1a
    1dbc:	11 8e       	std	Z+25, r1	; 0x19
    1dbe:	14 86       	std	Z+12, r1	; 0x0c
    1dc0:	08 95       	ret

00001dc2 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	59 96       	adiw	r26, 0x19	; 25
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	5a 97       	sbiw	r26, 0x1a	; 26
    1dcc:	30 97       	sbiw	r30, 0x00	; 0
    1dce:	29 f0       	breq	.+10     	; 0x1dda <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    1dd0:	62 85       	ldd	r22, Z+10	; 0x0a
    1dd2:	73 85       	ldd	r23, Z+11	; 0x0b
    1dd4:	84 85       	ldd	r24, Z+12	; 0x0c
    1dd6:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    1dd8:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1dda:	6f ef       	ldi	r22, 0xFF	; 255
    1ddc:	7f ef       	ldi	r23, 0xFF	; 255
    1dde:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    1de0:	08 95       	ret

00001de2 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    1de2:	dc 01       	movw	r26, r24
    1de4:	59 96       	adiw	r26, 0x19	; 25
    1de6:	ed 91       	ld	r30, X+
    1de8:	fc 91       	ld	r31, X
    1dea:	5a 97       	sbiw	r26, 0x1a	; 26
    1dec:	30 97       	sbiw	r30, 0x00	; 0
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    1df0:	63 89       	ldd	r22, Z+19	; 0x13
    1df2:	74 89       	ldd	r23, Z+20	; 0x14
    1df4:	85 89       	ldd	r24, Z+21	; 0x15
    1df6:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    1df8:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    1e00:	08 95       	ret

00001e02 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
  if (! _file) return 0;
    1e0e:	fc 01       	movw	r30, r24
    1e10:	21 8d       	ldd	r18, Z+25	; 0x19
    1e12:	32 8d       	ldd	r19, Z+26	; 0x1a
    1e14:	23 2b       	or	r18, r19
    1e16:	c9 f0       	breq	.+50     	; 0x1e4a <_ZN5SDLib4File9availableEv+0x48>
    1e18:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    1e1a:	e3 df       	rcall	.-58     	; 0x1de2 <_ZN5SDLib4File4sizeEv>
    1e1c:	6b 01       	movw	r12, r22
    1e1e:	7c 01       	movw	r14, r24
    1e20:	ce 01       	movw	r24, r28
    1e22:	cf df       	rcall	.-98     	; 0x1dc2 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1e24:	a7 01       	movw	r20, r14
    1e26:	96 01       	movw	r18, r12
    1e28:	26 1b       	sub	r18, r22
    1e2a:	37 0b       	sbc	r19, r23
    1e2c:	48 0b       	sbc	r20, r24
    1e2e:	59 0b       	sbc	r21, r25
    1e30:	da 01       	movw	r26, r20
    1e32:	c9 01       	movw	r24, r18
    1e34:	81 15       	cp	r24, r1
    1e36:	30 e8       	ldi	r19, 0x80	; 128
    1e38:	93 07       	cpc	r25, r19
    1e3a:	a1 05       	cpc	r26, r1
    1e3c:	b1 05       	cpc	r27, r1
    1e3e:	38 f0       	brcs	.+14     	; 0x1e4e <_ZN5SDLib4File9availableEv+0x4c>
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	9f e7       	ldi	r25, 0x7F	; 127
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	df 90       	pop	r13
    1e58:	cf 90       	pop	r12
    1e5a:	08 95       	ret

00001e5c <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    1e5c:	e2 e2       	ldi	r30, 0x22	; 34
    1e5e:	f7 e0       	ldi	r31, 0x07	; 7
    1e60:	15 82       	std	Z+5, r1	; 0x05
    1e62:	16 82       	std	Z+6, r1	; 0x06
    1e64:	11 86       	std	Z+9, r1	; 0x09
    1e66:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	84 87       	std	Z+12, r24	; 0x0c
    1e72:	95 87       	std	Z+13, r25	; 0x0d
    1e74:	a6 87       	std	Z+14, r26	; 0x0e
    1e76:	b7 87       	std	Z+15, r27	; 0x0f
    1e78:	13 a2       	std	Z+35, r1	; 0x23
    1e7a:	15 a6       	std	Z+45, r1	; 0x2d
    1e7c:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1e7e:	8b ef       	ldi	r24, 0xFB	; 251
    1e80:	94 e0       	ldi	r25, 0x04	; 4
    1e82:	93 a7       	std	Z+43, r25	; 0x2b
    1e84:	82 a7       	std	Z+42, r24	; 0x2a
    1e86:	17 a6       	std	Z+47, r1	; 0x2f
    1e88:	08 95       	ret

00001e8a <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    1e8a:	9f b7       	in	r25, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	20 91 79 09 	lds	r18, 0x0979	; 0x800979 <_ZN8SPIClass13interruptModeE>
    1e92:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <_ZN8SPIClass13interruptSaveE>
    1e96:	21 30       	cpi	r18, 0x01	; 1
    1e98:	19 f4       	brne	.+6      	; 0x1ea0 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    1e9a:	8d bb       	out	0x1d, r24	; 29
    1e9c:	9f bf       	out	0x3f, r25	; 63
    1e9e:	08 95       	ret
    1ea0:	8f bf       	out	0x3f, r24	; 63
    1ea2:	08 95       	ret

00001ea4 <_ZN8SPIClass8transferEh>:
    1ea4:	8e bd       	out	0x2e, r24	; 46
    1ea6:	00 00       	nop
    1ea8:	0d b4       	in	r0, 0x2d	; 45
    1eaa:	07 fe       	sbrs	r0, 7
    1eac:	fd cf       	rjmp	.-6      	; 0x1ea8 <_ZN8SPIClass8transferEh+0x4>
    1eae:	8e b5       	in	r24, 0x2e	; 46
    1eb0:	08 95       	ret

00001eb2 <_ZL6spiRecv>:
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	f7 cf       	rjmp	.-18     	; 0x1ea4 <_ZN8SPIClass8transferEh>

00001eb6 <_ZN7Sd2Card14chipSelectHighEv>:
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	fc 01       	movw	r30, r24
    1eba:	84 81       	ldd	r24, Z+4	; 0x04
    1ebc:	43 de       	rcall	.-890    	; 0x1b44 <digitalWrite>
    1ebe:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <_ZL20chip_select_asserted>
    1ec2:	88 23       	and	r24, r24
    1ec4:	31 f0       	breq	.+12     	; 0x1ed2 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    1ec6:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <_ZL20chip_select_asserted>
    1eca:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <_ZN8SPIClass13interruptModeE>
    1ece:	81 11       	cpse	r24, r1
    1ed0:	dc cf       	rjmp	.-72     	; 0x1e8a <_ZN8SPIClass14endTransactionEv.part.3>
    1ed2:	08 95       	ret

00001ed4 <_ZN7Sd2Card13chipSelectLowEv>:
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	ec 01       	movw	r28, r24
    1eda:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <_ZL20chip_select_asserted>
    1ede:	81 11       	cpse	r24, r1
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <_ZL20chip_select_asserted>
    1ee8:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <_ZL8settings>
    1eec:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <_ZL8settings+0x1>
    1ef0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	23 ce       	rjmp	.-954    	; 0x1b44 <digitalWrite>

00001efe <_ZN7Sd2Card7readEndEv>:
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	ec 01       	movw	r28, r24
    1f04:	8e 81       	ldd	r24, Y+6	; 0x06
    1f06:	88 23       	and	r24, r24
    1f08:	79 f0       	breq	.+30     	; 0x1f28 <_ZN7Sd2Card7readEndEv+0x2a>
    1f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0c:	98 85       	ldd	r25, Y+8	; 0x08
    1f0e:	9c 01       	movw	r18, r24
    1f10:	2f 5f       	subi	r18, 0xFF	; 255
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	38 87       	std	Y+8, r19	; 0x08
    1f16:	2f 83       	std	Y+7, r18	; 0x07
    1f18:	82 30       	cpi	r24, 0x02	; 2
    1f1a:	92 40       	sbci	r25, 0x02	; 2
    1f1c:	10 f4       	brcc	.+4      	; 0x1f22 <_ZN7Sd2Card7readEndEv+0x24>
    1f1e:	c9 df       	rcall	.-110    	; 0x1eb2 <_ZL6spiRecv>
    1f20:	f4 cf       	rjmp	.-24     	; 0x1f0a <_ZN7Sd2Card7readEndEv+0xc>
    1f22:	ce 01       	movw	r24, r28
    1f24:	c8 df       	rcall	.-112    	; 0x1eb6 <_ZN7Sd2Card14chipSelectHighEv>
    1f26:	1e 82       	std	Y+6, r1	; 0x06
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	08 95       	ret

00001f2e <_ZN7Sd2Card11waitNotBusyEj>:
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	eb 01       	movw	r28, r22
    1f38:	e2 dc       	rcall	.-1596   	; 0x18fe <millis>
    1f3a:	8b 01       	movw	r16, r22
    1f3c:	ba df       	rcall	.-140    	; 0x1eb2 <_ZL6spiRecv>
    1f3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f40:	41 f0       	breq	.+16     	; 0x1f52 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    1f42:	dd dc       	rcall	.-1606   	; 0x18fe <millis>
    1f44:	60 1b       	sub	r22, r16
    1f46:	71 0b       	sbc	r23, r17
    1f48:	6c 17       	cp	r22, r28
    1f4a:	7d 07       	cpc	r23, r29
    1f4c:	b8 f3       	brcs	.-18     	; 0x1f3c <_ZN7Sd2Card11waitNotBusyEj+0xe>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	08 95       	ret

00001f5e <_ZN7Sd2Card11cardCommandEhm>:
    1f5e:	8f 92       	push	r8
    1f60:	9f 92       	push	r9
    1f62:	af 92       	push	r10
    1f64:	bf 92       	push	r11
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
    1f72:	f6 2e       	mov	r15, r22
    1f74:	49 01       	movw	r8, r18
    1f76:	5a 01       	movw	r10, r20
    1f78:	c2 df       	rcall	.-124    	; 0x1efe <_ZN7Sd2Card7readEndEv>
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	ab df       	rcall	.-170    	; 0x1ed4 <_ZN7Sd2Card13chipSelectLowEv>
    1f7e:	6c e2       	ldi	r22, 0x2C	; 44
    1f80:	71 e0       	ldi	r23, 0x01	; 1
    1f82:	ce 01       	movw	r24, r28
    1f84:	d4 df       	rcall	.-88     	; 0x1f2e <_ZN7Sd2Card11waitNotBusyEj>
    1f86:	8f 2d       	mov	r24, r15
    1f88:	80 64       	ori	r24, 0x40	; 64
    1f8a:	8c df       	rcall	.-232    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    1f8c:	08 e1       	ldi	r16, 0x18	; 24
    1f8e:	10 e0       	ldi	r17, 0x00	; 0
    1f90:	d5 01       	movw	r26, r10
    1f92:	c4 01       	movw	r24, r8
    1f94:	00 2e       	mov	r0, r16
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1f98:	b6 95       	lsr	r27
    1f9a:	a7 95       	ror	r26
    1f9c:	97 95       	ror	r25
    1f9e:	87 95       	ror	r24
    1fa0:	0a 94       	dec	r0
    1fa2:	d2 f7       	brpl	.-12     	; 0x1f98 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    1fa4:	7f df       	rcall	.-258    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    1fa6:	08 50       	subi	r16, 0x08	; 8
    1fa8:	11 09       	sbc	r17, r1
    1faa:	08 3f       	cpi	r16, 0xF8	; 248
    1fac:	8f ef       	ldi	r24, 0xFF	; 255
    1fae:	18 07       	cpc	r17, r24
    1fb0:	79 f7       	brne	.-34     	; 0x1f90 <_ZN7Sd2Card11cardCommandEhm+0x32>
    1fb2:	ff 20       	and	r15, r15
    1fb4:	29 f0       	breq	.+10     	; 0x1fc0 <_ZN7Sd2Card11cardCommandEhm+0x62>
    1fb6:	88 e0       	ldi	r24, 0x08	; 8
    1fb8:	f8 12       	cpse	r15, r24
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <_ZN7Sd2Card11cardCommandEhm+0x66>
    1fbc:	87 e8       	ldi	r24, 0x87	; 135
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <_ZN7Sd2Card11cardCommandEhm+0x68>
    1fc0:	85 e9       	ldi	r24, 0x95	; 149
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <_ZN7Sd2Card11cardCommandEhm+0x68>
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	6e df       	rcall	.-292    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    1fc8:	10 e0       	ldi	r17, 0x00	; 0
    1fca:	73 df       	rcall	.-282    	; 0x1eb2 <_ZL6spiRecv>
    1fcc:	8a 87       	std	Y+10, r24	; 0x0a
    1fce:	87 ff       	sbrs	r24, 7
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1fd2:	1f 3f       	cpi	r17, 0xFF	; 255
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1fd6:	1f 5f       	subi	r17, 0xFF	; 255
    1fd8:	f8 cf       	rjmp	.-16     	; 0x1fca <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	ff 90       	pop	r15
    1fe4:	bf 90       	pop	r11
    1fe6:	af 90       	pop	r10
    1fe8:	9f 90       	pop	r9
    1fea:	8f 90       	pop	r8
    1fec:	08 95       	ret

00001fee <_ZN7Sd2Card14waitStartBlockEv>:
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	ec 01       	movw	r28, r24
    1ff8:	82 dc       	rcall	.-1788   	; 0x18fe <millis>
    1ffa:	8b 01       	movw	r16, r22
    1ffc:	5a df       	rcall	.-332    	; 0x1eb2 <_ZL6spiRecv>
    1ffe:	8a 87       	std	Y+10, r24	; 0x0a
    2000:	8f 3f       	cpi	r24, 0xFF	; 255
    2002:	41 f4       	brne	.+16     	; 0x2014 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    2004:	7c dc       	rcall	.-1800   	; 0x18fe <millis>
    2006:	60 1b       	sub	r22, r16
    2008:	71 0b       	sbc	r23, r17
    200a:	6d 32       	cpi	r22, 0x2D	; 45
    200c:	71 40       	sbci	r23, 0x01	; 1
    200e:	b0 f3       	brcs	.-20     	; 0x1ffc <_ZN7Sd2Card14waitStartBlockEv+0xe>
    2010:	8f e0       	ldi	r24, 0x0F	; 15
    2012:	03 c0       	rjmp	.+6      	; 0x201a <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    2014:	8e 3f       	cpi	r24, 0xFE	; 254
    2016:	31 f0       	breq	.+12     	; 0x2024 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    2018:	8d e0       	ldi	r24, 0x0D	; 13
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	ce 01       	movw	r24, r28
    201e:	4b df       	rcall	.-362    	; 0x1eb6 <_ZN7Sd2Card14chipSelectHighEv>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    2030:	cf 92       	push	r12
    2032:	df 92       	push	r13
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
    2042:	69 01       	movw	r12, r18
    2044:	c8 01       	movw	r24, r16
    2046:	82 0f       	add	r24, r18
    2048:	93 1f       	adc	r25, r19
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	92 40       	sbci	r25, 0x02	; 2
    204e:	08 f0       	brcs	.+2      	; 0x2052 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    2050:	57 c0       	rjmp	.+174    	; 0x2100 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	88 23       	and	r24, r24
    2056:	71 f0       	breq	.+28     	; 0x2074 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    2058:	88 81       	ld	r24, Y
    205a:	99 81       	ldd	r25, Y+1	; 0x01
    205c:	aa 81       	ldd	r26, Y+2	; 0x02
    205e:	bb 81       	ldd	r27, Y+3	; 0x03
    2060:	84 17       	cp	r24, r20
    2062:	95 07       	cpc	r25, r21
    2064:	a6 07       	cpc	r26, r22
    2066:	b7 07       	cpc	r27, r23
    2068:	29 f4       	brne	.+10     	; 0x2074 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    206a:	8f 81       	ldd	r24, Y+7	; 0x07
    206c:	98 85       	ldd	r25, Y+8	; 0x08
    206e:	c8 16       	cp	r12, r24
    2070:	d9 06       	cpc	r13, r25
    2072:	00 f5       	brcc	.+64     	; 0x20b4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    2074:	48 83       	st	Y, r20
    2076:	59 83       	std	Y+1, r21	; 0x01
    2078:	6a 83       	std	Y+2, r22	; 0x02
    207a:	7b 83       	std	Y+3, r23	; 0x03
    207c:	8b 85       	ldd	r24, Y+11	; 0x0b
    207e:	83 30       	cpi	r24, 0x03	; 3
    2080:	39 f0       	breq	.+14     	; 0x2090 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    2082:	89 e0       	ldi	r24, 0x09	; 9
    2084:	44 0f       	add	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	66 1f       	adc	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	8a 95       	dec	r24
    208e:	d1 f7       	brne	.-12     	; 0x2084 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    2090:	9a 01       	movw	r18, r20
    2092:	ab 01       	movw	r20, r22
    2094:	61 e1       	ldi	r22, 0x11	; 17
    2096:	ce 01       	movw	r24, r28
    2098:	62 df       	rcall	.-316    	; 0x1f5e <_ZN7Sd2Card11cardCommandEhm>
    209a:	88 23       	and	r24, r24
    209c:	19 f0       	breq	.+6      	; 0x20a4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    209e:	83 e0       	ldi	r24, 0x03	; 3
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	2e c0       	rjmp	.+92     	; 0x2100 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    20a4:	ce 01       	movw	r24, r28
    20a6:	a3 df       	rcall	.-186    	; 0x1fee <_ZN7Sd2Card14waitStartBlockEv>
    20a8:	88 23       	and	r24, r24
    20aa:	51 f1       	breq	.+84     	; 0x2100 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    20ac:	18 86       	std	Y+8, r1	; 0x08
    20ae:	1f 82       	std	Y+7, r1	; 0x07
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	8e 83       	std	Y+6, r24	; 0x06
    20b4:	8f 81       	ldd	r24, Y+7	; 0x07
    20b6:	98 85       	ldd	r25, Y+8	; 0x08
    20b8:	8c 15       	cp	r24, r12
    20ba:	9d 05       	cpc	r25, r13
    20bc:	38 f4       	brcc	.+14     	; 0x20cc <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    20be:	f9 de       	rcall	.-526    	; 0x1eb2 <_ZL6spiRecv>
    20c0:	8f 81       	ldd	r24, Y+7	; 0x07
    20c2:	98 85       	ldd	r25, Y+8	; 0x08
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	98 87       	std	Y+8, r25	; 0x08
    20c8:	8f 83       	std	Y+7, r24	; 0x07
    20ca:	f4 cf       	rjmp	.-24     	; 0x20b4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    20cc:	67 01       	movw	r12, r14
    20ce:	e0 0e       	add	r14, r16
    20d0:	f1 1e       	adc	r15, r17
    20d2:	ce 14       	cp	r12, r14
    20d4:	df 04       	cpc	r13, r15
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    20d8:	ec de       	rcall	.-552    	; 0x1eb2 <_ZL6spiRecv>
    20da:	f6 01       	movw	r30, r12
    20dc:	81 93       	st	Z+, r24
    20de:	6f 01       	movw	r12, r30
    20e0:	f8 cf       	rjmp	.-16     	; 0x20d2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    20e2:	8f 81       	ldd	r24, Y+7	; 0x07
    20e4:	98 85       	ldd	r25, Y+8	; 0x08
    20e6:	08 0f       	add	r16, r24
    20e8:	19 1f       	adc	r17, r25
    20ea:	18 87       	std	Y+8, r17	; 0x08
    20ec:	0f 83       	std	Y+7, r16	; 0x07
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	88 23       	and	r24, r24
    20f2:	19 f0       	breq	.+6      	; 0x20fa <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    20f4:	01 15       	cp	r16, r1
    20f6:	12 40       	sbci	r17, 0x02	; 2
    20f8:	38 f0       	brcs	.+14     	; 0x2108 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    20fa:	ce 01       	movw	r24, r28
    20fc:	00 df       	rcall	.-512    	; 0x1efe <_ZN7Sd2Card7readEndEv>
    20fe:	04 c0       	rjmp	.+8      	; 0x2108 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    2100:	ce 01       	movw	r24, r28
    2102:	d9 de       	rcall	.-590    	; 0x1eb6 <_ZN7Sd2Card14chipSelectHighEv>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	01 c0       	rjmp	.+2      	; 0x210a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	08 95       	ret

0000211c <_ZN7Sd2Card8readDataEmjjPh>:
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	01 15       	cp	r16, r1
    2126:	11 05       	cpc	r17, r1
    2128:	11 f0       	breq	.+4      	; 0x212e <_ZN7Sd2Card8readDataEmjjPh+0x12>
    212a:	82 df       	rcall	.-252    	; 0x2030 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	08 95       	ret

0000213a <_ZN7Sd2Card9readBlockEmPh>:
    213a:	ef 92       	push	r14
    213c:	ff 92       	push	r15
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	79 01       	movw	r14, r18
    2144:	00 e0       	ldi	r16, 0x00	; 0
    2146:	12 e0       	ldi	r17, 0x02	; 2
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	71 df       	rcall	.-286    	; 0x2030 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	08 95       	ret

00002158 <_ZN7Sd2Card9writeDataEhPKh>:
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	8c 01       	movw	r16, r24
    2166:	86 2f       	mov	r24, r22
    2168:	7a 01       	movw	r14, r20
    216a:	9c de       	rcall	.-712    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    216c:	e7 01       	movw	r28, r14
    216e:	8e ef       	ldi	r24, 0xFE	; 254
    2170:	f8 1a       	sub	r15, r24
    2172:	89 91       	ld	r24, Y+
    2174:	97 de       	rcall	.-722    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    2176:	ce 15       	cp	r28, r14
    2178:	df 05       	cpc	r29, r15
    217a:	d9 f7       	brne	.-10     	; 0x2172 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	92 de       	rcall	.-732    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	90 de       	rcall	.-736    	; 0x1ea4 <_ZN8SPIClass8transferEh>
    2184:	96 de       	rcall	.-724    	; 0x1eb2 <_ZL6spiRecv>
    2186:	f8 01       	movw	r30, r16
    2188:	82 87       	std	Z+10, r24	; 0x0a
    218a:	8f 71       	andi	r24, 0x1F	; 31
    218c:	85 30       	cpi	r24, 0x05	; 5
    218e:	31 f0       	breq	.+12     	; 0x219c <_ZN7Sd2Card9writeDataEhPKh+0x44>
    2190:	81 e1       	ldi	r24, 0x11	; 17
    2192:	85 83       	std	Z+5, r24	; 0x05
    2194:	c8 01       	movw	r24, r16
    2196:	8f de       	rcall	.-738    	; 0x1eb6 <_ZN7Sd2Card14chipSelectHighEv>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	01 c0       	rjmp	.+2      	; 0x219e <_ZN7Sd2Card9writeDataEhPKh+0x46>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	08 95       	ret

000021ac <_ZN7Sd2Card10writeBlockEmPKh>:
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	ec 01       	movw	r28, r24
    21b6:	89 01       	movw	r16, r18
    21b8:	41 15       	cp	r20, r1
    21ba:	51 05       	cpc	r21, r1
    21bc:	61 05       	cpc	r22, r1
    21be:	71 05       	cpc	r23, r1
    21c0:	11 f4       	brne	.+4      	; 0x21c6 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    21c2:	82 e1       	ldi	r24, 0x12	; 18
    21c4:	2d c0       	rjmp	.+90     	; 0x2220 <__stack+0x21>
    21c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c8:	83 30       	cpi	r24, 0x03	; 3
    21ca:	39 f0       	breq	.+14     	; 0x21da <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    21cc:	89 e0       	ldi	r24, 0x09	; 9
    21ce:	44 0f       	add	r20, r20
    21d0:	55 1f       	adc	r21, r21
    21d2:	66 1f       	adc	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	8a 95       	dec	r24
    21d8:	d1 f7       	brne	.-12     	; 0x21ce <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    21da:	9a 01       	movw	r18, r20
    21dc:	ab 01       	movw	r20, r22
    21de:	68 e1       	ldi	r22, 0x18	; 24
    21e0:	ce 01       	movw	r24, r28
    21e2:	bd de       	rcall	.-646    	; 0x1f5e <_ZN7Sd2Card11cardCommandEhm>
    21e4:	88 23       	and	r24, r24
    21e6:	11 f0       	breq	.+4      	; 0x21ec <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    21e8:	84 e0       	ldi	r24, 0x04	; 4
    21ea:	1a c0       	rjmp	.+52     	; 0x2220 <__stack+0x21>
    21ec:	a8 01       	movw	r20, r16
    21ee:	6e ef       	ldi	r22, 0xFE	; 254
    21f0:	ce 01       	movw	r24, r28
    21f2:	b2 df       	rcall	.-156    	; 0x2158 <_ZN7Sd2Card9writeDataEhPKh>
    21f4:	88 23       	and	r24, r24
    21f6:	a9 f0       	breq	.+42     	; 0x2222 <__stack+0x23>
    21f8:	68 e5       	ldi	r22, 0x58	; 88
    21fa:	72 e0       	ldi	r23, 0x02	; 2
    21fc:	ce 01       	movw	r24, r28
    21fe:	97 de       	rcall	.-722    	; 0x1f2e <_ZN7Sd2Card11waitNotBusyEj>
    2200:	81 11       	cpse	r24, r1
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <__stack+0x9>
    2204:	85 e1       	ldi	r24, 0x15	; 21
    2206:	0c c0       	rjmp	.+24     	; 0x2220 <__stack+0x21>
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	a9 01       	movw	r20, r18
    220e:	6d e0       	ldi	r22, 0x0D	; 13
    2210:	ce 01       	movw	r24, r28
    2212:	a5 de       	rcall	.-694    	; 0x1f5e <_ZN7Sd2Card11cardCommandEhm>
    2214:	81 11       	cpse	r24, r1
    2216:	03 c0       	rjmp	.+6      	; 0x221e <__stack+0x1f>
    2218:	4c de       	rcall	.-872    	; 0x1eb2 <_ZL6spiRecv>
    221a:	88 23       	and	r24, r24
    221c:	31 f0       	breq	.+12     	; 0x222a <__stack+0x2b>
    221e:	84 e1       	ldi	r24, 0x14	; 20
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	ce 01       	movw	r24, r28
    2224:	48 de       	rcall	.-880    	; 0x1eb6 <_ZN7Sd2Card14chipSelectHighEv>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <__stack+0x31>
    222a:	ce 01       	movw	r24, r28
    222c:	44 de       	rcall	.-888    	; 0x1eb6 <_ZN7Sd2Card14chipSelectHighEv>
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	08 95       	ret

0000223a <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    223a:	ec e6       	ldi	r30, 0x6C	; 108
    223c:	f7 e0       	ldi	r31, 0x07	; 7
    223e:	80 e5       	ldi	r24, 0x50	; 80
    2240:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2242:	11 82       	std	Z+1, r1	; 0x01
    2244:	08 95       	ret

00002246 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	ec 01       	movw	r28, r24
    224c:	9c 01       	movw	r18, r24
    224e:	2a 5f       	subi	r18, 0xFA	; 250
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225e:	4c d5       	rcall	.+2712   	; 0x2cf8 <_ZN8SdVolume15allocContiguousEmPm>
    2260:	88 23       	and	r24, r24
    2262:	a1 f0       	breq	.+40     	; 0x228c <_ZN6SdFile10addClusterEv+0x46>
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	a9 8d       	ldd	r26, Y+25	; 0x19
    226a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    226c:	89 2b       	or	r24, r25
    226e:	8a 2b       	or	r24, r26
    2270:	8b 2b       	or	r24, r27
    2272:	59 f4       	brne	.+22     	; 0x228a <_ZN6SdFile10addClusterEv+0x44>
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	a8 85       	ldd	r26, Y+8	; 0x08
    227a:	b9 85       	ldd	r27, Y+9	; 0x09
    227c:	8f 8b       	std	Y+23, r24	; 0x17
    227e:	98 8f       	std	Y+24, r25	; 0x18
    2280:	a9 8f       	std	Y+25, r26	; 0x19
    2282:	ba 8f       	std	Y+26, r27	; 0x1a
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	80 68       	ori	r24, 0x80	; 128
    2288:	8c 83       	std	Y+4, r24	; 0x04
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <_ZN6SdFile13cacheDirEntryEh>:
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	ec 01       	movw	r28, r24
    2298:	46 2f       	mov	r20, r22
    229a:	6e 85       	ldd	r22, Y+14	; 0x0e
    229c:	7f 85       	ldd	r23, Y+15	; 0x0f
    229e:	88 89       	ldd	r24, Y+16	; 0x10
    22a0:	99 89       	ldd	r25, Y+17	; 0x11
    22a2:	cf d3       	rcall	.+1950   	; 0x2a42 <_ZN8SdVolume13cacheRawBlockEmh>
    22a4:	88 23       	and	r24, r24
    22a6:	41 f0       	breq	.+16     	; 0x22b8 <_ZN6SdFile13cacheDirEntryEh+0x26>
    22a8:	8a 89       	ldd	r24, Y+18	; 0x12
    22aa:	20 e2       	ldi	r18, 0x20	; 32
    22ac:	82 9f       	mul	r24, r18
    22ae:	c0 01       	movw	r24, r0
    22b0:	11 24       	eor	r1, r1
    22b2:	89 58       	subi	r24, 0x89	; 137
    22b4:	98 4f       	sbci	r25, 0xF8	; 248
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <_ZN6SdFile13cacheDirEntryEh+0x2a>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <_ZN6SdFile4readEPvj>:
    22c2:	2f 92       	push	r2
    22c4:	3f 92       	push	r3
    22c6:	4f 92       	push	r4
    22c8:	5f 92       	push	r5
    22ca:	6f 92       	push	r6
    22cc:	7f 92       	push	r7
    22ce:	8f 92       	push	r8
    22d0:	9f 92       	push	r9
    22d2:	af 92       	push	r10
    22d4:	bf 92       	push	r11
    22d6:	cf 92       	push	r12
    22d8:	df 92       	push	r13
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	ec 01       	movw	r28, r24
    22e8:	5b 01       	movw	r10, r22
    22ea:	4a 01       	movw	r8, r20
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	81 11       	cpse	r24, r1
    22f0:	03 c0       	rjmp	.+6      	; 0x22f8 <_ZN6SdFile4readEPvj+0x36>
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	9f ef       	ldi	r25, 0xFF	; 255
    22f6:	d4 c0       	rjmp	.+424    	; 0x24a0 <_ZN6SdFile4readEPvj+0x1de>
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	80 ff       	sbrs	r24, 0
    22fc:	fa cf       	rjmp	.-12     	; 0x22f2 <_ZN6SdFile4readEPvj+0x30>
    22fe:	4b 88       	ldd	r4, Y+19	; 0x13
    2300:	5c 88       	ldd	r5, Y+20	; 0x14
    2302:	6d 88       	ldd	r6, Y+21	; 0x15
    2304:	7e 88       	ldd	r7, Y+22	; 0x16
    2306:	4a 85       	ldd	r20, Y+10	; 0x0a
    2308:	5b 85       	ldd	r21, Y+11	; 0x0b
    230a:	6c 85       	ldd	r22, Y+12	; 0x0c
    230c:	7d 85       	ldd	r23, Y+13	; 0x0d
    230e:	c4 01       	movw	r24, r8
    2310:	a0 e0       	ldi	r26, 0x00	; 0
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	93 01       	movw	r18, r6
    2316:	82 01       	movw	r16, r4
    2318:	04 1b       	sub	r16, r20
    231a:	15 0b       	sbc	r17, r21
    231c:	26 0b       	sbc	r18, r22
    231e:	37 0b       	sbc	r19, r23
    2320:	08 17       	cp	r16, r24
    2322:	19 07       	cpc	r17, r25
    2324:	2a 07       	cpc	r18, r26
    2326:	3b 07       	cpc	r19, r27
    2328:	18 f4       	brcc	.+6      	; 0x2330 <_ZN6SdFile4readEPvj+0x6e>
    232a:	42 01       	movw	r8, r4
    232c:	84 1a       	sub	r8, r20
    232e:	95 0a       	sbc	r9, r21
    2330:	24 01       	movw	r4, r8
    2332:	1e 01       	movw	r2, r28
    2334:	26 e0       	ldi	r18, 0x06	; 6
    2336:	22 0e       	add	r2, r18
    2338:	31 1c       	adc	r3, r1
    233a:	41 14       	cp	r4, r1
    233c:	51 04       	cpc	r5, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <_ZN6SdFile4readEPvj+0x80>
    2340:	7d c0       	rjmp	.+250    	; 0x243c <_ZN6SdFile4readEPvj+0x17a>
    2342:	4a 85       	ldd	r20, Y+10	; 0x0a
    2344:	5b 85       	ldd	r21, Y+11	; 0x0b
    2346:	6c 85       	ldd	r22, Y+12	; 0x0c
    2348:	7d 85       	ldd	r23, Y+13	; 0x0d
    234a:	6a 01       	movw	r12, r20
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	d8 22       	and	r13, r24
    2350:	ed 81       	ldd	r30, Y+5	; 0x05
    2352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2356:	8a 01       	movw	r16, r20
    2358:	9b 01       	movw	r18, r22
    235a:	f9 e0       	ldi	r31, 0x09	; 9
    235c:	36 95       	lsr	r19
    235e:	27 95       	ror	r18
    2360:	17 95       	ror	r17
    2362:	07 95       	ror	r16
    2364:	fa 95       	dec	r31
    2366:	d1 f7       	brne	.-12     	; 0x235c <_ZN6SdFile4readEPvj+0x9a>
    2368:	e2 30       	cpi	r30, 0x02	; 2
    236a:	61 f4       	brne	.+24     	; 0x2384 <_ZN6SdFile4readEPvj+0xc2>
    236c:	fc 01       	movw	r30, r24
    236e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2370:	93 8d       	ldd	r25, Z+27	; 0x1b
    2372:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2374:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	60 0f       	add	r22, r16
    237c:	71 1f       	adc	r23, r17
    237e:	82 1f       	adc	r24, r18
    2380:	93 1f       	adc	r25, r19
    2382:	3e c0       	rjmp	.+124    	; 0x2400 <_ZN6SdFile4readEPvj+0x13e>
    2384:	fc 01       	movw	r30, r24
    2386:	74 80       	ldd	r7, Z+4	; 0x04
    2388:	7a 94       	dec	r7
    238a:	70 22       	and	r7, r16
    238c:	c1 14       	cp	r12, r1
    238e:	d1 04       	cpc	r13, r1
    2390:	c1 f4       	brne	.+48     	; 0x23c2 <_ZN6SdFile4readEPvj+0x100>
    2392:	71 10       	cpse	r7, r1
    2394:	16 c0       	rjmp	.+44     	; 0x23c2 <_ZN6SdFile4readEPvj+0x100>
    2396:	45 2b       	or	r20, r21
    2398:	46 2b       	or	r20, r22
    239a:	47 2b       	or	r20, r23
    239c:	49 f4       	brne	.+18     	; 0x23b0 <_ZN6SdFile4readEPvj+0xee>
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	a9 8d       	ldd	r26, Y+25	; 0x19
    23a4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    23a6:	8e 83       	std	Y+6, r24	; 0x06
    23a8:	9f 83       	std	Y+7, r25	; 0x07
    23aa:	a8 87       	std	Y+8, r26	; 0x08
    23ac:	b9 87       	std	Y+9, r27	; 0x09
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <_ZN6SdFile4readEPvj+0x100>
    23b0:	4e 81       	ldd	r20, Y+6	; 0x06
    23b2:	5f 81       	ldd	r21, Y+7	; 0x07
    23b4:	68 85       	ldd	r22, Y+8	; 0x08
    23b6:	79 85       	ldd	r23, Y+9	; 0x09
    23b8:	91 01       	movw	r18, r2
    23ba:	7c d3       	rcall	.+1784   	; 0x2ab4 <_ZNK8SdVolume6fatGetEmPm>
    23bc:	88 23       	and	r24, r24
    23be:	09 f4       	brne	.+2      	; 0x23c2 <_ZN6SdFile4readEPvj+0x100>
    23c0:	98 cf       	rjmp	.-208    	; 0x22f2 <_ZN6SdFile4readEPvj+0x30>
    23c2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    23c4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ca:	a8 85       	ldd	r26, Y+8	; 0x08
    23cc:	b9 85       	ldd	r27, Y+9	; 0x09
    23ce:	02 97       	sbiw	r24, 0x02	; 2
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	05 84       	ldd	r0, Z+13	; 0x0d
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <_ZN6SdFile4readEPvj+0x11e>
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	aa 1f       	adc	r26, r26
    23de:	bb 1f       	adc	r27, r27
    23e0:	0a 94       	dec	r0
    23e2:	d2 f7       	brpl	.-12     	; 0x23d8 <_ZN6SdFile4readEPvj+0x116>
    23e4:	46 85       	ldd	r20, Z+14	; 0x0e
    23e6:	57 85       	ldd	r21, Z+15	; 0x0f
    23e8:	60 89       	ldd	r22, Z+16	; 0x10
    23ea:	71 89       	ldd	r23, Z+17	; 0x11
    23ec:	84 0f       	add	r24, r20
    23ee:	95 1f       	adc	r25, r21
    23f0:	a6 1f       	adc	r26, r22
    23f2:	b7 1f       	adc	r27, r23
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	67 0d       	add	r22, r7
    23fa:	71 1d       	adc	r23, r1
    23fc:	81 1d       	adc	r24, r1
    23fe:	91 1d       	adc	r25, r1
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	32 e0       	ldi	r19, 0x02	; 2
    2404:	2c 19       	sub	r18, r12
    2406:	3d 09       	sbc	r19, r13
    2408:	32 01       	movw	r6, r4
    240a:	24 15       	cp	r18, r4
    240c:	35 05       	cpc	r19, r5
    240e:	08 f4       	brcc	.+2      	; 0x2412 <_ZN6SdFile4readEPvj+0x150>
    2410:	39 01       	movw	r6, r18
    2412:	2c 81       	ldd	r18, Y+4	; 0x04
    2414:	26 fd       	sbrc	r18, 6
    2416:	04 c0       	rjmp	.+8      	; 0x2420 <_ZN6SdFile4readEPvj+0x15e>
    2418:	61 14       	cp	r6, r1
    241a:	f2 e0       	ldi	r31, 0x02	; 2
    241c:	7f 06       	cpc	r7, r31
    241e:	71 f5       	brne	.+92     	; 0x247c <_ZN6SdFile4readEPvj+0x1ba>
    2420:	00 91 6a 02 	lds	r16, 0x026A	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    2424:	10 91 6b 02 	lds	r17, 0x026B	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2428:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    242c:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2430:	60 17       	cp	r22, r16
    2432:	71 07       	cpc	r23, r17
    2434:	82 07       	cpc	r24, r18
    2436:	93 07       	cpc	r25, r19
    2438:	19 f4       	brne	.+6      	; 0x2440 <_ZN6SdFile4readEPvj+0x17e>
    243a:	20 c0       	rjmp	.+64     	; 0x247c <_ZN6SdFile4readEPvj+0x1ba>
    243c:	c4 01       	movw	r24, r8
    243e:	30 c0       	rjmp	.+96     	; 0x24a0 <_ZN6SdFile4readEPvj+0x1de>
    2440:	75 01       	movw	r14, r10
    2442:	83 01       	movw	r16, r6
    2444:	96 01       	movw	r18, r12
    2446:	ab 01       	movw	r20, r22
    2448:	bc 01       	movw	r22, r24
    244a:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <_ZN8SdVolume7sdCard_E>
    244e:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <_ZN8SdVolume7sdCard_E+0x1>
    2452:	64 de       	rcall	.-824    	; 0x211c <_ZN7Sd2Card8readDataEmjjPh>
    2454:	88 23       	and	r24, r24
    2456:	09 f4       	brne	.+2      	; 0x245a <_ZN6SdFile4readEPvj+0x198>
    2458:	4c cf       	rjmp	.-360    	; 0x22f2 <_ZN6SdFile4readEPvj+0x30>
    245a:	a6 0c       	add	r10, r6
    245c:	b7 1c       	adc	r11, r7
    245e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2460:	9b 85       	ldd	r25, Y+11	; 0x0b
    2462:	ac 85       	ldd	r26, Y+12	; 0x0c
    2464:	bd 85       	ldd	r27, Y+13	; 0x0d
    2466:	86 0d       	add	r24, r6
    2468:	97 1d       	adc	r25, r7
    246a:	a1 1d       	adc	r26, r1
    246c:	b1 1d       	adc	r27, r1
    246e:	8a 87       	std	Y+10, r24	; 0x0a
    2470:	9b 87       	std	Y+11, r25	; 0x0b
    2472:	ac 87       	std	Y+12, r26	; 0x0c
    2474:	bd 87       	std	Y+13, r27	; 0x0d
    2476:	46 18       	sub	r4, r6
    2478:	57 08       	sbc	r5, r7
    247a:	5f cf       	rjmp	.-322    	; 0x233a <_ZN6SdFile4readEPvj+0x78>
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	e1 d2       	rcall	.+1474   	; 0x2a42 <_ZN8SdVolume13cacheRawBlockEmh>
    2480:	88 23       	and	r24, r24
    2482:	09 f4       	brne	.+2      	; 0x2486 <_ZN6SdFile4readEPvj+0x1c4>
    2484:	36 cf       	rjmp	.-404    	; 0x22f2 <_ZN6SdFile4readEPvj+0x30>
    2486:	f6 01       	movw	r30, r12
    2488:	e9 58       	subi	r30, 0x89	; 137
    248a:	f8 4f       	sbci	r31, 0xF8	; 248
    248c:	d5 01       	movw	r26, r10
    248e:	cf 01       	movw	r24, r30
    2490:	86 0d       	add	r24, r6
    2492:	97 1d       	adc	r25, r7
    2494:	8e 17       	cp	r24, r30
    2496:	9f 07       	cpc	r25, r31
    2498:	01 f3       	breq	.-64     	; 0x245a <_ZN6SdFile4readEPvj+0x198>
    249a:	21 91       	ld	r18, Z+
    249c:	2d 93       	st	X+, r18
    249e:	fa cf       	rjmp	.-12     	; 0x2494 <_ZN6SdFile4readEPvj+0x1d2>
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	bf 90       	pop	r11
    24b2:	af 90       	pop	r10
    24b4:	9f 90       	pop	r9
    24b6:	8f 90       	pop	r8
    24b8:	7f 90       	pop	r7
    24ba:	6f 90       	pop	r6
    24bc:	5f 90       	pop	r5
    24be:	4f 90       	pop	r4
    24c0:	3f 90       	pop	r3
    24c2:	2f 90       	pop	r2
    24c4:	08 95       	ret

000024c6 <_ZN6SdFile7seekSetEm>:
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	ec 01       	movw	r28, r24
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	81 11       	cpse	r24, r1
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <_ZN6SdFile7seekSetEm+0x24>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	77 c0       	rjmp	.+238    	; 0x25d8 <_ZN6SdFile7seekSetEm+0x112>
    24ea:	0b 89       	ldd	r16, Y+19	; 0x13
    24ec:	1c 89       	ldd	r17, Y+20	; 0x14
    24ee:	2d 89       	ldd	r18, Y+21	; 0x15
    24f0:	3e 89       	ldd	r19, Y+22	; 0x16
    24f2:	04 17       	cp	r16, r20
    24f4:	15 07       	cpc	r17, r21
    24f6:	26 07       	cpc	r18, r22
    24f8:	37 07       	cpc	r19, r23
    24fa:	a8 f3       	brcs	.-22     	; 0x24e6 <_ZN6SdFile7seekSetEm+0x20>
    24fc:	6a 01       	movw	r12, r20
    24fe:	7b 01       	movw	r14, r22
    2500:	82 30       	cpi	r24, 0x02	; 2
    2502:	29 f4       	brne	.+10     	; 0x250e <_ZN6SdFile7seekSetEm+0x48>
    2504:	ca 86       	std	Y+10, r12	; 0x0a
    2506:	db 86       	std	Y+11, r13	; 0x0b
    2508:	ec 86       	std	Y+12, r14	; 0x0c
    250a:	fd 86       	std	Y+13, r15	; 0x0d
    250c:	0d c0       	rjmp	.+26     	; 0x2528 <_ZN6SdFile7seekSetEm+0x62>
    250e:	c1 14       	cp	r12, r1
    2510:	d1 04       	cpc	r13, r1
    2512:	e1 04       	cpc	r14, r1
    2514:	f1 04       	cpc	r15, r1
    2516:	51 f4       	brne	.+20     	; 0x252c <_ZN6SdFile7seekSetEm+0x66>
    2518:	1e 82       	std	Y+6, r1	; 0x06
    251a:	1f 82       	std	Y+7, r1	; 0x07
    251c:	18 86       	std	Y+8, r1	; 0x08
    251e:	19 86       	std	Y+9, r1	; 0x09
    2520:	1a 86       	std	Y+10, r1	; 0x0a
    2522:	1b 86       	std	Y+11, r1	; 0x0b
    2524:	1c 86       	std	Y+12, r1	; 0x0c
    2526:	1d 86       	std	Y+13, r1	; 0x0d
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	56 c0       	rjmp	.+172    	; 0x25d8 <_ZN6SdFile7seekSetEm+0x112>
    252c:	8a 84       	ldd	r8, Y+10	; 0x0a
    252e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2530:	ac 84       	ldd	r10, Y+12	; 0x0c
    2532:	bd 84       	ldd	r11, Y+13	; 0x0d
    2534:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2536:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2538:	25 85       	ldd	r18, Z+13	; 0x0d
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	27 5f       	subi	r18, 0xF7	; 247
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	b5 01       	movw	r22, r10
    2542:	a4 01       	movw	r20, r8
    2544:	41 50       	subi	r20, 0x01	; 1
    2546:	51 09       	sbc	r21, r1
    2548:	61 09       	sbc	r22, r1
    254a:	71 09       	sbc	r23, r1
    254c:	02 2e       	mov	r0, r18
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <_ZN6SdFile7seekSetEm+0x92>
    2550:	76 95       	lsr	r23
    2552:	67 95       	ror	r22
    2554:	57 95       	ror	r21
    2556:	47 95       	ror	r20
    2558:	0a 94       	dec	r0
    255a:	d2 f7       	brpl	.-12     	; 0x2550 <_ZN6SdFile7seekSetEm+0x8a>
    255c:	d7 01       	movw	r26, r14
    255e:	c6 01       	movw	r24, r12
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	a1 09       	sbc	r26, r1
    2564:	b1 09       	sbc	r27, r1
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <_ZN6SdFile7seekSetEm+0xaa>
    2568:	b6 95       	lsr	r27
    256a:	a7 95       	ror	r26
    256c:	97 95       	ror	r25
    256e:	87 95       	ror	r24
    2570:	2a 95       	dec	r18
    2572:	d2 f7       	brpl	.-12     	; 0x2568 <_ZN6SdFile7seekSetEm+0xa2>
    2574:	84 17       	cp	r24, r20
    2576:	95 07       	cpc	r25, r21
    2578:	a6 07       	cpc	r26, r22
    257a:	b7 07       	cpc	r27, r23
    257c:	20 f0       	brcs	.+8      	; 0x2586 <_ZN6SdFile7seekSetEm+0xc0>
    257e:	89 28       	or	r8, r9
    2580:	8a 28       	or	r8, r10
    2582:	8b 28       	or	r8, r11
    2584:	71 f4       	brne	.+28     	; 0x25a2 <_ZN6SdFile7seekSetEm+0xdc>
    2586:	4f 89       	ldd	r20, Y+23	; 0x17
    2588:	58 8d       	ldd	r21, Y+24	; 0x18
    258a:	69 8d       	ldd	r22, Y+25	; 0x19
    258c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258e:	4e 83       	std	Y+6, r20	; 0x06
    2590:	5f 83       	std	Y+7, r21	; 0x07
    2592:	68 87       	std	Y+8, r22	; 0x08
    2594:	79 87       	std	Y+9, r23	; 0x09
    2596:	4c 01       	movw	r8, r24
    2598:	5d 01       	movw	r10, r26
    259a:	8e 01       	movw	r16, r28
    259c:	0a 5f       	subi	r16, 0xFA	; 250
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	15 c0       	rjmp	.+42     	; 0x25cc <_ZN6SdFile7seekSetEm+0x106>
    25a2:	84 1b       	sub	r24, r20
    25a4:	95 0b       	sbc	r25, r21
    25a6:	a6 0b       	sbc	r26, r22
    25a8:	b7 0b       	sbc	r27, r23
    25aa:	f5 cf       	rjmp	.-22     	; 0x2596 <_ZN6SdFile7seekSetEm+0xd0>
    25ac:	4e 81       	ldd	r20, Y+6	; 0x06
    25ae:	5f 81       	ldd	r21, Y+7	; 0x07
    25b0:	68 85       	ldd	r22, Y+8	; 0x08
    25b2:	79 85       	ldd	r23, Y+9	; 0x09
    25b4:	98 01       	movw	r18, r16
    25b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ba:	7c d2       	rcall	.+1272   	; 0x2ab4 <_ZNK8SdVolume6fatGetEmPm>
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	89 1a       	sub	r8, r25
    25c0:	91 08       	sbc	r9, r1
    25c2:	a1 08       	sbc	r10, r1
    25c4:	b1 08       	sbc	r11, r1
    25c6:	88 23       	and	r24, r24
    25c8:	09 f4       	brne	.+2      	; 0x25cc <_ZN6SdFile7seekSetEm+0x106>
    25ca:	8d cf       	rjmp	.-230    	; 0x24e6 <_ZN6SdFile7seekSetEm+0x20>
    25cc:	81 14       	cp	r8, r1
    25ce:	91 04       	cpc	r9, r1
    25d0:	a1 04       	cpc	r10, r1
    25d2:	b1 04       	cpc	r11, r1
    25d4:	59 f7       	brne	.-42     	; 0x25ac <_ZN6SdFile7seekSetEm+0xe6>
    25d6:	96 cf       	rjmp	.-212    	; 0x2504 <_ZN6SdFile7seekSetEm+0x3e>
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ff 90       	pop	r15
    25e2:	ef 90       	pop	r14
    25e4:	df 90       	pop	r13
    25e6:	cf 90       	pop	r12
    25e8:	bf 90       	pop	r11
    25ea:	af 90       	pop	r10
    25ec:	9f 90       	pop	r9
    25ee:	8f 90       	pop	r8
    25f0:	08 95       	ret

000025f2 <_ZN6SdFile4syncEv>:
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	ec 01       	movw	r28, r24
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	88 23       	and	r24, r24
    2600:	b9 f1       	breq	.+110    	; 0x2670 <_ZN6SdFile4syncEv+0x7e>
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	87 ff       	sbrs	r24, 7
    2606:	2f c0       	rjmp	.+94     	; 0x2666 <_ZN6SdFile4syncEv+0x74>
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	ce 01       	movw	r24, r28
    260c:	42 de       	rcall	.-892    	; 0x2292 <_ZN6SdFile13cacheDirEntryEh>
    260e:	8c 01       	movw	r16, r24
    2610:	89 2b       	or	r24, r25
    2612:	71 f1       	breq	.+92     	; 0x2670 <_ZN6SdFile4syncEv+0x7e>
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	48 f4       	brcc	.+18     	; 0x262c <_ZN6SdFile4syncEv+0x3a>
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	ad 89       	ldd	r26, Y+21	; 0x15
    2620:	be 89       	ldd	r27, Y+22	; 0x16
    2622:	f8 01       	movw	r30, r16
    2624:	84 8f       	std	Z+28, r24	; 0x1c
    2626:	95 8f       	std	Z+29, r25	; 0x1d
    2628:	a6 8f       	std	Z+30, r26	; 0x1e
    262a:	b7 8f       	std	Z+31, r27	; 0x1f
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	a9 8d       	ldd	r26, Y+25	; 0x19
    2632:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2634:	f8 01       	movw	r30, r16
    2636:	93 8f       	std	Z+27, r25	; 0x1b
    2638:	82 8f       	std	Z+26, r24	; 0x1a
    263a:	b5 8b       	std	Z+21, r27	; 0x15
    263c:	a4 8b       	std	Z+20, r26	; 0x14
    263e:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <_ZN6SdFile9dateTime_E>
    2642:	f0 91 6f 07 	lds	r31, 0x076F	; 0x80076f <_ZN6SdFile9dateTime_E+0x1>
    2646:	30 97       	sbiw	r30, 0x00	; 0
    2648:	59 f0       	breq	.+22     	; 0x2660 <_ZN6SdFile4syncEv+0x6e>
    264a:	b8 01       	movw	r22, r16
    264c:	6a 5e       	subi	r22, 0xEA	; 234
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	c8 01       	movw	r24, r16
    2652:	48 96       	adiw	r24, 0x18	; 24
    2654:	19 95       	eicall
    2656:	f8 01       	movw	r30, r16
    2658:	80 8d       	ldd	r24, Z+24	; 0x18
    265a:	91 8d       	ldd	r25, Z+25	; 0x19
    265c:	93 8b       	std	Z+19, r25	; 0x13
    265e:	82 8b       	std	Z+18, r24	; 0x12
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	8f 77       	andi	r24, 0x7F	; 127
    2664:	8c 83       	std	Y+4, r24	; 0x04
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	b0 c1       	rjmp	.+864    	; 0x29d0 <_ZN8SdVolume10cacheFlushEv>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    267c:	2f 92       	push	r2
    267e:	3f 92       	push	r3
    2680:	4f 92       	push	r4
    2682:	5f 92       	push	r5
    2684:	6f 92       	push	r6
    2686:	7f 92       	push	r7
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <_ZN6SdFile5writeEPKvj+0x26>
    26a2:	1f 92       	push	r1
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	8c 01       	movw	r16, r24
    26aa:	6b 01       	movw	r12, r22
    26ac:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    26ae:	dc 01       	movw	r26, r24
    26b0:	15 96       	adiw	r26, 0x05	; 5
    26b2:	8c 91       	ld	r24, X
    26b4:	15 97       	sbiw	r26, 0x05	; 5
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	c1 f4       	brne	.+48     	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>
    26ba:	14 96       	adiw	r26, 0x04	; 4
    26bc:	8c 91       	ld	r24, X
    26be:	81 ff       	sbrs	r24, 1
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    26c2:	82 ff       	sbrs	r24, 2
    26c4:	1c c0       	rjmp	.+56     	; 0x26fe <_ZN6SdFile5writeEPKvj+0x82>
    26c6:	f8 01       	movw	r30, r16
    26c8:	43 89       	ldd	r20, Z+19	; 0x13
    26ca:	54 89       	ldd	r21, Z+20	; 0x14
    26cc:	65 89       	ldd	r22, Z+21	; 0x15
    26ce:	76 89       	ldd	r23, Z+22	; 0x16
    26d0:	82 85       	ldd	r24, Z+10	; 0x0a
    26d2:	93 85       	ldd	r25, Z+11	; 0x0b
    26d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    26d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    26d8:	84 17       	cp	r24, r20
    26da:	95 07       	cpc	r25, r21
    26dc:	a6 07       	cpc	r26, r22
    26de:	b7 07       	cpc	r27, r23
    26e0:	71 f0       	breq	.+28     	; 0x26fe <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    26e2:	c8 01       	movw	r24, r16
    26e4:	f0 de       	rcall	.-544    	; 0x24c6 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    26e6:	81 11       	cpse	r24, r1
    26e8:	0a c0       	rjmp	.+20     	; 0x26fe <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	d8 01       	movw	r26, r16
    26f0:	13 96       	adiw	r26, 0x03	; 3
    26f2:	9c 93       	st	X, r25
    26f4:	8e 93       	st	-X, r24
    26f6:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	42 c1       	rjmp	.+644    	; 0x2982 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    26fe:	41 01       	movw	r8, r2
    2700:	82 c0       	rjmp	.+260    	; 0x2806 <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2702:	5b 96       	adiw	r26, 0x1b	; 27
    2704:	8d 91       	ld	r24, X+
    2706:	9c 91       	ld	r25, X
    2708:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    270a:	fc 01       	movw	r30, r24
    270c:	74 80       	ldd	r7, Z+4	; 0x04
    270e:	2f ef       	ldi	r18, 0xFF	; 255
    2710:	27 0d       	add	r18, r7
    2712:	2a 01       	movw	r4, r20
    2714:	3b 01       	movw	r6, r22
    2716:	39 e0       	ldi	r19, 0x09	; 9
    2718:	76 94       	lsr	r7
    271a:	67 94       	ror	r6
    271c:	57 94       	ror	r5
    271e:	47 94       	ror	r4
    2720:	3a 95       	dec	r19
    2722:	d1 f7       	brne	.-12     	; 0x2718 <_ZN6SdFile5writeEPKvj+0x9c>
    2724:	72 2e       	mov	r7, r18
    2726:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2728:	7a 01       	movw	r14, r20
    272a:	f1 e0       	ldi	r31, 0x01	; 1
    272c:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    272e:	77 20       	and	r7, r7
    2730:	09 f4       	brne	.+2      	; 0x2734 <_ZN6SdFile5writeEPKvj+0xb8>
    2732:	75 c0       	rjmp	.+234    	; 0x281e <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	92 e0       	ldi	r25, 0x02	; 2
    2738:	8e 19       	sub	r24, r14
    273a:	9f 09       	sbc	r25, r15
    273c:	54 01       	movw	r10, r8
    273e:	88 15       	cp	r24, r8
    2740:	99 05       	cpc	r25, r9
    2742:	08 f4       	brcc	.+2      	; 0x2746 <_ZN6SdFile5writeEPKvj+0xca>
    2744:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2746:	d8 01       	movw	r26, r16
    2748:	5b 96       	adiw	r26, 0x1b	; 27
    274a:	2d 91       	ld	r18, X+
    274c:	3c 91       	ld	r19, X
    274e:	5c 97       	sbiw	r26, 0x1c	; 28
    2750:	16 96       	adiw	r26, 0x06	; 6
    2752:	8d 91       	ld	r24, X+
    2754:	9d 91       	ld	r25, X+
    2756:	0d 90       	ld	r0, X+
    2758:	bc 91       	ld	r27, X
    275a:	a0 2d       	mov	r26, r0
    275c:	02 97       	sbiw	r24, 0x02	; 2
    275e:	a1 09       	sbc	r26, r1
    2760:	b1 09       	sbc	r27, r1
    2762:	f9 01       	movw	r30, r18
    2764:	05 84       	ldd	r0, Z+13	; 0x0d
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <_ZN6SdFile5writeEPKvj+0xf4>
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	aa 1f       	adc	r26, r26
    276e:	bb 1f       	adc	r27, r27
    2770:	0a 94       	dec	r0
    2772:	d2 f7       	brpl	.-12     	; 0x2768 <_ZN6SdFile5writeEPKvj+0xec>
    2774:	46 85       	ldd	r20, Z+14	; 0x0e
    2776:	57 85       	ldd	r21, Z+15	; 0x0f
    2778:	60 89       	ldd	r22, Z+16	; 0x10
    277a:	71 89       	ldd	r23, Z+17	; 0x11
    277c:	84 0f       	add	r24, r20
    277e:	95 1f       	adc	r25, r21
    2780:	a6 1f       	adc	r26, r22
    2782:	b7 1f       	adc	r27, r23
    2784:	9c 01       	movw	r18, r24
    2786:	ad 01       	movw	r20, r26
    2788:	27 0d       	add	r18, r7
    278a:	31 1d       	adc	r19, r1
    278c:	41 1d       	adc	r20, r1
    278e:	51 1d       	adc	r21, r1
    2790:	29 01       	movw	r4, r18
    2792:	3a 01       	movw	r6, r20
    if (n == 512) {
    2794:	a1 14       	cp	r10, r1
    2796:	32 e0       	ldi	r19, 0x02	; 2
    2798:	b3 06       	cpc	r11, r19
    279a:	09 f0       	breq	.+2      	; 0x279e <_ZN6SdFile5writeEPKvj+0x122>
    279c:	85 c0       	rjmp	.+266    	; 0x28a8 <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    279e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    27a2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    27a6:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    27aa:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    27ae:	48 16       	cp	r4, r24
    27b0:	59 06       	cpc	r5, r25
    27b2:	6a 06       	cpc	r6, r26
    27b4:	7b 06       	cpc	r7, r27
    27b6:	59 f4       	brne	.+22     	; 0x27ce <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	9f ef       	ldi	r25, 0xFF	; 255
    27bc:	dc 01       	movw	r26, r24
    27be:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    27c2:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    27c6:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    27ca:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    27ce:	96 01       	movw	r18, r12
    27d0:	b3 01       	movw	r22, r6
    27d2:	a2 01       	movw	r20, r4
    27d4:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <_ZN8SdVolume7sdCard_E>
    27d8:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <_ZN8SdVolume7sdCard_E+0x1>
    27dc:	e7 dc       	rcall	.-1586   	; 0x21ac <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    27de:	88 23       	and	r24, r24
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <_ZN6SdFile5writeEPKvj+0x168>
    27e2:	83 cf       	rjmp	.-250    	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    27e4:	9e ef       	ldi	r25, 0xFE	; 254
    27e6:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    27e8:	8a 18       	sub	r8, r10
    27ea:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    27ec:	f8 01       	movw	r30, r16
    27ee:	82 85       	ldd	r24, Z+10	; 0x0a
    27f0:	93 85       	ldd	r25, Z+11	; 0x0b
    27f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    27f4:	b5 85       	ldd	r27, Z+13	; 0x0d
    27f6:	8a 0d       	add	r24, r10
    27f8:	9b 1d       	adc	r25, r11
    27fa:	a1 1d       	adc	r26, r1
    27fc:	b1 1d       	adc	r27, r1
    27fe:	82 87       	std	Z+10, r24	; 0x0a
    2800:	93 87       	std	Z+11, r25	; 0x0b
    2802:	a4 87       	std	Z+12, r26	; 0x0c
    2804:	b5 87       	std	Z+13, r27	; 0x0d
    2806:	d8 01       	movw	r26, r16
    2808:	1a 96       	adiw	r26, 0x0a	; 10
    280a:	4d 91       	ld	r20, X+
    280c:	5d 91       	ld	r21, X+
    280e:	6d 91       	ld	r22, X+
    2810:	7c 91       	ld	r23, X
    2812:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2814:	81 14       	cp	r8, r1
    2816:	91 04       	cpc	r9, r1
    2818:	09 f0       	breq	.+2      	; 0x281c <_ZN6SdFile5writeEPKvj+0x1a0>
    281a:	73 cf       	rjmp	.-282    	; 0x2702 <_ZN6SdFile5writeEPKvj+0x86>
    281c:	83 c0       	rjmp	.+262    	; 0x2924 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    281e:	e1 14       	cp	r14, r1
    2820:	f1 04       	cpc	r15, r1
    2822:	09 f0       	breq	.+2      	; 0x2826 <_ZN6SdFile5writeEPKvj+0x1aa>
    2824:	87 cf       	rjmp	.-242    	; 0x2734 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    2826:	16 96       	adiw	r26, 0x06	; 6
    2828:	4d 91       	ld	r20, X+
    282a:	5d 91       	ld	r21, X+
    282c:	6d 91       	ld	r22, X+
    282e:	7c 91       	ld	r23, X
    2830:	19 97       	sbiw	r26, 0x09	; 9
    2832:	41 15       	cp	r20, r1
    2834:	51 05       	cpc	r21, r1
    2836:	61 05       	cpc	r22, r1
    2838:	71 05       	cpc	r23, r1
    283a:	59 f4       	brne	.+22     	; 0x2852 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    283c:	57 96       	adiw	r26, 0x17	; 23
    283e:	8d 91       	ld	r24, X+
    2840:	9d 91       	ld	r25, X+
    2842:	0d 90       	ld	r0, X+
    2844:	bc 91       	ld	r27, X
    2846:	a0 2d       	mov	r26, r0
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	a1 05       	cpc	r26, r1
    284c:	b1 05       	cpc	r27, r1
    284e:	31 f5       	brne	.+76     	; 0x289c <_ZN6SdFile5writeEPKvj+0x220>
    2850:	20 c0       	rjmp	.+64     	; 0x2892 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2852:	9e 01       	movw	r18, r28
    2854:	2f 5f       	subi	r18, 0xFF	; 255
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	2d d1       	rcall	.+602    	; 0x2ab4 <_ZNK8SdVolume6fatGetEmPm>
    285a:	88 23       	and	r24, r24
    285c:	09 f4       	brne	.+2      	; 0x2860 <_ZN6SdFile5writeEPKvj+0x1e4>
    285e:	4d cf       	rjmp	.-358    	; 0x26fa <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	ab 81       	ldd	r26, Y+3	; 0x03
    2866:	bc 81       	ldd	r27, Y+4	; 0x04
    2868:	f8 01       	movw	r30, r16
    286a:	23 8d       	ldd	r18, Z+27	; 0x1b
    286c:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    286e:	f9 01       	movw	r30, r18
    2870:	27 89       	ldd	r18, Z+23	; 0x17
    2872:	20 31       	cpi	r18, 0x10	; 16
    2874:	29 f0       	breq	.+10     	; 0x2880 <_ZN6SdFile5writeEPKvj+0x204>
    2876:	48 ef       	ldi	r20, 0xF8	; 248
    2878:	5f ef       	ldi	r21, 0xFF	; 255
    287a:	6f ef       	ldi	r22, 0xFF	; 255
    287c:	7f e0       	ldi	r23, 0x0F	; 15
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <_ZN6SdFile5writeEPKvj+0x20c>
    2880:	48 ef       	ldi	r20, 0xF8	; 248
    2882:	5f ef       	ldi	r21, 0xFF	; 255
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	84 17       	cp	r24, r20
    288a:	95 07       	cpc	r25, r21
    288c:	a6 07       	cpc	r26, r22
    288e:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2890:	28 f0       	brcs	.+10     	; 0x289c <_ZN6SdFile5writeEPKvj+0x220>
    2892:	c8 01       	movw	r24, r16
    2894:	d8 dc       	rcall	.-1616   	; 0x2246 <_ZN6SdFile10addClusterEv>
    2896:	81 11       	cpse	r24, r1
    2898:	4d cf       	rjmp	.-358    	; 0x2734 <_ZN6SdFile5writeEPKvj+0xb8>
    289a:	27 cf       	rjmp	.-434    	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    289c:	f8 01       	movw	r30, r16
    289e:	86 83       	std	Z+6, r24	; 0x06
    28a0:	97 83       	std	Z+7, r25	; 0x07
    28a2:	a0 87       	std	Z+8, r26	; 0x08
    28a4:	b1 87       	std	Z+9, r27	; 0x09
    28a6:	46 cf       	rjmp	.-372    	; 0x2734 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    28a8:	e1 14       	cp	r14, r1
    28aa:	f1 04       	cpc	r15, r1
    28ac:	21 f5       	brne	.+72     	; 0x28f6 <_ZN6SdFile5writeEPKvj+0x27a>
    28ae:	d8 01       	movw	r26, r16
    28b0:	1a 96       	adiw	r26, 0x0a	; 10
    28b2:	4d 91       	ld	r20, X+
    28b4:	5d 91       	ld	r21, X+
    28b6:	6d 91       	ld	r22, X+
    28b8:	7c 91       	ld	r23, X
    28ba:	1d 97       	sbiw	r26, 0x0d	; 13
    28bc:	53 96       	adiw	r26, 0x13	; 19
    28be:	8d 91       	ld	r24, X+
    28c0:	9d 91       	ld	r25, X+
    28c2:	0d 90       	ld	r0, X+
    28c4:	bc 91       	ld	r27, X
    28c6:	a0 2d       	mov	r26, r0
    28c8:	48 17       	cp	r20, r24
    28ca:	59 07       	cpc	r21, r25
    28cc:	6a 07       	cpc	r22, r26
    28ce:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    28d0:	90 f0       	brcs	.+36     	; 0x28f6 <_ZN6SdFile5writeEPKvj+0x27a>
    28d2:	7e d0       	rcall	.+252    	; 0x29d0 <_ZN8SdVolume10cacheFlushEv>
    28d4:	88 23       	and	r24, r24
    28d6:	09 f4       	brne	.+2      	; 0x28da <_ZN6SdFile5writeEPKvj+0x25e>
    28d8:	08 cf       	rjmp	.-496    	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    28da:	40 92 6a 02 	sts	0x026A, r4	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    28de:	50 92 6b 02 	sts	0x026B, r5	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    28e2:	60 92 6c 02 	sts	0x026C, r6	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    28e6:	70 92 6d 02 	sts	0x026D, r7	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    28ea:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
    28ee:	81 60       	ori	r24, 0x01	; 1
    28f0:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    28f4:	07 c0       	rjmp	.+14     	; 0x2904 <_ZN6SdFile5writeEPKvj+0x288>
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	c3 01       	movw	r24, r6
    28fa:	b2 01       	movw	r22, r4
    28fc:	a2 d0       	rcall	.+324    	; 0x2a42 <_ZN8SdVolume13cacheRawBlockEmh>
    28fe:	88 23       	and	r24, r24
    2900:	09 f4       	brne	.+2      	; 0x2904 <_ZN6SdFile5writeEPKvj+0x288>
    2902:	f3 ce       	rjmp	.-538    	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>
    2904:	d6 01       	movw	r26, r12
    2906:	f7 01       	movw	r30, r14
    2908:	e9 58       	subi	r30, 0x89	; 137
    290a:	f8 4f       	sbci	r31, 0xF8	; 248
    290c:	9f 01       	movw	r18, r30
    290e:	2a 0d       	add	r18, r10
    2910:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2912:	2e 17       	cp	r18, r30
    2914:	3f 07       	cpc	r19, r31
    2916:	19 f0       	breq	.+6      	; 0x291e <_ZN6SdFile5writeEPKvj+0x2a2>
    2918:	8d 91       	ld	r24, X+
    291a:	81 93       	st	Z+, r24
    291c:	fa cf       	rjmp	.-12     	; 0x2912 <_ZN6SdFile5writeEPKvj+0x296>
    291e:	ca 0c       	add	r12, r10
    2920:	db 1c       	adc	r13, r11
    2922:	62 cf       	rjmp	.-316    	; 0x27e8 <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2924:	d8 01       	movw	r26, r16
    2926:	53 96       	adiw	r26, 0x13	; 19
    2928:	cd 90       	ld	r12, X+
    292a:	dd 90       	ld	r13, X+
    292c:	ed 90       	ld	r14, X+
    292e:	fc 90       	ld	r15, X
    2930:	56 97       	sbiw	r26, 0x16	; 22
    2932:	14 96       	adiw	r26, 0x04	; 4
    2934:	8c 91       	ld	r24, X
    2936:	c4 16       	cp	r12, r20
    2938:	d5 06       	cpc	r13, r21
    293a:	e6 06       	cpc	r14, r22
    293c:	f7 06       	cpc	r15, r23
    293e:	40 f4       	brcc	.+16     	; 0x2950 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2940:	f8 01       	movw	r30, r16
    2942:	43 8b       	std	Z+19, r20	; 0x13
    2944:	54 8b       	std	Z+20, r21	; 0x14
    2946:	65 8b       	std	Z+21, r22	; 0x15
    2948:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    294a:	80 68       	ori	r24, 0x80	; 128
    294c:	84 83       	std	Z+4, r24	; 0x04
    294e:	0d c0       	rjmp	.+26     	; 0x296a <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    2950:	20 91 6e 07 	lds	r18, 0x076E	; 0x80076e <_ZN6SdFile9dateTime_E>
    2954:	30 91 6f 07 	lds	r19, 0x076F	; 0x80076f <_ZN6SdFile9dateTime_E+0x1>
    2958:	23 2b       	or	r18, r19
    295a:	39 f0       	breq	.+14     	; 0x296a <_ZN6SdFile5writeEPKvj+0x2ee>
    295c:	21 14       	cp	r2, r1
    295e:	31 04       	cpc	r3, r1
    2960:	21 f0       	breq	.+8      	; 0x296a <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2962:	80 68       	ori	r24, 0x80	; 128
    2964:	d8 01       	movw	r26, r16
    2966:	14 96       	adiw	r26, 0x04	; 4
    2968:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    296a:	f8 01       	movw	r30, r16
    296c:	84 81       	ldd	r24, Z+4	; 0x04
    296e:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <_ZN6SdFile5writeEPKvj+0x2fa>
    2972:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2974:	06 c0       	rjmp	.+12     	; 0x2982 <_ZN6SdFile5writeEPKvj+0x306>
    2976:	c8 01       	movw	r24, r16
    2978:	3c de       	rcall	.-904    	; 0x25f2 <_ZN6SdFile4syncEv>
    297a:	88 23       	and	r24, r24
    297c:	09 f4       	brne	.+2      	; 0x2980 <_ZN6SdFile5writeEPKvj+0x304>
    297e:	b5 ce       	rjmp	.-662    	; 0x26ea <_ZN6SdFile5writeEPKvj+0x6e>
    2980:	f8 cf       	rjmp	.-16     	; 0x2972 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	df 90       	pop	r13
    2998:	cf 90       	pop	r12
    299a:	bf 90       	pop	r11
    299c:	af 90       	pop	r10
    299e:	9f 90       	pop	r9
    29a0:	8f 90       	pop	r8
    29a2:	7f 90       	pop	r7
    29a4:	6f 90       	pop	r6
    29a6:	5f 90       	pop	r5
    29a8:	4f 90       	pop	r4
    29aa:	3f 90       	pop	r3
    29ac:	2f 90       	pop	r2
    29ae:	08 95       	ret

000029b0 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	1f 92       	push	r1
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	be 01       	movw	r22, r28
    29c2:	6f 5f       	subi	r22, 0xFF	; 255
    29c4:	7f 4f       	sbci	r23, 0xFF	; 255
    29c6:	5a de       	rcall	.-844    	; 0x267c <_ZN6SdFile5writeEPKvj>
}
    29c8:	0f 90       	pop	r0
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	08 95       	ret

000029d0 <_ZN8SdVolume10cacheFlushEv>:
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    29d0:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
    29d4:	88 23       	and	r24, r24
    29d6:	99 f1       	breq	.+102    	; 0x2a3e <_ZN8SdVolume10cacheFlushEv+0x6e>
    29d8:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    29dc:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    29e0:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    29e4:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    29e8:	27 e7       	ldi	r18, 0x77	; 119
    29ea:	37 e0       	ldi	r19, 0x07	; 7
    29ec:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <_ZN8SdVolume7sdCard_E>
    29f0:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <_ZN8SdVolume7sdCard_E+0x1>
    29f4:	db db       	rcall	.-2122   	; 0x21ac <_ZN7Sd2Card10writeBlockEmPKh>
    29f6:	81 11       	cpse	r24, r1
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <_ZN8SdVolume10cacheFlushEv+0x2e>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	08 95       	ret
    29fe:	40 91 70 07 	lds	r20, 0x0770	; 0x800770 <_ZN8SdVolume17cacheMirrorBlock_E>
    2a02:	50 91 71 07 	lds	r21, 0x0771	; 0x800771 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2a06:	60 91 72 07 	lds	r22, 0x0772	; 0x800772 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2a0a:	70 91 73 07 	lds	r23, 0x0773	; 0x800773 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2a0e:	41 15       	cp	r20, r1
    2a10:	51 05       	cpc	r21, r1
    2a12:	61 05       	cpc	r22, r1
    2a14:	71 05       	cpc	r23, r1
    2a16:	89 f0       	breq	.+34     	; 0x2a3a <_ZN8SdVolume10cacheFlushEv+0x6a>
    2a18:	27 e7       	ldi	r18, 0x77	; 119
    2a1a:	37 e0       	ldi	r19, 0x07	; 7
    2a1c:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <_ZN8SdVolume7sdCard_E>
    2a20:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <_ZN8SdVolume7sdCard_E+0x1>
    2a24:	c3 db       	rcall	.-2170   	; 0x21ac <_ZN7Sd2Card10writeBlockEmPKh>
    2a26:	88 23       	and	r24, r24
    2a28:	41 f3       	breq	.-48     	; 0x29fa <_ZN8SdVolume10cacheFlushEv+0x2a>
    2a2a:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <_ZN8SdVolume17cacheMirrorBlock_E>
    2a2e:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2a32:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2a36:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2a3a:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	08 95       	ret

00002a42 <_ZN8SdVolume13cacheRawBlockEmh>:
    2a42:	cf 92       	push	r12
    2a44:	df 92       	push	r13
    2a46:	ef 92       	push	r14
    2a48:	ff 92       	push	r15
    2a4a:	cf 93       	push	r28
    2a4c:	6b 01       	movw	r12, r22
    2a4e:	7c 01       	movw	r14, r24
    2a50:	c4 2f       	mov	r28, r20
    2a52:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    2a56:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2a5a:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2a5e:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2a62:	8c 15       	cp	r24, r12
    2a64:	9d 05       	cpc	r25, r13
    2a66:	ae 05       	cpc	r26, r14
    2a68:	bf 05       	cpc	r27, r15
    2a6a:	c1 f0       	breq	.+48     	; 0x2a9c <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    2a6c:	b1 df       	rcall	.-158    	; 0x29d0 <_ZN8SdVolume10cacheFlushEv>
    2a6e:	81 11       	cpse	r24, r1
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	19 c0       	rjmp	.+50     	; 0x2aa8 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    2a76:	27 e7       	ldi	r18, 0x77	; 119
    2a78:	37 e0       	ldi	r19, 0x07	; 7
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	a6 01       	movw	r20, r12
    2a7e:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <_ZN8SdVolume7sdCard_E>
    2a82:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <_ZN8SdVolume7sdCard_E+0x1>
    2a86:	59 db       	rcall	.-2382   	; 0x213a <_ZN7Sd2Card9readBlockEmPh>
    2a88:	88 23       	and	r24, r24
    2a8a:	99 f3       	breq	.-26     	; 0x2a72 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    2a8c:	c0 92 6a 02 	sts	0x026A, r12	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    2a90:	d0 92 6b 02 	sts	0x026B, r13	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2a94:	e0 92 6c 02 	sts	0x026C, r14	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2a98:	f0 92 6d 02 	sts	0x026D, r15	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2a9c:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
    2aa0:	c8 2b       	or	r28, r24
    2aa2:	c0 93 74 07 	sts	0x0774, r28	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	cf 91       	pop	r28
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	df 90       	pop	r13
    2ab0:	cf 90       	pop	r12
    2ab2:	08 95       	ret

00002ab4 <_ZNK8SdVolume6fatGetEmPm>:
    2ab4:	8f 92       	push	r8
    2ab6:	9f 92       	push	r9
    2ab8:	af 92       	push	r10
    2aba:	bf 92       	push	r11
    2abc:	cf 92       	push	r12
    2abe:	df 92       	push	r13
    2ac0:	ef 92       	push	r14
    2ac2:	ff 92       	push	r15
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	fc 01       	movw	r30, r24
    2ace:	81 85       	ldd	r24, Z+9	; 0x09
    2ad0:	92 85       	ldd	r25, Z+10	; 0x0a
    2ad2:	a3 85       	ldd	r26, Z+11	; 0x0b
    2ad4:	b4 85       	ldd	r27, Z+12	; 0x0c
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	a1 1d       	adc	r26, r1
    2ada:	b1 1d       	adc	r27, r1
    2adc:	84 17       	cp	r24, r20
    2ade:	95 07       	cpc	r25, r21
    2ae0:	a6 07       	cpc	r26, r22
    2ae2:	b7 07       	cpc	r27, r23
    2ae4:	10 f4       	brcc	.+4      	; 0x2aea <_ZNK8SdVolume6fatGetEmPm+0x36>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	5a c0       	rjmp	.+180    	; 0x2b9e <_ZNK8SdVolume6fatGetEmPm+0xea>
    2aea:	83 88       	ldd	r8, Z+19	; 0x13
    2aec:	94 88       	ldd	r9, Z+20	; 0x14
    2aee:	a5 88       	ldd	r10, Z+21	; 0x15
    2af0:	b6 88       	ldd	r11, Z+22	; 0x16
    2af2:	87 89       	ldd	r24, Z+23	; 0x17
    2af4:	80 31       	cpi	r24, 0x10	; 16
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2af8:	bb 27       	eor	r27, r27
    2afa:	a7 2f       	mov	r26, r23
    2afc:	96 2f       	mov	r25, r22
    2afe:	85 2f       	mov	r24, r21
    2b00:	09 c0       	rjmp	.+18     	; 0x2b14 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2b02:	db 01       	movw	r26, r22
    2b04:	ca 01       	movw	r24, r20
    2b06:	c7 e0       	ldi	r28, 0x07	; 7
    2b08:	b6 95       	lsr	r27
    2b0a:	a7 95       	ror	r26
    2b0c:	97 95       	ror	r25
    2b0e:	87 95       	ror	r24
    2b10:	ca 95       	dec	r28
    2b12:	d1 f7       	brne	.-12     	; 0x2b08 <_ZNK8SdVolume6fatGetEmPm+0x54>
    2b14:	e9 01       	movw	r28, r18
    2b16:	6a 01       	movw	r12, r20
    2b18:	7b 01       	movw	r14, r22
    2b1a:	8f 01       	movw	r16, r30
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	68 0d       	add	r22, r8
    2b22:	79 1d       	adc	r23, r9
    2b24:	8a 1d       	adc	r24, r10
    2b26:	9b 1d       	adc	r25, r11
    2b28:	80 90 6a 02 	lds	r8, 0x026A	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    2b2c:	90 90 6b 02 	lds	r9, 0x026B	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2b30:	a0 90 6c 02 	lds	r10, 0x026C	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2b34:	b0 90 6d 02 	lds	r11, 0x026D	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2b38:	68 15       	cp	r22, r8
    2b3a:	79 05       	cpc	r23, r9
    2b3c:	8a 05       	cpc	r24, r10
    2b3e:	9b 05       	cpc	r25, r11
    2b40:	91 f4       	brne	.+36     	; 0x2b66 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    2b42:	f8 01       	movw	r30, r16
    2b44:	87 89       	ldd	r24, Z+23	; 0x17
    2b46:	80 31       	cpi	r24, 0x10	; 16
    2b48:	99 f4       	brne	.+38     	; 0x2b70 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    2b4a:	dd 24       	eor	r13, r13
    2b4c:	ee 24       	eor	r14, r14
    2b4e:	ff 24       	eor	r15, r15
    2b50:	c6 01       	movw	r24, r12
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	fc 01       	movw	r30, r24
    2b58:	e9 58       	subi	r30, 0x89	; 137
    2b5a:	f8 4f       	sbci	r31, 0xF8	; 248
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	a0 e0       	ldi	r26, 0x00	; 0
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	17 c0       	rjmp	.+46     	; 0x2b94 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	6c df       	rcall	.-296    	; 0x2a42 <_ZN8SdVolume13cacheRawBlockEmh>
    2b6a:	81 11       	cpse	r24, r1
    2b6c:	ea cf       	rjmp	.-44     	; 0x2b42 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2b6e:	bb cf       	rjmp	.-138    	; 0x2ae6 <_ZNK8SdVolume6fatGetEmPm+0x32>
    2b70:	e8 94       	clt
    2b72:	c7 f8       	bld	r12, 7
    2b74:	dd 24       	eor	r13, r13
    2b76:	ee 24       	eor	r14, r14
    2b78:	ff 24       	eor	r15, r15
    2b7a:	c6 01       	movw	r24, r12
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	fc 01       	movw	r30, r24
    2b86:	e9 58       	subi	r30, 0x89	; 137
    2b88:	f8 4f       	sbci	r31, 0xF8	; 248
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b90:	b3 81       	ldd	r27, Z+3	; 0x03
    2b92:	bf 70       	andi	r27, 0x0F	; 15
    2b94:	88 83       	st	Y, r24
    2b96:	99 83       	std	Y+1, r25	; 0x01
    2b98:	aa 83       	std	Y+2, r26	; 0x02
    2b9a:	bb 83       	std	Y+3, r27	; 0x03
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	bf 90       	pop	r11
    2bb0:	af 90       	pop	r10
    2bb2:	9f 90       	pop	r9
    2bb4:	8f 90       	pop	r8
    2bb6:	08 95       	ret

00002bb8 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2bb8:	4f 92       	push	r4
    2bba:	5f 92       	push	r5
    2bbc:	6f 92       	push	r6
    2bbe:	7f 92       	push	r7
    2bc0:	8f 92       	push	r8
    2bc2:	9f 92       	push	r9
    2bc4:	af 92       	push	r10
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2bda:	42 30       	cpi	r20, 0x02	; 2
    2bdc:	51 05       	cpc	r21, r1
    2bde:	61 05       	cpc	r22, r1
    2be0:	71 05       	cpc	r23, r1
    2be2:	10 f4       	brcc	.+4      	; 0x2be8 <_ZN8SdVolume6fatPutEmm+0x30>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	77 c0       	rjmp	.+238    	; 0x2cd6 <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bee:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	a1 1d       	adc	r26, r1
    2bf4:	b1 1d       	adc	r27, r1
    2bf6:	84 17       	cp	r24, r20
    2bf8:	95 07       	cpc	r25, r21
    2bfa:	a6 07       	cpc	r26, r22
    2bfc:	b7 07       	cpc	r27, r23
    2bfe:	90 f3       	brcs	.-28     	; 0x2be4 <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2c00:	cb 88       	ldd	r12, Y+19	; 0x13
    2c02:	dc 88       	ldd	r13, Y+20	; 0x14
    2c04:	ed 88       	ldd	r14, Y+21	; 0x15
    2c06:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2c08:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0a:	80 31       	cpi	r24, 0x10	; 16
    2c0c:	29 f4       	brne	.+10     	; 0x2c18 <_ZN8SdVolume6fatPutEmm+0x60>
    2c0e:	bb 27       	eor	r27, r27
    2c10:	a7 2f       	mov	r26, r23
    2c12:	96 2f       	mov	r25, r22
    2c14:	85 2f       	mov	r24, r21
    2c16:	09 c0       	rjmp	.+18     	; 0x2c2a <_ZN8SdVolume6fatPutEmm+0x72>
    2c18:	db 01       	movw	r26, r22
    2c1a:	ca 01       	movw	r24, r20
    2c1c:	e7 e0       	ldi	r30, 0x07	; 7
    2c1e:	b6 95       	lsr	r27
    2c20:	a7 95       	ror	r26
    2c22:	97 95       	ror	r25
    2c24:	87 95       	ror	r24
    2c26:	ea 95       	dec	r30
    2c28:	d1 f7       	brne	.-12     	; 0x2c1e <_ZN8SdVolume6fatPutEmm+0x66>
    2c2a:	48 01       	movw	r8, r16
    2c2c:	59 01       	movw	r10, r18
    2c2e:	2a 01       	movw	r4, r20
    2c30:	3b 01       	movw	r6, r22
    2c32:	c8 0e       	add	r12, r24
    2c34:	d9 1e       	adc	r13, r25
    2c36:	ea 1e       	adc	r14, r26
    2c38:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2c3a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZN8SdVolume17cacheBlockNumber_E>
    2c3e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c42:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c46:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c4a:	c8 16       	cp	r12, r24
    2c4c:	d9 06       	cpc	r13, r25
    2c4e:	ea 06       	cpc	r14, r26
    2c50:	fb 06       	cpc	r15, r27
    2c52:	81 f4       	brne	.+32     	; 0x2c74 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	80 31       	cpi	r24, 0x10	; 16
    2c58:	a1 f4       	brne	.+40     	; 0x2c82 <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2c5a:	b3 01       	movw	r22, r6
    2c5c:	a2 01       	movw	r20, r4
    2c5e:	55 27       	eor	r21, r21
    2c60:	66 27       	eor	r22, r22
    2c62:	77 27       	eor	r23, r23
    2c64:	44 0f       	add	r20, r20
    2c66:	55 1f       	adc	r21, r21
    2c68:	fa 01       	movw	r30, r20
    2c6a:	e9 58       	subi	r30, 0x89	; 137
    2c6c:	f8 4f       	sbci	r31, 0xF8	; 248
    2c6e:	91 82       	std	Z+1, r9	; 0x01
    2c70:	80 82       	st	Z, r8
    2c72:	18 c0       	rjmp	.+48     	; 0x2ca4 <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	c7 01       	movw	r24, r14
    2c78:	b6 01       	movw	r22, r12
    2c7a:	e3 de       	rcall	.-570    	; 0x2a42 <_ZN8SdVolume13cacheRawBlockEmh>
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	ea cf       	rjmp	.-44     	; 0x2c54 <_ZN8SdVolume6fatPutEmm+0x9c>
    2c80:	b1 cf       	rjmp	.-158    	; 0x2be4 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2c82:	b3 01       	movw	r22, r6
    2c84:	a2 01       	movw	r20, r4
    2c86:	4f 77       	andi	r20, 0x7F	; 127
    2c88:	55 27       	eor	r21, r21
    2c8a:	66 27       	eor	r22, r22
    2c8c:	77 27       	eor	r23, r23
    2c8e:	44 0f       	add	r20, r20
    2c90:	55 1f       	adc	r21, r21
    2c92:	44 0f       	add	r20, r20
    2c94:	55 1f       	adc	r21, r21
    2c96:	fa 01       	movw	r30, r20
    2c98:	e9 58       	subi	r30, 0x89	; 137
    2c9a:	f8 4f       	sbci	r31, 0xF8	; 248
    2c9c:	80 82       	st	Z, r8
    2c9e:	91 82       	std	Z+1, r9	; 0x01
    2ca0:	a2 82       	std	Z+2, r10	; 0x02
    2ca2:	b3 82       	std	Z+3, r11	; 0x03
    2ca4:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
    2ca8:	81 60       	ori	r24, 0x01	; 1
    2caa:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2cae:	8a 89       	ldd	r24, Y+18	; 0x12
    2cb0:	82 30       	cpi	r24, 0x02	; 2
    2cb2:	80 f0       	brcs	.+32     	; 0x2cd4 <_ZN8SdVolume6fatPutEmm+0x11c>
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	af 81       	ldd	r26, Y+7	; 0x07
    2cba:	b8 85       	ldd	r27, Y+8	; 0x08
    2cbc:	c8 0e       	add	r12, r24
    2cbe:	d9 1e       	adc	r13, r25
    2cc0:	ea 1e       	adc	r14, r26
    2cc2:	fb 1e       	adc	r15, r27
    2cc4:	c0 92 70 07 	sts	0x0770, r12	; 0x800770 <_ZN8SdVolume17cacheMirrorBlock_E>
    2cc8:	d0 92 71 07 	sts	0x0771, r13	; 0x800771 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2ccc:	e0 92 72 07 	sts	0x0772, r14	; 0x800772 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2cd0:	f0 92 73 07 	sts	0x0773, r15	; 0x800773 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
}
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	df 90       	pop	r13
    2ce4:	cf 90       	pop	r12
    2ce6:	bf 90       	pop	r11
    2ce8:	af 90       	pop	r10
    2cea:	9f 90       	pop	r9
    2cec:	8f 90       	pop	r8
    2cee:	7f 90       	pop	r7
    2cf0:	6f 90       	pop	r6
    2cf2:	5f 90       	pop	r5
    2cf4:	4f 90       	pop	r4
    2cf6:	08 95       	ret

00002cf8 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2cf8:	2f 92       	push	r2
    2cfa:	3f 92       	push	r3
    2cfc:	4f 92       	push	r4
    2cfe:	5f 92       	push	r5
    2d00:	6f 92       	push	r6
    2d02:	7f 92       	push	r7
    2d04:	9f 92       	push	r9
    2d06:	af 92       	push	r10
    2d08:	bf 92       	push	r11
    2d0a:	cf 92       	push	r12
    2d0c:	df 92       	push	r13
    2d0e:	ef 92       	push	r14
    2d10:	ff 92       	push	r15
    2d12:	0f 93       	push	r16
    2d14:	1f 93       	push	r17
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	60 97       	sbiw	r28, 0x10	; 16
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	5c 01       	movw	r10, r24
    2d2c:	49 87       	std	Y+9, r20	; 0x09
    2d2e:	5a 87       	std	Y+10, r21	; 0x0a
    2d30:	6b 87       	std	Y+11, r22	; 0x0b
    2d32:	7c 87       	std	Y+12, r23	; 0x0c
    2d34:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2d36:	d9 01       	movw	r26, r18
    2d38:	cd 90       	ld	r12, X+
    2d3a:	dd 90       	ld	r13, X+
    2d3c:	ed 90       	ld	r14, X+
    2d3e:	fc 90       	ld	r15, X
    2d40:	c1 14       	cp	r12, r1
    2d42:	d1 04       	cpc	r13, r1
    2d44:	e1 04       	cpc	r14, r1
    2d46:	f1 04       	cpc	r15, r1
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2d4a:	bf ef       	ldi	r27, 0xFF	; 255
    2d4c:	cb 1a       	sub	r12, r27
    2d4e:	db 0a       	sbc	r13, r27
    2d50:	eb 0a       	sbc	r14, r27
    2d52:	fb 0a       	sbc	r15, r27
    2d54:	10 c0       	rjmp	.+32     	; 0x2d76 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2d56:	fc 01       	movw	r30, r24
    2d58:	c0 80       	ld	r12, Z
    2d5a:	d1 80       	ldd	r13, Z+1	; 0x01
    2d5c:	e2 80       	ldd	r14, Z+2	; 0x02
    2d5e:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2d60:	99 24       	eor	r9, r9
    2d62:	93 94       	inc	r9
    2d64:	09 85       	ldd	r16, Y+9	; 0x09
    2d66:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d68:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d6a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d6c:	01 30       	cpi	r16, 0x01	; 1
    2d6e:	11 05       	cpc	r17, r1
    2d70:	21 05       	cpc	r18, r1
    2d72:	31 05       	cpc	r19, r1
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    2d76:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2d78:	f5 01       	movw	r30, r10
    2d7a:	81 85       	ldd	r24, Z+9	; 0x09
    2d7c:	92 85       	ldd	r25, Z+10	; 0x0a
    2d7e:	a3 85       	ldd	r26, Z+11	; 0x0b
    2d80:	b4 85       	ldd	r27, Z+12	; 0x0c
    2d82:	8c 01       	movw	r16, r24
    2d84:	9d 01       	movw	r18, r26
    2d86:	0f 5f       	subi	r16, 0xFF	; 255
    2d88:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8a:	2f 4f       	sbci	r18, 0xFF	; 255
    2d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8e:	0d 87       	std	Y+13, r16	; 0x0d
    2d90:	1e 87       	std	Y+14, r17	; 0x0e
    2d92:	2f 87       	std	Y+15, r18	; 0x0f
    2d94:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2d96:	26 01       	movw	r4, r12
    2d98:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2d9a:	1d 82       	std	Y+5, r1	; 0x05
    2d9c:	1e 82       	std	Y+6, r1	; 0x06
    2d9e:	1f 82       	std	Y+7, r1	; 0x07
    2da0:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2da2:	f5 01       	movw	r30, r10
    2da4:	81 85       	ldd	r24, Z+9	; 0x09
    2da6:	92 85       	ldd	r25, Z+10	; 0x0a
    2da8:	a3 85       	ldd	r26, Z+11	; 0x0b
    2daa:	b4 85       	ldd	r27, Z+12	; 0x0c
    2dac:	0d 81       	ldd	r16, Y+5	; 0x05
    2dae:	1e 81       	ldd	r17, Y+6	; 0x06
    2db0:	2f 81       	ldd	r18, Y+7	; 0x07
    2db2:	38 85       	ldd	r19, Y+8	; 0x08
    2db4:	08 17       	cp	r16, r24
    2db6:	19 07       	cpc	r17, r25
    2db8:	2a 07       	cpc	r18, r26
    2dba:	3b 07       	cpc	r19, r27
    2dbc:	08 f0       	brcs	.+2      	; 0x2dc0 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2dbe:	54 c0       	rjmp	.+168    	; 0x2e68 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2dc0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2dc2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2dc4:	4f 85       	ldd	r20, Y+15	; 0x0f
    2dc6:	58 89       	ldd	r21, Y+16	; 0x10
    2dc8:	24 15       	cp	r18, r4
    2dca:	35 05       	cpc	r19, r5
    2dcc:	46 05       	cpc	r20, r6
    2dce:	57 05       	cpc	r21, r7
    2dd0:	50 f4       	brcc	.+20     	; 0x2de6 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    2dd2:	82 e0       	ldi	r24, 0x02	; 2
    2dd4:	48 2e       	mov	r4, r24
    2dd6:	51 2c       	mov	r5, r1
    2dd8:	61 2c       	mov	r6, r1
    2dda:	71 2c       	mov	r7, r1
    2ddc:	92 e0       	ldi	r25, 0x02	; 2
    2dde:	c9 2e       	mov	r12, r25
    2de0:	d1 2c       	mov	r13, r1
    2de2:	e1 2c       	mov	r14, r1
    2de4:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2de6:	9e 01       	movw	r18, r28
    2de8:	2f 5f       	subi	r18, 0xFF	; 255
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	b3 01       	movw	r22, r6
    2dee:	a2 01       	movw	r20, r4
    2df0:	c5 01       	movw	r24, r10
    2df2:	60 de       	rcall	.-832    	; 0x2ab4 <_ZNK8SdVolume6fatGetEmPm>
    2df4:	88 23       	and	r24, r24
    2df6:	c1 f1       	breq	.+112    	; 0x2e68 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    2df8:	49 81       	ldd	r20, Y+1	; 0x01
    2dfa:	5a 81       	ldd	r21, Y+2	; 0x02
    2dfc:	6b 81       	ldd	r22, Y+3	; 0x03
    2dfe:	7c 81       	ldd	r23, Y+4	; 0x04
    2e00:	d3 01       	movw	r26, r6
    2e02:	c2 01       	movw	r24, r4
    2e04:	01 96       	adiw	r24, 0x01	; 1
    2e06:	a1 1d       	adc	r26, r1
    2e08:	b1 1d       	adc	r27, r1
    2e0a:	45 2b       	or	r20, r21
    2e0c:	46 2b       	or	r20, r22
    2e0e:	47 2b       	or	r20, r23
    2e10:	19 f0       	breq	.+6      	; 0x2e18 <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2e12:	6c 01       	movw	r12, r24
    2e14:	7d 01       	movw	r14, r26
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    2e18:	ac 01       	movw	r20, r24
    2e1a:	bd 01       	movw	r22, r26
    2e1c:	4c 19       	sub	r20, r12
    2e1e:	5d 09       	sbc	r21, r13
    2e20:	6e 09       	sbc	r22, r14
    2e22:	7f 09       	sbc	r23, r15
    2e24:	09 85       	ldd	r16, Y+9	; 0x09
    2e26:	1a 85       	ldd	r17, Y+10	; 0x0a
    2e28:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e2c:	04 17       	cp	r16, r20
    2e2e:	15 07       	cpc	r17, r21
    2e30:	26 07       	cpc	r18, r22
    2e32:	37 07       	cpc	r19, r23
    2e34:	79 f0       	breq	.+30     	; 0x2e54 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2e36:	2d 81       	ldd	r18, Y+5	; 0x05
    2e38:	3e 81       	ldd	r19, Y+6	; 0x06
    2e3a:	4f 81       	ldd	r20, Y+7	; 0x07
    2e3c:	58 85       	ldd	r21, Y+8	; 0x08
    2e3e:	2f 5f       	subi	r18, 0xFF	; 255
    2e40:	3f 4f       	sbci	r19, 0xFF	; 255
    2e42:	4f 4f       	sbci	r20, 0xFF	; 255
    2e44:	5f 4f       	sbci	r21, 0xFF	; 255
    2e46:	2d 83       	std	Y+5, r18	; 0x05
    2e48:	3e 83       	std	Y+6, r19	; 0x06
    2e4a:	4f 83       	std	Y+7, r20	; 0x07
    2e4c:	58 87       	std	Y+8, r21	; 0x08
    2e4e:	2c 01       	movw	r4, r24
    2e50:	3d 01       	movw	r6, r26
    2e52:	a7 cf       	rjmp	.-178    	; 0x2da2 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2e54:	0f ef       	ldi	r16, 0xFF	; 255
    2e56:	1f ef       	ldi	r17, 0xFF	; 255
    2e58:	2f ef       	ldi	r18, 0xFF	; 255
    2e5a:	3f e0       	ldi	r19, 0x0F	; 15
    2e5c:	b3 01       	movw	r22, r6
    2e5e:	a2 01       	movw	r20, r4
    2e60:	c5 01       	movw	r24, r10
    2e62:	aa de       	rcall	.-684    	; 0x2bb8 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2e64:	81 11       	cpse	r24, r1
    2e66:	17 c0       	rjmp	.+46     	; 0x2e96 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	3f c0       	rjmp	.+126    	; 0x2eea <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2e6c:	d3 01       	movw	r26, r6
    2e6e:	c2 01       	movw	r24, r4
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	a1 09       	sbc	r26, r1
    2e74:	b1 09       	sbc	r27, r1
    2e76:	8d 83       	std	Y+5, r24	; 0x05
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	af 83       	std	Y+7, r26	; 0x07
    2e7c:	b8 87       	std	Y+8, r27	; 0x08
    2e7e:	93 01       	movw	r18, r6
    2e80:	82 01       	movw	r16, r4
    2e82:	ac 01       	movw	r20, r24
    2e84:	bd 01       	movw	r22, r26
    2e86:	c5 01       	movw	r24, r10
    2e88:	97 de       	rcall	.-722    	; 0x2bb8 <_ZN8SdVolume6fatPutEmm>
    2e8a:	88 23       	and	r24, r24
    2e8c:	69 f3       	breq	.-38     	; 0x2e68 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    2e8e:	4d 80       	ldd	r4, Y+5	; 0x05
    2e90:	5e 80       	ldd	r5, Y+6	; 0x06
    2e92:	6f 80       	ldd	r6, Y+7	; 0x07
    2e94:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2e96:	c4 14       	cp	r12, r4
    2e98:	d5 04       	cpc	r13, r5
    2e9a:	e6 04       	cpc	r14, r6
    2e9c:	f7 04       	cpc	r15, r7
    2e9e:	30 f3       	brcs	.-52     	; 0x2e6c <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2ea0:	d1 01       	movw	r26, r2
    2ea2:	4d 91       	ld	r20, X+
    2ea4:	5d 91       	ld	r21, X+
    2ea6:	6d 91       	ld	r22, X+
    2ea8:	7c 91       	ld	r23, X
    2eaa:	41 15       	cp	r20, r1
    2eac:	51 05       	cpc	r21, r1
    2eae:	61 05       	cpc	r22, r1
    2eb0:	71 05       	cpc	r23, r1
    2eb2:	99 f4       	brne	.+38     	; 0x2eda <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2eb4:	f1 01       	movw	r30, r2
    2eb6:	c0 82       	st	Z, r12
    2eb8:	d1 82       	std	Z+1, r13	; 0x01
    2eba:	e2 82       	std	Z+2, r14	; 0x02
    2ebc:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2ebe:	99 20       	and	r9, r9
    2ec0:	99 f0       	breq	.+38     	; 0x2ee8 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    2ec2:	ff ef       	ldi	r31, 0xFF	; 255
    2ec4:	cf 1a       	sub	r12, r31
    2ec6:	df 0a       	sbc	r13, r31
    2ec8:	ef 0a       	sbc	r14, r31
    2eca:	ff 0a       	sbc	r15, r31
    2ecc:	d5 01       	movw	r26, r10
    2ece:	cd 92       	st	X+, r12
    2ed0:	dd 92       	st	X+, r13
    2ed2:	ed 92       	st	X+, r14
    2ed4:	fc 92       	st	X, r15
    2ed6:	13 97       	sbiw	r26, 0x03	; 3
    2ed8:	07 c0       	rjmp	.+14     	; 0x2ee8 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2eda:	97 01       	movw	r18, r14
    2edc:	86 01       	movw	r16, r12
    2ede:	c5 01       	movw	r24, r10
    2ee0:	6b de       	rcall	.-810    	; 0x2bb8 <_ZN8SdVolume6fatPutEmm>
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	e7 cf       	rjmp	.-50     	; 0x2eb4 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    2ee6:	c0 cf       	rjmp	.-128    	; 0x2e68 <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
}
    2eea:	60 96       	adiw	r28, 0x10	; 16
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
    2f06:	bf 90       	pop	r11
    2f08:	af 90       	pop	r10
    2f0a:	9f 90       	pop	r9
    2f0c:	7f 90       	pop	r7
    2f0e:	6f 90       	pop	r6
    2f10:	5f 90       	pop	r5
    2f12:	4f 90       	pop	r4
    2f14:	3f 90       	pop	r3
    2f16:	2f 90       	pop	r2
    2f18:	08 95       	ret

00002f1a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2f1a:	08 95       	ret

00002f1c <__udivmodqi4>:
    2f1c:	99 1b       	sub	r25, r25
    2f1e:	79 e0       	ldi	r23, 0x09	; 9
    2f20:	04 c0       	rjmp	.+8      	; 0x2f2a <__udivmodqi4_ep>

00002f22 <__udivmodqi4_loop>:
    2f22:	99 1f       	adc	r25, r25
    2f24:	96 17       	cp	r25, r22
    2f26:	08 f0       	brcs	.+2      	; 0x2f2a <__udivmodqi4_ep>
    2f28:	96 1b       	sub	r25, r22

00002f2a <__udivmodqi4_ep>:
    2f2a:	88 1f       	adc	r24, r24
    2f2c:	7a 95       	dec	r23
    2f2e:	c9 f7       	brne	.-14     	; 0x2f22 <__udivmodqi4_loop>
    2f30:	80 95       	com	r24
    2f32:	08 95       	ret

00002f34 <__udivmodhi4>:
    2f34:	aa 1b       	sub	r26, r26
    2f36:	bb 1b       	sub	r27, r27
    2f38:	51 e1       	ldi	r21, 0x11	; 17
    2f3a:	07 c0       	rjmp	.+14     	; 0x2f4a <__udivmodhi4_ep>

00002f3c <__udivmodhi4_loop>:
    2f3c:	aa 1f       	adc	r26, r26
    2f3e:	bb 1f       	adc	r27, r27
    2f40:	a6 17       	cp	r26, r22
    2f42:	b7 07       	cpc	r27, r23
    2f44:	10 f0       	brcs	.+4      	; 0x2f4a <__udivmodhi4_ep>
    2f46:	a6 1b       	sub	r26, r22
    2f48:	b7 0b       	sbc	r27, r23

00002f4a <__udivmodhi4_ep>:
    2f4a:	88 1f       	adc	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	5a 95       	dec	r21
    2f50:	a9 f7       	brne	.-22     	; 0x2f3c <__udivmodhi4_loop>
    2f52:	80 95       	com	r24
    2f54:	90 95       	com	r25
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	08 95       	ret

00002f5c <__udivmodsi4>:
    2f5c:	a1 e2       	ldi	r26, 0x21	; 33
    2f5e:	1a 2e       	mov	r1, r26
    2f60:	aa 1b       	sub	r26, r26
    2f62:	bb 1b       	sub	r27, r27
    2f64:	fd 01       	movw	r30, r26
    2f66:	0d c0       	rjmp	.+26     	; 0x2f82 <__udivmodsi4_ep>

00002f68 <__udivmodsi4_loop>:
    2f68:	aa 1f       	adc	r26, r26
    2f6a:	bb 1f       	adc	r27, r27
    2f6c:	ee 1f       	adc	r30, r30
    2f6e:	ff 1f       	adc	r31, r31
    2f70:	a2 17       	cp	r26, r18
    2f72:	b3 07       	cpc	r27, r19
    2f74:	e4 07       	cpc	r30, r20
    2f76:	f5 07       	cpc	r31, r21
    2f78:	20 f0       	brcs	.+8      	; 0x2f82 <__udivmodsi4_ep>
    2f7a:	a2 1b       	sub	r26, r18
    2f7c:	b3 0b       	sbc	r27, r19
    2f7e:	e4 0b       	sbc	r30, r20
    2f80:	f5 0b       	sbc	r31, r21

00002f82 <__udivmodsi4_ep>:
    2f82:	66 1f       	adc	r22, r22
    2f84:	77 1f       	adc	r23, r23
    2f86:	88 1f       	adc	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	1a 94       	dec	r1
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <__udivmodsi4_loop>
    2f8e:	60 95       	com	r22
    2f90:	70 95       	com	r23
    2f92:	80 95       	com	r24
    2f94:	90 95       	com	r25
    2f96:	9b 01       	movw	r18, r22
    2f98:	ac 01       	movw	r20, r24
    2f9a:	bd 01       	movw	r22, r26
    2f9c:	cf 01       	movw	r24, r30
    2f9e:	08 95       	ret

00002fa0 <__tablejump2__>:
    2fa0:	ee 0f       	add	r30, r30
    2fa2:	ff 1f       	adc	r31, r31
    2fa4:	88 1f       	adc	r24, r24
    2fa6:	8b bf       	out	0x3b, r24	; 59
    2fa8:	07 90       	elpm	r0, Z+
    2faa:	f6 91       	elpm	r31, Z
    2fac:	e0 2d       	mov	r30, r0
    2fae:	19 94       	eijmp

00002fb0 <malloc>:
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	91 05       	cpc	r25, r1
    2fbc:	10 f4       	brcc	.+4      	; 0x2fc2 <malloc+0x12>
    2fbe:	82 e0       	ldi	r24, 0x02	; 2
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	e0 91 7c 09 	lds	r30, 0x097C	; 0x80097c <__flp>
    2fc6:	f0 91 7d 09 	lds	r31, 0x097D	; 0x80097d <__flp+0x1>
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	a0 e0       	ldi	r26, 0x00	; 0
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	30 97       	sbiw	r30, 0x00	; 0
    2fd4:	19 f1       	breq	.+70     	; 0x301c <malloc+0x6c>
    2fd6:	40 81       	ld	r20, Z
    2fd8:	51 81       	ldd	r21, Z+1	; 0x01
    2fda:	02 81       	ldd	r16, Z+2	; 0x02
    2fdc:	13 81       	ldd	r17, Z+3	; 0x03
    2fde:	48 17       	cp	r20, r24
    2fe0:	59 07       	cpc	r21, r25
    2fe2:	c8 f0       	brcs	.+50     	; 0x3016 <malloc+0x66>
    2fe4:	84 17       	cp	r24, r20
    2fe6:	95 07       	cpc	r25, r21
    2fe8:	69 f4       	brne	.+26     	; 0x3004 <malloc+0x54>
    2fea:	10 97       	sbiw	r26, 0x00	; 0
    2fec:	31 f0       	breq	.+12     	; 0x2ffa <malloc+0x4a>
    2fee:	12 96       	adiw	r26, 0x02	; 2
    2ff0:	0c 93       	st	X, r16
    2ff2:	12 97       	sbiw	r26, 0x02	; 2
    2ff4:	13 96       	adiw	r26, 0x03	; 3
    2ff6:	1c 93       	st	X, r17
    2ff8:	27 c0       	rjmp	.+78     	; 0x3048 <malloc+0x98>
    2ffa:	00 93 7c 09 	sts	0x097C, r16	; 0x80097c <__flp>
    2ffe:	10 93 7d 09 	sts	0x097D, r17	; 0x80097d <__flp+0x1>
    3002:	22 c0       	rjmp	.+68     	; 0x3048 <malloc+0x98>
    3004:	21 15       	cp	r18, r1
    3006:	31 05       	cpc	r19, r1
    3008:	19 f0       	breq	.+6      	; 0x3010 <malloc+0x60>
    300a:	42 17       	cp	r20, r18
    300c:	53 07       	cpc	r21, r19
    300e:	18 f4       	brcc	.+6      	; 0x3016 <malloc+0x66>
    3010:	9a 01       	movw	r18, r20
    3012:	bd 01       	movw	r22, r26
    3014:	ef 01       	movw	r28, r30
    3016:	df 01       	movw	r26, r30
    3018:	f8 01       	movw	r30, r16
    301a:	db cf       	rjmp	.-74     	; 0x2fd2 <malloc+0x22>
    301c:	21 15       	cp	r18, r1
    301e:	31 05       	cpc	r19, r1
    3020:	f9 f0       	breq	.+62     	; 0x3060 <malloc+0xb0>
    3022:	28 1b       	sub	r18, r24
    3024:	39 0b       	sbc	r19, r25
    3026:	24 30       	cpi	r18, 0x04	; 4
    3028:	31 05       	cpc	r19, r1
    302a:	80 f4       	brcc	.+32     	; 0x304c <malloc+0x9c>
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	61 15       	cp	r22, r1
    3032:	71 05       	cpc	r23, r1
    3034:	21 f0       	breq	.+8      	; 0x303e <malloc+0x8e>
    3036:	fb 01       	movw	r30, r22
    3038:	93 83       	std	Z+3, r25	; 0x03
    303a:	82 83       	std	Z+2, r24	; 0x02
    303c:	04 c0       	rjmp	.+8      	; 0x3046 <malloc+0x96>
    303e:	90 93 7d 09 	sts	0x097D, r25	; 0x80097d <__flp+0x1>
    3042:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <__flp>
    3046:	fe 01       	movw	r30, r28
    3048:	32 96       	adiw	r30, 0x02	; 2
    304a:	44 c0       	rjmp	.+136    	; 0x30d4 <malloc+0x124>
    304c:	fe 01       	movw	r30, r28
    304e:	e2 0f       	add	r30, r18
    3050:	f3 1f       	adc	r31, r19
    3052:	81 93       	st	Z+, r24
    3054:	91 93       	st	Z+, r25
    3056:	22 50       	subi	r18, 0x02	; 2
    3058:	31 09       	sbc	r19, r1
    305a:	39 83       	std	Y+1, r19	; 0x01
    305c:	28 83       	st	Y, r18
    305e:	3a c0       	rjmp	.+116    	; 0x30d4 <malloc+0x124>
    3060:	20 91 7a 09 	lds	r18, 0x097A	; 0x80097a <__brkval>
    3064:	30 91 7b 09 	lds	r19, 0x097B	; 0x80097b <__brkval+0x1>
    3068:	23 2b       	or	r18, r19
    306a:	41 f4       	brne	.+16     	; 0x307c <malloc+0xcc>
    306c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3070:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3074:	30 93 7b 09 	sts	0x097B, r19	; 0x80097b <__brkval+0x1>
    3078:	20 93 7a 09 	sts	0x097A, r18	; 0x80097a <__brkval>
    307c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3080:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3084:	21 15       	cp	r18, r1
    3086:	31 05       	cpc	r19, r1
    3088:	41 f4       	brne	.+16     	; 0x309a <malloc+0xea>
    308a:	2d b7       	in	r18, 0x3d	; 61
    308c:	3e b7       	in	r19, 0x3e	; 62
    308e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3092:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3096:	24 1b       	sub	r18, r20
    3098:	35 0b       	sbc	r19, r21
    309a:	e0 91 7a 09 	lds	r30, 0x097A	; 0x80097a <__brkval>
    309e:	f0 91 7b 09 	lds	r31, 0x097B	; 0x80097b <__brkval+0x1>
    30a2:	e2 17       	cp	r30, r18
    30a4:	f3 07       	cpc	r31, r19
    30a6:	a0 f4       	brcc	.+40     	; 0x30d0 <malloc+0x120>
    30a8:	2e 1b       	sub	r18, r30
    30aa:	3f 0b       	sbc	r19, r31
    30ac:	28 17       	cp	r18, r24
    30ae:	39 07       	cpc	r19, r25
    30b0:	78 f0       	brcs	.+30     	; 0x30d0 <malloc+0x120>
    30b2:	ac 01       	movw	r20, r24
    30b4:	4e 5f       	subi	r20, 0xFE	; 254
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	24 17       	cp	r18, r20
    30ba:	35 07       	cpc	r19, r21
    30bc:	48 f0       	brcs	.+18     	; 0x30d0 <malloc+0x120>
    30be:	4e 0f       	add	r20, r30
    30c0:	5f 1f       	adc	r21, r31
    30c2:	50 93 7b 09 	sts	0x097B, r21	; 0x80097b <__brkval+0x1>
    30c6:	40 93 7a 09 	sts	0x097A, r20	; 0x80097a <__brkval>
    30ca:	81 93       	st	Z+, r24
    30cc:	91 93       	st	Z+, r25
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <malloc+0x124>
    30d0:	e0 e0       	ldi	r30, 0x00	; 0
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	cf 01       	movw	r24, r30
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	08 95       	ret

000030e0 <free>:
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	09 f4       	brne	.+2      	; 0x30ea <free+0xa>
    30e8:	81 c0       	rjmp	.+258    	; 0x31ec <free+0x10c>
    30ea:	fc 01       	movw	r30, r24
    30ec:	32 97       	sbiw	r30, 0x02	; 2
    30ee:	13 82       	std	Z+3, r1	; 0x03
    30f0:	12 82       	std	Z+2, r1	; 0x02
    30f2:	a0 91 7c 09 	lds	r26, 0x097C	; 0x80097c <__flp>
    30f6:	b0 91 7d 09 	lds	r27, 0x097D	; 0x80097d <__flp+0x1>
    30fa:	10 97       	sbiw	r26, 0x00	; 0
    30fc:	81 f4       	brne	.+32     	; 0x311e <free+0x3e>
    30fe:	20 81       	ld	r18, Z
    3100:	31 81       	ldd	r19, Z+1	; 0x01
    3102:	82 0f       	add	r24, r18
    3104:	93 1f       	adc	r25, r19
    3106:	20 91 7a 09 	lds	r18, 0x097A	; 0x80097a <__brkval>
    310a:	30 91 7b 09 	lds	r19, 0x097B	; 0x80097b <__brkval+0x1>
    310e:	28 17       	cp	r18, r24
    3110:	39 07       	cpc	r19, r25
    3112:	51 f5       	brne	.+84     	; 0x3168 <free+0x88>
    3114:	f0 93 7b 09 	sts	0x097B, r31	; 0x80097b <__brkval+0x1>
    3118:	e0 93 7a 09 	sts	0x097A, r30	; 0x80097a <__brkval>
    311c:	67 c0       	rjmp	.+206    	; 0x31ec <free+0x10c>
    311e:	ed 01       	movw	r28, r26
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	ce 17       	cp	r28, r30
    3126:	df 07       	cpc	r29, r31
    3128:	40 f4       	brcc	.+16     	; 0x313a <free+0x5a>
    312a:	4a 81       	ldd	r20, Y+2	; 0x02
    312c:	5b 81       	ldd	r21, Y+3	; 0x03
    312e:	9e 01       	movw	r18, r28
    3130:	41 15       	cp	r20, r1
    3132:	51 05       	cpc	r21, r1
    3134:	f1 f0       	breq	.+60     	; 0x3172 <free+0x92>
    3136:	ea 01       	movw	r28, r20
    3138:	f5 cf       	rjmp	.-22     	; 0x3124 <free+0x44>
    313a:	d3 83       	std	Z+3, r29	; 0x03
    313c:	c2 83       	std	Z+2, r28	; 0x02
    313e:	40 81       	ld	r20, Z
    3140:	51 81       	ldd	r21, Z+1	; 0x01
    3142:	84 0f       	add	r24, r20
    3144:	95 1f       	adc	r25, r21
    3146:	c8 17       	cp	r28, r24
    3148:	d9 07       	cpc	r29, r25
    314a:	59 f4       	brne	.+22     	; 0x3162 <free+0x82>
    314c:	88 81       	ld	r24, Y
    314e:	99 81       	ldd	r25, Y+1	; 0x01
    3150:	84 0f       	add	r24, r20
    3152:	95 1f       	adc	r25, r21
    3154:	02 96       	adiw	r24, 0x02	; 2
    3156:	91 83       	std	Z+1, r25	; 0x01
    3158:	80 83       	st	Z, r24
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	9b 81       	ldd	r25, Y+3	; 0x03
    315e:	93 83       	std	Z+3, r25	; 0x03
    3160:	82 83       	std	Z+2, r24	; 0x02
    3162:	21 15       	cp	r18, r1
    3164:	31 05       	cpc	r19, r1
    3166:	29 f4       	brne	.+10     	; 0x3172 <free+0x92>
    3168:	f0 93 7d 09 	sts	0x097D, r31	; 0x80097d <__flp+0x1>
    316c:	e0 93 7c 09 	sts	0x097C, r30	; 0x80097c <__flp>
    3170:	3d c0       	rjmp	.+122    	; 0x31ec <free+0x10c>
    3172:	e9 01       	movw	r28, r18
    3174:	fb 83       	std	Y+3, r31	; 0x03
    3176:	ea 83       	std	Y+2, r30	; 0x02
    3178:	49 91       	ld	r20, Y+
    317a:	59 91       	ld	r21, Y+
    317c:	c4 0f       	add	r28, r20
    317e:	d5 1f       	adc	r29, r21
    3180:	ec 17       	cp	r30, r28
    3182:	fd 07       	cpc	r31, r29
    3184:	61 f4       	brne	.+24     	; 0x319e <free+0xbe>
    3186:	80 81       	ld	r24, Z
    3188:	91 81       	ldd	r25, Z+1	; 0x01
    318a:	84 0f       	add	r24, r20
    318c:	95 1f       	adc	r25, r21
    318e:	02 96       	adiw	r24, 0x02	; 2
    3190:	e9 01       	movw	r28, r18
    3192:	99 83       	std	Y+1, r25	; 0x01
    3194:	88 83       	st	Y, r24
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	9b 83       	std	Y+3, r25	; 0x03
    319c:	8a 83       	std	Y+2, r24	; 0x02
    319e:	e0 e0       	ldi	r30, 0x00	; 0
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	12 96       	adiw	r26, 0x02	; 2
    31a4:	8d 91       	ld	r24, X+
    31a6:	9c 91       	ld	r25, X
    31a8:	13 97       	sbiw	r26, 0x03	; 3
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	19 f0       	breq	.+6      	; 0x31b4 <free+0xd4>
    31ae:	fd 01       	movw	r30, r26
    31b0:	dc 01       	movw	r26, r24
    31b2:	f7 cf       	rjmp	.-18     	; 0x31a2 <free+0xc2>
    31b4:	8d 91       	ld	r24, X+
    31b6:	9c 91       	ld	r25, X
    31b8:	11 97       	sbiw	r26, 0x01	; 1
    31ba:	9d 01       	movw	r18, r26
    31bc:	2e 5f       	subi	r18, 0xFE	; 254
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	82 0f       	add	r24, r18
    31c2:	93 1f       	adc	r25, r19
    31c4:	20 91 7a 09 	lds	r18, 0x097A	; 0x80097a <__brkval>
    31c8:	30 91 7b 09 	lds	r19, 0x097B	; 0x80097b <__brkval+0x1>
    31cc:	28 17       	cp	r18, r24
    31ce:	39 07       	cpc	r19, r25
    31d0:	69 f4       	brne	.+26     	; 0x31ec <free+0x10c>
    31d2:	30 97       	sbiw	r30, 0x00	; 0
    31d4:	29 f4       	brne	.+10     	; 0x31e0 <free+0x100>
    31d6:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <__flp+0x1>
    31da:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <__flp>
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <free+0x104>
    31e0:	13 82       	std	Z+3, r1	; 0x03
    31e2:	12 82       	std	Z+2, r1	; 0x02
    31e4:	b0 93 7b 09 	sts	0x097B, r27	; 0x80097b <__brkval+0x1>
    31e8:	a0 93 7a 09 	sts	0x097A, r26	; 0x80097a <__brkval>
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	08 95       	ret

000031f2 <realloc>:
    31f2:	6f 92       	push	r6
    31f4:	7f 92       	push	r7
    31f6:	8f 92       	push	r8
    31f8:	9f 92       	push	r9
    31fa:	af 92       	push	r10
    31fc:	bf 92       	push	r11
    31fe:	cf 92       	push	r12
    3200:	df 92       	push	r13
    3202:	ef 92       	push	r14
    3204:	ff 92       	push	r15
    3206:	0f 93       	push	r16
    3208:	1f 93       	push	r17
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	81 f4       	brne	.+32     	; 0x3232 <realloc+0x40>
    3212:	cb 01       	movw	r24, r22
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	ff 90       	pop	r15
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	bf 90       	pop	r11
    3226:	af 90       	pop	r10
    3228:	9f 90       	pop	r9
    322a:	8f 90       	pop	r8
    322c:	7f 90       	pop	r7
    322e:	6f 90       	pop	r6
    3230:	bf ce       	rjmp	.-642    	; 0x2fb0 <malloc>
    3232:	fc 01       	movw	r30, r24
    3234:	e6 0f       	add	r30, r22
    3236:	f7 1f       	adc	r31, r23
    3238:	9c 01       	movw	r18, r24
    323a:	22 50       	subi	r18, 0x02	; 2
    323c:	31 09       	sbc	r19, r1
    323e:	e2 17       	cp	r30, r18
    3240:	f3 07       	cpc	r31, r19
    3242:	08 f4       	brcc	.+2      	; 0x3246 <realloc+0x54>
    3244:	a5 c0       	rjmp	.+330    	; 0x3390 <realloc+0x19e>
    3246:	ec 01       	movw	r28, r24
    3248:	d9 01       	movw	r26, r18
    324a:	0d 91       	ld	r16, X+
    324c:	1c 91       	ld	r17, X
    324e:	11 97       	sbiw	r26, 0x01	; 1
    3250:	06 17       	cp	r16, r22
    3252:	17 07       	cpc	r17, r23
    3254:	a8 f0       	brcs	.+42     	; 0x3280 <realloc+0x8e>
    3256:	05 30       	cpi	r16, 0x05	; 5
    3258:	11 05       	cpc	r17, r1
    325a:	08 f4       	brcc	.+2      	; 0x325e <realloc+0x6c>
    325c:	97 c0       	rjmp	.+302    	; 0x338c <realloc+0x19a>
    325e:	c8 01       	movw	r24, r16
    3260:	04 97       	sbiw	r24, 0x04	; 4
    3262:	86 17       	cp	r24, r22
    3264:	97 07       	cpc	r25, r23
    3266:	08 f4       	brcc	.+2      	; 0x326a <realloc+0x78>
    3268:	91 c0       	rjmp	.+290    	; 0x338c <realloc+0x19a>
    326a:	02 50       	subi	r16, 0x02	; 2
    326c:	11 09       	sbc	r17, r1
    326e:	06 1b       	sub	r16, r22
    3270:	17 0b       	sbc	r17, r23
    3272:	01 93       	st	Z+, r16
    3274:	11 93       	st	Z+, r17
    3276:	6d 93       	st	X+, r22
    3278:	7c 93       	st	X, r23
    327a:	cf 01       	movw	r24, r30
    327c:	31 df       	rcall	.-414    	; 0x30e0 <free>
    327e:	86 c0       	rjmp	.+268    	; 0x338c <realloc+0x19a>
    3280:	5b 01       	movw	r10, r22
    3282:	a0 1a       	sub	r10, r16
    3284:	b1 0a       	sbc	r11, r17
    3286:	4c 01       	movw	r8, r24
    3288:	80 0e       	add	r8, r16
    328a:	91 1e       	adc	r9, r17
    328c:	a0 91 7c 09 	lds	r26, 0x097C	; 0x80097c <__flp>
    3290:	b0 91 7d 09 	lds	r27, 0x097D	; 0x80097d <__flp+0x1>
    3294:	61 2c       	mov	r6, r1
    3296:	71 2c       	mov	r7, r1
    3298:	e1 2c       	mov	r14, r1
    329a:	f1 2c       	mov	r15, r1
    329c:	10 97       	sbiw	r26, 0x00	; 0
    329e:	09 f4       	brne	.+2      	; 0x32a2 <realloc+0xb0>
    32a0:	46 c0       	rjmp	.+140    	; 0x332e <realloc+0x13c>
    32a2:	8d 91       	ld	r24, X+
    32a4:	9c 91       	ld	r25, X
    32a6:	11 97       	sbiw	r26, 0x01	; 1
    32a8:	a8 15       	cp	r26, r8
    32aa:	b9 05       	cpc	r27, r9
    32ac:	b1 f5       	brne	.+108    	; 0x331a <realloc+0x128>
    32ae:	6c 01       	movw	r12, r24
    32b0:	42 e0       	ldi	r20, 0x02	; 2
    32b2:	c4 0e       	add	r12, r20
    32b4:	d1 1c       	adc	r13, r1
    32b6:	ca 14       	cp	r12, r10
    32b8:	db 04       	cpc	r13, r11
    32ba:	78 f1       	brcs	.+94     	; 0x331a <realloc+0x128>
    32bc:	4c 01       	movw	r8, r24
    32be:	8a 18       	sub	r8, r10
    32c0:	9b 08       	sbc	r9, r11
    32c2:	64 01       	movw	r12, r8
    32c4:	42 e0       	ldi	r20, 0x02	; 2
    32c6:	c4 0e       	add	r12, r20
    32c8:	d1 1c       	adc	r13, r1
    32ca:	12 96       	adiw	r26, 0x02	; 2
    32cc:	bc 90       	ld	r11, X
    32ce:	12 97       	sbiw	r26, 0x02	; 2
    32d0:	13 96       	adiw	r26, 0x03	; 3
    32d2:	ac 91       	ld	r26, X
    32d4:	b5 e0       	ldi	r27, 0x05	; 5
    32d6:	cb 16       	cp	r12, r27
    32d8:	d1 04       	cpc	r13, r1
    32da:	40 f0       	brcs	.+16     	; 0x32ec <realloc+0xfa>
    32dc:	b2 82       	std	Z+2, r11	; 0x02
    32de:	a3 83       	std	Z+3, r26	; 0x03
    32e0:	91 82       	std	Z+1, r9	; 0x01
    32e2:	80 82       	st	Z, r8
    32e4:	d9 01       	movw	r26, r18
    32e6:	6d 93       	st	X+, r22
    32e8:	7c 93       	st	X, r23
    32ea:	09 c0       	rjmp	.+18     	; 0x32fe <realloc+0x10c>
    32ec:	0e 5f       	subi	r16, 0xFE	; 254
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	80 0f       	add	r24, r16
    32f2:	91 1f       	adc	r25, r17
    32f4:	f9 01       	movw	r30, r18
    32f6:	91 83       	std	Z+1, r25	; 0x01
    32f8:	80 83       	st	Z, r24
    32fa:	eb 2d       	mov	r30, r11
    32fc:	fa 2f       	mov	r31, r26
    32fe:	e1 14       	cp	r14, r1
    3300:	f1 04       	cpc	r15, r1
    3302:	31 f0       	breq	.+12     	; 0x3310 <realloc+0x11e>
    3304:	d7 01       	movw	r26, r14
    3306:	13 96       	adiw	r26, 0x03	; 3
    3308:	fc 93       	st	X, r31
    330a:	ee 93       	st	-X, r30
    330c:	12 97       	sbiw	r26, 0x02	; 2
    330e:	3e c0       	rjmp	.+124    	; 0x338c <realloc+0x19a>
    3310:	f0 93 7d 09 	sts	0x097D, r31	; 0x80097d <__flp+0x1>
    3314:	e0 93 7c 09 	sts	0x097C, r30	; 0x80097c <__flp>
    3318:	39 c0       	rjmp	.+114    	; 0x338c <realloc+0x19a>
    331a:	68 16       	cp	r6, r24
    331c:	79 06       	cpc	r7, r25
    331e:	08 f4       	brcc	.+2      	; 0x3322 <realloc+0x130>
    3320:	3c 01       	movw	r6, r24
    3322:	7d 01       	movw	r14, r26
    3324:	12 96       	adiw	r26, 0x02	; 2
    3326:	0d 90       	ld	r0, X+
    3328:	bc 91       	ld	r27, X
    332a:	a0 2d       	mov	r26, r0
    332c:	b7 cf       	rjmp	.-146    	; 0x329c <realloc+0xaa>
    332e:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <__brkval>
    3332:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <__brkval+0x1>
    3336:	88 16       	cp	r8, r24
    3338:	99 06       	cpc	r9, r25
    333a:	e1 f4       	brne	.+56     	; 0x3374 <realloc+0x182>
    333c:	66 16       	cp	r6, r22
    333e:	77 06       	cpc	r7, r23
    3340:	c8 f4       	brcc	.+50     	; 0x3374 <realloc+0x182>
    3342:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3346:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	41 f4       	brne	.+16     	; 0x335e <realloc+0x16c>
    334e:	8d b7       	in	r24, 0x3d	; 61
    3350:	9e b7       	in	r25, 0x3e	; 62
    3352:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3356:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    335a:	84 1b       	sub	r24, r20
    335c:	95 0b       	sbc	r25, r21
    335e:	e8 17       	cp	r30, r24
    3360:	f9 07       	cpc	r31, r25
    3362:	b0 f4       	brcc	.+44     	; 0x3390 <realloc+0x19e>
    3364:	f0 93 7b 09 	sts	0x097B, r31	; 0x80097b <__brkval+0x1>
    3368:	e0 93 7a 09 	sts	0x097A, r30	; 0x80097a <__brkval>
    336c:	f9 01       	movw	r30, r18
    336e:	71 83       	std	Z+1, r23	; 0x01
    3370:	60 83       	st	Z, r22
    3372:	0c c0       	rjmp	.+24     	; 0x338c <realloc+0x19a>
    3374:	cb 01       	movw	r24, r22
    3376:	1c de       	rcall	.-968    	; 0x2fb0 <malloc>
    3378:	7c 01       	movw	r14, r24
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	49 f0       	breq	.+18     	; 0x3390 <realloc+0x19e>
    337e:	a8 01       	movw	r20, r16
    3380:	be 01       	movw	r22, r28
    3382:	20 d0       	rcall	.+64     	; 0x33c4 <memcpy>
    3384:	ce 01       	movw	r24, r28
    3386:	ac de       	rcall	.-680    	; 0x30e0 <free>
    3388:	c7 01       	movw	r24, r14
    338a:	04 c0       	rjmp	.+8      	; 0x3394 <realloc+0x1a2>
    338c:	ce 01       	movw	r24, r28
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <realloc+0x1a2>
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ff 90       	pop	r15
    339e:	ef 90       	pop	r14
    33a0:	df 90       	pop	r13
    33a2:	cf 90       	pop	r12
    33a4:	bf 90       	pop	r11
    33a6:	af 90       	pop	r10
    33a8:	9f 90       	pop	r9
    33aa:	8f 90       	pop	r8
    33ac:	7f 90       	pop	r7
    33ae:	6f 90       	pop	r6
    33b0:	08 95       	ret

000033b2 <memcpy_P>:
    33b2:	fb 01       	movw	r30, r22
    33b4:	dc 01       	movw	r26, r24
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <memcpy_P+0xa>
    33b8:	05 90       	lpm	r0, Z+
    33ba:	0d 92       	st	X+, r0
    33bc:	41 50       	subi	r20, 0x01	; 1
    33be:	50 40       	sbci	r21, 0x00	; 0
    33c0:	d8 f7       	brcc	.-10     	; 0x33b8 <memcpy_P+0x6>
    33c2:	08 95       	ret

000033c4 <memcpy>:
    33c4:	fb 01       	movw	r30, r22
    33c6:	dc 01       	movw	r26, r24
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <memcpy+0xa>
    33ca:	01 90       	ld	r0, Z+
    33cc:	0d 92       	st	X+, r0
    33ce:	41 50       	subi	r20, 0x01	; 1
    33d0:	50 40       	sbci	r21, 0x00	; 0
    33d2:	d8 f7       	brcc	.-10     	; 0x33ca <memcpy+0x6>
    33d4:	08 95       	ret

000033d6 <strcpy>:
    33d6:	fb 01       	movw	r30, r22
    33d8:	dc 01       	movw	r26, r24
    33da:	01 90       	ld	r0, Z+
    33dc:	0d 92       	st	X+, r0
    33de:	00 20       	and	r0, r0
    33e0:	e1 f7       	brne	.-8      	; 0x33da <strcpy+0x4>
    33e2:	08 95       	ret

000033e4 <__do_global_dtors>:
    33e4:	11 e0       	ldi	r17, 0x01	; 1
    33e6:	c5 e2       	ldi	r28, 0x25	; 37
    33e8:	d1 e0       	ldi	r29, 0x01	; 1
    33ea:	00 e0       	ldi	r16, 0x00	; 0
    33ec:	05 c0       	rjmp	.+10     	; 0x33f8 <__do_global_dtors+0x14>
    33ee:	80 2f       	mov	r24, r16
    33f0:	fe 01       	movw	r30, r28
    33f2:	d6 dd       	rcall	.-1108   	; 0x2fa0 <__tablejump2__>
    33f4:	21 96       	adiw	r28, 0x01	; 1
    33f6:	01 1d       	adc	r16, r1
    33f8:	c6 32       	cpi	r28, 0x26	; 38
    33fa:	d1 07       	cpc	r29, r17
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	08 07       	cpc	r16, r24
    3400:	b1 f7       	brne	.-20     	; 0x33ee <__do_global_dtors+0xa>
    3402:	f8 94       	cli

00003404 <__stop_program>:
    3404:	ff cf       	rjmp	.-2      	; 0x3404 <__stop_program>
