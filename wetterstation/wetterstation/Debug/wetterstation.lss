
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800200  000041c8  0000425c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000493  00800406  00800406  00004462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000f88  00000000  00000000  000044d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00031de3  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007154  00000000  00000000  0003723f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009889  00000000  00000000  0003e393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003958  00000000  00000000  00047c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007db2  00000000  00000000  0004b574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000153e2  00000000  00000000  00053326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001188  00000000  00000000  00068708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	40 c1       	rjmp	.+640    	; 0x282 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_1>
       8:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_2>
       c:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_3>
      10:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__vector_4>
      14:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__vector_5>
      18:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_6>
      1c:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_7>
      20:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_8>
      24:	58 c6       	rjmp	.+3248   	; 0xcd6 <__vector_10>
      26:	00 00       	nop
      28:	56 c6       	rjmp	.+3244   	; 0xcd6 <__vector_10>
      2a:	00 00       	nop
      2c:	54 c6       	rjmp	.+3240   	; 0xcd6 <__vector_10>
      2e:	00 00       	nop
      30:	59 c1       	rjmp	.+690    	; 0x2e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c1       	rjmp	.+686    	; 0x2e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c1       	rjmp	.+682    	; 0x2e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c1       	rjmp	.+678    	; 0x2e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c1       	rjmp	.+674    	; 0x2e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c1       	rjmp	.+670    	; 0x2e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c1       	rjmp	.+666    	; 0x2e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c1       	rjmp	.+662    	; 0x2e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c1       	rjmp	.+658    	; 0x2e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c1       	rjmp	.+654    	; 0x2e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c1       	rjmp	.+650    	; 0x2e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__vector_23>
      60:	41 c1       	rjmp	.+642    	; 0x2e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_25>
      68:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_26>
      6c:	3b c1       	rjmp	.+630    	; 0x2e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c1       	rjmp	.+626    	; 0x2e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c1       	rjmp	.+622    	; 0x2e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c1       	rjmp	.+618    	; 0x2e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c1       	rjmp	.+614    	; 0x2e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c1       	rjmp	.+610    	; 0x2e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c1       	rjmp	.+606    	; 0x2e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c1       	rjmp	.+602    	; 0x2e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c1       	rjmp	.+598    	; 0x2e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c1       	rjmp	.+594    	; 0x2e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c1       	rjmp	.+590    	; 0x2e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c1       	rjmp	.+586    	; 0x2e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	98 c7       	rjmp	.+3888   	; 0xfce <__vector_39>
      9e:	00 00       	nop
      a0:	21 c1       	rjmp	.+578    	; 0x2e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c1       	rjmp	.+574    	; 0x2e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c1       	rjmp	.+570    	; 0x2e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c1       	rjmp	.+566    	; 0x2e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c1       	rjmp	.+562    	; 0x2e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c1       	rjmp	.+558    	; 0x2e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c1       	rjmp	.+554    	; 0x2e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c1       	rjmp	.+550    	; 0x2e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c1       	rjmp	.+546    	; 0x2e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c1       	rjmp	.+542    	; 0x2e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c1       	rjmp	.+538    	; 0x2e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c1       	rjmp	.+534    	; 0x2e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c1       	rjmp	.+530    	; 0x2e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c1       	rjmp	.+526    	; 0x2e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c1       	rjmp	.+522    	; 0x2e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c1       	rjmp	.+518    	; 0x2e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c1       	rjmp	.+514    	; 0x2e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	81 05       	cpc	r24, r1
      e6:	98 05       	cpc	r25, r8
      e8:	98 05       	cpc	r25, r8
      ea:	95 05       	cpc	r25, r5
      ec:	98 05       	cpc	r25, r8
      ee:	7f 05       	cpc	r23, r15
      f0:	98 05       	cpc	r25, r8
      f2:	98 05       	cpc	r25, r8
      f4:	98 05       	cpc	r25, r8
      f6:	73 05       	cpc	r23, r3
      f8:	98 05       	cpc	r25, r8
      fa:	98 05       	cpc	r25, r8
      fc:	88 05       	cpc	r24, r8
      fe:	93 05       	cpc	r25, r3
     100:	91 05       	cpc	r25, r1
     102:	98 05       	cpc	r25, r8
     104:	98 05       	cpc	r25, r8
     106:	98 05       	cpc	r25, r8
     108:	8f 05       	cpc	r24, r15
     10a:	9d 0d       	add	r25, r13
     10c:	67 0d       	add	r22, r7
     10e:	6f 0d       	add	r22, r15
     110:	7b 0d       	add	r23, r11
     112:	88 0d       	add	r24, r8
     114:	a9 0d       	add	r26, r9
     116:	b6 0d       	add	r27, r6
     118:	4d 10       	cpse	r4, r13
     11a:	50 10       	cpse	r5, r0
     11c:	3f 10       	cpse	r3, r15
     11e:	43 10       	cpse	r4, r3
     120:	49 10       	cpse	r4, r9
     122:	87 10       	cpse	r8, r7
     124:	54 10       	cpse	r5, r4
     126:	58 10       	cpse	r5, r8
     128:	5e 10       	cpse	r5, r14
     12a:	62 10       	cpse	r6, r2
     12c:	66 10       	cpse	r6, r6
     12e:	6c 10       	cpse	r6, r12
     130:	70 10       	cpse	r7, r0
     132:	74 10       	cpse	r7, r4
     134:	87 10       	cpse	r8, r7
     136:	7a 10       	cpse	r7, r10
     138:	7e 10       	cpse	r7, r14
     13a:	82 10       	cpse	r8, r2

0000013c <__trampolines_end>:
     13c:	44 65       	ori	r20, 0x54	; 84
     13e:	63 20       	and	r6, r3
     140:	31 31       	cpi	r19, 0x11	; 17
     142:	20 32       	cpi	r18, 0x20	; 32
     144:	30 31       	cpi	r19, 0x10	; 16
     146:	38 00       	.word	0x0038	; ????

00000148 <_ZZN13RealTimeClock7initRTCEvE3__c_0>:
     148:	31 33 3a 34 38 3a 32 35 00                          13:48:25.

00000151 <digital_pin_to_timer_PGM>:
     151:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     17d:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000197 <digital_pin_to_bit_mask_PGM>:
     197:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1a7:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1b7:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1c7:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1d7:	04 08 10 20 40 80                                   ... @.

000001dd <digital_pin_to_port_PGM>:
     1dd:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1ed:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1fd:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     20d:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     21d:	0b 0b 0b 0b 0b 0b                                   ......

00000223 <port_to_input_PGM>:
     223:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     233:	00 01 00 00 03 01 06 01 09 01                       ..........

0000023d <port_to_output_PGM>:
     23d:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     24d:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000257 <port_to_mode_PGM>:
     257:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     267:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000272 <__ctors_start>:
     272:	fd 01       	movw	r30, r26
     274:	84 02       	muls	r24, r20
     276:	71 0a       	sbc	r7, r17
     278:	86 0a       	sbc	r8, r22
     27a:	5e 0c       	add	r5, r14
     27c:	ba 12       	cpse	r11, r26
     27e:	ec 15       	cp	r30, r12

00000280 <__ctors_end>:
     280:	13 02       	muls	r17, r19

00000282 <__dtors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d1 e2       	ldi	r29, 0x21	; 33
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	00 e0       	ldi	r16, 0x00	; 0
     290:	0c bf       	out	0x3c, r16	; 60

00000292 <__do_copy_data>:
     292:	14 e0       	ldi	r17, 0x04	; 4
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	e8 ec       	ldi	r30, 0xC8	; 200
     29a:	f1 e4       	ldi	r31, 0x41	; 65
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	0b bf       	out	0x3b, r16	; 59
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__do_copy_data+0x14>
     2a2:	07 90       	elpm	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	a6 30       	cpi	r26, 0x06	; 6
     2a8:	b1 07       	cpc	r27, r17
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__do_copy_data+0x10>

000002ac <__do_clear_bss>:
     2ac:	28 e0       	ldi	r18, 0x08	; 8
     2ae:	a6 e0       	ldi	r26, 0x06	; 6
     2b0:	b4 e0       	ldi	r27, 0x04	; 4
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	a9 39       	cpi	r26, 0x99	; 153
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>

000002bc <__do_global_ctors>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	c0 e4       	ldi	r28, 0x40	; 64
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <__do_global_ctors+0x16>
     2c6:	21 97       	sbiw	r28, 0x01	; 1
     2c8:	01 09       	sbc	r16, r1
     2ca:	80 2f       	mov	r24, r16
     2cc:	fe 01       	movw	r30, r28
     2ce:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__tablejump2__>
     2d2:	c9 33       	cpi	r28, 0x39	; 57
     2d4:	d1 07       	cpc	r29, r17
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 07       	cpc	r16, r24
     2da:	a9 f7       	brne	.-22     	; 0x2c6 <__do_global_ctors+0xa>
     2dc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <main>
     2e0:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__do_global_dtors>

000002e4 <__bad_interrupt>:
     2e4:	8d ce       	rjmp	.-742    	; 0x0 <__vectors>

000002e6 <_Z20countEdgesAnemometerv>:
// FUNCTIONS***********************************************************

// ISR*****************************************************************
void countEdgesAnemometer()
{
	Serial.println(numberOfEdgesAnemometer);
     2e6:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <numberOfEdgesAnemometer>
     2ea:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <numberOfEdgesAnemometer+0x1>
     2ee:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <numberOfEdgesAnemometer+0x2>
     2f2:	70 91 0d 04 	lds	r23, 0x040D	; 0x80040d <numberOfEdgesAnemometer+0x3>
     2f6:	2a e0       	ldi	r18, 0x0A	; 10
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	86 e9       	ldi	r24, 0x96	; 150
     2fc:	95 e0       	ldi	r25, 0x05	; 5
     2fe:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_ZN5Print7printlnEmi>
	numberOfEdgesAnemometer++;
     302:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <numberOfEdgesAnemometer>
     306:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <numberOfEdgesAnemometer+0x1>
     30a:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <numberOfEdgesAnemometer+0x2>
     30e:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <numberOfEdgesAnemometer+0x3>
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	a1 1d       	adc	r26, r1
     316:	b1 1d       	adc	r27, r1
     318:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <numberOfEdgesAnemometer>
     31c:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <numberOfEdgesAnemometer+0x1>
     320:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <numberOfEdgesAnemometer+0x2>
     324:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <numberOfEdgesAnemometer+0x3>
     328:	08 95       	ret

0000032a <_Z20countEdgesOmbrometerv>:
} //countEdges

void countEdgesOmbrometer()
{
	Serial.println(numberOfEdgesOmbrometer);
     32a:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <__data_end>
     32e:	50 91 07 04 	lds	r21, 0x0407	; 0x800407 <__data_end+0x1>
     332:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__data_end+0x2>
     336:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__data_end+0x3>
     33a:	2a e0       	ldi	r18, 0x0A	; 10
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	86 e9       	ldi	r24, 0x96	; 150
     340:	95 e0       	ldi	r25, 0x05	; 5
     342:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_ZN5Print7printlnEmi>
	numberOfEdgesOmbrometer++;
     346:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <__data_end>
     34a:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <__data_end+0x1>
     34e:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <__data_end+0x2>
     352:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <__data_end+0x3>
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	a1 1d       	adc	r26, r1
     35a:	b1 1d       	adc	r27, r1
     35c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__data_end>
     360:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <__data_end+0x1>
     364:	a0 93 08 04 	sts	0x0408, r26	; 0x800408 <__data_end+0x2>
     368:	b0 93 09 04 	sts	0x0409, r27	; 0x800409 <__data_end+0x3>
     36c:	08 95       	ret

0000036e <loop>:
	beginAnemometer(2);
	beginOmbrometer(3);
} //setup

void loop()
{
     36e:	08 95       	ret

00000370 <_Z15beginAnemometerh>:
} //loop

// FUNCTIONS***********************************************************
void beginAnemometer(uint8_t digitalPinNumber)
{
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesAnemometer, RISING);
     370:	82 30       	cpi	r24, 0x02	; 2
     372:	51 f0       	breq	.+20     	; 0x388 <_Z15beginAnemometerh+0x18>
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	51 f0       	breq	.+20     	; 0x38c <_Z15beginAnemometerh+0x1c>
     378:	9e ee       	ldi	r25, 0xEE	; 238
     37a:	98 0f       	add	r25, r24
     37c:	94 30       	cpi	r25, 0x04	; 4
     37e:	40 f4       	brcc	.+16     	; 0x390 <_Z15beginAnemometerh+0x20>
     380:	97 e1       	ldi	r25, 0x17	; 23
     382:	98 1b       	sub	r25, r24
     384:	89 2f       	mov	r24, r25
     386:	05 c0       	rjmp	.+10     	; 0x392 <_Z15beginAnemometerh+0x22>
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	03 c0       	rjmp	.+6      	; 0x392 <_Z15beginAnemometerh+0x22>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	01 c0       	rjmp	.+2      	; 0x392 <_Z15beginAnemometerh+0x22>
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	43 e0       	ldi	r20, 0x03	; 3
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	63 e7       	ldi	r22, 0x73	; 115
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <attachInterrupt>

0000039e <_Z15beginOmbrometerh>:
} //beginAnemometer

void beginOmbrometer(uint8_t digitalPinNumber)
{
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesOmbrometer, RISING);
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	51 f0       	breq	.+20     	; 0x3b6 <_Z15beginOmbrometerh+0x18>
     3a2:	83 30       	cpi	r24, 0x03	; 3
     3a4:	51 f0       	breq	.+20     	; 0x3ba <_Z15beginOmbrometerh+0x1c>
     3a6:	9e ee       	ldi	r25, 0xEE	; 238
     3a8:	98 0f       	add	r25, r24
     3aa:	94 30       	cpi	r25, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <_Z15beginOmbrometerh+0x20>
     3ae:	97 e1       	ldi	r25, 0x17	; 23
     3b0:	98 1b       	sub	r25, r24
     3b2:	89 2f       	mov	r24, r25
     3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <_Z15beginOmbrometerh+0x22>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <_Z15beginOmbrometerh+0x22>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <_Z15beginOmbrometerh+0x22>
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	43 e0       	ldi	r20, 0x03	; 3
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	65 e9       	ldi	r22, 0x95	; 149
     3c6:	71 e0       	ldi	r23, 0x01	; 1
     3c8:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <attachInterrupt>

000003cc <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3cc:	26 e0       	ldi	r18, 0x06	; 6
     3ce:	40 e8       	ldi	r20, 0x80	; 128
     3d0:	55 e2       	ldi	r21, 0x25	; 37
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	86 e9       	ldi	r24, 0x96	; 150
     3d8:	95 e0       	ldi	r25, 0x05	; 5
     3da:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN14HardwareSerial5beginEmh>

void setup()
{
	Serial.begin(9600);
	while (!Serial);
	sd.initSdcardBreakout();
     3de:	8e e3       	ldi	r24, 0x3E	; 62
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	71 d0       	rcall	.+226    	; 0x4c6 <_ZN14SdcardBreakout18initSdcardBreakoutEv>
	realtimeclock.initRTC();
     3e4:	81 e2       	ldi	r24, 0x21	; 33
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	36 d0       	rcall	.+108    	; 0x456 <_ZN13RealTimeClock7initRTCEv>
	thps.initTempHumidPressSensor();
     3ea:	8e e2       	ldi	r24, 0x2E	; 46
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>
	beginAnemometer(2);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
	beginOmbrometer(3);
     3f4:	bd df       	rcall	.-134    	; 0x370 <_Z15beginAnemometerh>
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	d2 cf       	rjmp	.-92     	; 0x39e <_Z15beginOmbrometerh>

000003fa <_GLOBAL__sub_I_sd>:
void beginAnemometer(uint8_t digitalPinNumber);
void beginOmbrometer(uint8_t digitalPinNumber);
void countEdgesAnemometer();
void countEdgesOmbrometer();

SdcardBreakout sd;
     3fa:	8e e3       	ldi	r24, 0x3E	; 62
     3fc:	94 e0       	ldi	r25, 0x04	; 4
     3fe:	61 d0       	rcall	.+194    	; 0x4c2 <_ZN14SdcardBreakoutC1Ev>
TempHumidPressSensor thps;
     400:	8e e2       	ldi	r24, 0x2E	; 46
     402:	94 e0       	ldi	r25, 0x04	; 4
     404:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN20TempHumidPressSensorC1Ev>
SensorData sensordata;
RealTimeClock realtimeclock;
     408:	81 e2       	ldi	r24, 0x21	; 33
     40a:	94 e0       	ldi	r25, 0x04	; 4
     40c:	1e d0       	rcall	.+60     	; 0x44a <_ZN13RealTimeClockC1Ev>
#ifndef __REALTIMECLOCK_H__
#define __REALTIMECLOCK_H__

struct TimeStamp
     40e:	6b ed       	ldi	r22, 0xDB	; 219
     410:	73 e0       	ldi	r23, 0x03	; 3
     412:	84 e1       	ldi	r24, 0x14	; 20
     414:	94 e0       	ldi	r25, 0x04	; 4
     416:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN6StringC1EPKc>
TimeStamp ts;

String myData = "datalog.txt";
     41a:	6a e1       	ldi	r22, 0x1A	; 26
     41c:	72 e0       	ldi	r23, 0x02	; 2
     41e:	8e e0       	ldi	r24, 0x0E	; 14
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	0c 94 85 11 	jmp	0x230a	; 0x230a <_ZN6StringC1EPKc>

00000426 <_GLOBAL__sub_D_sd>:
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	94 e0       	ldi	r25, 0x04	; 4
     42a:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN6StringD1Ev>
     42e:	84 e1       	ldi	r24, 0x14	; 20
     430:	94 e0       	ldi	r25, 0x04	; 4
     432:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN6StringD1Ev>
void countEdgesOmbrometer();

SdcardBreakout sd;
TempHumidPressSensor thps;
SensorData sensordata;
RealTimeClock realtimeclock;
     436:	81 e2       	ldi	r24, 0x21	; 33
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	0b d0       	rcall	.+22     	; 0x452 <_ZN13RealTimeClockD1Ev>
void beginOmbrometer(uint8_t digitalPinNumber);
void countEdgesAnemometer();
void countEdgesOmbrometer();

SdcardBreakout sd;
TempHumidPressSensor thps;
     43c:	8e e2       	ldi	r24, 0x2E	; 46
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN20TempHumidPressSensorD1Ev>
void beginAnemometer(uint8_t digitalPinNumber);
void beginOmbrometer(uint8_t digitalPinNumber);
void countEdgesAnemometer();
void countEdgesOmbrometer();

SdcardBreakout sd;
     444:	8e e3       	ldi	r24, 0x3E	; 62
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	3d c0       	rjmp	.+122    	; 0x4c4 <_ZN14SdcardBreakoutD1Ev>

0000044a <_ZN13RealTimeClockC1Ev>:
#include "RealTimeClock.h"

RTC_DS3231 rtc;

// constructor
RealTimeClock::RealTimeClock()
     44a:	6b ed       	ldi	r22, 0xDB	; 219
     44c:	73 e0       	ldi	r23, 0x03	; 3
     44e:	0c 94 85 11 	jmp	0x230a	; 0x230a <_ZN6StringC1EPKc>

00000452 <_ZN13RealTimeClockD1Ev>:
{
} //constructor

// destructor
RealTimeClock::~RealTimeClock()
     452:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <_ZN6StringD1Ev>

00000456 <_ZN13RealTimeClock7initRTCEv>:
{
} //~destructor

void RealTimeClock::initRTC()
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <_ZN13RealTimeClock7initRTCEv+0x6>
     45c:	00 d0       	rcall	.+0      	; 0x45e <_ZN13RealTimeClock7initRTCEv+0x8>
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
	bool status = rtc.begin();
     462:	8f e3       	ldi	r24, 0x3F	; 63
     464:	94 e0       	ldi	r25, 0x04	; 4
     466:	8c d3       	rcall	.+1816   	; 0xb80 <_ZN10RTC_DS32315beginEv>
	if (!status)
     468:	81 11       	cpse	r24, r1
     46a:	07 c0       	rjmp	.+14     	; 0x47a <_ZN13RealTimeClock7initRTCEv+0x24>
	{
		Serial.println("Error: Couldn't find RTC, please ensure that the rtc is powered!");
     46c:	66 e2       	ldi	r22, 0x26	; 38
     46e:	72 e0       	ldi	r23, 0x02	; 2
     470:	86 e9       	ldi	r24, 0x96	; 150
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN5Print7printlnEPKc>
     478:	ff cf       	rjmp	.-2      	; 0x478 <_ZN13RealTimeClock7initRTCEv+0x22>
		while (1);
	}
	else if (status)
	{
		Serial.println("RTC\tsuccessfully initialized!");
     47a:	67 e6       	ldi	r22, 0x67	; 103
     47c:	72 e0       	ldi	r23, 0x02	; 2
     47e:	86 e9       	ldi	r24, 0x96	; 150
     480:	95 e0       	ldi	r25, 0x05	; 5
     482:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN5Print7printlnEPKc>
	}
	
	if (rtc.lostPower())
     486:	8f e3       	ldi	r24, 0x3F	; 63
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	1b d4       	rcall	.+2102   	; 0xcc2 <_ZN10RTC_DS32319lostPowerEv>
     48c:	88 23       	and	r24, r24
     48e:	81 f0       	breq	.+32     	; 0x4b0 <_ZN13RealTimeClock7initRTCEv+0x5a>
	{
		Serial.println("RTC lost power, the time will be set!");
     490:	65 e8       	ldi	r22, 0x85	; 133
     492:	72 e0       	ldi	r23, 0x02	; 2
     494:	86 e9       	ldi	r24, 0x96	; 150
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this file was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     49c:	48 e4       	ldi	r20, 0x48	; 72
     49e:	51 e0       	ldi	r21, 0x01	; 1
     4a0:	6c e3       	ldi	r22, 0x3C	; 60
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	ce 01       	movw	r24, r28
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	f4 d2       	rcall	.+1512   	; 0xa92 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	84 d3       	rcall	.+1800   	; 0xbb8 <_ZN10RTC_DS32316adjustERK8DateTime>
	}
} //initRTC
     4b0:	26 96       	adiw	r28, 0x06	; 6
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <_ZN14SdcardBreakoutC1Ev>:
	} 
	else
	{
		Serial.println(filename + " doesn't exist");
	}
     4c2:	08 95       	ret

000004c4 <_ZN14SdcardBreakoutD1Ev>:
     4c4:	08 95       	ret

000004c6 <_ZN14SdcardBreakout18initSdcardBreakoutEv>:
     4c6:	65 e3       	ldi	r22, 0x35	; 53
     4c8:	8c e3       	ldi	r24, 0x3C	; 60
     4ca:	96 e0       	ldi	r25, 0x06	; 6
     4cc:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN5SDLib7SDClass5beginEh>
     4d0:	81 11       	cpse	r24, r1
     4d2:	0d c0       	rjmp	.+26     	; 0x4ee <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x28>
     4d4:	6b ea       	ldi	r22, 0xAB	; 171
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	86 e9       	ldi	r24, 0x96	; 150
     4da:	95 e0       	ldi	r25, 0x05	; 5
     4dc:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN5Print7printlnEPKc>
     4e0:	65 e3       	ldi	r22, 0x35	; 53
     4e2:	8c e3       	ldi	r24, 0x3C	; 60
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN5SDLib7SDClass5beginEh>
     4ea:	88 23       	and	r24, r24
     4ec:	31 f0       	breq	.+12     	; 0x4fa <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x34>
     4ee:	6a ec       	ldi	r22, 0xCA	; 202
     4f0:	72 e0       	ldi	r23, 0x02	; 2
     4f2:	86 e9       	ldi	r24, 0x96	; 150
     4f4:	95 e0       	ldi	r25, 0x05	; 5
     4f6:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <_ZN5Print7printlnEPKc>
     4fa:	64 ef       	ldi	r22, 0xF4	; 244
     4fc:	71 e0       	ldi	r23, 0x01	; 1
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <delay>
     506:	ec cf       	rjmp	.-40     	; 0x4e0 <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x1a>

00000508 <_GLOBAL__sub_I_datalog>:
#include <SPI.h>
#include <SD.h>
#include "SdcardBreakout.h"

File datalog;
     508:	80 e4       	ldi	r24, 0x40	; 64
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	0c 94 18 12 	jmp	0x2430	; 0x2430 <_ZN5SDLib4FileC1Ev>

00000510 <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
     510:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
     514:	22 23       	and	r18, r18
     516:	99 f0       	breq	.+38     	; 0x53e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     518:	4f b7       	in	r20, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
     520:	21 30       	cpi	r18, 0x01	; 1
     522:	59 f4       	brne	.+22     	; 0x53a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     524:	2d b3       	in	r18, 0x1d	; 29
     526:	20 93 91 08 	sts	0x0891, r18	; 0x800891 <_ZN8SPIClass13interruptSaveE>
     52a:	3d b3       	in	r19, 0x1d	; 29
     52c:	20 91 92 08 	lds	r18, 0x0892	; 0x800892 <_ZN8SPIClass13interruptMaskE>
     530:	20 95       	com	r18
     532:	23 23       	and	r18, r19
     534:	2d bb       	out	0x1d, r18	; 29
     536:	4f bf       	out	0x3f, r20	; 63
     538:	02 c0       	rjmp	.+4      	; 0x53e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     53a:	40 93 91 08 	sts	0x0891, r20	; 0x800891 <_ZN8SPIClass13interruptSaveE>
     53e:	8c bd       	out	0x2c, r24	; 44
     540:	9d bd       	out	0x2d, r25	; 45
     542:	08 95       	ret

00000544 <_ZN8SPIClass14endTransactionEv>:
     544:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
     548:	88 23       	and	r24, r24
     54a:	61 f0       	breq	.+24     	; 0x564 <_ZN8SPIClass14endTransactionEv+0x20>
     54c:	9f b7       	in	r25, 0x3f	; 63
     54e:	f8 94       	cli
     550:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
     554:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <_ZN8SPIClass13interruptSaveE>
     558:	21 30       	cpi	r18, 0x01	; 1
     55a:	19 f4       	brne	.+6      	; 0x562 <_ZN8SPIClass14endTransactionEv+0x1e>
     55c:	8d bb       	out	0x1d, r24	; 29
     55e:	9f bf       	out	0x3f, r25	; 63
     560:	08 95       	ret
     562:	8f bf       	out	0x3f, r24	; 63
     564:	08 95       	ret

00000566 <_ZN15Adafruit_BME280C1Ev>:
     566:	fc 01       	movw	r30, r24
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	83 87       	std	Z+11, r24	; 0x0b
     56c:	84 87       	std	Z+12, r24	; 0x0c
     56e:	85 87       	std	Z+13, r24	; 0x0d
     570:	86 87       	std	Z+14, r24	; 0x0e
     572:	08 95       	ret

00000574 <_ZN15Adafruit_BME2807spixferEh>:
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	fc 01       	movw	r30, r24
     586:	26 85       	ldd	r18, Z+14	; 0x0e
     588:	2f 3f       	cpi	r18, 0xFF	; 255
     58a:	39 f4       	brne	.+14     	; 0x59a <_ZN15Adafruit_BME2807spixferEh+0x26>
     58c:	6e bd       	out	0x2e, r22	; 46
     58e:	00 00       	nop
     590:	0d b4       	in	r0, 0x2d	; 45
     592:	07 fe       	sbrs	r0, 7
     594:	fd cf       	rjmp	.-6      	; 0x590 <_ZN15Adafruit_BME2807spixferEh+0x1c>
     596:	8e b5       	in	r24, 0x2e	; 46
     598:	2b c0       	rjmp	.+86     	; 0x5f0 <_ZN15Adafruit_BME2807spixferEh+0x7c>
     59a:	d6 2f       	mov	r29, r22
     59c:	8c 01       	movw	r16, r24
     59e:	87 e0       	ldi	r24, 0x07	; 7
     5a0:	e8 2e       	mov	r14, r24
     5a2:	f1 2c       	mov	r15, r1
     5a4:	c0 e0       	ldi	r28, 0x00	; 0
     5a6:	cc 24       	eor	r12, r12
     5a8:	c3 94       	inc	r12
     5aa:	d1 2c       	mov	r13, r1
     5ac:	cc 0f       	add	r28, r28
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	f8 01       	movw	r30, r16
     5b2:	86 85       	ldd	r24, Z+14	; 0x0e
     5b4:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     5b8:	b6 01       	movw	r22, r12
     5ba:	0e 2c       	mov	r0, r14
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <_ZN15Adafruit_BME2807spixferEh+0x4c>
     5be:	66 0f       	add	r22, r22
     5c0:	0a 94       	dec	r0
     5c2:	ea f7       	brpl	.-6      	; 0x5be <_ZN15Adafruit_BME2807spixferEh+0x4a>
     5c4:	6d 23       	and	r22, r29
     5c6:	f8 01       	movw	r30, r16
     5c8:	84 85       	ldd	r24, Z+12	; 0x0c
     5ca:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	f8 01       	movw	r30, r16
     5d2:	86 85       	ldd	r24, Z+14	; 0x0e
     5d4:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     5d8:	f8 01       	movw	r30, r16
     5da:	85 85       	ldd	r24, Z+13	; 0x0d
     5dc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <digitalRead>
     5e0:	89 2b       	or	r24, r25
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <_ZN15Adafruit_BME2807spixferEh+0x72>
     5e4:	c1 60       	ori	r28, 0x01	; 1
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	ef 1a       	sub	r14, r31
     5ea:	f1 08       	sbc	r15, r1
     5ec:	f8 f6       	brcc	.-66     	; 0x5ac <_ZN15Adafruit_BME2807spixferEh+0x38>
     5ee:	8c 2f       	mov	r24, r28
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	08 95       	ret

00000602 <_ZN15Adafruit_BME2806write8Ehh>:
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	ec 01       	movw	r28, r24
     60c:	16 2f       	mov	r17, r22
     60e:	04 2f       	mov	r16, r20
     610:	8b 85       	ldd	r24, Y+11	; 0x0b
     612:	8f 3f       	cpi	r24, 0xFF	; 255
     614:	f9 f4       	brne	.+62     	; 0x654 <_ZN15Adafruit_BME2806write8Ehh+0x52>
     616:	6a 81       	ldd	r22, Y+2	; 0x02
     618:	88 81       	ld	r24, Y
     61a:	99 81       	ldd	r25, Y+1	; 0x01
     61c:	e1 d6       	rcall	.+3522   	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>
     61e:	88 81       	ld	r24, Y
     620:	99 81       	ldd	r25, Y+1	; 0x01
     622:	dc 01       	movw	r26, r24
     624:	ed 91       	ld	r30, X+
     626:	fc 91       	ld	r31, X
     628:	01 90       	ld	r0, Z+
     62a:	f0 81       	ld	r31, Z
     62c:	e0 2d       	mov	r30, r0
     62e:	61 2f       	mov	r22, r17
     630:	19 95       	eicall
     632:	88 81       	ld	r24, Y
     634:	99 81       	ldd	r25, Y+1	; 0x01
     636:	dc 01       	movw	r26, r24
     638:	ed 91       	ld	r30, X+
     63a:	fc 91       	ld	r31, X
     63c:	01 90       	ld	r0, Z+
     63e:	f0 81       	ld	r31, Z
     640:	e0 2d       	mov	r30, r0
     642:	60 2f       	mov	r22, r16
     644:	19 95       	eicall
     646:	88 81       	ld	r24, Y
     648:	99 81       	ldd	r25, Y+1	; 0x01
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	45 c7       	rjmp	.+3722   	; 0x14de <_ZN7TwoWire15endTransmissionEv>
     654:	8e 85       	ldd	r24, Y+14	; 0x0e
     656:	8f 3f       	cpi	r24, 0xFF	; 255
     658:	19 f4       	brne	.+6      	; 0x660 <_ZN15Adafruit_BME2806write8Ehh+0x5e>
     65a:	82 e5       	ldi	r24, 0x52	; 82
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	58 df       	rcall	.-336    	; 0x510 <_ZN8SPIClass16beginTransactionE11SPISettings>
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	8b 85       	ldd	r24, Y+11	; 0x0b
     664:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     668:	61 2f       	mov	r22, r17
     66a:	6f 77       	andi	r22, 0x7F	; 127
     66c:	ce 01       	movw	r24, r28
     66e:	82 df       	rcall	.-252    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     670:	60 2f       	mov	r22, r16
     672:	ce 01       	movw	r24, r28
     674:	7f df       	rcall	.-258    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	8b 85       	ldd	r24, Y+11	; 0x0b
     67a:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     67e:	8e 85       	ldd	r24, Y+14	; 0x0e
     680:	8f 3f       	cpi	r24, 0xFF	; 255
     682:	29 f4       	brne	.+10     	; 0x68e <_ZN15Adafruit_BME2806write8Ehh+0x8c>
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	5b cf       	rjmp	.-330    	; 0x544 <_ZN8SPIClass14endTransactionEv>
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
     698:	cf 92       	push	r12
     69a:	ef 92       	push	r14
     69c:	0f 93       	push	r16
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ec 01       	movw	r28, r24
     6a4:	62 95       	swap	r22
     6a6:	66 0f       	add	r22, r22
     6a8:	66 0f       	add	r22, r22
     6aa:	60 7c       	andi	r22, 0xC0	; 192
     6ac:	47 70       	andi	r20, 0x07	; 7
     6ae:	27 70       	andi	r18, 0x07	; 7
     6b0:	82 2f       	mov	r24, r18
     6b2:	88 0f       	add	r24, r24
     6b4:	88 0f       	add	r24, r24
     6b6:	88 0f       	add	r24, r24
     6b8:	26 2f       	mov	r18, r22
     6ba:	24 2b       	or	r18, r20
     6bc:	28 2b       	or	r18, r24
     6be:	29 ab       	std	Y+49, r18	; 0x31
     6c0:	90 2f       	mov	r25, r16
     6c2:	92 95       	swap	r25
     6c4:	99 0f       	add	r25, r25
     6c6:	90 7e       	andi	r25, 0xE0	; 224
     6c8:	8a a9       	ldd	r24, Y+50	; 0x32
     6ca:	8f 71       	andi	r24, 0x1F	; 31
     6cc:	89 2b       	or	r24, r25
     6ce:	8a ab       	std	Y+50, r24	; 0x32
     6d0:	8e 2d       	mov	r24, r14
     6d2:	87 70       	andi	r24, 0x07	; 7
     6d4:	88 0f       	add	r24, r24
     6d6:	88 0f       	add	r24, r24
     6d8:	88 0f       	add	r24, r24
     6da:	98 a9       	ldd	r25, Y+48	; 0x30
     6dc:	29 2f       	mov	r18, r25
     6de:	20 7c       	andi	r18, 0xC0	; 192
     6e0:	9c 2d       	mov	r25, r12
     6e2:	97 70       	andi	r25, 0x07	; 7
     6e4:	e2 2e       	mov	r14, r18
     6e6:	e8 2a       	or	r14, r24
     6e8:	e9 2a       	or	r14, r25
     6ea:	e8 aa       	std	Y+48, r14	; 0x30
     6ec:	40 2f       	mov	r20, r16
     6ee:	47 70       	andi	r20, 0x07	; 7
     6f0:	62 ef       	ldi	r22, 0xF2	; 242
     6f2:	ce 01       	movw	r24, r28
     6f4:	86 df       	rcall	.-244    	; 0x602 <_ZN15Adafruit_BME2806write8Ehh>
     6f6:	98 a9       	ldd	r25, Y+48	; 0x30
     6f8:	49 2f       	mov	r20, r25
     6fa:	47 70       	andi	r20, 0x07	; 7
     6fc:	60 e2       	ldi	r22, 0x20	; 32
     6fe:	46 9f       	mul	r20, r22
     700:	90 01       	movw	r18, r0
     702:	11 24       	eor	r1, r1
     704:	89 2f       	mov	r24, r25
     706:	86 95       	lsr	r24
     708:	86 95       	lsr	r24
     70a:	86 95       	lsr	r24
     70c:	87 70       	andi	r24, 0x07	; 7
     70e:	68 e0       	ldi	r22, 0x08	; 8
     710:	86 9f       	mul	r24, r22
     712:	a0 01       	movw	r20, r0
     714:	11 24       	eor	r1, r1
     716:	42 2b       	or	r20, r18
     718:	53 2b       	or	r21, r19
     71a:	97 fb       	bst	r25, 7
     71c:	99 27       	eor	r25, r25
     71e:	90 f9       	bld	r25, 0
     720:	49 2b       	or	r20, r25
     722:	65 ef       	ldi	r22, 0xF5	; 245
     724:	ce 01       	movw	r24, r28
     726:	6d df       	rcall	.-294    	; 0x602 <_ZN15Adafruit_BME2806write8Ehh>
     728:	99 a9       	ldd	r25, Y+49	; 0x31
     72a:	49 2f       	mov	r20, r25
     72c:	47 70       	andi	r20, 0x07	; 7
     72e:	80 e2       	ldi	r24, 0x20	; 32
     730:	48 9f       	mul	r20, r24
     732:	90 01       	movw	r18, r0
     734:	11 24       	eor	r1, r1
     736:	89 2f       	mov	r24, r25
     738:	86 95       	lsr	r24
     73a:	86 95       	lsr	r24
     73c:	86 95       	lsr	r24
     73e:	87 70       	andi	r24, 0x07	; 7
     740:	68 e0       	ldi	r22, 0x08	; 8
     742:	86 9f       	mul	r24, r22
     744:	a0 01       	movw	r20, r0
     746:	11 24       	eor	r1, r1
     748:	42 2b       	or	r20, r18
     74a:	53 2b       	or	r21, r19
     74c:	92 95       	swap	r25
     74e:	96 95       	lsr	r25
     750:	96 95       	lsr	r25
     752:	93 70       	andi	r25, 0x03	; 3
     754:	49 2b       	or	r20, r25
     756:	64 ef       	ldi	r22, 0xF4	; 244
     758:	ce 01       	movw	r24, r28
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	0f 91       	pop	r16
     760:	ef 90       	pop	r14
     762:	cf 90       	pop	r12
     764:	4e cf       	rjmp	.-356    	; 0x602 <_ZN15Adafruit_BME2806write8Ehh>

00000766 <_ZN15Adafruit_BME2805read8Eh>:
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	16 2f       	mov	r17, r22
     770:	8b 85       	ldd	r24, Y+11	; 0x0b
     772:	8f 3f       	cpi	r24, 0xFF	; 255
     774:	09 f5       	brne	.+66     	; 0x7b8 <_ZN15Adafruit_BME2805read8Eh+0x52>
     776:	6a 81       	ldd	r22, Y+2	; 0x02
     778:	88 81       	ld	r24, Y
     77a:	99 81       	ldd	r25, Y+1	; 0x01
     77c:	31 d6       	rcall	.+3170   	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>
     77e:	88 81       	ld	r24, Y
     780:	99 81       	ldd	r25, Y+1	; 0x01
     782:	dc 01       	movw	r26, r24
     784:	ed 91       	ld	r30, X+
     786:	fc 91       	ld	r31, X
     788:	01 90       	ld	r0, Z+
     78a:	f0 81       	ld	r31, Z
     78c:	e0 2d       	mov	r30, r0
     78e:	61 2f       	mov	r22, r17
     790:	19 95       	eicall
     792:	88 81       	ld	r24, Y
     794:	99 81       	ldd	r25, Y+1	; 0x01
     796:	a3 d6       	rcall	.+3398   	; 0x14de <_ZN7TwoWire15endTransmissionEv>
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	6a 81       	ldd	r22, Y+2	; 0x02
     79c:	88 81       	ld	r24, Y
     79e:	99 81       	ldd	r25, Y+1	; 0x01
     7a0:	9c d6       	rcall	.+3384   	; 0x14da <_ZN7TwoWire11requestFromEhh>
     7a2:	88 81       	ld	r24, Y
     7a4:	99 81       	ldd	r25, Y+1	; 0x01
     7a6:	dc 01       	movw	r26, r24
     7a8:	ed 91       	ld	r30, X+
     7aa:	fc 91       	ld	r31, X
     7ac:	02 84       	ldd	r0, Z+10	; 0x0a
     7ae:	f3 85       	ldd	r31, Z+11	; 0x0b
     7b0:	e0 2d       	mov	r30, r0
     7b2:	19 95       	eicall
     7b4:	18 2f       	mov	r17, r24
     7b6:	1a c0       	rjmp	.+52     	; 0x7ec <_ZN15Adafruit_BME2805read8Eh+0x86>
     7b8:	8e 85       	ldd	r24, Y+14	; 0x0e
     7ba:	8f 3f       	cpi	r24, 0xFF	; 255
     7bc:	19 f4       	brne	.+6      	; 0x7c4 <_ZN15Adafruit_BME2805read8Eh+0x5e>
     7be:	82 e5       	ldi	r24, 0x52	; 82
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	a6 de       	rcall	.-692    	; 0x510 <_ZN8SPIClass16beginTransactionE11SPISettings>
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     7c8:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     7cc:	61 2f       	mov	r22, r17
     7ce:	60 68       	ori	r22, 0x80	; 128
     7d0:	ce 01       	movw	r24, r28
     7d2:	d0 de       	rcall	.-608    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	ce 01       	movw	r24, r28
     7d8:	cd de       	rcall	.-614    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     7da:	18 2f       	mov	r17, r24
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e0:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     7e4:	8e 85       	ldd	r24, Y+14	; 0x0e
     7e6:	8f 3f       	cpi	r24, 0xFF	; 255
     7e8:	09 f4       	brne	.+2      	; 0x7ec <_ZN15Adafruit_BME2805read8Eh+0x86>
     7ea:	ac de       	rcall	.-680    	; 0x544 <_ZN8SPIClass14endTransactionEv>
     7ec:	81 2f       	mov	r24, r17
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	08 95       	ret

000007f6 <_ZN15Adafruit_BME2806read16Eh>:
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ec 01       	movw	r28, r24
     800:	16 2f       	mov	r17, r22
     802:	8b 85       	ldd	r24, Y+11	; 0x0b
     804:	8f 3f       	cpi	r24, 0xFF	; 255
     806:	81 f5       	brne	.+96     	; 0x868 <_ZN15Adafruit_BME2806read16Eh+0x72>
     808:	6a 81       	ldd	r22, Y+2	; 0x02
     80a:	88 81       	ld	r24, Y
     80c:	99 81       	ldd	r25, Y+1	; 0x01
     80e:	e8 d5       	rcall	.+3024   	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>
     810:	88 81       	ld	r24, Y
     812:	99 81       	ldd	r25, Y+1	; 0x01
     814:	dc 01       	movw	r26, r24
     816:	ed 91       	ld	r30, X+
     818:	fc 91       	ld	r31, X
     81a:	01 90       	ld	r0, Z+
     81c:	f0 81       	ld	r31, Z
     81e:	e0 2d       	mov	r30, r0
     820:	61 2f       	mov	r22, r17
     822:	19 95       	eicall
     824:	88 81       	ld	r24, Y
     826:	99 81       	ldd	r25, Y+1	; 0x01
     828:	5a d6       	rcall	.+3252   	; 0x14de <_ZN7TwoWire15endTransmissionEv>
     82a:	42 e0       	ldi	r20, 0x02	; 2
     82c:	6a 81       	ldd	r22, Y+2	; 0x02
     82e:	88 81       	ld	r24, Y
     830:	99 81       	ldd	r25, Y+1	; 0x01
     832:	53 d6       	rcall	.+3238   	; 0x14da <_ZN7TwoWire11requestFromEhh>
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	dc 01       	movw	r26, r24
     83a:	ed 91       	ld	r30, X+
     83c:	fc 91       	ld	r31, X
     83e:	02 84       	ldd	r0, Z+10	; 0x0a
     840:	f3 85       	ldd	r31, Z+11	; 0x0b
     842:	e0 2d       	mov	r30, r0
     844:	19 95       	eicall
     846:	18 2f       	mov	r17, r24
     848:	88 81       	ld	r24, Y
     84a:	99 81       	ldd	r25, Y+1	; 0x01
     84c:	dc 01       	movw	r26, r24
     84e:	ed 91       	ld	r30, X+
     850:	fc 91       	ld	r31, X
     852:	02 84       	ldd	r0, Z+10	; 0x0a
     854:	f3 85       	ldd	r31, Z+11	; 0x0b
     856:	e0 2d       	mov	r30, r0
     858:	19 95       	eicall
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	31 2f       	mov	r19, r17
     860:	89 01       	movw	r16, r18
     862:	08 2b       	or	r16, r24
     864:	19 2b       	or	r17, r25
     866:	23 c0       	rjmp	.+70     	; 0x8ae <_ZN15Adafruit_BME2806read16Eh+0xb8>
     868:	8e 85       	ldd	r24, Y+14	; 0x0e
     86a:	8f 3f       	cpi	r24, 0xFF	; 255
     86c:	19 f4       	brne	.+6      	; 0x874 <_ZN15Adafruit_BME2806read16Eh+0x7e>
     86e:	82 e5       	ldi	r24, 0x52	; 82
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	4e de       	rcall	.-868    	; 0x510 <_ZN8SPIClass16beginTransactionE11SPISettings>
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	8b 85       	ldd	r24, Y+11	; 0x0b
     878:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     87c:	61 2f       	mov	r22, r17
     87e:	60 68       	ori	r22, 0x80	; 128
     880:	ce 01       	movw	r24, r28
     882:	78 de       	rcall	.-784    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	ce 01       	movw	r24, r28
     888:	75 de       	rcall	.-790    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     88a:	08 2f       	mov	r16, r24
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	ce 01       	movw	r24, r28
     890:	71 de       	rcall	.-798    	; 0x574 <_ZN15Adafruit_BME2807spixferEh>
     892:	20 2f       	mov	r18, r16
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	32 2f       	mov	r19, r18
     898:	22 27       	eor	r18, r18
     89a:	89 01       	movw	r16, r18
     89c:	08 2b       	or	r16, r24
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a2:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     8a6:	8e 85       	ldd	r24, Y+14	; 0x0e
     8a8:	8f 3f       	cpi	r24, 0xFF	; 255
     8aa:	09 f4       	brne	.+2      	; 0x8ae <_ZN15Adafruit_BME2806read16Eh+0xb8>
     8ac:	4b de       	rcall	.-874    	; 0x544 <_ZN8SPIClass14endTransactionEv>
     8ae:	c8 01       	movw	r24, r16
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <_ZN15Adafruit_BME2809read16_LEEh>:
     8ba:	9d df       	rcall	.-198    	; 0x7f6 <_ZN15Adafruit_BME2806read16Eh>
     8bc:	98 27       	eor	r25, r24
     8be:	89 27       	eor	r24, r25
     8c0:	98 27       	eor	r25, r24
     8c2:	08 95       	ret

000008c4 <_ZN15Adafruit_BME28016readCoefficientsEv>:
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	68 e8       	ldi	r22, 0x88	; 136
     8ce:	f5 df       	rcall	.-22     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     8d0:	98 8b       	std	Y+16, r25	; 0x10
     8d2:	8f 87       	std	Y+15, r24	; 0x0f
     8d4:	6a e8       	ldi	r22, 0x8A	; 138
     8d6:	ce 01       	movw	r24, r28
     8d8:	f0 df       	rcall	.-32     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     8da:	9a 8b       	std	Y+18, r25	; 0x12
     8dc:	89 8b       	std	Y+17, r24	; 0x11
     8de:	6c e8       	ldi	r22, 0x8C	; 140
     8e0:	ce 01       	movw	r24, r28
     8e2:	eb df       	rcall	.-42     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     8e4:	9c 8b       	std	Y+20, r25	; 0x14
     8e6:	8b 8b       	std	Y+19, r24	; 0x13
     8e8:	6e e8       	ldi	r22, 0x8E	; 142
     8ea:	ce 01       	movw	r24, r28
     8ec:	e6 df       	rcall	.-52     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     8ee:	9e 8b       	std	Y+22, r25	; 0x16
     8f0:	8d 8b       	std	Y+21, r24	; 0x15
     8f2:	60 e9       	ldi	r22, 0x90	; 144
     8f4:	ce 01       	movw	r24, r28
     8f6:	e1 df       	rcall	.-62     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     8f8:	98 8f       	std	Y+24, r25	; 0x18
     8fa:	8f 8b       	std	Y+23, r24	; 0x17
     8fc:	62 e9       	ldi	r22, 0x92	; 146
     8fe:	ce 01       	movw	r24, r28
     900:	dc df       	rcall	.-72     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     902:	9a 8f       	std	Y+26, r25	; 0x1a
     904:	89 8f       	std	Y+25, r24	; 0x19
     906:	64 e9       	ldi	r22, 0x94	; 148
     908:	ce 01       	movw	r24, r28
     90a:	d7 df       	rcall	.-82     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     90c:	9c 8f       	std	Y+28, r25	; 0x1c
     90e:	8b 8f       	std	Y+27, r24	; 0x1b
     910:	66 e9       	ldi	r22, 0x96	; 150
     912:	ce 01       	movw	r24, r28
     914:	d2 df       	rcall	.-92     	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     916:	9e 8f       	std	Y+30, r25	; 0x1e
     918:	8d 8f       	std	Y+29, r24	; 0x1d
     91a:	68 e9       	ldi	r22, 0x98	; 152
     91c:	ce 01       	movw	r24, r28
     91e:	cd df       	rcall	.-102    	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     920:	98 a3       	std	Y+32, r25	; 0x20
     922:	8f 8f       	std	Y+31, r24	; 0x1f
     924:	6a e9       	ldi	r22, 0x9A	; 154
     926:	ce 01       	movw	r24, r28
     928:	c8 df       	rcall	.-112    	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     92a:	9a a3       	std	Y+34, r25	; 0x22
     92c:	89 a3       	std	Y+33, r24	; 0x21
     92e:	6c e9       	ldi	r22, 0x9C	; 156
     930:	ce 01       	movw	r24, r28
     932:	c3 df       	rcall	.-122    	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     934:	9c a3       	std	Y+36, r25	; 0x24
     936:	8b a3       	std	Y+35, r24	; 0x23
     938:	6e e9       	ldi	r22, 0x9E	; 158
     93a:	ce 01       	movw	r24, r28
     93c:	be df       	rcall	.-132    	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     93e:	9e a3       	std	Y+38, r25	; 0x26
     940:	8d a3       	std	Y+37, r24	; 0x25
     942:	61 ea       	ldi	r22, 0xA1	; 161
     944:	ce 01       	movw	r24, r28
     946:	0f df       	rcall	.-482    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     948:	8f a3       	std	Y+39, r24	; 0x27
     94a:	61 ee       	ldi	r22, 0xE1	; 225
     94c:	ce 01       	movw	r24, r28
     94e:	b5 df       	rcall	.-150    	; 0x8ba <_ZN15Adafruit_BME2809read16_LEEh>
     950:	99 a7       	std	Y+41, r25	; 0x29
     952:	88 a7       	std	Y+40, r24	; 0x28
     954:	63 ee       	ldi	r22, 0xE3	; 227
     956:	ce 01       	movw	r24, r28
     958:	06 df       	rcall	.-500    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     95a:	8a a7       	std	Y+42, r24	; 0x2a
     95c:	64 ee       	ldi	r22, 0xE4	; 228
     95e:	ce 01       	movw	r24, r28
     960:	02 df       	rcall	.-508    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     962:	18 2f       	mov	r17, r24
     964:	65 ee       	ldi	r22, 0xE5	; 229
     966:	ce 01       	movw	r24, r28
     968:	fe de       	rcall	.-516    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     96a:	90 e1       	ldi	r25, 0x10	; 16
     96c:	19 9f       	mul	r17, r25
     96e:	90 01       	movw	r18, r0
     970:	11 24       	eor	r1, r1
     972:	8f 70       	andi	r24, 0x0F	; 15
     974:	28 2b       	or	r18, r24
     976:	3c a7       	std	Y+44, r19	; 0x2c
     978:	2b a7       	std	Y+43, r18	; 0x2b
     97a:	66 ee       	ldi	r22, 0xE6	; 230
     97c:	ce 01       	movw	r24, r28
     97e:	f3 de       	rcall	.-538    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     980:	18 2f       	mov	r17, r24
     982:	65 ee       	ldi	r22, 0xE5	; 229
     984:	ce 01       	movw	r24, r28
     986:	ef de       	rcall	.-546    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     988:	90 e1       	ldi	r25, 0x10	; 16
     98a:	19 9f       	mul	r17, r25
     98c:	90 01       	movw	r18, r0
     98e:	11 24       	eor	r1, r1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	44 e0       	ldi	r20, 0x04	; 4
     994:	95 95       	asr	r25
     996:	87 95       	ror	r24
     998:	4a 95       	dec	r20
     99a:	e1 f7       	brne	.-8      	; 0x994 <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
     99c:	82 2b       	or	r24, r18
     99e:	93 2b       	or	r25, r19
     9a0:	9e a7       	std	Y+46, r25	; 0x2e
     9a2:	8d a7       	std	Y+45, r24	; 0x2d
     9a4:	67 ee       	ldi	r22, 0xE7	; 231
     9a6:	ce 01       	movw	r24, r28
     9a8:	de de       	rcall	.-580    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     9aa:	8f a7       	std	Y+47, r24	; 0x2f
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	08 95       	ret

000009b4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
     9b4:	63 ef       	ldi	r22, 0xF3	; 243
     9b6:	d7 de       	rcall	.-594    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     9b8:	81 70       	andi	r24, 0x01	; 1
     9ba:	08 95       	ret

000009bc <_ZN15Adafruit_BME2804initEv>:
     9bc:	cf 92       	push	r12
     9be:	ef 92       	push	r14
     9c0:	0f 93       	push	r16
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ec 01       	movw	r28, r24
     9c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ca:	8f 3f       	cpi	r24, 0xFF	; 255
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <_ZN15Adafruit_BME2804initEv+0x1a>
     9ce:	88 81       	ld	r24, Y
     9d0:	99 81       	ldd	r25, Y+1	; 0x01
     9d2:	f7 d4       	rcall	.+2542   	; 0x13c2 <_ZN7TwoWire5beginEv>
     9d4:	18 c0       	rjmp	.+48     	; 0xa06 <_ZN15Adafruit_BME2804initEv+0x4a>
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e0:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>
     9e4:	8e 85       	ldd	r24, Y+14	; 0x0e
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <_ZN15Adafruit_BME2804initEv+0x34>
     9ea:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN8SPIClass5beginEv>
     9ee:	0b c0       	rjmp	.+22     	; 0xa06 <_ZN15Adafruit_BME2804initEv+0x4a>
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9fa:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	8d 85       	ldd	r24, Y+13	; 0x0d
     a02:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>
     a06:	60 ed       	ldi	r22, 0xD0	; 208
     a08:	ce 01       	movw	r24, r28
     a0a:	ad de       	rcall	.-678    	; 0x766 <_ZN15Adafruit_BME2805read8Eh>
     a0c:	80 36       	cpi	r24, 0x60	; 96
     a0e:	29 f5       	brne	.+74     	; 0xa5a <_ZN15Adafruit_BME2804initEv+0x9e>
     a10:	46 eb       	ldi	r20, 0xB6	; 182
     a12:	60 ee       	ldi	r22, 0xE0	; 224
     a14:	ce 01       	movw	r24, r28
     a16:	f5 dd       	rcall	.-1046   	; 0x602 <_ZN15Adafruit_BME2806write8Ehh>
     a18:	6c e2       	ldi	r22, 0x2C	; 44
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <delay>
     a24:	ce 01       	movw	r24, r28
     a26:	c6 df       	rcall	.-116    	; 0x9b4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
     a28:	88 23       	and	r24, r24
     a2a:	29 f0       	breq	.+10     	; 0xa36 <_ZN15Adafruit_BME2804initEv+0x7a>
     a2c:	64 e6       	ldi	r22, 0x64	; 100
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	f5 cf       	rjmp	.-22     	; 0xa20 <_ZN15Adafruit_BME2804initEv+0x64>
     a36:	ce 01       	movw	r24, r28
     a38:	45 df       	rcall	.-374    	; 0x8c4 <_ZN15Adafruit_BME28016readCoefficientsEv>
     a3a:	c1 2c       	mov	r12, r1
     a3c:	e1 2c       	mov	r14, r1
     a3e:	05 e0       	ldi	r16, 0x05	; 5
     a40:	25 e0       	ldi	r18, 0x05	; 5
     a42:	45 e0       	ldi	r20, 0x05	; 5
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	ce 01       	movw	r24, r28
     a48:	27 de       	rcall	.-946    	; 0x698 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
     a4a:	64 e6       	ldi	r22, 0x64	; 100
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <delay>
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <_ZN15Adafruit_BME2804initEv+0xa0>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	0f 91       	pop	r16
     a62:	ef 90       	pop	r14
     a64:	cf 90       	pop	r12
     a66:	08 95       	ret

00000a68 <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
     a68:	27 e7       	ldi	r18, 0x77	; 119
     a6a:	fc 01       	movw	r30, r24
     a6c:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
     a6e:	2d e0       	ldi	r18, 0x0D	; 13
     a70:	35 e0       	ldi	r19, 0x05	; 5
     a72:	31 83       	std	Z+1, r19	; 0x01
     a74:	20 83       	st	Z, r18
	return init();
     a76:	a2 cf       	rjmp	.-188    	; 0x9bc <_ZN15Adafruit_BME2804initEv>

00000a78 <_ZL6conv2dPKc>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     a78:	fc 01       	movw	r30, r24
     a7a:	90 81       	ld	r25, Z
     a7c:	90 53       	subi	r25, 0x30	; 48
     a7e:	9a 30       	cpi	r25, 0x0A	; 10
     a80:	08 f0       	brcs	.+2      	; 0xa84 <_ZL6conv2dPKc+0xc>
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	81 81       	ldd	r24, Z+1	; 0x01
     a86:	80 53       	subi	r24, 0x30	; 48
     a88:	2a e0       	ldi	r18, 0x0A	; 10
     a8a:	92 9f       	mul	r25, r18
     a8c:	80 0d       	add	r24, r0
     a8e:	11 24       	eor	r1, r1
     a90:	08 95       	ret

00000a92 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	2b 97       	sbiw	r28, 0x0b	; 11
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	8c 01       	movw	r16, r24
     ab0:	7a 01       	movw	r14, r20
     ab2:	4b e0       	ldi	r20, 0x0B	; 11
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	0e 94 ba 20 	call	0x4174	; 0x4174 <memcpy_P>
     abe:	ce 01       	movw	r24, r28
     ac0:	0a 96       	adiw	r24, 0x0a	; 10
     ac2:	da df       	rcall	.-76     	; 0xa78 <_ZL6conv2dPKc>
     ac4:	f8 01       	movw	r30, r16
     ac6:	80 83       	st	Z, r24
     ac8:	e9 81       	ldd	r30, Y+1	; 0x01
     aca:	8e 2f       	mov	r24, r30
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	e1 54       	subi	r30, 0x41	; 65
     ad2:	f1 09       	sbc	r31, r1
     ad4:	e3 31       	cpi	r30, 0x13	; 19
     ad6:	f1 05       	cpc	r31, r1
     ad8:	58 f5       	brcc	.+86     	; 0xb30 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9e>
     ada:	88 27       	eor	r24, r24
     adc:	ee 58       	subi	r30, 0x8E	; 142
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	8f 4f       	sbci	r24, 0xFF	; 255
     ae2:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__tablejump2__>
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	81 36       	cpi	r24, 0x61	; 97
     aea:	29 f0       	breq	.+10     	; 0xaf6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	8e 36       	cpi	r24, 0x6E	; 110
     af0:	21 f0       	breq	.+8      	; 0xafa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x68>
     af2:	87 e0       	ldi	r24, 0x07	; 7
     af4:	1b c0       	rjmp	.+54     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	19 c0       	rjmp	.+50     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	17 c0       	rjmp	.+46     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	15 c0       	rjmp	.+42     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	82 37       	cpi	r24, 0x72	; 114
     b06:	11 f0       	breq	.+4      	; 0xb0c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x7a>
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	10 c0       	rjmp	.+32     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	0e c0       	rjmp	.+28     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	82 37       	cpi	r24, 0x72	; 114
     b14:	11 f0       	breq	.+4      	; 0xb1a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x88>
     b16:	85 e0       	ldi	r24, 0x05	; 5
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b1e:	89 e0       	ldi	r24, 0x09	; 9
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b22:	8a e0       	ldi	r24, 0x0A	; 10
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b26:	8b e0       	ldi	r24, 0x0B	; 11
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     b2a:	8c e0       	ldi	r24, 0x0C	; 12
     b2c:	f8 01       	movw	r30, r16
     b2e:	81 83       	std	Z+1, r24	; 0x01
     b30:	ce 01       	movw	r24, r28
     b32:	05 96       	adiw	r24, 0x05	; 5
     b34:	a1 df       	rcall	.-190    	; 0xa78 <_ZL6conv2dPKc>
     b36:	f8 01       	movw	r30, r16
     b38:	82 83       	std	Z+2, r24	; 0x02
     b3a:	48 e0       	ldi	r20, 0x08	; 8
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	b7 01       	movw	r22, r14
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 ba 20 	call	0x4174	; 0x4174 <memcpy_P>
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	95 df       	rcall	.-214    	; 0xa78 <_ZL6conv2dPKc>
     b4e:	f8 01       	movw	r30, r16
     b50:	83 83       	std	Z+3, r24	; 0x03
     b52:	ce 01       	movw	r24, r28
     b54:	04 96       	adiw	r24, 0x04	; 4
     b56:	90 df       	rcall	.-224    	; 0xa78 <_ZL6conv2dPKc>
     b58:	f8 01       	movw	r30, r16
     b5a:	84 83       	std	Z+4, r24	; 0x04
     b5c:	ce 01       	movw	r24, r28
     b5e:	07 96       	adiw	r24, 0x07	; 7
     b60:	8b df       	rcall	.-234    	; 0xa78 <_ZL6conv2dPKc>
     b62:	f8 01       	movw	r30, r16
     b64:	85 83       	std	Z+5, r24	; 0x05
     b66:	2b 96       	adiw	r28, 0x0b	; 11
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <_ZN10RTC_DS32315beginEv>:
     b80:	8d e0       	ldi	r24, 0x0D	; 13
     b82:	95 e0       	ldi	r25, 0x05	; 5
     b84:	1e d4       	rcall	.+2108   	; 0x13c2 <_ZN7TwoWire5beginEv>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret

00000b8a <_ZL17read_i2c_registerhh.constprop.7>:
     b8a:	cf 93       	push	r28
     b8c:	c8 2f       	mov	r28, r24
     b8e:	68 e6       	ldi	r22, 0x68	; 104
     b90:	8d e0       	ldi	r24, 0x0D	; 13
     b92:	95 e0       	ldi	r25, 0x05	; 5
     b94:	25 d4       	rcall	.+2122   	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>
     b96:	6c 2f       	mov	r22, r28
     b98:	8d e0       	ldi	r24, 0x0D	; 13
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	d4 d3       	rcall	.+1960   	; 0x1346 <_ZN7TwoWire5writeEh>
     b9e:	8d e0       	ldi	r24, 0x0D	; 13
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	9d d4       	rcall	.+2362   	; 0x14de <_ZN7TwoWire15endTransmissionEv>
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	68 e6       	ldi	r22, 0x68	; 104
     ba8:	8d e0       	ldi	r24, 0x0D	; 13
     baa:	95 e0       	ldi	r25, 0x05	; 5
     bac:	96 d4       	rcall	.+2348   	; 0x14da <_ZN7TwoWire11requestFromEhh>
     bae:	8d e0       	ldi	r24, 0x0D	; 13
     bb0:	95 e0       	ldi	r25, 0x05	; 5
     bb2:	43 d3       	rcall	.+1670   	; 0x123a <_ZN7TwoWire4readEv>
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
     bc0:	68 e6       	ldi	r22, 0x68	; 104
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	8d e0       	ldi	r24, 0x0D	; 13
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	15 d4       	rcall	.+2090   	; 0x13f4 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	8d e0       	ldi	r24, 0x0D	; 13
     bce:	95 e0       	ldi	r25, 0x05	; 5
     bd0:	ba d3       	rcall	.+1908   	; 0x1346 <_ZN7TwoWire5writeEh>
     bd2:	f8 01       	movw	r30, r16
     bd4:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
     bd6:	ca e0       	ldi	r28, 0x0A	; 10
     bd8:	82 2f       	mov	r24, r18
     bda:	6c 2f       	mov	r22, r28
     bdc:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     be0:	68 2f       	mov	r22, r24
     be2:	66 0f       	add	r22, r22
     be4:	86 0f       	add	r24, r22
     be6:	88 0f       	add	r24, r24
     be8:	68 2f       	mov	r22, r24
     bea:	62 0f       	add	r22, r18
     bec:	8d e0       	ldi	r24, 0x0D	; 13
     bee:	95 e0       	ldi	r25, 0x05	; 5
     bf0:	aa d3       	rcall	.+1876   	; 0x1346 <_ZN7TwoWire5writeEh>
     bf2:	f8 01       	movw	r30, r16
     bf4:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
     bf6:	82 2f       	mov	r24, r18
     bf8:	6c 2f       	mov	r22, r28
     bfa:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     bfe:	68 2f       	mov	r22, r24
     c00:	66 0f       	add	r22, r22
     c02:	86 0f       	add	r24, r22
     c04:	88 0f       	add	r24, r24
     c06:	68 2f       	mov	r22, r24
     c08:	62 0f       	add	r22, r18
     c0a:	8d e0       	ldi	r24, 0x0D	; 13
     c0c:	95 e0       	ldi	r25, 0x05	; 5
     c0e:	9b d3       	rcall	.+1846   	; 0x1346 <_ZN7TwoWire5writeEh>
     c10:	f8 01       	movw	r30, r16
     c12:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
     c14:	82 2f       	mov	r24, r18
     c16:	6c 2f       	mov	r22, r28
     c18:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     c1c:	68 2f       	mov	r22, r24
     c1e:	66 0f       	add	r22, r22
     c20:	86 0f       	add	r24, r22
     c22:	88 0f       	add	r24, r24
     c24:	68 2f       	mov	r22, r24
     c26:	62 0f       	add	r22, r18
     c28:	8d e0       	ldi	r24, 0x0D	; 13
     c2a:	95 e0       	ldi	r25, 0x05	; 5
  Wire._I2C_WRITE(bin2bcd(0));
     c2c:	8c d3       	rcall	.+1816   	; 0x1346 <_ZN7TwoWire5writeEh>
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	8d e0       	ldi	r24, 0x0D	; 13
     c32:	95 e0       	ldi	r25, 0x05	; 5
     c34:	88 d3       	rcall	.+1808   	; 0x1346 <_ZN7TwoWire5writeEh>
     c36:	f8 01       	movw	r30, r16
     c38:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
     c3a:	82 2f       	mov	r24, r18
     c3c:	6c 2f       	mov	r22, r28
     c3e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     c42:	68 2f       	mov	r22, r24
     c44:	66 0f       	add	r22, r22
     c46:	86 0f       	add	r24, r22
     c48:	88 0f       	add	r24, r24
     c4a:	68 2f       	mov	r22, r24
     c4c:	62 0f       	add	r22, r18
     c4e:	8d e0       	ldi	r24, 0x0D	; 13
     c50:	95 e0       	ldi	r25, 0x05	; 5
     c52:	79 d3       	rcall	.+1778   	; 0x1346 <_ZN7TwoWire5writeEh>
     c54:	f8 01       	movw	r30, r16
     c56:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
     c58:	82 2f       	mov	r24, r18
     c5a:	6c 2f       	mov	r22, r28
     c5c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     c60:	68 2f       	mov	r22, r24
     c62:	66 0f       	add	r22, r22
     c64:	86 0f       	add	r24, r22
     c66:	88 0f       	add	r24, r24
     c68:	68 2f       	mov	r22, r24
     c6a:	62 0f       	add	r22, r18
     c6c:	8d e0       	ldi	r24, 0x0D	; 13
     c6e:	95 e0       	ldi	r25, 0x05	; 5
     c70:	6a d3       	rcall	.+1748   	; 0x1346 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
     c72:	f8 01       	movw	r30, r16
     c74:	20 81       	ld	r18, Z
     c76:	82 2f       	mov	r24, r18
     c78:	6c 2f       	mov	r22, r28
     c7a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     c7e:	68 2f       	mov	r22, r24
     c80:	66 0f       	add	r22, r22
     c82:	86 0f       	add	r24, r22
     c84:	88 0f       	add	r24, r24
     c86:	68 2f       	mov	r22, r24
     c88:	62 0f       	add	r22, r18
     c8a:	8d e0       	ldi	r24, 0x0D	; 13
  Wire.endTransmission();
     c8c:	95 e0       	ldi	r25, 0x05	; 5
     c8e:	5b d3       	rcall	.+1718   	; 0x1346 <_ZN7TwoWire5writeEh>
     c90:	8d e0       	ldi	r24, 0x0D	; 13

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
     c92:	95 e0       	ldi	r25, 0x05	; 5
     c94:	24 d4       	rcall	.+2120   	; 0x14de <_ZN7TwoWire15endTransmissionEv>
     c96:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
     c98:	78 df       	rcall	.-272    	; 0xb8a <_ZL17read_i2c_registerhh.constprop.7>
     c9a:	c8 2f       	mov	r28, r24
     c9c:	68 e6       	ldi	r22, 0x68	; 104
     c9e:	8d e0       	ldi	r24, 0x0D	; 13
  Wire._I2C_WRITE((byte)reg);
     ca0:	95 e0       	ldi	r25, 0x05	; 5
     ca2:	9e d3       	rcall	.+1852   	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>
     ca4:	6f e0       	ldi	r22, 0x0F	; 15
     ca6:	8d e0       	ldi	r24, 0x0D	; 13
  Wire._I2C_WRITE((byte)val);
     ca8:	95 e0       	ldi	r25, 0x05	; 5
     caa:	4d d3       	rcall	.+1690   	; 0x1346 <_ZN7TwoWire5writeEh>
     cac:	6c 2f       	mov	r22, r28
     cae:	6f 77       	andi	r22, 0x7F	; 127
     cb0:	8d e0       	ldi	r24, 0x0D	; 13
     cb2:	95 e0       	ldi	r25, 0x05	; 5
  Wire.endTransmission();
     cb4:	48 d3       	rcall	.+1680   	; 0x1346 <_ZN7TwoWire5writeEh>
     cb6:	8d e0       	ldi	r24, 0x0D	; 13
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
     cb8:	95 e0       	ldi	r25, 0x05	; 5
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     cbe:	0f 91       	pop	r16
     cc0:	0e c4       	rjmp	.+2076   	; 0x14de <_ZN7TwoWire15endTransmissionEv>

00000cc2 <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	62 df       	rcall	.-316    	; 0xb8a <_ZL17read_i2c_registerhh.constprop.7>
     cc6:	87 fb       	bst	r24, 7
     cc8:	88 27       	eor	r24, r24
     cca:	80 f9       	bld	r24, 0
}
     ccc:	08 95       	ret

00000cce <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	08 95       	ret

00000cd4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     cd4:	08 95       	ret

00000cd6 <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     cfc:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <_ZN14SoftwareSerial13active_objectE>
     d00:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <_ZN14SoftwareSerial13active_objectE+0x1>
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	09 f4       	brne	.+2      	; 0xd0a <__vector_10+0x34>
     d08:	51 c0       	rjmp	.+162    	; 0xdac <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     d0a:	96 8d       	ldd	r25, Z+30	; 0x1e
     d0c:	a6 85       	ldd	r26, Z+14	; 0x0e
     d0e:	b7 85       	ldd	r27, Z+15	; 0x0f
     d10:	85 85       	ldd	r24, Z+13	; 0x0d
     d12:	91 ff       	sbrs	r25, 1
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d16:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     d18:	89 23       	and	r24, r25
     d1a:	29 f4       	brne	.+10     	; 0xd26 <__vector_10+0x50>
     d1c:	47 c0       	rjmp	.+142    	; 0xdac <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d1e:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     d20:	89 23       	and	r24, r25
     d22:	09 f0       	breq	.+2      	; 0xd26 <__vector_10+0x50>
     d24:	43 c0       	rjmp	.+134    	; 0xdac <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     d26:	a3 89       	ldd	r26, Z+19	; 0x13
     d28:	b4 89       	ldd	r27, Z+20	; 0x14
     d2a:	9c 91       	ld	r25, X
     d2c:	85 89       	ldd	r24, Z+21	; 0x15
     d2e:	80 95       	com	r24
     d30:	89 23       	and	r24, r25
     d32:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     d34:	86 89       	ldd	r24, Z+22	; 0x16
     d36:	97 89       	ldd	r25, Z+23	; 0x17
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     d3c:	60 8d       	ldd	r22, Z+24	; 0x18
     d3e:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d40:	a6 85       	ldd	r26, Z+14	; 0x0e
     d42:	b7 85       	ldd	r27, Z+15	; 0x0f
     d44:	55 85       	ldd	r21, Z+13	; 0x0d
     d46:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	cb 01       	movw	r24, r22
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     d50:	82 2f       	mov	r24, r18
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	95 95       	asr	r25
     d56:	87 95       	ror	r24
     d58:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d5a:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     d5c:	45 23       	and	r20, r21
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__vector_10+0x8c>
        d |= 0x80;
     d60:	20 68       	ori	r18, 0x80	; 128
     d62:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d64:	91 f7       	brne	.-28     	; 0xd4a <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     d66:	86 8d       	ldd	r24, Z+30	; 0x1e
     d68:	81 fd       	sbrc	r24, 1
      d = ~d;
     d6a:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     d6c:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	8f 73       	andi	r24, 0x3F	; 63
     d76:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
     d78:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <_ZN14SoftwareSerial20_receive_buffer_headE>
     d7c:	38 17       	cp	r19, r24
     d7e:	49 f0       	breq	.+18     	; 0xd92 <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     d80:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	a3 5a       	subi	r26, 0xA3	; 163
     d88:	bb 4f       	sbci	r27, 0xFB	; 251
     d8a:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
     d8c:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     d92:	86 8d       	ldd	r24, Z+30	; 0x1e
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	86 8f       	std	Z+30, r24	; 0x1e
     d98:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9a:	93 8d       	ldd	r25, Z+27	; 0x1b
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     da0:	a3 89       	ldd	r26, Z+19	; 0x13
     da2:	b4 89       	ldd	r27, Z+20	; 0x14
     da4:	9c 91       	ld	r25, X
     da6:	85 89       	ldd	r24, Z+21	; 0x15
     da8:	89 2b       	or	r24, r25
     daa:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     dd2:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <twi_sendStop>
     ddc:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_inRepStart>
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	84 e1       	ldi	r24, 0x14	; 20
     de4:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	85 e1       	ldi	r24, 0x15	; 21
     dec:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
     df0:	e9 eb       	ldi	r30, 0xB9	; 185
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8e 7f       	andi	r24, 0xFE	; 254
     df8:	80 83       	st	Z, r24
     dfa:	80 81       	ld	r24, Z
     dfc:	8d 7f       	andi	r24, 0xFD	; 253
     dfe:	80 83       	st	Z, r24
     e00:	88 e4       	ldi	r24, 0x48	; 72
     e02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     e06:	85 e4       	ldi	r24, 0x45	; 69
     e08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e0c:	08 95       	ret

00000e0e <twi_readFrom>:
     e0e:	41 32       	cpi	r20, 0x21	; 33
     e10:	08 f0       	brcs	.+2      	; 0xe14 <twi_readFrom+0x6>
     e12:	43 c0       	rjmp	.+134    	; 0xe9a <twi_readFrom+0x8c>
     e14:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <twi_state>
     e18:	91 11       	cpse	r25, r1
     e1a:	fc cf       	rjmp	.-8      	; 0xe14 <twi_readFrom+0x6>
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <twi_state>
     e22:	20 93 0a 05 	sts	0x050A, r18	; 0x80050a <twi_sendStop>
     e26:	2f ef       	ldi	r18, 0xFF	; 255
     e28:	20 93 9f 04 	sts	0x049F, r18	; 0x80049f <twi_error>
     e2c:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_masterBufferIndex>
     e30:	24 0f       	add	r18, r20
     e32:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <twi_masterBufferLength>
     e36:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <twi_slarw>
     e3a:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <twi_slarw>
     e3e:	88 0f       	add	r24, r24
     e40:	89 2b       	or	r24, r25
     e42:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_slarw>
     e46:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <twi_inRepStart>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	61 f4       	brne	.+24     	; 0xe66 <twi_readFrom+0x58>
     e4e:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_inRepStart>
     e52:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_slarw>
     e56:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e5a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e5e:	83 fd       	sbrc	r24, 3
     e60:	f8 cf       	rjmp	.-16     	; 0xe52 <twi_readFrom+0x44>
     e62:	85 ec       	ldi	r24, 0xC5	; 197
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <twi_readFrom+0x5a>
     e66:	85 ee       	ldi	r24, 0xE5	; 229
     e68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e6c:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <twi_state>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	e1 f3       	breq	.-8      	; 0xe6c <twi_readFrom+0x5e>
     e74:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
     e78:	84 17       	cp	r24, r20
     e7a:	10 f4       	brcc	.+4      	; 0xe80 <twi_readFrom+0x72>
     e7c:	40 91 e4 04 	lds	r20, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
     e80:	a5 ee       	ldi	r26, 0xE5	; 229
     e82:	b4 e0       	ldi	r27, 0x04	; 4
     e84:	96 2f       	mov	r25, r22
     e86:	fb 01       	movw	r30, r22
     e88:	8e 2f       	mov	r24, r30
     e8a:	89 1b       	sub	r24, r25
     e8c:	84 17       	cp	r24, r20
     e8e:	18 f4       	brcc	.+6      	; 0xe96 <twi_readFrom+0x88>
     e90:	8d 91       	ld	r24, X+
     e92:	81 93       	st	Z+, r24
     e94:	f9 cf       	rjmp	.-14     	; 0xe88 <twi_readFrom+0x7a>
     e96:	84 2f       	mov	r24, r20
     e98:	08 95       	ret
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <twi_writeTo>:
     e9e:	0f 93       	push	r16
     ea0:	41 32       	cpi	r20, 0x21	; 33
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <twi_writeTo+0x8>
     ea4:	4a c0       	rjmp	.+148    	; 0xf3a <twi_writeTo+0x9c>
     ea6:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <twi_state>
     eaa:	91 11       	cpse	r25, r1
     eac:	fc cf       	rjmp	.-8      	; 0xea6 <twi_writeTo+0x8>
     eae:	32 e0       	ldi	r19, 0x02	; 2
     eb0:	30 93 0c 05 	sts	0x050C, r19	; 0x80050c <twi_state>
     eb4:	00 93 0a 05 	sts	0x050A, r16	; 0x80050a <twi_sendStop>
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <twi_error>
     ebe:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_masterBufferIndex>
     ec2:	40 93 e3 04 	sts	0x04E3, r20	; 0x8004e3 <twi_masterBufferLength>
     ec6:	56 2f       	mov	r21, r22
     ec8:	a5 ee       	ldi	r26, 0xE5	; 229
     eca:	b4 e0       	ldi	r27, 0x04	; 4
     ecc:	fb 01       	movw	r30, r22
     ece:	3e 2f       	mov	r19, r30
     ed0:	35 1b       	sub	r19, r21
     ed2:	34 17       	cp	r19, r20
     ed4:	18 f4       	brcc	.+6      	; 0xedc <twi_writeTo+0x3e>
     ed6:	31 91       	ld	r19, Z+
     ed8:	3d 93       	st	X+, r19
     eda:	f9 cf       	rjmp	.-14     	; 0xece <twi_writeTo+0x30>
     edc:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_slarw>
     ee0:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <twi_slarw>
     ee4:	88 0f       	add	r24, r24
     ee6:	83 2b       	or	r24, r19
     ee8:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_slarw>
     eec:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <twi_inRepStart>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	61 f4       	brne	.+24     	; 0xf0c <twi_writeTo+0x6e>
     ef4:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_inRepStart>
     ef8:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_slarw>
     efc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     f00:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f04:	83 fd       	sbrc	r24, 3
     f06:	f8 cf       	rjmp	.-16     	; 0xef8 <twi_writeTo+0x5a>
     f08:	85 ec       	ldi	r24, 0xC5	; 197
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <twi_writeTo+0x70>
     f0c:	85 ee       	ldi	r24, 0xE5	; 229
     f0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f12:	22 23       	and	r18, r18
     f14:	21 f0       	breq	.+8      	; 0xf1e <twi_writeTo+0x80>
     f16:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <twi_state>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	d1 f3       	breq	.-12     	; 0xf12 <twi_writeTo+0x74>
     f1e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <twi_error>
     f22:	8f 3f       	cpi	r24, 0xFF	; 255
     f24:	79 f0       	breq	.+30     	; 0xf44 <twi_writeTo+0xa6>
     f26:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <twi_error>
     f2a:	80 32       	cpi	r24, 0x20	; 32
     f2c:	41 f0       	breq	.+16     	; 0xf3e <twi_writeTo+0xa0>
     f2e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <twi_error>
     f32:	80 33       	cpi	r24, 0x30	; 48
     f34:	31 f0       	breq	.+12     	; 0xf42 <twi_writeTo+0xa4>
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <twi_writeTo+0xa6>
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <twi_writeTo+0xa6>
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <twi_writeTo+0xa6>
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	89 2f       	mov	r24, r25
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <twi_transmit>:
     f4a:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <twi_txBufferLength>
     f4e:	26 2f       	mov	r18, r22
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	24 0f       	add	r18, r20
     f54:	31 1d       	adc	r19, r1
     f56:	21 32       	cpi	r18, 0x21	; 33
     f58:	31 05       	cpc	r19, r1
     f5a:	dc f4       	brge	.+54     	; 0xf92 <twi_transmit+0x48>
     f5c:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <twi_state>
     f60:	24 30       	cpi	r18, 0x04	; 4
     f62:	c9 f4       	brne	.+50     	; 0xf96 <twi_transmit+0x4c>
     f64:	fc 01       	movw	r30, r24
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	86 17       	cp	r24, r22
     f6c:	58 f4       	brcc	.+22     	; 0xf84 <twi_transmit+0x3a>
     f6e:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <twi_txBufferLength>
     f72:	21 91       	ld	r18, Z+
     f74:	dc 01       	movw	r26, r24
     f76:	ad 53       	subi	r26, 0x3D	; 61
     f78:	bb 4f       	sbci	r27, 0xFB	; 251
     f7a:	a3 0f       	add	r26, r19
     f7c:	b1 1d       	adc	r27, r1
     f7e:	2c 93       	st	X, r18
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	f3 cf       	rjmp	.-26     	; 0xf6a <twi_transmit+0x20>
     f84:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_txBufferLength>
     f88:	68 0f       	add	r22, r24
     f8a:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <twi_txBufferLength>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	08 95       	ret
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	08 95       	ret
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	08 95       	ret

00000f9a <twi_attachSlaveRxEvent>:
     f9a:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <twi_onSlaveReceive+0x1>
     f9e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_onSlaveReceive>
     fa2:	08 95       	ret

00000fa4 <twi_attachSlaveTxEvent>:
     fa4:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <twi_onSlaveTransmit+0x1>
     fa8:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_onSlaveTransmit>
     fac:	08 95       	ret

00000fae <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     fae:	85 ed       	ldi	r24, 0xD5	; 213
     fb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     fb4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     fb8:	84 fd       	sbrc	r24, 4
     fba:	fc cf       	rjmp	.-8      	; 0xfb4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     fbc:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
     fc0:	08 95       	ret

00000fc2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     fc2:	85 ec       	ldi	r24, 0xC5	; 197
     fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
     fc8:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
     fcc:	08 95       	ret

00000fce <__vector_39>:
}

ISR(TWI_vect)
{
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	0b b6       	in	r0, 0x3b	; 59
     fda:	0f 92       	push	r0
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
  switch(TW_STATUS){
     ff4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ff8:	88 7f       	andi	r24, 0xF8	; 248
     ffa:	80 36       	cpi	r24, 0x60	; 96
     ffc:	09 f4       	brne	.+2      	; 0x1000 <__vector_39+0x32>
     ffe:	9d c0       	rjmp	.+314    	; 0x113a <__vector_39+0x16c>
    1000:	70 f5       	brcc	.+92     	; 0x105e <__vector_39+0x90>
    1002:	88 32       	cpi	r24, 0x28	; 40
    1004:	09 f4       	brne	.+2      	; 0x1008 <__vector_39+0x3a>
    1006:	5c c0       	rjmp	.+184    	; 0x10c0 <__vector_39+0xf2>
    1008:	90 f4       	brcc	.+36     	; 0x102e <__vector_39+0x60>
    100a:	80 31       	cpi	r24, 0x10	; 16
    100c:	09 f4       	brne	.+2      	; 0x1010 <__vector_39+0x42>
    100e:	55 c0       	rjmp	.+170    	; 0x10ba <__vector_39+0xec>
    1010:	38 f4       	brcc	.+14     	; 0x1020 <__vector_39+0x52>
    1012:	88 23       	and	r24, r24
    1014:	09 f4       	brne	.+2      	; 0x1018 <__vector_39+0x4a>
    1016:	f3 c0       	rjmp	.+486    	; 0x11fe <__vector_39+0x230>
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	09 f4       	brne	.+2      	; 0x101e <__vector_39+0x50>
    101c:	4e c0       	rjmp	.+156    	; 0x10ba <__vector_39+0xec>
    101e:	f2 c0       	rjmp	.+484    	; 0x1204 <__vector_39+0x236>
    1020:	88 31       	cpi	r24, 0x18	; 24
    1022:	09 f4       	brne	.+2      	; 0x1026 <__vector_39+0x58>
    1024:	4d c0       	rjmp	.+154    	; 0x10c0 <__vector_39+0xf2>
    1026:	80 32       	cpi	r24, 0x20	; 32
    1028:	09 f4       	brne	.+2      	; 0x102c <__vector_39+0x5e>
    102a:	5e c0       	rjmp	.+188    	; 0x10e8 <__vector_39+0x11a>
    102c:	eb c0       	rjmp	.+470    	; 0x1204 <__vector_39+0x236>
    102e:	80 34       	cpi	r24, 0x40	; 64
    1030:	09 f4       	brne	.+2      	; 0x1034 <__vector_39+0x66>
    1032:	69 c0       	rjmp	.+210    	; 0x1106 <__vector_39+0x138>
    1034:	50 f4       	brcc	.+20     	; 0x104a <__vector_39+0x7c>
    1036:	80 33       	cpi	r24, 0x30	; 48
    1038:	09 f4       	brne	.+2      	; 0x103c <__vector_39+0x6e>
    103a:	56 c0       	rjmp	.+172    	; 0x10e8 <__vector_39+0x11a>
    103c:	88 33       	cpi	r24, 0x38	; 56
    103e:	09 f0       	breq	.+2      	; 0x1042 <__vector_39+0x74>
    1040:	e1 c0       	rjmp	.+450    	; 0x1204 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1042:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <twi_error>
      twi_releaseBus();
    1046:	bd df       	rcall	.-134    	; 0xfc2 <twi_releaseBus>
      break;
    1048:	dd c0       	rjmp	.+442    	; 0x1204 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    104a:	80 35       	cpi	r24, 0x50	; 80
    104c:	09 f4       	brne	.+2      	; 0x1050 <__vector_39+0x82>
    104e:	4f c0       	rjmp	.+158    	; 0x10ee <__vector_39+0x120>
    1050:	88 35       	cpi	r24, 0x58	; 88
    1052:	09 f4       	brne	.+2      	; 0x1056 <__vector_39+0x88>
    1054:	5d c0       	rjmp	.+186    	; 0x1110 <__vector_39+0x142>
    1056:	88 34       	cpi	r24, 0x48	; 72
    1058:	09 f0       	breq	.+2      	; 0x105c <__vector_39+0x8e>
    105a:	d4 c0       	rjmp	.+424    	; 0x1204 <__vector_39+0x236>
    105c:	d2 c0       	rjmp	.+420    	; 0x1202 <__vector_39+0x234>
    105e:	88 39       	cpi	r24, 0x98	; 152
    1060:	09 f4       	brne	.+2      	; 0x1064 <__vector_39+0x96>
    1062:	c3 c0       	rjmp	.+390    	; 0x11ea <__vector_39+0x21c>
    1064:	a8 f4       	brcc	.+42     	; 0x1090 <__vector_39+0xc2>
    1066:	88 37       	cpi	r24, 0x78	; 120
    1068:	09 f4       	brne	.+2      	; 0x106c <__vector_39+0x9e>
    106a:	67 c0       	rjmp	.+206    	; 0x113a <__vector_39+0x16c>
    106c:	38 f4       	brcc	.+14     	; 0x107c <__vector_39+0xae>
    106e:	88 36       	cpi	r24, 0x68	; 104
    1070:	09 f4       	brne	.+2      	; 0x1074 <__vector_39+0xa6>
    1072:	63 c0       	rjmp	.+198    	; 0x113a <__vector_39+0x16c>
    1074:	80 37       	cpi	r24, 0x70	; 112
    1076:	09 f4       	brne	.+2      	; 0x107a <__vector_39+0xac>
    1078:	60 c0       	rjmp	.+192    	; 0x113a <__vector_39+0x16c>
    107a:	c4 c0       	rjmp	.+392    	; 0x1204 <__vector_39+0x236>
    107c:	88 38       	cpi	r24, 0x88	; 136
    107e:	09 f4       	brne	.+2      	; 0x1082 <__vector_39+0xb4>
    1080:	b4 c0       	rjmp	.+360    	; 0x11ea <__vector_39+0x21c>
    1082:	80 39       	cpi	r24, 0x90	; 144
    1084:	09 f4       	brne	.+2      	; 0x1088 <__vector_39+0xba>
    1086:	5f c0       	rjmp	.+190    	; 0x1146 <__vector_39+0x178>
    1088:	80 38       	cpi	r24, 0x80	; 128
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_39+0xc0>
    108c:	bb c0       	rjmp	.+374    	; 0x1204 <__vector_39+0x236>
    108e:	5b c0       	rjmp	.+182    	; 0x1146 <__vector_39+0x178>
    1090:	80 3b       	cpi	r24, 0xB0	; 176
    1092:	09 f4       	brne	.+2      	; 0x1096 <__vector_39+0xc8>
    1094:	82 c0       	rjmp	.+260    	; 0x119a <__vector_39+0x1cc>
    1096:	38 f4       	brcc	.+14     	; 0x10a6 <__vector_39+0xd8>
    1098:	80 3a       	cpi	r24, 0xA0	; 160
    109a:	09 f4       	brne	.+2      	; 0x109e <__vector_39+0xd0>
    109c:	66 c0       	rjmp	.+204    	; 0x116a <__vector_39+0x19c>
    109e:	88 3a       	cpi	r24, 0xA8	; 168
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <__vector_39+0xd6>
    10a2:	7b c0       	rjmp	.+246    	; 0x119a <__vector_39+0x1cc>
    10a4:	af c0       	rjmp	.+350    	; 0x1204 <__vector_39+0x236>
    10a6:	80 3c       	cpi	r24, 0xC0	; 192
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__vector_39+0xde>
    10aa:	a3 c0       	rjmp	.+326    	; 0x11f2 <__vector_39+0x224>
    10ac:	88 3c       	cpi	r24, 0xC8	; 200
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <__vector_39+0xe4>
    10b0:	a0 c0       	rjmp	.+320    	; 0x11f2 <__vector_39+0x224>
    10b2:	88 3b       	cpi	r24, 0xB8	; 184
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__vector_39+0xea>
    10b6:	86 c0       	rjmp	.+268    	; 0x11c4 <__vector_39+0x1f6>
    10b8:	a5 c0       	rjmp	.+330    	; 0x1204 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    10ba:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_slarw>
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    10c0:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    10c4:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_masterBufferLength>
    10c8:	98 17       	cp	r25, r24
    10ca:	70 f5       	brcc	.+92     	; 0x1128 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    10cc:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	8e 0f       	add	r24, r30
    10d4:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_masterBufferIndex>
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	eb 51       	subi	r30, 0x1B	; 27
    10dc:	fb 4f       	sbci	r31, 0xFB	; 251
    10de:	80 81       	ld	r24, Z
    10e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    10e4:	85 ec       	ldi	r24, 0xC5	; 197
    10e6:	82 c0       	rjmp	.+260    	; 0x11ec <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    10e8:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <twi_error>
    10ec:	8a c0       	rjmp	.+276    	; 0x1202 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    10ee:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	8e 0f       	add	r24, r30
    10f6:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_masterBufferIndex>
    10fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	eb 51       	subi	r30, 0x1B	; 27
    1102:	fb 4f       	sbci	r31, 0xFB	; 251
    1104:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1106:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    110a:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_masterBufferLength>
    110e:	6a c0       	rjmp	.+212    	; 0x11e4 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1110:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	8e 0f       	add	r24, r30
    1118:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_masterBufferIndex>
    111c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	eb 51       	subi	r30, 0x1B	; 27
    1124:	fb 4f       	sbci	r31, 0xFB	; 251
    1126:	80 83       	st	Z, r24
	if (twi_sendStop)
    1128:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_sendStop>
    112c:	81 11       	cpse	r24, r1
    112e:	69 c0       	rjmp	.+210    	; 0x1202 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1136:	84 ea       	ldi	r24, 0xA4	; 164
    1138:	5d c0       	rjmp	.+186    	; 0x11f4 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1140:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_rxBufferIndex>
    1144:	cf cf       	rjmp	.-98     	; 0x10e4 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1146:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	08 f0       	brcs	.+2      	; 0x1150 <__vector_39+0x182>
    114e:	4d c0       	rjmp	.+154    	; 0x11ea <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1150:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	8e 0f       	add	r24, r30
    1158:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <twi_rxBufferIndex>
    115c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	ef 55       	subi	r30, 0x5F	; 95
    1164:	fb 4f       	sbci	r31, 0xFB	; 251
    1166:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1168:	bd cf       	rjmp	.-134    	; 0x10e4 <__vector_39+0x116>
    116a:	2b df       	rcall	.-426    	; 0xfc2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    116c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    1170:	80 32       	cpi	r24, 0x20	; 32
    1172:	30 f4       	brcc	.+12     	; 0x1180 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1174:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	ef 55       	subi	r30, 0x5F	; 95
    117c:	fb 4f       	sbci	r31, 0xFB	; 251
    117e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1180:	60 91 a0 04 	lds	r22, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_onSlaveReceive>
    118a:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <twi_onSlaveReceive+0x1>
    118e:	81 ea       	ldi	r24, 0xA1	; 161
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1194:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_rxBufferIndex>
      break;
    1198:	35 c0       	rjmp	.+106    	; 0x1204 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    11a0:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    11a4:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    11a8:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <twi_onSlaveTransmit>
    11ac:	f0 91 08 05 	lds	r31, 0x0508	; 0x800508 <twi_onSlaveTransmit+0x1>
    11b0:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    11b2:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    11b6:	81 11       	cpse	r24, r1
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    11c0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    11c4:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <twi_txBufferIndex>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	8e 0f       	add	r24, r30
    11cc:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_txBufferIndex>
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ed 53       	subi	r30, 0x3D	; 61
    11d4:	fb 4f       	sbci	r31, 0xFB	; 251
    11d6:	80 81       	ld	r24, Z
    11d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    11dc:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <twi_txBufferIndex>
    11e0:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    11e4:	98 17       	cp	r25, r24
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <__vector_39+0x21c>
    11e8:	7d cf       	rjmp	.-262    	; 0x10e4 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    11ea:	85 e8       	ldi	r24, 0x85	; 133
    11ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    11f2:	85 ec       	ldi	r24, 0xC5	; 197
    11f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    11f8:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
      break;
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    11fe:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <twi_error>
      twi_stop();
    1202:	d5 de       	rcall	.-598    	; 0xfae <twi_stop>
      break;
  }
}
    1204:	ff 91       	pop	r31
    1206:	ef 91       	pop	r30
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	7f 91       	pop	r23
    1212:	6f 91       	pop	r22
    1214:	5f 91       	pop	r21
    1216:	4f 91       	pop	r20
    1218:	3f 91       	pop	r19
    121a:	2f 91       	pop	r18
    121c:	0f 90       	pop	r0
    121e:	0b be       	out	0x3b, r0	; 59
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    122a:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    1234:	82 1b       	sub	r24, r18
    1236:	91 09       	sbc	r25, r1
    1238:	08 95       	ret

0000123a <_ZN7TwoWire4readEv>:
    123a:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    123e:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    1242:	98 17       	cp	r25, r24
    1244:	50 f4       	brcc	.+20     	; 0x125a <_ZN7TwoWire4readEv+0x20>
    1246:	e9 2f       	mov	r30, r25
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	ed 5b       	subi	r30, 0xBD	; 189
    124c:	fa 4f       	sbci	r31, 0xFA	; 250
    124e:	20 81       	ld	r18, Z
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	9f 5f       	subi	r25, 0xFF	; 255
    1254:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    1258:	02 c0       	rjmp	.+4      	; 0x125e <_ZN7TwoWire4readEv+0x24>
    125a:	2f ef       	ldi	r18, 0xFF	; 255
    125c:	3f ef       	ldi	r19, 0xFF	; 255
    125e:	c9 01       	movw	r24, r18
    1260:	08 95       	ret

00001262 <_ZN7TwoWire4peekEv>:
    1262:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    1266:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    126a:	e8 17       	cp	r30, r24
    126c:	30 f4       	brcc	.+12     	; 0x127a <_ZN7TwoWire4peekEv+0x18>
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	ed 5b       	subi	r30, 0xBD	; 189
    1272:	fa 4f       	sbci	r31, 0xFA	; 250
    1274:	80 81       	ld	r24, Z
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	08 95       	ret
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	08 95       	ret

00001280 <_ZN7TwoWire5flushEv>:
    1280:	08 95       	ret

00001282 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
    1288:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <_ZN7TwoWire14user_onReceiveE>
    128c:	f0 91 1a 05 	lds	r31, 0x051A	; 0x80051a <_ZN7TwoWire14user_onReceiveE+0x1>
    1290:	30 97       	sbiw	r30, 0x00	; 0
    1292:	f1 f0       	breq	.+60     	; 0x12d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1294:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    1298:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    129c:	98 17       	cp	r25, r24
    129e:	c0 f0       	brcs	.+48     	; 0x12d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	29 2f       	mov	r18, r25
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	26 17       	cp	r18, r22
    12a8:	37 07       	cpc	r19, r23
    12aa:	54 f4       	brge	.+20     	; 0x12c0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    12ac:	de 01       	movw	r26, r28
    12ae:	a2 0f       	add	r26, r18
    12b0:	b3 1f       	adc	r27, r19
    12b2:	4c 91       	ld	r20, X
    12b4:	d9 01       	movw	r26, r18
    12b6:	ad 5b       	subi	r26, 0xBD	; 189
    12b8:	ba 4f       	sbci	r27, 0xFA	; 250
    12ba:	4c 93       	st	X, r20
    12bc:	9f 5f       	subi	r25, 0xFF	; 255
    12be:	f1 cf       	rjmp	.-30     	; 0x12a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    12c0:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    12c4:	60 93 41 05 	sts	0x0541, r22	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    12c8:	cb 01       	movw	r24, r22
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	19 94       	eijmp
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <_ZN7TwoWire16onRequestServiceEv>:
    12d6:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <_ZN7TwoWire14user_onRequestE>
    12da:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <_ZN7TwoWire14user_onRequestE+0x1>
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	29 f0       	breq	.+10     	; 0x12ec <_ZN7TwoWire16onRequestServiceEv+0x16>
    12e2:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    12e6:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    12ea:	19 94       	eijmp
    12ec:	08 95       	ret

000012ee <_ZN7TwoWire5writeEPKhj>:
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	7c 01       	movw	r14, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8a 01       	movw	r16, r20
    1304:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <_ZN7TwoWire12transmittingE>
    1308:	22 23       	and	r18, r18
    130a:	89 f0       	breq	.+34     	; 0x132e <_ZN7TwoWire5writeEPKhj+0x40>
    130c:	eb 01       	movw	r28, r22
    130e:	6b 01       	movw	r12, r22
    1310:	c4 0e       	add	r12, r20
    1312:	d5 1e       	adc	r13, r21
    1314:	cc 15       	cp	r28, r12
    1316:	dd 05       	cpc	r29, r13
    1318:	61 f0       	breq	.+24     	; 0x1332 <_ZN7TwoWire5writeEPKhj+0x44>
    131a:	69 91       	ld	r22, Y+
    131c:	d7 01       	movw	r26, r14
    131e:	ed 91       	ld	r30, X+
    1320:	fc 91       	ld	r31, X
    1322:	01 90       	ld	r0, Z+
    1324:	f0 81       	ld	r31, Z
    1326:	e0 2d       	mov	r30, r0
    1328:	c7 01       	movw	r24, r14
    132a:	19 95       	eicall
    132c:	f3 cf       	rjmp	.-26     	; 0x1314 <_ZN7TwoWire5writeEPKhj+0x26>
    132e:	64 2f       	mov	r22, r20
    1330:	0c de       	rcall	.-1000   	; 0xf4a <twi_transmit>
    1332:	c8 01       	movw	r24, r16
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	08 95       	ret

00001346 <_ZN7TwoWire5writeEh>:
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	1f 92       	push	r1
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	69 83       	std	Y+1, r22	; 0x01
    1352:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <_ZN7TwoWire12transmittingE>
    1356:	22 23       	and	r18, r18
    1358:	d1 f0       	breq	.+52     	; 0x138e <_ZN7TwoWire5writeEh+0x48>
    135a:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    135e:	20 32       	cpi	r18, 0x20	; 32
    1360:	40 f0       	brcs	.+16     	; 0x1372 <_ZN7TwoWire5writeEh+0x2c>
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	fc 01       	movw	r30, r24
    1368:	33 83       	std	Z+3, r19	; 0x03
    136a:	22 83       	std	Z+2, r18	; 0x02
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	14 c0       	rjmp	.+40     	; 0x139a <_ZN7TwoWire5writeEh+0x54>
    1372:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    1376:	e8 2f       	mov	r30, r24
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	e0 5e       	subi	r30, 0xE0	; 224
    137c:	fa 4f       	sbci	r31, 0xFA	; 250
    137e:	99 81       	ldd	r25, Y+1	; 0x01
    1380:	90 83       	st	Z, r25
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    1388:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <_ZN7TwoWire5writeEh+0x50>
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	da dd       	rcall	.-1100   	; 0xf4a <twi_transmit>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0f 90       	pop	r0
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <_ZN7TwoWireC1Ev>:
    13a2:	fc 01       	movw	r30, r24
    13a4:	13 82       	std	Z+3, r1	; 0x03
    13a6:	12 82       	std	Z+2, r1	; 0x02
    13a8:	88 ee       	ldi	r24, 0xE8	; 232
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	84 83       	std	Z+4, r24	; 0x04
    13b2:	95 83       	std	Z+5, r25	; 0x05
    13b4:	a6 83       	std	Z+6, r26	; 0x06
    13b6:	b7 83       	std	Z+7, r27	; 0x07
    13b8:	8d e3       	ldi	r24, 0x3D	; 61
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
    13c0:	08 95       	ret

000013c2 <_ZN7TwoWire5beginEv>:
    13c2:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    13c6:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    13ca:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    13ce:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    13d2:	ff dc       	rcall	.-1538   	; 0xdd2 <twi_init>
    13d4:	8b e6       	ldi	r24, 0x6B	; 107
    13d6:	99 e0       	ldi	r25, 0x09	; 9
    13d8:	e5 dd       	rcall	.-1078   	; 0xfa4 <twi_attachSlaveTxEvent>
    13da:	81 e4       	ldi	r24, 0x41	; 65
    13dc:	99 e0       	ldi	r25, 0x09	; 9
    13de:	dd cd       	rjmp	.-1094   	; 0xf9a <twi_attachSlaveRxEvent>

000013e0 <_ZN7TwoWire17beginTransmissionEh>:
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <_ZN7TwoWire12transmittingE>
    13e6:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <_ZN7TwoWire9txAddressE>
    13ea:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    13ee:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    13f2:	08 95       	ret

000013f4 <_ZN7TwoWire17beginTransmissionEi>:
    13f4:	f5 cf       	rjmp	.-22     	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>

000013f6 <_ZN7TwoWire15endTransmissionEh>:
    13f6:	0f 93       	push	r16
    13f8:	06 2f       	mov	r16, r22
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	40 91 1e 05 	lds	r20, 0x051E	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    1400:	60 e2       	ldi	r22, 0x20	; 32
    1402:	75 e0       	ldi	r23, 0x05	; 5
    1404:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <_ZN7TwoWire9txAddressE>
    1408:	4a dd       	rcall	.-1388   	; 0xe9e <twi_writeTo>
    140a:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    140e:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    1412:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <_ZN7TwoWire12transmittingE>
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <_ZN7TwoWire11requestFromEhhmhh>:
    141a:	4f 92       	push	r4
    141c:	5f 92       	push	r5
    141e:	6f 92       	push	r6
    1420:	7f 92       	push	r7
    1422:	af 92       	push	r10
    1424:	bf 92       	push	r11
    1426:	cf 92       	push	r12
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	5c 01       	movw	r10, r24
    1436:	f6 2e       	mov	r15, r22
    1438:	d4 2f       	mov	r29, r20
    143a:	28 01       	movw	r4, r16
    143c:	39 01       	movw	r6, r18
    143e:	ee 20       	and	r14, r14
    1440:	11 f1       	breq	.+68     	; 0x1486 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    1442:	ce df       	rcall	.-100    	; 0x13e0 <_ZN7TwoWire17beginTransmissionEh>
    1444:	ce 2d       	mov	r28, r14
    1446:	c4 30       	cpi	r28, 0x04	; 4
    1448:	08 f0       	brcs	.+2      	; 0x144c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    144a:	c3 e0       	ldi	r28, 0x03	; 3
    144c:	c1 50       	subi	r28, 0x01	; 1
    144e:	c0 f0       	brcs	.+48     	; 0x1480 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    1450:	28 e0       	ldi	r18, 0x08	; 8
    1452:	c2 9f       	mul	r28, r18
    1454:	c0 01       	movw	r24, r0
    1456:	11 24       	eor	r1, r1
    1458:	a3 01       	movw	r20, r6
    145a:	92 01       	movw	r18, r4
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    145e:	56 95       	lsr	r21
    1460:	47 95       	ror	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	8a 95       	dec	r24
    1468:	d2 f7       	brpl	.-12     	; 0x145e <_ZN7TwoWire11requestFromEhhmhh+0x44>
    146a:	ca 01       	movw	r24, r20
    146c:	b9 01       	movw	r22, r18
    146e:	d5 01       	movw	r26, r10
    1470:	ed 91       	ld	r30, X+
    1472:	fc 91       	ld	r31, X
    1474:	01 90       	ld	r0, Z+
    1476:	f0 81       	ld	r31, Z
    1478:	e0 2d       	mov	r30, r0
    147a:	c5 01       	movw	r24, r10
    147c:	19 95       	eicall
    147e:	e6 cf       	rjmp	.-52     	; 0x144c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	c5 01       	movw	r24, r10
    1484:	b8 df       	rcall	.-144    	; 0x13f6 <_ZN7TwoWire15endTransmissionEh>
    1486:	4d 2f       	mov	r20, r29
    1488:	d1 32       	cpi	r29, 0x21	; 33
    148a:	08 f0       	brcs	.+2      	; 0x148e <_ZN7TwoWire11requestFromEhhmhh+0x74>
    148c:	40 e2       	ldi	r20, 0x20	; 32
    148e:	2c 2d       	mov	r18, r12
    1490:	63 e4       	ldi	r22, 0x43	; 67
    1492:	75 e0       	ldi	r23, 0x05	; 5
    1494:	8f 2d       	mov	r24, r15
    1496:	bb dc       	rcall	.-1674   	; 0xe0e <twi_readFrom>
    1498:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    149c:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	08 95       	ret

000014bc <_ZN7TwoWire11requestFromEhhh>:
    14bc:	cf 92       	push	r12
    14be:	ef 92       	push	r14
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	c2 2e       	mov	r12, r18
    14c6:	e1 2c       	mov	r14, r1
    14c8:	00 e0       	ldi	r16, 0x00	; 0
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	98 01       	movw	r18, r16
    14ce:	a5 df       	rcall	.-182    	; 0x141a <_ZN7TwoWire11requestFromEhhmhh>
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ef 90       	pop	r14
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <_ZN7TwoWire11requestFromEhh>:
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	ef cf       	rjmp	.-34     	; 0x14bc <_ZN7TwoWire11requestFromEhhh>

000014de <_ZN7TwoWire15endTransmissionEv>:
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	8a cf       	rjmp	.-236    	; 0x13f6 <_ZN7TwoWire15endTransmissionEh>

000014e2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    14e2:	8d e0       	ldi	r24, 0x0D	; 13
    14e4:	95 e0       	ldi	r25, 0x05	; 5
    14e6:	5d cf       	rjmp	.-326    	; 0x13a2 <_ZN7TwoWireC1Ev>

000014e8 <_ZN20TempHumidPressSensorC1Ev>:
	sensordata.h = humidity;
	sensordata.p = pressure;
	sensordata.a = altitude;
	
	return sensordata;
    14e8:	08 95       	ret

000014ea <_ZN20TempHumidPressSensorD1Ev>:
    14ea:	08 95       	ret

000014ec <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>:
    14ec:	83 e6       	ldi	r24, 0x63	; 99
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	bb da       	rcall	.-2698   	; 0xa68 <_ZN15Adafruit_BME2805beginEv>
    14f2:	81 11       	cpse	r24, r1
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x16>
    14f6:	6b e4       	ldi	r22, 0x4B	; 75
    14f8:	73 e0       	ldi	r23, 0x03	; 3
    14fa:	86 e9       	ldi	r24, 0x96	; 150
    14fc:	95 e0       	ldi	r25, 0x05	; 5
    14fe:	5a d2       	rcall	.+1204   	; 0x19b4 <_ZN5Print7printlnEPKc>
    1500:	ff cf       	rjmp	.-2      	; 0x1500 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x14>
    1502:	66 ea       	ldi	r22, 0xA6	; 166
    1504:	73 e0       	ldi	r23, 0x03	; 3
    1506:	86 e9       	ldi	r24, 0x96	; 150
    1508:	95 e0       	ldi	r25, 0x05	; 5
    150a:	54 c2       	rjmp	.+1192   	; 0x19b4 <_ZN5Print7printlnEPKc>

0000150c <_GLOBAL__sub_I_bme280>:
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;
    150c:	83 e6       	ldi	r24, 0x63	; 99
    150e:	95 e0       	ldi	r25, 0x05	; 5
    1510:	2a c8       	rjmp	.-4012   	; 0x566 <_ZN15Adafruit_BME280C1Ev>

00001512 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1512:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1514:	91 8d       	ldd	r25, Z+25	; 0x19
    1516:	22 8d       	ldd	r18, Z+26	; 0x1a
    1518:	89 2f       	mov	r24, r25
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	80 5c       	subi	r24, 0xC0	; 192
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
}
    1524:	8f 73       	andi	r24, 0x3F	; 63
    1526:	99 27       	eor	r25, r25
    1528:	08 95       	ret

0000152a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    152a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    152c:	91 8d       	ldd	r25, Z+25	; 0x19
    152e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1530:	98 17       	cp	r25, r24
    1532:	31 f0       	breq	.+12     	; 0x1540 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1534:	82 8d       	ldd	r24, Z+26	; 0x1a
    1536:	e8 0f       	add	r30, r24
    1538:	f1 1d       	adc	r31, r1
    153a:	85 8d       	ldd	r24, Z+29	; 0x1d
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1544:	08 95       	ret

00001546 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1546:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1548:	91 8d       	ldd	r25, Z+25	; 0x19
    154a:	82 8d       	ldd	r24, Z+26	; 0x1a
    154c:	98 17       	cp	r25, r24
    154e:	61 f0       	breq	.+24     	; 0x1568 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1550:	82 8d       	ldd	r24, Z+26	; 0x1a
    1552:	df 01       	movw	r26, r30
    1554:	a8 0f       	add	r26, r24
    1556:	b1 1d       	adc	r27, r1
    1558:	5d 96       	adiw	r26, 0x1d	; 29
    155a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    155c:	92 8d       	ldd	r25, Z+26	; 0x1a
    155e:	9f 5f       	subi	r25, 0xFF	; 255
    1560:	9f 73       	andi	r25, 0x3F	; 63
    1562:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    156c:	08 95       	ret

0000156e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    156e:	fc 01       	movw	r30, r24
    1570:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1572:	44 8d       	ldd	r20, Z+28	; 0x1c
    1574:	25 2f       	mov	r18, r21
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	84 2f       	mov	r24, r20
    157a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    157c:	82 1b       	sub	r24, r18
    157e:	93 0b       	sbc	r25, r19
    1580:	54 17       	cp	r21, r20
    1582:	10 f0       	brcs	.+4      	; 0x1588 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1584:	cf 96       	adiw	r24, 0x3f	; 63
    1586:	08 95       	ret
  return tail - head - 1;
    1588:	01 97       	sbiw	r24, 0x01	; 1
}
    158a:	08 95       	ret

0000158c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    158c:	85 e5       	ldi	r24, 0x55	; 85
    158e:	9c e0       	ldi	r25, 0x0C	; 12
    1590:	89 2b       	or	r24, r25
    1592:	39 f0       	breq	.+14     	; 0x15a2 <_Z14serialEventRunv+0x16>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	89 2b       	or	r24, r25
    159a:	19 f0       	breq	.+6      	; 0x15a2 <_Z14serialEventRunv+0x16>
    159c:	86 d1       	rcall	.+780    	; 0x18aa <_Z17Serial0_availablev>
    159e:	81 11       	cpse	r24, r1
    15a0:	25 c0       	rjmp	.+74     	; 0x15ec <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	89 2b       	or	r24, r25
    15a8:	41 f0       	breq	.+16     	; 0x15ba <_Z14serialEventRunv+0x2e>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	89 2b       	or	r24, r25
    15b0:	21 f0       	breq	.+8      	; 0x15ba <_Z14serialEventRunv+0x2e>
    15b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15b6:	81 11       	cpse	r24, r1
    15b8:	1c c0       	rjmp	.+56     	; 0x15f2 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	89 2b       	or	r24, r25
    15c0:	41 f0       	breq	.+16     	; 0x15d2 <_Z14serialEventRunv+0x46>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	89 2b       	or	r24, r25
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <_Z14serialEventRunv+0x46>
    15ca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15ce:	81 11       	cpse	r24, r1
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	89 2b       	or	r24, r25
    15d8:	a1 f0       	breq	.+40     	; 0x1602 <_Z14serialEventRunv+0x76>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	89 2b       	or	r24, r25
    15e0:	81 f0       	breq	.+32     	; 0x1602 <_Z14serialEventRunv+0x76>
    15e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15e6:	81 11       	cpse	r24, r1
    15e8:	0a c0       	rjmp	.+20     	; 0x15fe <_Z14serialEventRunv+0x72>
    15ea:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    15ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15f0:	d8 cf       	rjmp	.-80     	; 0x15a2 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    15f2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15f6:	e1 cf       	rjmp	.-62     	; 0x15ba <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    15f8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15fc:	ea cf       	rjmp	.-44     	; 0x15d2 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    15fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1602:	08 95       	ret

00001604 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1604:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1606:	84 8d       	ldd	r24, Z+28	; 0x1c
    1608:	df 01       	movw	r26, r30
    160a:	a8 0f       	add	r26, r24
    160c:	b1 1d       	adc	r27, r1
    160e:	a3 5a       	subi	r26, 0xA3	; 163
    1610:	bf 4f       	sbci	r27, 0xFF	; 255
    1612:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1614:	84 8d       	ldd	r24, Z+28	; 0x1c
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	8f 73       	andi	r24, 0x3F	; 63
    161c:	99 27       	eor	r25, r25
    161e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1620:	a6 89       	ldd	r26, Z+22	; 0x16
    1622:	b7 89       	ldd	r27, Z+23	; 0x17
    1624:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1626:	a0 89       	ldd	r26, Z+16	; 0x10
    1628:	b1 89       	ldd	r27, Z+17	; 0x11
    162a:	8c 91       	ld	r24, X
    162c:	83 70       	andi	r24, 0x03	; 3
    162e:	80 64       	ori	r24, 0x40	; 64
    1630:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1632:	93 8d       	ldd	r25, Z+27	; 0x1b
    1634:	84 8d       	ldd	r24, Z+28	; 0x1c
    1636:	98 13       	cpse	r25, r24
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    163a:	02 88       	ldd	r0, Z+18	; 0x12
    163c:	f3 89       	ldd	r31, Z+19	; 0x13
    163e:	e0 2d       	mov	r30, r0
    1640:	80 81       	ld	r24, Z
    1642:	8f 7d       	andi	r24, 0xDF	; 223
    1644:	80 83       	st	Z, r24
    1646:	08 95       	ret

00001648 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ec 01       	movw	r28, r24
  _written = true;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    165a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    165c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    165e:	98 13       	cpse	r25, r24
    1660:	05 c0       	rjmp	.+10     	; 0x166c <_ZN14HardwareSerial5writeEh+0x24>
    1662:	e8 89       	ldd	r30, Y+16	; 0x10
    1664:	f9 89       	ldd	r31, Y+17	; 0x11
    1666:	80 81       	ld	r24, Z
    1668:	85 fd       	sbrc	r24, 5
    166a:	25 c0       	rjmp	.+74     	; 0x16b6 <_ZN14HardwareSerial5writeEh+0x6e>
    166c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    166e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	0f 5f       	subi	r16, 0xFF	; 255
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	0f 73       	andi	r16, 0x3F	; 63
    1678:	11 27       	eor	r17, r17
    167a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    167c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    167e:	e8 12       	cpse	r14, r24
    1680:	0b c0       	rjmp	.+22     	; 0x1698 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	07 fc       	sbrc	r0, 7
    1686:	fa cf       	rjmp	.-12     	; 0x167c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1688:	e8 89       	ldd	r30, Y+16	; 0x10
    168a:	f9 89       	ldd	r31, Y+17	; 0x11
    168c:	80 81       	ld	r24, Z
    168e:	85 ff       	sbrs	r24, 5
    1690:	f5 cf       	rjmp	.-22     	; 0x167c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1692:	ce 01       	movw	r24, r28
    1694:	b7 df       	rcall	.-146    	; 0x1604 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1696:	f2 cf       	rjmp	.-28     	; 0x167c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169a:	fe 01       	movw	r30, r28
    169c:	e8 0f       	add	r30, r24
    169e:	f1 1d       	adc	r31, r1
    16a0:	e3 5a       	subi	r30, 0xA3	; 163
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    16a6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16a8:	f8 94       	cli
    _tx_buffer_head = i;
    16aa:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    16ac:	ea 89       	ldd	r30, Y+18	; 0x12
    16ae:	fb 89       	ldd	r31, Y+19	; 0x13
    16b0:	80 81       	ld	r24, Z
    16b2:	80 62       	ori	r24, 0x20	; 32
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    16b6:	9f b7       	in	r25, 0x3f	; 63
    16b8:	f8 94       	cli
      *_udr = c;
    16ba:	ee 89       	ldd	r30, Y+22	; 0x16
    16bc:	ff 89       	ldd	r31, Y+23	; 0x17
    16be:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    16c0:	e8 89       	ldd	r30, Y+16	; 0x10
    16c2:	f9 89       	ldd	r31, Y+17	; 0x11
    16c4:	80 81       	ld	r24, Z
    16c6:	83 70       	andi	r24, 0x03	; 3
    16c8:	80 64       	ori	r24, 0x40	; 64
    16ca:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16cc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	08 95       	ret

000016e0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    16e6:	88 8d       	ldd	r24, Y+24	; 0x18
    16e8:	88 23       	and	r24, r24
    16ea:	c1 f0       	breq	.+48     	; 0x171c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    16ec:	ea 89       	ldd	r30, Y+18	; 0x12
    16ee:	fb 89       	ldd	r31, Y+19	; 0x13
    16f0:	80 81       	ld	r24, Z
    16f2:	85 fd       	sbrc	r24, 5
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <_ZN14HardwareSerial5flushEv+0x20>
    16f6:	a8 89       	ldd	r26, Y+16	; 0x10
    16f8:	b9 89       	ldd	r27, Y+17	; 0x11
    16fa:	8c 91       	ld	r24, X
    16fc:	86 fd       	sbrc	r24, 6
    16fe:	0e c0       	rjmp	.+28     	; 0x171c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	07 fc       	sbrc	r0, 7
    1704:	f5 cf       	rjmp	.-22     	; 0x16f0 <_ZN14HardwareSerial5flushEv+0x10>
    1706:	80 81       	ld	r24, Z
    1708:	85 ff       	sbrs	r24, 5
    170a:	f2 cf       	rjmp	.-28     	; 0x16f0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    170c:	a8 89       	ldd	r26, Y+16	; 0x10
    170e:	b9 89       	ldd	r27, Y+17	; 0x11
    1710:	8c 91       	ld	r24, X
    1712:	85 ff       	sbrs	r24, 5
    1714:	ed cf       	rjmp	.-38     	; 0x16f0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1716:	ce 01       	movw	r24, r28
    1718:	75 df       	rcall	.-278    	; 0x1604 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    171a:	e8 cf       	rjmp	.-48     	; 0x16ec <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1722:	cf 92       	push	r12
    1724:	df 92       	push	r13
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	6a 01       	movw	r12, r20
    1734:	7b 01       	movw	r14, r22
    1736:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1738:	e8 89       	ldd	r30, Y+16	; 0x10
    173a:	f9 89       	ldd	r31, Y+17	; 0x11
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1740:	41 15       	cp	r20, r1
    1742:	51 4e       	sbci	r21, 0xE1	; 225
    1744:	61 05       	cpc	r22, r1
    1746:	71 05       	cpc	r23, r1
    1748:	b1 f0       	breq	.+44     	; 0x1776 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	79 e0       	ldi	r23, 0x09	; 9
    174e:	8d e3       	ldi	r24, 0x3D	; 61
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a7 01       	movw	r20, r14
    1754:	96 01       	movw	r18, r12
    1756:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodsi4>
    175a:	da 01       	movw	r26, r20
    175c:	c9 01       	movw	r24, r18
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	a1 09       	sbc	r26, r1
    1762:	b1 09       	sbc	r27, r1
    1764:	b6 95       	lsr	r27
    1766:	a7 95       	ror	r26
    1768:	97 95       	ror	r25
    176a:	87 95       	ror	r24
    176c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    176e:	21 15       	cp	r18, r1
    1770:	80 e1       	ldi	r24, 0x10	; 16
    1772:	38 07       	cpc	r19, r24
    1774:	a8 f0       	brcs	.+42     	; 0x17a0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1776:	e8 89       	ldd	r30, Y+16	; 0x10
    1778:	f9 89       	ldd	r31, Y+17	; 0x11
    177a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    177c:	60 e8       	ldi	r22, 0x80	; 128
    177e:	74 e8       	ldi	r23, 0x84	; 132
    1780:	8e e1       	ldi	r24, 0x1E	; 30
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a7 01       	movw	r20, r14
    1786:	96 01       	movw	r18, r12
    1788:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodsi4>
    178c:	da 01       	movw	r26, r20
    178e:	c9 01       	movw	r24, r18
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	a1 09       	sbc	r26, r1
    1794:	b1 09       	sbc	r27, r1
    1796:	b6 95       	lsr	r27
    1798:	a7 95       	ror	r26
    179a:	97 95       	ror	r25
    179c:	87 95       	ror	r24
    179e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    17a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    17a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    17a4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    17a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    17a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    17aa:	20 83       	st	Z, r18

  _written = false;
    17ac:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    17ae:	ec 89       	ldd	r30, Y+20	; 0x14
    17b0:	fd 89       	ldd	r31, Y+21	; 0x15
    17b2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    17b4:	ea 89       	ldd	r30, Y+18	; 0x12
    17b6:	fb 89       	ldd	r31, Y+19	; 0x13
    17b8:	80 81       	ld	r24, Z
    17ba:	80 61       	ori	r24, 0x10	; 16
    17bc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    17be:	ea 89       	ldd	r30, Y+18	; 0x12
    17c0:	fb 89       	ldd	r31, Y+19	; 0x13
    17c2:	80 81       	ld	r24, Z
    17c4:	88 60       	ori	r24, 0x08	; 8
    17c6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    17c8:	ea 89       	ldd	r30, Y+18	; 0x12
    17ca:	fb 89       	ldd	r31, Y+19	; 0x13
    17cc:	80 81       	ld	r24, Z
    17ce:	80 68       	ori	r24, 0x80	; 128
    17d0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    17d2:	ea 89       	ldd	r30, Y+18	; 0x12
    17d4:	fb 89       	ldd	r31, Y+19	; 0x13
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7d       	andi	r24, 0xDF	; 223
    17da:	80 83       	st	Z, r24
}
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	08 95       	ret

000017ec <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	0b b6       	in	r0, 0x3b	; 59
    17f8:	0f 92       	push	r0
    17fa:	2f 93       	push	r18
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1804:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <Serial+0x10>
    1808:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <Serial+0x11>
    180c:	80 81       	ld	r24, Z
    180e:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <Serial+0x16>
    1812:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <Serial+0x17>
    1816:	82 fd       	sbrc	r24, 2
    1818:	12 c0       	rjmp	.+36     	; 0x183e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    181a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    181c:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <Serial+0x19>
    1820:	8f 5f       	subi	r24, 0xFF	; 255
    1822:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1824:	20 91 b0 05 	lds	r18, 0x05B0	; 0x8005b0 <Serial+0x1a>
    1828:	82 17       	cp	r24, r18
    182a:	51 f0       	breq	.+20     	; 0x1840 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    182c:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <Serial+0x19>
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	ea 56       	subi	r30, 0x6A	; 106
    1834:	fa 4f       	sbci	r31, 0xFA	; 250
    1836:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1838:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <Serial+0x19>
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    183e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0b be       	out	0x3b, r0	; 59
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	0f 90       	pop	r0
    1854:	1f 90       	pop	r1
    1856:	18 95       	reti

00001858 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	0b b6       	in	r0, 0x3b	; 59
    1864:	0f 92       	push	r0
    1866:	2f 93       	push	r18
    1868:	3f 93       	push	r19
    186a:	4f 93       	push	r20
    186c:	5f 93       	push	r21
    186e:	6f 93       	push	r22
    1870:	7f 93       	push	r23
    1872:	8f 93       	push	r24
    1874:	9f 93       	push	r25
    1876:	af 93       	push	r26
    1878:	bf 93       	push	r27
    187a:	ef 93       	push	r30
    187c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    187e:	86 e9       	ldi	r24, 0x96	; 150
    1880:	95 e0       	ldi	r25, 0x05	; 5
    1882:	c0 de       	rcall	.-640    	; 0x1604 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0b be       	out	0x3b, r0	; 59
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0f 90       	pop	r0
    18a6:	1f 90       	pop	r1
    18a8:	18 95       	reti

000018aa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    18aa:	86 e9       	ldi	r24, 0x96	; 150
    18ac:	95 e0       	ldi	r25, 0x05	; 5
    18ae:	31 de       	rcall	.-926    	; 0x1512 <_ZN14HardwareSerial9availableEv>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	89 2b       	or	r24, r25
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <_Z17Serial0_availablev+0xe>
    18b6:	20 e0       	ldi	r18, 0x00	; 0
}
    18b8:	82 2f       	mov	r24, r18
    18ba:	08 95       	ret

000018bc <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    18bc:	e6 e9       	ldi	r30, 0x96	; 150
    18be:	f5 e0       	ldi	r31, 0x05	; 5
    18c0:	13 82       	std	Z+3, r1	; 0x03
    18c2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    18c4:	88 ee       	ldi	r24, 0xE8	; 232
    18c6:	93 e0       	ldi	r25, 0x03	; 3
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	84 83       	std	Z+4, r24	; 0x04
    18ce:	95 83       	std	Z+5, r25	; 0x05
    18d0:	a6 83       	std	Z+6, r26	; 0x06
    18d2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    18d4:	8b ec       	ldi	r24, 0xCB	; 203
    18d6:	93 e0       	ldi	r25, 0x03	; 3
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	85 ec       	ldi	r24, 0xC5	; 197
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	95 87       	std	Z+13, r25	; 0x0d
    18e2:	84 87       	std	Z+12, r24	; 0x0c
    18e4:	84 ec       	ldi	r24, 0xC4	; 196
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	97 87       	std	Z+15, r25	; 0x0f
    18ea:	86 87       	std	Z+14, r24	; 0x0e
    18ec:	80 ec       	ldi	r24, 0xC0	; 192
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 8b       	std	Z+17, r25	; 0x11
    18f2:	80 8b       	std	Z+16, r24	; 0x10
    18f4:	81 ec       	ldi	r24, 0xC1	; 193
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	93 8b       	std	Z+19, r25	; 0x13
    18fa:	82 8b       	std	Z+18, r24	; 0x12
    18fc:	82 ec       	ldi	r24, 0xC2	; 194
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	95 8b       	std	Z+21, r25	; 0x15
    1902:	84 8b       	std	Z+20, r24	; 0x14
    1904:	86 ec       	ldi	r24, 0xC6	; 198
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	97 8b       	std	Z+23, r25	; 0x17
    190a:	86 8b       	std	Z+22, r24	; 0x16
    190c:	11 8e       	std	Z+25, r1	; 0x19
    190e:	12 8e       	std	Z+26, r1	; 0x1a
    1910:	13 8e       	std	Z+27, r1	; 0x1b
    1912:	14 8e       	std	Z+28, r1	; 0x1c
    1914:	08 95       	ret

00001916 <initVariant>:
    1916:	08 95       	ret

00001918 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1918:	43 d3       	rcall	.+1670   	; 0x1fa0 <init>

	initVariant();
    191a:	fd df       	rcall	.-6      	; 0x1916 <initVariant>
    191c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1920:	c6 ec       	ldi	r28, 0xC6	; 198
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1922:	da e0       	ldi	r29, 0x0A	; 10
    1924:	0e 94 b7 01 	call	0x36e	; 0x36e <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    1928:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    192a:	e1 f3       	breq	.-8      	; 0x1924 <main+0xc>
    192c:	2f de       	rcall	.-930    	; 0x158c <_Z14serialEventRunv>
    192e:	fa cf       	rjmp	.-12     	; 0x1924 <main+0xc>

00001930 <_ZN5Print5writeEPKhj>:
    1930:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	6c 01       	movw	r12, r24
    1942:	7a 01       	movw	r14, r20
    1944:	8b 01       	movw	r16, r22
    1946:	c0 e0       	ldi	r28, 0x00	; 0
    1948:	d0 e0       	ldi	r29, 0x00	; 0
    194a:	ce 15       	cp	r28, r14
    194c:	df 05       	cpc	r29, r15
    194e:	81 f0       	breq	.+32     	; 0x1970 <_ZN5Print5writeEPKhj+0x40>
    1950:	d8 01       	movw	r26, r16
    1952:	6d 91       	ld	r22, X+
    1954:	8d 01       	movw	r16, r26
    1956:	d6 01       	movw	r26, r12
    1958:	ed 91       	ld	r30, X+
    195a:	fc 91       	ld	r31, X
    195c:	01 90       	ld	r0, Z+
    195e:	f0 81       	ld	r31, Z
    1960:	e0 2d       	mov	r30, r0
    1962:	c6 01       	movw	r24, r12
    1964:	19 95       	eicall
    1966:	89 2b       	or	r24, r25
    1968:	11 f0       	breq	.+4      	; 0x196e <_ZN5Print5writeEPKhj+0x3e>
    196a:	21 96       	adiw	r28, 0x01	; 1
    196c:	ee cf       	rjmp	.-36     	; 0x194a <_ZN5Print5writeEPKhj+0x1a>
    196e:	7e 01       	movw	r14, r28
    1970:	c7 01       	movw	r24, r14
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	08 95       	ret

00001984 <_ZN5Print5writeEPKc>:
    1984:	61 15       	cp	r22, r1
    1986:	71 05       	cpc	r23, r1
    1988:	79 f0       	breq	.+30     	; 0x19a8 <_ZN5Print5writeEPKc+0x24>
    198a:	fb 01       	movw	r30, r22
    198c:	01 90       	ld	r0, Z+
    198e:	00 20       	and	r0, r0
    1990:	e9 f7       	brne	.-6      	; 0x198c <_ZN5Print5writeEPKc+0x8>
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	af 01       	movw	r20, r30
    1996:	46 1b       	sub	r20, r22
    1998:	57 0b       	sbc	r21, r23
    199a:	dc 01       	movw	r26, r24
    199c:	ed 91       	ld	r30, X+
    199e:	fc 91       	ld	r31, X
    19a0:	02 80       	ldd	r0, Z+2	; 0x02
    19a2:	f3 81       	ldd	r31, Z+3	; 0x03
    19a4:	e0 2d       	mov	r30, r0
    19a6:	19 94       	eijmp
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	08 95       	ret

000019ae <_ZN5Print7printlnEv>:
    19ae:	69 ed       	ldi	r22, 0xD9	; 217
    19b0:	73 e0       	ldi	r23, 0x03	; 3
    19b2:	e8 cf       	rjmp	.-48     	; 0x1984 <_ZN5Print5writeEPKc>

000019b4 <_ZN5Print7printlnEPKc>:
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	ec 01       	movw	r28, r24
    19be:	e2 df       	rcall	.-60     	; 0x1984 <_ZN5Print5writeEPKc>
    19c0:	8c 01       	movw	r16, r24
    19c2:	ce 01       	movw	r24, r28
    19c4:	f4 df       	rcall	.-24     	; 0x19ae <_ZN5Print7printlnEv>
    19c6:	80 0f       	add	r24, r16
    19c8:	91 1f       	adc	r25, r17
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <_ZN5Print11printNumberEmh>:
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	a1 97       	sbiw	r28, 0x21	; 33
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	7c 01       	movw	r14, r24
    19fa:	fa 01       	movw	r30, r20
    19fc:	cb 01       	movw	r24, r22
    19fe:	19 a2       	std	Y+33, r1	; 0x21
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	08 f4       	brcc	.+2      	; 0x1a06 <_ZN5Print11printNumberEmh+0x32>
    1a04:	2a e0       	ldi	r18, 0x0A	; 10
    1a06:	8e 01       	movw	r16, r28
    1a08:	0f 5d       	subi	r16, 0xDF	; 223
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	82 2e       	mov	r8, r18
    1a0e:	91 2c       	mov	r9, r1
    1a10:	a1 2c       	mov	r10, r1
    1a12:	b1 2c       	mov	r11, r1
    1a14:	bf 01       	movw	r22, r30
    1a16:	a5 01       	movw	r20, r10
    1a18:	94 01       	movw	r18, r8
    1a1a:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodsi4>
    1a1e:	f9 01       	movw	r30, r18
    1a20:	ca 01       	movw	r24, r20
    1a22:	01 50       	subi	r16, 0x01	; 1
    1a24:	11 09       	sbc	r17, r1
    1a26:	6a 30       	cpi	r22, 0x0A	; 10
    1a28:	10 f4       	brcc	.+4      	; 0x1a2e <_ZN5Print11printNumberEmh+0x5a>
    1a2a:	60 5d       	subi	r22, 0xD0	; 208
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <_ZN5Print11printNumberEmh+0x5c>
    1a2e:	69 5c       	subi	r22, 0xC9	; 201
    1a30:	d8 01       	movw	r26, r16
    1a32:	6c 93       	st	X, r22
    1a34:	23 2b       	or	r18, r19
    1a36:	24 2b       	or	r18, r20
    1a38:	25 2b       	or	r18, r21
    1a3a:	61 f7       	brne	.-40     	; 0x1a14 <_ZN5Print11printNumberEmh+0x40>
    1a3c:	b8 01       	movw	r22, r16
    1a3e:	c7 01       	movw	r24, r14
    1a40:	a1 df       	rcall	.-190    	; 0x1984 <_ZN5Print5writeEPKc>
    1a42:	a1 96       	adiw	r28, 0x21	; 33
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	bf 90       	pop	r11
    1a5c:	af 90       	pop	r10
    1a5e:	9f 90       	pop	r9
    1a60:	8f 90       	pop	r8
    1a62:	08 95       	ret

00001a64 <_ZN5Print5printEmi>:
    1a64:	21 15       	cp	r18, r1
    1a66:	31 05       	cpc	r19, r1
    1a68:	41 f4       	brne	.+16     	; 0x1a7a <_ZN5Print5printEmi+0x16>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	01 90       	ld	r0, Z+
    1a72:	f0 81       	ld	r31, Z
    1a74:	e0 2d       	mov	r30, r0
    1a76:	64 2f       	mov	r22, r20
    1a78:	19 94       	eijmp
    1a7a:	ac cf       	rjmp	.-168    	; 0x19d4 <_ZN5Print11printNumberEmh>

00001a7c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1a86:	ee df       	rcall	.-36     	; 0x1a64 <_ZN5Print5printEmi>
    1a88:	8c 01       	movw	r16, r24
  n += println();
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	90 df       	rcall	.-224    	; 0x19ae <_ZN5Print7printlnEv>
  return n;
}
    1a8e:	80 0f       	add	r24, r16
    1a90:	91 1f       	adc	r25, r17
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1a9c:	08 95       	ret

00001a9e <attachInterrupt>:
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <attachInterrupt+0x6>
    1aa2:	70 c0       	rjmp	.+224    	; 0x1b84 <attachInterrupt+0xe6>
    1aa4:	a8 2f       	mov	r26, r24
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	aa 0f       	add	r26, r26
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	aa 5f       	subi	r26, 0xFA	; 250
    1aae:	bd 4f       	sbci	r27, 0xFD	; 253
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	7c 93       	st	X, r23
    1ab4:	6e 93       	st	-X, r22
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	fc 01       	movw	r30, r24
    1aba:	31 97       	sbiw	r30, 0x01	; 1
    1abc:	e7 30       	cpi	r30, 0x07	; 7
    1abe:	f1 05       	cpc	r31, r1
    1ac0:	a0 f5       	brcc	.+104    	; 0x1b2a <attachInterrupt+0x8c>
    1ac2:	88 27       	eor	r24, r24
    1ac4:	eb 57       	subi	r30, 0x7B	; 123
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aca:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__tablejump2__>
    1ace:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1ad2:	8c 7f       	andi	r24, 0xFC	; 252
    1ad4:	48 2b       	or	r20, r24
    1ad6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1ada:	e8 9a       	sbi	0x1d, 0	; 29
    1adc:	08 95       	ret
    1ade:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1ae2:	83 7f       	andi	r24, 0xF3	; 243
    1ae4:	44 0f       	add	r20, r20
    1ae6:	55 1f       	adc	r21, r21
    1ae8:	44 0f       	add	r20, r20
    1aea:	55 1f       	adc	r21, r21
    1aec:	48 2b       	or	r20, r24
    1aee:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1af2:	e9 9a       	sbi	0x1d, 1	; 29
    1af4:	08 95       	ret
    1af6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1afa:	8f 7c       	andi	r24, 0xCF	; 207
    1afc:	74 e0       	ldi	r23, 0x04	; 4
    1afe:	44 0f       	add	r20, r20
    1b00:	55 1f       	adc	r21, r21
    1b02:	7a 95       	dec	r23
    1b04:	e1 f7       	brne	.-8      	; 0x1afe <attachInterrupt+0x60>
    1b06:	48 2b       	or	r20, r24
    1b08:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1b0c:	ea 9a       	sbi	0x1d, 2	; 29
    1b0e:	08 95       	ret
    1b10:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1b14:	8f 73       	andi	r24, 0x3F	; 63
    1b16:	66 e0       	ldi	r22, 0x06	; 6
    1b18:	44 0f       	add	r20, r20
    1b1a:	55 1f       	adc	r21, r21
    1b1c:	6a 95       	dec	r22
    1b1e:	e1 f7       	brne	.-8      	; 0x1b18 <attachInterrupt+0x7a>
    1b20:	48 2b       	or	r20, r24
    1b22:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1b26:	eb 9a       	sbi	0x1d, 3	; 29
    1b28:	08 95       	ret
    1b2a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b2e:	8c 7f       	andi	r24, 0xFC	; 252
    1b30:	48 2b       	or	r20, r24
    1b32:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b36:	ec 9a       	sbi	0x1d, 4	; 29
    1b38:	08 95       	ret
    1b3a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b3e:	83 7f       	andi	r24, 0xF3	; 243
    1b40:	44 0f       	add	r20, r20
    1b42:	55 1f       	adc	r21, r21
    1b44:	44 0f       	add	r20, r20
    1b46:	55 1f       	adc	r21, r21
    1b48:	48 2b       	or	r20, r24
    1b4a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b4e:	ed 9a       	sbi	0x1d, 5	; 29
    1b50:	08 95       	ret
    1b52:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b56:	8f 7c       	andi	r24, 0xCF	; 207
    1b58:	24 e0       	ldi	r18, 0x04	; 4
    1b5a:	44 0f       	add	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	2a 95       	dec	r18
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <attachInterrupt+0xbc>
    1b62:	48 2b       	or	r20, r24
    1b64:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b68:	ee 9a       	sbi	0x1d, 6	; 29
    1b6a:	08 95       	ret
    1b6c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b70:	8f 73       	andi	r24, 0x3F	; 63
    1b72:	96 e0       	ldi	r25, 0x06	; 6
    1b74:	44 0f       	add	r20, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	9a 95       	dec	r25
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <attachInterrupt+0xd6>
    1b7c:	48 2b       	or	r20, r24
    1b7e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1b82:	ef 9a       	sbi	0x1d, 7	; 29
    1b84:	08 95       	ret

00001b86 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	0b b6       	in	r0, 0x3b	; 59
    1b92:	0f 92       	push	r0
    1b94:	2f 93       	push	r18
    1b96:	3f 93       	push	r19
    1b98:	4f 93       	push	r20
    1b9a:	5f 93       	push	r21
    1b9c:	6f 93       	push	r22
    1b9e:	7f 93       	push	r23
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	af 93       	push	r26
    1ba6:	bf 93       	push	r27
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
    1bac:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    1bb0:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    1bb4:	19 95       	eicall
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	bf 91       	pop	r27
    1bbc:	af 91       	pop	r26
    1bbe:	9f 91       	pop	r25
    1bc0:	8f 91       	pop	r24
    1bc2:	7f 91       	pop	r23
    1bc4:	6f 91       	pop	r22
    1bc6:	5f 91       	pop	r21
    1bc8:	4f 91       	pop	r20
    1bca:	3f 91       	pop	r19
    1bcc:	2f 91       	pop	r18
    1bce:	0f 90       	pop	r0
    1bd0:	0b be       	out	0x3b, r0	; 59
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	0b b6       	in	r0, 0x3b	; 59
    1be8:	0f 92       	push	r0
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
    1c02:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    1c06:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    1c0a:	19 95       	eicall
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	0b be       	out	0x3b, r0	; 59
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti

00001c32 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    1c32:	1f 92       	push	r1
    1c34:	0f 92       	push	r0
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	0b b6       	in	r0, 0x3b	; 59
    1c3e:	0f 92       	push	r0
    1c40:	2f 93       	push	r18
    1c42:	3f 93       	push	r19
    1c44:	4f 93       	push	r20
    1c46:	5f 93       	push	r21
    1c48:	6f 93       	push	r22
    1c4a:	7f 93       	push	r23
    1c4c:	8f 93       	push	r24
    1c4e:	9f 93       	push	r25
    1c50:	af 93       	push	r26
    1c52:	bf 93       	push	r27
    1c54:	ef 93       	push	r30
    1c56:	ff 93       	push	r31
    1c58:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    1c5c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    1c60:	19 95       	eicall
    1c62:	ff 91       	pop	r31
    1c64:	ef 91       	pop	r30
    1c66:	bf 91       	pop	r27
    1c68:	af 91       	pop	r26
    1c6a:	9f 91       	pop	r25
    1c6c:	8f 91       	pop	r24
    1c6e:	7f 91       	pop	r23
    1c70:	6f 91       	pop	r22
    1c72:	5f 91       	pop	r21
    1c74:	4f 91       	pop	r20
    1c76:	3f 91       	pop	r19
    1c78:	2f 91       	pop	r18
    1c7a:	0f 90       	pop	r0
    1c7c:	0b be       	out	0x3b, r0	; 59
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	0f 90       	pop	r0
    1c84:	1f 90       	pop	r1
    1c86:	18 95       	reti

00001c88 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    1c88:	1f 92       	push	r1
    1c8a:	0f 92       	push	r0
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	0f 92       	push	r0
    1c90:	11 24       	eor	r1, r1
    1c92:	0b b6       	in	r0, 0x3b	; 59
    1c94:	0f 92       	push	r0
    1c96:	2f 93       	push	r18
    1c98:	3f 93       	push	r19
    1c9a:	4f 93       	push	r20
    1c9c:	5f 93       	push	r21
    1c9e:	6f 93       	push	r22
    1ca0:	7f 93       	push	r23
    1ca2:	8f 93       	push	r24
    1ca4:	9f 93       	push	r25
    1ca6:	af 93       	push	r26
    1ca8:	bf 93       	push	r27
    1caa:	ef 93       	push	r30
    1cac:	ff 93       	push	r31
    1cae:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    1cb2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    1cb6:	19 95       	eicall
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	7f 91       	pop	r23
    1cc6:	6f 91       	pop	r22
    1cc8:	5f 91       	pop	r21
    1cca:	4f 91       	pop	r20
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	0f 90       	pop	r0
    1cd2:	0b be       	out	0x3b, r0	; 59
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    1cde:	1f 92       	push	r1
    1ce0:	0f 92       	push	r0
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	0f 92       	push	r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	0b b6       	in	r0, 0x3b	; 59
    1cea:	0f 92       	push	r0
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
    1d04:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    1d08:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    1d0c:	19 95       	eicall
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0b be       	out	0x3b, r0	; 59
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	0f 90       	pop	r0
    1d30:	1f 90       	pop	r1
    1d32:	18 95       	reti

00001d34 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	0b b6       	in	r0, 0x3b	; 59
    1d40:	0f 92       	push	r0
    1d42:	2f 93       	push	r18
    1d44:	3f 93       	push	r19
    1d46:	4f 93       	push	r20
    1d48:	5f 93       	push	r21
    1d4a:	6f 93       	push	r22
    1d4c:	7f 93       	push	r23
    1d4e:	8f 93       	push	r24
    1d50:	9f 93       	push	r25
    1d52:	af 93       	push	r26
    1d54:	bf 93       	push	r27
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
    1d5a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    1d5e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    1d62:	19 95       	eicall
    1d64:	ff 91       	pop	r31
    1d66:	ef 91       	pop	r30
    1d68:	bf 91       	pop	r27
    1d6a:	af 91       	pop	r26
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	7f 91       	pop	r23
    1d72:	6f 91       	pop	r22
    1d74:	5f 91       	pop	r21
    1d76:	4f 91       	pop	r20
    1d78:	3f 91       	pop	r19
    1d7a:	2f 91       	pop	r18
    1d7c:	0f 90       	pop	r0
    1d7e:	0b be       	out	0x3b, r0	; 59
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	0b b6       	in	r0, 0x3b	; 59
    1d96:	0f 92       	push	r0
    1d98:	2f 93       	push	r18
    1d9a:	3f 93       	push	r19
    1d9c:	4f 93       	push	r20
    1d9e:	5f 93       	push	r21
    1da0:	6f 93       	push	r22
    1da2:	7f 93       	push	r23
    1da4:	8f 93       	push	r24
    1da6:	9f 93       	push	r25
    1da8:	af 93       	push	r26
    1daa:	bf 93       	push	r27
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
    1db0:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    1db4:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    1db8:	19 95       	eicall
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	bf 91       	pop	r27
    1dc0:	af 91       	pop	r26
    1dc2:	9f 91       	pop	r25
    1dc4:	8f 91       	pop	r24
    1dc6:	7f 91       	pop	r23
    1dc8:	6f 91       	pop	r22
    1dca:	5f 91       	pop	r21
    1dcc:	4f 91       	pop	r20
    1dce:	3f 91       	pop	r19
    1dd0:	2f 91       	pop	r18
    1dd2:	0f 90       	pop	r0
    1dd4:	0b be       	out	0x3b, r0	; 59
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	0b b6       	in	r0, 0x3b	; 59
    1dec:	0f 92       	push	r0
    1dee:	2f 93       	push	r18
    1df0:	3f 93       	push	r19
    1df2:	4f 93       	push	r20
    1df4:	5f 93       	push	r21
    1df6:	6f 93       	push	r22
    1df8:	7f 93       	push	r23
    1dfa:	8f 93       	push	r24
    1dfc:	9f 93       	push	r25
    1dfe:	af 93       	push	r26
    1e00:	bf 93       	push	r27
    1e02:	ef 93       	push	r30
    1e04:	ff 93       	push	r31
    1e06:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    1e0a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    1e0e:	19 95       	eicall
    1e10:	ff 91       	pop	r31
    1e12:	ef 91       	pop	r30
    1e14:	bf 91       	pop	r27
    1e16:	af 91       	pop	r26
    1e18:	9f 91       	pop	r25
    1e1a:	8f 91       	pop	r24
    1e1c:	7f 91       	pop	r23
    1e1e:	6f 91       	pop	r22
    1e20:	5f 91       	pop	r21
    1e22:	4f 91       	pop	r20
    1e24:	3f 91       	pop	r19
    1e26:	2f 91       	pop	r18
    1e28:	0f 90       	pop	r0
    1e2a:	0b be       	out	0x3b, r0	; 59
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	0f 90       	pop	r0
    1e32:	1f 90       	pop	r1
    1e34:	18 95       	reti

00001e36 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1e36:	1f 92       	push	r1
    1e38:	0f 92       	push	r0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <timer0_millis>
    1e50:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <timer0_millis+0x1>
    1e54:	a0 91 36 06 	lds	r26, 0x0636	; 0x800636 <timer0_millis+0x2>
    1e58:	b0 91 37 06 	lds	r27, 0x0637	; 0x800637 <timer0_millis+0x3>
    1e5c:	30 91 33 06 	lds	r19, 0x0633	; 0x800633 <timer0_fract>
    1e60:	23 e0       	ldi	r18, 0x03	; 3
    1e62:	23 0f       	add	r18, r19
    1e64:	2d 37       	cpi	r18, 0x7D	; 125
    1e66:	20 f4       	brcc	.+8      	; 0x1e70 <__vector_23+0x3a>
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	b1 1d       	adc	r27, r1
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <__vector_23+0x44>
    1e70:	26 e8       	ldi	r18, 0x86	; 134
    1e72:	23 0f       	add	r18, r19
    1e74:	02 96       	adiw	r24, 0x02	; 2
    1e76:	a1 1d       	adc	r26, r1
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	20 93 33 06 	sts	0x0633, r18	; 0x800633 <timer0_fract>
    1e7e:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <timer0_millis>
    1e82:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <timer0_millis+0x1>
    1e86:	a0 93 36 06 	sts	0x0636, r26	; 0x800636 <timer0_millis+0x2>
    1e8a:	b0 93 37 06 	sts	0x0637, r27	; 0x800637 <timer0_millis+0x3>
    1e8e:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <timer0_overflow_count>
    1e92:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <timer0_overflow_count+0x1>
    1e96:	a0 91 3a 06 	lds	r26, 0x063A	; 0x80063a <timer0_overflow_count+0x2>
    1e9a:	b0 91 3b 06 	lds	r27, 0x063B	; 0x80063b <timer0_overflow_count+0x3>
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	a1 1d       	adc	r26, r1
    1ea2:	b1 1d       	adc	r27, r1
    1ea4:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <timer0_overflow_count>
    1ea8:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <timer0_overflow_count+0x1>
    1eac:	a0 93 3a 06 	sts	0x063A, r26	; 0x80063a <timer0_overflow_count+0x2>
    1eb0:	b0 93 3b 06 	sts	0x063B, r27	; 0x80063b <timer0_overflow_count+0x3>
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	3f 91       	pop	r19
    1ebe:	2f 91       	pop	r18
    1ec0:	0f 90       	pop	r0
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	0f 90       	pop	r0
    1ec6:	1f 90       	pop	r1
    1ec8:	18 95       	reti

00001eca <millis>:
    1eca:	2f b7       	in	r18, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	60 91 34 06 	lds	r22, 0x0634	; 0x800634 <timer0_millis>
    1ed2:	70 91 35 06 	lds	r23, 0x0635	; 0x800635 <timer0_millis+0x1>
    1ed6:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <timer0_millis+0x2>
    1eda:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <timer0_millis+0x3>
    1ede:	2f bf       	out	0x3f, r18	; 63
    1ee0:	08 95       	ret

00001ee2 <micros>:
    1ee2:	3f b7       	in	r19, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <timer0_overflow_count>
    1eea:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <timer0_overflow_count+0x1>
    1eee:	a0 91 3a 06 	lds	r26, 0x063A	; 0x80063a <timer0_overflow_count+0x2>
    1ef2:	b0 91 3b 06 	lds	r27, 0x063B	; 0x80063b <timer0_overflow_count+0x3>
    1ef6:	26 b5       	in	r18, 0x26	; 38
    1ef8:	a8 9b       	sbis	0x15, 0	; 21
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <micros+0x24>
    1efc:	2f 3f       	cpi	r18, 0xFF	; 255
    1efe:	19 f0       	breq	.+6      	; 0x1f06 <micros+0x24>
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	a1 1d       	adc	r26, r1
    1f04:	b1 1d       	adc	r27, r1
    1f06:	3f bf       	out	0x3f, r19	; 63
    1f08:	ba 2f       	mov	r27, r26
    1f0a:	a9 2f       	mov	r26, r25
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	88 27       	eor	r24, r24
    1f10:	82 0f       	add	r24, r18
    1f12:	91 1d       	adc	r25, r1
    1f14:	a1 1d       	adc	r26, r1
    1f16:	b1 1d       	adc	r27, r1
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	42 e0       	ldi	r20, 0x02	; 2
    1f1e:	66 0f       	add	r22, r22
    1f20:	77 1f       	adc	r23, r23
    1f22:	88 1f       	adc	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	4a 95       	dec	r20
    1f28:	d1 f7       	brne	.-12     	; 0x1f1e <micros+0x3c>
    1f2a:	08 95       	ret

00001f2c <delay>:
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	6b 01       	movw	r12, r22
    1f3e:	7c 01       	movw	r14, r24
    1f40:	d0 df       	rcall	.-96     	; 0x1ee2 <micros>
    1f42:	4b 01       	movw	r8, r22
    1f44:	5c 01       	movw	r10, r24
    1f46:	c1 14       	cp	r12, r1
    1f48:	d1 04       	cpc	r13, r1
    1f4a:	e1 04       	cpc	r14, r1
    1f4c:	f1 04       	cpc	r15, r1
    1f4e:	f9 f0       	breq	.+62     	; 0x1f8e <delay+0x62>
    1f50:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <yield>
    1f54:	c6 df       	rcall	.-116    	; 0x1ee2 <micros>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	88 19       	sub	r24, r8
    1f5c:	99 09       	sbc	r25, r9
    1f5e:	aa 09       	sbc	r26, r10
    1f60:	bb 09       	sbc	r27, r11
    1f62:	88 3e       	cpi	r24, 0xE8	; 232
    1f64:	93 40       	sbci	r25, 0x03	; 3
    1f66:	a1 05       	cpc	r26, r1
    1f68:	b1 05       	cpc	r27, r1
    1f6a:	68 f3       	brcs	.-38     	; 0x1f46 <delay+0x1a>
    1f6c:	21 e0       	ldi	r18, 0x01	; 1
    1f6e:	c2 1a       	sub	r12, r18
    1f70:	d1 08       	sbc	r13, r1
    1f72:	e1 08       	sbc	r14, r1
    1f74:	f1 08       	sbc	r15, r1
    1f76:	88 ee       	ldi	r24, 0xE8	; 232
    1f78:	88 0e       	add	r8, r24
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	98 1e       	adc	r9, r24
    1f7e:	a1 1c       	adc	r10, r1
    1f80:	b1 1c       	adc	r11, r1
    1f82:	c1 14       	cp	r12, r1
    1f84:	d1 04       	cpc	r13, r1
    1f86:	e1 04       	cpc	r14, r1
    1f88:	f1 04       	cpc	r15, r1
    1f8a:	21 f7       	brne	.-56     	; 0x1f54 <delay+0x28>
    1f8c:	dc cf       	rjmp	.-72     	; 0x1f46 <delay+0x1a>
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	9f 90       	pop	r9
    1f9c:	8f 90       	pop	r8
    1f9e:	08 95       	ret

00001fa0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1fa0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1fa2:	84 b5       	in	r24, 0x24	; 36
    1fa4:	82 60       	ori	r24, 0x02	; 2
    1fa6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1fa8:	84 b5       	in	r24, 0x24	; 36
    1faa:	81 60       	ori	r24, 0x01	; 1
    1fac:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1fae:	85 b5       	in	r24, 0x25	; 37
    1fb0:	82 60       	ori	r24, 0x02	; 2
    1fb2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1fb4:	85 b5       	in	r24, 0x25	; 37
    1fb6:	81 60       	ori	r24, 0x01	; 1
    1fb8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1fba:	ee e6       	ldi	r30, 0x6E	; 110
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	81 60       	ori	r24, 0x01	; 1
    1fc2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1fc4:	e1 e8       	ldi	r30, 0x81	; 129
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1fca:	80 81       	ld	r24, Z
    1fcc:	82 60       	ori	r24, 0x02	; 2
    1fce:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1fd0:	80 81       	ld	r24, Z
    1fd2:	81 60       	ori	r24, 0x01	; 1
    1fd4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1fd6:	e0 e8       	ldi	r30, 0x80	; 128
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	81 60       	ori	r24, 0x01	; 1
    1fde:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1fe0:	e1 eb       	ldi	r30, 0xB1	; 177
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	84 60       	ori	r24, 0x04	; 4
    1fe8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1fea:	e0 eb       	ldi	r30, 0xB0	; 176
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	81 60       	ori	r24, 0x01	; 1
    1ff2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1ff4:	e1 e9       	ldi	r30, 0x91	; 145
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	82 60       	ori	r24, 0x02	; 2
    1ffc:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1ffe:	80 81       	ld	r24, Z
    2000:	81 60       	ori	r24, 0x01	; 1
    2002:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2004:	e0 e9       	ldi	r30, 0x90	; 144
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	81 60       	ori	r24, 0x01	; 1
    200c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    200e:	e1 ea       	ldi	r30, 0xA1	; 161
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	82 60       	ori	r24, 0x02	; 2
    2016:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2018:	80 81       	ld	r24, Z
    201a:	81 60       	ori	r24, 0x01	; 1
    201c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    201e:	e0 ea       	ldi	r30, 0xA0	; 160
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	81 60       	ori	r24, 0x01	; 1
    2026:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2028:	e1 e2       	ldi	r30, 0x21	; 33
    202a:	f1 e0       	ldi	r31, 0x01	; 1
    202c:	80 81       	ld	r24, Z
    202e:	82 60       	ori	r24, 0x02	; 2
    2030:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2032:	80 81       	ld	r24, Z
    2034:	81 60       	ori	r24, 0x01	; 1
    2036:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2038:	e0 e2       	ldi	r30, 0x20	; 32
    203a:	f1 e0       	ldi	r31, 0x01	; 1
    203c:	80 81       	ld	r24, Z
    203e:	81 60       	ori	r24, 0x01	; 1
    2040:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2042:	ea e7       	ldi	r30, 0x7A	; 122
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	84 60       	ori	r24, 0x04	; 4
    204a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    204c:	80 81       	ld	r24, Z
    204e:	82 60       	ori	r24, 0x02	; 2
    2050:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2052:	80 81       	ld	r24, Z
    2054:	81 60       	ori	r24, 0x01	; 1
    2056:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2058:	80 81       	ld	r24, Z
    205a:	80 68       	ori	r24, 0x80	; 128
    205c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    205e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2062:	08 95       	ret

00002064 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	fc 01       	movw	r30, r24
    2068:	31 97       	sbiw	r30, 0x01	; 1
    206a:	e2 31       	cpi	r30, 0x12	; 18
    206c:	f1 05       	cpc	r31, r1
    206e:	08 f0       	brcs	.+2      	; 0x2072 <turnOffPWM+0xe>
    2070:	4e c0       	rjmp	.+156    	; 0x210e <turnOffPWM+0xaa>
    2072:	88 27       	eor	r24, r24
    2074:	e4 57       	subi	r30, 0x74	; 116
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	8f 4f       	sbci	r24, 0xFF	; 255
    207a:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    207e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2082:	8f 77       	andi	r24, 0x7F	; 127
    2084:	03 c0       	rjmp	.+6      	; 0x208c <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2086:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    208a:	8f 7d       	andi	r24, 0xDF	; 223
    208c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2090:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2092:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2096:	87 7f       	andi	r24, 0xF7	; 247
    2098:	f9 cf       	rjmp	.-14     	; 0x208c <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    209a:	84 b5       	in	r24, 0x24	; 36
    209c:	8f 77       	andi	r24, 0x7F	; 127
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    20a0:	84 b5       	in	r24, 0x24	; 36
    20a2:	8f 7d       	andi	r24, 0xDF	; 223
    20a4:	84 bd       	out	0x24, r24	; 36
    20a6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    20a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    20ac:	8f 77       	andi	r24, 0x7F	; 127
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    20b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    20b4:	8f 7d       	andi	r24, 0xDF	; 223
    20b6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    20ba:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    20bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    20c0:	8f 77       	andi	r24, 0x7F	; 127
    20c2:	07 c0       	rjmp	.+14     	; 0x20d2 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    20c4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    20c8:	8f 7d       	andi	r24, 0xDF	; 223
    20ca:	03 c0       	rjmp	.+6      	; 0x20d2 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    20cc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    20d0:	87 7f       	andi	r24, 0xF7	; 247
    20d2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    20d6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    20d8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    20dc:	8f 77       	andi	r24, 0x7F	; 127
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    20e0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    20e4:	8f 7d       	andi	r24, 0xDF	; 223
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    20e8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    20ec:	87 7f       	andi	r24, 0xF7	; 247
    20ee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    20f2:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    20f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    20f8:	8f 77       	andi	r24, 0x7F	; 127
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    20fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2100:	8f 7d       	andi	r24, 0xDF	; 223
    2102:	03 c0       	rjmp	.+6      	; 0x210a <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2104:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2108:	87 7f       	andi	r24, 0xF7	; 247
    210a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    210e:	08 95       	ret

00002110 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	fc 01       	movw	r30, r24
    2118:	e9 56       	subi	r30, 0x69	; 105
    211a:	fe 4f       	sbci	r31, 0xFE	; 254
    211c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    211e:	fc 01       	movw	r30, r24
    2120:	e3 52       	subi	r30, 0x23	; 35
    2122:	fe 4f       	sbci	r31, 0xFE	; 254
    2124:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2126:	88 23       	and	r24, r24
    2128:	61 f1       	breq	.+88     	; 0x2182 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	fc 01       	movw	r30, r24
    2132:	e9 5a       	subi	r30, 0xA9	; 169
    2134:	fd 4f       	sbci	r31, 0xFD	; 253
    2136:	c5 91       	lpm	r28, Z+
    2138:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    213a:	fc 01       	movw	r30, r24
    213c:	e3 5c       	subi	r30, 0xC3	; 195
    213e:	fd 4f       	sbci	r31, 0xFD	; 253
    2140:	a5 91       	lpm	r26, Z+
    2142:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2144:	61 11       	cpse	r22, r1
    2146:	09 c0       	rjmp	.+18     	; 0x215a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2148:	9f b7       	in	r25, 0x3f	; 63
                cli();
    214a:	f8 94       	cli
		*reg &= ~bit;
    214c:	88 81       	ld	r24, Y
    214e:	20 95       	com	r18
    2150:	82 23       	and	r24, r18
    2152:	88 83       	st	Y, r24
		*out &= ~bit;
    2154:	ec 91       	ld	r30, X
    2156:	2e 23       	and	r18, r30
    2158:	0b c0       	rjmp	.+22     	; 0x2170 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    215a:	62 30       	cpi	r22, 0x02	; 2
    215c:	61 f4       	brne	.+24     	; 0x2176 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    215e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2160:	f8 94       	cli
		*reg &= ~bit;
    2162:	88 81       	ld	r24, Y
    2164:	32 2f       	mov	r19, r18
    2166:	30 95       	com	r19
    2168:	83 23       	and	r24, r19
    216a:	88 83       	st	Y, r24
		*out |= bit;
    216c:	ec 91       	ld	r30, X
    216e:	2e 2b       	or	r18, r30
    2170:	2c 93       	st	X, r18
		SREG = oldSREG;
    2172:	9f bf       	out	0x3f, r25	; 63
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2176:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2178:	f8 94       	cli
		*reg |= bit;
    217a:	e8 81       	ld	r30, Y
    217c:	2e 2b       	or	r18, r30
    217e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2180:	8f bf       	out	0x3f, r24	; 63
	}
}
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	f9 01       	movw	r30, r18
    2194:	ef 5a       	subi	r30, 0xAF	; 175
    2196:	fe 4f       	sbci	r31, 0xFE	; 254
    2198:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    219a:	f9 01       	movw	r30, r18
    219c:	e9 56       	subi	r30, 0x69	; 105
    219e:	fe 4f       	sbci	r31, 0xFE	; 254
    21a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21a2:	f9 01       	movw	r30, r18
    21a4:	e3 52       	subi	r30, 0x23	; 35
    21a6:	fe 4f       	sbci	r31, 0xFE	; 254
    21a8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21aa:	cc 23       	and	r28, r28
    21ac:	b9 f0       	breq	.+46     	; 0x21dc <digitalWrite+0x54>
    21ae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21b0:	81 11       	cpse	r24, r1
    21b2:	58 df       	rcall	.-336    	; 0x2064 <turnOffPWM>

	out = portOutputRegister(port);
    21b4:	ec 2f       	mov	r30, r28
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	e3 5c       	subi	r30, 0xC3	; 195
    21be:	fd 4f       	sbci	r31, 0xFD	; 253
    21c0:	a5 91       	lpm	r26, Z+
    21c2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21c4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    21c6:	f8 94       	cli

	if (val == LOW) {
    21c8:	11 11       	cpse	r17, r1
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <digitalWrite+0x4c>
		*out &= ~bit;
    21cc:	8c 91       	ld	r24, X
    21ce:	d0 95       	com	r29
    21d0:	d8 23       	and	r29, r24
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <digitalWrite+0x50>
	} else {
		*out |= bit;
    21d4:	ec 91       	ld	r30, X
    21d6:	de 2b       	or	r29, r30
    21d8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    21da:	9f bf       	out	0x3f, r25	; 63
}
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	08 95       	ret

000021e4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	f9 01       	movw	r30, r18
    21ee:	ef 5a       	subi	r30, 0xAF	; 175
    21f0:	fe 4f       	sbci	r31, 0xFE	; 254
    21f2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    21f4:	f9 01       	movw	r30, r18
    21f6:	e9 56       	subi	r30, 0x69	; 105
    21f8:	fe 4f       	sbci	r31, 0xFE	; 254
    21fa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21fc:	f9 01       	movw	r30, r18
    21fe:	e3 52       	subi	r30, 0x23	; 35
    2200:	fe 4f       	sbci	r31, 0xFE	; 254
    2202:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2204:	cc 23       	and	r28, r28
    2206:	89 f0       	breq	.+34     	; 0x222a <__stack+0x2b>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2208:	81 11       	cpse	r24, r1
    220a:	2c df       	rcall	.-424    	; 0x2064 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    220c:	ec 2f       	mov	r30, r28
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ed 5d       	subi	r30, 0xDD	; 221
    2216:	fd 4f       	sbci	r31, 0xFD	; 253
    2218:	a5 91       	lpm	r26, Z+
    221a:	b4 91       	lpm	r27, Z
    221c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    221e:	ed 23       	and	r30, r29
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	21 f4       	brne	.+8      	; 0x222e <__stack+0x2f>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <__stack+0x2f>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    2234:	fc 01       	movw	r30, r24
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <free>

0000223e <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2244:	88 81       	ld	r24, Y
    2246:	99 81       	ldd	r25, Y+1	; 0x01
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	11 f0       	breq	.+4      	; 0x2250 <_ZN6String10invalidateEv+0x12>
    224c:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <free>
	buffer = NULL;
    2250:	19 82       	std	Y+1, r1	; 0x01
    2252:	18 82       	st	Y, r1
	capacity = len = 0;
    2254:	1d 82       	std	Y+5, r1	; 0x05
    2256:	1c 82       	std	Y+4, r1	; 0x04
    2258:	1b 82       	std	Y+3, r1	; 0x03
    225a:	1a 82       	std	Y+2, r1	; 0x02
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
    226c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    226e:	6f 5f       	subi	r22, 0xFF	; 255
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	88 81       	ld	r24, Y
    2274:	99 81       	ldd	r25, Y+1	; 0x01
    2276:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <realloc>
	if (newbuffer) {
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	31 f0       	breq	.+12     	; 0x228a <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    227e:	99 83       	std	Y+1, r25	; 0x01
    2280:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2282:	1b 83       	std	Y+3, r17	; 0x03
    2284:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	01 c0       	rjmp	.+2      	; 0x228c <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    228a:	80 e0       	ldi	r24, 0x00	; 0
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    229c:	88 81       	ld	r24, Y
    229e:	99 81       	ldd	r25, Y+1	; 0x01
    22a0:	89 2b       	or	r24, r25
    22a2:	29 f0       	breq	.+10     	; 0x22ae <_ZN6String7reserveEj+0x18>
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	86 17       	cp	r24, r22
    22aa:	97 07       	cpc	r25, r23
    22ac:	58 f4       	brcc	.+22     	; 0x22c4 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    22ae:	ce 01       	movw	r24, r28
    22b0:	d8 df       	rcall	.-80     	; 0x2262 <_ZN6String12changeBufferEj>
    22b2:	88 23       	and	r24, r24
    22b4:	41 f0       	breq	.+16     	; 0x22c6 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    22b6:	8c 81       	ldd	r24, Y+4	; 0x04
    22b8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ba:	89 2b       	or	r24, r25
    22bc:	19 f4       	brne	.+6      	; 0x22c4 <_ZN6String7reserveEj+0x2e>
    22be:	e8 81       	ld	r30, Y
    22c0:	f9 81       	ldd	r31, Y+1	; 0x01
    22c2:	10 82       	st	Z, r1
    22c4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	ec 01       	movw	r28, r24
    22da:	7b 01       	movw	r14, r22
    22dc:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    22de:	ba 01       	movw	r22, r20
    22e0:	da df       	rcall	.-76     	; 0x2296 <_ZN6String7reserveEj>
    22e2:	81 11       	cpse	r24, r1
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <_ZN6String4copyEPKcj+0x20>
		invalidate();
    22e6:	ce 01       	movw	r24, r28
    22e8:	aa df       	rcall	.-172    	; 0x223e <_ZN6String10invalidateEv>
		return *this;
    22ea:	07 c0       	rjmp	.+14     	; 0x22fa <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    22ec:	1d 83       	std	Y+5, r17	; 0x05
    22ee:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    22f0:	b7 01       	movw	r22, r14
    22f2:	88 81       	ld	r24, Y
    22f4:	99 81       	ldd	r25, Y+1	; 0x01
    22f6:	0e 94 cc 20 	call	0x4198	; 0x4198 <strcpy>
	return *this;
}
    22fa:	ce 01       	movw	r24, r28
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	08 95       	ret

0000230a <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    230a:	fc 01       	movw	r30, r24
    230c:	11 82       	std	Z+1, r1	; 0x01
    230e:	10 82       	st	Z, r1
	capacity = 0;
    2310:	13 82       	std	Z+3, r1	; 0x03
    2312:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2314:	15 82       	std	Z+5, r1	; 0x05
    2316:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2318:	61 15       	cp	r22, r1
    231a:	71 05       	cpc	r23, r1
    231c:	49 f0       	breq	.+18     	; 0x2330 <_ZN6StringC1EPKc+0x26>
    231e:	fb 01       	movw	r30, r22
    2320:	01 90       	ld	r0, Z+
    2322:	00 20       	and	r0, r0
    2324:	e9 f7       	brne	.-6      	; 0x2320 <_ZN6StringC1EPKc+0x16>
    2326:	31 97       	sbiw	r30, 0x01	; 1
    2328:	af 01       	movw	r20, r30
    232a:	46 1b       	sub	r20, r22
    232c:	57 0b       	sbc	r21, r23
    232e:	ce cf       	rjmp	.-100    	; 0x22cc <_ZN6String4copyEPKcj>
    2330:	08 95       	ret

00002332 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	1f 92       	push	r1
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	69 83       	std	Y+1, r22	; 0x01
    233e:	dc 01       	movw	r26, r24
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	02 80       	ldd	r0, Z+2	; 0x02
    2346:	f3 81       	ldd	r31, Z+3	; 0x03
    2348:	e0 2d       	mov	r30, r0
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	be 01       	movw	r22, r28
    2350:	6f 5f       	subi	r22, 0xFF	; 255
    2352:	7f 4f       	sbci	r23, 0xFF	; 255
    2354:	19 95       	eicall
    2356:	0f 90       	pop	r0
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	08 95       	ret

0000235e <_ZN5SDLib4File5writeEPKhj>:
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	ec 01       	movw	r28, r24
    2364:	89 8d       	ldd	r24, Y+25	; 0x19
    2366:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	39 f4       	brne	.+14     	; 0x237a <_ZN5SDLib4File5writeEPKhj+0x1c>
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9b 83       	std	Y+3, r25	; 0x03
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0a c0       	rjmp	.+20     	; 0x238e <_ZN5SDLib4File5writeEPKhj+0x30>
    237a:	fc 01       	movw	r30, r24
    237c:	13 82       	std	Z+3, r1	; 0x03
    237e:	12 82       	std	Z+2, r1	; 0x02
    2380:	a7 d6       	rcall	.+3406   	; 0x30d0 <_ZN6SdFile5writeEPKvj>
    2382:	e9 8d       	ldd	r30, Y+25	; 0x19
    2384:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2386:	22 81       	ldd	r18, Z+2	; 0x02
    2388:	33 81       	ldd	r19, Z+3	; 0x03
    238a:	23 2b       	or	r18, r19
    238c:	79 f7       	brne	.-34     	; 0x236c <_ZN5SDLib4File5writeEPKhj+0xe>
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <_ZN5SDLib4File5flushEv>:
    2394:	fc 01       	movw	r30, r24
    2396:	81 8d       	ldd	r24, Z+25	; 0x19
    2398:	92 8d       	ldd	r25, Z+26	; 0x1a
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	09 f0       	breq	.+2      	; 0x23a0 <_ZN5SDLib4File5flushEv+0xc>
    239e:	48 c6       	rjmp	.+3216   	; 0x3030 <_ZN6SdFile4syncEv>
    23a0:	08 95       	ret

000023a2 <_ZN6SdFile4readEv>:
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	1f 92       	push	r1
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	be 01       	movw	r22, r28
    23b2:	6f 5f       	subi	r22, 0xFF	; 255
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	a4 d4       	rcall	.+2376   	; 0x2d00 <_ZN6SdFile4readEPvj>
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	19 f4       	brne	.+6      	; 0x23c2 <_ZN6SdFile4readEv+0x20>
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <_ZN6SdFile4readEv+0x24>
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
    23c6:	0f 90       	pop	r0
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <_ZN5SDLib4File4readEv>:
    23ce:	fc 01       	movw	r30, r24
    23d0:	81 8d       	ldd	r24, Z+25	; 0x19
    23d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	09 f0       	breq	.+2      	; 0x23da <_ZN5SDLib4File4readEv+0xc>
    23d8:	e4 cf       	rjmp	.-56     	; 0x23a2 <_ZN6SdFile4readEv>
    23da:	8f ef       	ldi	r24, 0xFF	; 255
    23dc:	9f ef       	ldi	r25, 0xFF	; 255
    23de:	08 95       	ret

000023e0 <_ZN5SDLib4File4peekEv>:
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	fc 01       	movw	r30, r24
    23ea:	81 8d       	ldd	r24, Z+25	; 0x19
    23ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	a9 f0       	breq	.+42     	; 0x241c <_ZN5SDLib4File4peekEv+0x3c>
    23f2:	ef 01       	movw	r28, r30
    23f4:	d6 df       	rcall	.-84     	; 0x23a2 <_ZN6SdFile4readEv>
    23f6:	8c 01       	movw	r16, r24
    23f8:	0f 3f       	cpi	r16, 0xFF	; 255
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	18 07       	cpc	r17, r24
    23fe:	89 f0       	breq	.+34     	; 0x2422 <_ZN5SDLib4File4peekEv+0x42>
    2400:	89 8d       	ldd	r24, Y+25	; 0x19
    2402:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2404:	fc 01       	movw	r30, r24
    2406:	42 85       	ldd	r20, Z+10	; 0x0a
    2408:	53 85       	ldd	r21, Z+11	; 0x0b
    240a:	64 85       	ldd	r22, Z+12	; 0x0c
    240c:	75 85       	ldd	r23, Z+13	; 0x0d
    240e:	41 50       	subi	r20, 0x01	; 1
    2410:	51 09       	sbc	r21, r1
    2412:	61 09       	sbc	r22, r1
    2414:	71 09       	sbc	r23, r1
    2416:	76 d5       	rcall	.+2796   	; 0x2f04 <_ZN6SdFile7seekSetEm>
    2418:	c8 01       	movw	r24, r16
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <_ZN5SDLib4File4peekEv+0x46>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <_ZN5SDLib4File4peekEv+0x46>
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	9f ef       	ldi	r25, 0xFF	; 255
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <_ZN5SDLib4FileC1Ev>:
    2430:	fc 01       	movw	r30, r24
    2432:	13 82       	std	Z+3, r1	; 0x03
    2434:	12 82       	std	Z+2, r1	; 0x02
    2436:	88 ee       	ldi	r24, 0xE8	; 232
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	84 83       	std	Z+4, r24	; 0x04
    2440:	95 83       	std	Z+5, r25	; 0x05
    2442:	a6 83       	std	Z+6, r26	; 0x06
    2444:	b7 83       	std	Z+7, r27	; 0x07
    2446:	8c ee       	ldi	r24, 0xEC	; 236
    2448:	93 e0       	ldi	r25, 0x03	; 3
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	12 8e       	std	Z+26, r1	; 0x1a
    2450:	11 8e       	std	Z+25, r1	; 0x19
    2452:	14 86       	std	Z+12, r1	; 0x0c
    2454:	08 95       	ret

00002456 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    2456:	dc 01       	movw	r26, r24
    2458:	59 96       	adiw	r26, 0x19	; 25
    245a:	ed 91       	ld	r30, X+
    245c:	fc 91       	ld	r31, X
    245e:	5a 97       	sbiw	r26, 0x1a	; 26
    2460:	30 97       	sbiw	r30, 0x00	; 0
    2462:	29 f0       	breq	.+10     	; 0x246e <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    2464:	62 85       	ldd	r22, Z+10	; 0x0a
    2466:	73 85       	ldd	r23, Z+11	; 0x0b
    2468:	84 85       	ldd	r24, Z+12	; 0x0c
    246a:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    246c:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    246e:	6f ef       	ldi	r22, 0xFF	; 255
    2470:	7f ef       	ldi	r23, 0xFF	; 255
    2472:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    2474:	08 95       	ret

00002476 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    2476:	dc 01       	movw	r26, r24
    2478:	59 96       	adiw	r26, 0x19	; 25
    247a:	ed 91       	ld	r30, X+
    247c:	fc 91       	ld	r31, X
    247e:	5a 97       	sbiw	r26, 0x1a	; 26
    2480:	30 97       	sbiw	r30, 0x00	; 0
    2482:	29 f0       	breq	.+10     	; 0x248e <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    2484:	63 89       	ldd	r22, Z+19	; 0x13
    2486:	74 89       	ldd	r23, Z+20	; 0x14
    2488:	85 89       	ldd	r24, Z+21	; 0x15
    248a:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    248c:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    2494:	08 95       	ret

00002496 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
  if (! _file) return 0;
    24a2:	fc 01       	movw	r30, r24
    24a4:	21 8d       	ldd	r18, Z+25	; 0x19
    24a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    24a8:	23 2b       	or	r18, r19
    24aa:	c9 f0       	breq	.+50     	; 0x24de <_ZN5SDLib4File9availableEv+0x48>
    24ac:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    24ae:	e3 df       	rcall	.-58     	; 0x2476 <_ZN5SDLib4File4sizeEv>
    24b0:	6b 01       	movw	r12, r22
    24b2:	7c 01       	movw	r14, r24
    24b4:	ce 01       	movw	r24, r28
    24b6:	cf df       	rcall	.-98     	; 0x2456 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    24b8:	a7 01       	movw	r20, r14
    24ba:	96 01       	movw	r18, r12
    24bc:	26 1b       	sub	r18, r22
    24be:	37 0b       	sbc	r19, r23
    24c0:	48 0b       	sbc	r20, r24
    24c2:	59 0b       	sbc	r21, r25
    24c4:	da 01       	movw	r26, r20
    24c6:	c9 01       	movw	r24, r18
    24c8:	81 15       	cp	r24, r1
    24ca:	30 e8       	ldi	r19, 0x80	; 128
    24cc:	93 07       	cpc	r25, r19
    24ce:	a1 05       	cpc	r26, r1
    24d0:	b1 05       	cpc	r27, r1
    24d2:	38 f0       	brcs	.+14     	; 0x24e2 <_ZN5SDLib4File9availableEv+0x4c>
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	9f e7       	ldi	r25, 0x7F	; 127
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	df 90       	pop	r13
    24ec:	cf 90       	pop	r12
    24ee:	08 95       	ret

000024f0 <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    24f0:	0f 93       	push	r16
    24f2:	1f 93       	push	r17
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	ec 01       	movw	r28, r24
    24fa:	8b 01       	movw	r16, r22
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN8SdVolume4initEP7Sd2Cardh>
    2502:	81 11       	cpse	r24, r1
    2504:	09 c0       	rjmp	.+18     	; 0x2518 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	b8 01       	movw	r22, r16
    250a:	ce 01       	movw	r24, r28
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <_ZN8SdVolume4initEP7Sd2Cardh>
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	08 95       	ret

00002524 <_ZN5SDLib7SDClass5beginEh>:
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	ec 01       	movw	r28, r24
    252e:	16 2f       	mov	r17, r22
    2530:	8f a5       	ldd	r24, Y+47	; 0x2f
    2532:	88 23       	and	r24, r24
    2534:	19 f0       	breq	.+6      	; 0x253c <_ZN5SDLib7SDClass5beginEh+0x18>
    2536:	ce 01       	movw	r24, r28
    2538:	8a 96       	adiw	r24, 0x2a	; 42
    253a:	bf d5       	rcall	.+2942   	; 0x30ba <_ZN6SdFile5closeEv>
    253c:	41 2f       	mov	r20, r17
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	ce 01       	movw	r24, r28
    2542:	60 d1       	rcall	.+704    	; 0x2804 <_ZN7Sd2Card4initEhh>
    2544:	88 23       	and	r24, r24
    2546:	79 f0       	breq	.+30     	; 0x2566 <_ZN5SDLib7SDClass5beginEh+0x42>
    2548:	8e 01       	movw	r16, r28
    254a:	04 5f       	subi	r16, 0xF4	; 244
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
    254e:	be 01       	movw	r22, r28
    2550:	c8 01       	movw	r24, r16
    2552:	ce df       	rcall	.-100    	; 0x24f0 <_ZN8SdVolume4initEP7Sd2Card>
    2554:	88 23       	and	r24, r24
    2556:	39 f0       	breq	.+14     	; 0x2566 <_ZN5SDLib7SDClass5beginEh+0x42>
    2558:	b8 01       	movw	r22, r16
    255a:	ce 01       	movw	r24, r28
    255c:	8a 96       	adiw	r24, 0x2a	; 42
    255e:	80 d3       	rcall	.+1792   	; 0x2c60 <_ZN6SdFile8openRootEP8SdVolume>
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	81 11       	cpse	r24, r1
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <_ZN5SDLib7SDClass5beginEh+0x44>
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	89 2f       	mov	r24, r25
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	08 95       	ret

00002574 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    2574:	ec e3       	ldi	r30, 0x3C	; 60
    2576:	f6 e0       	ldi	r31, 0x06	; 6
    2578:	15 82       	std	Z+5, r1	; 0x05
    257a:	16 82       	std	Z+6, r1	; 0x06
    257c:	11 86       	std	Z+9, r1	; 0x09
    257e:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 e0       	ldi	r26, 0x00	; 0
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	84 87       	std	Z+12, r24	; 0x0c
    258a:	95 87       	std	Z+13, r25	; 0x0d
    258c:	a6 87       	std	Z+14, r26	; 0x0e
    258e:	b7 87       	std	Z+15, r27	; 0x0f
    2590:	13 a2       	std	Z+35, r1	; 0x23
    2592:	15 a6       	std	Z+45, r1	; 0x2d
    2594:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2596:	8e ef       	ldi	r24, 0xFE	; 254
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	93 a7       	std	Z+43, r25	; 0x2b
    259c:	82 a7       	std	Z+42, r24	; 0x2a
    259e:	17 a6       	std	Z+47, r1	; 0x2f
    25a0:	08 95       	ret

000025a2 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    25a2:	9f b7       	in	r25, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
    25aa:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <_ZN8SPIClass13interruptSaveE>
    25ae:	21 30       	cpi	r18, 0x01	; 1
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    25b2:	8d bb       	out	0x1d, r24	; 29
    25b4:	9f bf       	out	0x3f, r25	; 63
    25b6:	08 95       	ret
    25b8:	8f bf       	out	0x3f, r24	; 63
    25ba:	08 95       	ret

000025bc <_ZN11SPISettingsC1Emhh>:
    25bc:	0f 93       	push	r16
    25be:	fc 01       	movw	r30, r24
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	92 e1       	ldi	r25, 0x12	; 18
    25c4:	aa e7       	ldi	r26, 0x7A	; 122
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	48 17       	cp	r20, r24
    25cc:	59 07       	cpc	r21, r25
    25ce:	6a 07       	cpc	r22, r26
    25d0:	7b 07       	cpc	r23, r27
    25d2:	40 f4       	brcc	.+16     	; 0x25e4 <_ZN11SPISettingsC1Emhh+0x28>
    25d4:	b6 95       	lsr	r27
    25d6:	a7 95       	ror	r26
    25d8:	97 95       	ror	r25
    25da:	87 95       	ror	r24
    25dc:	3f 5f       	subi	r19, 0xFF	; 255
    25de:	36 30       	cpi	r19, 0x06	; 6
    25e0:	a1 f7       	brne	.-24     	; 0x25ca <_ZN11SPISettingsC1Emhh+0xe>
    25e2:	37 e0       	ldi	r19, 0x07	; 7
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	93 27       	eor	r25, r19
    25e8:	22 23       	and	r18, r18
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <_ZN11SPISettingsC1Emhh+0x34>
    25ec:	20 e5       	ldi	r18, 0x50	; 80
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <_ZN11SPISettingsC1Emhh+0x36>
    25f0:	20 e7       	ldi	r18, 0x70	; 112
    25f2:	0c 70       	andi	r16, 0x0C	; 12
    25f4:	89 2f       	mov	r24, r25
    25f6:	86 95       	lsr	r24
    25f8:	08 2b       	or	r16, r24
    25fa:	02 2b       	or	r16, r18
    25fc:	00 83       	st	Z, r16
    25fe:	91 70       	andi	r25, 0x01	; 1
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <_ZN8SPIClass8transferEh>:
    2606:	8e bd       	out	0x2e, r24	; 46
    2608:	00 00       	nop
    260a:	0d b4       	in	r0, 0x2d	; 45
    260c:	07 fe       	sbrs	r0, 7
    260e:	fd cf       	rjmp	.-6      	; 0x260a <_ZN8SPIClass8transferEh+0x4>
    2610:	8e b5       	in	r24, 0x2e	; 46
    2612:	08 95       	ret

00002614 <_ZL6spiRecv>:
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	f7 cf       	rjmp	.-18     	; 0x2606 <_ZN8SPIClass8transferEh>

00002618 <_ZN7Sd2Card14chipSelectHighEv>:
    2618:	61 e0       	ldi	r22, 0x01	; 1
    261a:	fc 01       	movw	r30, r24
    261c:	84 81       	ldd	r24, Z+4	; 0x04
    261e:	b4 dd       	rcall	.-1176   	; 0x2188 <digitalWrite>
    2620:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <_ZL20chip_select_asserted>
    2624:	88 23       	and	r24, r24
    2626:	31 f0       	breq	.+12     	; 0x2634 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    2628:	10 92 85 06 	sts	0x0685, r1	; 0x800685 <_ZL20chip_select_asserted>
    262c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
    2630:	81 11       	cpse	r24, r1
    2632:	b7 cf       	rjmp	.-146    	; 0x25a2 <_ZN8SPIClass14endTransactionEv.part.3>
    2634:	08 95       	ret

00002636 <_ZN7Sd2Card13chipSelectLowEv>:
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	ec 01       	movw	r28, r24
    263c:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <_ZL20chip_select_asserted>
    2640:	81 11       	cpse	r24, r1
    2642:	09 c0       	rjmp	.+18     	; 0x2656 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <_ZL20chip_select_asserted>
    264a:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <_ZL8settings>
    264e:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <_ZL8settings+0x1>
    2652:	0e 94 88 02 	call	0x510	; 0x510 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	8c 81       	ldd	r24, Y+4	; 0x04
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	94 cd       	rjmp	.-1240   	; 0x2188 <digitalWrite>

00002660 <_ZN7Sd2Card7readEndEv>:
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	ec 01       	movw	r28, r24
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	88 23       	and	r24, r24
    266a:	79 f0       	breq	.+30     	; 0x268a <_ZN7Sd2Card7readEndEv+0x2a>
    266c:	8f 81       	ldd	r24, Y+7	; 0x07
    266e:	98 85       	ldd	r25, Y+8	; 0x08
    2670:	9c 01       	movw	r18, r24
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	38 87       	std	Y+8, r19	; 0x08
    2678:	2f 83       	std	Y+7, r18	; 0x07
    267a:	82 30       	cpi	r24, 0x02	; 2
    267c:	92 40       	sbci	r25, 0x02	; 2
    267e:	10 f4       	brcc	.+4      	; 0x2684 <_ZN7Sd2Card7readEndEv+0x24>
    2680:	c9 df       	rcall	.-110    	; 0x2614 <_ZL6spiRecv>
    2682:	f4 cf       	rjmp	.-24     	; 0x266c <_ZN7Sd2Card7readEndEv+0xc>
    2684:	ce 01       	movw	r24, r28
    2686:	c8 df       	rcall	.-112    	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2688:	1e 82       	std	Y+6, r1	; 0x06
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	08 95       	ret

00002690 <_ZN7Sd2Card10setSckRateEh>:
    2690:	0f 93       	push	r16
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	1f 92       	push	r1
    2698:	1f 92       	push	r1
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	67 30       	cpi	r22, 0x07	; 7
    26a0:	28 f0       	brcs	.+10     	; 0x26ac <_ZN7Sd2Card10setSckRateEh+0x1c>
    26a2:	26 e1       	ldi	r18, 0x16	; 22
    26a4:	fc 01       	movw	r30, r24
    26a6:	25 83       	std	Z+5, r18	; 0x05
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	46 c0       	rjmp	.+140    	; 0x2738 <_ZN7Sd2Card10setSckRateEh+0xa8>
    26ac:	62 30       	cpi	r22, 0x02	; 2
    26ae:	f9 f0       	breq	.+62     	; 0x26ee <_ZN7Sd2Card10setSckRateEh+0x5e>
    26b0:	58 f4       	brcc	.+22     	; 0x26c8 <_ZN7Sd2Card10setSckRateEh+0x38>
    26b2:	66 23       	and	r22, r22
    26b4:	a9 f0       	breq	.+42     	; 0x26e0 <_ZN7Sd2Card10setSckRateEh+0x50>
    26b6:	61 30       	cpi	r22, 0x01	; 1
    26b8:	79 f5       	brne	.+94     	; 0x2718 <_ZN7Sd2Card10setSckRateEh+0x88>
    26ba:	00 e0       	ldi	r16, 0x00	; 0
    26bc:	21 e0       	ldi	r18, 0x01	; 1
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	59 e0       	ldi	r21, 0x09	; 9
    26c2:	6d e3       	ldi	r22, 0x3D	; 61
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	2e c0       	rjmp	.+92     	; 0x2724 <_ZN7Sd2Card10setSckRateEh+0x94>
    26c8:	64 30       	cpi	r22, 0x04	; 4
    26ca:	f9 f0       	breq	.+62     	; 0x270a <_ZN7Sd2Card10setSckRateEh+0x7a>
    26cc:	b8 f0       	brcs	.+46     	; 0x26fc <_ZN7Sd2Card10setSckRateEh+0x6c>
    26ce:	65 30       	cpi	r22, 0x05	; 5
    26d0:	19 f5       	brne	.+70     	; 0x2718 <_ZN7Sd2Card10setSckRateEh+0x88>
    26d2:	00 e0       	ldi	r16, 0x00	; 0
    26d4:	21 e0       	ldi	r18, 0x01	; 1
    26d6:	40 e9       	ldi	r20, 0x90	; 144
    26d8:	50 ed       	ldi	r21, 0xD0	; 208
    26da:	63 e0       	ldi	r22, 0x03	; 3
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	22 c0       	rjmp	.+68     	; 0x2724 <_ZN7Sd2Card10setSckRateEh+0x94>
    26e0:	00 e0       	ldi	r16, 0x00	; 0
    26e2:	21 e0       	ldi	r18, 0x01	; 1
    26e4:	40 e4       	ldi	r20, 0x40	; 64
    26e6:	58 e7       	ldi	r21, 0x78	; 120
    26e8:	6d e7       	ldi	r22, 0x7D	; 125
    26ea:	71 e0       	ldi	r23, 0x01	; 1
    26ec:	1b c0       	rjmp	.+54     	; 0x2724 <_ZN7Sd2Card10setSckRateEh+0x94>
    26ee:	00 e0       	ldi	r16, 0x00	; 0
    26f0:	21 e0       	ldi	r18, 0x01	; 1
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	54 e8       	ldi	r21, 0x84	; 132
    26f6:	6e e1       	ldi	r22, 0x1E	; 30
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	14 c0       	rjmp	.+40     	; 0x2724 <_ZN7Sd2Card10setSckRateEh+0x94>
    26fc:	00 e0       	ldi	r16, 0x00	; 0
    26fe:	21 e0       	ldi	r18, 0x01	; 1
    2700:	40 e4       	ldi	r20, 0x40	; 64
    2702:	52 e4       	ldi	r21, 0x42	; 66
    2704:	6f e0       	ldi	r22, 0x0F	; 15
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <_ZN7Sd2Card10setSckRateEh+0x94>
    270a:	00 e0       	ldi	r16, 0x00	; 0
    270c:	21 e0       	ldi	r18, 0x01	; 1
    270e:	40 e2       	ldi	r20, 0x20	; 32
    2710:	51 ea       	ldi	r21, 0xA1	; 161
    2712:	67 e0       	ldi	r22, 0x07	; 7
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	06 c0       	rjmp	.+12     	; 0x2724 <_ZN7Sd2Card10setSckRateEh+0x94>
    2718:	00 e0       	ldi	r16, 0x00	; 0
    271a:	21 e0       	ldi	r18, 0x01	; 1
    271c:	48 e4       	ldi	r20, 0x48	; 72
    271e:	58 ee       	ldi	r21, 0xE8	; 232
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	ce 01       	movw	r24, r28
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	49 df       	rcall	.-366    	; 0x25bc <_ZN11SPISettingsC1Emhh>
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <_ZL8settings+0x1>
    2732:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <_ZL8settings>
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

00002744 <_ZN7Sd2Card11waitNotBusyEj>:
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	eb 01       	movw	r28, r22
    274e:	bd db       	rcall	.-2182   	; 0x1eca <millis>
    2750:	8b 01       	movw	r16, r22
    2752:	60 df       	rcall	.-320    	; 0x2614 <_ZL6spiRecv>
    2754:	8f 3f       	cpi	r24, 0xFF	; 255
    2756:	41 f0       	breq	.+16     	; 0x2768 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    2758:	b8 db       	rcall	.-2192   	; 0x1eca <millis>
    275a:	60 1b       	sub	r22, r16
    275c:	71 0b       	sbc	r23, r17
    275e:	6c 17       	cp	r22, r28
    2760:	7d 07       	cpc	r23, r29
    2762:	b8 f3       	brcs	.-18     	; 0x2752 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	01 c0       	rjmp	.+2      	; 0x276a <_ZN7Sd2Card11waitNotBusyEj+0x26>
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <_ZN7Sd2Card11cardCommandEhm>:
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	ec 01       	movw	r28, r24
    2788:	f6 2e       	mov	r15, r22
    278a:	49 01       	movw	r8, r18
    278c:	5a 01       	movw	r10, r20
    278e:	68 df       	rcall	.-304    	; 0x2660 <_ZN7Sd2Card7readEndEv>
    2790:	ce 01       	movw	r24, r28
    2792:	51 df       	rcall	.-350    	; 0x2636 <_ZN7Sd2Card13chipSelectLowEv>
    2794:	6c e2       	ldi	r22, 0x2C	; 44
    2796:	71 e0       	ldi	r23, 0x01	; 1
    2798:	ce 01       	movw	r24, r28
    279a:	d4 df       	rcall	.-88     	; 0x2744 <_ZN7Sd2Card11waitNotBusyEj>
    279c:	8f 2d       	mov	r24, r15
    279e:	80 64       	ori	r24, 0x40	; 64
    27a0:	32 df       	rcall	.-412    	; 0x2606 <_ZN8SPIClass8transferEh>
    27a2:	08 e1       	ldi	r16, 0x18	; 24
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	d5 01       	movw	r26, r10
    27a8:	c4 01       	movw	r24, r8
    27aa:	00 2e       	mov	r0, r16
    27ac:	04 c0       	rjmp	.+8      	; 0x27b6 <_ZN7Sd2Card11cardCommandEhm+0x42>
    27ae:	b6 95       	lsr	r27
    27b0:	a7 95       	ror	r26
    27b2:	97 95       	ror	r25
    27b4:	87 95       	ror	r24
    27b6:	0a 94       	dec	r0
    27b8:	d2 f7       	brpl	.-12     	; 0x27ae <_ZN7Sd2Card11cardCommandEhm+0x3a>
    27ba:	25 df       	rcall	.-438    	; 0x2606 <_ZN8SPIClass8transferEh>
    27bc:	08 50       	subi	r16, 0x08	; 8
    27be:	11 09       	sbc	r17, r1
    27c0:	08 3f       	cpi	r16, 0xF8	; 248
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	18 07       	cpc	r17, r24
    27c6:	79 f7       	brne	.-34     	; 0x27a6 <_ZN7Sd2Card11cardCommandEhm+0x32>
    27c8:	ff 20       	and	r15, r15
    27ca:	29 f0       	breq	.+10     	; 0x27d6 <_ZN7Sd2Card11cardCommandEhm+0x62>
    27cc:	88 e0       	ldi	r24, 0x08	; 8
    27ce:	f8 12       	cpse	r15, r24
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <_ZN7Sd2Card11cardCommandEhm+0x66>
    27d2:	87 e8       	ldi	r24, 0x87	; 135
    27d4:	03 c0       	rjmp	.+6      	; 0x27dc <_ZN7Sd2Card11cardCommandEhm+0x68>
    27d6:	85 e9       	ldi	r24, 0x95	; 149
    27d8:	01 c0       	rjmp	.+2      	; 0x27dc <_ZN7Sd2Card11cardCommandEhm+0x68>
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	14 df       	rcall	.-472    	; 0x2606 <_ZN8SPIClass8transferEh>
    27de:	10 e0       	ldi	r17, 0x00	; 0
    27e0:	19 df       	rcall	.-462    	; 0x2614 <_ZL6spiRecv>
    27e2:	8a 87       	std	Y+10, r24	; 0x0a
    27e4:	87 ff       	sbrs	r24, 7
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    27e8:	1f 3f       	cpi	r17, 0xFF	; 255
    27ea:	11 f0       	breq	.+4      	; 0x27f0 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    27ec:	1f 5f       	subi	r17, 0xFF	; 255
    27ee:	f8 cf       	rjmp	.-16     	; 0x27e0 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	bf 90       	pop	r11
    27fc:	af 90       	pop	r10
    27fe:	9f 90       	pop	r9
    2800:	8f 90       	pop	r8
    2802:	08 95       	ret

00002804 <_ZN7Sd2Card4initEhh>:
    2804:	7f 92       	push	r7
    2806:	8f 92       	push	r8
    2808:	9f 92       	push	r9
    280a:	af 92       	push	r10
    280c:	bf 92       	push	r11
    280e:	cf 92       	push	r12
    2810:	df 92       	push	r13
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	1f 92       	push	r1
    2820:	1f 92       	push	r1
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	7c 01       	movw	r14, r24
    2828:	76 2e       	mov	r7, r22
    282a:	fc 01       	movw	r30, r24
    282c:	13 86       	std	Z+11, r1	; 0x0b
    282e:	11 86       	std	Z+9, r1	; 0x09
    2830:	16 82       	std	Z+6, r1	; 0x06
    2832:	15 82       	std	Z+5, r1	; 0x05
    2834:	44 83       	std	Z+4, r20	; 0x04
    2836:	49 db       	rcall	.-2414   	; 0x1eca <millis>
    2838:	6b 01       	movw	r12, r22
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	f7 01       	movw	r30, r14
    283e:	84 81       	ldd	r24, Z+4	; 0x04
    2840:	67 dc       	rcall	.-1842   	; 0x2110 <pinMode>
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	f7 01       	movw	r30, r14
    2846:	84 81       	ldd	r24, Z+4	; 0x04
    2848:	9f dc       	rcall	.-1730   	; 0x2188 <digitalWrite>
    284a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN8SPIClass5beginEv>
    284e:	00 e0       	ldi	r16, 0x00	; 0
    2850:	21 e0       	ldi	r18, 0x01	; 1
    2852:	40 e9       	ldi	r20, 0x90	; 144
    2854:	50 ed       	ldi	r21, 0xD0	; 208
    2856:	63 e0       	ldi	r22, 0x03	; 3
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	ae de       	rcall	.-676    	; 0x25bc <_ZN11SPISettingsC1Emhh>
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <_ZL8settings+0x1>
    2868:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <_ZL8settings>
    286c:	0e 94 88 02 	call	0x510	; 0x510 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2870:	1a e0       	ldi	r17, 0x0A	; 10
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	c8 de       	rcall	.-624    	; 0x2606 <_ZN8SPIClass8transferEh>
    2876:	11 50       	subi	r17, 0x01	; 1
    2878:	e1 f7       	brne	.-8      	; 0x2872 <_ZN7Sd2Card4initEhh+0x6e>
    287a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <_ZN8SPIClass13interruptModeE>
    287e:	81 11       	cpse	r24, r1
    2880:	90 de       	rcall	.-736    	; 0x25a2 <_ZN8SPIClass14endTransactionEv.part.3>
    2882:	c7 01       	movw	r24, r14
    2884:	d8 de       	rcall	.-592    	; 0x2636 <_ZN7Sd2Card13chipSelectLowEv>
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	a9 01       	movw	r20, r18
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	c7 01       	movw	r24, r14
    2890:	71 df       	rcall	.-286    	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    2892:	08 2f       	mov	r16, r24
    2894:	f7 01       	movw	r30, r14
    2896:	82 87       	std	Z+10, r24	; 0x0a
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	41 f0       	breq	.+16     	; 0x28ac <_ZN7Sd2Card4initEhh+0xa8>
    289c:	16 db       	rcall	.-2516   	; 0x1eca <millis>
    289e:	6c 19       	sub	r22, r12
    28a0:	7d 09       	sbc	r23, r13
    28a2:	61 3d       	cpi	r22, 0xD1	; 209
    28a4:	77 40       	sbci	r23, 0x07	; 7
    28a6:	78 f3       	brcs	.-34     	; 0x2886 <_ZN7Sd2Card4initEhh+0x82>
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	4a c0       	rjmp	.+148    	; 0x2940 <_ZN7Sd2Card4initEhh+0x13c>
    28ac:	2a ea       	ldi	r18, 0xAA	; 170
    28ae:	31 e0       	ldi	r19, 0x01	; 1
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	68 e0       	ldi	r22, 0x08	; 8
    28b6:	c7 01       	movw	r24, r14
    28b8:	5d df       	rcall	.-326    	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    28ba:	82 ff       	sbrs	r24, 2
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <_ZN7Sd2Card4initEhh+0xc0>
    28be:	f7 01       	movw	r30, r14
    28c0:	03 87       	std	Z+11, r16	; 0x0b
    28c2:	0d c0       	rjmp	.+26     	; 0x28de <_ZN7Sd2Card4initEhh+0xda>
    28c4:	04 e0       	ldi	r16, 0x04	; 4
    28c6:	a6 de       	rcall	.-692    	; 0x2614 <_ZL6spiRecv>
    28c8:	f7 01       	movw	r30, r14
    28ca:	82 87       	std	Z+10, r24	; 0x0a
    28cc:	01 50       	subi	r16, 0x01	; 1
    28ce:	d9 f7       	brne	.-10     	; 0x28c6 <_ZN7Sd2Card4initEhh+0xc2>
    28d0:	8a 3a       	cpi	r24, 0xAA	; 170
    28d2:	11 f0       	breq	.+4      	; 0x28d8 <_ZN7Sd2Card4initEhh+0xd4>
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	35 c0       	rjmp	.+106    	; 0x2942 <_ZN7Sd2Card4initEhh+0x13e>
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	f7 01       	movw	r30, r14
    28dc:	83 87       	std	Z+11, r24	; 0x0b
    28de:	f7 01       	movw	r30, r14
    28e0:	83 85       	ldd	r24, Z+11	; 0x0b
    28e2:	82 30       	cpi	r24, 0x02	; 2
    28e4:	21 f0       	breq	.+8      	; 0x28ee <_ZN7Sd2Card4initEhh+0xea>
    28e6:	81 2c       	mov	r8, r1
    28e8:	91 2c       	mov	r9, r1
    28ea:	54 01       	movw	r10, r8
    28ec:	05 c0       	rjmp	.+10     	; 0x28f8 <_ZN7Sd2Card4initEhh+0xf4>
    28ee:	81 2c       	mov	r8, r1
    28f0:	91 2c       	mov	r9, r1
    28f2:	a1 2c       	mov	r10, r1
    28f4:	80 e4       	ldi	r24, 0x40	; 64
    28f6:	b8 2e       	mov	r11, r24
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	a9 01       	movw	r20, r18
    28fe:	67 e3       	ldi	r22, 0x37	; 55
    2900:	c7 01       	movw	r24, r14
    2902:	38 df       	rcall	.-400    	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    2904:	a5 01       	movw	r20, r10
    2906:	94 01       	movw	r18, r8
    2908:	69 e2       	ldi	r22, 0x29	; 41
    290a:	c7 01       	movw	r24, r14
    290c:	33 df       	rcall	.-410    	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    290e:	f7 01       	movw	r30, r14
    2910:	82 87       	std	Z+10, r24	; 0x0a
    2912:	88 23       	and	r24, r24
    2914:	41 f0       	breq	.+16     	; 0x2926 <_ZN7Sd2Card4initEhh+0x122>
    2916:	d9 da       	rcall	.-2638   	; 0x1eca <millis>
    2918:	6c 19       	sub	r22, r12
    291a:	7d 09       	sbc	r23, r13
    291c:	61 3d       	cpi	r22, 0xD1	; 209
    291e:	77 40       	sbci	r23, 0x07	; 7
    2920:	58 f3       	brcs	.-42     	; 0x28f8 <_ZN7Sd2Card4initEhh+0xf4>
    2922:	88 e0       	ldi	r24, 0x08	; 8
    2924:	0d c0       	rjmp	.+26     	; 0x2940 <_ZN7Sd2Card4initEhh+0x13c>
    2926:	f7 01       	movw	r30, r14
    2928:	83 85       	ldd	r24, Z+11	; 0x0b
    292a:	82 30       	cpi	r24, 0x02	; 2
    292c:	c1 f4       	brne	.+48     	; 0x295e <_ZN7Sd2Card4initEhh+0x15a>
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	a9 01       	movw	r20, r18
    2934:	6a e3       	ldi	r22, 0x3A	; 58
    2936:	c7 01       	movw	r24, r14
    2938:	1d df       	rcall	.-454    	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    293a:	88 23       	and	r24, r24
    293c:	31 f0       	breq	.+12     	; 0x294a <_ZN7Sd2Card4initEhh+0x146>
    293e:	86 e0       	ldi	r24, 0x06	; 6
    2940:	f7 01       	movw	r30, r14
    2942:	85 83       	std	Z+5, r24	; 0x05
    2944:	c7 01       	movw	r24, r14
    2946:	68 de       	rcall	.-816    	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2948:	10 c0       	rjmp	.+32     	; 0x296a <_ZN7Sd2Card4initEhh+0x166>
    294a:	64 de       	rcall	.-824    	; 0x2614 <_ZL6spiRecv>
    294c:	80 7c       	andi	r24, 0xC0	; 192
    294e:	80 3c       	cpi	r24, 0xC0	; 192
    2950:	19 f4       	brne	.+6      	; 0x2958 <_ZN7Sd2Card4initEhh+0x154>
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	f7 01       	movw	r30, r14
    2956:	83 87       	std	Z+11, r24	; 0x0b
    2958:	5d de       	rcall	.-838    	; 0x2614 <_ZL6spiRecv>
    295a:	5c de       	rcall	.-840    	; 0x2614 <_ZL6spiRecv>
    295c:	5b de       	rcall	.-842    	; 0x2614 <_ZL6spiRecv>
    295e:	c7 01       	movw	r24, r14
    2960:	5b de       	rcall	.-842    	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2962:	67 2d       	mov	r22, r7
    2964:	c7 01       	movw	r24, r14
    2966:	94 de       	rcall	.-728    	; 0x2690 <_ZN7Sd2Card10setSckRateEh>
    2968:	18 2f       	mov	r17, r24
    296a:	81 2f       	mov	r24, r17
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	9f 90       	pop	r9
    2986:	8f 90       	pop	r8
    2988:	7f 90       	pop	r7
    298a:	08 95       	ret

0000298c <_ZN7Sd2Card14waitStartBlockEv>:
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	ec 01       	movw	r28, r24
    2996:	99 da       	rcall	.-2766   	; 0x1eca <millis>
    2998:	8b 01       	movw	r16, r22
    299a:	3c de       	rcall	.-904    	; 0x2614 <_ZL6spiRecv>
    299c:	8a 87       	std	Y+10, r24	; 0x0a
    299e:	8f 3f       	cpi	r24, 0xFF	; 255
    29a0:	41 f4       	brne	.+16     	; 0x29b2 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    29a2:	93 da       	rcall	.-2778   	; 0x1eca <millis>
    29a4:	60 1b       	sub	r22, r16
    29a6:	71 0b       	sbc	r23, r17
    29a8:	6d 32       	cpi	r22, 0x2D	; 45
    29aa:	71 40       	sbci	r23, 0x01	; 1
    29ac:	b0 f3       	brcs	.-20     	; 0x299a <_ZN7Sd2Card14waitStartBlockEv+0xe>
    29ae:	8f e0       	ldi	r24, 0x0F	; 15
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    29b2:	8e 3f       	cpi	r24, 0xFE	; 254
    29b4:	31 f0       	breq	.+12     	; 0x29c2 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    29b6:	8d e0       	ldi	r24, 0x0D	; 13
    29b8:	8d 83       	std	Y+5, r24	; 0x05
    29ba:	ce 01       	movw	r24, r28
    29bc:	2d de       	rcall	.-934    	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	08 95       	ret

000029ce <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	ec 01       	movw	r28, r24
    29e0:	69 01       	movw	r12, r18
    29e2:	c8 01       	movw	r24, r16
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	92 40       	sbci	r25, 0x02	; 2
    29ec:	08 f0       	brcs	.+2      	; 0x29f0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    29ee:	57 c0       	rjmp	.+174    	; 0x2a9e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    29f0:	8e 81       	ldd	r24, Y+6	; 0x06
    29f2:	88 23       	and	r24, r24
    29f4:	71 f0       	breq	.+28     	; 0x2a12 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    29f6:	88 81       	ld	r24, Y
    29f8:	99 81       	ldd	r25, Y+1	; 0x01
    29fa:	aa 81       	ldd	r26, Y+2	; 0x02
    29fc:	bb 81       	ldd	r27, Y+3	; 0x03
    29fe:	84 17       	cp	r24, r20
    2a00:	95 07       	cpc	r25, r21
    2a02:	a6 07       	cpc	r26, r22
    2a04:	b7 07       	cpc	r27, r23
    2a06:	29 f4       	brne	.+10     	; 0x2a12 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    2a08:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0a:	98 85       	ldd	r25, Y+8	; 0x08
    2a0c:	c8 16       	cp	r12, r24
    2a0e:	d9 06       	cpc	r13, r25
    2a10:	00 f5       	brcc	.+64     	; 0x2a52 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    2a12:	48 83       	st	Y, r20
    2a14:	59 83       	std	Y+1, r21	; 0x01
    2a16:	6a 83       	std	Y+2, r22	; 0x02
    2a18:	7b 83       	std	Y+3, r23	; 0x03
    2a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1c:	83 30       	cpi	r24, 0x03	; 3
    2a1e:	39 f0       	breq	.+14     	; 0x2a2e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    2a20:	89 e0       	ldi	r24, 0x09	; 9
    2a22:	44 0f       	add	r20, r20
    2a24:	55 1f       	adc	r21, r21
    2a26:	66 1f       	adc	r22, r22
    2a28:	77 1f       	adc	r23, r23
    2a2a:	8a 95       	dec	r24
    2a2c:	d1 f7       	brne	.-12     	; 0x2a22 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    2a2e:	9a 01       	movw	r18, r20
    2a30:	ab 01       	movw	r20, r22
    2a32:	61 e1       	ldi	r22, 0x11	; 17
    2a34:	ce 01       	movw	r24, r28
    2a36:	9e de       	rcall	.-708    	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    2a38:	88 23       	and	r24, r24
    2a3a:	19 f0       	breq	.+6      	; 0x2a42 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    2a3c:	83 e0       	ldi	r24, 0x03	; 3
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	2e c0       	rjmp	.+92     	; 0x2a9e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    2a42:	ce 01       	movw	r24, r28
    2a44:	a3 df       	rcall	.-186    	; 0x298c <_ZN7Sd2Card14waitStartBlockEv>
    2a46:	88 23       	and	r24, r24
    2a48:	51 f1       	breq	.+84     	; 0x2a9e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    2a4a:	18 86       	std	Y+8, r1	; 0x08
    2a4c:	1f 82       	std	Y+7, r1	; 0x07
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	8e 83       	std	Y+6, r24	; 0x06
    2a52:	8f 81       	ldd	r24, Y+7	; 0x07
    2a54:	98 85       	ldd	r25, Y+8	; 0x08
    2a56:	8c 15       	cp	r24, r12
    2a58:	9d 05       	cpc	r25, r13
    2a5a:	38 f4       	brcc	.+14     	; 0x2a6a <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    2a5c:	db dd       	rcall	.-1098   	; 0x2614 <_ZL6spiRecv>
    2a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a60:	98 85       	ldd	r25, Y+8	; 0x08
    2a62:	01 96       	adiw	r24, 0x01	; 1
    2a64:	98 87       	std	Y+8, r25	; 0x08
    2a66:	8f 83       	std	Y+7, r24	; 0x07
    2a68:	f4 cf       	rjmp	.-24     	; 0x2a52 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    2a6a:	67 01       	movw	r12, r14
    2a6c:	e0 0e       	add	r14, r16
    2a6e:	f1 1e       	adc	r15, r17
    2a70:	ce 14       	cp	r12, r14
    2a72:	df 04       	cpc	r13, r15
    2a74:	29 f0       	breq	.+10     	; 0x2a80 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    2a76:	ce dd       	rcall	.-1124   	; 0x2614 <_ZL6spiRecv>
    2a78:	f6 01       	movw	r30, r12
    2a7a:	81 93       	st	Z+, r24
    2a7c:	6f 01       	movw	r12, r30
    2a7e:	f8 cf       	rjmp	.-16     	; 0x2a70 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    2a80:	8f 81       	ldd	r24, Y+7	; 0x07
    2a82:	98 85       	ldd	r25, Y+8	; 0x08
    2a84:	08 0f       	add	r16, r24
    2a86:	19 1f       	adc	r17, r25
    2a88:	18 87       	std	Y+8, r17	; 0x08
    2a8a:	0f 83       	std	Y+7, r16	; 0x07
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	88 23       	and	r24, r24
    2a90:	19 f0       	breq	.+6      	; 0x2a98 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    2a92:	01 15       	cp	r16, r1
    2a94:	12 40       	sbci	r17, 0x02	; 2
    2a96:	38 f0       	brcs	.+14     	; 0x2aa6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    2a98:	ce 01       	movw	r24, r28
    2a9a:	e2 dd       	rcall	.-1084   	; 0x2660 <_ZN7Sd2Card7readEndEv>
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	bb dd       	rcall	.-1162   	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	08 95       	ret

00002aba <_ZN7Sd2Card8readDataEmjjPh>:
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	01 15       	cp	r16, r1
    2ac4:	11 05       	cpc	r17, r1
    2ac6:	11 f0       	breq	.+4      	; 0x2acc <_ZN7Sd2Card8readDataEmjjPh+0x12>
    2ac8:	82 df       	rcall	.-252    	; 0x29ce <_ZN7Sd2Card8readDataEmjjPh.part.6>
    2aca:	01 c0       	rjmp	.+2      	; 0x2ace <_ZN7Sd2Card8readDataEmjjPh+0x14>
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	08 95       	ret

00002ad8 <_ZN7Sd2Card9readBlockEmPh>:
    2ad8:	ef 92       	push	r14
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	79 01       	movw	r14, r18
    2ae2:	00 e0       	ldi	r16, 0x00	; 0
    2ae4:	12 e0       	ldi	r17, 0x02	; 2
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	71 df       	rcall	.-286    	; 0x29ce <_ZN7Sd2Card8readDataEmjjPh.part.6>
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	ff 90       	pop	r15
    2af2:	ef 90       	pop	r14
    2af4:	08 95       	ret

00002af6 <_ZN7Sd2Card9writeDataEhPKh>:
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	8c 01       	movw	r16, r24
    2b04:	86 2f       	mov	r24, r22
    2b06:	7a 01       	movw	r14, r20
    2b08:	7e dd       	rcall	.-1284   	; 0x2606 <_ZN8SPIClass8transferEh>
    2b0a:	e7 01       	movw	r28, r14
    2b0c:	8e ef       	ldi	r24, 0xFE	; 254
    2b0e:	f8 1a       	sub	r15, r24
    2b10:	89 91       	ld	r24, Y+
    2b12:	79 dd       	rcall	.-1294   	; 0x2606 <_ZN8SPIClass8transferEh>
    2b14:	ce 15       	cp	r28, r14
    2b16:	df 05       	cpc	r29, r15
    2b18:	d9 f7       	brne	.-10     	; 0x2b10 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    2b1a:	8f ef       	ldi	r24, 0xFF	; 255
    2b1c:	74 dd       	rcall	.-1304   	; 0x2606 <_ZN8SPIClass8transferEh>
    2b1e:	8f ef       	ldi	r24, 0xFF	; 255
    2b20:	72 dd       	rcall	.-1308   	; 0x2606 <_ZN8SPIClass8transferEh>
    2b22:	78 dd       	rcall	.-1296   	; 0x2614 <_ZL6spiRecv>
    2b24:	f8 01       	movw	r30, r16
    2b26:	82 87       	std	Z+10, r24	; 0x0a
    2b28:	8f 71       	andi	r24, 0x1F	; 31
    2b2a:	85 30       	cpi	r24, 0x05	; 5
    2b2c:	31 f0       	breq	.+12     	; 0x2b3a <_ZN7Sd2Card9writeDataEhPKh+0x44>
    2b2e:	81 e1       	ldi	r24, 0x11	; 17
    2b30:	85 83       	std	Z+5, r24	; 0x05
    2b32:	c8 01       	movw	r24, r16
    2b34:	71 dd       	rcall	.-1310   	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <_ZN7Sd2Card9writeDataEhPKh+0x46>
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	ff 90       	pop	r15
    2b46:	ef 90       	pop	r14
    2b48:	08 95       	ret

00002b4a <_ZN7Sd2Card10writeBlockEmPKh>:
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	ec 01       	movw	r28, r24
    2b54:	89 01       	movw	r16, r18
    2b56:	41 15       	cp	r20, r1
    2b58:	51 05       	cpc	r21, r1
    2b5a:	61 05       	cpc	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	11 f4       	brne	.+4      	; 0x2b64 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    2b60:	82 e1       	ldi	r24, 0x12	; 18
    2b62:	2d c0       	rjmp	.+90     	; 0x2bbe <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2b64:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b66:	83 30       	cpi	r24, 0x03	; 3
    2b68:	39 f0       	breq	.+14     	; 0x2b78 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    2b6a:	89 e0       	ldi	r24, 0x09	; 9
    2b6c:	44 0f       	add	r20, r20
    2b6e:	55 1f       	adc	r21, r21
    2b70:	66 1f       	adc	r22, r22
    2b72:	77 1f       	adc	r23, r23
    2b74:	8a 95       	dec	r24
    2b76:	d1 f7       	brne	.-12     	; 0x2b6c <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    2b78:	9a 01       	movw	r18, r20
    2b7a:	ab 01       	movw	r20, r22
    2b7c:	68 e1       	ldi	r22, 0x18	; 24
    2b7e:	ce 01       	movw	r24, r28
    2b80:	f9 dd       	rcall	.-1038   	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    2b82:	88 23       	and	r24, r24
    2b84:	11 f0       	breq	.+4      	; 0x2b8a <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    2b86:	84 e0       	ldi	r24, 0x04	; 4
    2b88:	1a c0       	rjmp	.+52     	; 0x2bbe <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2b8a:	a8 01       	movw	r20, r16
    2b8c:	6e ef       	ldi	r22, 0xFE	; 254
    2b8e:	ce 01       	movw	r24, r28
    2b90:	b2 df       	rcall	.-156    	; 0x2af6 <_ZN7Sd2Card9writeDataEhPKh>
    2b92:	88 23       	and	r24, r24
    2b94:	a9 f0       	breq	.+42     	; 0x2bc0 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    2b96:	68 e5       	ldi	r22, 0x58	; 88
    2b98:	72 e0       	ldi	r23, 0x02	; 2
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	d3 dd       	rcall	.-1114   	; 0x2744 <_ZN7Sd2Card11waitNotBusyEj>
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    2ba2:	85 e1       	ldi	r24, 0x15	; 21
    2ba4:	0c c0       	rjmp	.+24     	; 0x2bbe <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	a9 01       	movw	r20, r18
    2bac:	6d e0       	ldi	r22, 0x0D	; 13
    2bae:	ce 01       	movw	r24, r28
    2bb0:	e1 dd       	rcall	.-1086   	; 0x2774 <_ZN7Sd2Card11cardCommandEhm>
    2bb2:	81 11       	cpse	r24, r1
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    2bb6:	2e dd       	rcall	.-1444   	; 0x2614 <_ZL6spiRecv>
    2bb8:	88 23       	and	r24, r24
    2bba:	31 f0       	breq	.+12     	; 0x2bc8 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    2bbc:	84 e1       	ldi	r24, 0x14	; 20
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	2a dd       	rcall	.-1452   	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	03 c0       	rjmp	.+6      	; 0x2bce <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    2bc8:	ce 01       	movw	r24, r28
    2bca:	26 dd       	rcall	.-1460   	; 0x2618 <_ZN7Sd2Card14chipSelectHighEv>
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2bd8:	e6 e8       	ldi	r30, 0x86	; 134
    2bda:	f6 e0       	ldi	r31, 0x06	; 6
    2bdc:	80 e5       	ldi	r24, 0x50	; 80
    2bde:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2be0:	11 82       	std	Z+1, r1	; 0x01
    2be2:	08 95       	ret

00002be4 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	ec 01       	movw	r28, r24
    2bea:	9c 01       	movw	r18, r24
    2bec:	2a 5f       	subi	r18, 0xFA	; 250
    2bee:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bfc:	0f d6       	rcall	.+3102   	; 0x381c <_ZN8SdVolume15allocContiguousEmPm>
    2bfe:	88 23       	and	r24, r24
    2c00:	a1 f0       	breq	.+40     	; 0x2c2a <_ZN6SdFile10addClusterEv+0x46>
    2c02:	8f 89       	ldd	r24, Y+23	; 0x17
    2c04:	98 8d       	ldd	r25, Y+24	; 0x18
    2c06:	a9 8d       	ldd	r26, Y+25	; 0x19
    2c08:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2c0a:	89 2b       	or	r24, r25
    2c0c:	8a 2b       	or	r24, r26
    2c0e:	8b 2b       	or	r24, r27
    2c10:	59 f4       	brne	.+22     	; 0x2c28 <_ZN6SdFile10addClusterEv+0x44>
    2c12:	8e 81       	ldd	r24, Y+6	; 0x06
    2c14:	9f 81       	ldd	r25, Y+7	; 0x07
    2c16:	a8 85       	ldd	r26, Y+8	; 0x08
    2c18:	b9 85       	ldd	r27, Y+9	; 0x09
    2c1a:	8f 8b       	std	Y+23, r24	; 0x17
    2c1c:	98 8f       	std	Y+24, r25	; 0x18
    2c1e:	a9 8f       	std	Y+25, r26	; 0x19
    2c20:	ba 8f       	std	Y+26, r27	; 0x1a
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	80 68       	ori	r24, 0x80	; 128
    2c26:	8c 83       	std	Y+4, r24	; 0x04
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	08 95       	ret

00002c30 <_ZN6SdFile13cacheDirEntryEh>:
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	ec 01       	movw	r28, r24
    2c36:	46 2f       	mov	r20, r22
    2c38:	6e 85       	ldd	r22, Y+14	; 0x0e
    2c3a:	7f 85       	ldd	r23, Y+15	; 0x0f
    2c3c:	88 89       	ldd	r24, Y+16	; 0x10
    2c3e:	99 89       	ldd	r25, Y+17	; 0x11
    2c40:	2a d4       	rcall	.+2132   	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    2c42:	88 23       	and	r24, r24
    2c44:	41 f0       	breq	.+16     	; 0x2c56 <_ZN6SdFile13cacheDirEntryEh+0x26>
    2c46:	8a 89       	ldd	r24, Y+18	; 0x12
    2c48:	20 e2       	ldi	r18, 0x20	; 32
    2c4a:	82 9f       	mul	r24, r18
    2c4c:	c0 01       	movw	r24, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	8f 56       	subi	r24, 0x6F	; 111
    2c52:	99 4f       	sbci	r25, 0xF9	; 249
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <_ZN6SdFile13cacheDirEntryEh+0x2a>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret

00002c60 <_ZN6SdFile8openRootEP8SdVolume>:
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	fc 01       	movw	r30, r24
    2c6a:	25 81       	ldd	r18, Z+5	; 0x05
    2c6c:	22 23       	and	r18, r18
    2c6e:	11 f0       	breq	.+4      	; 0x2c74 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	41 c0       	rjmp	.+130    	; 0x2cf6 <_ZN6SdFile8openRootEP8SdVolume+0x96>
    2c74:	8b 01       	movw	r16, r22
    2c76:	ec 01       	movw	r28, r24
    2c78:	fb 01       	movw	r30, r22
    2c7a:	87 89       	ldd	r24, Z+23	; 0x17
    2c7c:	80 31       	cpi	r24, 0x10	; 16
    2c7e:	b1 f4       	brne	.+44     	; 0x2cac <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	1f 8a       	std	Y+23, r1	; 0x17
    2c86:	18 8e       	std	Y+24, r1	; 0x18
    2c88:	19 8e       	std	Y+25, r1	; 0x19
    2c8a:	1a 8e       	std	Y+26, r1	; 0x1a
    2c8c:	80 8d       	ldd	r24, Z+24	; 0x18
    2c8e:	91 8d       	ldd	r25, Z+25	; 0x19
    2c90:	a0 e0       	ldi	r26, 0x00	; 0
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	25 e0       	ldi	r18, 0x05	; 5
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	aa 1f       	adc	r26, r26
    2c9c:	bb 1f       	adc	r27, r27
    2c9e:	2a 95       	dec	r18
    2ca0:	d1 f7       	brne	.-12     	; 0x2c96 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
    2ca4:	9c 8b       	std	Y+20, r25	; 0x14
    2ca6:	ad 8b       	std	Y+21, r26	; 0x15
    2ca8:	be 8b       	std	Y+22, r27	; 0x16
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <_ZN6SdFile8openRootEP8SdVolume+0x74>
    2cac:	80 32       	cpi	r24, 0x20	; 32
    2cae:	01 f7       	brne	.-64     	; 0x2c70 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	fb 01       	movw	r30, r22
    2cb6:	42 8d       	ldd	r20, Z+26	; 0x1a
    2cb8:	53 8d       	ldd	r21, Z+27	; 0x1b
    2cba:	64 8d       	ldd	r22, Z+28	; 0x1c
    2cbc:	75 8d       	ldd	r23, Z+29	; 0x1d
    2cbe:	4f 8b       	std	Y+23, r20	; 0x17
    2cc0:	58 8f       	std	Y+24, r21	; 0x18
    2cc2:	69 8f       	std	Y+25, r22	; 0x19
    2cc4:	7a 8f       	std	Y+26, r23	; 0x1a
    2cc6:	9e 01       	movw	r18, r28
    2cc8:	2d 5e       	subi	r18, 0xED	; 237
    2cca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ccc:	c8 01       	movw	r24, r16
    2cce:	9e d4       	rcall	.+2364   	; 0x360c <_ZNK8SdVolume9chainSizeEmPm>
    2cd0:	88 23       	and	r24, r24
    2cd2:	71 f2       	breq	.-100    	; 0x2c70 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2cd4:	1c 8f       	std	Y+28, r17	; 0x1c
    2cd6:	0b 8f       	std	Y+27, r16	; 0x1b
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	8c 83       	std	Y+4, r24	; 0x04
    2cdc:	1e 82       	std	Y+6, r1	; 0x06
    2cde:	1f 82       	std	Y+7, r1	; 0x07
    2ce0:	18 86       	std	Y+8, r1	; 0x08
    2ce2:	19 86       	std	Y+9, r1	; 0x09
    2ce4:	1a 86       	std	Y+10, r1	; 0x0a
    2ce6:	1b 86       	std	Y+11, r1	; 0x0b
    2ce8:	1c 86       	std	Y+12, r1	; 0x0c
    2cea:	1d 86       	std	Y+13, r1	; 0x0d
    2cec:	1e 86       	std	Y+14, r1	; 0x0e
    2cee:	1f 86       	std	Y+15, r1	; 0x0f
    2cf0:	18 8a       	std	Y+16, r1	; 0x10
    2cf2:	19 8a       	std	Y+17, r1	; 0x11
    2cf4:	1a 8a       	std	Y+18, r1	; 0x12
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	08 95       	ret

00002d00 <_ZN6SdFile4readEPvj>:
    2d00:	2f 92       	push	r2
    2d02:	3f 92       	push	r3
    2d04:	4f 92       	push	r4
    2d06:	5f 92       	push	r5
    2d08:	6f 92       	push	r6
    2d0a:	7f 92       	push	r7
    2d0c:	8f 92       	push	r8
    2d0e:	9f 92       	push	r9
    2d10:	af 92       	push	r10
    2d12:	bf 92       	push	r11
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	ec 01       	movw	r28, r24
    2d26:	5b 01       	movw	r10, r22
    2d28:	4a 01       	movw	r8, r20
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <_ZN6SdFile4readEPvj+0x36>
    2d30:	8f ef       	ldi	r24, 0xFF	; 255
    2d32:	9f ef       	ldi	r25, 0xFF	; 255
    2d34:	d4 c0       	rjmp	.+424    	; 0x2ede <_ZN6SdFile4readEPvj+0x1de>
    2d36:	8c 81       	ldd	r24, Y+4	; 0x04
    2d38:	80 ff       	sbrs	r24, 0
    2d3a:	fa cf       	rjmp	.-12     	; 0x2d30 <_ZN6SdFile4readEPvj+0x30>
    2d3c:	4b 88       	ldd	r4, Y+19	; 0x13
    2d3e:	5c 88       	ldd	r5, Y+20	; 0x14
    2d40:	6d 88       	ldd	r6, Y+21	; 0x15
    2d42:	7e 88       	ldd	r7, Y+22	; 0x16
    2d44:	4a 85       	ldd	r20, Y+10	; 0x0a
    2d46:	5b 85       	ldd	r21, Y+11	; 0x0b
    2d48:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d4c:	c4 01       	movw	r24, r8
    2d4e:	a0 e0       	ldi	r26, 0x00	; 0
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	93 01       	movw	r18, r6
    2d54:	82 01       	movw	r16, r4
    2d56:	04 1b       	sub	r16, r20
    2d58:	15 0b       	sbc	r17, r21
    2d5a:	26 0b       	sbc	r18, r22
    2d5c:	37 0b       	sbc	r19, r23
    2d5e:	08 17       	cp	r16, r24
    2d60:	19 07       	cpc	r17, r25
    2d62:	2a 07       	cpc	r18, r26
    2d64:	3b 07       	cpc	r19, r27
    2d66:	18 f4       	brcc	.+6      	; 0x2d6e <_ZN6SdFile4readEPvj+0x6e>
    2d68:	42 01       	movw	r8, r4
    2d6a:	84 1a       	sub	r8, r20
    2d6c:	95 0a       	sbc	r9, r21
    2d6e:	24 01       	movw	r4, r8
    2d70:	1e 01       	movw	r2, r28
    2d72:	26 e0       	ldi	r18, 0x06	; 6
    2d74:	22 0e       	add	r2, r18
    2d76:	31 1c       	adc	r3, r1
    2d78:	41 14       	cp	r4, r1
    2d7a:	51 04       	cpc	r5, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <_ZN6SdFile4readEPvj+0x80>
    2d7e:	7d c0       	rjmp	.+250    	; 0x2e7a <_ZN6SdFile4readEPvj+0x17a>
    2d80:	4a 85       	ldd	r20, Y+10	; 0x0a
    2d82:	5b 85       	ldd	r21, Y+11	; 0x0b
    2d84:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d86:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d88:	6a 01       	movw	r12, r20
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	d8 22       	and	r13, r24
    2d8e:	ed 81       	ldd	r30, Y+5	; 0x05
    2d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d94:	8a 01       	movw	r16, r20
    2d96:	9b 01       	movw	r18, r22
    2d98:	f9 e0       	ldi	r31, 0x09	; 9
    2d9a:	36 95       	lsr	r19
    2d9c:	27 95       	ror	r18
    2d9e:	17 95       	ror	r17
    2da0:	07 95       	ror	r16
    2da2:	fa 95       	dec	r31
    2da4:	d1 f7       	brne	.-12     	; 0x2d9a <_ZN6SdFile4readEPvj+0x9a>
    2da6:	e2 30       	cpi	r30, 0x02	; 2
    2da8:	61 f4       	brne	.+24     	; 0x2dc2 <_ZN6SdFile4readEPvj+0xc2>
    2daa:	fc 01       	movw	r30, r24
    2dac:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dae:	93 8d       	ldd	r25, Z+27	; 0x1b
    2db0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2db2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	60 0f       	add	r22, r16
    2dba:	71 1f       	adc	r23, r17
    2dbc:	82 1f       	adc	r24, r18
    2dbe:	93 1f       	adc	r25, r19
    2dc0:	3e c0       	rjmp	.+124    	; 0x2e3e <_ZN6SdFile4readEPvj+0x13e>
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	74 80       	ldd	r7, Z+4	; 0x04
    2dc6:	7a 94       	dec	r7
    2dc8:	70 22       	and	r7, r16
    2dca:	c1 14       	cp	r12, r1
    2dcc:	d1 04       	cpc	r13, r1
    2dce:	c1 f4       	brne	.+48     	; 0x2e00 <_ZN6SdFile4readEPvj+0x100>
    2dd0:	71 10       	cpse	r7, r1
    2dd2:	16 c0       	rjmp	.+44     	; 0x2e00 <_ZN6SdFile4readEPvj+0x100>
    2dd4:	45 2b       	or	r20, r21
    2dd6:	46 2b       	or	r20, r22
    2dd8:	47 2b       	or	r20, r23
    2dda:	49 f4       	brne	.+18     	; 0x2dee <_ZN6SdFile4readEPvj+0xee>
    2ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dde:	98 8d       	ldd	r25, Y+24	; 0x18
    2de0:	a9 8d       	ldd	r26, Y+25	; 0x19
    2de2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2de4:	8e 83       	std	Y+6, r24	; 0x06
    2de6:	9f 83       	std	Y+7, r25	; 0x07
    2de8:	a8 87       	std	Y+8, r26	; 0x08
    2dea:	b9 87       	std	Y+9, r27	; 0x09
    2dec:	09 c0       	rjmp	.+18     	; 0x2e00 <_ZN6SdFile4readEPvj+0x100>
    2dee:	4e 81       	ldd	r20, Y+6	; 0x06
    2df0:	5f 81       	ldd	r21, Y+7	; 0x07
    2df2:	68 85       	ldd	r22, Y+8	; 0x08
    2df4:	79 85       	ldd	r23, Y+9	; 0x09
    2df6:	91 01       	movw	r18, r2
    2df8:	87 d3       	rcall	.+1806   	; 0x3508 <_ZNK8SdVolume6fatGetEmPm>
    2dfa:	88 23       	and	r24, r24
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <_ZN6SdFile4readEPvj+0x100>
    2dfe:	98 cf       	rjmp	.-208    	; 0x2d30 <_ZN6SdFile4readEPvj+0x30>
    2e00:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2e02:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2e04:	8e 81       	ldd	r24, Y+6	; 0x06
    2e06:	9f 81       	ldd	r25, Y+7	; 0x07
    2e08:	a8 85       	ldd	r26, Y+8	; 0x08
    2e0a:	b9 85       	ldd	r27, Y+9	; 0x09
    2e0c:	02 97       	sbiw	r24, 0x02	; 2
    2e0e:	a1 09       	sbc	r26, r1
    2e10:	b1 09       	sbc	r27, r1
    2e12:	05 84       	ldd	r0, Z+13	; 0x0d
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <_ZN6SdFile4readEPvj+0x11e>
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	aa 1f       	adc	r26, r26
    2e1c:	bb 1f       	adc	r27, r27
    2e1e:	0a 94       	dec	r0
    2e20:	d2 f7       	brpl	.-12     	; 0x2e16 <_ZN6SdFile4readEPvj+0x116>
    2e22:	46 85       	ldd	r20, Z+14	; 0x0e
    2e24:	57 85       	ldd	r21, Z+15	; 0x0f
    2e26:	60 89       	ldd	r22, Z+16	; 0x10
    2e28:	71 89       	ldd	r23, Z+17	; 0x11
    2e2a:	84 0f       	add	r24, r20
    2e2c:	95 1f       	adc	r25, r21
    2e2e:	a6 1f       	adc	r26, r22
    2e30:	b7 1f       	adc	r27, r23
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	67 0d       	add	r22, r7
    2e38:	71 1d       	adc	r23, r1
    2e3a:	81 1d       	adc	r24, r1
    2e3c:	91 1d       	adc	r25, r1
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	32 e0       	ldi	r19, 0x02	; 2
    2e42:	2c 19       	sub	r18, r12
    2e44:	3d 09       	sbc	r19, r13
    2e46:	32 01       	movw	r6, r4
    2e48:	24 15       	cp	r18, r4
    2e4a:	35 05       	cpc	r19, r5
    2e4c:	08 f4       	brcc	.+2      	; 0x2e50 <_ZN6SdFile4readEPvj+0x150>
    2e4e:	39 01       	movw	r6, r18
    2e50:	2c 81       	ldd	r18, Y+4	; 0x04
    2e52:	26 fd       	sbrc	r18, 6
    2e54:	04 c0       	rjmp	.+8      	; 0x2e5e <_ZN6SdFile4readEPvj+0x15e>
    2e56:	61 14       	cp	r6, r1
    2e58:	f2 e0       	ldi	r31, 0x02	; 2
    2e5a:	7f 06       	cpc	r7, r31
    2e5c:	71 f5       	brne	.+92     	; 0x2eba <_ZN6SdFile4readEPvj+0x1ba>
    2e5e:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2e62:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e66:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e6a:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e6e:	60 17       	cp	r22, r16
    2e70:	71 07       	cpc	r23, r17
    2e72:	82 07       	cpc	r24, r18
    2e74:	93 07       	cpc	r25, r19
    2e76:	19 f4       	brne	.+6      	; 0x2e7e <_ZN6SdFile4readEPvj+0x17e>
    2e78:	20 c0       	rjmp	.+64     	; 0x2eba <_ZN6SdFile4readEPvj+0x1ba>
    2e7a:	c4 01       	movw	r24, r8
    2e7c:	30 c0       	rjmp	.+96     	; 0x2ede <_ZN6SdFile4readEPvj+0x1de>
    2e7e:	75 01       	movw	r14, r10
    2e80:	83 01       	movw	r16, r6
    2e82:	96 01       	movw	r18, r12
    2e84:	ab 01       	movw	r20, r22
    2e86:	bc 01       	movw	r22, r24
    2e88:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ZN8SdVolume7sdCard_E>
    2e8c:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <_ZN8SdVolume7sdCard_E+0x1>
    2e90:	14 de       	rcall	.-984    	; 0x2aba <_ZN7Sd2Card8readDataEmjjPh>
    2e92:	88 23       	and	r24, r24
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <_ZN6SdFile4readEPvj+0x198>
    2e96:	4c cf       	rjmp	.-360    	; 0x2d30 <_ZN6SdFile4readEPvj+0x30>
    2e98:	a6 0c       	add	r10, r6
    2e9a:	b7 1c       	adc	r11, r7
    2e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ea2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ea4:	86 0d       	add	r24, r6
    2ea6:	97 1d       	adc	r25, r7
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	b1 1d       	adc	r27, r1
    2eac:	8a 87       	std	Y+10, r24	; 0x0a
    2eae:	9b 87       	std	Y+11, r25	; 0x0b
    2eb0:	ac 87       	std	Y+12, r26	; 0x0c
    2eb2:	bd 87       	std	Y+13, r27	; 0x0d
    2eb4:	46 18       	sub	r4, r6
    2eb6:	57 08       	sbc	r5, r7
    2eb8:	5f cf       	rjmp	.-322    	; 0x2d78 <_ZN6SdFile4readEPvj+0x78>
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	ec d2       	rcall	.+1496   	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    2ebe:	88 23       	and	r24, r24
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <_ZN6SdFile4readEPvj+0x1c4>
    2ec2:	36 cf       	rjmp	.-404    	; 0x2d30 <_ZN6SdFile4readEPvj+0x30>
    2ec4:	f6 01       	movw	r30, r12
    2ec6:	ef 56       	subi	r30, 0x6F	; 111
    2ec8:	f9 4f       	sbci	r31, 0xF9	; 249
    2eca:	d5 01       	movw	r26, r10
    2ecc:	cf 01       	movw	r24, r30
    2ece:	86 0d       	add	r24, r6
    2ed0:	97 1d       	adc	r25, r7
    2ed2:	8e 17       	cp	r24, r30
    2ed4:	9f 07       	cpc	r25, r31
    2ed6:	01 f3       	breq	.-64     	; 0x2e98 <_ZN6SdFile4readEPvj+0x198>
    2ed8:	21 91       	ld	r18, Z+
    2eda:	2d 93       	st	X+, r18
    2edc:	fa cf       	rjmp	.-12     	; 0x2ed2 <_ZN6SdFile4readEPvj+0x1d2>
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	df 90       	pop	r13
    2eec:	cf 90       	pop	r12
    2eee:	bf 90       	pop	r11
    2ef0:	af 90       	pop	r10
    2ef2:	9f 90       	pop	r9
    2ef4:	8f 90       	pop	r8
    2ef6:	7f 90       	pop	r7
    2ef8:	6f 90       	pop	r6
    2efa:	5f 90       	pop	r5
    2efc:	4f 90       	pop	r4
    2efe:	3f 90       	pop	r3
    2f00:	2f 90       	pop	r2
    2f02:	08 95       	ret

00002f04 <_ZN6SdFile7seekSetEm>:
    2f04:	8f 92       	push	r8
    2f06:	9f 92       	push	r9
    2f08:	af 92       	push	r10
    2f0a:	bf 92       	push	r11
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	ec 01       	movw	r28, r24
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	81 11       	cpse	r24, r1
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <_ZN6SdFile7seekSetEm+0x24>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	77 c0       	rjmp	.+238    	; 0x3016 <_ZN6SdFile7seekSetEm+0x112>
    2f28:	0b 89       	ldd	r16, Y+19	; 0x13
    2f2a:	1c 89       	ldd	r17, Y+20	; 0x14
    2f2c:	2d 89       	ldd	r18, Y+21	; 0x15
    2f2e:	3e 89       	ldd	r19, Y+22	; 0x16
    2f30:	04 17       	cp	r16, r20
    2f32:	15 07       	cpc	r17, r21
    2f34:	26 07       	cpc	r18, r22
    2f36:	37 07       	cpc	r19, r23
    2f38:	a8 f3       	brcs	.-22     	; 0x2f24 <_ZN6SdFile7seekSetEm+0x20>
    2f3a:	6a 01       	movw	r12, r20
    2f3c:	7b 01       	movw	r14, r22
    2f3e:	82 30       	cpi	r24, 0x02	; 2
    2f40:	29 f4       	brne	.+10     	; 0x2f4c <_ZN6SdFile7seekSetEm+0x48>
    2f42:	ca 86       	std	Y+10, r12	; 0x0a
    2f44:	db 86       	std	Y+11, r13	; 0x0b
    2f46:	ec 86       	std	Y+12, r14	; 0x0c
    2f48:	fd 86       	std	Y+13, r15	; 0x0d
    2f4a:	0d c0       	rjmp	.+26     	; 0x2f66 <_ZN6SdFile7seekSetEm+0x62>
    2f4c:	c1 14       	cp	r12, r1
    2f4e:	d1 04       	cpc	r13, r1
    2f50:	e1 04       	cpc	r14, r1
    2f52:	f1 04       	cpc	r15, r1
    2f54:	51 f4       	brne	.+20     	; 0x2f6a <_ZN6SdFile7seekSetEm+0x66>
    2f56:	1e 82       	std	Y+6, r1	; 0x06
    2f58:	1f 82       	std	Y+7, r1	; 0x07
    2f5a:	18 86       	std	Y+8, r1	; 0x08
    2f5c:	19 86       	std	Y+9, r1	; 0x09
    2f5e:	1a 86       	std	Y+10, r1	; 0x0a
    2f60:	1b 86       	std	Y+11, r1	; 0x0b
    2f62:	1c 86       	std	Y+12, r1	; 0x0c
    2f64:	1d 86       	std	Y+13, r1	; 0x0d
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	56 c0       	rjmp	.+172    	; 0x3016 <_ZN6SdFile7seekSetEm+0x112>
    2f6a:	8a 84       	ldd	r8, Y+10	; 0x0a
    2f6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f6e:	ac 84       	ldd	r10, Y+12	; 0x0c
    2f70:	bd 84       	ldd	r11, Y+13	; 0x0d
    2f72:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2f74:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2f76:	25 85       	ldd	r18, Z+13	; 0x0d
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	27 5f       	subi	r18, 0xF7	; 247
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	b5 01       	movw	r22, r10
    2f80:	a4 01       	movw	r20, r8
    2f82:	41 50       	subi	r20, 0x01	; 1
    2f84:	51 09       	sbc	r21, r1
    2f86:	61 09       	sbc	r22, r1
    2f88:	71 09       	sbc	r23, r1
    2f8a:	02 2e       	mov	r0, r18
    2f8c:	04 c0       	rjmp	.+8      	; 0x2f96 <_ZN6SdFile7seekSetEm+0x92>
    2f8e:	76 95       	lsr	r23
    2f90:	67 95       	ror	r22
    2f92:	57 95       	ror	r21
    2f94:	47 95       	ror	r20
    2f96:	0a 94       	dec	r0
    2f98:	d2 f7       	brpl	.-12     	; 0x2f8e <_ZN6SdFile7seekSetEm+0x8a>
    2f9a:	d7 01       	movw	r26, r14
    2f9c:	c6 01       	movw	r24, r12
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	a1 09       	sbc	r26, r1
    2fa2:	b1 09       	sbc	r27, r1
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <_ZN6SdFile7seekSetEm+0xaa>
    2fa6:	b6 95       	lsr	r27
    2fa8:	a7 95       	ror	r26
    2faa:	97 95       	ror	r25
    2fac:	87 95       	ror	r24
    2fae:	2a 95       	dec	r18
    2fb0:	d2 f7       	brpl	.-12     	; 0x2fa6 <_ZN6SdFile7seekSetEm+0xa2>
    2fb2:	84 17       	cp	r24, r20
    2fb4:	95 07       	cpc	r25, r21
    2fb6:	a6 07       	cpc	r26, r22
    2fb8:	b7 07       	cpc	r27, r23
    2fba:	20 f0       	brcs	.+8      	; 0x2fc4 <_ZN6SdFile7seekSetEm+0xc0>
    2fbc:	89 28       	or	r8, r9
    2fbe:	8a 28       	or	r8, r10
    2fc0:	8b 28       	or	r8, r11
    2fc2:	71 f4       	brne	.+28     	; 0x2fe0 <_ZN6SdFile7seekSetEm+0xdc>
    2fc4:	4f 89       	ldd	r20, Y+23	; 0x17
    2fc6:	58 8d       	ldd	r21, Y+24	; 0x18
    2fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fcc:	4e 83       	std	Y+6, r20	; 0x06
    2fce:	5f 83       	std	Y+7, r21	; 0x07
    2fd0:	68 87       	std	Y+8, r22	; 0x08
    2fd2:	79 87       	std	Y+9, r23	; 0x09
    2fd4:	4c 01       	movw	r8, r24
    2fd6:	5d 01       	movw	r10, r26
    2fd8:	8e 01       	movw	r16, r28
    2fda:	0a 5f       	subi	r16, 0xFA	; 250
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	15 c0       	rjmp	.+42     	; 0x300a <_ZN6SdFile7seekSetEm+0x106>
    2fe0:	84 1b       	sub	r24, r20
    2fe2:	95 0b       	sbc	r25, r21
    2fe4:	a6 0b       	sbc	r26, r22
    2fe6:	b7 0b       	sbc	r27, r23
    2fe8:	f5 cf       	rjmp	.-22     	; 0x2fd4 <_ZN6SdFile7seekSetEm+0xd0>
    2fea:	4e 81       	ldd	r20, Y+6	; 0x06
    2fec:	5f 81       	ldd	r21, Y+7	; 0x07
    2fee:	68 85       	ldd	r22, Y+8	; 0x08
    2ff0:	79 85       	ldd	r23, Y+9	; 0x09
    2ff2:	98 01       	movw	r18, r16
    2ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff8:	87 d2       	rcall	.+1294   	; 0x3508 <_ZNK8SdVolume6fatGetEmPm>
    2ffa:	91 e0       	ldi	r25, 0x01	; 1
    2ffc:	89 1a       	sub	r8, r25
    2ffe:	91 08       	sbc	r9, r1
    3000:	a1 08       	sbc	r10, r1
    3002:	b1 08       	sbc	r11, r1
    3004:	88 23       	and	r24, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <_ZN6SdFile7seekSetEm+0x106>
    3008:	8d cf       	rjmp	.-230    	; 0x2f24 <_ZN6SdFile7seekSetEm+0x20>
    300a:	81 14       	cp	r8, r1
    300c:	91 04       	cpc	r9, r1
    300e:	a1 04       	cpc	r10, r1
    3010:	b1 04       	cpc	r11, r1
    3012:	59 f7       	brne	.-42     	; 0x2fea <_ZN6SdFile7seekSetEm+0xe6>
    3014:	96 cf       	rjmp	.-212    	; 0x2f42 <_ZN6SdFile7seekSetEm+0x3e>
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	df 90       	pop	r13
    3024:	cf 90       	pop	r12
    3026:	bf 90       	pop	r11
    3028:	af 90       	pop	r10
    302a:	9f 90       	pop	r9
    302c:	8f 90       	pop	r8
    302e:	08 95       	ret

00003030 <_ZN6SdFile4syncEv>:
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	ec 01       	movw	r28, r24
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	88 23       	and	r24, r24
    303e:	b9 f1       	breq	.+110    	; 0x30ae <_ZN6SdFile4syncEv+0x7e>
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	87 ff       	sbrs	r24, 7
    3044:	2f c0       	rjmp	.+94     	; 0x30a4 <_ZN6SdFile4syncEv+0x74>
    3046:	61 e0       	ldi	r22, 0x01	; 1
    3048:	ce 01       	movw	r24, r28
    304a:	f2 dd       	rcall	.-1052   	; 0x2c30 <_ZN6SdFile13cacheDirEntryEh>
    304c:	8c 01       	movw	r16, r24
    304e:	89 2b       	or	r24, r25
    3050:	71 f1       	breq	.+92     	; 0x30ae <_ZN6SdFile4syncEv+0x7e>
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	82 30       	cpi	r24, 0x02	; 2
    3056:	48 f4       	brcc	.+18     	; 0x306a <_ZN6SdFile4syncEv+0x3a>
    3058:	8b 89       	ldd	r24, Y+19	; 0x13
    305a:	9c 89       	ldd	r25, Y+20	; 0x14
    305c:	ad 89       	ldd	r26, Y+21	; 0x15
    305e:	be 89       	ldd	r27, Y+22	; 0x16
    3060:	f8 01       	movw	r30, r16
    3062:	84 8f       	std	Z+28, r24	; 0x1c
    3064:	95 8f       	std	Z+29, r25	; 0x1d
    3066:	a6 8f       	std	Z+30, r26	; 0x1e
    3068:	b7 8f       	std	Z+31, r27	; 0x1f
    306a:	8f 89       	ldd	r24, Y+23	; 0x17
    306c:	98 8d       	ldd	r25, Y+24	; 0x18
    306e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3070:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3072:	f8 01       	movw	r30, r16
    3074:	93 8f       	std	Z+27, r25	; 0x1b
    3076:	82 8f       	std	Z+26, r24	; 0x1a
    3078:	b5 8b       	std	Z+21, r27	; 0x15
    307a:	a4 8b       	std	Z+20, r26	; 0x14
    307c:	e0 91 88 06 	lds	r30, 0x0688	; 0x800688 <_ZN6SdFile9dateTime_E>
    3080:	f0 91 89 06 	lds	r31, 0x0689	; 0x800689 <_ZN6SdFile9dateTime_E+0x1>
    3084:	30 97       	sbiw	r30, 0x00	; 0
    3086:	59 f0       	breq	.+22     	; 0x309e <_ZN6SdFile4syncEv+0x6e>
    3088:	b8 01       	movw	r22, r16
    308a:	6a 5e       	subi	r22, 0xEA	; 234
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	c8 01       	movw	r24, r16
    3090:	48 96       	adiw	r24, 0x18	; 24
    3092:	19 95       	eicall
    3094:	f8 01       	movw	r30, r16
    3096:	80 8d       	ldd	r24, Z+24	; 0x18
    3098:	91 8d       	ldd	r25, Z+25	; 0x19
    309a:	93 8b       	std	Z+19, r25	; 0x13
    309c:	82 8b       	std	Z+18, r24	; 0x12
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	8f 77       	andi	r24, 0x7F	; 127
    30a2:	8c 83       	std	Y+4, r24	; 0x04
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	bb c1       	rjmp	.+886    	; 0x3424 <_ZN8SdVolume10cacheFlushEv>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret

000030ba <_ZN6SdFile5closeEv>:
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	ec 01       	movw	r28, r24
    30c0:	b7 df       	rcall	.-146    	; 0x3030 <_ZN6SdFile4syncEv>
    30c2:	88 23       	and	r24, r24
    30c4:	11 f0       	breq	.+4      	; 0x30ca <_ZN6SdFile5closeEv+0x10>
    30c6:	1d 82       	std	Y+5, r1	; 0x05
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret

000030d0 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    30d0:	2f 92       	push	r2
    30d2:	3f 92       	push	r3
    30d4:	4f 92       	push	r4
    30d6:	5f 92       	push	r5
    30d8:	6f 92       	push	r6
    30da:	7f 92       	push	r7
    30dc:	8f 92       	push	r8
    30de:	9f 92       	push	r9
    30e0:	af 92       	push	r10
    30e2:	bf 92       	push	r11
    30e4:	cf 92       	push	r12
    30e6:	df 92       	push	r13
    30e8:	ef 92       	push	r14
    30ea:	ff 92       	push	r15
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <_ZN6SdFile5writeEPKvj+0x26>
    30f6:	1f 92       	push	r1
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	8c 01       	movw	r16, r24
    30fe:	6b 01       	movw	r12, r22
    3100:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3102:	dc 01       	movw	r26, r24
    3104:	15 96       	adiw	r26, 0x05	; 5
    3106:	8c 91       	ld	r24, X
    3108:	15 97       	sbiw	r26, 0x05	; 5
    310a:	81 30       	cpi	r24, 0x01	; 1
    310c:	c1 f4       	brne	.+48     	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>
    310e:	14 96       	adiw	r26, 0x04	; 4
    3110:	8c 91       	ld	r24, X
    3112:	81 ff       	sbrs	r24, 1
    3114:	14 c0       	rjmp	.+40     	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3116:	82 ff       	sbrs	r24, 2
    3118:	1c c0       	rjmp	.+56     	; 0x3152 <_ZN6SdFile5writeEPKvj+0x82>
    311a:	f8 01       	movw	r30, r16
    311c:	43 89       	ldd	r20, Z+19	; 0x13
    311e:	54 89       	ldd	r21, Z+20	; 0x14
    3120:	65 89       	ldd	r22, Z+21	; 0x15
    3122:	76 89       	ldd	r23, Z+22	; 0x16
    3124:	82 85       	ldd	r24, Z+10	; 0x0a
    3126:	93 85       	ldd	r25, Z+11	; 0x0b
    3128:	a4 85       	ldd	r26, Z+12	; 0x0c
    312a:	b5 85       	ldd	r27, Z+13	; 0x0d
    312c:	84 17       	cp	r24, r20
    312e:	95 07       	cpc	r25, r21
    3130:	a6 07       	cpc	r26, r22
    3132:	b7 07       	cpc	r27, r23
    3134:	71 f0       	breq	.+28     	; 0x3152 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    3136:	c8 01       	movw	r24, r16
    3138:	e5 de       	rcall	.-566    	; 0x2f04 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    313a:	81 11       	cpse	r24, r1
    313c:	0a c0       	rjmp	.+20     	; 0x3152 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	d8 01       	movw	r26, r16
    3144:	13 96       	adiw	r26, 0x03	; 3
    3146:	9c 93       	st	X, r25
    3148:	8e 93       	st	-X, r24
    314a:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	42 c1       	rjmp	.+644    	; 0x33d6 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3152:	41 01       	movw	r8, r2
    3154:	82 c0       	rjmp	.+260    	; 0x325a <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3156:	5b 96       	adiw	r26, 0x1b	; 27
    3158:	8d 91       	ld	r24, X+
    315a:	9c 91       	ld	r25, X
    315c:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    315e:	fc 01       	movw	r30, r24
    3160:	74 80       	ldd	r7, Z+4	; 0x04
    3162:	2f ef       	ldi	r18, 0xFF	; 255
    3164:	27 0d       	add	r18, r7
    3166:	2a 01       	movw	r4, r20
    3168:	3b 01       	movw	r6, r22
    316a:	39 e0       	ldi	r19, 0x09	; 9
    316c:	76 94       	lsr	r7
    316e:	67 94       	ror	r6
    3170:	57 94       	ror	r5
    3172:	47 94       	ror	r4
    3174:	3a 95       	dec	r19
    3176:	d1 f7       	brne	.-12     	; 0x316c <_ZN6SdFile5writeEPKvj+0x9c>
    3178:	72 2e       	mov	r7, r18
    317a:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    317c:	7a 01       	movw	r14, r20
    317e:	f1 e0       	ldi	r31, 0x01	; 1
    3180:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    3182:	77 20       	and	r7, r7
    3184:	09 f4       	brne	.+2      	; 0x3188 <_ZN6SdFile5writeEPKvj+0xb8>
    3186:	75 c0       	rjmp	.+234    	; 0x3272 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	92 e0       	ldi	r25, 0x02	; 2
    318c:	8e 19       	sub	r24, r14
    318e:	9f 09       	sbc	r25, r15
    3190:	54 01       	movw	r10, r8
    3192:	88 15       	cp	r24, r8
    3194:	99 05       	cpc	r25, r9
    3196:	08 f4       	brcc	.+2      	; 0x319a <_ZN6SdFile5writeEPKvj+0xca>
    3198:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    319a:	d8 01       	movw	r26, r16
    319c:	5b 96       	adiw	r26, 0x1b	; 27
    319e:	2d 91       	ld	r18, X+
    31a0:	3c 91       	ld	r19, X
    31a2:	5c 97       	sbiw	r26, 0x1c	; 28
    31a4:	16 96       	adiw	r26, 0x06	; 6
    31a6:	8d 91       	ld	r24, X+
    31a8:	9d 91       	ld	r25, X+
    31aa:	0d 90       	ld	r0, X+
    31ac:	bc 91       	ld	r27, X
    31ae:	a0 2d       	mov	r26, r0
    31b0:	02 97       	sbiw	r24, 0x02	; 2
    31b2:	a1 09       	sbc	r26, r1
    31b4:	b1 09       	sbc	r27, r1
    31b6:	f9 01       	movw	r30, r18
    31b8:	05 84       	ldd	r0, Z+13	; 0x0d
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <_ZN6SdFile5writeEPKvj+0xf4>
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	aa 1f       	adc	r26, r26
    31c2:	bb 1f       	adc	r27, r27
    31c4:	0a 94       	dec	r0
    31c6:	d2 f7       	brpl	.-12     	; 0x31bc <_ZN6SdFile5writeEPKvj+0xec>
    31c8:	46 85       	ldd	r20, Z+14	; 0x0e
    31ca:	57 85       	ldd	r21, Z+15	; 0x0f
    31cc:	60 89       	ldd	r22, Z+16	; 0x10
    31ce:	71 89       	ldd	r23, Z+17	; 0x11
    31d0:	84 0f       	add	r24, r20
    31d2:	95 1f       	adc	r25, r21
    31d4:	a6 1f       	adc	r26, r22
    31d6:	b7 1f       	adc	r27, r23
    31d8:	9c 01       	movw	r18, r24
    31da:	ad 01       	movw	r20, r26
    31dc:	27 0d       	add	r18, r7
    31de:	31 1d       	adc	r19, r1
    31e0:	41 1d       	adc	r20, r1
    31e2:	51 1d       	adc	r21, r1
    31e4:	29 01       	movw	r4, r18
    31e6:	3a 01       	movw	r6, r20
    if (n == 512) {
    31e8:	a1 14       	cp	r10, r1
    31ea:	32 e0       	ldi	r19, 0x02	; 2
    31ec:	b3 06       	cpc	r11, r19
    31ee:	09 f0       	breq	.+2      	; 0x31f2 <_ZN6SdFile5writeEPKvj+0x122>
    31f0:	85 c0       	rjmp	.+266    	; 0x32fc <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    31f2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    31f6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    31fa:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    31fe:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3202:	48 16       	cp	r4, r24
    3204:	59 06       	cpc	r5, r25
    3206:	6a 06       	cpc	r6, r26
    3208:	7b 06       	cpc	r7, r27
    320a:	59 f4       	brne	.+22     	; 0x3222 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    320c:	8f ef       	ldi	r24, 0xFF	; 255
    320e:	9f ef       	ldi	r25, 0xFF	; 255
    3210:	dc 01       	movw	r26, r24
    3212:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3216:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    321a:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    321e:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3222:	96 01       	movw	r18, r12
    3224:	b3 01       	movw	r22, r6
    3226:	a2 01       	movw	r20, r4
    3228:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ZN8SdVolume7sdCard_E>
    322c:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <_ZN8SdVolume7sdCard_E+0x1>
    3230:	8c dc       	rcall	.-1768   	; 0x2b4a <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3232:	88 23       	and	r24, r24
    3234:	09 f4       	brne	.+2      	; 0x3238 <_ZN6SdFile5writeEPKvj+0x168>
    3236:	83 cf       	rjmp	.-250    	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    3238:	9e ef       	ldi	r25, 0xFE	; 254
    323a:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    323c:	8a 18       	sub	r8, r10
    323e:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    3240:	f8 01       	movw	r30, r16
    3242:	82 85       	ldd	r24, Z+10	; 0x0a
    3244:	93 85       	ldd	r25, Z+11	; 0x0b
    3246:	a4 85       	ldd	r26, Z+12	; 0x0c
    3248:	b5 85       	ldd	r27, Z+13	; 0x0d
    324a:	8a 0d       	add	r24, r10
    324c:	9b 1d       	adc	r25, r11
    324e:	a1 1d       	adc	r26, r1
    3250:	b1 1d       	adc	r27, r1
    3252:	82 87       	std	Z+10, r24	; 0x0a
    3254:	93 87       	std	Z+11, r25	; 0x0b
    3256:	a4 87       	std	Z+12, r26	; 0x0c
    3258:	b5 87       	std	Z+13, r27	; 0x0d
    325a:	d8 01       	movw	r26, r16
    325c:	1a 96       	adiw	r26, 0x0a	; 10
    325e:	4d 91       	ld	r20, X+
    3260:	5d 91       	ld	r21, X+
    3262:	6d 91       	ld	r22, X+
    3264:	7c 91       	ld	r23, X
    3266:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3268:	81 14       	cp	r8, r1
    326a:	91 04       	cpc	r9, r1
    326c:	09 f0       	breq	.+2      	; 0x3270 <_ZN6SdFile5writeEPKvj+0x1a0>
    326e:	73 cf       	rjmp	.-282    	; 0x3156 <_ZN6SdFile5writeEPKvj+0x86>
    3270:	83 c0       	rjmp	.+262    	; 0x3378 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3272:	e1 14       	cp	r14, r1
    3274:	f1 04       	cpc	r15, r1
    3276:	09 f0       	breq	.+2      	; 0x327a <_ZN6SdFile5writeEPKvj+0x1aa>
    3278:	87 cf       	rjmp	.-242    	; 0x3188 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    327a:	16 96       	adiw	r26, 0x06	; 6
    327c:	4d 91       	ld	r20, X+
    327e:	5d 91       	ld	r21, X+
    3280:	6d 91       	ld	r22, X+
    3282:	7c 91       	ld	r23, X
    3284:	19 97       	sbiw	r26, 0x09	; 9
    3286:	41 15       	cp	r20, r1
    3288:	51 05       	cpc	r21, r1
    328a:	61 05       	cpc	r22, r1
    328c:	71 05       	cpc	r23, r1
    328e:	59 f4       	brne	.+22     	; 0x32a6 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    3290:	57 96       	adiw	r26, 0x17	; 23
    3292:	8d 91       	ld	r24, X+
    3294:	9d 91       	ld	r25, X+
    3296:	0d 90       	ld	r0, X+
    3298:	bc 91       	ld	r27, X
    329a:	a0 2d       	mov	r26, r0
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	a1 05       	cpc	r26, r1
    32a0:	b1 05       	cpc	r27, r1
    32a2:	31 f5       	brne	.+76     	; 0x32f0 <_ZN6SdFile5writeEPKvj+0x220>
    32a4:	20 c0       	rjmp	.+64     	; 0x32e6 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    32a6:	9e 01       	movw	r18, r28
    32a8:	2f 5f       	subi	r18, 0xFF	; 255
    32aa:	3f 4f       	sbci	r19, 0xFF	; 255
    32ac:	2d d1       	rcall	.+602    	; 0x3508 <_ZNK8SdVolume6fatGetEmPm>
    32ae:	88 23       	and	r24, r24
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <_ZN6SdFile5writeEPKvj+0x1e4>
    32b2:	4d cf       	rjmp	.-358    	; 0x314e <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	ab 81       	ldd	r26, Y+3	; 0x03
    32ba:	bc 81       	ldd	r27, Y+4	; 0x04
    32bc:	f8 01       	movw	r30, r16
    32be:	23 8d       	ldd	r18, Z+27	; 0x1b
    32c0:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    32c2:	f9 01       	movw	r30, r18
    32c4:	27 89       	ldd	r18, Z+23	; 0x17
    32c6:	20 31       	cpi	r18, 0x10	; 16
    32c8:	29 f0       	breq	.+10     	; 0x32d4 <_ZN6SdFile5writeEPKvj+0x204>
    32ca:	48 ef       	ldi	r20, 0xF8	; 248
    32cc:	5f ef       	ldi	r21, 0xFF	; 255
    32ce:	6f ef       	ldi	r22, 0xFF	; 255
    32d0:	7f e0       	ldi	r23, 0x0F	; 15
    32d2:	04 c0       	rjmp	.+8      	; 0x32dc <_ZN6SdFile5writeEPKvj+0x20c>
    32d4:	48 ef       	ldi	r20, 0xF8	; 248
    32d6:	5f ef       	ldi	r21, 0xFF	; 255
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	70 e0       	ldi	r23, 0x00	; 0
    32dc:	84 17       	cp	r24, r20
    32de:	95 07       	cpc	r25, r21
    32e0:	a6 07       	cpc	r26, r22
    32e2:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    32e4:	28 f0       	brcs	.+10     	; 0x32f0 <_ZN6SdFile5writeEPKvj+0x220>
    32e6:	c8 01       	movw	r24, r16
    32e8:	7d dc       	rcall	.-1798   	; 0x2be4 <_ZN6SdFile10addClusterEv>
    32ea:	81 11       	cpse	r24, r1
    32ec:	4d cf       	rjmp	.-358    	; 0x3188 <_ZN6SdFile5writeEPKvj+0xb8>
    32ee:	27 cf       	rjmp	.-434    	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    32f0:	f8 01       	movw	r30, r16
    32f2:	86 83       	std	Z+6, r24	; 0x06
    32f4:	97 83       	std	Z+7, r25	; 0x07
    32f6:	a0 87       	std	Z+8, r26	; 0x08
    32f8:	b1 87       	std	Z+9, r27	; 0x09
    32fa:	46 cf       	rjmp	.-372    	; 0x3188 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    32fc:	e1 14       	cp	r14, r1
    32fe:	f1 04       	cpc	r15, r1
    3300:	21 f5       	brne	.+72     	; 0x334a <_ZN6SdFile5writeEPKvj+0x27a>
    3302:	d8 01       	movw	r26, r16
    3304:	1a 96       	adiw	r26, 0x0a	; 10
    3306:	4d 91       	ld	r20, X+
    3308:	5d 91       	ld	r21, X+
    330a:	6d 91       	ld	r22, X+
    330c:	7c 91       	ld	r23, X
    330e:	1d 97       	sbiw	r26, 0x0d	; 13
    3310:	53 96       	adiw	r26, 0x13	; 19
    3312:	8d 91       	ld	r24, X+
    3314:	9d 91       	ld	r25, X+
    3316:	0d 90       	ld	r0, X+
    3318:	bc 91       	ld	r27, X
    331a:	a0 2d       	mov	r26, r0
    331c:	48 17       	cp	r20, r24
    331e:	59 07       	cpc	r21, r25
    3320:	6a 07       	cpc	r22, r26
    3322:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3324:	90 f0       	brcs	.+36     	; 0x334a <_ZN6SdFile5writeEPKvj+0x27a>
    3326:	7e d0       	rcall	.+252    	; 0x3424 <_ZN8SdVolume10cacheFlushEv>
    3328:	88 23       	and	r24, r24
    332a:	09 f4       	brne	.+2      	; 0x332e <_ZN6SdFile5writeEPKvj+0x25e>
    332c:	08 cf       	rjmp	.-496    	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    332e:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3332:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3336:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    333a:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    333e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    3342:	81 60       	ori	r24, 0x01	; 1
    3344:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3348:	07 c0       	rjmp	.+14     	; 0x3358 <_ZN6SdFile5writeEPKvj+0x288>
    334a:	41 e0       	ldi	r20, 0x01	; 1
    334c:	c3 01       	movw	r24, r6
    334e:	b2 01       	movw	r22, r4
    3350:	a2 d0       	rcall	.+324    	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    3352:	88 23       	and	r24, r24
    3354:	09 f4       	brne	.+2      	; 0x3358 <_ZN6SdFile5writeEPKvj+0x288>
    3356:	f3 ce       	rjmp	.-538    	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>
    3358:	d6 01       	movw	r26, r12
    335a:	f7 01       	movw	r30, r14
    335c:	ef 56       	subi	r30, 0x6F	; 111
    335e:	f9 4f       	sbci	r31, 0xF9	; 249
    3360:	9f 01       	movw	r18, r30
    3362:	2a 0d       	add	r18, r10
    3364:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    3366:	2e 17       	cp	r18, r30
    3368:	3f 07       	cpc	r19, r31
    336a:	19 f0       	breq	.+6      	; 0x3372 <_ZN6SdFile5writeEPKvj+0x2a2>
    336c:	8d 91       	ld	r24, X+
    336e:	81 93       	st	Z+, r24
    3370:	fa cf       	rjmp	.-12     	; 0x3366 <_ZN6SdFile5writeEPKvj+0x296>
    3372:	ca 0c       	add	r12, r10
    3374:	db 1c       	adc	r13, r11
    3376:	62 cf       	rjmp	.-316    	; 0x323c <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3378:	d8 01       	movw	r26, r16
    337a:	53 96       	adiw	r26, 0x13	; 19
    337c:	cd 90       	ld	r12, X+
    337e:	dd 90       	ld	r13, X+
    3380:	ed 90       	ld	r14, X+
    3382:	fc 90       	ld	r15, X
    3384:	56 97       	sbiw	r26, 0x16	; 22
    3386:	14 96       	adiw	r26, 0x04	; 4
    3388:	8c 91       	ld	r24, X
    338a:	c4 16       	cp	r12, r20
    338c:	d5 06       	cpc	r13, r21
    338e:	e6 06       	cpc	r14, r22
    3390:	f7 06       	cpc	r15, r23
    3392:	40 f4       	brcc	.+16     	; 0x33a4 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3394:	f8 01       	movw	r30, r16
    3396:	43 8b       	std	Z+19, r20	; 0x13
    3398:	54 8b       	std	Z+20, r21	; 0x14
    339a:	65 8b       	std	Z+21, r22	; 0x15
    339c:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    339e:	80 68       	ori	r24, 0x80	; 128
    33a0:	84 83       	std	Z+4, r24	; 0x04
    33a2:	0d c0       	rjmp	.+26     	; 0x33be <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    33a4:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <_ZN6SdFile9dateTime_E>
    33a8:	30 91 89 06 	lds	r19, 0x0689	; 0x800689 <_ZN6SdFile9dateTime_E+0x1>
    33ac:	23 2b       	or	r18, r19
    33ae:	39 f0       	breq	.+14     	; 0x33be <_ZN6SdFile5writeEPKvj+0x2ee>
    33b0:	21 14       	cp	r2, r1
    33b2:	31 04       	cpc	r3, r1
    33b4:	21 f0       	breq	.+8      	; 0x33be <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    33b6:	80 68       	ori	r24, 0x80	; 128
    33b8:	d8 01       	movw	r26, r16
    33ba:	14 96       	adiw	r26, 0x04	; 4
    33bc:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    33be:	f8 01       	movw	r30, r16
    33c0:	84 81       	ldd	r24, Z+4	; 0x04
    33c2:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    33c4:	02 c0       	rjmp	.+4      	; 0x33ca <_ZN6SdFile5writeEPKvj+0x2fa>
    33c6:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    33c8:	06 c0       	rjmp	.+12     	; 0x33d6 <_ZN6SdFile5writeEPKvj+0x306>
    33ca:	c8 01       	movw	r24, r16
    33cc:	31 de       	rcall	.-926    	; 0x3030 <_ZN6SdFile4syncEv>
    33ce:	88 23       	and	r24, r24
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <_ZN6SdFile5writeEPKvj+0x304>
    33d2:	b5 ce       	rjmp	.-662    	; 0x313e <_ZN6SdFile5writeEPKvj+0x6e>
    33d4:	f8 cf       	rjmp	.-16     	; 0x33c6 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	bf 90       	pop	r11
    33f0:	af 90       	pop	r10
    33f2:	9f 90       	pop	r9
    33f4:	8f 90       	pop	r8
    33f6:	7f 90       	pop	r7
    33f8:	6f 90       	pop	r6
    33fa:	5f 90       	pop	r5
    33fc:	4f 90       	pop	r4
    33fe:	3f 90       	pop	r3
    3400:	2f 90       	pop	r2
    3402:	08 95       	ret

00003404 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	1f 92       	push	r1
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	be 01       	movw	r22, r28
    3416:	6f 5f       	subi	r22, 0xFF	; 255
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	5a de       	rcall	.-844    	; 0x30d0 <_ZN6SdFile5writeEPKvj>
}
    341c:	0f 90       	pop	r0
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	08 95       	ret

00003424 <_ZN8SdVolume10cacheFlushEv>:

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    3424:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    3428:	88 23       	and	r24, r24
    342a:	99 f1       	breq	.+102    	; 0x3492 <_ZN8SdVolume10cacheFlushEv+0x6e>
    342c:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3430:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3434:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3438:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    343c:	21 e9       	ldi	r18, 0x91	; 145
    343e:	36 e0       	ldi	r19, 0x06	; 6
    3440:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ZN8SdVolume7sdCard_E>
    3444:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <_ZN8SdVolume7sdCard_E+0x1>
    3448:	80 db       	rcall	.-2304   	; 0x2b4a <_ZN7Sd2Card10writeBlockEmPKh>
    344a:	81 11       	cpse	r24, r1
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <_ZN8SdVolume10cacheFlushEv+0x2e>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	08 95       	ret
    3452:	40 91 8a 06 	lds	r20, 0x068A	; 0x80068a <_ZN8SdVolume17cacheMirrorBlock_E>
    3456:	50 91 8b 06 	lds	r21, 0x068B	; 0x80068b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    345a:	60 91 8c 06 	lds	r22, 0x068C	; 0x80068c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    345e:	70 91 8d 06 	lds	r23, 0x068D	; 0x80068d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3462:	41 15       	cp	r20, r1
    3464:	51 05       	cpc	r21, r1
    3466:	61 05       	cpc	r22, r1
    3468:	71 05       	cpc	r23, r1
    346a:	89 f0       	breq	.+34     	; 0x348e <_ZN8SdVolume10cacheFlushEv+0x6a>
    346c:	21 e9       	ldi	r18, 0x91	; 145
    346e:	36 e0       	ldi	r19, 0x06	; 6
    3470:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ZN8SdVolume7sdCard_E>
    3474:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <_ZN8SdVolume7sdCard_E+0x1>
    3478:	68 db       	rcall	.-2352   	; 0x2b4a <_ZN7Sd2Card10writeBlockEmPKh>
    347a:	88 23       	and	r24, r24
    347c:	41 f3       	breq	.-48     	; 0x344e <_ZN8SdVolume10cacheFlushEv+0x2a>
    347e:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <_ZN8SdVolume17cacheMirrorBlock_E>
    3482:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3486:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    348a:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    348e:	10 92 8e 06 	sts	0x068E, r1	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	08 95       	ret

00003496 <_ZN8SdVolume13cacheRawBlockEmh>:
    3496:	cf 92       	push	r12
    3498:	df 92       	push	r13
    349a:	ef 92       	push	r14
    349c:	ff 92       	push	r15
    349e:	cf 93       	push	r28
    34a0:	6b 01       	movw	r12, r22
    34a2:	7c 01       	movw	r14, r24
    34a4:	c4 2f       	mov	r28, r20
    34a6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    34aa:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    34ae:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    34b2:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    34b6:	8c 15       	cp	r24, r12
    34b8:	9d 05       	cpc	r25, r13
    34ba:	ae 05       	cpc	r26, r14
    34bc:	bf 05       	cpc	r27, r15
    34be:	c1 f0       	breq	.+48     	; 0x34f0 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    34c0:	b1 df       	rcall	.-158    	; 0x3424 <_ZN8SdVolume10cacheFlushEv>
    34c2:	81 11       	cpse	r24, r1
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	19 c0       	rjmp	.+50     	; 0x34fc <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    34ca:	21 e9       	ldi	r18, 0x91	; 145
    34cc:	36 e0       	ldi	r19, 0x06	; 6
    34ce:	b7 01       	movw	r22, r14
    34d0:	a6 01       	movw	r20, r12
    34d2:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <_ZN8SdVolume7sdCard_E>
    34d6:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <_ZN8SdVolume7sdCard_E+0x1>
    34da:	fe da       	rcall	.-2564   	; 0x2ad8 <_ZN7Sd2Card9readBlockEmPh>
    34dc:	88 23       	and	r24, r24
    34de:	99 f3       	breq	.-26     	; 0x34c6 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    34e0:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    34e4:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    34e8:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    34ec:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    34f0:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    34f4:	c8 2b       	or	r28, r24
    34f6:	c0 93 8e 06 	sts	0x068E, r28	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	cf 91       	pop	r28
    34fe:	ff 90       	pop	r15
    3500:	ef 90       	pop	r14
    3502:	df 90       	pop	r13
    3504:	cf 90       	pop	r12
    3506:	08 95       	ret

00003508 <_ZNK8SdVolume6fatGetEmPm>:
    3508:	8f 92       	push	r8
    350a:	9f 92       	push	r9
    350c:	af 92       	push	r10
    350e:	bf 92       	push	r11
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	fc 01       	movw	r30, r24
    3522:	81 85       	ldd	r24, Z+9	; 0x09
    3524:	92 85       	ldd	r25, Z+10	; 0x0a
    3526:	a3 85       	ldd	r26, Z+11	; 0x0b
    3528:	b4 85       	ldd	r27, Z+12	; 0x0c
    352a:	01 96       	adiw	r24, 0x01	; 1
    352c:	a1 1d       	adc	r26, r1
    352e:	b1 1d       	adc	r27, r1
    3530:	84 17       	cp	r24, r20
    3532:	95 07       	cpc	r25, r21
    3534:	a6 07       	cpc	r26, r22
    3536:	b7 07       	cpc	r27, r23
    3538:	10 f4       	brcc	.+4      	; 0x353e <_ZNK8SdVolume6fatGetEmPm+0x36>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	5a c0       	rjmp	.+180    	; 0x35f2 <_ZNK8SdVolume6fatGetEmPm+0xea>
    353e:	83 88       	ldd	r8, Z+19	; 0x13
    3540:	94 88       	ldd	r9, Z+20	; 0x14
    3542:	a5 88       	ldd	r10, Z+21	; 0x15
    3544:	b6 88       	ldd	r11, Z+22	; 0x16
    3546:	87 89       	ldd	r24, Z+23	; 0x17
    3548:	80 31       	cpi	r24, 0x10	; 16
    354a:	29 f4       	brne	.+10     	; 0x3556 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    354c:	bb 27       	eor	r27, r27
    354e:	a7 2f       	mov	r26, r23
    3550:	96 2f       	mov	r25, r22
    3552:	85 2f       	mov	r24, r21
    3554:	09 c0       	rjmp	.+18     	; 0x3568 <_ZNK8SdVolume6fatGetEmPm+0x60>
    3556:	db 01       	movw	r26, r22
    3558:	ca 01       	movw	r24, r20
    355a:	c7 e0       	ldi	r28, 0x07	; 7
    355c:	b6 95       	lsr	r27
    355e:	a7 95       	ror	r26
    3560:	97 95       	ror	r25
    3562:	87 95       	ror	r24
    3564:	ca 95       	dec	r28
    3566:	d1 f7       	brne	.-12     	; 0x355c <_ZNK8SdVolume6fatGetEmPm+0x54>
    3568:	e9 01       	movw	r28, r18
    356a:	6a 01       	movw	r12, r20
    356c:	7b 01       	movw	r14, r22
    356e:	8f 01       	movw	r16, r30
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	68 0d       	add	r22, r8
    3576:	79 1d       	adc	r23, r9
    3578:	8a 1d       	adc	r24, r10
    357a:	9b 1d       	adc	r25, r11
    357c:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3580:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3584:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3588:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    358c:	68 15       	cp	r22, r8
    358e:	79 05       	cpc	r23, r9
    3590:	8a 05       	cpc	r24, r10
    3592:	9b 05       	cpc	r25, r11
    3594:	91 f4       	brne	.+36     	; 0x35ba <_ZNK8SdVolume6fatGetEmPm+0xb2>
    3596:	f8 01       	movw	r30, r16
    3598:	87 89       	ldd	r24, Z+23	; 0x17
    359a:	80 31       	cpi	r24, 0x10	; 16
    359c:	99 f4       	brne	.+38     	; 0x35c4 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    359e:	dd 24       	eor	r13, r13
    35a0:	ee 24       	eor	r14, r14
    35a2:	ff 24       	eor	r15, r15
    35a4:	c6 01       	movw	r24, r12
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	fc 01       	movw	r30, r24
    35ac:	ef 56       	subi	r30, 0x6F	; 111
    35ae:	f9 4f       	sbci	r31, 0xF9	; 249
    35b0:	80 81       	ld	r24, Z
    35b2:	91 81       	ldd	r25, Z+1	; 0x01
    35b4:	a0 e0       	ldi	r26, 0x00	; 0
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	17 c0       	rjmp	.+46     	; 0x35e8 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    35ba:	40 e0       	ldi	r20, 0x00	; 0
    35bc:	6c df       	rcall	.-296    	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    35be:	81 11       	cpse	r24, r1
    35c0:	ea cf       	rjmp	.-44     	; 0x3596 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    35c2:	bb cf       	rjmp	.-138    	; 0x353a <_ZNK8SdVolume6fatGetEmPm+0x32>
    35c4:	e8 94       	clt
    35c6:	c7 f8       	bld	r12, 7
    35c8:	dd 24       	eor	r13, r13
    35ca:	ee 24       	eor	r14, r14
    35cc:	ff 24       	eor	r15, r15
    35ce:	c6 01       	movw	r24, r12
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	fc 01       	movw	r30, r24
    35da:	ef 56       	subi	r30, 0x6F	; 111
    35dc:	f9 4f       	sbci	r31, 0xF9	; 249
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	a2 81       	ldd	r26, Z+2	; 0x02
    35e4:	b3 81       	ldd	r27, Z+3	; 0x03
    35e6:	bf 70       	andi	r27, 0x0F	; 15
    35e8:	88 83       	st	Y, r24
    35ea:	99 83       	std	Y+1, r25	; 0x01
    35ec:	aa 83       	std	Y+2, r26	; 0x02
    35ee:	bb 83       	std	Y+3, r27	; 0x03
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	1f 91       	pop	r17
    35f8:	0f 91       	pop	r16
    35fa:	ff 90       	pop	r15
    35fc:	ef 90       	pop	r14
    35fe:	df 90       	pop	r13
    3600:	cf 90       	pop	r12
    3602:	bf 90       	pop	r11
    3604:	af 90       	pop	r10
    3606:	9f 90       	pop	r9
    3608:	8f 90       	pop	r8
    360a:	08 95       	ret

0000360c <_ZNK8SdVolume9chainSizeEmPm>:
    360c:	4f 92       	push	r4
    360e:	5f 92       	push	r5
    3610:	6f 92       	push	r6
    3612:	7f 92       	push	r7
    3614:	af 92       	push	r10
    3616:	bf 92       	push	r11
    3618:	cf 92       	push	r12
    361a:	df 92       	push	r13
    361c:	ef 92       	push	r14
    361e:	ff 92       	push	r15
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	00 d0       	rcall	.+0      	; 0x362a <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    362a:	1f 92       	push	r1
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	8c 01       	movw	r16, r24
    3632:	49 83       	std	Y+1, r20	; 0x01
    3634:	5a 83       	std	Y+2, r21	; 0x02
    3636:	6b 83       	std	Y+3, r22	; 0x03
    3638:	7c 83       	std	Y+4, r23	; 0x04
    363a:	59 01       	movw	r10, r18
    363c:	c1 2c       	mov	r12, r1
    363e:	d1 2c       	mov	r13, r1
    3640:	76 01       	movw	r14, r12
    3642:	41 2c       	mov	r4, r1
    3644:	82 e0       	ldi	r24, 0x02	; 2
    3646:	58 2e       	mov	r5, r24
    3648:	61 2c       	mov	r6, r1
    364a:	71 2c       	mov	r7, r1
    364c:	49 81       	ldd	r20, Y+1	; 0x01
    364e:	5a 81       	ldd	r21, Y+2	; 0x02
    3650:	6b 81       	ldd	r22, Y+3	; 0x03
    3652:	7c 81       	ldd	r23, Y+4	; 0x04
    3654:	9e 01       	movw	r18, r28
    3656:	2f 5f       	subi	r18, 0xFF	; 255
    3658:	3f 4f       	sbci	r19, 0xFF	; 255
    365a:	c8 01       	movw	r24, r16
    365c:	55 df       	rcall	.-342    	; 0x3508 <_ZNK8SdVolume6fatGetEmPm>
    365e:	88 23       	and	r24, r24
    3660:	51 f1       	breq	.+84     	; 0x36b6 <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    3662:	d3 01       	movw	r26, r6
    3664:	c2 01       	movw	r24, r4
    3666:	f8 01       	movw	r30, r16
    3668:	05 84       	ldd	r0, Z+13	; 0x0d
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <_ZNK8SdVolume9chainSizeEmPm+0x68>
    366c:	88 0f       	add	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	aa 1f       	adc	r26, r26
    3672:	bb 1f       	adc	r27, r27
    3674:	0a 94       	dec	r0
    3676:	d2 f7       	brpl	.-12     	; 0x366c <_ZNK8SdVolume9chainSizeEmPm+0x60>
    3678:	c8 0e       	add	r12, r24
    367a:	d9 1e       	adc	r13, r25
    367c:	ea 1e       	adc	r14, r26
    367e:	fb 1e       	adc	r15, r27
    3680:	49 81       	ldd	r20, Y+1	; 0x01
    3682:	5a 81       	ldd	r21, Y+2	; 0x02
    3684:	6b 81       	ldd	r22, Y+3	; 0x03
    3686:	7c 81       	ldd	r23, Y+4	; 0x04
    3688:	87 89       	ldd	r24, Z+23	; 0x17
    368a:	80 31       	cpi	r24, 0x10	; 16
    368c:	29 f0       	breq	.+10     	; 0x3698 <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    368e:	88 ef       	ldi	r24, 0xF8	; 248
    3690:	9f ef       	ldi	r25, 0xFF	; 255
    3692:	af ef       	ldi	r26, 0xFF	; 255
    3694:	bf e0       	ldi	r27, 0x0F	; 15
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    3698:	88 ef       	ldi	r24, 0xF8	; 248
    369a:	9f ef       	ldi	r25, 0xFF	; 255
    369c:	a0 e0       	ldi	r26, 0x00	; 0
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	48 17       	cp	r20, r24
    36a2:	59 07       	cpc	r21, r25
    36a4:	6a 07       	cpc	r22, r26
    36a6:	7b 07       	cpc	r23, r27
    36a8:	88 f2       	brcs	.-94     	; 0x364c <_ZNK8SdVolume9chainSizeEmPm+0x40>
    36aa:	f5 01       	movw	r30, r10
    36ac:	c0 82       	st	Z, r12
    36ae:	d1 82       	std	Z+1, r13	; 0x01
    36b0:	e2 82       	std	Z+2, r14	; 0x02
    36b2:	f3 82       	std	Z+3, r15	; 0x03
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	ff 90       	pop	r15
    36c8:	ef 90       	pop	r14
    36ca:	df 90       	pop	r13
    36cc:	cf 90       	pop	r12
    36ce:	bf 90       	pop	r11
    36d0:	af 90       	pop	r10
    36d2:	7f 90       	pop	r7
    36d4:	6f 90       	pop	r6
    36d6:	5f 90       	pop	r5
    36d8:	4f 90       	pop	r4
    36da:	08 95       	ret

000036dc <_ZN8SdVolume6fatPutEmm>:
    36dc:	4f 92       	push	r4
    36de:	5f 92       	push	r5
    36e0:	6f 92       	push	r6
    36e2:	7f 92       	push	r7
    36e4:	8f 92       	push	r8
    36e6:	9f 92       	push	r9
    36e8:	af 92       	push	r10
    36ea:	bf 92       	push	r11
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	ff 92       	push	r15
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	ec 01       	movw	r28, r24
    36fe:	42 30       	cpi	r20, 0x02	; 2
    3700:	51 05       	cpc	r21, r1
    3702:	61 05       	cpc	r22, r1
    3704:	71 05       	cpc	r23, r1
    3706:	10 f4       	brcc	.+4      	; 0x370c <_ZN8SdVolume6fatPutEmm+0x30>
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	77 c0       	rjmp	.+238    	; 0x37fa <_ZN8SdVolume6fatPutEmm+0x11e>
    370c:	89 85       	ldd	r24, Y+9	; 0x09
    370e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3710:	ab 85       	ldd	r26, Y+11	; 0x0b
    3712:	bc 85       	ldd	r27, Y+12	; 0x0c
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	a1 1d       	adc	r26, r1
    3718:	b1 1d       	adc	r27, r1
    371a:	84 17       	cp	r24, r20
    371c:	95 07       	cpc	r25, r21
    371e:	a6 07       	cpc	r26, r22
    3720:	b7 07       	cpc	r27, r23
    3722:	90 f3       	brcs	.-28     	; 0x3708 <_ZN8SdVolume6fatPutEmm+0x2c>
    3724:	cb 88       	ldd	r12, Y+19	; 0x13
    3726:	dc 88       	ldd	r13, Y+20	; 0x14
    3728:	ed 88       	ldd	r14, Y+21	; 0x15
    372a:	fe 88       	ldd	r15, Y+22	; 0x16
    372c:	8f 89       	ldd	r24, Y+23	; 0x17
    372e:	80 31       	cpi	r24, 0x10	; 16
    3730:	29 f4       	brne	.+10     	; 0x373c <_ZN8SdVolume6fatPutEmm+0x60>
    3732:	bb 27       	eor	r27, r27
    3734:	a7 2f       	mov	r26, r23
    3736:	96 2f       	mov	r25, r22
    3738:	85 2f       	mov	r24, r21
    373a:	09 c0       	rjmp	.+18     	; 0x374e <_ZN8SdVolume6fatPutEmm+0x72>
    373c:	db 01       	movw	r26, r22
    373e:	ca 01       	movw	r24, r20
    3740:	e7 e0       	ldi	r30, 0x07	; 7
    3742:	b6 95       	lsr	r27
    3744:	a7 95       	ror	r26
    3746:	97 95       	ror	r25
    3748:	87 95       	ror	r24
    374a:	ea 95       	dec	r30
    374c:	d1 f7       	brne	.-12     	; 0x3742 <_ZN8SdVolume6fatPutEmm+0x66>
    374e:	48 01       	movw	r8, r16
    3750:	59 01       	movw	r10, r18
    3752:	2a 01       	movw	r4, r20
    3754:	3b 01       	movw	r6, r22
    3756:	c8 0e       	add	r12, r24
    3758:	d9 1e       	adc	r13, r25
    375a:	ea 1e       	adc	r14, r26
    375c:	fb 1e       	adc	r15, r27
    375e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3762:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3766:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    376a:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    376e:	c8 16       	cp	r12, r24
    3770:	d9 06       	cpc	r13, r25
    3772:	ea 06       	cpc	r14, r26
    3774:	fb 06       	cpc	r15, r27
    3776:	81 f4       	brne	.+32     	; 0x3798 <_ZN8SdVolume6fatPutEmm+0xbc>
    3778:	8f 89       	ldd	r24, Y+23	; 0x17
    377a:	80 31       	cpi	r24, 0x10	; 16
    377c:	a1 f4       	brne	.+40     	; 0x37a6 <_ZN8SdVolume6fatPutEmm+0xca>
    377e:	b3 01       	movw	r22, r6
    3780:	a2 01       	movw	r20, r4
    3782:	55 27       	eor	r21, r21
    3784:	66 27       	eor	r22, r22
    3786:	77 27       	eor	r23, r23
    3788:	44 0f       	add	r20, r20
    378a:	55 1f       	adc	r21, r21
    378c:	fa 01       	movw	r30, r20
    378e:	ef 56       	subi	r30, 0x6F	; 111
    3790:	f9 4f       	sbci	r31, 0xF9	; 249
    3792:	91 82       	std	Z+1, r9	; 0x01
    3794:	80 82       	st	Z, r8
    3796:	18 c0       	rjmp	.+48     	; 0x37c8 <_ZN8SdVolume6fatPutEmm+0xec>
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	c7 01       	movw	r24, r14
    379c:	b6 01       	movw	r22, r12
    379e:	7b de       	rcall	.-778    	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    37a0:	81 11       	cpse	r24, r1
    37a2:	ea cf       	rjmp	.-44     	; 0x3778 <_ZN8SdVolume6fatPutEmm+0x9c>
    37a4:	b1 cf       	rjmp	.-158    	; 0x3708 <_ZN8SdVolume6fatPutEmm+0x2c>
    37a6:	b3 01       	movw	r22, r6
    37a8:	a2 01       	movw	r20, r4
    37aa:	4f 77       	andi	r20, 0x7F	; 127
    37ac:	55 27       	eor	r21, r21
    37ae:	66 27       	eor	r22, r22
    37b0:	77 27       	eor	r23, r23
    37b2:	44 0f       	add	r20, r20
    37b4:	55 1f       	adc	r21, r21
    37b6:	44 0f       	add	r20, r20
    37b8:	55 1f       	adc	r21, r21
    37ba:	fa 01       	movw	r30, r20
    37bc:	ef 56       	subi	r30, 0x6F	; 111
    37be:	f9 4f       	sbci	r31, 0xF9	; 249
    37c0:	80 82       	st	Z, r8
    37c2:	91 82       	std	Z+1, r9	; 0x01
    37c4:	a2 82       	std	Z+2, r10	; 0x02
    37c6:	b3 82       	std	Z+3, r11	; 0x03
    37c8:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    37cc:	81 60       	ori	r24, 0x01	; 1
    37ce:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <_ZN8SdVolume11cacheDirty_E>
    37d2:	8a 89       	ldd	r24, Y+18	; 0x12
    37d4:	82 30       	cpi	r24, 0x02	; 2
    37d6:	80 f0       	brcs	.+32     	; 0x37f8 <_ZN8SdVolume6fatPutEmm+0x11c>
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
    37da:	9e 81       	ldd	r25, Y+6	; 0x06
    37dc:	af 81       	ldd	r26, Y+7	; 0x07
    37de:	b8 85       	ldd	r27, Y+8	; 0x08
    37e0:	c8 0e       	add	r12, r24
    37e2:	d9 1e       	adc	r13, r25
    37e4:	ea 1e       	adc	r14, r26
    37e6:	fb 1e       	adc	r15, r27
    37e8:	c0 92 8a 06 	sts	0x068A, r12	; 0x80068a <_ZN8SdVolume17cacheMirrorBlock_E>
    37ec:	d0 92 8b 06 	sts	0x068B, r13	; 0x80068b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    37f0:	e0 92 8c 06 	sts	0x068C, r14	; 0x80068c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    37f4:	f0 92 8d 06 	sts	0x068D, r15	; 0x80068d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	ff 90       	pop	r15
    3804:	ef 90       	pop	r14
    3806:	df 90       	pop	r13
    3808:	cf 90       	pop	r12
    380a:	bf 90       	pop	r11
    380c:	af 90       	pop	r10
    380e:	9f 90       	pop	r9
    3810:	8f 90       	pop	r8
    3812:	7f 90       	pop	r7
    3814:	6f 90       	pop	r6
    3816:	5f 90       	pop	r5
    3818:	4f 90       	pop	r4
    381a:	08 95       	ret

0000381c <_ZN8SdVolume15allocContiguousEmPm>:
    381c:	2f 92       	push	r2
    381e:	3f 92       	push	r3
    3820:	4f 92       	push	r4
    3822:	5f 92       	push	r5
    3824:	6f 92       	push	r6
    3826:	7f 92       	push	r7
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	60 97       	sbiw	r28, 0x10	; 16
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	5c 01       	movw	r10, r24
    3850:	49 87       	std	Y+9, r20	; 0x09
    3852:	5a 87       	std	Y+10, r21	; 0x0a
    3854:	6b 87       	std	Y+11, r22	; 0x0b
    3856:	7c 87       	std	Y+12, r23	; 0x0c
    3858:	19 01       	movw	r2, r18
    385a:	d9 01       	movw	r26, r18
    385c:	cd 90       	ld	r12, X+
    385e:	dd 90       	ld	r13, X+
    3860:	ed 90       	ld	r14, X+
    3862:	fc 90       	ld	r15, X
    3864:	c1 14       	cp	r12, r1
    3866:	d1 04       	cpc	r13, r1
    3868:	e1 04       	cpc	r14, r1
    386a:	f1 04       	cpc	r15, r1
    386c:	31 f0       	breq	.+12     	; 0x387a <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    386e:	bf ef       	ldi	r27, 0xFF	; 255
    3870:	cb 1a       	sub	r12, r27
    3872:	db 0a       	sbc	r13, r27
    3874:	eb 0a       	sbc	r14, r27
    3876:	fb 0a       	sbc	r15, r27
    3878:	10 c0       	rjmp	.+32     	; 0x389a <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    387a:	fc 01       	movw	r30, r24
    387c:	c0 80       	ld	r12, Z
    387e:	d1 80       	ldd	r13, Z+1	; 0x01
    3880:	e2 80       	ldd	r14, Z+2	; 0x02
    3882:	f3 80       	ldd	r15, Z+3	; 0x03
    3884:	99 24       	eor	r9, r9
    3886:	93 94       	inc	r9
    3888:	09 85       	ldd	r16, Y+9	; 0x09
    388a:	1a 85       	ldd	r17, Y+10	; 0x0a
    388c:	2b 85       	ldd	r18, Y+11	; 0x0b
    388e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3890:	01 30       	cpi	r16, 0x01	; 1
    3892:	11 05       	cpc	r17, r1
    3894:	21 05       	cpc	r18, r1
    3896:	31 05       	cpc	r19, r1
    3898:	09 f0       	breq	.+2      	; 0x389c <_ZN8SdVolume15allocContiguousEmPm+0x80>
    389a:	91 2c       	mov	r9, r1
    389c:	f5 01       	movw	r30, r10
    389e:	81 85       	ldd	r24, Z+9	; 0x09
    38a0:	92 85       	ldd	r25, Z+10	; 0x0a
    38a2:	a3 85       	ldd	r26, Z+11	; 0x0b
    38a4:	b4 85       	ldd	r27, Z+12	; 0x0c
    38a6:	8c 01       	movw	r16, r24
    38a8:	9d 01       	movw	r18, r26
    38aa:	0f 5f       	subi	r16, 0xFF	; 255
    38ac:	1f 4f       	sbci	r17, 0xFF	; 255
    38ae:	2f 4f       	sbci	r18, 0xFF	; 255
    38b0:	3f 4f       	sbci	r19, 0xFF	; 255
    38b2:	0d 87       	std	Y+13, r16	; 0x0d
    38b4:	1e 87       	std	Y+14, r17	; 0x0e
    38b6:	2f 87       	std	Y+15, r18	; 0x0f
    38b8:	38 8b       	std	Y+16, r19	; 0x10
    38ba:	26 01       	movw	r4, r12
    38bc:	37 01       	movw	r6, r14
    38be:	1d 82       	std	Y+5, r1	; 0x05
    38c0:	1e 82       	std	Y+6, r1	; 0x06
    38c2:	1f 82       	std	Y+7, r1	; 0x07
    38c4:	18 86       	std	Y+8, r1	; 0x08
    38c6:	f5 01       	movw	r30, r10
    38c8:	81 85       	ldd	r24, Z+9	; 0x09
    38ca:	92 85       	ldd	r25, Z+10	; 0x0a
    38cc:	a3 85       	ldd	r26, Z+11	; 0x0b
    38ce:	b4 85       	ldd	r27, Z+12	; 0x0c
    38d0:	0d 81       	ldd	r16, Y+5	; 0x05
    38d2:	1e 81       	ldd	r17, Y+6	; 0x06
    38d4:	2f 81       	ldd	r18, Y+7	; 0x07
    38d6:	38 85       	ldd	r19, Y+8	; 0x08
    38d8:	08 17       	cp	r16, r24
    38da:	19 07       	cpc	r17, r25
    38dc:	2a 07       	cpc	r18, r26
    38de:	3b 07       	cpc	r19, r27
    38e0:	08 f0       	brcs	.+2      	; 0x38e4 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    38e2:	54 c0       	rjmp	.+168    	; 0x398c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    38e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    38e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    38e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    38ea:	58 89       	ldd	r21, Y+16	; 0x10
    38ec:	24 15       	cp	r18, r4
    38ee:	35 05       	cpc	r19, r5
    38f0:	46 05       	cpc	r20, r6
    38f2:	57 05       	cpc	r21, r7
    38f4:	50 f4       	brcc	.+20     	; 0x390a <_ZN8SdVolume15allocContiguousEmPm+0xee>
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	48 2e       	mov	r4, r24
    38fa:	51 2c       	mov	r5, r1
    38fc:	61 2c       	mov	r6, r1
    38fe:	71 2c       	mov	r7, r1
    3900:	92 e0       	ldi	r25, 0x02	; 2
    3902:	c9 2e       	mov	r12, r25
    3904:	d1 2c       	mov	r13, r1
    3906:	e1 2c       	mov	r14, r1
    3908:	f1 2c       	mov	r15, r1
    390a:	9e 01       	movw	r18, r28
    390c:	2f 5f       	subi	r18, 0xFF	; 255
    390e:	3f 4f       	sbci	r19, 0xFF	; 255
    3910:	b3 01       	movw	r22, r6
    3912:	a2 01       	movw	r20, r4
    3914:	c5 01       	movw	r24, r10
    3916:	f8 dd       	rcall	.-1040   	; 0x3508 <_ZNK8SdVolume6fatGetEmPm>
    3918:	88 23       	and	r24, r24
    391a:	c1 f1       	breq	.+112    	; 0x398c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    391c:	49 81       	ldd	r20, Y+1	; 0x01
    391e:	5a 81       	ldd	r21, Y+2	; 0x02
    3920:	6b 81       	ldd	r22, Y+3	; 0x03
    3922:	7c 81       	ldd	r23, Y+4	; 0x04
    3924:	d3 01       	movw	r26, r6
    3926:	c2 01       	movw	r24, r4
    3928:	01 96       	adiw	r24, 0x01	; 1
    392a:	a1 1d       	adc	r26, r1
    392c:	b1 1d       	adc	r27, r1
    392e:	45 2b       	or	r20, r21
    3930:	46 2b       	or	r20, r22
    3932:	47 2b       	or	r20, r23
    3934:	19 f0       	breq	.+6      	; 0x393c <_ZN8SdVolume15allocContiguousEmPm+0x120>
    3936:	6c 01       	movw	r12, r24
    3938:	7d 01       	movw	r14, r26
    393a:	0f c0       	rjmp	.+30     	; 0x395a <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    393c:	ac 01       	movw	r20, r24
    393e:	bd 01       	movw	r22, r26
    3940:	4c 19       	sub	r20, r12
    3942:	5d 09       	sbc	r21, r13
    3944:	6e 09       	sbc	r22, r14
    3946:	7f 09       	sbc	r23, r15
    3948:	09 85       	ldd	r16, Y+9	; 0x09
    394a:	1a 85       	ldd	r17, Y+10	; 0x0a
    394c:	2b 85       	ldd	r18, Y+11	; 0x0b
    394e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3950:	04 17       	cp	r16, r20
    3952:	15 07       	cpc	r17, r21
    3954:	26 07       	cpc	r18, r22
    3956:	37 07       	cpc	r19, r23
    3958:	79 f0       	breq	.+30     	; 0x3978 <_ZN8SdVolume15allocContiguousEmPm+0x15c>
    395a:	2d 81       	ldd	r18, Y+5	; 0x05
    395c:	3e 81       	ldd	r19, Y+6	; 0x06
    395e:	4f 81       	ldd	r20, Y+7	; 0x07
    3960:	58 85       	ldd	r21, Y+8	; 0x08
    3962:	2f 5f       	subi	r18, 0xFF	; 255
    3964:	3f 4f       	sbci	r19, 0xFF	; 255
    3966:	4f 4f       	sbci	r20, 0xFF	; 255
    3968:	5f 4f       	sbci	r21, 0xFF	; 255
    396a:	2d 83       	std	Y+5, r18	; 0x05
    396c:	3e 83       	std	Y+6, r19	; 0x06
    396e:	4f 83       	std	Y+7, r20	; 0x07
    3970:	58 87       	std	Y+8, r21	; 0x08
    3972:	2c 01       	movw	r4, r24
    3974:	3d 01       	movw	r6, r26
    3976:	a7 cf       	rjmp	.-178    	; 0x38c6 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    3978:	0f ef       	ldi	r16, 0xFF	; 255
    397a:	1f ef       	ldi	r17, 0xFF	; 255
    397c:	2f ef       	ldi	r18, 0xFF	; 255
    397e:	3f e0       	ldi	r19, 0x0F	; 15
    3980:	b3 01       	movw	r22, r6
    3982:	a2 01       	movw	r20, r4
    3984:	c5 01       	movw	r24, r10
    3986:	aa de       	rcall	.-684    	; 0x36dc <_ZN8SdVolume6fatPutEmm>
    3988:	81 11       	cpse	r24, r1
    398a:	17 c0       	rjmp	.+46     	; 0x39ba <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	3f c0       	rjmp	.+126    	; 0x3a0e <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    3990:	d3 01       	movw	r26, r6
    3992:	c2 01       	movw	r24, r4
    3994:	01 97       	sbiw	r24, 0x01	; 1
    3996:	a1 09       	sbc	r26, r1
    3998:	b1 09       	sbc	r27, r1
    399a:	8d 83       	std	Y+5, r24	; 0x05
    399c:	9e 83       	std	Y+6, r25	; 0x06
    399e:	af 83       	std	Y+7, r26	; 0x07
    39a0:	b8 87       	std	Y+8, r27	; 0x08
    39a2:	93 01       	movw	r18, r6
    39a4:	82 01       	movw	r16, r4
    39a6:	ac 01       	movw	r20, r24
    39a8:	bd 01       	movw	r22, r26
    39aa:	c5 01       	movw	r24, r10
    39ac:	97 de       	rcall	.-722    	; 0x36dc <_ZN8SdVolume6fatPutEmm>
    39ae:	88 23       	and	r24, r24
    39b0:	69 f3       	breq	.-38     	; 0x398c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    39b2:	4d 80       	ldd	r4, Y+5	; 0x05
    39b4:	5e 80       	ldd	r5, Y+6	; 0x06
    39b6:	6f 80       	ldd	r6, Y+7	; 0x07
    39b8:	78 84       	ldd	r7, Y+8	; 0x08
    39ba:	c4 14       	cp	r12, r4
    39bc:	d5 04       	cpc	r13, r5
    39be:	e6 04       	cpc	r14, r6
    39c0:	f7 04       	cpc	r15, r7
    39c2:	30 f3       	brcs	.-52     	; 0x3990 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    39c4:	d1 01       	movw	r26, r2
    39c6:	4d 91       	ld	r20, X+
    39c8:	5d 91       	ld	r21, X+
    39ca:	6d 91       	ld	r22, X+
    39cc:	7c 91       	ld	r23, X
    39ce:	41 15       	cp	r20, r1
    39d0:	51 05       	cpc	r21, r1
    39d2:	61 05       	cpc	r22, r1
    39d4:	71 05       	cpc	r23, r1
    39d6:	99 f4       	brne	.+38     	; 0x39fe <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    39d8:	f1 01       	movw	r30, r2
    39da:	c0 82       	st	Z, r12
    39dc:	d1 82       	std	Z+1, r13	; 0x01
    39de:	e2 82       	std	Z+2, r14	; 0x02
    39e0:	f3 82       	std	Z+3, r15	; 0x03
    39e2:	99 20       	and	r9, r9
    39e4:	99 f0       	breq	.+38     	; 0x3a0c <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    39e6:	ff ef       	ldi	r31, 0xFF	; 255
    39e8:	cf 1a       	sub	r12, r31
    39ea:	df 0a       	sbc	r13, r31
    39ec:	ef 0a       	sbc	r14, r31
    39ee:	ff 0a       	sbc	r15, r31
    39f0:	d5 01       	movw	r26, r10
    39f2:	cd 92       	st	X+, r12
    39f4:	dd 92       	st	X+, r13
    39f6:	ed 92       	st	X+, r14
    39f8:	fc 92       	st	X, r15
    39fa:	13 97       	sbiw	r26, 0x03	; 3
    39fc:	07 c0       	rjmp	.+14     	; 0x3a0c <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    39fe:	97 01       	movw	r18, r14
    3a00:	86 01       	movw	r16, r12
    3a02:	c5 01       	movw	r24, r10
    3a04:	6b de       	rcall	.-810    	; 0x36dc <_ZN8SdVolume6fatPutEmm>
    3a06:	81 11       	cpse	r24, r1
    3a08:	e7 cf       	rjmp	.-50     	; 0x39d8 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    3a0a:	c0 cf       	rjmp	.-128    	; 0x398c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	60 96       	adiw	r28, 0x10	; 16
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	df 91       	pop	r29
    3a1c:	cf 91       	pop	r28
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	ff 90       	pop	r15
    3a24:	ef 90       	pop	r14
    3a26:	df 90       	pop	r13
    3a28:	cf 90       	pop	r12
    3a2a:	bf 90       	pop	r11
    3a2c:	af 90       	pop	r10
    3a2e:	9f 90       	pop	r9
    3a30:	7f 90       	pop	r7
    3a32:	6f 90       	pop	r6
    3a34:	5f 90       	pop	r5
    3a36:	4f 90       	pop	r4
    3a38:	3f 90       	pop	r3
    3a3a:	2f 90       	pop	r2
    3a3c:	08 95       	ret

00003a3e <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    3a3e:	8f 92       	push	r8
    3a40:	9f 92       	push	r9
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	ec 01       	movw	r28, r24
    3a58:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3a5a:	70 93 90 06 	sts	0x0690, r23	; 0x800690 <_ZN8SdVolume7sdCard_E+0x1>
    3a5e:	60 93 8f 06 	sts	0x068F, r22	; 0x80068f <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3a62:	44 23       	and	r20, r20
    3a64:	61 f1       	breq	.+88     	; 0x3abe <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    3a66:	45 30       	cpi	r20, 0x05	; 5
    3a68:	10 f0       	brcs	.+4      	; 0x3a6e <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	ef c0       	rjmp	.+478    	; 0x3c4c <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3a6e:	40 e0       	ldi	r20, 0x00	; 0
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	cb 01       	movw	r24, r22
    3a76:	0f dd       	rcall	.-1506   	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    3a78:	88 23       	and	r24, r24
    3a7a:	b9 f3       	breq	.-18     	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3a7c:	20 e1       	ldi	r18, 0x10	; 16
    3a7e:	12 9f       	mul	r17, r18
    3a80:	a0 01       	movw	r20, r0
    3a82:	11 24       	eor	r1, r1
    3a84:	4f 57       	subi	r20, 0x7F	; 127
    3a86:	59 4f       	sbci	r21, 0xF9	; 249
    3a88:	fa 01       	movw	r30, r20
    3a8a:	e2 54       	subi	r30, 0x42	; 66
    3a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8e:	80 81       	ld	r24, Z
    3a90:	8f 77       	andi	r24, 0x7F	; 127
    3a92:	59 f7       	brne	.-42     	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    3a94:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    3a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    3a9e:	84 36       	cpi	r24, 0x64	; 100
    3aa0:	91 05       	cpc	r25, r1
    3aa2:	a1 05       	cpc	r26, r1
    3aa4:	b1 05       	cpc	r27, r1
    3aa6:	08 f3       	brcs	.-62     	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    3aa8:	34 97       	sbiw	r30, 0x04	; 4
    3aaa:	c0 80       	ld	r12, Z
    3aac:	d1 80       	ldd	r13, Z+1	; 0x01
    3aae:	e2 80       	ldd	r14, Z+2	; 0x02
    3ab0:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    3ab2:	c1 14       	cp	r12, r1
    3ab4:	d1 04       	cpc	r13, r1
    3ab6:	e1 04       	cpc	r14, r1
    3ab8:	f1 04       	cpc	r15, r1
    3aba:	21 f4       	brne	.+8      	; 0x3ac4 <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    3abc:	d6 cf       	rjmp	.-84     	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    3abe:	c1 2c       	mov	r12, r1
    3ac0:	d1 2c       	mov	r13, r1
    3ac2:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3ac4:	40 e0       	ldi	r20, 0x00	; 0
    3ac6:	c7 01       	movw	r24, r14
    3ac8:	b6 01       	movw	r22, r12
    3aca:	e5 dc       	rcall	.-1590   	; 0x3496 <_ZN8SdVolume13cacheRawBlockEmh>
    3acc:	88 23       	and	r24, r24
    3ace:	69 f2       	breq	.-102    	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3ad0:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <_ZN8SdVolume12cacheBuffer_E+0xb>
    3ad4:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <_ZN8SdVolume12cacheBuffer_E+0xc>
    3ad8:	81 15       	cp	r24, r1
    3ada:	92 40       	sbci	r25, 0x02	; 2
    3adc:	31 f6       	brne	.-116    	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    3ade:	90 91 a1 06 	lds	r25, 0x06A1	; 0x8006a1 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3ae2:	99 23       	and	r25, r25
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    3ae6:	c1 cf       	rjmp	.-126    	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    3ae8:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <_ZN8SdVolume12cacheBuffer_E+0xe>
    3aec:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3af0:	23 2b       	or	r18, r19
    3af2:	09 f4       	brne	.+2      	; 0x3af6 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    3af4:	ba cf       	rjmp	.-140    	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    3af6:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    3afa:	88 23       	and	r24, r24
    3afc:	09 f4       	brne	.+2      	; 0x3b00 <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    3afe:	b5 cf       	rjmp	.-150    	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    3b00:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    3b02:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3b04:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	41 e0       	ldi	r20, 0x01	; 1
    3b0a:	50 e0       	ldi	r21, 0x00	; 0
    3b0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b0e:	e2 2f       	mov	r30, r18
    3b10:	ba 01       	movw	r22, r20
    3b12:	02 2e       	mov	r0, r18
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    3b16:	66 0f       	add	r22, r22
    3b18:	77 1f       	adc	r23, r23
    3b1a:	0a 94       	dec	r0
    3b1c:	e2 f7       	brpl	.-8      	; 0x3b16 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    3b1e:	86 17       	cp	r24, r22
    3b20:	97 07       	cpc	r25, r23
    3b22:	31 f0       	breq	.+12     	; 0x3b30 <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3b24:	31 e0       	ldi	r19, 0x01	; 1
    3b26:	32 0f       	add	r19, r18
    3b28:	3d 87       	std	Y+13, r19	; 0x0d
    3b2a:	28 30       	cpi	r18, 0x08	; 8
    3b2c:	78 f3       	brcs	.-34     	; 0x3b0c <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    3b2e:	9d cf       	rjmp	.-198    	; 0x3a6a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    3b30:	20 91 a7 06 	lds	r18, 0x06A7	; 0x8006a7 <_ZN8SdVolume12cacheBuffer_E+0x16>
    3b34:	30 91 a8 06 	lds	r19, 0x06A8	; 0x8006a8 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    3b38:	21 15       	cp	r18, r1
    3b3a:	31 05       	cpc	r19, r1
    3b3c:	19 f0       	breq	.+6      	; 0x3b44 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	50 e0       	ldi	r21, 0x00	; 0
    3b42:	08 c0       	rjmp	.+16     	; 0x3b54 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    3b44:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <_ZN8SdVolume12cacheBuffer_E+0x24>
    3b48:	30 91 b6 06 	lds	r19, 0x06B6	; 0x8006b6 <_ZN8SdVolume12cacheBuffer_E+0x25>
    3b4c:	40 91 b7 06 	lds	r20, 0x06B7	; 0x8006b7 <_ZN8SdVolume12cacheBuffer_E+0x26>
    3b50:	50 91 b8 06 	lds	r21, 0x06B8	; 0x8006b8 <_ZN8SdVolume12cacheBuffer_E+0x27>
    3b54:	2d 83       	std	Y+5, r18	; 0x05
    3b56:	3e 83       	std	Y+6, r19	; 0x06
    3b58:	4f 83       	std	Y+7, r20	; 0x07
    3b5a:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    3b5c:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <_ZN8SdVolume12cacheBuffer_E+0xe>
    3b60:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3b64:	46 01       	movw	r8, r12
    3b66:	57 01       	movw	r10, r14
    3b68:	88 0e       	add	r8, r24
    3b6a:	99 1e       	adc	r9, r25
    3b6c:	a1 1c       	adc	r10, r1
    3b6e:	b1 1c       	adc	r11, r1
    3b70:	8b 8a       	std	Y+19, r8	; 0x13
    3b72:	9c 8a       	std	Y+20, r9	; 0x14
    3b74:	ad 8a       	std	Y+21, r10	; 0x15
    3b76:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3b78:	00 91 a2 06 	lds	r16, 0x06A2	; 0x8006a2 <_ZN8SdVolume12cacheBuffer_E+0x11>
    3b7c:	10 91 a3 06 	lds	r17, 0x06A3	; 0x8006a3 <_ZN8SdVolume12cacheBuffer_E+0x12>
    3b80:	19 8f       	std	Y+25, r17	; 0x19
    3b82:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3b84:	a0 91 a1 06 	lds	r26, 0x06A1	; 0x8006a1 <_ZN8SdVolume12cacheBuffer_E+0x10>
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	e9 d0       	rcall	.+466    	; 0x3d5e <__muluhisi3>
    3b8c:	86 0e       	add	r8, r22
    3b8e:	97 1e       	adc	r9, r23
    3b90:	a8 1e       	adc	r10, r24
    3b92:	b9 1e       	adc	r11, r25
    3b94:	8a 8e       	std	Y+26, r8	; 0x1a
    3b96:	9b 8e       	std	Y+27, r9	; 0x1b
    3b98:	ac 8e       	std	Y+28, r10	; 0x1c
    3b9a:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    3b9c:	85 e0       	ldi	r24, 0x05	; 5
    3b9e:	00 0f       	add	r16, r16
    3ba0:	11 1f       	adc	r17, r17
    3ba2:	8a 95       	dec	r24
    3ba4:	e1 f7       	brne	.-8      	; 0x3b9e <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    3ba6:	01 50       	subi	r16, 0x01	; 1
    3ba8:	1e 4f       	sbci	r17, 0xFE	; 254
    3baa:	01 2f       	mov	r16, r17
    3bac:	11 27       	eor	r17, r17
    3bae:	06 95       	lsr	r16
    3bb0:	80 0e       	add	r8, r16
    3bb2:	91 1e       	adc	r9, r17
    3bb4:	a1 1c       	adc	r10, r1
    3bb6:	b1 1c       	adc	r11, r1
    3bb8:	8e 86       	std	Y+14, r8	; 0x0e
    3bba:	9f 86       	std	Y+15, r9	; 0x0f
    3bbc:	a8 8a       	std	Y+16, r10	; 0x10
    3bbe:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    3bc0:	20 91 a4 06 	lds	r18, 0x06A4	; 0x8006a4 <_ZN8SdVolume12cacheBuffer_E+0x13>
    3bc4:	30 91 a5 06 	lds	r19, 0x06A5	; 0x8006a5 <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    3bc8:	21 15       	cp	r18, r1
    3bca:	31 05       	cpc	r19, r1
    3bcc:	21 f0       	breq	.+8      	; 0x3bd6 <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    3bce:	a9 01       	movw	r20, r18
    3bd0:	60 e0       	ldi	r22, 0x00	; 0
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	08 c0       	rjmp	.+16     	; 0x3be6 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    3bd6:	40 91 b1 06 	lds	r20, 0x06B1	; 0x8006b1 <_ZN8SdVolume12cacheBuffer_E+0x20>
    3bda:	50 91 b2 06 	lds	r21, 0x06B2	; 0x8006b2 <_ZN8SdVolume12cacheBuffer_E+0x21>
    3bde:	60 91 b3 06 	lds	r22, 0x06B3	; 0x8006b3 <_ZN8SdVolume12cacheBuffer_E+0x22>
    3be2:	70 91 b4 06 	lds	r23, 0x06B4	; 0x8006b4 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3be6:	d7 01       	movw	r26, r14
    3be8:	c6 01       	movw	r24, r12
    3bea:	88 19       	sub	r24, r8
    3bec:	99 09       	sbc	r25, r9
    3bee:	aa 09       	sbc	r26, r10
    3bf0:	bb 09       	sbc	r27, r11
    3bf2:	84 0f       	add	r24, r20
    3bf4:	95 1f       	adc	r25, r21
    3bf6:	a6 1f       	adc	r26, r22
    3bf8:	b7 1f       	adc	r27, r23
    3bfa:	04 c0       	rjmp	.+8      	; 0x3c04 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    3bfc:	b6 95       	lsr	r27
    3bfe:	a7 95       	ror	r26
    3c00:	97 95       	ror	r25
    3c02:	87 95       	ror	r24
    3c04:	ea 95       	dec	r30
    3c06:	d2 f7       	brpl	.-12     	; 0x3bfc <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    3c08:	89 87       	std	Y+9, r24	; 0x09
    3c0a:	9a 87       	std	Y+10, r25	; 0x0a
    3c0c:	ab 87       	std	Y+11, r26	; 0x0b
    3c0e:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3c10:	85 3f       	cpi	r24, 0xF5	; 245
    3c12:	2f e0       	ldi	r18, 0x0F	; 15
    3c14:	92 07       	cpc	r25, r18
    3c16:	a1 05       	cpc	r26, r1
    3c18:	b1 05       	cpc	r27, r1
    3c1a:	10 f4       	brcc	.+4      	; 0x3c20 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    3c1c:	8c e0       	ldi	r24, 0x0C	; 12
    3c1e:	14 c0       	rjmp	.+40     	; 0x3c48 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    3c20:	85 3f       	cpi	r24, 0xF5	; 245
    3c22:	9f 4f       	sbci	r25, 0xFF	; 255
    3c24:	a1 05       	cpc	r26, r1
    3c26:	b1 05       	cpc	r27, r1
    3c28:	10 f4       	brcc	.+4      	; 0x3c2e <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    3c2a:	80 e1       	ldi	r24, 0x10	; 16
    3c2c:	0d c0       	rjmp	.+26     	; 0x3c48 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    3c2e:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <_ZN8SdVolume12cacheBuffer_E+0x2c>
    3c32:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <_ZN8SdVolume12cacheBuffer_E+0x2d>
    3c36:	a0 91 bf 06 	lds	r26, 0x06BF	; 0x8006bf <_ZN8SdVolume12cacheBuffer_E+0x2e>
    3c3a:	b0 91 c0 06 	lds	r27, 0x06C0	; 0x8006c0 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    3c3e:	8a 8f       	std	Y+26, r24	; 0x1a
    3c40:	9b 8f       	std	Y+27, r25	; 0x1b
    3c42:	ac 8f       	std	Y+28, r26	; 0x1c
    3c44:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    3c46:	80 e2       	ldi	r24, 0x20	; 32
    3c48:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
}
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	1f 91       	pop	r17
    3c52:	0f 91       	pop	r16
    3c54:	ff 90       	pop	r15
    3c56:	ef 90       	pop	r14
    3c58:	df 90       	pop	r13
    3c5a:	cf 90       	pop	r12
    3c5c:	bf 90       	pop	r11
    3c5e:	af 90       	pop	r10
    3c60:	9f 90       	pop	r9
    3c62:	8f 90       	pop	r8
    3c64:	08 95       	ret

00003c66 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3c66:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3c68:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3c6a:	f8 94       	cli
  if (!initialized) {
    3c6c:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <_ZN8SPIClass11initializedE>
    3c70:	81 11       	cpse	r24, r1
    3c72:	27 c0       	rjmp	.+78     	; 0x3cc2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3c74:	e2 e1       	ldi	r30, 0x12	; 18
    3c76:	f2 e0       	ldi	r31, 0x02	; 2
    3c78:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3c7a:	ec ec       	ldi	r30, 0xCC	; 204
    3c7c:	f1 e0       	ldi	r31, 0x01	; 1
    3c7e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3c80:	e8 2f       	mov	r30, r24
    3c82:	f0 e0       	ldi	r31, 0x00	; 0
    3c84:	ee 0f       	add	r30, r30
    3c86:	ff 1f       	adc	r31, r31
    3c88:	e9 5a       	subi	r30, 0xA9	; 169
    3c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    3c8c:	a5 91       	lpm	r26, Z+
    3c8e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3c90:	ec 91       	ld	r30, X
    3c92:	e9 23       	and	r30, r25
    3c94:	21 f4       	brne	.+8      	; 0x3c9e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3c96:	61 e0       	ldi	r22, 0x01	; 1
    3c98:	85 e3       	ldi	r24, 0x35	; 53
    3c9a:	0e 94 c4 10 	call	0x2188	; 0x2188 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3c9e:	61 e0       	ldi	r22, 0x01	; 1
    3ca0:	85 e3       	ldi	r24, 0x35	; 53
    3ca2:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3ca6:	8c b5       	in	r24, 0x2c	; 44
    3ca8:	80 61       	ori	r24, 0x10	; 16
    3caa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3cac:	8c b5       	in	r24, 0x2c	; 44
    3cae:	80 64       	ori	r24, 0x40	; 64
    3cb0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	84 e3       	ldi	r24, 0x34	; 52
    3cb6:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>
    pinMode(MOSI, OUTPUT);
    3cba:	61 e0       	ldi	r22, 0x01	; 1
    3cbc:	83 e3       	ldi	r24, 0x33	; 51
    3cbe:	0e 94 88 10 	call	0x2110	; 0x2110 <pinMode>
  }
  initialized++; // reference count
    3cc2:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <_ZN8SPIClass11initializedE>
    3cc6:	8f 5f       	subi	r24, 0xFF	; 255
    3cc8:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3ccc:	cf bf       	out	0x3f, r28	; 63
}
    3cce:	cf 91       	pop	r28
    3cd0:	08 95       	ret

00003cd2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3cd2:	08 95       	ret

00003cd4 <__udivmodqi4>:
    3cd4:	99 1b       	sub	r25, r25
    3cd6:	79 e0       	ldi	r23, 0x09	; 9
    3cd8:	04 c0       	rjmp	.+8      	; 0x3ce2 <__udivmodqi4_ep>

00003cda <__udivmodqi4_loop>:
    3cda:	99 1f       	adc	r25, r25
    3cdc:	96 17       	cp	r25, r22
    3cde:	08 f0       	brcs	.+2      	; 0x3ce2 <__udivmodqi4_ep>
    3ce0:	96 1b       	sub	r25, r22

00003ce2 <__udivmodqi4_ep>:
    3ce2:	88 1f       	adc	r24, r24
    3ce4:	7a 95       	dec	r23
    3ce6:	c9 f7       	brne	.-14     	; 0x3cda <__udivmodqi4_loop>
    3ce8:	80 95       	com	r24
    3cea:	08 95       	ret

00003cec <__udivmodsi4>:
    3cec:	a1 e2       	ldi	r26, 0x21	; 33
    3cee:	1a 2e       	mov	r1, r26
    3cf0:	aa 1b       	sub	r26, r26
    3cf2:	bb 1b       	sub	r27, r27
    3cf4:	fd 01       	movw	r30, r26
    3cf6:	0d c0       	rjmp	.+26     	; 0x3d12 <__udivmodsi4_ep>

00003cf8 <__udivmodsi4_loop>:
    3cf8:	aa 1f       	adc	r26, r26
    3cfa:	bb 1f       	adc	r27, r27
    3cfc:	ee 1f       	adc	r30, r30
    3cfe:	ff 1f       	adc	r31, r31
    3d00:	a2 17       	cp	r26, r18
    3d02:	b3 07       	cpc	r27, r19
    3d04:	e4 07       	cpc	r30, r20
    3d06:	f5 07       	cpc	r31, r21
    3d08:	20 f0       	brcs	.+8      	; 0x3d12 <__udivmodsi4_ep>
    3d0a:	a2 1b       	sub	r26, r18
    3d0c:	b3 0b       	sbc	r27, r19
    3d0e:	e4 0b       	sbc	r30, r20
    3d10:	f5 0b       	sbc	r31, r21

00003d12 <__udivmodsi4_ep>:
    3d12:	66 1f       	adc	r22, r22
    3d14:	77 1f       	adc	r23, r23
    3d16:	88 1f       	adc	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	1a 94       	dec	r1
    3d1c:	69 f7       	brne	.-38     	; 0x3cf8 <__udivmodsi4_loop>
    3d1e:	60 95       	com	r22
    3d20:	70 95       	com	r23
    3d22:	80 95       	com	r24
    3d24:	90 95       	com	r25
    3d26:	9b 01       	movw	r18, r22
    3d28:	ac 01       	movw	r20, r24
    3d2a:	bd 01       	movw	r22, r26
    3d2c:	cf 01       	movw	r24, r30
    3d2e:	08 95       	ret

00003d30 <__tablejump2__>:
    3d30:	ee 0f       	add	r30, r30
    3d32:	ff 1f       	adc	r31, r31
    3d34:	88 1f       	adc	r24, r24
    3d36:	8b bf       	out	0x3b, r24	; 59
    3d38:	07 90       	elpm	r0, Z+
    3d3a:	f6 91       	elpm	r31, Z
    3d3c:	e0 2d       	mov	r30, r0
    3d3e:	19 94       	eijmp

00003d40 <__umulhisi3>:
    3d40:	a2 9f       	mul	r26, r18
    3d42:	b0 01       	movw	r22, r0
    3d44:	b3 9f       	mul	r27, r19
    3d46:	c0 01       	movw	r24, r0
    3d48:	a3 9f       	mul	r26, r19
    3d4a:	70 0d       	add	r23, r0
    3d4c:	81 1d       	adc	r24, r1
    3d4e:	11 24       	eor	r1, r1
    3d50:	91 1d       	adc	r25, r1
    3d52:	b2 9f       	mul	r27, r18
    3d54:	70 0d       	add	r23, r0
    3d56:	81 1d       	adc	r24, r1
    3d58:	11 24       	eor	r1, r1
    3d5a:	91 1d       	adc	r25, r1
    3d5c:	08 95       	ret

00003d5e <__muluhisi3>:
    3d5e:	f0 df       	rcall	.-32     	; 0x3d40 <__umulhisi3>
    3d60:	a5 9f       	mul	r26, r21
    3d62:	90 0d       	add	r25, r0
    3d64:	b4 9f       	mul	r27, r20
    3d66:	90 0d       	add	r25, r0
    3d68:	a4 9f       	mul	r26, r20
    3d6a:	80 0d       	add	r24, r0
    3d6c:	91 1d       	adc	r25, r1
    3d6e:	11 24       	eor	r1, r1
    3d70:	08 95       	ret

00003d72 <malloc>:
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	82 30       	cpi	r24, 0x02	; 2
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	10 f4       	brcc	.+4      	; 0x3d84 <malloc+0x12>
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <__flp>
    3d88:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <__flp+0x1>
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	a0 e0       	ldi	r26, 0x00	; 0
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	30 97       	sbiw	r30, 0x00	; 0
    3d96:	19 f1       	breq	.+70     	; 0x3dde <malloc+0x6c>
    3d98:	40 81       	ld	r20, Z
    3d9a:	51 81       	ldd	r21, Z+1	; 0x01
    3d9c:	02 81       	ldd	r16, Z+2	; 0x02
    3d9e:	13 81       	ldd	r17, Z+3	; 0x03
    3da0:	48 17       	cp	r20, r24
    3da2:	59 07       	cpc	r21, r25
    3da4:	c8 f0       	brcs	.+50     	; 0x3dd8 <malloc+0x66>
    3da6:	84 17       	cp	r24, r20
    3da8:	95 07       	cpc	r25, r21
    3daa:	69 f4       	brne	.+26     	; 0x3dc6 <malloc+0x54>
    3dac:	10 97       	sbiw	r26, 0x00	; 0
    3dae:	31 f0       	breq	.+12     	; 0x3dbc <malloc+0x4a>
    3db0:	12 96       	adiw	r26, 0x02	; 2
    3db2:	0c 93       	st	X, r16
    3db4:	12 97       	sbiw	r26, 0x02	; 2
    3db6:	13 96       	adiw	r26, 0x03	; 3
    3db8:	1c 93       	st	X, r17
    3dba:	27 c0       	rjmp	.+78     	; 0x3e0a <malloc+0x98>
    3dbc:	00 93 97 08 	sts	0x0897, r16	; 0x800897 <__flp>
    3dc0:	10 93 98 08 	sts	0x0898, r17	; 0x800898 <__flp+0x1>
    3dc4:	22 c0       	rjmp	.+68     	; 0x3e0a <malloc+0x98>
    3dc6:	21 15       	cp	r18, r1
    3dc8:	31 05       	cpc	r19, r1
    3dca:	19 f0       	breq	.+6      	; 0x3dd2 <malloc+0x60>
    3dcc:	42 17       	cp	r20, r18
    3dce:	53 07       	cpc	r21, r19
    3dd0:	18 f4       	brcc	.+6      	; 0x3dd8 <malloc+0x66>
    3dd2:	9a 01       	movw	r18, r20
    3dd4:	bd 01       	movw	r22, r26
    3dd6:	ef 01       	movw	r28, r30
    3dd8:	df 01       	movw	r26, r30
    3dda:	f8 01       	movw	r30, r16
    3ddc:	db cf       	rjmp	.-74     	; 0x3d94 <malloc+0x22>
    3dde:	21 15       	cp	r18, r1
    3de0:	31 05       	cpc	r19, r1
    3de2:	f9 f0       	breq	.+62     	; 0x3e22 <malloc+0xb0>
    3de4:	28 1b       	sub	r18, r24
    3de6:	39 0b       	sbc	r19, r25
    3de8:	24 30       	cpi	r18, 0x04	; 4
    3dea:	31 05       	cpc	r19, r1
    3dec:	80 f4       	brcc	.+32     	; 0x3e0e <malloc+0x9c>
    3dee:	8a 81       	ldd	r24, Y+2	; 0x02
    3df0:	9b 81       	ldd	r25, Y+3	; 0x03
    3df2:	61 15       	cp	r22, r1
    3df4:	71 05       	cpc	r23, r1
    3df6:	21 f0       	breq	.+8      	; 0x3e00 <malloc+0x8e>
    3df8:	fb 01       	movw	r30, r22
    3dfa:	93 83       	std	Z+3, r25	; 0x03
    3dfc:	82 83       	std	Z+2, r24	; 0x02
    3dfe:	04 c0       	rjmp	.+8      	; 0x3e08 <malloc+0x96>
    3e00:	90 93 98 08 	sts	0x0898, r25	; 0x800898 <__flp+0x1>
    3e04:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <__flp>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	32 96       	adiw	r30, 0x02	; 2
    3e0c:	44 c0       	rjmp	.+136    	; 0x3e96 <malloc+0x124>
    3e0e:	fe 01       	movw	r30, r28
    3e10:	e2 0f       	add	r30, r18
    3e12:	f3 1f       	adc	r31, r19
    3e14:	81 93       	st	Z+, r24
    3e16:	91 93       	st	Z+, r25
    3e18:	22 50       	subi	r18, 0x02	; 2
    3e1a:	31 09       	sbc	r19, r1
    3e1c:	39 83       	std	Y+1, r19	; 0x01
    3e1e:	28 83       	st	Y, r18
    3e20:	3a c0       	rjmp	.+116    	; 0x3e96 <malloc+0x124>
    3e22:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <__brkval>
    3e26:	30 91 96 08 	lds	r19, 0x0896	; 0x800896 <__brkval+0x1>
    3e2a:	23 2b       	or	r18, r19
    3e2c:	41 f4       	brne	.+16     	; 0x3e3e <malloc+0xcc>
    3e2e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3e32:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3e36:	30 93 96 08 	sts	0x0896, r19	; 0x800896 <__brkval+0x1>
    3e3a:	20 93 95 08 	sts	0x0895, r18	; 0x800895 <__brkval>
    3e3e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3e42:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3e46:	21 15       	cp	r18, r1
    3e48:	31 05       	cpc	r19, r1
    3e4a:	41 f4       	brne	.+16     	; 0x3e5c <malloc+0xea>
    3e4c:	2d b7       	in	r18, 0x3d	; 61
    3e4e:	3e b7       	in	r19, 0x3e	; 62
    3e50:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3e54:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3e58:	24 1b       	sub	r18, r20
    3e5a:	35 0b       	sbc	r19, r21
    3e5c:	e0 91 95 08 	lds	r30, 0x0895	; 0x800895 <__brkval>
    3e60:	f0 91 96 08 	lds	r31, 0x0896	; 0x800896 <__brkval+0x1>
    3e64:	e2 17       	cp	r30, r18
    3e66:	f3 07       	cpc	r31, r19
    3e68:	a0 f4       	brcc	.+40     	; 0x3e92 <malloc+0x120>
    3e6a:	2e 1b       	sub	r18, r30
    3e6c:	3f 0b       	sbc	r19, r31
    3e6e:	28 17       	cp	r18, r24
    3e70:	39 07       	cpc	r19, r25
    3e72:	78 f0       	brcs	.+30     	; 0x3e92 <malloc+0x120>
    3e74:	ac 01       	movw	r20, r24
    3e76:	4e 5f       	subi	r20, 0xFE	; 254
    3e78:	5f 4f       	sbci	r21, 0xFF	; 255
    3e7a:	24 17       	cp	r18, r20
    3e7c:	35 07       	cpc	r19, r21
    3e7e:	48 f0       	brcs	.+18     	; 0x3e92 <malloc+0x120>
    3e80:	4e 0f       	add	r20, r30
    3e82:	5f 1f       	adc	r21, r31
    3e84:	50 93 96 08 	sts	0x0896, r21	; 0x800896 <__brkval+0x1>
    3e88:	40 93 95 08 	sts	0x0895, r20	; 0x800895 <__brkval>
    3e8c:	81 93       	st	Z+, r24
    3e8e:	91 93       	st	Z+, r25
    3e90:	02 c0       	rjmp	.+4      	; 0x3e96 <malloc+0x124>
    3e92:	e0 e0       	ldi	r30, 0x00	; 0
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	cf 01       	movw	r24, r30
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	08 95       	ret

00003ea2 <free>:
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <free+0xa>
    3eaa:	81 c0       	rjmp	.+258    	; 0x3fae <free+0x10c>
    3eac:	fc 01       	movw	r30, r24
    3eae:	32 97       	sbiw	r30, 0x02	; 2
    3eb0:	13 82       	std	Z+3, r1	; 0x03
    3eb2:	12 82       	std	Z+2, r1	; 0x02
    3eb4:	a0 91 97 08 	lds	r26, 0x0897	; 0x800897 <__flp>
    3eb8:	b0 91 98 08 	lds	r27, 0x0898	; 0x800898 <__flp+0x1>
    3ebc:	10 97       	sbiw	r26, 0x00	; 0
    3ebe:	81 f4       	brne	.+32     	; 0x3ee0 <free+0x3e>
    3ec0:	20 81       	ld	r18, Z
    3ec2:	31 81       	ldd	r19, Z+1	; 0x01
    3ec4:	82 0f       	add	r24, r18
    3ec6:	93 1f       	adc	r25, r19
    3ec8:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <__brkval>
    3ecc:	30 91 96 08 	lds	r19, 0x0896	; 0x800896 <__brkval+0x1>
    3ed0:	28 17       	cp	r18, r24
    3ed2:	39 07       	cpc	r19, r25
    3ed4:	51 f5       	brne	.+84     	; 0x3f2a <free+0x88>
    3ed6:	f0 93 96 08 	sts	0x0896, r31	; 0x800896 <__brkval+0x1>
    3eda:	e0 93 95 08 	sts	0x0895, r30	; 0x800895 <__brkval>
    3ede:	67 c0       	rjmp	.+206    	; 0x3fae <free+0x10c>
    3ee0:	ed 01       	movw	r28, r26
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	ce 17       	cp	r28, r30
    3ee8:	df 07       	cpc	r29, r31
    3eea:	40 f4       	brcc	.+16     	; 0x3efc <free+0x5a>
    3eec:	4a 81       	ldd	r20, Y+2	; 0x02
    3eee:	5b 81       	ldd	r21, Y+3	; 0x03
    3ef0:	9e 01       	movw	r18, r28
    3ef2:	41 15       	cp	r20, r1
    3ef4:	51 05       	cpc	r21, r1
    3ef6:	f1 f0       	breq	.+60     	; 0x3f34 <free+0x92>
    3ef8:	ea 01       	movw	r28, r20
    3efa:	f5 cf       	rjmp	.-22     	; 0x3ee6 <free+0x44>
    3efc:	d3 83       	std	Z+3, r29	; 0x03
    3efe:	c2 83       	std	Z+2, r28	; 0x02
    3f00:	40 81       	ld	r20, Z
    3f02:	51 81       	ldd	r21, Z+1	; 0x01
    3f04:	84 0f       	add	r24, r20
    3f06:	95 1f       	adc	r25, r21
    3f08:	c8 17       	cp	r28, r24
    3f0a:	d9 07       	cpc	r29, r25
    3f0c:	59 f4       	brne	.+22     	; 0x3f24 <free+0x82>
    3f0e:	88 81       	ld	r24, Y
    3f10:	99 81       	ldd	r25, Y+1	; 0x01
    3f12:	84 0f       	add	r24, r20
    3f14:	95 1f       	adc	r25, r21
    3f16:	02 96       	adiw	r24, 0x02	; 2
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	80 83       	st	Z, r24
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f20:	93 83       	std	Z+3, r25	; 0x03
    3f22:	82 83       	std	Z+2, r24	; 0x02
    3f24:	21 15       	cp	r18, r1
    3f26:	31 05       	cpc	r19, r1
    3f28:	29 f4       	brne	.+10     	; 0x3f34 <free+0x92>
    3f2a:	f0 93 98 08 	sts	0x0898, r31	; 0x800898 <__flp+0x1>
    3f2e:	e0 93 97 08 	sts	0x0897, r30	; 0x800897 <__flp>
    3f32:	3d c0       	rjmp	.+122    	; 0x3fae <free+0x10c>
    3f34:	e9 01       	movw	r28, r18
    3f36:	fb 83       	std	Y+3, r31	; 0x03
    3f38:	ea 83       	std	Y+2, r30	; 0x02
    3f3a:	49 91       	ld	r20, Y+
    3f3c:	59 91       	ld	r21, Y+
    3f3e:	c4 0f       	add	r28, r20
    3f40:	d5 1f       	adc	r29, r21
    3f42:	ec 17       	cp	r30, r28
    3f44:	fd 07       	cpc	r31, r29
    3f46:	61 f4       	brne	.+24     	; 0x3f60 <free+0xbe>
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	84 0f       	add	r24, r20
    3f4e:	95 1f       	adc	r25, r21
    3f50:	02 96       	adiw	r24, 0x02	; 2
    3f52:	e9 01       	movw	r28, r18
    3f54:	99 83       	std	Y+1, r25	; 0x01
    3f56:	88 83       	st	Y, r24
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	9b 83       	std	Y+3, r25	; 0x03
    3f5e:	8a 83       	std	Y+2, r24	; 0x02
    3f60:	e0 e0       	ldi	r30, 0x00	; 0
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	12 96       	adiw	r26, 0x02	; 2
    3f66:	8d 91       	ld	r24, X+
    3f68:	9c 91       	ld	r25, X
    3f6a:	13 97       	sbiw	r26, 0x03	; 3
    3f6c:	00 97       	sbiw	r24, 0x00	; 0
    3f6e:	19 f0       	breq	.+6      	; 0x3f76 <free+0xd4>
    3f70:	fd 01       	movw	r30, r26
    3f72:	dc 01       	movw	r26, r24
    3f74:	f7 cf       	rjmp	.-18     	; 0x3f64 <free+0xc2>
    3f76:	8d 91       	ld	r24, X+
    3f78:	9c 91       	ld	r25, X
    3f7a:	11 97       	sbiw	r26, 0x01	; 1
    3f7c:	9d 01       	movw	r18, r26
    3f7e:	2e 5f       	subi	r18, 0xFE	; 254
    3f80:	3f 4f       	sbci	r19, 0xFF	; 255
    3f82:	82 0f       	add	r24, r18
    3f84:	93 1f       	adc	r25, r19
    3f86:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <__brkval>
    3f8a:	30 91 96 08 	lds	r19, 0x0896	; 0x800896 <__brkval+0x1>
    3f8e:	28 17       	cp	r18, r24
    3f90:	39 07       	cpc	r19, r25
    3f92:	69 f4       	brne	.+26     	; 0x3fae <free+0x10c>
    3f94:	30 97       	sbiw	r30, 0x00	; 0
    3f96:	29 f4       	brne	.+10     	; 0x3fa2 <free+0x100>
    3f98:	10 92 98 08 	sts	0x0898, r1	; 0x800898 <__flp+0x1>
    3f9c:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <__flp>
    3fa0:	02 c0       	rjmp	.+4      	; 0x3fa6 <free+0x104>
    3fa2:	13 82       	std	Z+3, r1	; 0x03
    3fa4:	12 82       	std	Z+2, r1	; 0x02
    3fa6:	b0 93 96 08 	sts	0x0896, r27	; 0x800896 <__brkval+0x1>
    3faa:	a0 93 95 08 	sts	0x0895, r26	; 0x800895 <__brkval>
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <realloc>:
    3fb4:	6f 92       	push	r6
    3fb6:	7f 92       	push	r7
    3fb8:	8f 92       	push	r8
    3fba:	9f 92       	push	r9
    3fbc:	af 92       	push	r10
    3fbe:	bf 92       	push	r11
    3fc0:	cf 92       	push	r12
    3fc2:	df 92       	push	r13
    3fc4:	ef 92       	push	r14
    3fc6:	ff 92       	push	r15
    3fc8:	0f 93       	push	r16
    3fca:	1f 93       	push	r17
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	81 f4       	brne	.+32     	; 0x3ff4 <realloc+0x40>
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	ef 90       	pop	r14
    3fe2:	df 90       	pop	r13
    3fe4:	cf 90       	pop	r12
    3fe6:	bf 90       	pop	r11
    3fe8:	af 90       	pop	r10
    3fea:	9f 90       	pop	r9
    3fec:	8f 90       	pop	r8
    3fee:	7f 90       	pop	r7
    3ff0:	6f 90       	pop	r6
    3ff2:	bf ce       	rjmp	.-642    	; 0x3d72 <malloc>
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	e6 0f       	add	r30, r22
    3ff8:	f7 1f       	adc	r31, r23
    3ffa:	9c 01       	movw	r18, r24
    3ffc:	22 50       	subi	r18, 0x02	; 2
    3ffe:	31 09       	sbc	r19, r1
    4000:	e2 17       	cp	r30, r18
    4002:	f3 07       	cpc	r31, r19
    4004:	08 f4       	brcc	.+2      	; 0x4008 <realloc+0x54>
    4006:	a5 c0       	rjmp	.+330    	; 0x4152 <realloc+0x19e>
    4008:	ec 01       	movw	r28, r24
    400a:	d9 01       	movw	r26, r18
    400c:	0d 91       	ld	r16, X+
    400e:	1c 91       	ld	r17, X
    4010:	11 97       	sbiw	r26, 0x01	; 1
    4012:	06 17       	cp	r16, r22
    4014:	17 07       	cpc	r17, r23
    4016:	a8 f0       	brcs	.+42     	; 0x4042 <realloc+0x8e>
    4018:	05 30       	cpi	r16, 0x05	; 5
    401a:	11 05       	cpc	r17, r1
    401c:	08 f4       	brcc	.+2      	; 0x4020 <realloc+0x6c>
    401e:	97 c0       	rjmp	.+302    	; 0x414e <realloc+0x19a>
    4020:	c8 01       	movw	r24, r16
    4022:	04 97       	sbiw	r24, 0x04	; 4
    4024:	86 17       	cp	r24, r22
    4026:	97 07       	cpc	r25, r23
    4028:	08 f4       	brcc	.+2      	; 0x402c <realloc+0x78>
    402a:	91 c0       	rjmp	.+290    	; 0x414e <realloc+0x19a>
    402c:	02 50       	subi	r16, 0x02	; 2
    402e:	11 09       	sbc	r17, r1
    4030:	06 1b       	sub	r16, r22
    4032:	17 0b       	sbc	r17, r23
    4034:	01 93       	st	Z+, r16
    4036:	11 93       	st	Z+, r17
    4038:	6d 93       	st	X+, r22
    403a:	7c 93       	st	X, r23
    403c:	cf 01       	movw	r24, r30
    403e:	31 df       	rcall	.-414    	; 0x3ea2 <free>
    4040:	86 c0       	rjmp	.+268    	; 0x414e <realloc+0x19a>
    4042:	5b 01       	movw	r10, r22
    4044:	a0 1a       	sub	r10, r16
    4046:	b1 0a       	sbc	r11, r17
    4048:	4c 01       	movw	r8, r24
    404a:	80 0e       	add	r8, r16
    404c:	91 1e       	adc	r9, r17
    404e:	a0 91 97 08 	lds	r26, 0x0897	; 0x800897 <__flp>
    4052:	b0 91 98 08 	lds	r27, 0x0898	; 0x800898 <__flp+0x1>
    4056:	61 2c       	mov	r6, r1
    4058:	71 2c       	mov	r7, r1
    405a:	e1 2c       	mov	r14, r1
    405c:	f1 2c       	mov	r15, r1
    405e:	10 97       	sbiw	r26, 0x00	; 0
    4060:	09 f4       	brne	.+2      	; 0x4064 <realloc+0xb0>
    4062:	46 c0       	rjmp	.+140    	; 0x40f0 <realloc+0x13c>
    4064:	8d 91       	ld	r24, X+
    4066:	9c 91       	ld	r25, X
    4068:	11 97       	sbiw	r26, 0x01	; 1
    406a:	a8 15       	cp	r26, r8
    406c:	b9 05       	cpc	r27, r9
    406e:	b1 f5       	brne	.+108    	; 0x40dc <realloc+0x128>
    4070:	6c 01       	movw	r12, r24
    4072:	42 e0       	ldi	r20, 0x02	; 2
    4074:	c4 0e       	add	r12, r20
    4076:	d1 1c       	adc	r13, r1
    4078:	ca 14       	cp	r12, r10
    407a:	db 04       	cpc	r13, r11
    407c:	78 f1       	brcs	.+94     	; 0x40dc <realloc+0x128>
    407e:	4c 01       	movw	r8, r24
    4080:	8a 18       	sub	r8, r10
    4082:	9b 08       	sbc	r9, r11
    4084:	64 01       	movw	r12, r8
    4086:	42 e0       	ldi	r20, 0x02	; 2
    4088:	c4 0e       	add	r12, r20
    408a:	d1 1c       	adc	r13, r1
    408c:	12 96       	adiw	r26, 0x02	; 2
    408e:	bc 90       	ld	r11, X
    4090:	12 97       	sbiw	r26, 0x02	; 2
    4092:	13 96       	adiw	r26, 0x03	; 3
    4094:	ac 91       	ld	r26, X
    4096:	b5 e0       	ldi	r27, 0x05	; 5
    4098:	cb 16       	cp	r12, r27
    409a:	d1 04       	cpc	r13, r1
    409c:	40 f0       	brcs	.+16     	; 0x40ae <realloc+0xfa>
    409e:	b2 82       	std	Z+2, r11	; 0x02
    40a0:	a3 83       	std	Z+3, r26	; 0x03
    40a2:	91 82       	std	Z+1, r9	; 0x01
    40a4:	80 82       	st	Z, r8
    40a6:	d9 01       	movw	r26, r18
    40a8:	6d 93       	st	X+, r22
    40aa:	7c 93       	st	X, r23
    40ac:	09 c0       	rjmp	.+18     	; 0x40c0 <realloc+0x10c>
    40ae:	0e 5f       	subi	r16, 0xFE	; 254
    40b0:	1f 4f       	sbci	r17, 0xFF	; 255
    40b2:	80 0f       	add	r24, r16
    40b4:	91 1f       	adc	r25, r17
    40b6:	f9 01       	movw	r30, r18
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	80 83       	st	Z, r24
    40bc:	eb 2d       	mov	r30, r11
    40be:	fa 2f       	mov	r31, r26
    40c0:	e1 14       	cp	r14, r1
    40c2:	f1 04       	cpc	r15, r1
    40c4:	31 f0       	breq	.+12     	; 0x40d2 <realloc+0x11e>
    40c6:	d7 01       	movw	r26, r14
    40c8:	13 96       	adiw	r26, 0x03	; 3
    40ca:	fc 93       	st	X, r31
    40cc:	ee 93       	st	-X, r30
    40ce:	12 97       	sbiw	r26, 0x02	; 2
    40d0:	3e c0       	rjmp	.+124    	; 0x414e <realloc+0x19a>
    40d2:	f0 93 98 08 	sts	0x0898, r31	; 0x800898 <__flp+0x1>
    40d6:	e0 93 97 08 	sts	0x0897, r30	; 0x800897 <__flp>
    40da:	39 c0       	rjmp	.+114    	; 0x414e <realloc+0x19a>
    40dc:	68 16       	cp	r6, r24
    40de:	79 06       	cpc	r7, r25
    40e0:	08 f4       	brcc	.+2      	; 0x40e4 <realloc+0x130>
    40e2:	3c 01       	movw	r6, r24
    40e4:	7d 01       	movw	r14, r26
    40e6:	12 96       	adiw	r26, 0x02	; 2
    40e8:	0d 90       	ld	r0, X+
    40ea:	bc 91       	ld	r27, X
    40ec:	a0 2d       	mov	r26, r0
    40ee:	b7 cf       	rjmp	.-146    	; 0x405e <realloc+0xaa>
    40f0:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <__brkval>
    40f4:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <__brkval+0x1>
    40f8:	88 16       	cp	r8, r24
    40fa:	99 06       	cpc	r9, r25
    40fc:	e1 f4       	brne	.+56     	; 0x4136 <realloc+0x182>
    40fe:	66 16       	cp	r6, r22
    4100:	77 06       	cpc	r7, r23
    4102:	c8 f4       	brcc	.+50     	; 0x4136 <realloc+0x182>
    4104:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    4108:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    410c:	00 97       	sbiw	r24, 0x00	; 0
    410e:	41 f4       	brne	.+16     	; 0x4120 <realloc+0x16c>
    4110:	8d b7       	in	r24, 0x3d	; 61
    4112:	9e b7       	in	r25, 0x3e	; 62
    4114:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4118:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    411c:	84 1b       	sub	r24, r20
    411e:	95 0b       	sbc	r25, r21
    4120:	e8 17       	cp	r30, r24
    4122:	f9 07       	cpc	r31, r25
    4124:	b0 f4       	brcc	.+44     	; 0x4152 <realloc+0x19e>
    4126:	f0 93 96 08 	sts	0x0896, r31	; 0x800896 <__brkval+0x1>
    412a:	e0 93 95 08 	sts	0x0895, r30	; 0x800895 <__brkval>
    412e:	f9 01       	movw	r30, r18
    4130:	71 83       	std	Z+1, r23	; 0x01
    4132:	60 83       	st	Z, r22
    4134:	0c c0       	rjmp	.+24     	; 0x414e <realloc+0x19a>
    4136:	cb 01       	movw	r24, r22
    4138:	1c de       	rcall	.-968    	; 0x3d72 <malloc>
    413a:	7c 01       	movw	r14, r24
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	49 f0       	breq	.+18     	; 0x4152 <realloc+0x19e>
    4140:	a8 01       	movw	r20, r16
    4142:	be 01       	movw	r22, r28
    4144:	20 d0       	rcall	.+64     	; 0x4186 <memcpy>
    4146:	ce 01       	movw	r24, r28
    4148:	ac de       	rcall	.-680    	; 0x3ea2 <free>
    414a:	c7 01       	movw	r24, r14
    414c:	04 c0       	rjmp	.+8      	; 0x4156 <realloc+0x1a2>
    414e:	ce 01       	movw	r24, r28
    4150:	02 c0       	rjmp	.+4      	; 0x4156 <realloc+0x1a2>
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	df 91       	pop	r29
    4158:	cf 91       	pop	r28
    415a:	1f 91       	pop	r17
    415c:	0f 91       	pop	r16
    415e:	ff 90       	pop	r15
    4160:	ef 90       	pop	r14
    4162:	df 90       	pop	r13
    4164:	cf 90       	pop	r12
    4166:	bf 90       	pop	r11
    4168:	af 90       	pop	r10
    416a:	9f 90       	pop	r9
    416c:	8f 90       	pop	r8
    416e:	7f 90       	pop	r7
    4170:	6f 90       	pop	r6
    4172:	08 95       	ret

00004174 <memcpy_P>:
    4174:	fb 01       	movw	r30, r22
    4176:	dc 01       	movw	r26, r24
    4178:	02 c0       	rjmp	.+4      	; 0x417e <memcpy_P+0xa>
    417a:	05 90       	lpm	r0, Z+
    417c:	0d 92       	st	X+, r0
    417e:	41 50       	subi	r20, 0x01	; 1
    4180:	50 40       	sbci	r21, 0x00	; 0
    4182:	d8 f7       	brcc	.-10     	; 0x417a <memcpy_P+0x6>
    4184:	08 95       	ret

00004186 <memcpy>:
    4186:	fb 01       	movw	r30, r22
    4188:	dc 01       	movw	r26, r24
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <memcpy+0xa>
    418c:	01 90       	ld	r0, Z+
    418e:	0d 92       	st	X+, r0
    4190:	41 50       	subi	r20, 0x01	; 1
    4192:	50 40       	sbci	r21, 0x00	; 0
    4194:	d8 f7       	brcc	.-10     	; 0x418c <memcpy+0x6>
    4196:	08 95       	ret

00004198 <strcpy>:
    4198:	fb 01       	movw	r30, r22
    419a:	dc 01       	movw	r26, r24
    419c:	01 90       	ld	r0, Z+
    419e:	0d 92       	st	X+, r0
    41a0:	00 20       	and	r0, r0
    41a2:	e1 f7       	brne	.-8      	; 0x419c <strcpy+0x4>
    41a4:	08 95       	ret

000041a6 <__do_global_dtors>:
    41a6:	11 e0       	ldi	r17, 0x01	; 1
    41a8:	c0 e4       	ldi	r28, 0x40	; 64
    41aa:	d1 e0       	ldi	r29, 0x01	; 1
    41ac:	00 e0       	ldi	r16, 0x00	; 0
    41ae:	05 c0       	rjmp	.+10     	; 0x41ba <__do_global_dtors+0x14>
    41b0:	80 2f       	mov	r24, r16
    41b2:	fe 01       	movw	r30, r28
    41b4:	bd dd       	rcall	.-1158   	; 0x3d30 <__tablejump2__>
    41b6:	21 96       	adiw	r28, 0x01	; 1
    41b8:	01 1d       	adc	r16, r1
    41ba:	c1 34       	cpi	r28, 0x41	; 65
    41bc:	d1 07       	cpc	r29, r17
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	08 07       	cpc	r16, r24
    41c2:	b1 f7       	brne	.-20     	; 0x41b0 <__do_global_dtors+0xa>
    41c4:	f8 94       	cli

000041c6 <__stop_program>:
    41c6:	ff cf       	rjmp	.-2      	; 0x41c6 <__stop_program>
