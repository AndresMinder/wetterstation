
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800200  00003c68  00003cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048b  008003f6  008003f6  00003ef2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ef2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ef8  00000000  00000000  00003f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00031967  00000000  00000000  00004e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007041  00000000  00000000  000367c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000094d2  00000000  00000000  0003d804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003614  00000000  00000000  00046cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007c25  00000000  00000000  0004a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00014b15  00000000  00000000  00051f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001108  00000000  00000000  00066a26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	39 c1       	rjmp	.+626    	; 0x274 <__dtors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	db c5       	rjmp	.+2998   	; 0xbdc <__vector_10>
      26:	00 00       	nop
      28:	d9 c5       	rjmp	.+2994   	; 0xbdc <__vector_10>
      2a:	00 00       	nop
      2c:	d7 c5       	rjmp	.+2990   	; 0xbdc <__vector_10>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_23>
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_25>
      68:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__vector_26>
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c7       	rjmp	.+3634   	; 0xed0 <__vector_39>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c1       	rjmp	.+536    	; 0x2d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	04 05       	cpc	r16, r4
      e6:	1b 05       	cpc	r17, r11
      e8:	1b 05       	cpc	r17, r11
      ea:	18 05       	cpc	r17, r8
      ec:	1b 05       	cpc	r17, r11
      ee:	02 05       	cpc	r16, r2
      f0:	1b 05       	cpc	r17, r11
      f2:	1b 05       	cpc	r17, r11
      f4:	1b 05       	cpc	r17, r11
      f6:	f6 04       	cpc	r15, r6
      f8:	1b 05       	cpc	r17, r11
      fa:	1b 05       	cpc	r17, r11
      fc:	0b 05       	cpc	r16, r11
      fe:	16 05       	cpc	r17, r6
     100:	14 05       	cpc	r17, r4
     102:	1b 05       	cpc	r17, r11
     104:	1b 05       	cpc	r17, r11
     106:	1b 05       	cpc	r17, r11
     108:	12 05       	cpc	r17, r2
     10a:	9d 0d       	add	r25, r13
     10c:	a0 0d       	add	r26, r0
     10e:	8f 0d       	add	r24, r15
     110:	93 0d       	add	r25, r3
     112:	99 0d       	add	r25, r9
     114:	d7 0d       	add	r29, r7
     116:	a4 0d       	add	r26, r4
     118:	a8 0d       	add	r26, r8
     11a:	ae 0d       	add	r26, r14
     11c:	b2 0d       	add	r27, r2
     11e:	b6 0d       	add	r27, r6
     120:	bc 0d       	add	r27, r12
     122:	c0 0d       	add	r28, r0
     124:	c4 0d       	add	r28, r4
     126:	d7 0d       	add	r29, r7
     128:	ca 0d       	add	r28, r10
     12a:	ce 0d       	add	r28, r14
     12c:	d2 0d       	add	r29, r2

0000012e <__trampolines_end>:
     12e:	44 65       	ori	r20, 0x54	; 84
     130:	63 20       	and	r6, r3
     132:	20 37       	cpi	r18, 0x70	; 112
     134:	20 32       	cpi	r18, 0x20	; 32
     136:	30 31       	cpi	r19, 0x10	; 16
     138:	38 00       	.word	0x0038	; ????

0000013a <_ZZN13RealTimeClock7initRTCEvE3__c_0>:
     13a:	31 34 3a 35 37 3a 31 30 00                          14:57:10.

00000143 <digital_pin_to_timer_PGM>:
     143:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     16f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c9:	04 08 10 20 40 80                                   ... @.

000001cf <digital_pin_to_port_PGM>:
     1cf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1df:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1ef:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ff:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     20f:	0b 0b 0b 0b 0b 0b                                   ......

00000215 <port_to_input_PGM>:
     215:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     225:	00 01 00 00 03 01 06 01 09 01                       ..........

0000022f <port_to_output_PGM>:
     22f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     23f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000249 <port_to_mode_PGM>:
     249:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     259:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000264 <__ctors_start>:
     264:	80 01       	movw	r16, r0
     266:	07 02       	muls	r16, r23
     268:	f2 09       	sbc	r31, r2
     26a:	07 0a       	sbc	r0, r23
     26c:	df 0b       	sbc	r29, r31
     26e:	0a 10       	cpse	r0, r10
     270:	3c 13       	cpse	r19, r28

00000272 <__ctors_end>:
     272:	96 01       	movw	r18, r12

00000274 <__dtors_end>:
     274:	11 24       	eor	r1, r1
     276:	1f be       	out	0x3f, r1	; 63
     278:	cf ef       	ldi	r28, 0xFF	; 255
     27a:	d1 e2       	ldi	r29, 0x21	; 33
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0c bf       	out	0x3c, r16	; 60

00000284 <__do_copy_data>:
     284:	13 e0       	ldi	r17, 0x03	; 3
     286:	a0 e0       	ldi	r26, 0x00	; 0
     288:	b2 e0       	ldi	r27, 0x02	; 2
     28a:	e8 e6       	ldi	r30, 0x68	; 104
     28c:	fc e3       	ldi	r31, 0x3C	; 60
     28e:	00 e0       	ldi	r16, 0x00	; 0
     290:	0b bf       	out	0x3b, r16	; 59
     292:	02 c0       	rjmp	.+4      	; 0x298 <__do_copy_data+0x14>
     294:	07 90       	elpm	r0, Z+
     296:	0d 92       	st	X+, r0
     298:	a6 3f       	cpi	r26, 0xF6	; 246
     29a:	b1 07       	cpc	r27, r17
     29c:	d9 f7       	brne	.-10     	; 0x294 <__do_copy_data+0x10>

0000029e <__do_clear_bss>:
     29e:	28 e0       	ldi	r18, 0x08	; 8
     2a0:	a6 ef       	ldi	r26, 0xF6	; 246
     2a2:	b3 e0       	ldi	r27, 0x03	; 3
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <.do_clear_bss_start>

000002a6 <.do_clear_bss_loop>:
     2a6:	1d 92       	st	X+, r1

000002a8 <.do_clear_bss_start>:
     2a8:	a1 38       	cpi	r26, 0x81	; 129
     2aa:	b2 07       	cpc	r27, r18
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <.do_clear_bss_loop>

000002ae <__do_global_ctors>:
     2ae:	11 e0       	ldi	r17, 0x01	; 1
     2b0:	c9 e3       	ldi	r28, 0x39	; 57
     2b2:	d1 e0       	ldi	r29, 0x01	; 1
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <__do_global_ctors+0x16>
     2b8:	21 97       	sbiw	r28, 0x01	; 1
     2ba:	01 09       	sbc	r16, r1
     2bc:	80 2f       	mov	r24, r16
     2be:	fe 01       	movw	r30, r28
     2c0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__tablejump2__>
     2c4:	c2 33       	cpi	r28, 0x32	; 50
     2c6:	d1 07       	cpc	r29, r17
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	08 07       	cpc	r16, r24
     2cc:	a9 f7       	brne	.-22     	; 0x2b8 <__do_global_ctors+0xa>
     2ce:	0e 94 0d 0c 	call	0x181a	; 0x181a <main>
     2d2:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__do_global_dtors>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2d8:	26 e0       	ldi	r18, 0x06	; 6
     2da:	40 e8       	ldi	r20, 0x80	; 128
     2dc:	55 e2       	ldi	r21, 0x25	; 37
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	8e e7       	ldi	r24, 0x7E	; 126
     2e4:	95 e0       	ldi	r25, 0x05	; 5
     2e6:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN14HardwareSerial5beginEmh>

void setup()
{
	Serial.begin(9600);
	while (!Serial);
	sd.initSdcardBreakout();
     2ea:	86 e2       	ldi	r24, 0x26	; 38
     2ec:	94 e0       	ldi	r25, 0x04	; 4
     2ee:	6e d0       	rcall	.+220    	; 0x3cc <_ZN14SdcardBreakout18initSdcardBreakoutEv>
	realtimeclock.initRTC();
     2f0:	89 e0       	ldi	r24, 0x09	; 9
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	33 d0       	rcall	.+102    	; 0x35c <_ZN13RealTimeClock7initRTCEv>
	thps.initTempHumidPressSensor();
     2f6:	86 e1       	ldi	r24, 0x16	; 22
     2f8:	94 e0       	ldi	r25, 0x04	; 4
     2fa:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>

000002fe <loop>:
} //setup

void loop()
{
     2fe:	08 95       	ret

00000300 <_GLOBAL__sub_I_sd>:
#include "TempHumidPressSensor.h"
#include "SdcardBreakout.h"
#include "Rj11Sensors.h"
#include "Calculate.h"

SdcardBreakout sd;
     300:	86 e2       	ldi	r24, 0x26	; 38
     302:	94 e0       	ldi	r25, 0x04	; 4
     304:	61 d0       	rcall	.+194    	; 0x3c8 <_ZN14SdcardBreakoutC1Ev>
TempHumidPressSensor thps;
     306:	86 e1       	ldi	r24, 0x16	; 22
     308:	94 e0       	ldi	r25, 0x04	; 4
     30a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZN20TempHumidPressSensorC1Ev>
SensorData sensordata;
RealTimeClock realtimeclock;
     30e:	89 e0       	ldi	r24, 0x09	; 9
     310:	94 e0       	ldi	r25, 0x04	; 4
     312:	1e d0       	rcall	.+60     	; 0x350 <_ZN13RealTimeClockC1Ev>
#ifndef __REALTIMECLOCK_H__
#define __REALTIMECLOCK_H__

struct TimeStamp
     314:	6b ec       	ldi	r22, 0xCB	; 203
     316:	73 e0       	ldi	r23, 0x03	; 3
     318:	8c ef       	ldi	r24, 0xFC	; 252
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN6StringC1EPKc>
TimeStamp ts;

String myData = "datalog.txt";
     320:	6a e0       	ldi	r22, 0x0A	; 10
     322:	72 e0       	ldi	r23, 0x02	; 2
     324:	86 ef       	ldi	r24, 0xF6	; 246
     326:	93 e0       	ldi	r25, 0x03	; 3
     328:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <_ZN6StringC1EPKc>

0000032c <_GLOBAL__sub_D_sd>:
     32c:	86 ef       	ldi	r24, 0xF6	; 246
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN6StringD1Ev>
     334:	8c ef       	ldi	r24, 0xFC	; 252
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN6StringD1Ev>
#include "Calculate.h"

SdcardBreakout sd;
TempHumidPressSensor thps;
SensorData sensordata;
RealTimeClock realtimeclock;
     33c:	89 e0       	ldi	r24, 0x09	; 9
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	0b d0       	rcall	.+22     	; 0x358 <_ZN13RealTimeClockD1Ev>
#include "SdcardBreakout.h"
#include "Rj11Sensors.h"
#include "Calculate.h"

SdcardBreakout sd;
TempHumidPressSensor thps;
     342:	86 e1       	ldi	r24, 0x16	; 22
     344:	94 e0       	ldi	r25, 0x04	; 4
     346:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN20TempHumidPressSensorD1Ev>
#include "TempHumidPressSensor.h"
#include "SdcardBreakout.h"
#include "Rj11Sensors.h"
#include "Calculate.h"

SdcardBreakout sd;
     34a:	86 e2       	ldi	r24, 0x26	; 38
     34c:	94 e0       	ldi	r25, 0x04	; 4
     34e:	3d c0       	rjmp	.+122    	; 0x3ca <_ZN14SdcardBreakoutD1Ev>

00000350 <_ZN13RealTimeClockC1Ev>:
#include "RealTimeClock.h"

RTC_DS3231 rtc;

// constructor
RealTimeClock::RealTimeClock()
     350:	6b ec       	ldi	r22, 0xCB	; 203
     352:	73 e0       	ldi	r23, 0x03	; 3
     354:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <_ZN6StringC1EPKc>

00000358 <_ZN13RealTimeClockD1Ev>:
{
} //constructor

// destructor
RealTimeClock::~RealTimeClock()
     358:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_ZN6StringD1Ev>

0000035c <_ZN13RealTimeClock7initRTCEv>:
{
} //~destructor

void RealTimeClock::initRTC()
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <_ZN13RealTimeClock7initRTCEv+0x6>
     362:	00 d0       	rcall	.+0      	; 0x364 <_ZN13RealTimeClock7initRTCEv+0x8>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
	bool status = rtc.begin();
     368:	87 e2       	ldi	r24, 0x27	; 39
     36a:	94 e0       	ldi	r25, 0x04	; 4
     36c:	8c d3       	rcall	.+1816   	; 0xa86 <_ZN10RTC_DS32315beginEv>
	if (!status)
     36e:	81 11       	cpse	r24, r1
     370:	07 c0       	rjmp	.+14     	; 0x380 <_ZN13RealTimeClock7initRTCEv+0x24>
	{
		Serial.println("Error: Couldn't find RTC, please ensure that the rtc is powered!");
     372:	66 e1       	ldi	r22, 0x16	; 22
     374:	72 e0       	ldi	r23, 0x02	; 2
     376:	8e e7       	ldi	r24, 0x7E	; 126
     378:	95 e0       	ldi	r25, 0x05	; 5
     37a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN5Print7printlnEPKc>
     37e:	ff cf       	rjmp	.-2      	; 0x37e <_ZN13RealTimeClock7initRTCEv+0x22>
		while (1);
	}
	else if (status)
	{
		Serial.println("RTC\tsuccessfully initialized!");
     380:	67 e5       	ldi	r22, 0x57	; 87
     382:	72 e0       	ldi	r23, 0x02	; 2
     384:	8e e7       	ldi	r24, 0x7E	; 126
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN5Print7printlnEPKc>
	}
	
	if (rtc.lostPower())
     38c:	87 e2       	ldi	r24, 0x27	; 39
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	1b d4       	rcall	.+2102   	; 0xbc8 <_ZN10RTC_DS32319lostPowerEv>
     392:	88 23       	and	r24, r24
     394:	81 f0       	breq	.+32     	; 0x3b6 <_ZN13RealTimeClock7initRTCEv+0x5a>
	{
		Serial.println("RTC lost power, the time will be set!");
     396:	65 e7       	ldi	r22, 0x75	; 117
     398:	72 e0       	ldi	r23, 0x02	; 2
     39a:	8e e7       	ldi	r24, 0x7E	; 126
     39c:	95 e0       	ldi	r25, 0x05	; 5
     39e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this file was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     3a2:	4a e3       	ldi	r20, 0x3A	; 58
     3a4:	51 e0       	ldi	r21, 0x01	; 1
     3a6:	6e e2       	ldi	r22, 0x2E	; 46
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	ce 01       	movw	r24, r28
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	f4 d2       	rcall	.+1512   	; 0x998 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	84 d3       	rcall	.+1800   	; 0xabe <_ZN10RTC_DS32316adjustERK8DateTime>
	}
} //initRTC
     3b6:	26 96       	adiw	r28, 0x06	; 6
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <_ZN14SdcardBreakoutC1Ev>:
	} 
	else
	{
		Serial.println(filename + " doesn't exist");
	}
     3c8:	08 95       	ret

000003ca <_ZN14SdcardBreakoutD1Ev>:
     3ca:	08 95       	ret

000003cc <_ZN14SdcardBreakout18initSdcardBreakoutEv>:
     3cc:	65 e3       	ldi	r22, 0x35	; 53
     3ce:	84 e2       	ldi	r24, 0x24	; 36
     3d0:	96 e0       	ldi	r25, 0x06	; 6
     3d2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN5SDLib7SDClass5beginEh>
     3d6:	81 11       	cpse	r24, r1
     3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x28>
     3da:	6b e9       	ldi	r22, 0x9B	; 155
     3dc:	72 e0       	ldi	r23, 0x02	; 2
     3de:	8e e7       	ldi	r24, 0x7E	; 126
     3e0:	95 e0       	ldi	r25, 0x05	; 5
     3e2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN5Print7printlnEPKc>
     3e6:	65 e3       	ldi	r22, 0x35	; 53
     3e8:	84 e2       	ldi	r24, 0x24	; 36
     3ea:	96 e0       	ldi	r25, 0x06	; 6
     3ec:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN5SDLib7SDClass5beginEh>
     3f0:	88 23       	and	r24, r24
     3f2:	31 f0       	breq	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f4:	6a eb       	ldi	r22, 0xBA	; 186
     3f6:	72 e0       	ldi	r23, 0x02	; 2
     3f8:	8e e7       	ldi	r24, 0x7E	; 126
     3fa:	95 e0       	ldi	r25, 0x05	; 5
     3fc:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <_ZN5Print7printlnEPKc>
     400:	64 ef       	ldi	r22, 0xF4	; 244
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <delay>
     40c:	ec cf       	rjmp	.-40     	; 0x3e6 <_ZN14SdcardBreakout18initSdcardBreakoutEv+0x1a>

0000040e <_GLOBAL__sub_I_datalog>:
#include <SPI.h>
#include <SD.h>
#include "SdcardBreakout.h"

File datalog;
     40e:	88 e2       	ldi	r24, 0x28	; 40
     410:	94 e0       	ldi	r25, 0x04	; 4
     412:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <_ZN5SDLib4FileC1Ev>

00000416 <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
     416:	20 91 7b 08 	lds	r18, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
     41a:	22 23       	and	r18, r18
     41c:	99 f0       	breq	.+38     	; 0x444 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     41e:	4f b7       	in	r20, 0x3f	; 63
     420:	f8 94       	cli
     422:	20 91 7b 08 	lds	r18, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
     426:	21 30       	cpi	r18, 0x01	; 1
     428:	59 f4       	brne	.+22     	; 0x440 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     42a:	2d b3       	in	r18, 0x1d	; 29
     42c:	20 93 79 08 	sts	0x0879, r18	; 0x800879 <_ZN8SPIClass13interruptSaveE>
     430:	3d b3       	in	r19, 0x1d	; 29
     432:	20 91 7a 08 	lds	r18, 0x087A	; 0x80087a <_ZN8SPIClass13interruptMaskE>
     436:	20 95       	com	r18
     438:	23 23       	and	r18, r19
     43a:	2d bb       	out	0x1d, r18	; 29
     43c:	4f bf       	out	0x3f, r20	; 63
     43e:	02 c0       	rjmp	.+4      	; 0x444 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     440:	40 93 79 08 	sts	0x0879, r20	; 0x800879 <_ZN8SPIClass13interruptSaveE>
     444:	8c bd       	out	0x2c, r24	; 44
     446:	9d bd       	out	0x2d, r25	; 45
     448:	08 95       	ret

0000044a <_ZN8SPIClass14endTransactionEv>:
     44a:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
     44e:	88 23       	and	r24, r24
     450:	61 f0       	breq	.+24     	; 0x46a <_ZN8SPIClass14endTransactionEv+0x20>
     452:	9f b7       	in	r25, 0x3f	; 63
     454:	f8 94       	cli
     456:	20 91 7b 08 	lds	r18, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
     45a:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <_ZN8SPIClass13interruptSaveE>
     45e:	21 30       	cpi	r18, 0x01	; 1
     460:	19 f4       	brne	.+6      	; 0x468 <_ZN8SPIClass14endTransactionEv+0x1e>
     462:	8d bb       	out	0x1d, r24	; 29
     464:	9f bf       	out	0x3f, r25	; 63
     466:	08 95       	ret
     468:	8f bf       	out	0x3f, r24	; 63
     46a:	08 95       	ret

0000046c <_ZN15Adafruit_BME280C1Ev>:
     46c:	fc 01       	movw	r30, r24
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	83 87       	std	Z+11, r24	; 0x0b
     472:	84 87       	std	Z+12, r24	; 0x0c
     474:	85 87       	std	Z+13, r24	; 0x0d
     476:	86 87       	std	Z+14, r24	; 0x0e
     478:	08 95       	ret

0000047a <_ZN15Adafruit_BME2807spixferEh>:
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	fc 01       	movw	r30, r24
     48c:	26 85       	ldd	r18, Z+14	; 0x0e
     48e:	2f 3f       	cpi	r18, 0xFF	; 255
     490:	39 f4       	brne	.+14     	; 0x4a0 <_ZN15Adafruit_BME2807spixferEh+0x26>
     492:	6e bd       	out	0x2e, r22	; 46
     494:	00 00       	nop
     496:	0d b4       	in	r0, 0x2d	; 45
     498:	07 fe       	sbrs	r0, 7
     49a:	fd cf       	rjmp	.-6      	; 0x496 <_ZN15Adafruit_BME2807spixferEh+0x1c>
     49c:	8e b5       	in	r24, 0x2e	; 46
     49e:	2b c0       	rjmp	.+86     	; 0x4f6 <_ZN15Adafruit_BME2807spixferEh+0x7c>
     4a0:	d6 2f       	mov	r29, r22
     4a2:	8c 01       	movw	r16, r24
     4a4:	87 e0       	ldi	r24, 0x07	; 7
     4a6:	e8 2e       	mov	r14, r24
     4a8:	f1 2c       	mov	r15, r1
     4aa:	c0 e0       	ldi	r28, 0x00	; 0
     4ac:	cc 24       	eor	r12, r12
     4ae:	c3 94       	inc	r12
     4b0:	d1 2c       	mov	r13, r1
     4b2:	cc 0f       	add	r28, r28
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	f8 01       	movw	r30, r16
     4b8:	86 85       	ldd	r24, Z+14	; 0x0e
     4ba:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     4be:	b6 01       	movw	r22, r12
     4c0:	0e 2c       	mov	r0, r14
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <_ZN15Adafruit_BME2807spixferEh+0x4c>
     4c4:	66 0f       	add	r22, r22
     4c6:	0a 94       	dec	r0
     4c8:	ea f7       	brpl	.-6      	; 0x4c4 <_ZN15Adafruit_BME2807spixferEh+0x4a>
     4ca:	6d 23       	and	r22, r29
     4cc:	f8 01       	movw	r30, r16
     4ce:	84 85       	ldd	r24, Z+12	; 0x0c
     4d0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	f8 01       	movw	r30, r16
     4d8:	86 85       	ldd	r24, Z+14	; 0x0e
     4da:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     4de:	f8 01       	movw	r30, r16
     4e0:	85 85       	ldd	r24, Z+13	; 0x0d
     4e2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <digitalRead>
     4e6:	89 2b       	or	r24, r25
     4e8:	09 f0       	breq	.+2      	; 0x4ec <_ZN15Adafruit_BME2807spixferEh+0x72>
     4ea:	c1 60       	ori	r28, 0x01	; 1
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	ef 1a       	sub	r14, r31
     4f0:	f1 08       	sbc	r15, r1
     4f2:	f8 f6       	brcc	.-66     	; 0x4b2 <_ZN15Adafruit_BME2807spixferEh+0x38>
     4f4:	8c 2f       	mov	r24, r28
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	08 95       	ret

00000508 <_ZN15Adafruit_BME2806write8Ehh>:
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
     512:	16 2f       	mov	r17, r22
     514:	04 2f       	mov	r16, r20
     516:	8b 85       	ldd	r24, Y+11	; 0x0b
     518:	8f 3f       	cpi	r24, 0xFF	; 255
     51a:	f9 f4       	brne	.+62     	; 0x55a <_ZN15Adafruit_BME2806write8Ehh+0x52>
     51c:	6a 81       	ldd	r22, Y+2	; 0x02
     51e:	88 81       	ld	r24, Y
     520:	99 81       	ldd	r25, Y+1	; 0x01
     522:	df d6       	rcall	.+3518   	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>
     524:	88 81       	ld	r24, Y
     526:	99 81       	ldd	r25, Y+1	; 0x01
     528:	dc 01       	movw	r26, r24
     52a:	ed 91       	ld	r30, X+
     52c:	fc 91       	ld	r31, X
     52e:	01 90       	ld	r0, Z+
     530:	f0 81       	ld	r31, Z
     532:	e0 2d       	mov	r30, r0
     534:	61 2f       	mov	r22, r17
     536:	19 95       	eicall
     538:	88 81       	ld	r24, Y
     53a:	99 81       	ldd	r25, Y+1	; 0x01
     53c:	dc 01       	movw	r26, r24
     53e:	ed 91       	ld	r30, X+
     540:	fc 91       	ld	r31, X
     542:	01 90       	ld	r0, Z+
     544:	f0 81       	ld	r31, Z
     546:	e0 2d       	mov	r30, r0
     548:	60 2f       	mov	r22, r16
     54a:	19 95       	eicall
     54c:	88 81       	ld	r24, Y
     54e:	99 81       	ldd	r25, Y+1	; 0x01
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	43 c7       	rjmp	.+3718   	; 0x13e0 <_ZN7TwoWire15endTransmissionEv>
     55a:	8e 85       	ldd	r24, Y+14	; 0x0e
     55c:	8f 3f       	cpi	r24, 0xFF	; 255
     55e:	19 f4       	brne	.+6      	; 0x566 <_ZN15Adafruit_BME2806write8Ehh+0x5e>
     560:	82 e5       	ldi	r24, 0x52	; 82
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	58 df       	rcall	.-336    	; 0x416 <_ZN8SPIClass16beginTransactionE11SPISettings>
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	8b 85       	ldd	r24, Y+11	; 0x0b
     56a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     56e:	61 2f       	mov	r22, r17
     570:	6f 77       	andi	r22, 0x7F	; 127
     572:	ce 01       	movw	r24, r28
     574:	82 df       	rcall	.-252    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     576:	60 2f       	mov	r22, r16
     578:	ce 01       	movw	r24, r28
     57a:	7f df       	rcall	.-258    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	8b 85       	ldd	r24, Y+11	; 0x0b
     580:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     584:	8e 85       	ldd	r24, Y+14	; 0x0e
     586:	8f 3f       	cpi	r24, 0xFF	; 255
     588:	29 f4       	brne	.+10     	; 0x594 <_ZN15Adafruit_BME2806write8Ehh+0x8c>
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	5b cf       	rjmp	.-330    	; 0x44a <_ZN8SPIClass14endTransactionEv>
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
     59e:	cf 92       	push	r12
     5a0:	ef 92       	push	r14
     5a2:	0f 93       	push	r16
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
     5aa:	62 95       	swap	r22
     5ac:	66 0f       	add	r22, r22
     5ae:	66 0f       	add	r22, r22
     5b0:	60 7c       	andi	r22, 0xC0	; 192
     5b2:	47 70       	andi	r20, 0x07	; 7
     5b4:	27 70       	andi	r18, 0x07	; 7
     5b6:	82 2f       	mov	r24, r18
     5b8:	88 0f       	add	r24, r24
     5ba:	88 0f       	add	r24, r24
     5bc:	88 0f       	add	r24, r24
     5be:	26 2f       	mov	r18, r22
     5c0:	24 2b       	or	r18, r20
     5c2:	28 2b       	or	r18, r24
     5c4:	29 ab       	std	Y+49, r18	; 0x31
     5c6:	90 2f       	mov	r25, r16
     5c8:	92 95       	swap	r25
     5ca:	99 0f       	add	r25, r25
     5cc:	90 7e       	andi	r25, 0xE0	; 224
     5ce:	8a a9       	ldd	r24, Y+50	; 0x32
     5d0:	8f 71       	andi	r24, 0x1F	; 31
     5d2:	89 2b       	or	r24, r25
     5d4:	8a ab       	std	Y+50, r24	; 0x32
     5d6:	8e 2d       	mov	r24, r14
     5d8:	87 70       	andi	r24, 0x07	; 7
     5da:	88 0f       	add	r24, r24
     5dc:	88 0f       	add	r24, r24
     5de:	88 0f       	add	r24, r24
     5e0:	98 a9       	ldd	r25, Y+48	; 0x30
     5e2:	29 2f       	mov	r18, r25
     5e4:	20 7c       	andi	r18, 0xC0	; 192
     5e6:	9c 2d       	mov	r25, r12
     5e8:	97 70       	andi	r25, 0x07	; 7
     5ea:	e2 2e       	mov	r14, r18
     5ec:	e8 2a       	or	r14, r24
     5ee:	e9 2a       	or	r14, r25
     5f0:	e8 aa       	std	Y+48, r14	; 0x30
     5f2:	40 2f       	mov	r20, r16
     5f4:	47 70       	andi	r20, 0x07	; 7
     5f6:	62 ef       	ldi	r22, 0xF2	; 242
     5f8:	ce 01       	movw	r24, r28
     5fa:	86 df       	rcall	.-244    	; 0x508 <_ZN15Adafruit_BME2806write8Ehh>
     5fc:	98 a9       	ldd	r25, Y+48	; 0x30
     5fe:	49 2f       	mov	r20, r25
     600:	47 70       	andi	r20, 0x07	; 7
     602:	60 e2       	ldi	r22, 0x20	; 32
     604:	46 9f       	mul	r20, r22
     606:	90 01       	movw	r18, r0
     608:	11 24       	eor	r1, r1
     60a:	89 2f       	mov	r24, r25
     60c:	86 95       	lsr	r24
     60e:	86 95       	lsr	r24
     610:	86 95       	lsr	r24
     612:	87 70       	andi	r24, 0x07	; 7
     614:	68 e0       	ldi	r22, 0x08	; 8
     616:	86 9f       	mul	r24, r22
     618:	a0 01       	movw	r20, r0
     61a:	11 24       	eor	r1, r1
     61c:	42 2b       	or	r20, r18
     61e:	53 2b       	or	r21, r19
     620:	97 fb       	bst	r25, 7
     622:	99 27       	eor	r25, r25
     624:	90 f9       	bld	r25, 0
     626:	49 2b       	or	r20, r25
     628:	65 ef       	ldi	r22, 0xF5	; 245
     62a:	ce 01       	movw	r24, r28
     62c:	6d df       	rcall	.-294    	; 0x508 <_ZN15Adafruit_BME2806write8Ehh>
     62e:	99 a9       	ldd	r25, Y+49	; 0x31
     630:	49 2f       	mov	r20, r25
     632:	47 70       	andi	r20, 0x07	; 7
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	48 9f       	mul	r20, r24
     638:	90 01       	movw	r18, r0
     63a:	11 24       	eor	r1, r1
     63c:	89 2f       	mov	r24, r25
     63e:	86 95       	lsr	r24
     640:	86 95       	lsr	r24
     642:	86 95       	lsr	r24
     644:	87 70       	andi	r24, 0x07	; 7
     646:	68 e0       	ldi	r22, 0x08	; 8
     648:	86 9f       	mul	r24, r22
     64a:	a0 01       	movw	r20, r0
     64c:	11 24       	eor	r1, r1
     64e:	42 2b       	or	r20, r18
     650:	53 2b       	or	r21, r19
     652:	92 95       	swap	r25
     654:	96 95       	lsr	r25
     656:	96 95       	lsr	r25
     658:	93 70       	andi	r25, 0x03	; 3
     65a:	49 2b       	or	r20, r25
     65c:	64 ef       	ldi	r22, 0xF4	; 244
     65e:	ce 01       	movw	r24, r28
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	0f 91       	pop	r16
     666:	ef 90       	pop	r14
     668:	cf 90       	pop	r12
     66a:	4e cf       	rjmp	.-356    	; 0x508 <_ZN15Adafruit_BME2806write8Ehh>

0000066c <_ZN15Adafruit_BME2805read8Eh>:
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
     674:	16 2f       	mov	r17, r22
     676:	8b 85       	ldd	r24, Y+11	; 0x0b
     678:	8f 3f       	cpi	r24, 0xFF	; 255
     67a:	09 f5       	brne	.+66     	; 0x6be <_ZN15Adafruit_BME2805read8Eh+0x52>
     67c:	6a 81       	ldd	r22, Y+2	; 0x02
     67e:	88 81       	ld	r24, Y
     680:	99 81       	ldd	r25, Y+1	; 0x01
     682:	2f d6       	rcall	.+3166   	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>
     684:	88 81       	ld	r24, Y
     686:	99 81       	ldd	r25, Y+1	; 0x01
     688:	dc 01       	movw	r26, r24
     68a:	ed 91       	ld	r30, X+
     68c:	fc 91       	ld	r31, X
     68e:	01 90       	ld	r0, Z+
     690:	f0 81       	ld	r31, Z
     692:	e0 2d       	mov	r30, r0
     694:	61 2f       	mov	r22, r17
     696:	19 95       	eicall
     698:	88 81       	ld	r24, Y
     69a:	99 81       	ldd	r25, Y+1	; 0x01
     69c:	a1 d6       	rcall	.+3394   	; 0x13e0 <_ZN7TwoWire15endTransmissionEv>
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	6a 81       	ldd	r22, Y+2	; 0x02
     6a2:	88 81       	ld	r24, Y
     6a4:	99 81       	ldd	r25, Y+1	; 0x01
     6a6:	9a d6       	rcall	.+3380   	; 0x13dc <_ZN7TwoWire11requestFromEhh>
     6a8:	88 81       	ld	r24, Y
     6aa:	99 81       	ldd	r25, Y+1	; 0x01
     6ac:	dc 01       	movw	r26, r24
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	02 84       	ldd	r0, Z+10	; 0x0a
     6b4:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b6:	e0 2d       	mov	r30, r0
     6b8:	19 95       	eicall
     6ba:	18 2f       	mov	r17, r24
     6bc:	1a c0       	rjmp	.+52     	; 0x6f2 <_ZN15Adafruit_BME2805read8Eh+0x86>
     6be:	8e 85       	ldd	r24, Y+14	; 0x0e
     6c0:	8f 3f       	cpi	r24, 0xFF	; 255
     6c2:	19 f4       	brne	.+6      	; 0x6ca <_ZN15Adafruit_BME2805read8Eh+0x5e>
     6c4:	82 e5       	ldi	r24, 0x52	; 82
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	a6 de       	rcall	.-692    	; 0x416 <_ZN8SPIClass16beginTransactionE11SPISettings>
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ce:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     6d2:	61 2f       	mov	r22, r17
     6d4:	60 68       	ori	r22, 0x80	; 128
     6d6:	ce 01       	movw	r24, r28
     6d8:	d0 de       	rcall	.-608    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	ce 01       	movw	r24, r28
     6de:	cd de       	rcall	.-614    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     6e0:	18 2f       	mov	r17, r24
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6e6:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     6ea:	8e 85       	ldd	r24, Y+14	; 0x0e
     6ec:	8f 3f       	cpi	r24, 0xFF	; 255
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <_ZN15Adafruit_BME2805read8Eh+0x86>
     6f0:	ac de       	rcall	.-680    	; 0x44a <_ZN8SPIClass14endTransactionEv>
     6f2:	81 2f       	mov	r24, r17
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	08 95       	ret

000006fc <_ZN15Adafruit_BME2806read16Eh>:
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	ec 01       	movw	r28, r24
     706:	16 2f       	mov	r17, r22
     708:	8b 85       	ldd	r24, Y+11	; 0x0b
     70a:	8f 3f       	cpi	r24, 0xFF	; 255
     70c:	81 f5       	brne	.+96     	; 0x76e <_ZN15Adafruit_BME2806read16Eh+0x72>
     70e:	6a 81       	ldd	r22, Y+2	; 0x02
     710:	88 81       	ld	r24, Y
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	e6 d5       	rcall	.+3020   	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>
     716:	88 81       	ld	r24, Y
     718:	99 81       	ldd	r25, Y+1	; 0x01
     71a:	dc 01       	movw	r26, r24
     71c:	ed 91       	ld	r30, X+
     71e:	fc 91       	ld	r31, X
     720:	01 90       	ld	r0, Z+
     722:	f0 81       	ld	r31, Z
     724:	e0 2d       	mov	r30, r0
     726:	61 2f       	mov	r22, r17
     728:	19 95       	eicall
     72a:	88 81       	ld	r24, Y
     72c:	99 81       	ldd	r25, Y+1	; 0x01
     72e:	58 d6       	rcall	.+3248   	; 0x13e0 <_ZN7TwoWire15endTransmissionEv>
     730:	42 e0       	ldi	r20, 0x02	; 2
     732:	6a 81       	ldd	r22, Y+2	; 0x02
     734:	88 81       	ld	r24, Y
     736:	99 81       	ldd	r25, Y+1	; 0x01
     738:	51 d6       	rcall	.+3234   	; 0x13dc <_ZN7TwoWire11requestFromEhh>
     73a:	88 81       	ld	r24, Y
     73c:	99 81       	ldd	r25, Y+1	; 0x01
     73e:	dc 01       	movw	r26, r24
     740:	ed 91       	ld	r30, X+
     742:	fc 91       	ld	r31, X
     744:	02 84       	ldd	r0, Z+10	; 0x0a
     746:	f3 85       	ldd	r31, Z+11	; 0x0b
     748:	e0 2d       	mov	r30, r0
     74a:	19 95       	eicall
     74c:	18 2f       	mov	r17, r24
     74e:	88 81       	ld	r24, Y
     750:	99 81       	ldd	r25, Y+1	; 0x01
     752:	dc 01       	movw	r26, r24
     754:	ed 91       	ld	r30, X+
     756:	fc 91       	ld	r31, X
     758:	02 84       	ldd	r0, Z+10	; 0x0a
     75a:	f3 85       	ldd	r31, Z+11	; 0x0b
     75c:	e0 2d       	mov	r30, r0
     75e:	19 95       	eicall
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	31 2f       	mov	r19, r17
     766:	89 01       	movw	r16, r18
     768:	08 2b       	or	r16, r24
     76a:	19 2b       	or	r17, r25
     76c:	23 c0       	rjmp	.+70     	; 0x7b4 <_ZN15Adafruit_BME2806read16Eh+0xb8>
     76e:	8e 85       	ldd	r24, Y+14	; 0x0e
     770:	8f 3f       	cpi	r24, 0xFF	; 255
     772:	19 f4       	brne	.+6      	; 0x77a <_ZN15Adafruit_BME2806read16Eh+0x7e>
     774:	82 e5       	ldi	r24, 0x52	; 82
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	4e de       	rcall	.-868    	; 0x416 <_ZN8SPIClass16beginTransactionE11SPISettings>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	8b 85       	ldd	r24, Y+11	; 0x0b
     77e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     782:	61 2f       	mov	r22, r17
     784:	60 68       	ori	r22, 0x80	; 128
     786:	ce 01       	movw	r24, r28
     788:	78 de       	rcall	.-784    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	ce 01       	movw	r24, r28
     78e:	75 de       	rcall	.-790    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     790:	08 2f       	mov	r16, r24
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	ce 01       	movw	r24, r28
     796:	71 de       	rcall	.-798    	; 0x47a <_ZN15Adafruit_BME2807spixferEh>
     798:	20 2f       	mov	r18, r16
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	32 2f       	mov	r19, r18
     79e:	22 27       	eor	r18, r18
     7a0:	89 01       	movw	r16, r18
     7a2:	08 2b       	or	r16, r24
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     7a8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     7ac:	8e 85       	ldd	r24, Y+14	; 0x0e
     7ae:	8f 3f       	cpi	r24, 0xFF	; 255
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <_ZN15Adafruit_BME2806read16Eh+0xb8>
     7b2:	4b de       	rcall	.-874    	; 0x44a <_ZN8SPIClass14endTransactionEv>
     7b4:	c8 01       	movw	r24, r16
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <_ZN15Adafruit_BME2809read16_LEEh>:
     7c0:	9d df       	rcall	.-198    	; 0x6fc <_ZN15Adafruit_BME2806read16Eh>
     7c2:	98 27       	eor	r25, r24
     7c4:	89 27       	eor	r24, r25
     7c6:	98 27       	eor	r25, r24
     7c8:	08 95       	ret

000007ca <_ZN15Adafruit_BME28016readCoefficientsEv>:
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	ec 01       	movw	r28, r24
     7d2:	68 e8       	ldi	r22, 0x88	; 136
     7d4:	f5 df       	rcall	.-22     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     7d6:	98 8b       	std	Y+16, r25	; 0x10
     7d8:	8f 87       	std	Y+15, r24	; 0x0f
     7da:	6a e8       	ldi	r22, 0x8A	; 138
     7dc:	ce 01       	movw	r24, r28
     7de:	f0 df       	rcall	.-32     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     7e0:	9a 8b       	std	Y+18, r25	; 0x12
     7e2:	89 8b       	std	Y+17, r24	; 0x11
     7e4:	6c e8       	ldi	r22, 0x8C	; 140
     7e6:	ce 01       	movw	r24, r28
     7e8:	eb df       	rcall	.-42     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     7ea:	9c 8b       	std	Y+20, r25	; 0x14
     7ec:	8b 8b       	std	Y+19, r24	; 0x13
     7ee:	6e e8       	ldi	r22, 0x8E	; 142
     7f0:	ce 01       	movw	r24, r28
     7f2:	e6 df       	rcall	.-52     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     7f4:	9e 8b       	std	Y+22, r25	; 0x16
     7f6:	8d 8b       	std	Y+21, r24	; 0x15
     7f8:	60 e9       	ldi	r22, 0x90	; 144
     7fa:	ce 01       	movw	r24, r28
     7fc:	e1 df       	rcall	.-62     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     7fe:	98 8f       	std	Y+24, r25	; 0x18
     800:	8f 8b       	std	Y+23, r24	; 0x17
     802:	62 e9       	ldi	r22, 0x92	; 146
     804:	ce 01       	movw	r24, r28
     806:	dc df       	rcall	.-72     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     808:	9a 8f       	std	Y+26, r25	; 0x1a
     80a:	89 8f       	std	Y+25, r24	; 0x19
     80c:	64 e9       	ldi	r22, 0x94	; 148
     80e:	ce 01       	movw	r24, r28
     810:	d7 df       	rcall	.-82     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     812:	9c 8f       	std	Y+28, r25	; 0x1c
     814:	8b 8f       	std	Y+27, r24	; 0x1b
     816:	66 e9       	ldi	r22, 0x96	; 150
     818:	ce 01       	movw	r24, r28
     81a:	d2 df       	rcall	.-92     	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     81c:	9e 8f       	std	Y+30, r25	; 0x1e
     81e:	8d 8f       	std	Y+29, r24	; 0x1d
     820:	68 e9       	ldi	r22, 0x98	; 152
     822:	ce 01       	movw	r24, r28
     824:	cd df       	rcall	.-102    	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     826:	98 a3       	std	Y+32, r25	; 0x20
     828:	8f 8f       	std	Y+31, r24	; 0x1f
     82a:	6a e9       	ldi	r22, 0x9A	; 154
     82c:	ce 01       	movw	r24, r28
     82e:	c8 df       	rcall	.-112    	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     830:	9a a3       	std	Y+34, r25	; 0x22
     832:	89 a3       	std	Y+33, r24	; 0x21
     834:	6c e9       	ldi	r22, 0x9C	; 156
     836:	ce 01       	movw	r24, r28
     838:	c3 df       	rcall	.-122    	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     83a:	9c a3       	std	Y+36, r25	; 0x24
     83c:	8b a3       	std	Y+35, r24	; 0x23
     83e:	6e e9       	ldi	r22, 0x9E	; 158
     840:	ce 01       	movw	r24, r28
     842:	be df       	rcall	.-132    	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     844:	9e a3       	std	Y+38, r25	; 0x26
     846:	8d a3       	std	Y+37, r24	; 0x25
     848:	61 ea       	ldi	r22, 0xA1	; 161
     84a:	ce 01       	movw	r24, r28
     84c:	0f df       	rcall	.-482    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     84e:	8f a3       	std	Y+39, r24	; 0x27
     850:	61 ee       	ldi	r22, 0xE1	; 225
     852:	ce 01       	movw	r24, r28
     854:	b5 df       	rcall	.-150    	; 0x7c0 <_ZN15Adafruit_BME2809read16_LEEh>
     856:	99 a7       	std	Y+41, r25	; 0x29
     858:	88 a7       	std	Y+40, r24	; 0x28
     85a:	63 ee       	ldi	r22, 0xE3	; 227
     85c:	ce 01       	movw	r24, r28
     85e:	06 df       	rcall	.-500    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     860:	8a a7       	std	Y+42, r24	; 0x2a
     862:	64 ee       	ldi	r22, 0xE4	; 228
     864:	ce 01       	movw	r24, r28
     866:	02 df       	rcall	.-508    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     868:	18 2f       	mov	r17, r24
     86a:	65 ee       	ldi	r22, 0xE5	; 229
     86c:	ce 01       	movw	r24, r28
     86e:	fe de       	rcall	.-516    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     870:	90 e1       	ldi	r25, 0x10	; 16
     872:	19 9f       	mul	r17, r25
     874:	90 01       	movw	r18, r0
     876:	11 24       	eor	r1, r1
     878:	8f 70       	andi	r24, 0x0F	; 15
     87a:	28 2b       	or	r18, r24
     87c:	3c a7       	std	Y+44, r19	; 0x2c
     87e:	2b a7       	std	Y+43, r18	; 0x2b
     880:	66 ee       	ldi	r22, 0xE6	; 230
     882:	ce 01       	movw	r24, r28
     884:	f3 de       	rcall	.-538    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     886:	18 2f       	mov	r17, r24
     888:	65 ee       	ldi	r22, 0xE5	; 229
     88a:	ce 01       	movw	r24, r28
     88c:	ef de       	rcall	.-546    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     88e:	90 e1       	ldi	r25, 0x10	; 16
     890:	19 9f       	mul	r17, r25
     892:	90 01       	movw	r18, r0
     894:	11 24       	eor	r1, r1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	44 e0       	ldi	r20, 0x04	; 4
     89a:	95 95       	asr	r25
     89c:	87 95       	ror	r24
     89e:	4a 95       	dec	r20
     8a0:	e1 f7       	brne	.-8      	; 0x89a <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
     8a2:	82 2b       	or	r24, r18
     8a4:	93 2b       	or	r25, r19
     8a6:	9e a7       	std	Y+46, r25	; 0x2e
     8a8:	8d a7       	std	Y+45, r24	; 0x2d
     8aa:	67 ee       	ldi	r22, 0xE7	; 231
     8ac:	ce 01       	movw	r24, r28
     8ae:	de de       	rcall	.-580    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     8b0:	8f a7       	std	Y+47, r24	; 0x2f
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	08 95       	ret

000008ba <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
     8ba:	63 ef       	ldi	r22, 0xF3	; 243
     8bc:	d7 de       	rcall	.-594    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     8be:	81 70       	andi	r24, 0x01	; 1
     8c0:	08 95       	ret

000008c2 <_ZN15Adafruit_BME2804initEv>:
     8c2:	cf 92       	push	r12
     8c4:	ef 92       	push	r14
     8c6:	0f 93       	push	r16
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
     8ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	21 f4       	brne	.+8      	; 0x8dc <_ZN15Adafruit_BME2804initEv+0x1a>
     8d4:	88 81       	ld	r24, Y
     8d6:	99 81       	ldd	r25, Y+1	; 0x01
     8d8:	f5 d4       	rcall	.+2538   	; 0x12c4 <_ZN7TwoWire5beginEv>
     8da:	18 c0       	rjmp	.+48     	; 0x90c <_ZN15Adafruit_BME2804initEv+0x4a>
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8e6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>
     8ea:	8e 85       	ldd	r24, Y+14	; 0x0e
     8ec:	8f 3f       	cpi	r24, 0xFF	; 255
     8ee:	19 f4       	brne	.+6      	; 0x8f6 <_ZN15Adafruit_BME2804initEv+0x34>
     8f0:	0e 94 83 1b 	call	0x3706	; 0x3706 <_ZN8SPIClass5beginEv>
     8f4:	0b c0       	rjmp	.+22     	; 0x90c <_ZN15Adafruit_BME2804initEv+0x4a>
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     900:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	8d 85       	ldd	r24, Y+13	; 0x0d
     908:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>
     90c:	60 ed       	ldi	r22, 0xD0	; 208
     90e:	ce 01       	movw	r24, r28
     910:	ad de       	rcall	.-678    	; 0x66c <_ZN15Adafruit_BME2805read8Eh>
     912:	80 36       	cpi	r24, 0x60	; 96
     914:	29 f5       	brne	.+74     	; 0x960 <_ZN15Adafruit_BME2804initEv+0x9e>
     916:	46 eb       	ldi	r20, 0xB6	; 182
     918:	60 ee       	ldi	r22, 0xE0	; 224
     91a:	ce 01       	movw	r24, r28
     91c:	f5 dd       	rcall	.-1046   	; 0x508 <_ZN15Adafruit_BME2806write8Ehh>
     91e:	6c e2       	ldi	r22, 0x2C	; 44
     920:	71 e0       	ldi	r23, 0x01	; 1
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <delay>
     92a:	ce 01       	movw	r24, r28
     92c:	c6 df       	rcall	.-116    	; 0x8ba <_ZN15Adafruit_BME28020isReadingCalibrationEv>
     92e:	88 23       	and	r24, r24
     930:	29 f0       	breq	.+10     	; 0x93c <_ZN15Adafruit_BME2804initEv+0x7a>
     932:	64 e6       	ldi	r22, 0x64	; 100
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	f5 cf       	rjmp	.-22     	; 0x926 <_ZN15Adafruit_BME2804initEv+0x64>
     93c:	ce 01       	movw	r24, r28
     93e:	45 df       	rcall	.-374    	; 0x7ca <_ZN15Adafruit_BME28016readCoefficientsEv>
     940:	c1 2c       	mov	r12, r1
     942:	e1 2c       	mov	r14, r1
     944:	05 e0       	ldi	r16, 0x05	; 5
     946:	25 e0       	ldi	r18, 0x05	; 5
     948:	45 e0       	ldi	r20, 0x05	; 5
     94a:	63 e0       	ldi	r22, 0x03	; 3
     94c:	ce 01       	movw	r24, r28
     94e:	27 de       	rcall	.-946    	; 0x59e <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
     950:	64 e6       	ldi	r22, 0x64	; 100
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <delay>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	01 c0       	rjmp	.+2      	; 0x962 <_ZN15Adafruit_BME2804initEv+0xa0>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	0f 91       	pop	r16
     968:	ef 90       	pop	r14
     96a:	cf 90       	pop	r12
     96c:	08 95       	ret

0000096e <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
     96e:	27 e7       	ldi	r18, 0x77	; 119
     970:	fc 01       	movw	r30, r24
     972:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
     974:	25 ef       	ldi	r18, 0xF5	; 245
     976:	34 e0       	ldi	r19, 0x04	; 4
     978:	31 83       	std	Z+1, r19	; 0x01
     97a:	20 83       	st	Z, r18
	return init();
     97c:	a2 cf       	rjmp	.-188    	; 0x8c2 <_ZN15Adafruit_BME2804initEv>

0000097e <_ZL6conv2dPKc>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     97e:	fc 01       	movw	r30, r24
     980:	90 81       	ld	r25, Z
     982:	90 53       	subi	r25, 0x30	; 48
     984:	9a 30       	cpi	r25, 0x0A	; 10
     986:	08 f0       	brcs	.+2      	; 0x98a <_ZL6conv2dPKc+0xc>
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	81 81       	ldd	r24, Z+1	; 0x01
     98c:	80 53       	subi	r24, 0x30	; 48
     98e:	2a e0       	ldi	r18, 0x0A	; 10
     990:	92 9f       	mul	r25, r18
     992:	80 0d       	add	r24, r0
     994:	11 24       	eor	r1, r1
     996:	08 95       	ret

00000998 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	2b 97       	sbiw	r28, 0x0b	; 11
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	8c 01       	movw	r16, r24
     9b6:	7a 01       	movw	r14, r20
     9b8:	4b e0       	ldi	r20, 0x0B	; 11
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <memcpy_P>
     9c4:	ce 01       	movw	r24, r28
     9c6:	0a 96       	adiw	r24, 0x0a	; 10
     9c8:	da df       	rcall	.-76     	; 0x97e <_ZL6conv2dPKc>
     9ca:	f8 01       	movw	r30, r16
     9cc:	80 83       	st	Z, r24
     9ce:	e9 81       	ldd	r30, Y+1	; 0x01
     9d0:	8e 2f       	mov	r24, r30
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	fc 01       	movw	r30, r24
     9d6:	e1 54       	subi	r30, 0x41	; 65
     9d8:	f1 09       	sbc	r31, r1
     9da:	e3 31       	cpi	r30, 0x13	; 19
     9dc:	f1 05       	cpc	r31, r1
     9de:	58 f5       	brcc	.+86     	; 0xa36 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9e>
     9e0:	88 27       	eor	r24, r24
     9e2:	ee 58       	subi	r30, 0x8E	; 142
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	8f 4f       	sbci	r24, 0xFF	; 255
     9e8:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__tablejump2__>
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	81 36       	cpi	r24, 0x61	; 97
     9f0:	29 f0       	breq	.+10     	; 0x9fc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	8e 36       	cpi	r24, 0x6E	; 110
     9f6:	21 f0       	breq	.+8      	; 0xa00 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x68>
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	1b c0       	rjmp	.+54     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	19 c0       	rjmp	.+50     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a00:	86 e0       	ldi	r24, 0x06	; 6
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	15 c0       	rjmp	.+42     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	82 37       	cpi	r24, 0x72	; 114
     a0c:	11 f0       	breq	.+4      	; 0xa12 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x7a>
     a0e:	88 e0       	ldi	r24, 0x08	; 8
     a10:	10 c0       	rjmp	.+32     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	0e c0       	rjmp	.+28     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	82 37       	cpi	r24, 0x72	; 114
     a1a:	11 f0       	breq	.+4      	; 0xa20 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x88>
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a24:	89 e0       	ldi	r24, 0x09	; 9
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a28:	8a e0       	ldi	r24, 0x0A	; 10
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a2c:	8b e0       	ldi	r24, 0x0B	; 11
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
     a30:	8c e0       	ldi	r24, 0x0C	; 12
     a32:	f8 01       	movw	r30, r16
     a34:	81 83       	std	Z+1, r24	; 0x01
     a36:	ce 01       	movw	r24, r28
     a38:	05 96       	adiw	r24, 0x05	; 5
     a3a:	a1 df       	rcall	.-190    	; 0x97e <_ZL6conv2dPKc>
     a3c:	f8 01       	movw	r30, r16
     a3e:	82 83       	std	Z+2, r24	; 0x02
     a40:	48 e0       	ldi	r20, 0x08	; 8
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	b7 01       	movw	r22, r14
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <memcpy_P>
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	95 df       	rcall	.-214    	; 0x97e <_ZL6conv2dPKc>
     a54:	f8 01       	movw	r30, r16
     a56:	83 83       	std	Z+3, r24	; 0x03
     a58:	ce 01       	movw	r24, r28
     a5a:	04 96       	adiw	r24, 0x04	; 4
     a5c:	90 df       	rcall	.-224    	; 0x97e <_ZL6conv2dPKc>
     a5e:	f8 01       	movw	r30, r16
     a60:	84 83       	std	Z+4, r24	; 0x04
     a62:	ce 01       	movw	r24, r28
     a64:	07 96       	adiw	r24, 0x07	; 7
     a66:	8b df       	rcall	.-234    	; 0x97e <_ZL6conv2dPKc>
     a68:	f8 01       	movw	r30, r16
     a6a:	85 83       	std	Z+5, r24	; 0x05
     a6c:	2b 96       	adiw	r28, 0x0b	; 11
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <_ZN10RTC_DS32315beginEv>:
     a86:	85 ef       	ldi	r24, 0xF5	; 245
     a88:	94 e0       	ldi	r25, 0x04	; 4
     a8a:	1c d4       	rcall	.+2104   	; 0x12c4 <_ZN7TwoWire5beginEv>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret

00000a90 <_ZL17read_i2c_registerhh.constprop.7>:
     a90:	cf 93       	push	r28
     a92:	c8 2f       	mov	r28, r24
     a94:	68 e6       	ldi	r22, 0x68	; 104
     a96:	85 ef       	ldi	r24, 0xF5	; 245
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	23 d4       	rcall	.+2118   	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>
     a9c:	6c 2f       	mov	r22, r28
     a9e:	85 ef       	ldi	r24, 0xF5	; 245
     aa0:	94 e0       	ldi	r25, 0x04	; 4
     aa2:	d2 d3       	rcall	.+1956   	; 0x1248 <_ZN7TwoWire5writeEh>
     aa4:	85 ef       	ldi	r24, 0xF5	; 245
     aa6:	94 e0       	ldi	r25, 0x04	; 4
     aa8:	9b d4       	rcall	.+2358   	; 0x13e0 <_ZN7TwoWire15endTransmissionEv>
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	68 e6       	ldi	r22, 0x68	; 104
     aae:	85 ef       	ldi	r24, 0xF5	; 245
     ab0:	94 e0       	ldi	r25, 0x04	; 4
     ab2:	94 d4       	rcall	.+2344   	; 0x13dc <_ZN7TwoWire11requestFromEhh>
     ab4:	85 ef       	ldi	r24, 0xF5	; 245
     ab6:	94 e0       	ldi	r25, 0x04	; 4
     ab8:	41 d3       	rcall	.+1666   	; 0x113c <_ZN7TwoWire4readEv>
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
     ac6:	68 e6       	ldi	r22, 0x68	; 104
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	85 ef       	ldi	r24, 0xF5	; 245
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	13 d4       	rcall	.+2086   	; 0x12f6 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	85 ef       	ldi	r24, 0xF5	; 245
     ad4:	94 e0       	ldi	r25, 0x04	; 4
     ad6:	b8 d3       	rcall	.+1904   	; 0x1248 <_ZN7TwoWire5writeEh>
     ad8:	f8 01       	movw	r30, r16
     ada:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
     adc:	ca e0       	ldi	r28, 0x0A	; 10
     ade:	82 2f       	mov	r24, r18
     ae0:	6c 2f       	mov	r22, r28
     ae2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__udivmodqi4>
     ae6:	68 2f       	mov	r22, r24
     ae8:	66 0f       	add	r22, r22
     aea:	86 0f       	add	r24, r22
     aec:	88 0f       	add	r24, r24
     aee:	68 2f       	mov	r22, r24
     af0:	62 0f       	add	r22, r18
     af2:	85 ef       	ldi	r24, 0xF5	; 245
     af4:	94 e0       	ldi	r25, 0x04	; 4
     af6:	a8 d3       	rcall	.+1872   	; 0x1248 <_ZN7TwoWire5writeEh>
     af8:	f8 01       	movw	r30, r16
     afa:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
     afc:	82 2f       	mov	r24, r18
     afe:	6c 2f       	mov	r22, r28
     b00:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__udivmodqi4>
     b04:	68 2f       	mov	r22, r24
     b06:	66 0f       	add	r22, r22
     b08:	86 0f       	add	r24, r22
     b0a:	88 0f       	add	r24, r24
     b0c:	68 2f       	mov	r22, r24
     b0e:	62 0f       	add	r22, r18
     b10:	85 ef       	ldi	r24, 0xF5	; 245
     b12:	94 e0       	ldi	r25, 0x04	; 4
     b14:	99 d3       	rcall	.+1842   	; 0x1248 <_ZN7TwoWire5writeEh>
     b16:	f8 01       	movw	r30, r16
     b18:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
     b1a:	82 2f       	mov	r24, r18
     b1c:	6c 2f       	mov	r22, r28
     b1e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__udivmodqi4>
     b22:	68 2f       	mov	r22, r24
     b24:	66 0f       	add	r22, r22
     b26:	86 0f       	add	r24, r22
     b28:	88 0f       	add	r24, r24
     b2a:	68 2f       	mov	r22, r24
     b2c:	62 0f       	add	r22, r18
     b2e:	85 ef       	ldi	r24, 0xF5	; 245
     b30:	94 e0       	ldi	r25, 0x04	; 4
  Wire._I2C_WRITE(bin2bcd(0));
     b32:	8a d3       	rcall	.+1812   	; 0x1248 <_ZN7TwoWire5writeEh>
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	85 ef       	ldi	r24, 0xF5	; 245
     b38:	94 e0       	ldi	r25, 0x04	; 4
     b3a:	86 d3       	rcall	.+1804   	; 0x1248 <_ZN7TwoWire5writeEh>
     b3c:	f8 01       	movw	r30, r16
     b3e:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
     b40:	82 2f       	mov	r24, r18
     b42:	6c 2f       	mov	r22, r28
     b44:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__udivmodqi4>
     b48:	68 2f       	mov	r22, r24
     b4a:	66 0f       	add	r22, r22
     b4c:	86 0f       	add	r24, r22
     b4e:	88 0f       	add	r24, r24
     b50:	68 2f       	mov	r22, r24
     b52:	62 0f       	add	r22, r18
     b54:	85 ef       	ldi	r24, 0xF5	; 245
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	77 d3       	rcall	.+1774   	; 0x1248 <_ZN7TwoWire5writeEh>
     b5a:	f8 01       	movw	r30, r16
     b5c:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
     b5e:	82 2f       	mov	r24, r18
     b60:	6c 2f       	mov	r22, r28
     b62:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__udivmodqi4>
     b66:	68 2f       	mov	r22, r24
     b68:	66 0f       	add	r22, r22
     b6a:	86 0f       	add	r24, r22
     b6c:	88 0f       	add	r24, r24
     b6e:	68 2f       	mov	r22, r24
     b70:	62 0f       	add	r22, r18
     b72:	85 ef       	ldi	r24, 0xF5	; 245
     b74:	94 e0       	ldi	r25, 0x04	; 4
     b76:	68 d3       	rcall	.+1744   	; 0x1248 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
     b78:	f8 01       	movw	r30, r16
     b7a:	20 81       	ld	r18, Z
     b7c:	82 2f       	mov	r24, r18
     b7e:	6c 2f       	mov	r22, r28
     b80:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__udivmodqi4>
     b84:	68 2f       	mov	r22, r24
     b86:	66 0f       	add	r22, r22
     b88:	86 0f       	add	r24, r22
     b8a:	88 0f       	add	r24, r24
     b8c:	68 2f       	mov	r22, r24
     b8e:	62 0f       	add	r22, r18
     b90:	85 ef       	ldi	r24, 0xF5	; 245
  Wire.endTransmission();
     b92:	94 e0       	ldi	r25, 0x04	; 4
     b94:	59 d3       	rcall	.+1714   	; 0x1248 <_ZN7TwoWire5writeEh>
     b96:	85 ef       	ldi	r24, 0xF5	; 245

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	22 d4       	rcall	.+2116   	; 0x13e0 <_ZN7TwoWire15endTransmissionEv>
     b9c:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
     b9e:	78 df       	rcall	.-272    	; 0xa90 <_ZL17read_i2c_registerhh.constprop.7>
     ba0:	c8 2f       	mov	r28, r24
     ba2:	68 e6       	ldi	r22, 0x68	; 104
     ba4:	85 ef       	ldi	r24, 0xF5	; 245
  Wire._I2C_WRITE((byte)reg);
     ba6:	94 e0       	ldi	r25, 0x04	; 4
     ba8:	9c d3       	rcall	.+1848   	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>
     baa:	6f e0       	ldi	r22, 0x0F	; 15
     bac:	85 ef       	ldi	r24, 0xF5	; 245
  Wire._I2C_WRITE((byte)val);
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	4b d3       	rcall	.+1686   	; 0x1248 <_ZN7TwoWire5writeEh>
     bb2:	6c 2f       	mov	r22, r28
     bb4:	6f 77       	andi	r22, 0x7F	; 127
     bb6:	85 ef       	ldi	r24, 0xF5	; 245
     bb8:	94 e0       	ldi	r25, 0x04	; 4
  Wire.endTransmission();
     bba:	46 d3       	rcall	.+1676   	; 0x1248 <_ZN7TwoWire5writeEh>
     bbc:	85 ef       	ldi	r24, 0xF5	; 245
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
     bbe:	94 e0       	ldi	r25, 0x04	; 4
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
     bc4:	0f 91       	pop	r16
     bc6:	0c c4       	rjmp	.+2072   	; 0x13e0 <_ZN7TwoWire15endTransmissionEv>

00000bc8 <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
     bc8:	8f e0       	ldi	r24, 0x0F	; 15
     bca:	62 df       	rcall	.-316    	; 0xa90 <_ZL17read_i2c_registerhh.constprop.7>
     bcc:	87 fb       	bst	r24, 7
     bce:	88 27       	eor	r24, r24
     bd0:	80 f9       	bld	r24, 0
}
     bd2:	08 95       	ret

00000bd4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     bda:	08 95       	ret

00000bdc <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	0b b6       	in	r0, 0x3b	; 59
     be8:	0f 92       	push	r0
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     c02:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <_ZN14SoftwareSerial13active_objectE>
     c06:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE+0x1>
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__vector_10+0x34>
     c0e:	51 c0       	rjmp	.+162    	; 0xcb2 <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     c10:	96 8d       	ldd	r25, Z+30	; 0x1e
     c12:	a6 85       	ldd	r26, Z+14	; 0x0e
     c14:	b7 85       	ldd	r27, Z+15	; 0x0f
     c16:	85 85       	ldd	r24, Z+13	; 0x0d
     c18:	91 ff       	sbrs	r25, 1
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     c1c:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     c1e:	89 23       	and	r24, r25
     c20:	29 f4       	brne	.+10     	; 0xc2c <__vector_10+0x50>
     c22:	47 c0       	rjmp	.+142    	; 0xcb2 <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     c24:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     c26:	89 23       	and	r24, r25
     c28:	09 f0       	breq	.+2      	; 0xc2c <__vector_10+0x50>
     c2a:	43 c0       	rjmp	.+134    	; 0xcb2 <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     c2c:	a3 89       	ldd	r26, Z+19	; 0x13
     c2e:	b4 89       	ldd	r27, Z+20	; 0x14
     c30:	9c 91       	ld	r25, X
     c32:	85 89       	ldd	r24, Z+21	; 0x15
     c34:	80 95       	com	r24
     c36:	89 23       	and	r24, r25
     c38:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     c3a:	86 89       	ldd	r24, Z+22	; 0x16
     c3c:	97 89       	ldd	r25, Z+23	; 0x17
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     c42:	60 8d       	ldd	r22, Z+24	; 0x18
     c44:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     c46:	a6 85       	ldd	r26, Z+14	; 0x0e
     c48:	b7 85       	ldd	r27, Z+15	; 0x0f
     c4a:	55 85       	ldd	r21, Z+13	; 0x0d
     c4c:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	cb 01       	movw	r24, r22
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     c56:	82 2f       	mov	r24, r18
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     c60:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     c62:	45 23       	and	r20, r21
     c64:	09 f0       	breq	.+2      	; 0xc68 <__vector_10+0x8c>
        d |= 0x80;
     c66:	20 68       	ori	r18, 0x80	; 128
     c68:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     c6a:	91 f7       	brne	.-28     	; 0xc50 <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     c6c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c6e:	81 fd       	sbrc	r24, 1
      d = ~d;
     c70:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     c72:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	8f 73       	andi	r24, 0x3F	; 63
     c7c:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
     c7e:	30 91 43 04 	lds	r19, 0x0443	; 0x800443 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c82:	38 17       	cp	r19, r24
     c84:	49 f0       	breq	.+18     	; 0xc98 <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     c86:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ab 5b       	subi	r26, 0xBB	; 187
     c8e:	bb 4f       	sbci	r27, 0xFB	; 251
     c90:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
     c92:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     c98:	86 8d       	ldd	r24, Z+30	; 0x1e
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	86 8f       	std	Z+30, r24	; 0x1e
     c9e:	82 8d       	ldd	r24, Z+26	; 0x1a
     ca0:	93 8d       	ldd	r25, Z+27	; 0x1b
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     ca6:	a3 89       	ldd	r26, Z+19	; 0x13
     ca8:	b4 89       	ldd	r27, Z+20	; 0x14
     caa:	9c 91       	ld	r25, X
     cac:	85 89       	ldd	r24, Z+21	; 0x15
     cae:	89 2b       	or	r24, r25
     cb0:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0b be       	out	0x3b, r0	; 59
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     cd8:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <twi_state>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <twi_sendStop>
     ce2:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <twi_inRepStart>
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	84 e1       	ldi	r24, 0x14	; 20
     cea:	9e d7       	rcall	.+3900   	; 0x1c28 <digitalWrite>
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	85 e1       	ldi	r24, 0x15	; 21
     cf0:	9b d7       	rcall	.+3894   	; 0x1c28 <digitalWrite>
     cf2:	e9 eb       	ldi	r30, 0xB9	; 185
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	80 83       	st	Z, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	8d 7f       	andi	r24, 0xFD	; 253
     d00:	80 83       	st	Z, r24
     d02:	88 e4       	ldi	r24, 0x48	; 72
     d04:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     d08:	85 e4       	ldi	r24, 0x45	; 69
     d0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d0e:	08 95       	ret

00000d10 <twi_readFrom>:
     d10:	41 32       	cpi	r20, 0x21	; 33
     d12:	08 f0       	brcs	.+2      	; 0xd16 <twi_readFrom+0x6>
     d14:	43 c0       	rjmp	.+134    	; 0xd9c <twi_readFrom+0x8c>
     d16:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <twi_state>
     d1a:	91 11       	cpse	r25, r1
     d1c:	fc cf       	rjmp	.-8      	; 0xd16 <twi_readFrom+0x6>
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <twi_state>
     d24:	20 93 f2 04 	sts	0x04F2, r18	; 0x8004f2 <twi_sendStop>
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	20 93 87 04 	sts	0x0487, r18	; 0x800487 <twi_error>
     d2e:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <twi_masterBufferIndex>
     d32:	24 0f       	add	r18, r20
     d34:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <twi_masterBufferLength>
     d38:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <twi_slarw>
     d3c:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <twi_slarw>
     d40:	88 0f       	add	r24, r24
     d42:	89 2b       	or	r24, r25
     d44:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <twi_slarw>
     d48:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <twi_inRepStart>
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	61 f4       	brne	.+24     	; 0xd68 <twi_readFrom+0x58>
     d50:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <twi_inRepStart>
     d54:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <twi_slarw>
     d58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     d5c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d60:	83 fd       	sbrc	r24, 3
     d62:	f8 cf       	rjmp	.-16     	; 0xd54 <twi_readFrom+0x44>
     d64:	85 ec       	ldi	r24, 0xC5	; 197
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <twi_readFrom+0x5a>
     d68:	85 ee       	ldi	r24, 0xE5	; 229
     d6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d6e:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <twi_state>
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	e1 f3       	breq	.-8      	; 0xd6e <twi_readFrom+0x5e>
     d76:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
     d7a:	84 17       	cp	r24, r20
     d7c:	10 f4       	brcc	.+4      	; 0xd82 <twi_readFrom+0x72>
     d7e:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
     d82:	ad ec       	ldi	r26, 0xCD	; 205
     d84:	b4 e0       	ldi	r27, 0x04	; 4
     d86:	96 2f       	mov	r25, r22
     d88:	fb 01       	movw	r30, r22
     d8a:	8e 2f       	mov	r24, r30
     d8c:	89 1b       	sub	r24, r25
     d8e:	84 17       	cp	r24, r20
     d90:	18 f4       	brcc	.+6      	; 0xd98 <twi_readFrom+0x88>
     d92:	8d 91       	ld	r24, X+
     d94:	81 93       	st	Z+, r24
     d96:	f9 cf       	rjmp	.-14     	; 0xd8a <twi_readFrom+0x7a>
     d98:	84 2f       	mov	r24, r20
     d9a:	08 95       	ret
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	08 95       	ret

00000da0 <twi_writeTo>:
     da0:	0f 93       	push	r16
     da2:	41 32       	cpi	r20, 0x21	; 33
     da4:	08 f0       	brcs	.+2      	; 0xda8 <twi_writeTo+0x8>
     da6:	4a c0       	rjmp	.+148    	; 0xe3c <twi_writeTo+0x9c>
     da8:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <twi_state>
     dac:	91 11       	cpse	r25, r1
     dae:	fc cf       	rjmp	.-8      	; 0xda8 <twi_writeTo+0x8>
     db0:	32 e0       	ldi	r19, 0x02	; 2
     db2:	30 93 f4 04 	sts	0x04F4, r19	; 0x8004f4 <twi_state>
     db6:	00 93 f2 04 	sts	0x04F2, r16	; 0x8004f2 <twi_sendStop>
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	30 93 87 04 	sts	0x0487, r19	; 0x800487 <twi_error>
     dc0:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <twi_masterBufferIndex>
     dc4:	40 93 cb 04 	sts	0x04CB, r20	; 0x8004cb <twi_masterBufferLength>
     dc8:	56 2f       	mov	r21, r22
     dca:	ad ec       	ldi	r26, 0xCD	; 205
     dcc:	b4 e0       	ldi	r27, 0x04	; 4
     dce:	fb 01       	movw	r30, r22
     dd0:	3e 2f       	mov	r19, r30
     dd2:	35 1b       	sub	r19, r21
     dd4:	34 17       	cp	r19, r20
     dd6:	18 f4       	brcc	.+6      	; 0xdde <twi_writeTo+0x3e>
     dd8:	31 91       	ld	r19, Z+
     dda:	3d 93       	st	X+, r19
     ddc:	f9 cf       	rjmp	.-14     	; 0xdd0 <twi_writeTo+0x30>
     dde:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <twi_slarw>
     de2:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <twi_slarw>
     de6:	88 0f       	add	r24, r24
     de8:	83 2b       	or	r24, r19
     dea:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <twi_slarw>
     dee:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <twi_inRepStart>
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	61 f4       	brne	.+24     	; 0xe0e <twi_writeTo+0x6e>
     df6:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <twi_inRepStart>
     dfa:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <twi_slarw>
     dfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e02:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e06:	83 fd       	sbrc	r24, 3
     e08:	f8 cf       	rjmp	.-16     	; 0xdfa <twi_writeTo+0x5a>
     e0a:	85 ec       	ldi	r24, 0xC5	; 197
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <twi_writeTo+0x70>
     e0e:	85 ee       	ldi	r24, 0xE5	; 229
     e10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e14:	22 23       	and	r18, r18
     e16:	21 f0       	breq	.+8      	; 0xe20 <twi_writeTo+0x80>
     e18:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <twi_state>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	d1 f3       	breq	.-12     	; 0xe14 <twi_writeTo+0x74>
     e20:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <twi_error>
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	79 f0       	breq	.+30     	; 0xe46 <twi_writeTo+0xa6>
     e28:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <twi_error>
     e2c:	80 32       	cpi	r24, 0x20	; 32
     e2e:	41 f0       	breq	.+16     	; 0xe40 <twi_writeTo+0xa0>
     e30:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <twi_error>
     e34:	80 33       	cpi	r24, 0x30	; 48
     e36:	31 f0       	breq	.+12     	; 0xe44 <twi_writeTo+0xa4>
     e38:	94 e0       	ldi	r25, 0x04	; 4
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <twi_writeTo+0xa6>
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <twi_writeTo+0xa6>
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <twi_writeTo+0xa6>
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	89 2f       	mov	r24, r25
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <twi_transmit>:
     e4c:	40 91 a9 04 	lds	r20, 0x04A9	; 0x8004a9 <twi_txBufferLength>
     e50:	26 2f       	mov	r18, r22
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	24 0f       	add	r18, r20
     e56:	31 1d       	adc	r19, r1
     e58:	21 32       	cpi	r18, 0x21	; 33
     e5a:	31 05       	cpc	r19, r1
     e5c:	dc f4       	brge	.+54     	; 0xe94 <twi_transmit+0x48>
     e5e:	20 91 f4 04 	lds	r18, 0x04F4	; 0x8004f4 <twi_state>
     e62:	24 30       	cpi	r18, 0x04	; 4
     e64:	c9 f4       	brne	.+50     	; 0xe98 <twi_transmit+0x4c>
     e66:	fc 01       	movw	r30, r24
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	86 17       	cp	r24, r22
     e6e:	58 f4       	brcc	.+22     	; 0xe86 <twi_transmit+0x3a>
     e70:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <twi_txBufferLength>
     e74:	21 91       	ld	r18, Z+
     e76:	dc 01       	movw	r26, r24
     e78:	a5 55       	subi	r26, 0x55	; 85
     e7a:	bb 4f       	sbci	r27, 0xFB	; 251
     e7c:	a3 0f       	add	r26, r19
     e7e:	b1 1d       	adc	r27, r1
     e80:	2c 93       	st	X, r18
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	f3 cf       	rjmp	.-26     	; 0xe6c <twi_transmit+0x20>
     e86:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <twi_txBufferLength>
     e8a:	68 0f       	add	r22, r24
     e8c:	60 93 a9 04 	sts	0x04A9, r22	; 0x8004a9 <twi_txBufferLength>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	08 95       	ret
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	08 95       	ret

00000e9c <twi_attachSlaveRxEvent>:
     e9c:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <twi_onSlaveReceive+0x1>
     ea0:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <twi_onSlaveReceive>
     ea4:	08 95       	ret

00000ea6 <twi_attachSlaveTxEvent>:
     ea6:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <twi_onSlaveTransmit+0x1>
     eaa:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <twi_onSlaveTransmit>
     eae:	08 95       	ret

00000eb0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     eb0:	85 ed       	ldi	r24, 0xD5	; 213
     eb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     eb6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     eba:	84 fd       	sbrc	r24, 4
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     ebe:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <twi_state>
     ec2:	08 95       	ret

00000ec4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     ec4:	85 ec       	ldi	r24, 0xC5	; 197
     ec6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
     eca:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <twi_state>
     ece:	08 95       	ret

00000ed0 <__vector_39>:
}

ISR(TWI_vect)
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	0b b6       	in	r0, 0x3b	; 59
     edc:	0f 92       	push	r0
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
  switch(TW_STATUS){
     ef6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     efa:	88 7f       	andi	r24, 0xF8	; 248
     efc:	80 36       	cpi	r24, 0x60	; 96
     efe:	09 f4       	brne	.+2      	; 0xf02 <__vector_39+0x32>
     f00:	9d c0       	rjmp	.+314    	; 0x103c <__vector_39+0x16c>
     f02:	70 f5       	brcc	.+92     	; 0xf60 <__vector_39+0x90>
     f04:	88 32       	cpi	r24, 0x28	; 40
     f06:	09 f4       	brne	.+2      	; 0xf0a <__vector_39+0x3a>
     f08:	5c c0       	rjmp	.+184    	; 0xfc2 <__vector_39+0xf2>
     f0a:	90 f4       	brcc	.+36     	; 0xf30 <__vector_39+0x60>
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__vector_39+0x42>
     f10:	55 c0       	rjmp	.+170    	; 0xfbc <__vector_39+0xec>
     f12:	38 f4       	brcc	.+14     	; 0xf22 <__vector_39+0x52>
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <__vector_39+0x4a>
     f18:	f3 c0       	rjmp	.+486    	; 0x1100 <__vector_39+0x230>
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	09 f4       	brne	.+2      	; 0xf20 <__vector_39+0x50>
     f1e:	4e c0       	rjmp	.+156    	; 0xfbc <__vector_39+0xec>
     f20:	f2 c0       	rjmp	.+484    	; 0x1106 <__vector_39+0x236>
     f22:	88 31       	cpi	r24, 0x18	; 24
     f24:	09 f4       	brne	.+2      	; 0xf28 <__vector_39+0x58>
     f26:	4d c0       	rjmp	.+154    	; 0xfc2 <__vector_39+0xf2>
     f28:	80 32       	cpi	r24, 0x20	; 32
     f2a:	09 f4       	brne	.+2      	; 0xf2e <__vector_39+0x5e>
     f2c:	5e c0       	rjmp	.+188    	; 0xfea <__vector_39+0x11a>
     f2e:	eb c0       	rjmp	.+470    	; 0x1106 <__vector_39+0x236>
     f30:	80 34       	cpi	r24, 0x40	; 64
     f32:	09 f4       	brne	.+2      	; 0xf36 <__vector_39+0x66>
     f34:	69 c0       	rjmp	.+210    	; 0x1008 <__vector_39+0x138>
     f36:	50 f4       	brcc	.+20     	; 0xf4c <__vector_39+0x7c>
     f38:	80 33       	cpi	r24, 0x30	; 48
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__vector_39+0x6e>
     f3c:	56 c0       	rjmp	.+172    	; 0xfea <__vector_39+0x11a>
     f3e:	88 33       	cpi	r24, 0x38	; 56
     f40:	09 f0       	breq	.+2      	; 0xf44 <__vector_39+0x74>
     f42:	e1 c0       	rjmp	.+450    	; 0x1106 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     f44:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <twi_error>
      twi_releaseBus();
     f48:	bd df       	rcall	.-134    	; 0xec4 <twi_releaseBus>
      break;
     f4a:	dd c0       	rjmp	.+442    	; 0x1106 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     f4c:	80 35       	cpi	r24, 0x50	; 80
     f4e:	09 f4       	brne	.+2      	; 0xf52 <__vector_39+0x82>
     f50:	4f c0       	rjmp	.+158    	; 0xff0 <__vector_39+0x120>
     f52:	88 35       	cpi	r24, 0x58	; 88
     f54:	09 f4       	brne	.+2      	; 0xf58 <__vector_39+0x88>
     f56:	5d c0       	rjmp	.+186    	; 0x1012 <__vector_39+0x142>
     f58:	88 34       	cpi	r24, 0x48	; 72
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__vector_39+0x8e>
     f5c:	d4 c0       	rjmp	.+424    	; 0x1106 <__vector_39+0x236>
     f5e:	d2 c0       	rjmp	.+420    	; 0x1104 <__vector_39+0x234>
     f60:	88 39       	cpi	r24, 0x98	; 152
     f62:	09 f4       	brne	.+2      	; 0xf66 <__vector_39+0x96>
     f64:	c3 c0       	rjmp	.+390    	; 0x10ec <__vector_39+0x21c>
     f66:	a8 f4       	brcc	.+42     	; 0xf92 <__vector_39+0xc2>
     f68:	88 37       	cpi	r24, 0x78	; 120
     f6a:	09 f4       	brne	.+2      	; 0xf6e <__vector_39+0x9e>
     f6c:	67 c0       	rjmp	.+206    	; 0x103c <__vector_39+0x16c>
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <__vector_39+0xae>
     f70:	88 36       	cpi	r24, 0x68	; 104
     f72:	09 f4       	brne	.+2      	; 0xf76 <__vector_39+0xa6>
     f74:	63 c0       	rjmp	.+198    	; 0x103c <__vector_39+0x16c>
     f76:	80 37       	cpi	r24, 0x70	; 112
     f78:	09 f4       	brne	.+2      	; 0xf7c <__vector_39+0xac>
     f7a:	60 c0       	rjmp	.+192    	; 0x103c <__vector_39+0x16c>
     f7c:	c4 c0       	rjmp	.+392    	; 0x1106 <__vector_39+0x236>
     f7e:	88 38       	cpi	r24, 0x88	; 136
     f80:	09 f4       	brne	.+2      	; 0xf84 <__vector_39+0xb4>
     f82:	b4 c0       	rjmp	.+360    	; 0x10ec <__vector_39+0x21c>
     f84:	80 39       	cpi	r24, 0x90	; 144
     f86:	09 f4       	brne	.+2      	; 0xf8a <__vector_39+0xba>
     f88:	5f c0       	rjmp	.+190    	; 0x1048 <__vector_39+0x178>
     f8a:	80 38       	cpi	r24, 0x80	; 128
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__vector_39+0xc0>
     f8e:	bb c0       	rjmp	.+374    	; 0x1106 <__vector_39+0x236>
     f90:	5b c0       	rjmp	.+182    	; 0x1048 <__vector_39+0x178>
     f92:	80 3b       	cpi	r24, 0xB0	; 176
     f94:	09 f4       	brne	.+2      	; 0xf98 <__vector_39+0xc8>
     f96:	82 c0       	rjmp	.+260    	; 0x109c <__vector_39+0x1cc>
     f98:	38 f4       	brcc	.+14     	; 0xfa8 <__vector_39+0xd8>
     f9a:	80 3a       	cpi	r24, 0xA0	; 160
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <__vector_39+0xd0>
     f9e:	66 c0       	rjmp	.+204    	; 0x106c <__vector_39+0x19c>
     fa0:	88 3a       	cpi	r24, 0xA8	; 168
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <__vector_39+0xd6>
     fa4:	7b c0       	rjmp	.+246    	; 0x109c <__vector_39+0x1cc>
     fa6:	af c0       	rjmp	.+350    	; 0x1106 <__vector_39+0x236>
     fa8:	80 3c       	cpi	r24, 0xC0	; 192
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_39+0xde>
     fac:	a3 c0       	rjmp	.+326    	; 0x10f4 <__vector_39+0x224>
     fae:	88 3c       	cpi	r24, 0xC8	; 200
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__vector_39+0xe4>
     fb2:	a0 c0       	rjmp	.+320    	; 0x10f4 <__vector_39+0x224>
     fb4:	88 3b       	cpi	r24, 0xB8	; 184
     fb6:	09 f4       	brne	.+2      	; 0xfba <__vector_39+0xea>
     fb8:	86 c0       	rjmp	.+268    	; 0x10c6 <__vector_39+0x1f6>
     fba:	a5 c0       	rjmp	.+330    	; 0x1106 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     fbc:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <twi_slarw>
     fc0:	10 c0       	rjmp	.+32     	; 0xfe2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     fc2:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
     fc6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <twi_masterBufferLength>
     fca:	98 17       	cp	r25, r24
     fcc:	70 f5       	brcc	.+92     	; 0x102a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     fce:	e0 91 cc 04 	lds	r30, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	8e 0f       	add	r24, r30
     fd6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <twi_masterBufferIndex>
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	e3 53       	subi	r30, 0x33	; 51
     fde:	fb 4f       	sbci	r31, 0xFB	; 251
     fe0:	80 81       	ld	r24, Z
     fe2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     fe6:	85 ec       	ldi	r24, 0xC5	; 197
     fe8:	82 c0       	rjmp	.+260    	; 0x10ee <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     fea:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <twi_error>
     fee:	8a c0       	rjmp	.+276    	; 0x1104 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     ff0:	e0 91 cc 04 	lds	r30, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	8e 0f       	add	r24, r30
     ff8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <twi_masterBufferIndex>
     ffc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	e3 53       	subi	r30, 0x33	; 51
    1004:	fb 4f       	sbci	r31, 0xFB	; 251
    1006:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1008:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
    100c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <twi_masterBufferLength>
    1010:	6a c0       	rjmp	.+212    	; 0x10e6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1012:	e0 91 cc 04 	lds	r30, 0x04CC	; 0x8004cc <twi_masterBufferIndex>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	8e 0f       	add	r24, r30
    101a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <twi_masterBufferIndex>
    101e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	e3 53       	subi	r30, 0x33	; 51
    1026:	fb 4f       	sbci	r31, 0xFB	; 251
    1028:	80 83       	st	Z, r24
	if (twi_sendStop)
    102a:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <twi_sendStop>
    102e:	81 11       	cpse	r24, r1
    1030:	69 c0       	rjmp	.+210    	; 0x1104 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1038:	84 ea       	ldi	r24, 0xA4	; 164
    103a:	5d c0       	rjmp	.+186    	; 0x10f6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1042:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_rxBufferIndex>
    1046:	cf cf       	rjmp	.-98     	; 0xfe6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1048:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_rxBufferIndex>
    104c:	80 32       	cpi	r24, 0x20	; 32
    104e:	08 f0       	brcs	.+2      	; 0x1052 <__vector_39+0x182>
    1050:	4d c0       	rjmp	.+154    	; 0x10ec <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1052:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <twi_rxBufferIndex>
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	8e 0f       	add	r24, r30
    105a:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <twi_rxBufferIndex>
    105e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	e7 57       	subi	r30, 0x77	; 119
    1066:	fb 4f       	sbci	r31, 0xFB	; 251
    1068:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    106a:	bd cf       	rjmp	.-134    	; 0xfe6 <__vector_39+0x116>
    106c:	2b df       	rcall	.-426    	; 0xec4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    106e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_rxBufferIndex>
    1072:	80 32       	cpi	r24, 0x20	; 32
    1074:	30 f4       	brcc	.+12     	; 0x1082 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1076:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <twi_rxBufferIndex>
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	e7 57       	subi	r30, 0x77	; 119
    107e:	fb 4f       	sbci	r31, 0xFB	; 251
    1080:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1082:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <twi_rxBufferIndex>
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <twi_onSlaveReceive>
    108c:	f0 91 ee 04 	lds	r31, 0x04EE	; 0x8004ee <twi_onSlaveReceive+0x1>
    1090:	89 e8       	ldi	r24, 0x89	; 137
    1092:	94 e0       	ldi	r25, 0x04	; 4
    1094:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1096:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_rxBufferIndex>
      break;
    109a:	35 c0       	rjmp	.+106    	; 0x1106 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    10a2:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    10a6:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    10aa:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <twi_onSlaveTransmit>
    10ae:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <twi_onSlaveTransmit+0x1>
    10b2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    10b4:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <twi_txBufferLength>
    10b8:	81 11       	cpse	r24, r1
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    10c2:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    10c6:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <twi_txBufferIndex>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	8e 0f       	add	r24, r30
    10ce:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <twi_txBufferIndex>
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	e5 55       	subi	r30, 0x55	; 85
    10d6:	fb 4f       	sbci	r31, 0xFB	; 251
    10d8:	80 81       	ld	r24, Z
    10da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    10de:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <twi_txBufferIndex>
    10e2:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <twi_txBufferLength>
    10e6:	98 17       	cp	r25, r24
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <__vector_39+0x21c>
    10ea:	7d cf       	rjmp	.-262    	; 0xfe6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    10ec:	85 e8       	ldi	r24, 0x85	; 133
    10ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    10f2:	09 c0       	rjmp	.+18     	; 0x1106 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    10f4:	85 ec       	ldi	r24, 0xC5	; 197
    10f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    10fa:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <twi_state>
      break;
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1100:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <twi_error>
      twi_stop();
    1104:	d5 de       	rcall	.-598    	; 0xeb0 <twi_stop>
      break;
  }
}
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    112c:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    1136:	82 1b       	sub	r24, r18
    1138:	91 09       	sbc	r25, r1
    113a:	08 95       	ret

0000113c <_ZN7TwoWire4readEv>:
    113c:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    1140:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    1144:	98 17       	cp	r25, r24
    1146:	50 f4       	brcc	.+20     	; 0x115c <_ZN7TwoWire4readEv+0x20>
    1148:	e9 2f       	mov	r30, r25
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	e5 5d       	subi	r30, 0xD5	; 213
    114e:	fa 4f       	sbci	r31, 0xFA	; 250
    1150:	20 81       	ld	r18, Z
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	9f 5f       	subi	r25, 0xFF	; 255
    1156:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <_ZN7TwoWire4readEv+0x24>
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	c9 01       	movw	r24, r18
    1162:	08 95       	ret

00001164 <_ZN7TwoWire4peekEv>:
    1164:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    1168:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    116c:	e8 17       	cp	r30, r24
    116e:	30 f4       	brcc	.+12     	; 0x117c <_ZN7TwoWire4peekEv+0x18>
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	e5 5d       	subi	r30, 0xD5	; 213
    1174:	fa 4f       	sbci	r31, 0xFA	; 250
    1176:	80 81       	ld	r24, Z
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	08 95       	ret
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	08 95       	ret

00001182 <_ZN7TwoWire5flushEv>:
    1182:	08 95       	ret

00001184 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ec 01       	movw	r28, r24
    118a:	e0 91 01 05 	lds	r30, 0x0501	; 0x800501 <_ZN7TwoWire14user_onReceiveE>
    118e:	f0 91 02 05 	lds	r31, 0x0502	; 0x800502 <_ZN7TwoWire14user_onReceiveE+0x1>
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	f1 f0       	breq	.+60     	; 0x11d2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1196:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    119a:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    119e:	98 17       	cp	r25, r24
    11a0:	c0 f0       	brcs	.+48     	; 0x11d2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	29 2f       	mov	r18, r25
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	26 17       	cp	r18, r22
    11aa:	37 07       	cpc	r19, r23
    11ac:	54 f4       	brge	.+20     	; 0x11c2 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    11ae:	de 01       	movw	r26, r28
    11b0:	a2 0f       	add	r26, r18
    11b2:	b3 1f       	adc	r27, r19
    11b4:	4c 91       	ld	r20, X
    11b6:	d9 01       	movw	r26, r18
    11b8:	a5 5d       	subi	r26, 0xD5	; 213
    11ba:	ba 4f       	sbci	r27, 0xFA	; 250
    11bc:	4c 93       	st	X, r20
    11be:	9f 5f       	subi	r25, 0xFF	; 255
    11c0:	f1 cf       	rjmp	.-30     	; 0x11a4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    11c2:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    11c6:	60 93 29 05 	sts	0x0529, r22	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    11ca:	cb 01       	movw	r24, r22
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	19 94       	eijmp
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <_ZN7TwoWire16onRequestServiceEv>:
    11d8:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <_ZN7TwoWire14user_onRequestE>
    11dc:	f0 91 04 05 	lds	r31, 0x0504	; 0x800504 <_ZN7TwoWire14user_onRequestE+0x1>
    11e0:	30 97       	sbiw	r30, 0x00	; 0
    11e2:	29 f0       	breq	.+10     	; 0x11ee <_ZN7TwoWire16onRequestServiceEv+0x16>
    11e4:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <_ZN7TwoWire13txBufferIndexE>
    11e8:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    11ec:	19 94       	eijmp
    11ee:	08 95       	ret

000011f0 <_ZN7TwoWire5writeEPKhj>:
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	7c 01       	movw	r14, r24
    1202:	cb 01       	movw	r24, r22
    1204:	8a 01       	movw	r16, r20
    1206:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <_ZN7TwoWire12transmittingE>
    120a:	22 23       	and	r18, r18
    120c:	89 f0       	breq	.+34     	; 0x1230 <_ZN7TwoWire5writeEPKhj+0x40>
    120e:	eb 01       	movw	r28, r22
    1210:	6b 01       	movw	r12, r22
    1212:	c4 0e       	add	r12, r20
    1214:	d5 1e       	adc	r13, r21
    1216:	cc 15       	cp	r28, r12
    1218:	dd 05       	cpc	r29, r13
    121a:	61 f0       	breq	.+24     	; 0x1234 <_ZN7TwoWire5writeEPKhj+0x44>
    121c:	69 91       	ld	r22, Y+
    121e:	d7 01       	movw	r26, r14
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	01 90       	ld	r0, Z+
    1226:	f0 81       	ld	r31, Z
    1228:	e0 2d       	mov	r30, r0
    122a:	c7 01       	movw	r24, r14
    122c:	19 95       	eicall
    122e:	f3 cf       	rjmp	.-26     	; 0x1216 <_ZN7TwoWire5writeEPKhj+0x26>
    1230:	64 2f       	mov	r22, r20
    1232:	0c de       	rcall	.-1000   	; 0xe4c <twi_transmit>
    1234:	c8 01       	movw	r24, r16
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	08 95       	ret

00001248 <_ZN7TwoWire5writeEh>:
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	1f 92       	push	r1
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	69 83       	std	Y+1, r22	; 0x01
    1254:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <_ZN7TwoWire12transmittingE>
    1258:	22 23       	and	r18, r18
    125a:	d1 f0       	breq	.+52     	; 0x1290 <_ZN7TwoWire5writeEh+0x48>
    125c:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    1260:	20 32       	cpi	r18, 0x20	; 32
    1262:	40 f0       	brcs	.+16     	; 0x1274 <_ZN7TwoWire5writeEh+0x2c>
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	33 83       	std	Z+3, r19	; 0x03
    126c:	22 83       	std	Z+2, r18	; 0x02
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	14 c0       	rjmp	.+40     	; 0x129c <_ZN7TwoWire5writeEh+0x54>
    1274:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZN7TwoWire13txBufferIndexE>
    1278:	e8 2f       	mov	r30, r24
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	e8 5f       	subi	r30, 0xF8	; 248
    127e:	fa 4f       	sbci	r31, 0xFA	; 250
    1280:	99 81       	ldd	r25, Y+1	; 0x01
    1282:	90 83       	st	Z, r25
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <_ZN7TwoWire13txBufferIndexE>
    128a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <_ZN7TwoWire5writeEh+0x50>
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	da dd       	rcall	.-1100   	; 0xe4c <twi_transmit>
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0f 90       	pop	r0
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <_ZN7TwoWireC1Ev>:
    12a4:	fc 01       	movw	r30, r24
    12a6:	13 82       	std	Z+3, r1	; 0x03
    12a8:	12 82       	std	Z+2, r1	; 0x02
    12aa:	88 ee       	ldi	r24, 0xE8	; 232
    12ac:	93 e0       	ldi	r25, 0x03	; 3
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	84 83       	std	Z+4, r24	; 0x04
    12b4:	95 83       	std	Z+5, r25	; 0x05
    12b6:	a6 83       	std	Z+6, r26	; 0x06
    12b8:	b7 83       	std	Z+7, r27	; 0x07
    12ba:	8d e2       	ldi	r24, 0x2D	; 45
    12bc:	93 e0       	ldi	r25, 0x03	; 3
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
    12c2:	08 95       	ret

000012c4 <_ZN7TwoWire5beginEv>:
    12c4:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    12c8:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    12cc:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <_ZN7TwoWire13txBufferIndexE>
    12d0:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    12d4:	01 dd       	rcall	.-1534   	; 0xcd8 <twi_init>
    12d6:	8c ee       	ldi	r24, 0xEC	; 236
    12d8:	98 e0       	ldi	r25, 0x08	; 8
    12da:	e5 dd       	rcall	.-1078   	; 0xea6 <twi_attachSlaveTxEvent>
    12dc:	82 ec       	ldi	r24, 0xC2	; 194
    12de:	98 e0       	ldi	r25, 0x08	; 8
    12e0:	dd cd       	rjmp	.-1094   	; 0xe9c <twi_attachSlaveRxEvent>

000012e2 <_ZN7TwoWire17beginTransmissionEh>:
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZN7TwoWire12transmittingE>
    12e8:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <_ZN7TwoWire9txAddressE>
    12ec:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <_ZN7TwoWire13txBufferIndexE>
    12f0:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    12f4:	08 95       	ret

000012f6 <_ZN7TwoWire17beginTransmissionEi>:
    12f6:	f5 cf       	rjmp	.-22     	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>

000012f8 <_ZN7TwoWire15endTransmissionEh>:
    12f8:	0f 93       	push	r16
    12fa:	06 2f       	mov	r16, r22
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	40 91 06 05 	lds	r20, 0x0506	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    1302:	68 e0       	ldi	r22, 0x08	; 8
    1304:	75 e0       	ldi	r23, 0x05	; 5
    1306:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN7TwoWire9txAddressE>
    130a:	4a dd       	rcall	.-1388   	; 0xda0 <twi_writeTo>
    130c:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <_ZN7TwoWire13txBufferIndexE>
    1310:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <_ZN7TwoWire14txBufferLengthE>
    1314:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZN7TwoWire12transmittingE>
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <_ZN7TwoWire11requestFromEhhmhh>:
    131c:	4f 92       	push	r4
    131e:	5f 92       	push	r5
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	5c 01       	movw	r10, r24
    1338:	f6 2e       	mov	r15, r22
    133a:	d4 2f       	mov	r29, r20
    133c:	28 01       	movw	r4, r16
    133e:	39 01       	movw	r6, r18
    1340:	ee 20       	and	r14, r14
    1342:	11 f1       	breq	.+68     	; 0x1388 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    1344:	ce df       	rcall	.-100    	; 0x12e2 <_ZN7TwoWire17beginTransmissionEh>
    1346:	ce 2d       	mov	r28, r14
    1348:	c4 30       	cpi	r28, 0x04	; 4
    134a:	08 f0       	brcs	.+2      	; 0x134e <_ZN7TwoWire11requestFromEhhmhh+0x32>
    134c:	c3 e0       	ldi	r28, 0x03	; 3
    134e:	c1 50       	subi	r28, 0x01	; 1
    1350:	c0 f0       	brcs	.+48     	; 0x1382 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    1352:	28 e0       	ldi	r18, 0x08	; 8
    1354:	c2 9f       	mul	r28, r18
    1356:	c0 01       	movw	r24, r0
    1358:	11 24       	eor	r1, r1
    135a:	a3 01       	movw	r20, r6
    135c:	92 01       	movw	r18, r4
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    1360:	56 95       	lsr	r21
    1362:	47 95       	ror	r20
    1364:	37 95       	ror	r19
    1366:	27 95       	ror	r18
    1368:	8a 95       	dec	r24
    136a:	d2 f7       	brpl	.-12     	; 0x1360 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    136c:	ca 01       	movw	r24, r20
    136e:	b9 01       	movw	r22, r18
    1370:	d5 01       	movw	r26, r10
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	01 90       	ld	r0, Z+
    1378:	f0 81       	ld	r31, Z
    137a:	e0 2d       	mov	r30, r0
    137c:	c5 01       	movw	r24, r10
    137e:	19 95       	eicall
    1380:	e6 cf       	rjmp	.-52     	; 0x134e <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	c5 01       	movw	r24, r10
    1386:	b8 df       	rcall	.-144    	; 0x12f8 <_ZN7TwoWire15endTransmissionEh>
    1388:	4d 2f       	mov	r20, r29
    138a:	d1 32       	cpi	r29, 0x21	; 33
    138c:	08 f0       	brcs	.+2      	; 0x1390 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	2c 2d       	mov	r18, r12
    1392:	6b e2       	ldi	r22, 0x2B	; 43
    1394:	75 e0       	ldi	r23, 0x05	; 5
    1396:	8f 2d       	mov	r24, r15
    1398:	bb dc       	rcall	.-1674   	; 0xd10 <twi_readFrom>
    139a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <_ZN7TwoWire13rxBufferIndexE>
    139e:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZN7TwoWire14rxBufferLengthE>
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	cf 90       	pop	r12
    13b0:	bf 90       	pop	r11
    13b2:	af 90       	pop	r10
    13b4:	7f 90       	pop	r7
    13b6:	6f 90       	pop	r6
    13b8:	5f 90       	pop	r5
    13ba:	4f 90       	pop	r4
    13bc:	08 95       	ret

000013be <_ZN7TwoWire11requestFromEhhh>:
    13be:	cf 92       	push	r12
    13c0:	ef 92       	push	r14
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	c2 2e       	mov	r12, r18
    13c8:	e1 2c       	mov	r14, r1
    13ca:	00 e0       	ldi	r16, 0x00	; 0
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	98 01       	movw	r18, r16
    13d0:	a5 df       	rcall	.-182    	; 0x131c <_ZN7TwoWire11requestFromEhhmhh>
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ef 90       	pop	r14
    13d8:	cf 90       	pop	r12
    13da:	08 95       	ret

000013dc <_ZN7TwoWire11requestFromEhh>:
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	ef cf       	rjmp	.-34     	; 0x13be <_ZN7TwoWire11requestFromEhhh>

000013e0 <_ZN7TwoWire15endTransmissionEv>:
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	8a cf       	rjmp	.-236    	; 0x12f8 <_ZN7TwoWire15endTransmissionEh>

000013e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    13e4:	85 ef       	ldi	r24, 0xF5	; 245
    13e6:	94 e0       	ldi	r25, 0x04	; 4
    13e8:	5d cf       	rjmp	.-326    	; 0x12a4 <_ZN7TwoWireC1Ev>

000013ea <_ZN20TempHumidPressSensorC1Ev>:
	sensordata.h = humidity;
	sensordata.p = pressure;
	sensordata.a = altitude;
	
	return sensordata;
    13ea:	08 95       	ret

000013ec <_ZN20TempHumidPressSensorD1Ev>:
    13ec:	08 95       	ret

000013ee <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>:
    13ee:	8b e4       	ldi	r24, 0x4B	; 75
    13f0:	95 e0       	ldi	r25, 0x05	; 5
    13f2:	bd da       	rcall	.-2694   	; 0x96e <_ZN15Adafruit_BME2805beginEv>
    13f4:	81 11       	cpse	r24, r1
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x16>
    13f8:	6b e3       	ldi	r22, 0x3B	; 59
    13fa:	73 e0       	ldi	r23, 0x03	; 3
    13fc:	8e e7       	ldi	r24, 0x7E	; 126
    13fe:	95 e0       	ldi	r25, 0x05	; 5
    1400:	5a d2       	rcall	.+1204   	; 0x18b6 <_ZN5Print7printlnEPKc>
    1402:	ff cf       	rjmp	.-2      	; 0x1402 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x14>
    1404:	66 e9       	ldi	r22, 0x96	; 150
    1406:	73 e0       	ldi	r23, 0x03	; 3
    1408:	8e e7       	ldi	r24, 0x7E	; 126
    140a:	95 e0       	ldi	r25, 0x05	; 5
    140c:	54 c2       	rjmp	.+1192   	; 0x18b6 <_ZN5Print7printlnEPKc>

0000140e <_GLOBAL__sub_I_bme280>:
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;
    140e:	8b e4       	ldi	r24, 0x4B	; 75
    1410:	95 e0       	ldi	r25, 0x05	; 5
    1412:	2c c8       	rjmp	.-4008   	; 0x46c <_ZN15Adafruit_BME280C1Ev>

00001414 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1414:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1416:	91 8d       	ldd	r25, Z+25	; 0x19
    1418:	22 8d       	ldd	r18, Z+26	; 0x1a
    141a:	89 2f       	mov	r24, r25
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	80 5c       	subi	r24, 0xC0	; 192
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	82 1b       	sub	r24, r18
    1424:	91 09       	sbc	r25, r1
}
    1426:	8f 73       	andi	r24, 0x3F	; 63
    1428:	99 27       	eor	r25, r25
    142a:	08 95       	ret

0000142c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    142c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    142e:	91 8d       	ldd	r25, Z+25	; 0x19
    1430:	82 8d       	ldd	r24, Z+26	; 0x1a
    1432:	98 17       	cp	r25, r24
    1434:	31 f0       	breq	.+12     	; 0x1442 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1436:	82 8d       	ldd	r24, Z+26	; 0x1a
    1438:	e8 0f       	add	r30, r24
    143a:	f1 1d       	adc	r31, r1
    143c:	85 8d       	ldd	r24, Z+29	; 0x1d
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1446:	08 95       	ret

00001448 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1448:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    144a:	91 8d       	ldd	r25, Z+25	; 0x19
    144c:	82 8d       	ldd	r24, Z+26	; 0x1a
    144e:	98 17       	cp	r25, r24
    1450:	61 f0       	breq	.+24     	; 0x146a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1452:	82 8d       	ldd	r24, Z+26	; 0x1a
    1454:	df 01       	movw	r26, r30
    1456:	a8 0f       	add	r26, r24
    1458:	b1 1d       	adc	r27, r1
    145a:	5d 96       	adiw	r26, 0x1d	; 29
    145c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    145e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	9f 73       	andi	r25, 0x3F	; 63
    1464:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    146e:	08 95       	ret

00001470 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1470:	fc 01       	movw	r30, r24
    1472:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1474:	44 8d       	ldd	r20, Z+28	; 0x1c
    1476:	25 2f       	mov	r18, r21
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	84 2f       	mov	r24, r20
    147c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    147e:	82 1b       	sub	r24, r18
    1480:	93 0b       	sbc	r25, r19
    1482:	54 17       	cp	r21, r20
    1484:	10 f0       	brcs	.+4      	; 0x148a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1486:	cf 96       	adiw	r24, 0x3f	; 63
    1488:	08 95       	ret
  return tail - head - 1;
    148a:	01 97       	sbiw	r24, 0x01	; 1
}
    148c:	08 95       	ret

0000148e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    148e:	86 ed       	ldi	r24, 0xD6	; 214
    1490:	9b e0       	ldi	r25, 0x0B	; 11
    1492:	89 2b       	or	r24, r25
    1494:	39 f0       	breq	.+14     	; 0x14a4 <_Z14serialEventRunv+0x16>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	89 2b       	or	r24, r25
    149c:	19 f0       	breq	.+6      	; 0x14a4 <_Z14serialEventRunv+0x16>
    149e:	86 d1       	rcall	.+780    	; 0x17ac <_Z17Serial0_availablev>
    14a0:	81 11       	cpse	r24, r1
    14a2:	25 c0       	rjmp	.+74     	; 0x14ee <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	89 2b       	or	r24, r25
    14aa:	41 f0       	breq	.+16     	; 0x14bc <_Z14serialEventRunv+0x2e>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	89 2b       	or	r24, r25
    14b2:	21 f0       	breq	.+8      	; 0x14bc <_Z14serialEventRunv+0x2e>
    14b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14b8:	81 11       	cpse	r24, r1
    14ba:	1c c0       	rjmp	.+56     	; 0x14f4 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	89 2b       	or	r24, r25
    14c2:	41 f0       	breq	.+16     	; 0x14d4 <_Z14serialEventRunv+0x46>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	89 2b       	or	r24, r25
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <_Z14serialEventRunv+0x46>
    14cc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14d0:	81 11       	cpse	r24, r1
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	89 2b       	or	r24, r25
    14da:	a1 f0       	breq	.+40     	; 0x1504 <_Z14serialEventRunv+0x76>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	89 2b       	or	r24, r25
    14e2:	81 f0       	breq	.+32     	; 0x1504 <_Z14serialEventRunv+0x76>
    14e4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14e8:	81 11       	cpse	r24, r1
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <_Z14serialEventRunv+0x72>
    14ec:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    14ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14f2:	d8 cf       	rjmp	.-80     	; 0x14a4 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    14f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14f8:	e1 cf       	rjmp	.-62     	; 0x14bc <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    14fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14fe:	ea cf       	rjmp	.-44     	; 0x14d4 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1500:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1504:	08 95       	ret

00001506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1506:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1508:	84 8d       	ldd	r24, Z+28	; 0x1c
    150a:	df 01       	movw	r26, r30
    150c:	a8 0f       	add	r26, r24
    150e:	b1 1d       	adc	r27, r1
    1510:	a3 5a       	subi	r26, 0xA3	; 163
    1512:	bf 4f       	sbci	r27, 0xFF	; 255
    1514:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1516:	84 8d       	ldd	r24, Z+28	; 0x1c
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	8f 73       	andi	r24, 0x3F	; 63
    151e:	99 27       	eor	r25, r25
    1520:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1522:	a6 89       	ldd	r26, Z+22	; 0x16
    1524:	b7 89       	ldd	r27, Z+23	; 0x17
    1526:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1528:	a0 89       	ldd	r26, Z+16	; 0x10
    152a:	b1 89       	ldd	r27, Z+17	; 0x11
    152c:	8c 91       	ld	r24, X
    152e:	83 70       	andi	r24, 0x03	; 3
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1534:	93 8d       	ldd	r25, Z+27	; 0x1b
    1536:	84 8d       	ldd	r24, Z+28	; 0x1c
    1538:	98 13       	cpse	r25, r24
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    153c:	02 88       	ldd	r0, Z+18	; 0x12
    153e:	f3 89       	ldd	r31, Z+19	; 0x13
    1540:	e0 2d       	mov	r30, r0
    1542:	80 81       	ld	r24, Z
    1544:	8f 7d       	andi	r24, 0xDF	; 223
    1546:	80 83       	st	Z, r24
    1548:	08 95       	ret

0000154a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
  _written = true;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    155c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    155e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1560:	98 13       	cpse	r25, r24
    1562:	05 c0       	rjmp	.+10     	; 0x156e <_ZN14HardwareSerial5writeEh+0x24>
    1564:	e8 89       	ldd	r30, Y+16	; 0x10
    1566:	f9 89       	ldd	r31, Y+17	; 0x11
    1568:	80 81       	ld	r24, Z
    156a:	85 fd       	sbrc	r24, 5
    156c:	25 c0       	rjmp	.+74     	; 0x15b8 <_ZN14HardwareSerial5writeEh+0x6e>
    156e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1570:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	0f 5f       	subi	r16, 0xFF	; 255
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	0f 73       	andi	r16, 0x3F	; 63
    157a:	11 27       	eor	r17, r17
    157c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    157e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1580:	e8 12       	cpse	r14, r24
    1582:	0b c0       	rjmp	.+22     	; 0x159a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	07 fc       	sbrc	r0, 7
    1588:	fa cf       	rjmp	.-12     	; 0x157e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    158a:	e8 89       	ldd	r30, Y+16	; 0x10
    158c:	f9 89       	ldd	r31, Y+17	; 0x11
    158e:	80 81       	ld	r24, Z
    1590:	85 ff       	sbrs	r24, 5
    1592:	f5 cf       	rjmp	.-22     	; 0x157e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1594:	ce 01       	movw	r24, r28
    1596:	b7 df       	rcall	.-146    	; 0x1506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1598:	f2 cf       	rjmp	.-28     	; 0x157e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    159a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    159c:	fe 01       	movw	r30, r28
    159e:	e8 0f       	add	r30, r24
    15a0:	f1 1d       	adc	r31, r1
    15a2:	e3 5a       	subi	r30, 0xA3	; 163
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    15a8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15aa:	f8 94       	cli
    _tx_buffer_head = i;
    15ac:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    15ae:	ea 89       	ldd	r30, Y+18	; 0x12
    15b0:	fb 89       	ldd	r31, Y+19	; 0x13
    15b2:	80 81       	ld	r24, Z
    15b4:	80 62       	ori	r24, 0x20	; 32
    15b6:	0a c0       	rjmp	.+20     	; 0x15cc <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    15b8:	9f b7       	in	r25, 0x3f	; 63
    15ba:	f8 94       	cli
      *_udr = c;
    15bc:	ee 89       	ldd	r30, Y+22	; 0x16
    15be:	ff 89       	ldd	r31, Y+23	; 0x17
    15c0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    15c2:	e8 89       	ldd	r30, Y+16	; 0x10
    15c4:	f9 89       	ldd	r31, Y+17	; 0x11
    15c6:	80 81       	ld	r24, Z
    15c8:	83 70       	andi	r24, 0x03	; 3
    15ca:	80 64       	ori	r24, 0x40	; 64
    15cc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15ce:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ff 90       	pop	r15
    15de:	ef 90       	pop	r14
    15e0:	08 95       	ret

000015e2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    15e8:	88 8d       	ldd	r24, Y+24	; 0x18
    15ea:	88 23       	and	r24, r24
    15ec:	c1 f0       	breq	.+48     	; 0x161e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    15ee:	ea 89       	ldd	r30, Y+18	; 0x12
    15f0:	fb 89       	ldd	r31, Y+19	; 0x13
    15f2:	80 81       	ld	r24, Z
    15f4:	85 fd       	sbrc	r24, 5
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <_ZN14HardwareSerial5flushEv+0x20>
    15f8:	a8 89       	ldd	r26, Y+16	; 0x10
    15fa:	b9 89       	ldd	r27, Y+17	; 0x11
    15fc:	8c 91       	ld	r24, X
    15fe:	86 fd       	sbrc	r24, 6
    1600:	0e c0       	rjmp	.+28     	; 0x161e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	07 fc       	sbrc	r0, 7
    1606:	f5 cf       	rjmp	.-22     	; 0x15f2 <_ZN14HardwareSerial5flushEv+0x10>
    1608:	80 81       	ld	r24, Z
    160a:	85 ff       	sbrs	r24, 5
    160c:	f2 cf       	rjmp	.-28     	; 0x15f2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    160e:	a8 89       	ldd	r26, Y+16	; 0x10
    1610:	b9 89       	ldd	r27, Y+17	; 0x11
    1612:	8c 91       	ld	r24, X
    1614:	85 ff       	sbrs	r24, 5
    1616:	ed cf       	rjmp	.-38     	; 0x15f2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1618:	ce 01       	movw	r24, r28
    161a:	75 df       	rcall	.-278    	; 0x1506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    161c:	e8 cf       	rjmp	.-48     	; 0x15ee <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1624:	cf 92       	push	r12
    1626:	df 92       	push	r13
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ec 01       	movw	r28, r24
    1634:	6a 01       	movw	r12, r20
    1636:	7b 01       	movw	r14, r22
    1638:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    163a:	e8 89       	ldd	r30, Y+16	; 0x10
    163c:	f9 89       	ldd	r31, Y+17	; 0x11
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1642:	41 15       	cp	r20, r1
    1644:	51 4e       	sbci	r21, 0xE1	; 225
    1646:	61 05       	cpc	r22, r1
    1648:	71 05       	cpc	r23, r1
    164a:	b1 f0       	breq	.+44     	; 0x1678 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	79 e0       	ldi	r23, 0x09	; 9
    1650:	8d e3       	ldi	r24, 0x3D	; 61
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a7 01       	movw	r20, r14
    1656:	96 01       	movw	r18, r12
    1658:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    165c:	da 01       	movw	r26, r20
    165e:	c9 01       	movw	r24, r18
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	a1 09       	sbc	r26, r1
    1664:	b1 09       	sbc	r27, r1
    1666:	b6 95       	lsr	r27
    1668:	a7 95       	ror	r26
    166a:	97 95       	ror	r25
    166c:	87 95       	ror	r24
    166e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1670:	21 15       	cp	r18, r1
    1672:	80 e1       	ldi	r24, 0x10	; 16
    1674:	38 07       	cpc	r19, r24
    1676:	a8 f0       	brcs	.+42     	; 0x16a2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1678:	e8 89       	ldd	r30, Y+16	; 0x10
    167a:	f9 89       	ldd	r31, Y+17	; 0x11
    167c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    167e:	60 e8       	ldi	r22, 0x80	; 128
    1680:	74 e8       	ldi	r23, 0x84	; 132
    1682:	8e e1       	ldi	r24, 0x1E	; 30
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a7 01       	movw	r20, r14
    1688:	96 01       	movw	r18, r12
    168a:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    168e:	da 01       	movw	r26, r20
    1690:	c9 01       	movw	r24, r18
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	a1 09       	sbc	r26, r1
    1696:	b1 09       	sbc	r27, r1
    1698:	b6 95       	lsr	r27
    169a:	a7 95       	ror	r26
    169c:	97 95       	ror	r25
    169e:	87 95       	ror	r24
    16a0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    16a2:	ec 85       	ldd	r30, Y+12	; 0x0c
    16a4:	fd 85       	ldd	r31, Y+13	; 0x0d
    16a6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    16a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    16aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    16ac:	20 83       	st	Z, r18

  _written = false;
    16ae:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    16b0:	ec 89       	ldd	r30, Y+20	; 0x14
    16b2:	fd 89       	ldd	r31, Y+21	; 0x15
    16b4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    16b6:	ea 89       	ldd	r30, Y+18	; 0x12
    16b8:	fb 89       	ldd	r31, Y+19	; 0x13
    16ba:	80 81       	ld	r24, Z
    16bc:	80 61       	ori	r24, 0x10	; 16
    16be:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    16c0:	ea 89       	ldd	r30, Y+18	; 0x12
    16c2:	fb 89       	ldd	r31, Y+19	; 0x13
    16c4:	80 81       	ld	r24, Z
    16c6:	88 60       	ori	r24, 0x08	; 8
    16c8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    16ca:	ea 89       	ldd	r30, Y+18	; 0x12
    16cc:	fb 89       	ldd	r31, Y+19	; 0x13
    16ce:	80 81       	ld	r24, Z
    16d0:	80 68       	ori	r24, 0x80	; 128
    16d2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    16d4:	ea 89       	ldd	r30, Y+18	; 0x12
    16d6:	fb 89       	ldd	r31, Y+19	; 0x13
    16d8:	80 81       	ld	r24, Z
    16da:	8f 7d       	andi	r24, 0xDF	; 223
    16dc:	80 83       	st	Z, r24
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	08 95       	ret

000016ee <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	0b b6       	in	r0, 0x3b	; 59
    16fa:	0f 92       	push	r0
    16fc:	2f 93       	push	r18
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1706:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <Serial+0x10>
    170a:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <Serial+0x11>
    170e:	80 81       	ld	r24, Z
    1710:	e0 91 94 05 	lds	r30, 0x0594	; 0x800594 <Serial+0x16>
    1714:	f0 91 95 05 	lds	r31, 0x0595	; 0x800595 <Serial+0x17>
    1718:	82 fd       	sbrc	r24, 2
    171a:	12 c0       	rjmp	.+36     	; 0x1740 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    171c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    171e:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <Serial+0x19>
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1726:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <Serial+0x1a>
    172a:	82 17       	cp	r24, r18
    172c:	51 f0       	breq	.+20     	; 0x1742 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    172e:	e0 91 97 05 	lds	r30, 0x0597	; 0x800597 <Serial+0x19>
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	e2 58       	subi	r30, 0x82	; 130
    1736:	fa 4f       	sbci	r31, 0xFA	; 250
    1738:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    173a:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <Serial+0x19>
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1740:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0b be       	out	0x3b, r0	; 59
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0
    1756:	1f 90       	pop	r1
    1758:	18 95       	reti

0000175a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    175a:	1f 92       	push	r1
    175c:	0f 92       	push	r0
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	0b b6       	in	r0, 0x3b	; 59
    1766:	0f 92       	push	r0
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1780:	8e e7       	ldi	r24, 0x7E	; 126
    1782:	95 e0       	ldi	r25, 0x05	; 5
    1784:	c0 de       	rcall	.-640    	; 0x1506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0b be       	out	0x3b, r0	; 59
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    17ac:	8e e7       	ldi	r24, 0x7E	; 126
    17ae:	95 e0       	ldi	r25, 0x05	; 5
    17b0:	31 de       	rcall	.-926    	; 0x1414 <_ZN14HardwareSerial9availableEv>
    17b2:	21 e0       	ldi	r18, 0x01	; 1
    17b4:	89 2b       	or	r24, r25
    17b6:	09 f4       	brne	.+2      	; 0x17ba <_Z17Serial0_availablev+0xe>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
}
    17ba:	82 2f       	mov	r24, r18
    17bc:	08 95       	ret

000017be <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    17be:	ee e7       	ldi	r30, 0x7E	; 126
    17c0:	f5 e0       	ldi	r31, 0x05	; 5
    17c2:	13 82       	std	Z+3, r1	; 0x03
    17c4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    17c6:	88 ee       	ldi	r24, 0xE8	; 232
    17c8:	93 e0       	ldi	r25, 0x03	; 3
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	84 83       	std	Z+4, r24	; 0x04
    17d0:	95 83       	std	Z+5, r25	; 0x05
    17d2:	a6 83       	std	Z+6, r26	; 0x06
    17d4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    17d6:	8b eb       	ldi	r24, 0xBB	; 187
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	80 83       	st	Z, r24
    17de:	85 ec       	ldi	r24, 0xC5	; 197
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	95 87       	std	Z+13, r25	; 0x0d
    17e4:	84 87       	std	Z+12, r24	; 0x0c
    17e6:	84 ec       	ldi	r24, 0xC4	; 196
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	97 87       	std	Z+15, r25	; 0x0f
    17ec:	86 87       	std	Z+14, r24	; 0x0e
    17ee:	80 ec       	ldi	r24, 0xC0	; 192
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	91 8b       	std	Z+17, r25	; 0x11
    17f4:	80 8b       	std	Z+16, r24	; 0x10
    17f6:	81 ec       	ldi	r24, 0xC1	; 193
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	93 8b       	std	Z+19, r25	; 0x13
    17fc:	82 8b       	std	Z+18, r24	; 0x12
    17fe:	82 ec       	ldi	r24, 0xC2	; 194
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	95 8b       	std	Z+21, r25	; 0x15
    1804:	84 8b       	std	Z+20, r24	; 0x14
    1806:	86 ec       	ldi	r24, 0xC6	; 198
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	97 8b       	std	Z+23, r25	; 0x17
    180c:	86 8b       	std	Z+22, r24	; 0x16
    180e:	11 8e       	std	Z+25, r1	; 0x19
    1810:	12 8e       	std	Z+26, r1	; 0x1a
    1812:	13 8e       	std	Z+27, r1	; 0x1b
    1814:	14 8e       	std	Z+28, r1	; 0x1c
    1816:	08 95       	ret

00001818 <initVariant>:
    1818:	08 95       	ret

0000181a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    181a:	12 d1       	rcall	.+548    	; 0x1a40 <init>

	initVariant();
    181c:	fd df       	rcall	.-6      	; 0x1818 <initVariant>
    181e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1822:	c7 e4       	ldi	r28, 0x47	; 71
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1824:	da e0       	ldi	r29, 0x0A	; 10
    1826:	0e 94 7f 01 	call	0x2fe	; 0x2fe <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    182a:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    182c:	e1 f3       	breq	.-8      	; 0x1826 <main+0xc>
    182e:	2f de       	rcall	.-930    	; 0x148e <_Z14serialEventRunv>
    1830:	fa cf       	rjmp	.-12     	; 0x1826 <main+0xc>

00001832 <_ZN5Print5writeEPKhj>:
    1832:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	6c 01       	movw	r12, r24
    1844:	7a 01       	movw	r14, r20
    1846:	8b 01       	movw	r16, r22
    1848:	c0 e0       	ldi	r28, 0x00	; 0
    184a:	d0 e0       	ldi	r29, 0x00	; 0
    184c:	ce 15       	cp	r28, r14
    184e:	df 05       	cpc	r29, r15
    1850:	81 f0       	breq	.+32     	; 0x1872 <_ZN5Print5writeEPKhj+0x40>
    1852:	d8 01       	movw	r26, r16
    1854:	6d 91       	ld	r22, X+
    1856:	8d 01       	movw	r16, r26
    1858:	d6 01       	movw	r26, r12
    185a:	ed 91       	ld	r30, X+
    185c:	fc 91       	ld	r31, X
    185e:	01 90       	ld	r0, Z+
    1860:	f0 81       	ld	r31, Z
    1862:	e0 2d       	mov	r30, r0
    1864:	c6 01       	movw	r24, r12
    1866:	19 95       	eicall
    1868:	89 2b       	or	r24, r25
    186a:	11 f0       	breq	.+4      	; 0x1870 <_ZN5Print5writeEPKhj+0x3e>
    186c:	21 96       	adiw	r28, 0x01	; 1
    186e:	ee cf       	rjmp	.-36     	; 0x184c <_ZN5Print5writeEPKhj+0x1a>
    1870:	7e 01       	movw	r14, r28
    1872:	c7 01       	movw	r24, r14
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	08 95       	ret

00001886 <_ZN5Print5writeEPKc>:
    1886:	61 15       	cp	r22, r1
    1888:	71 05       	cpc	r23, r1
    188a:	79 f0       	breq	.+30     	; 0x18aa <_ZN5Print5writeEPKc+0x24>
    188c:	fb 01       	movw	r30, r22
    188e:	01 90       	ld	r0, Z+
    1890:	00 20       	and	r0, r0
    1892:	e9 f7       	brne	.-6      	; 0x188e <_ZN5Print5writeEPKc+0x8>
    1894:	31 97       	sbiw	r30, 0x01	; 1
    1896:	af 01       	movw	r20, r30
    1898:	46 1b       	sub	r20, r22
    189a:	57 0b       	sbc	r21, r23
    189c:	dc 01       	movw	r26, r24
    189e:	ed 91       	ld	r30, X+
    18a0:	fc 91       	ld	r31, X
    18a2:	02 80       	ldd	r0, Z+2	; 0x02
    18a4:	f3 81       	ldd	r31, Z+3	; 0x03
    18a6:	e0 2d       	mov	r30, r0
    18a8:	19 94       	eijmp
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	08 95       	ret

000018b0 <_ZN5Print7printlnEv>:
    18b0:	69 ec       	ldi	r22, 0xC9	; 201
    18b2:	73 e0       	ldi	r23, 0x03	; 3
    18b4:	e8 cf       	rjmp	.-48     	; 0x1886 <_ZN5Print5writeEPKc>

000018b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    18c0:	e2 df       	rcall	.-60     	; 0x1886 <_ZN5Print5writeEPKc>
    18c2:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    18c4:	ce 01       	movw	r24, r28
    18c6:	f4 df       	rcall	.-24     	; 0x18b0 <_ZN5Print7printlnEv>
  return n;
}
    18c8:	80 0f       	add	r24, r16
    18ca:	91 1f       	adc	r25, r17
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	8f 93       	push	r24
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	bf 93       	push	r27
    18ec:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <timer0_millis>
    18f0:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <timer0_millis+0x1>
    18f4:	a0 91 1e 06 	lds	r26, 0x061E	; 0x80061e <timer0_millis+0x2>
    18f8:	b0 91 1f 06 	lds	r27, 0x061F	; 0x80061f <timer0_millis+0x3>
    18fc:	30 91 1b 06 	lds	r19, 0x061B	; 0x80061b <timer0_fract>
    1900:	23 e0       	ldi	r18, 0x03	; 3
    1902:	23 0f       	add	r18, r19
    1904:	2d 37       	cpi	r18, 0x7D	; 125
    1906:	20 f4       	brcc	.+8      	; 0x1910 <__vector_23+0x3a>
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	a1 1d       	adc	r26, r1
    190c:	b1 1d       	adc	r27, r1
    190e:	05 c0       	rjmp	.+10     	; 0x191a <__vector_23+0x44>
    1910:	26 e8       	ldi	r18, 0x86	; 134
    1912:	23 0f       	add	r18, r19
    1914:	02 96       	adiw	r24, 0x02	; 2
    1916:	a1 1d       	adc	r26, r1
    1918:	b1 1d       	adc	r27, r1
    191a:	20 93 1b 06 	sts	0x061B, r18	; 0x80061b <timer0_fract>
    191e:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <timer0_millis>
    1922:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <timer0_millis+0x1>
    1926:	a0 93 1e 06 	sts	0x061E, r26	; 0x80061e <timer0_millis+0x2>
    192a:	b0 93 1f 06 	sts	0x061F, r27	; 0x80061f <timer0_millis+0x3>
    192e:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <timer0_overflow_count>
    1932:	90 91 21 06 	lds	r25, 0x0621	; 0x800621 <timer0_overflow_count+0x1>
    1936:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <timer0_overflow_count+0x2>
    193a:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <timer0_overflow_count+0x3>
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	a1 1d       	adc	r26, r1
    1942:	b1 1d       	adc	r27, r1
    1944:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <timer0_overflow_count>
    1948:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <timer0_overflow_count+0x1>
    194c:	a0 93 22 06 	sts	0x0622, r26	; 0x800622 <timer0_overflow_count+0x2>
    1950:	b0 93 23 06 	sts	0x0623, r27	; 0x800623 <timer0_overflow_count+0x3>
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	3f 91       	pop	r19
    195e:	2f 91       	pop	r18
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <millis>:
    196a:	2f b7       	in	r18, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	60 91 1c 06 	lds	r22, 0x061C	; 0x80061c <timer0_millis>
    1972:	70 91 1d 06 	lds	r23, 0x061D	; 0x80061d <timer0_millis+0x1>
    1976:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <timer0_millis+0x2>
    197a:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <timer0_millis+0x3>
    197e:	2f bf       	out	0x3f, r18	; 63
    1980:	08 95       	ret

00001982 <micros>:
    1982:	3f b7       	in	r19, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <timer0_overflow_count>
    198a:	90 91 21 06 	lds	r25, 0x0621	; 0x800621 <timer0_overflow_count+0x1>
    198e:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <timer0_overflow_count+0x2>
    1992:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <timer0_overflow_count+0x3>
    1996:	26 b5       	in	r18, 0x26	; 38
    1998:	a8 9b       	sbis	0x15, 0	; 21
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <micros+0x24>
    199c:	2f 3f       	cpi	r18, 0xFF	; 255
    199e:	19 f0       	breq	.+6      	; 0x19a6 <micros+0x24>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	a1 1d       	adc	r26, r1
    19a4:	b1 1d       	adc	r27, r1
    19a6:	3f bf       	out	0x3f, r19	; 63
    19a8:	ba 2f       	mov	r27, r26
    19aa:	a9 2f       	mov	r26, r25
    19ac:	98 2f       	mov	r25, r24
    19ae:	88 27       	eor	r24, r24
    19b0:	82 0f       	add	r24, r18
    19b2:	91 1d       	adc	r25, r1
    19b4:	a1 1d       	adc	r26, r1
    19b6:	b1 1d       	adc	r27, r1
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	42 e0       	ldi	r20, 0x02	; 2
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	4a 95       	dec	r20
    19c8:	d1 f7       	brne	.-12     	; 0x19be <micros+0x3c>
    19ca:	08 95       	ret

000019cc <delay>:
    19cc:	8f 92       	push	r8
    19ce:	9f 92       	push	r9
    19d0:	af 92       	push	r10
    19d2:	bf 92       	push	r11
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	6b 01       	movw	r12, r22
    19de:	7c 01       	movw	r14, r24
    19e0:	d0 df       	rcall	.-96     	; 0x1982 <micros>
    19e2:	4b 01       	movw	r8, r22
    19e4:	5c 01       	movw	r10, r24
    19e6:	c1 14       	cp	r12, r1
    19e8:	d1 04       	cpc	r13, r1
    19ea:	e1 04       	cpc	r14, r1
    19ec:	f1 04       	cpc	r15, r1
    19ee:	f9 f0       	breq	.+62     	; 0x1a2e <delay+0x62>
    19f0:	0e 94 b9 1b 	call	0x3772	; 0x3772 <yield>
    19f4:	c6 df       	rcall	.-116    	; 0x1982 <micros>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	88 19       	sub	r24, r8
    19fc:	99 09       	sbc	r25, r9
    19fe:	aa 09       	sbc	r26, r10
    1a00:	bb 09       	sbc	r27, r11
    1a02:	88 3e       	cpi	r24, 0xE8	; 232
    1a04:	93 40       	sbci	r25, 0x03	; 3
    1a06:	a1 05       	cpc	r26, r1
    1a08:	b1 05       	cpc	r27, r1
    1a0a:	68 f3       	brcs	.-38     	; 0x19e6 <delay+0x1a>
    1a0c:	21 e0       	ldi	r18, 0x01	; 1
    1a0e:	c2 1a       	sub	r12, r18
    1a10:	d1 08       	sbc	r13, r1
    1a12:	e1 08       	sbc	r14, r1
    1a14:	f1 08       	sbc	r15, r1
    1a16:	88 ee       	ldi	r24, 0xE8	; 232
    1a18:	88 0e       	add	r8, r24
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	98 1e       	adc	r9, r24
    1a1e:	a1 1c       	adc	r10, r1
    1a20:	b1 1c       	adc	r11, r1
    1a22:	c1 14       	cp	r12, r1
    1a24:	d1 04       	cpc	r13, r1
    1a26:	e1 04       	cpc	r14, r1
    1a28:	f1 04       	cpc	r15, r1
    1a2a:	21 f7       	brne	.-56     	; 0x19f4 <delay+0x28>
    1a2c:	dc cf       	rjmp	.-72     	; 0x19e6 <delay+0x1a>
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	08 95       	ret

00001a40 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a40:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a42:	84 b5       	in	r24, 0x24	; 36
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a48:	84 b5       	in	r24, 0x24	; 36
    1a4a:	81 60       	ori	r24, 0x01	; 1
    1a4c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a4e:	85 b5       	in	r24, 0x25	; 37
    1a50:	82 60       	ori	r24, 0x02	; 2
    1a52:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a54:	85 b5       	in	r24, 0x25	; 37
    1a56:	81 60       	ori	r24, 0x01	; 1
    1a58:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a5a:	ee e6       	ldi	r30, 0x6E	; 110
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	81 60       	ori	r24, 0x01	; 1
    1a62:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a64:	e1 e8       	ldi	r30, 0x81	; 129
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a6a:	80 81       	ld	r24, Z
    1a6c:	82 60       	ori	r24, 0x02	; 2
    1a6e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a70:	80 81       	ld	r24, Z
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a76:	e0 e8       	ldi	r30, 0x80	; 128
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	81 60       	ori	r24, 0x01	; 1
    1a7e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a80:	e1 eb       	ldi	r30, 0xB1	; 177
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	84 60       	ori	r24, 0x04	; 4
    1a88:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1a8a:	e0 eb       	ldi	r30, 0xB0	; 176
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1a94:	e1 e9       	ldi	r30, 0x91	; 145
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	82 60       	ori	r24, 0x02	; 2
    1a9c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1a9e:	80 81       	ld	r24, Z
    1aa0:	81 60       	ori	r24, 0x01	; 1
    1aa2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1aa4:	e0 e9       	ldi	r30, 0x90	; 144
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	81 60       	ori	r24, 0x01	; 1
    1aac:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1aae:	e1 ea       	ldi	r30, 0xA1	; 161
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	82 60       	ori	r24, 0x02	; 2
    1ab6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1abe:	e0 ea       	ldi	r30, 0xA0	; 160
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	81 60       	ori	r24, 0x01	; 1
    1ac6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1ac8:	e1 e2       	ldi	r30, 0x21	; 33
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	80 81       	ld	r24, Z
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1ad2:	80 81       	ld	r24, Z
    1ad4:	81 60       	ori	r24, 0x01	; 1
    1ad6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1ad8:	e0 e2       	ldi	r30, 0x20	; 32
    1ada:	f1 e0       	ldi	r31, 0x01	; 1
    1adc:	80 81       	ld	r24, Z
    1ade:	81 60       	ori	r24, 0x01	; 1
    1ae0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1ae2:	ea e7       	ldi	r30, 0x7A	; 122
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	84 60       	ori	r24, 0x04	; 4
    1aea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1aec:	80 81       	ld	r24, Z
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1af2:	80 81       	ld	r24, Z
    1af4:	81 60       	ori	r24, 0x01	; 1
    1af6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1af8:	80 81       	ld	r24, Z
    1afa:	80 68       	ori	r24, 0x80	; 128
    1afc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1afe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1b02:	08 95       	ret

00001b04 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	fc 01       	movw	r30, r24
    1b08:	31 97       	sbiw	r30, 0x01	; 1
    1b0a:	e2 31       	cpi	r30, 0x12	; 18
    1b0c:	f1 05       	cpc	r31, r1
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <turnOffPWM+0xe>
    1b10:	4e c0       	rjmp	.+156    	; 0x1bae <turnOffPWM+0xaa>
    1b12:	88 27       	eor	r24, r24
    1b14:	eb 57       	subi	r30, 0x7B	; 123
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b1e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b22:	8f 77       	andi	r24, 0x7F	; 127
    1b24:	03 c0       	rjmp	.+6      	; 0x1b2c <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b26:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b2a:	8f 7d       	andi	r24, 0xDF	; 223
    1b2c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b30:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1b32:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b36:	87 7f       	andi	r24, 0xF7	; 247
    1b38:	f9 cf       	rjmp	.-14     	; 0x1b2c <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b3a:	84 b5       	in	r24, 0x24	; 36
    1b3c:	8f 77       	andi	r24, 0x7F	; 127
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b40:	84 b5       	in	r24, 0x24	; 36
    1b42:	8f 7d       	andi	r24, 0xDF	; 223
    1b44:	84 bd       	out	0x24, r24	; 36
    1b46:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1b4c:	8f 77       	andi	r24, 0x7F	; 127
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b50:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1b54:	8f 7d       	andi	r24, 0xDF	; 223
    1b56:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1b5a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1b5c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1b60:	8f 77       	andi	r24, 0x7F	; 127
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1b64:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1b68:	8f 7d       	andi	r24, 0xDF	; 223
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1b6c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1b70:	87 7f       	andi	r24, 0xF7	; 247
    1b72:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1b76:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1b78:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b7c:	8f 77       	andi	r24, 0x7F	; 127
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1b80:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1b88:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b8c:	87 7f       	andi	r24, 0xF7	; 247
    1b8e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1b92:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1b94:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1b98:	8f 77       	andi	r24, 0x7F	; 127
    1b9a:	07 c0       	rjmp	.+14     	; 0x1baa <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1b9c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1ba0:	8f 7d       	andi	r24, 0xDF	; 223
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1ba4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1ba8:	87 7f       	andi	r24, 0xF7	; 247
    1baa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1bae:	08 95       	ret

00001bb0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	e7 57       	subi	r30, 0x77	; 119
    1bba:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e1 53       	subi	r30, 0x31	; 49
    1bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1bc6:	88 23       	and	r24, r24
    1bc8:	61 f1       	breq	.+88     	; 0x1c22 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e7 5b       	subi	r30, 0xB7	; 183
    1bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd6:	c5 91       	lpm	r28, Z+
    1bd8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e1 5d       	subi	r30, 0xD1	; 209
    1bde:	fd 4f       	sbci	r31, 0xFD	; 253
    1be0:	a5 91       	lpm	r26, Z+
    1be2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1be4:	61 11       	cpse	r22, r1
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1be8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bea:	f8 94       	cli
		*reg &= ~bit;
    1bec:	88 81       	ld	r24, Y
    1bee:	20 95       	com	r18
    1bf0:	82 23       	and	r24, r18
    1bf2:	88 83       	st	Y, r24
		*out &= ~bit;
    1bf4:	ec 91       	ld	r30, X
    1bf6:	2e 23       	and	r18, r30
    1bf8:	0b c0       	rjmp	.+22     	; 0x1c10 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1bfa:	62 30       	cpi	r22, 0x02	; 2
    1bfc:	61 f4       	brne	.+24     	; 0x1c16 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1bfe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c00:	f8 94       	cli
		*reg &= ~bit;
    1c02:	88 81       	ld	r24, Y
    1c04:	32 2f       	mov	r19, r18
    1c06:	30 95       	com	r19
    1c08:	83 23       	and	r24, r19
    1c0a:	88 83       	st	Y, r24
		*out |= bit;
    1c0c:	ec 91       	ld	r30, X
    1c0e:	2e 2b       	or	r18, r30
    1c10:	2c 93       	st	X, r18
		SREG = oldSREG;
    1c12:	9f bf       	out	0x3f, r25	; 63
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1c16:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1c18:	f8 94       	cli
		*reg |= bit;
    1c1a:	e8 81       	ld	r30, Y
    1c1c:	2e 2b       	or	r18, r30
    1c1e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1c20:	8f bf       	out	0x3f, r24	; 63
	}
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	ed 5b       	subi	r30, 0xBD	; 189
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	e7 57       	subi	r30, 0x77	; 119
    1c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c40:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c42:	f9 01       	movw	r30, r18
    1c44:	e1 53       	subi	r30, 0x31	; 49
    1c46:	fe 4f       	sbci	r31, 0xFE	; 254
    1c48:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c4a:	cc 23       	and	r28, r28
    1c4c:	b9 f0       	breq	.+46     	; 0x1c7c <digitalWrite+0x54>
    1c4e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c50:	81 11       	cpse	r24, r1
    1c52:	58 df       	rcall	.-336    	; 0x1b04 <turnOffPWM>

	out = portOutputRegister(port);
    1c54:	ec 2f       	mov	r30, r28
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	e1 5d       	subi	r30, 0xD1	; 209
    1c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c60:	a5 91       	lpm	r26, Z+
    1c62:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c64:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c66:	f8 94       	cli

	if (val == LOW) {
    1c68:	11 11       	cpse	r17, r1
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <digitalWrite+0x4c>
		*out &= ~bit;
    1c6c:	8c 91       	ld	r24, X
    1c6e:	d0 95       	com	r29
    1c70:	d8 23       	and	r29, r24
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1c74:	ec 91       	ld	r30, X
    1c76:	de 2b       	or	r29, r30
    1c78:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c7a:	9f bf       	out	0x3f, r25	; 63
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	08 95       	ret

00001c84 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	ed 5b       	subi	r30, 0xBD	; 189
    1c90:	fe 4f       	sbci	r31, 0xFE	; 254
    1c92:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c94:	f9 01       	movw	r30, r18
    1c96:	e7 57       	subi	r30, 0x77	; 119
    1c98:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c9c:	f9 01       	movw	r30, r18
    1c9e:	e1 53       	subi	r30, 0x31	; 49
    1ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1ca4:	cc 23       	and	r28, r28
    1ca6:	89 f0       	breq	.+34     	; 0x1cca <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ca8:	81 11       	cpse	r24, r1
    1caa:	2c df       	rcall	.-424    	; 0x1b04 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1cac:	ec 2f       	mov	r30, r28
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	eb 5e       	subi	r30, 0xEB	; 235
    1cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb8:	a5 91       	lpm	r26, Z+
    1cba:	b4 91       	lpm	r27, Z
    1cbc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1cbe:	ed 23       	and	r30, r29
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <digitalRead+0x4a>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <digitalRead+0x4a>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <free>

00001cde <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    1ce4:	88 81       	ld	r24, Y
    1ce6:	99 81       	ldd	r25, Y+1	; 0x01
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <_ZN6String10invalidateEv+0x12>
    1cec:	0e 94 a1 1c 	call	0x3942	; 0x3942 <free>
	buffer = NULL;
    1cf0:	19 82       	std	Y+1, r1	; 0x01
    1cf2:	18 82       	st	Y, r1
	capacity = len = 0;
    1cf4:	1d 82       	std	Y+5, r1	; 0x05
    1cf6:	1c 82       	std	Y+4, r1	; 0x04
    1cf8:	1b 82       	std	Y+3, r1	; 0x03
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
}
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1d0e:	6f 5f       	subi	r22, 0xFF	; 255
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255
    1d12:	88 81       	ld	r24, Y
    1d14:	99 81       	ldd	r25, Y+1	; 0x01
    1d16:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <realloc>
	if (newbuffer) {
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	31 f0       	breq	.+12     	; 0x1d2a <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    1d1e:	99 83       	std	Y+1, r25	; 0x01
    1d20:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1d22:	1b 83       	std	Y+3, r17	; 0x03
    1d24:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	08 95       	ret

00001d36 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    1d3c:	88 81       	ld	r24, Y
    1d3e:	99 81       	ldd	r25, Y+1	; 0x01
    1d40:	89 2b       	or	r24, r25
    1d42:	29 f0       	breq	.+10     	; 0x1d4e <_ZN6String7reserveEj+0x18>
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	9b 81       	ldd	r25, Y+3	; 0x03
    1d48:	86 17       	cp	r24, r22
    1d4a:	97 07       	cpc	r25, r23
    1d4c:	58 f4       	brcc	.+22     	; 0x1d64 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    1d4e:	ce 01       	movw	r24, r28
    1d50:	d8 df       	rcall	.-80     	; 0x1d02 <_ZN6String12changeBufferEj>
    1d52:	88 23       	and	r24, r24
    1d54:	41 f0       	breq	.+16     	; 0x1d66 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5a:	89 2b       	or	r24, r25
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <_ZN6String7reserveEj+0x2e>
    1d5e:	e8 81       	ld	r30, Y
    1d60:	f9 81       	ldd	r31, Y+1	; 0x01
    1d62:	10 82       	st	Z, r1
    1d64:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	ec 01       	movw	r28, r24
    1d7a:	7b 01       	movw	r14, r22
    1d7c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    1d7e:	ba 01       	movw	r22, r20
    1d80:	da df       	rcall	.-76     	; 0x1d36 <_ZN6String7reserveEj>
    1d82:	81 11       	cpse	r24, r1
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <_ZN6String4copyEPKcj+0x20>
		invalidate();
    1d86:	ce 01       	movw	r24, r28
    1d88:	aa df       	rcall	.-172    	; 0x1cde <_ZN6String10invalidateEv>
		return *this;
    1d8a:	07 c0       	rjmp	.+14     	; 0x1d9a <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    1d8c:	1d 83       	std	Y+5, r17	; 0x05
    1d8e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1d90:	b7 01       	movw	r22, r14
    1d92:	88 81       	ld	r24, Y
    1d94:	99 81       	ldd	r25, Y+1	; 0x01
    1d96:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <strcpy>
	return *this;
}
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	08 95       	ret

00001daa <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1daa:	fc 01       	movw	r30, r24
    1dac:	11 82       	std	Z+1, r1	; 0x01
    1dae:	10 82       	st	Z, r1
	capacity = 0;
    1db0:	13 82       	std	Z+3, r1	; 0x03
    1db2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1db4:	15 82       	std	Z+5, r1	; 0x05
    1db6:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1db8:	61 15       	cp	r22, r1
    1dba:	71 05       	cpc	r23, r1
    1dbc:	49 f0       	breq	.+18     	; 0x1dd0 <_ZN6StringC1EPKc+0x26>
    1dbe:	fb 01       	movw	r30, r22
    1dc0:	01 90       	ld	r0, Z+
    1dc2:	00 20       	and	r0, r0
    1dc4:	e9 f7       	brne	.-6      	; 0x1dc0 <_ZN6StringC1EPKc+0x16>
    1dc6:	31 97       	sbiw	r30, 0x01	; 1
    1dc8:	af 01       	movw	r20, r30
    1dca:	46 1b       	sub	r20, r22
    1dcc:	57 0b       	sbc	r21, r23
    1dce:	ce cf       	rjmp	.-100    	; 0x1d6c <_ZN6String4copyEPKcj>
    1dd0:	08 95       	ret

00001dd2 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	1f 92       	push	r1
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	69 83       	std	Y+1, r22	; 0x01
    1dde:	dc 01       	movw	r26, r24
    1de0:	ed 91       	ld	r30, X+
    1de2:	fc 91       	ld	r31, X
    1de4:	02 80       	ldd	r0, Z+2	; 0x02
    1de6:	f3 81       	ldd	r31, Z+3	; 0x03
    1de8:	e0 2d       	mov	r30, r0
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	be 01       	movw	r22, r28
    1df0:	6f 5f       	subi	r22, 0xFF	; 255
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	19 95       	eicall
    1df6:	0f 90       	pop	r0
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <_ZN5SDLib4File5writeEPKhj>:
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	ec 01       	movw	r28, r24
    1e04:	89 8d       	ldd	r24, Y+25	; 0x19
    1e06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	39 f4       	brne	.+14     	; 0x1e1a <_ZN5SDLib4File5writeEPKhj+0x1c>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9b 83       	std	Y+3, r25	; 0x03
    1e12:	8a 83       	std	Y+2, r24	; 0x02
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <_ZN5SDLib4File5writeEPKhj+0x30>
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	13 82       	std	Z+3, r1	; 0x03
    1e1e:	12 82       	std	Z+2, r1	; 0x02
    1e20:	a7 d6       	rcall	.+3406   	; 0x2b70 <_ZN6SdFile5writeEPKvj>
    1e22:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e24:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e26:	22 81       	ldd	r18, Z+2	; 0x02
    1e28:	33 81       	ldd	r19, Z+3	; 0x03
    1e2a:	23 2b       	or	r18, r19
    1e2c:	79 f7       	brne	.-34     	; 0x1e0c <_ZN5SDLib4File5writeEPKhj+0xe>
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <_ZN5SDLib4File5flushEv>:
    1e34:	fc 01       	movw	r30, r24
    1e36:	81 8d       	ldd	r24, Z+25	; 0x19
    1e38:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <_ZN5SDLib4File5flushEv+0xc>
    1e3e:	48 c6       	rjmp	.+3216   	; 0x2ad0 <_ZN6SdFile4syncEv>
    1e40:	08 95       	ret

00001e42 <_ZN6SdFile4readEv>:
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	1f 92       	push	r1
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	be 01       	movw	r22, r28
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	a4 d4       	rcall	.+2376   	; 0x27a0 <_ZN6SdFile4readEPvj>
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	19 f4       	brne	.+6      	; 0x1e62 <_ZN6SdFile4readEv+0x20>
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <_ZN6SdFile4readEv+0x24>
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	9f ef       	ldi	r25, 0xFF	; 255
    1e66:	0f 90       	pop	r0
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <_ZN5SDLib4File4readEv>:
    1e6e:	fc 01       	movw	r30, r24
    1e70:	81 8d       	ldd	r24, Z+25	; 0x19
    1e72:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <_ZN5SDLib4File4readEv+0xc>
    1e78:	e4 cf       	rjmp	.-56     	; 0x1e42 <_ZN6SdFile4readEv>
    1e7a:	8f ef       	ldi	r24, 0xFF	; 255
    1e7c:	9f ef       	ldi	r25, 0xFF	; 255
    1e7e:	08 95       	ret

00001e80 <_ZN5SDLib4File4peekEv>:
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	fc 01       	movw	r30, r24
    1e8a:	81 8d       	ldd	r24, Z+25	; 0x19
    1e8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	a9 f0       	breq	.+42     	; 0x1ebc <_ZN5SDLib4File4peekEv+0x3c>
    1e92:	ef 01       	movw	r28, r30
    1e94:	d6 df       	rcall	.-84     	; 0x1e42 <_ZN6SdFile4readEv>
    1e96:	8c 01       	movw	r16, r24
    1e98:	0f 3f       	cpi	r16, 0xFF	; 255
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	18 07       	cpc	r17, r24
    1e9e:	89 f0       	breq	.+34     	; 0x1ec2 <_ZN5SDLib4File4peekEv+0x42>
    1ea0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ea2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	42 85       	ldd	r20, Z+10	; 0x0a
    1ea8:	53 85       	ldd	r21, Z+11	; 0x0b
    1eaa:	64 85       	ldd	r22, Z+12	; 0x0c
    1eac:	75 85       	ldd	r23, Z+13	; 0x0d
    1eae:	41 50       	subi	r20, 0x01	; 1
    1eb0:	51 09       	sbc	r21, r1
    1eb2:	61 09       	sbc	r22, r1
    1eb4:	71 09       	sbc	r23, r1
    1eb6:	76 d5       	rcall	.+2796   	; 0x29a4 <_ZN6SdFile7seekSetEm>
    1eb8:	c8 01       	movw	r24, r16
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <_ZN5SDLib4File4peekEv+0x46>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <_ZN5SDLib4File4peekEv+0x46>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <_ZN5SDLib4FileC1Ev>:
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	13 82       	std	Z+3, r1	; 0x03
    1ed4:	12 82       	std	Z+2, r1	; 0x02
    1ed6:	88 ee       	ldi	r24, 0xE8	; 232
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	84 83       	std	Z+4, r24	; 0x04
    1ee0:	95 83       	std	Z+5, r25	; 0x05
    1ee2:	a6 83       	std	Z+6, r26	; 0x06
    1ee4:	b7 83       	std	Z+7, r27	; 0x07
    1ee6:	8c ed       	ldi	r24, 0xDC	; 220
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    1eee:	12 8e       	std	Z+26, r1	; 0x1a
    1ef0:	11 8e       	std	Z+25, r1	; 0x19
    1ef2:	14 86       	std	Z+12, r1	; 0x0c
    1ef4:	08 95       	ret

00001ef6 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	59 96       	adiw	r26, 0x19	; 25
    1efa:	ed 91       	ld	r30, X+
    1efc:	fc 91       	ld	r31, X
    1efe:	5a 97       	sbiw	r26, 0x1a	; 26
    1f00:	30 97       	sbiw	r30, 0x00	; 0
    1f02:	29 f0       	breq	.+10     	; 0x1f0e <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    1f04:	62 85       	ldd	r22, Z+10	; 0x0a
    1f06:	73 85       	ldd	r23, Z+11	; 0x0b
    1f08:	84 85       	ldd	r24, Z+12	; 0x0c
    1f0a:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    1f0c:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1f0e:	6f ef       	ldi	r22, 0xFF	; 255
    1f10:	7f ef       	ldi	r23, 0xFF	; 255
    1f12:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    1f14:	08 95       	ret

00001f16 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    1f16:	dc 01       	movw	r26, r24
    1f18:	59 96       	adiw	r26, 0x19	; 25
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	5a 97       	sbiw	r26, 0x1a	; 26
    1f20:	30 97       	sbiw	r30, 0x00	; 0
    1f22:	29 f0       	breq	.+10     	; 0x1f2e <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    1f24:	63 89       	ldd	r22, Z+19	; 0x13
    1f26:	74 89       	ldd	r23, Z+20	; 0x14
    1f28:	85 89       	ldd	r24, Z+21	; 0x15
    1f2a:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    1f2c:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    1f34:	08 95       	ret

00001f36 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    1f36:	cf 92       	push	r12
    1f38:	df 92       	push	r13
    1f3a:	ef 92       	push	r14
    1f3c:	ff 92       	push	r15
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
  if (! _file) return 0;
    1f42:	fc 01       	movw	r30, r24
    1f44:	21 8d       	ldd	r18, Z+25	; 0x19
    1f46:	32 8d       	ldd	r19, Z+26	; 0x1a
    1f48:	23 2b       	or	r18, r19
    1f4a:	c9 f0       	breq	.+50     	; 0x1f7e <_ZN5SDLib4File9availableEv+0x48>
    1f4c:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    1f4e:	e3 df       	rcall	.-58     	; 0x1f16 <_ZN5SDLib4File4sizeEv>
    1f50:	6b 01       	movw	r12, r22
    1f52:	7c 01       	movw	r14, r24
    1f54:	ce 01       	movw	r24, r28
    1f56:	cf df       	rcall	.-98     	; 0x1ef6 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1f58:	a7 01       	movw	r20, r14
    1f5a:	96 01       	movw	r18, r12
    1f5c:	26 1b       	sub	r18, r22
    1f5e:	37 0b       	sbc	r19, r23
    1f60:	48 0b       	sbc	r20, r24
    1f62:	59 0b       	sbc	r21, r25
    1f64:	da 01       	movw	r26, r20
    1f66:	c9 01       	movw	r24, r18
    1f68:	81 15       	cp	r24, r1
    1f6a:	30 e8       	ldi	r19, 0x80	; 128
    1f6c:	93 07       	cpc	r25, r19
    1f6e:	a1 05       	cpc	r26, r1
    1f70:	b1 05       	cpc	r27, r1
    1f72:	38 f0       	brcs	.+14     	; 0x1f82 <_ZN5SDLib4File9availableEv+0x4c>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f e7       	ldi	r25, 0x7F	; 127
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	08 95       	ret

00001f90 <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    1f90:	0f 93       	push	r16
    1f92:	1f 93       	push	r17
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	ec 01       	movw	r28, r24
    1f9a:	8b 01       	movw	r16, r22
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 6f 1a 	call	0x34de	; 0x34de <_ZN8SdVolume4initEP7Sd2Cardh>
    1fa2:	81 11       	cpse	r24, r1
    1fa4:	09 c0       	rjmp	.+18     	; 0x1fb8 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	b8 01       	movw	r22, r16
    1faa:	ce 01       	movw	r24, r28
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <_ZN8SdVolume4initEP7Sd2Cardh>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <_ZN5SDLib7SDClass5beginEh>:
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	ec 01       	movw	r28, r24
    1fce:	16 2f       	mov	r17, r22
    1fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd2:	88 23       	and	r24, r24
    1fd4:	19 f0       	breq	.+6      	; 0x1fdc <_ZN5SDLib7SDClass5beginEh+0x18>
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	8a 96       	adiw	r24, 0x2a	; 42
    1fda:	bf d5       	rcall	.+2942   	; 0x2b5a <_ZN6SdFile5closeEv>
    1fdc:	41 2f       	mov	r20, r17
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	60 d1       	rcall	.+704    	; 0x22a4 <_ZN7Sd2Card4initEhh>
    1fe4:	88 23       	and	r24, r24
    1fe6:	79 f0       	breq	.+30     	; 0x2006 <_ZN5SDLib7SDClass5beginEh+0x42>
    1fe8:	8e 01       	movw	r16, r28
    1fea:	04 5f       	subi	r16, 0xF4	; 244
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	be 01       	movw	r22, r28
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	ce df       	rcall	.-100    	; 0x1f90 <_ZN8SdVolume4initEP7Sd2Card>
    1ff4:	88 23       	and	r24, r24
    1ff6:	39 f0       	breq	.+14     	; 0x2006 <_ZN5SDLib7SDClass5beginEh+0x42>
    1ff8:	b8 01       	movw	r22, r16
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	8a 96       	adiw	r24, 0x2a	; 42
    1ffe:	80 d3       	rcall	.+1792   	; 0x2700 <_ZN6SdFile8openRootEP8SdVolume>
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	81 11       	cpse	r24, r1
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <_ZN5SDLib7SDClass5beginEh+0x44>
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	89 2f       	mov	r24, r25
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    2014:	e4 e2       	ldi	r30, 0x24	; 36
    2016:	f6 e0       	ldi	r31, 0x06	; 6
    2018:	15 82       	std	Z+5, r1	; 0x05
    201a:	16 82       	std	Z+6, r1	; 0x06
    201c:	11 86       	std	Z+9, r1	; 0x09
    201e:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	84 87       	std	Z+12, r24	; 0x0c
    202a:	95 87       	std	Z+13, r25	; 0x0d
    202c:	a6 87       	std	Z+14, r26	; 0x0e
    202e:	b7 87       	std	Z+15, r27	; 0x0f
    2030:	13 a2       	std	Z+35, r1	; 0x23
    2032:	15 a6       	std	Z+45, r1	; 0x2d
    2034:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2036:	8e ee       	ldi	r24, 0xEE	; 238
    2038:	93 e0       	ldi	r25, 0x03	; 3
    203a:	93 a7       	std	Z+43, r25	; 0x2b
    203c:	82 a7       	std	Z+42, r24	; 0x2a
    203e:	17 a6       	std	Z+47, r1	; 0x2f
    2040:	08 95       	ret

00002042 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    2042:	9f b7       	in	r25, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	20 91 7b 08 	lds	r18, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
    204a:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <_ZN8SPIClass13interruptSaveE>
    204e:	21 30       	cpi	r18, 0x01	; 1
    2050:	19 f4       	brne	.+6      	; 0x2058 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    2052:	8d bb       	out	0x1d, r24	; 29
    2054:	9f bf       	out	0x3f, r25	; 63
    2056:	08 95       	ret
    2058:	8f bf       	out	0x3f, r24	; 63
    205a:	08 95       	ret

0000205c <_ZN11SPISettingsC1Emhh>:
    205c:	0f 93       	push	r16
    205e:	fc 01       	movw	r30, r24
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	92 e1       	ldi	r25, 0x12	; 18
    2064:	aa e7       	ldi	r26, 0x7A	; 122
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	48 17       	cp	r20, r24
    206c:	59 07       	cpc	r21, r25
    206e:	6a 07       	cpc	r22, r26
    2070:	7b 07       	cpc	r23, r27
    2072:	40 f4       	brcc	.+16     	; 0x2084 <_ZN11SPISettingsC1Emhh+0x28>
    2074:	b6 95       	lsr	r27
    2076:	a7 95       	ror	r26
    2078:	97 95       	ror	r25
    207a:	87 95       	ror	r24
    207c:	3f 5f       	subi	r19, 0xFF	; 255
    207e:	36 30       	cpi	r19, 0x06	; 6
    2080:	a1 f7       	brne	.-24     	; 0x206a <_ZN11SPISettingsC1Emhh+0xe>
    2082:	37 e0       	ldi	r19, 0x07	; 7
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	93 27       	eor	r25, r19
    2088:	22 23       	and	r18, r18
    208a:	11 f0       	breq	.+4      	; 0x2090 <_ZN11SPISettingsC1Emhh+0x34>
    208c:	20 e5       	ldi	r18, 0x50	; 80
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <_ZN11SPISettingsC1Emhh+0x36>
    2090:	20 e7       	ldi	r18, 0x70	; 112
    2092:	0c 70       	andi	r16, 0x0C	; 12
    2094:	89 2f       	mov	r24, r25
    2096:	86 95       	lsr	r24
    2098:	08 2b       	or	r16, r24
    209a:	02 2b       	or	r16, r18
    209c:	00 83       	st	Z, r16
    209e:	91 70       	andi	r25, 0x01	; 1
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	0f 91       	pop	r16
    20a4:	08 95       	ret

000020a6 <_ZN8SPIClass8transferEh>:
    20a6:	8e bd       	out	0x2e, r24	; 46
    20a8:	00 00       	nop
    20aa:	0d b4       	in	r0, 0x2d	; 45
    20ac:	07 fe       	sbrs	r0, 7
    20ae:	fd cf       	rjmp	.-6      	; 0x20aa <_ZN8SPIClass8transferEh+0x4>
    20b0:	8e b5       	in	r24, 0x2e	; 46
    20b2:	08 95       	ret

000020b4 <_ZL6spiRecv>:
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	f7 cf       	rjmp	.-18     	; 0x20a6 <_ZN8SPIClass8transferEh>

000020b8 <_ZN7Sd2Card14chipSelectHighEv>:
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	fc 01       	movw	r30, r24
    20bc:	84 81       	ldd	r24, Z+4	; 0x04
    20be:	b4 dd       	rcall	.-1176   	; 0x1c28 <digitalWrite>
    20c0:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <_ZL20chip_select_asserted>
    20c4:	88 23       	and	r24, r24
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    20c8:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <_ZL20chip_select_asserted>
    20cc:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
    20d0:	81 11       	cpse	r24, r1
    20d2:	b7 cf       	rjmp	.-146    	; 0x2042 <_ZN8SPIClass14endTransactionEv.part.3>
    20d4:	08 95       	ret

000020d6 <_ZN7Sd2Card13chipSelectLowEv>:
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    20dc:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <_ZL20chip_select_asserted>
    20e0:	81 11       	cpse	r24, r1
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <_ZL20chip_select_asserted>
    20ea:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <_ZL8settings>
    20ee:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <_ZL8settings+0x1>
    20f2:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN8SPIClass16beginTransactionE11SPISettings>
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	94 cd       	rjmp	.-1240   	; 0x1c28 <digitalWrite>

00002100 <_ZN7Sd2Card7readEndEv>:
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	ec 01       	movw	r28, r24
    2106:	8e 81       	ldd	r24, Y+6	; 0x06
    2108:	88 23       	and	r24, r24
    210a:	79 f0       	breq	.+30     	; 0x212a <_ZN7Sd2Card7readEndEv+0x2a>
    210c:	8f 81       	ldd	r24, Y+7	; 0x07
    210e:	98 85       	ldd	r25, Y+8	; 0x08
    2110:	9c 01       	movw	r18, r24
    2112:	2f 5f       	subi	r18, 0xFF	; 255
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	38 87       	std	Y+8, r19	; 0x08
    2118:	2f 83       	std	Y+7, r18	; 0x07
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	92 40       	sbci	r25, 0x02	; 2
    211e:	10 f4       	brcc	.+4      	; 0x2124 <_ZN7Sd2Card7readEndEv+0x24>
    2120:	c9 df       	rcall	.-110    	; 0x20b4 <_ZL6spiRecv>
    2122:	f4 cf       	rjmp	.-24     	; 0x210c <_ZN7Sd2Card7readEndEv+0xc>
    2124:	ce 01       	movw	r24, r28
    2126:	c8 df       	rcall	.-112    	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    2128:	1e 82       	std	Y+6, r1	; 0x06
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <_ZN7Sd2Card10setSckRateEh>:
    2130:	0f 93       	push	r16
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	1f 92       	push	r1
    2138:	1f 92       	push	r1
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	67 30       	cpi	r22, 0x07	; 7
    2140:	28 f0       	brcs	.+10     	; 0x214c <_ZN7Sd2Card10setSckRateEh+0x1c>
    2142:	26 e1       	ldi	r18, 0x16	; 22
    2144:	fc 01       	movw	r30, r24
    2146:	25 83       	std	Z+5, r18	; 0x05
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	46 c0       	rjmp	.+140    	; 0x21d8 <_ZN7Sd2Card10setSckRateEh+0xa8>
    214c:	62 30       	cpi	r22, 0x02	; 2
    214e:	f9 f0       	breq	.+62     	; 0x218e <_ZN7Sd2Card10setSckRateEh+0x5e>
    2150:	58 f4       	brcc	.+22     	; 0x2168 <_ZN7Sd2Card10setSckRateEh+0x38>
    2152:	66 23       	and	r22, r22
    2154:	a9 f0       	breq	.+42     	; 0x2180 <_ZN7Sd2Card10setSckRateEh+0x50>
    2156:	61 30       	cpi	r22, 0x01	; 1
    2158:	79 f5       	brne	.+94     	; 0x21b8 <_ZN7Sd2Card10setSckRateEh+0x88>
    215a:	00 e0       	ldi	r16, 0x00	; 0
    215c:	21 e0       	ldi	r18, 0x01	; 1
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	59 e0       	ldi	r21, 0x09	; 9
    2162:	6d e3       	ldi	r22, 0x3D	; 61
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	2e c0       	rjmp	.+92     	; 0x21c4 <_ZN7Sd2Card10setSckRateEh+0x94>
    2168:	64 30       	cpi	r22, 0x04	; 4
    216a:	f9 f0       	breq	.+62     	; 0x21aa <_ZN7Sd2Card10setSckRateEh+0x7a>
    216c:	b8 f0       	brcs	.+46     	; 0x219c <_ZN7Sd2Card10setSckRateEh+0x6c>
    216e:	65 30       	cpi	r22, 0x05	; 5
    2170:	19 f5       	brne	.+70     	; 0x21b8 <_ZN7Sd2Card10setSckRateEh+0x88>
    2172:	00 e0       	ldi	r16, 0x00	; 0
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	40 e9       	ldi	r20, 0x90	; 144
    2178:	50 ed       	ldi	r21, 0xD0	; 208
    217a:	63 e0       	ldi	r22, 0x03	; 3
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	22 c0       	rjmp	.+68     	; 0x21c4 <_ZN7Sd2Card10setSckRateEh+0x94>
    2180:	00 e0       	ldi	r16, 0x00	; 0
    2182:	21 e0       	ldi	r18, 0x01	; 1
    2184:	40 e4       	ldi	r20, 0x40	; 64
    2186:	58 e7       	ldi	r21, 0x78	; 120
    2188:	6d e7       	ldi	r22, 0x7D	; 125
    218a:	71 e0       	ldi	r23, 0x01	; 1
    218c:	1b c0       	rjmp	.+54     	; 0x21c4 <_ZN7Sd2Card10setSckRateEh+0x94>
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	54 e8       	ldi	r21, 0x84	; 132
    2196:	6e e1       	ldi	r22, 0x1E	; 30
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <_ZN7Sd2Card10setSckRateEh+0x94>
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	21 e0       	ldi	r18, 0x01	; 1
    21a0:	40 e4       	ldi	r20, 0x40	; 64
    21a2:	52 e4       	ldi	r21, 0x42	; 66
    21a4:	6f e0       	ldi	r22, 0x0F	; 15
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <_ZN7Sd2Card10setSckRateEh+0x94>
    21aa:	00 e0       	ldi	r16, 0x00	; 0
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 ea       	ldi	r21, 0xA1	; 161
    21b2:	67 e0       	ldi	r22, 0x07	; 7
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	06 c0       	rjmp	.+12     	; 0x21c4 <_ZN7Sd2Card10setSckRateEh+0x94>
    21b8:	00 e0       	ldi	r16, 0x00	; 0
    21ba:	21 e0       	ldi	r18, 0x01	; 1
    21bc:	48 e4       	ldi	r20, 0x48	; 72
    21be:	58 ee       	ldi	r21, 0xE8	; 232
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	49 df       	rcall	.-366    	; 0x205c <_ZN11SPISettingsC1Emhh>
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <_ZL8settings+0x1>
    21d2:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <_ZL8settings>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <_ZN7Sd2Card11waitNotBusyEj>:
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	eb 01       	movw	r28, r22
    21ee:	bd db       	rcall	.-2182   	; 0x196a <millis>
    21f0:	8b 01       	movw	r16, r22
    21f2:	60 df       	rcall	.-320    	; 0x20b4 <_ZL6spiRecv>
    21f4:	8f 3f       	cpi	r24, 0xFF	; 255
    21f6:	41 f0       	breq	.+16     	; 0x2208 <__stack+0x9>
    21f8:	b8 db       	rcall	.-2192   	; 0x196a <millis>
    21fa:	60 1b       	sub	r22, r16
    21fc:	71 0b       	sbc	r23, r17
    21fe:	6c 17       	cp	r22, r28
    2200:	7d 07       	cpc	r23, r29
    2202:	b8 f3       	brcs	.-18     	; 0x21f2 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	01 c0       	rjmp	.+2      	; 0x220a <__stack+0xb>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	08 95       	ret

00002214 <_ZN7Sd2Card11cardCommandEhm>:
    2214:	8f 92       	push	r8
    2216:	9f 92       	push	r9
    2218:	af 92       	push	r10
    221a:	bf 92       	push	r11
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	ec 01       	movw	r28, r24
    2228:	f6 2e       	mov	r15, r22
    222a:	49 01       	movw	r8, r18
    222c:	5a 01       	movw	r10, r20
    222e:	68 df       	rcall	.-304    	; 0x2100 <_ZN7Sd2Card7readEndEv>
    2230:	ce 01       	movw	r24, r28
    2232:	51 df       	rcall	.-350    	; 0x20d6 <_ZN7Sd2Card13chipSelectLowEv>
    2234:	6c e2       	ldi	r22, 0x2C	; 44
    2236:	71 e0       	ldi	r23, 0x01	; 1
    2238:	ce 01       	movw	r24, r28
    223a:	d4 df       	rcall	.-88     	; 0x21e4 <_ZN7Sd2Card11waitNotBusyEj>
    223c:	8f 2d       	mov	r24, r15
    223e:	80 64       	ori	r24, 0x40	; 64
    2240:	32 df       	rcall	.-412    	; 0x20a6 <_ZN8SPIClass8transferEh>
    2242:	08 e1       	ldi	r16, 0x18	; 24
    2244:	10 e0       	ldi	r17, 0x00	; 0
    2246:	d5 01       	movw	r26, r10
    2248:	c4 01       	movw	r24, r8
    224a:	00 2e       	mov	r0, r16
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <_ZN7Sd2Card11cardCommandEhm+0x42>
    224e:	b6 95       	lsr	r27
    2250:	a7 95       	ror	r26
    2252:	97 95       	ror	r25
    2254:	87 95       	ror	r24
    2256:	0a 94       	dec	r0
    2258:	d2 f7       	brpl	.-12     	; 0x224e <_ZN7Sd2Card11cardCommandEhm+0x3a>
    225a:	25 df       	rcall	.-438    	; 0x20a6 <_ZN8SPIClass8transferEh>
    225c:	08 50       	subi	r16, 0x08	; 8
    225e:	11 09       	sbc	r17, r1
    2260:	08 3f       	cpi	r16, 0xF8	; 248
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	18 07       	cpc	r17, r24
    2266:	79 f7       	brne	.-34     	; 0x2246 <_ZN7Sd2Card11cardCommandEhm+0x32>
    2268:	ff 20       	and	r15, r15
    226a:	29 f0       	breq	.+10     	; 0x2276 <_ZN7Sd2Card11cardCommandEhm+0x62>
    226c:	88 e0       	ldi	r24, 0x08	; 8
    226e:	f8 12       	cpse	r15, r24
    2270:	04 c0       	rjmp	.+8      	; 0x227a <_ZN7Sd2Card11cardCommandEhm+0x66>
    2272:	87 e8       	ldi	r24, 0x87	; 135
    2274:	03 c0       	rjmp	.+6      	; 0x227c <_ZN7Sd2Card11cardCommandEhm+0x68>
    2276:	85 e9       	ldi	r24, 0x95	; 149
    2278:	01 c0       	rjmp	.+2      	; 0x227c <_ZN7Sd2Card11cardCommandEhm+0x68>
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	14 df       	rcall	.-472    	; 0x20a6 <_ZN8SPIClass8transferEh>
    227e:	10 e0       	ldi	r17, 0x00	; 0
    2280:	19 df       	rcall	.-462    	; 0x20b4 <_ZL6spiRecv>
    2282:	8a 87       	std	Y+10, r24	; 0x0a
    2284:	87 ff       	sbrs	r24, 7
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    2288:	1f 3f       	cpi	r17, 0xFF	; 255
    228a:	11 f0       	breq	.+4      	; 0x2290 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    228c:	1f 5f       	subi	r17, 0xFF	; 255
    228e:	f8 cf       	rjmp	.-16     	; 0x2280 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	ff 90       	pop	r15
    229a:	bf 90       	pop	r11
    229c:	af 90       	pop	r10
    229e:	9f 90       	pop	r9
    22a0:	8f 90       	pop	r8
    22a2:	08 95       	ret

000022a4 <_ZN7Sd2Card4initEhh>:
    22a4:	7f 92       	push	r7
    22a6:	8f 92       	push	r8
    22a8:	9f 92       	push	r9
    22aa:	af 92       	push	r10
    22ac:	bf 92       	push	r11
    22ae:	cf 92       	push	r12
    22b0:	df 92       	push	r13
    22b2:	ef 92       	push	r14
    22b4:	ff 92       	push	r15
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	1f 92       	push	r1
    22c0:	1f 92       	push	r1
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	7c 01       	movw	r14, r24
    22c8:	76 2e       	mov	r7, r22
    22ca:	fc 01       	movw	r30, r24
    22cc:	13 86       	std	Z+11, r1	; 0x0b
    22ce:	11 86       	std	Z+9, r1	; 0x09
    22d0:	16 82       	std	Z+6, r1	; 0x06
    22d2:	15 82       	std	Z+5, r1	; 0x05
    22d4:	44 83       	std	Z+4, r20	; 0x04
    22d6:	49 db       	rcall	.-2414   	; 0x196a <millis>
    22d8:	6b 01       	movw	r12, r22
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	f7 01       	movw	r30, r14
    22de:	84 81       	ldd	r24, Z+4	; 0x04
    22e0:	67 dc       	rcall	.-1842   	; 0x1bb0 <pinMode>
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	f7 01       	movw	r30, r14
    22e6:	84 81       	ldd	r24, Z+4	; 0x04
    22e8:	9f dc       	rcall	.-1730   	; 0x1c28 <digitalWrite>
    22ea:	0e 94 83 1b 	call	0x3706	; 0x3706 <_ZN8SPIClass5beginEv>
    22ee:	00 e0       	ldi	r16, 0x00	; 0
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	40 e9       	ldi	r20, 0x90	; 144
    22f4:	50 ed       	ldi	r21, 0xD0	; 208
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	ae de       	rcall	.-676    	; 0x205c <_ZN11SPISettingsC1Emhh>
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <_ZL8settings+0x1>
    2308:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <_ZL8settings>
    230c:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2310:	1a e0       	ldi	r17, 0x0A	; 10
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	c8 de       	rcall	.-624    	; 0x20a6 <_ZN8SPIClass8transferEh>
    2316:	11 50       	subi	r17, 0x01	; 1
    2318:	e1 f7       	brne	.-8      	; 0x2312 <_ZN7Sd2Card4initEhh+0x6e>
    231a:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <_ZN8SPIClass13interruptModeE>
    231e:	81 11       	cpse	r24, r1
    2320:	90 de       	rcall	.-736    	; 0x2042 <_ZN8SPIClass14endTransactionEv.part.3>
    2322:	c7 01       	movw	r24, r14
    2324:	d8 de       	rcall	.-592    	; 0x20d6 <_ZN7Sd2Card13chipSelectLowEv>
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	a9 01       	movw	r20, r18
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	c7 01       	movw	r24, r14
    2330:	71 df       	rcall	.-286    	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    2332:	08 2f       	mov	r16, r24
    2334:	f7 01       	movw	r30, r14
    2336:	82 87       	std	Z+10, r24	; 0x0a
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	41 f0       	breq	.+16     	; 0x234c <_ZN7Sd2Card4initEhh+0xa8>
    233c:	16 db       	rcall	.-2516   	; 0x196a <millis>
    233e:	6c 19       	sub	r22, r12
    2340:	7d 09       	sbc	r23, r13
    2342:	61 3d       	cpi	r22, 0xD1	; 209
    2344:	77 40       	sbci	r23, 0x07	; 7
    2346:	78 f3       	brcs	.-34     	; 0x2326 <_ZN7Sd2Card4initEhh+0x82>
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	4a c0       	rjmp	.+148    	; 0x23e0 <_ZN7Sd2Card4initEhh+0x13c>
    234c:	2a ea       	ldi	r18, 0xAA	; 170
    234e:	31 e0       	ldi	r19, 0x01	; 1
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	68 e0       	ldi	r22, 0x08	; 8
    2356:	c7 01       	movw	r24, r14
    2358:	5d df       	rcall	.-326    	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    235a:	82 ff       	sbrs	r24, 2
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <_ZN7Sd2Card4initEhh+0xc0>
    235e:	f7 01       	movw	r30, r14
    2360:	03 87       	std	Z+11, r16	; 0x0b
    2362:	0d c0       	rjmp	.+26     	; 0x237e <_ZN7Sd2Card4initEhh+0xda>
    2364:	04 e0       	ldi	r16, 0x04	; 4
    2366:	a6 de       	rcall	.-692    	; 0x20b4 <_ZL6spiRecv>
    2368:	f7 01       	movw	r30, r14
    236a:	82 87       	std	Z+10, r24	; 0x0a
    236c:	01 50       	subi	r16, 0x01	; 1
    236e:	d9 f7       	brne	.-10     	; 0x2366 <_ZN7Sd2Card4initEhh+0xc2>
    2370:	8a 3a       	cpi	r24, 0xAA	; 170
    2372:	11 f0       	breq	.+4      	; 0x2378 <_ZN7Sd2Card4initEhh+0xd4>
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	35 c0       	rjmp	.+106    	; 0x23e2 <_ZN7Sd2Card4initEhh+0x13e>
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	f7 01       	movw	r30, r14
    237c:	83 87       	std	Z+11, r24	; 0x0b
    237e:	f7 01       	movw	r30, r14
    2380:	83 85       	ldd	r24, Z+11	; 0x0b
    2382:	82 30       	cpi	r24, 0x02	; 2
    2384:	21 f0       	breq	.+8      	; 0x238e <_ZN7Sd2Card4initEhh+0xea>
    2386:	81 2c       	mov	r8, r1
    2388:	91 2c       	mov	r9, r1
    238a:	54 01       	movw	r10, r8
    238c:	05 c0       	rjmp	.+10     	; 0x2398 <_ZN7Sd2Card4initEhh+0xf4>
    238e:	81 2c       	mov	r8, r1
    2390:	91 2c       	mov	r9, r1
    2392:	a1 2c       	mov	r10, r1
    2394:	80 e4       	ldi	r24, 0x40	; 64
    2396:	b8 2e       	mov	r11, r24
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	a9 01       	movw	r20, r18
    239e:	67 e3       	ldi	r22, 0x37	; 55
    23a0:	c7 01       	movw	r24, r14
    23a2:	38 df       	rcall	.-400    	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    23a4:	a5 01       	movw	r20, r10
    23a6:	94 01       	movw	r18, r8
    23a8:	69 e2       	ldi	r22, 0x29	; 41
    23aa:	c7 01       	movw	r24, r14
    23ac:	33 df       	rcall	.-410    	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    23ae:	f7 01       	movw	r30, r14
    23b0:	82 87       	std	Z+10, r24	; 0x0a
    23b2:	88 23       	and	r24, r24
    23b4:	41 f0       	breq	.+16     	; 0x23c6 <_ZN7Sd2Card4initEhh+0x122>
    23b6:	d9 da       	rcall	.-2638   	; 0x196a <millis>
    23b8:	6c 19       	sub	r22, r12
    23ba:	7d 09       	sbc	r23, r13
    23bc:	61 3d       	cpi	r22, 0xD1	; 209
    23be:	77 40       	sbci	r23, 0x07	; 7
    23c0:	58 f3       	brcs	.-42     	; 0x2398 <_ZN7Sd2Card4initEhh+0xf4>
    23c2:	88 e0       	ldi	r24, 0x08	; 8
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <_ZN7Sd2Card4initEhh+0x13c>
    23c6:	f7 01       	movw	r30, r14
    23c8:	83 85       	ldd	r24, Z+11	; 0x0b
    23ca:	82 30       	cpi	r24, 0x02	; 2
    23cc:	c1 f4       	brne	.+48     	; 0x23fe <_ZN7Sd2Card4initEhh+0x15a>
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	6a e3       	ldi	r22, 0x3A	; 58
    23d6:	c7 01       	movw	r24, r14
    23d8:	1d df       	rcall	.-454    	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    23da:	88 23       	and	r24, r24
    23dc:	31 f0       	breq	.+12     	; 0x23ea <_ZN7Sd2Card4initEhh+0x146>
    23de:	86 e0       	ldi	r24, 0x06	; 6
    23e0:	f7 01       	movw	r30, r14
    23e2:	85 83       	std	Z+5, r24	; 0x05
    23e4:	c7 01       	movw	r24, r14
    23e6:	68 de       	rcall	.-816    	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    23e8:	10 c0       	rjmp	.+32     	; 0x240a <_ZN7Sd2Card4initEhh+0x166>
    23ea:	64 de       	rcall	.-824    	; 0x20b4 <_ZL6spiRecv>
    23ec:	80 7c       	andi	r24, 0xC0	; 192
    23ee:	80 3c       	cpi	r24, 0xC0	; 192
    23f0:	19 f4       	brne	.+6      	; 0x23f8 <_ZN7Sd2Card4initEhh+0x154>
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	f7 01       	movw	r30, r14
    23f6:	83 87       	std	Z+11, r24	; 0x0b
    23f8:	5d de       	rcall	.-838    	; 0x20b4 <_ZL6spiRecv>
    23fa:	5c de       	rcall	.-840    	; 0x20b4 <_ZL6spiRecv>
    23fc:	5b de       	rcall	.-842    	; 0x20b4 <_ZL6spiRecv>
    23fe:	c7 01       	movw	r24, r14
    2400:	5b de       	rcall	.-842    	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    2402:	67 2d       	mov	r22, r7
    2404:	c7 01       	movw	r24, r14
    2406:	94 de       	rcall	.-728    	; 0x2130 <_ZN7Sd2Card10setSckRateEh>
    2408:	18 2f       	mov	r17, r24
    240a:	81 2f       	mov	r24, r17
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	bf 90       	pop	r11
    2422:	af 90       	pop	r10
    2424:	9f 90       	pop	r9
    2426:	8f 90       	pop	r8
    2428:	7f 90       	pop	r7
    242a:	08 95       	ret

0000242c <_ZN7Sd2Card14waitStartBlockEv>:
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	ec 01       	movw	r28, r24
    2436:	99 da       	rcall	.-2766   	; 0x196a <millis>
    2438:	8b 01       	movw	r16, r22
    243a:	3c de       	rcall	.-904    	; 0x20b4 <_ZL6spiRecv>
    243c:	8a 87       	std	Y+10, r24	; 0x0a
    243e:	8f 3f       	cpi	r24, 0xFF	; 255
    2440:	41 f4       	brne	.+16     	; 0x2452 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    2442:	93 da       	rcall	.-2778   	; 0x196a <millis>
    2444:	60 1b       	sub	r22, r16
    2446:	71 0b       	sbc	r23, r17
    2448:	6d 32       	cpi	r22, 0x2D	; 45
    244a:	71 40       	sbci	r23, 0x01	; 1
    244c:	b0 f3       	brcs	.-20     	; 0x243a <_ZN7Sd2Card14waitStartBlockEv+0xe>
    244e:	8f e0       	ldi	r24, 0x0F	; 15
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    2452:	8e 3f       	cpi	r24, 0xFE	; 254
    2454:	31 f0       	breq	.+12     	; 0x2462 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    2456:	8d e0       	ldi	r24, 0x0D	; 13
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	ce 01       	movw	r24, r28
    245c:	2d de       	rcall	.-934    	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	01 c0       	rjmp	.+2      	; 0x2464 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret

0000246e <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	ec 01       	movw	r28, r24
    2480:	69 01       	movw	r12, r18
    2482:	c8 01       	movw	r24, r16
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	92 40       	sbci	r25, 0x02	; 2
    248c:	08 f0       	brcs	.+2      	; 0x2490 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    248e:	57 c0       	rjmp	.+174    	; 0x253e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    2490:	8e 81       	ldd	r24, Y+6	; 0x06
    2492:	88 23       	and	r24, r24
    2494:	71 f0       	breq	.+28     	; 0x24b2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    2496:	88 81       	ld	r24, Y
    2498:	99 81       	ldd	r25, Y+1	; 0x01
    249a:	aa 81       	ldd	r26, Y+2	; 0x02
    249c:	bb 81       	ldd	r27, Y+3	; 0x03
    249e:	84 17       	cp	r24, r20
    24a0:	95 07       	cpc	r25, r21
    24a2:	a6 07       	cpc	r26, r22
    24a4:	b7 07       	cpc	r27, r23
    24a6:	29 f4       	brne	.+10     	; 0x24b2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    24a8:	8f 81       	ldd	r24, Y+7	; 0x07
    24aa:	98 85       	ldd	r25, Y+8	; 0x08
    24ac:	c8 16       	cp	r12, r24
    24ae:	d9 06       	cpc	r13, r25
    24b0:	00 f5       	brcc	.+64     	; 0x24f2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    24b2:	48 83       	st	Y, r20
    24b4:	59 83       	std	Y+1, r21	; 0x01
    24b6:	6a 83       	std	Y+2, r22	; 0x02
    24b8:	7b 83       	std	Y+3, r23	; 0x03
    24ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    24bc:	83 30       	cpi	r24, 0x03	; 3
    24be:	39 f0       	breq	.+14     	; 0x24ce <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    24c0:	89 e0       	ldi	r24, 0x09	; 9
    24c2:	44 0f       	add	r20, r20
    24c4:	55 1f       	adc	r21, r21
    24c6:	66 1f       	adc	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	8a 95       	dec	r24
    24cc:	d1 f7       	brne	.-12     	; 0x24c2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    24ce:	9a 01       	movw	r18, r20
    24d0:	ab 01       	movw	r20, r22
    24d2:	61 e1       	ldi	r22, 0x11	; 17
    24d4:	ce 01       	movw	r24, r28
    24d6:	9e de       	rcall	.-708    	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    24d8:	88 23       	and	r24, r24
    24da:	19 f0       	breq	.+6      	; 0x24e2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	2e c0       	rjmp	.+92     	; 0x253e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    24e2:	ce 01       	movw	r24, r28
    24e4:	a3 df       	rcall	.-186    	; 0x242c <_ZN7Sd2Card14waitStartBlockEv>
    24e6:	88 23       	and	r24, r24
    24e8:	51 f1       	breq	.+84     	; 0x253e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    24ea:	18 86       	std	Y+8, r1	; 0x08
    24ec:	1f 82       	std	Y+7, r1	; 0x07
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	8e 83       	std	Y+6, r24	; 0x06
    24f2:	8f 81       	ldd	r24, Y+7	; 0x07
    24f4:	98 85       	ldd	r25, Y+8	; 0x08
    24f6:	8c 15       	cp	r24, r12
    24f8:	9d 05       	cpc	r25, r13
    24fa:	38 f4       	brcc	.+14     	; 0x250a <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    24fc:	db dd       	rcall	.-1098   	; 0x20b4 <_ZL6spiRecv>
    24fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2500:	98 85       	ldd	r25, Y+8	; 0x08
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	8f 83       	std	Y+7, r24	; 0x07
    2508:	f4 cf       	rjmp	.-24     	; 0x24f2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    250a:	67 01       	movw	r12, r14
    250c:	e0 0e       	add	r14, r16
    250e:	f1 1e       	adc	r15, r17
    2510:	ce 14       	cp	r12, r14
    2512:	df 04       	cpc	r13, r15
    2514:	29 f0       	breq	.+10     	; 0x2520 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    2516:	ce dd       	rcall	.-1124   	; 0x20b4 <_ZL6spiRecv>
    2518:	f6 01       	movw	r30, r12
    251a:	81 93       	st	Z+, r24
    251c:	6f 01       	movw	r12, r30
    251e:	f8 cf       	rjmp	.-16     	; 0x2510 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    2520:	8f 81       	ldd	r24, Y+7	; 0x07
    2522:	98 85       	ldd	r25, Y+8	; 0x08
    2524:	08 0f       	add	r16, r24
    2526:	19 1f       	adc	r17, r25
    2528:	18 87       	std	Y+8, r17	; 0x08
    252a:	0f 83       	std	Y+7, r16	; 0x07
    252c:	89 85       	ldd	r24, Y+9	; 0x09
    252e:	88 23       	and	r24, r24
    2530:	19 f0       	breq	.+6      	; 0x2538 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    2532:	01 15       	cp	r16, r1
    2534:	12 40       	sbci	r17, 0x02	; 2
    2536:	38 f0       	brcs	.+14     	; 0x2546 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    2538:	ce 01       	movw	r24, r28
    253a:	e2 dd       	rcall	.-1084   	; 0x2100 <_ZN7Sd2Card7readEndEv>
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    253e:	ce 01       	movw	r24, r28
    2540:	bb dd       	rcall	.-1162   	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	08 95       	ret

0000255a <_ZN7Sd2Card8readDataEmjjPh>:
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	01 15       	cp	r16, r1
    2564:	11 05       	cpc	r17, r1
    2566:	11 f0       	breq	.+4      	; 0x256c <_ZN7Sd2Card8readDataEmjjPh+0x12>
    2568:	82 df       	rcall	.-252    	; 0x246e <_ZN7Sd2Card8readDataEmjjPh.part.6>
    256a:	01 c0       	rjmp	.+2      	; 0x256e <_ZN7Sd2Card8readDataEmjjPh+0x14>
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	08 95       	ret

00002578 <_ZN7Sd2Card9readBlockEmPh>:
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	79 01       	movw	r14, r18
    2582:	00 e0       	ldi	r16, 0x00	; 0
    2584:	12 e0       	ldi	r17, 0x02	; 2
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	71 df       	rcall	.-286    	; 0x246e <_ZN7Sd2Card8readDataEmjjPh.part.6>
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	08 95       	ret

00002596 <_ZN7Sd2Card9writeDataEhPKh>:
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	8c 01       	movw	r16, r24
    25a4:	86 2f       	mov	r24, r22
    25a6:	7a 01       	movw	r14, r20
    25a8:	7e dd       	rcall	.-1284   	; 0x20a6 <_ZN8SPIClass8transferEh>
    25aa:	e7 01       	movw	r28, r14
    25ac:	8e ef       	ldi	r24, 0xFE	; 254
    25ae:	f8 1a       	sub	r15, r24
    25b0:	89 91       	ld	r24, Y+
    25b2:	79 dd       	rcall	.-1294   	; 0x20a6 <_ZN8SPIClass8transferEh>
    25b4:	ce 15       	cp	r28, r14
    25b6:	df 05       	cpc	r29, r15
    25b8:	d9 f7       	brne	.-10     	; 0x25b0 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    25ba:	8f ef       	ldi	r24, 0xFF	; 255
    25bc:	74 dd       	rcall	.-1304   	; 0x20a6 <_ZN8SPIClass8transferEh>
    25be:	8f ef       	ldi	r24, 0xFF	; 255
    25c0:	72 dd       	rcall	.-1308   	; 0x20a6 <_ZN8SPIClass8transferEh>
    25c2:	78 dd       	rcall	.-1296   	; 0x20b4 <_ZL6spiRecv>
    25c4:	f8 01       	movw	r30, r16
    25c6:	82 87       	std	Z+10, r24	; 0x0a
    25c8:	8f 71       	andi	r24, 0x1F	; 31
    25ca:	85 30       	cpi	r24, 0x05	; 5
    25cc:	31 f0       	breq	.+12     	; 0x25da <_ZN7Sd2Card9writeDataEhPKh+0x44>
    25ce:	81 e1       	ldi	r24, 0x11	; 17
    25d0:	85 83       	std	Z+5, r24	; 0x05
    25d2:	c8 01       	movw	r24, r16
    25d4:	71 dd       	rcall	.-1310   	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <_ZN7Sd2Card9writeDataEhPKh+0x46>
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	ff 90       	pop	r15
    25e6:	ef 90       	pop	r14
    25e8:	08 95       	ret

000025ea <_ZN7Sd2Card10writeBlockEmPKh>:
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	ec 01       	movw	r28, r24
    25f4:	89 01       	movw	r16, r18
    25f6:	41 15       	cp	r20, r1
    25f8:	51 05       	cpc	r21, r1
    25fa:	61 05       	cpc	r22, r1
    25fc:	71 05       	cpc	r23, r1
    25fe:	11 f4       	brne	.+4      	; 0x2604 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    2600:	82 e1       	ldi	r24, 0x12	; 18
    2602:	2d c0       	rjmp	.+90     	; 0x265e <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2604:	8b 85       	ldd	r24, Y+11	; 0x0b
    2606:	83 30       	cpi	r24, 0x03	; 3
    2608:	39 f0       	breq	.+14     	; 0x2618 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    260a:	89 e0       	ldi	r24, 0x09	; 9
    260c:	44 0f       	add	r20, r20
    260e:	55 1f       	adc	r21, r21
    2610:	66 1f       	adc	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	8a 95       	dec	r24
    2616:	d1 f7       	brne	.-12     	; 0x260c <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    2618:	9a 01       	movw	r18, r20
    261a:	ab 01       	movw	r20, r22
    261c:	68 e1       	ldi	r22, 0x18	; 24
    261e:	ce 01       	movw	r24, r28
    2620:	f9 dd       	rcall	.-1038   	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    2622:	88 23       	and	r24, r24
    2624:	11 f0       	breq	.+4      	; 0x262a <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    2626:	84 e0       	ldi	r24, 0x04	; 4
    2628:	1a c0       	rjmp	.+52     	; 0x265e <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    262a:	a8 01       	movw	r20, r16
    262c:	6e ef       	ldi	r22, 0xFE	; 254
    262e:	ce 01       	movw	r24, r28
    2630:	b2 df       	rcall	.-156    	; 0x2596 <_ZN7Sd2Card9writeDataEhPKh>
    2632:	88 23       	and	r24, r24
    2634:	a9 f0       	breq	.+42     	; 0x2660 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    2636:	68 e5       	ldi	r22, 0x58	; 88
    2638:	72 e0       	ldi	r23, 0x02	; 2
    263a:	ce 01       	movw	r24, r28
    263c:	d3 dd       	rcall	.-1114   	; 0x21e4 <_ZN7Sd2Card11waitNotBusyEj>
    263e:	81 11       	cpse	r24, r1
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    2642:	85 e1       	ldi	r24, 0x15	; 21
    2644:	0c c0       	rjmp	.+24     	; 0x265e <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	a9 01       	movw	r20, r18
    264c:	6d e0       	ldi	r22, 0x0D	; 13
    264e:	ce 01       	movw	r24, r28
    2650:	e1 dd       	rcall	.-1086   	; 0x2214 <_ZN7Sd2Card11cardCommandEhm>
    2652:	81 11       	cpse	r24, r1
    2654:	03 c0       	rjmp	.+6      	; 0x265c <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    2656:	2e dd       	rcall	.-1444   	; 0x20b4 <_ZL6spiRecv>
    2658:	88 23       	and	r24, r24
    265a:	31 f0       	breq	.+12     	; 0x2668 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    265c:	84 e1       	ldi	r24, 0x14	; 20
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	ce 01       	movw	r24, r28
    2662:	2a dd       	rcall	.-1452   	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	03 c0       	rjmp	.+6      	; 0x266e <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    2668:	ce 01       	movw	r24, r28
    266a:	26 dd       	rcall	.-1460   	; 0x20b8 <_ZN7Sd2Card14chipSelectHighEv>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	08 95       	ret

00002678 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2678:	ee e6       	ldi	r30, 0x6E	; 110
    267a:	f6 e0       	ldi	r31, 0x06	; 6
    267c:	80 e5       	ldi	r24, 0x50	; 80
    267e:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2680:	11 82       	std	Z+1, r1	; 0x01
    2682:	08 95       	ret

00002684 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	ec 01       	movw	r28, r24
    268a:	9c 01       	movw	r18, r24
    268c:	2a 5f       	subi	r18, 0xFA	; 250
    268e:	3f 4f       	sbci	r19, 0xFF	; 255
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	70 e0       	ldi	r23, 0x00	; 0
    2698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269c:	0f d6       	rcall	.+3102   	; 0x32bc <_ZN8SdVolume15allocContiguousEmPm>
    269e:	88 23       	and	r24, r24
    26a0:	a1 f0       	breq	.+40     	; 0x26ca <_ZN6SdFile10addClusterEv+0x46>
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	a9 8d       	ldd	r26, Y+25	; 0x19
    26a8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    26aa:	89 2b       	or	r24, r25
    26ac:	8a 2b       	or	r24, r26
    26ae:	8b 2b       	or	r24, r27
    26b0:	59 f4       	brne	.+22     	; 0x26c8 <_ZN6SdFile10addClusterEv+0x44>
    26b2:	8e 81       	ldd	r24, Y+6	; 0x06
    26b4:	9f 81       	ldd	r25, Y+7	; 0x07
    26b6:	a8 85       	ldd	r26, Y+8	; 0x08
    26b8:	b9 85       	ldd	r27, Y+9	; 0x09
    26ba:	8f 8b       	std	Y+23, r24	; 0x17
    26bc:	98 8f       	std	Y+24, r25	; 0x18
    26be:	a9 8f       	std	Y+25, r26	; 0x19
    26c0:	ba 8f       	std	Y+26, r27	; 0x1a
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	80 68       	ori	r24, 0x80	; 128
    26c6:	8c 83       	std	Y+4, r24	; 0x04
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <_ZN6SdFile13cacheDirEntryEh>:
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ec 01       	movw	r28, r24
    26d6:	46 2f       	mov	r20, r22
    26d8:	6e 85       	ldd	r22, Y+14	; 0x0e
    26da:	7f 85       	ldd	r23, Y+15	; 0x0f
    26dc:	88 89       	ldd	r24, Y+16	; 0x10
    26de:	99 89       	ldd	r25, Y+17	; 0x11
    26e0:	2a d4       	rcall	.+2132   	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    26e2:	88 23       	and	r24, r24
    26e4:	41 f0       	breq	.+16     	; 0x26f6 <_ZN6SdFile13cacheDirEntryEh+0x26>
    26e6:	8a 89       	ldd	r24, Y+18	; 0x12
    26e8:	20 e2       	ldi	r18, 0x20	; 32
    26ea:	82 9f       	mul	r24, r18
    26ec:	c0 01       	movw	r24, r0
    26ee:	11 24       	eor	r1, r1
    26f0:	87 58       	subi	r24, 0x87	; 135
    26f2:	99 4f       	sbci	r25, 0xF9	; 249
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <_ZN6SdFile13cacheDirEntryEh+0x2a>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <_ZN6SdFile8openRootEP8SdVolume>:
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	fc 01       	movw	r30, r24
    270a:	25 81       	ldd	r18, Z+5	; 0x05
    270c:	22 23       	and	r18, r18
    270e:	11 f0       	breq	.+4      	; 0x2714 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	41 c0       	rjmp	.+130    	; 0x2796 <_ZN6SdFile8openRootEP8SdVolume+0x96>
    2714:	8b 01       	movw	r16, r22
    2716:	ec 01       	movw	r28, r24
    2718:	fb 01       	movw	r30, r22
    271a:	87 89       	ldd	r24, Z+23	; 0x17
    271c:	80 31       	cpi	r24, 0x10	; 16
    271e:	b1 f4       	brne	.+44     	; 0x274c <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	1f 8a       	std	Y+23, r1	; 0x17
    2726:	18 8e       	std	Y+24, r1	; 0x18
    2728:	19 8e       	std	Y+25, r1	; 0x19
    272a:	1a 8e       	std	Y+26, r1	; 0x1a
    272c:	80 8d       	ldd	r24, Z+24	; 0x18
    272e:	91 8d       	ldd	r25, Z+25	; 0x19
    2730:	a0 e0       	ldi	r26, 0x00	; 0
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	25 e0       	ldi	r18, 0x05	; 5
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	aa 1f       	adc	r26, r26
    273c:	bb 1f       	adc	r27, r27
    273e:	2a 95       	dec	r18
    2740:	d1 f7       	brne	.-12     	; 0x2736 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	9c 8b       	std	Y+20, r25	; 0x14
    2746:	ad 8b       	std	Y+21, r26	; 0x15
    2748:	be 8b       	std	Y+22, r27	; 0x16
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <_ZN6SdFile8openRootEP8SdVolume+0x74>
    274c:	80 32       	cpi	r24, 0x20	; 32
    274e:	01 f7       	brne	.-64     	; 0x2710 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	fb 01       	movw	r30, r22
    2756:	42 8d       	ldd	r20, Z+26	; 0x1a
    2758:	53 8d       	ldd	r21, Z+27	; 0x1b
    275a:	64 8d       	ldd	r22, Z+28	; 0x1c
    275c:	75 8d       	ldd	r23, Z+29	; 0x1d
    275e:	4f 8b       	std	Y+23, r20	; 0x17
    2760:	58 8f       	std	Y+24, r21	; 0x18
    2762:	69 8f       	std	Y+25, r22	; 0x19
    2764:	7a 8f       	std	Y+26, r23	; 0x1a
    2766:	9e 01       	movw	r18, r28
    2768:	2d 5e       	subi	r18, 0xED	; 237
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	c8 01       	movw	r24, r16
    276e:	9e d4       	rcall	.+2364   	; 0x30ac <_ZNK8SdVolume9chainSizeEmPm>
    2770:	88 23       	and	r24, r24
    2772:	71 f2       	breq	.-100    	; 0x2710 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2774:	1c 8f       	std	Y+28, r17	; 0x1c
    2776:	0b 8f       	std	Y+27, r16	; 0x1b
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	8c 83       	std	Y+4, r24	; 0x04
    277c:	1e 82       	std	Y+6, r1	; 0x06
    277e:	1f 82       	std	Y+7, r1	; 0x07
    2780:	18 86       	std	Y+8, r1	; 0x08
    2782:	19 86       	std	Y+9, r1	; 0x09
    2784:	1a 86       	std	Y+10, r1	; 0x0a
    2786:	1b 86       	std	Y+11, r1	; 0x0b
    2788:	1c 86       	std	Y+12, r1	; 0x0c
    278a:	1d 86       	std	Y+13, r1	; 0x0d
    278c:	1e 86       	std	Y+14, r1	; 0x0e
    278e:	1f 86       	std	Y+15, r1	; 0x0f
    2790:	18 8a       	std	Y+16, r1	; 0x10
    2792:	19 8a       	std	Y+17, r1	; 0x11
    2794:	1a 8a       	std	Y+18, r1	; 0x12
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <_ZN6SdFile4readEPvj>:
    27a0:	2f 92       	push	r2
    27a2:	3f 92       	push	r3
    27a4:	4f 92       	push	r4
    27a6:	5f 92       	push	r5
    27a8:	6f 92       	push	r6
    27aa:	7f 92       	push	r7
    27ac:	8f 92       	push	r8
    27ae:	9f 92       	push	r9
    27b0:	af 92       	push	r10
    27b2:	bf 92       	push	r11
    27b4:	cf 92       	push	r12
    27b6:	df 92       	push	r13
    27b8:	ef 92       	push	r14
    27ba:	ff 92       	push	r15
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	ec 01       	movw	r28, r24
    27c6:	5b 01       	movw	r10, r22
    27c8:	4a 01       	movw	r8, r20
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	81 11       	cpse	r24, r1
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <_ZN6SdFile4readEPvj+0x36>
    27d0:	8f ef       	ldi	r24, 0xFF	; 255
    27d2:	9f ef       	ldi	r25, 0xFF	; 255
    27d4:	d4 c0       	rjmp	.+424    	; 0x297e <_ZN6SdFile4readEPvj+0x1de>
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
    27d8:	80 ff       	sbrs	r24, 0
    27da:	fa cf       	rjmp	.-12     	; 0x27d0 <_ZN6SdFile4readEPvj+0x30>
    27dc:	4b 88       	ldd	r4, Y+19	; 0x13
    27de:	5c 88       	ldd	r5, Y+20	; 0x14
    27e0:	6d 88       	ldd	r6, Y+21	; 0x15
    27e2:	7e 88       	ldd	r7, Y+22	; 0x16
    27e4:	4a 85       	ldd	r20, Y+10	; 0x0a
    27e6:	5b 85       	ldd	r21, Y+11	; 0x0b
    27e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ec:	c4 01       	movw	r24, r8
    27ee:	a0 e0       	ldi	r26, 0x00	; 0
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	93 01       	movw	r18, r6
    27f4:	82 01       	movw	r16, r4
    27f6:	04 1b       	sub	r16, r20
    27f8:	15 0b       	sbc	r17, r21
    27fa:	26 0b       	sbc	r18, r22
    27fc:	37 0b       	sbc	r19, r23
    27fe:	08 17       	cp	r16, r24
    2800:	19 07       	cpc	r17, r25
    2802:	2a 07       	cpc	r18, r26
    2804:	3b 07       	cpc	r19, r27
    2806:	18 f4       	brcc	.+6      	; 0x280e <_ZN6SdFile4readEPvj+0x6e>
    2808:	42 01       	movw	r8, r4
    280a:	84 1a       	sub	r8, r20
    280c:	95 0a       	sbc	r9, r21
    280e:	24 01       	movw	r4, r8
    2810:	1e 01       	movw	r2, r28
    2812:	26 e0       	ldi	r18, 0x06	; 6
    2814:	22 0e       	add	r2, r18
    2816:	31 1c       	adc	r3, r1
    2818:	41 14       	cp	r4, r1
    281a:	51 04       	cpc	r5, r1
    281c:	09 f4       	brne	.+2      	; 0x2820 <_ZN6SdFile4readEPvj+0x80>
    281e:	7d c0       	rjmp	.+250    	; 0x291a <_ZN6SdFile4readEPvj+0x17a>
    2820:	4a 85       	ldd	r20, Y+10	; 0x0a
    2822:	5b 85       	ldd	r21, Y+11	; 0x0b
    2824:	6c 85       	ldd	r22, Y+12	; 0x0c
    2826:	7d 85       	ldd	r23, Y+13	; 0x0d
    2828:	6a 01       	movw	r12, r20
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	d8 22       	and	r13, r24
    282e:	ed 81       	ldd	r30, Y+5	; 0x05
    2830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2834:	8a 01       	movw	r16, r20
    2836:	9b 01       	movw	r18, r22
    2838:	f9 e0       	ldi	r31, 0x09	; 9
    283a:	36 95       	lsr	r19
    283c:	27 95       	ror	r18
    283e:	17 95       	ror	r17
    2840:	07 95       	ror	r16
    2842:	fa 95       	dec	r31
    2844:	d1 f7       	brne	.-12     	; 0x283a <_ZN6SdFile4readEPvj+0x9a>
    2846:	e2 30       	cpi	r30, 0x02	; 2
    2848:	61 f4       	brne	.+24     	; 0x2862 <_ZN6SdFile4readEPvj+0xc2>
    284a:	fc 01       	movw	r30, r24
    284c:	82 8d       	ldd	r24, Z+26	; 0x1a
    284e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2850:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2852:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	60 0f       	add	r22, r16
    285a:	71 1f       	adc	r23, r17
    285c:	82 1f       	adc	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	3e c0       	rjmp	.+124    	; 0x28de <_ZN6SdFile4readEPvj+0x13e>
    2862:	fc 01       	movw	r30, r24
    2864:	74 80       	ldd	r7, Z+4	; 0x04
    2866:	7a 94       	dec	r7
    2868:	70 22       	and	r7, r16
    286a:	c1 14       	cp	r12, r1
    286c:	d1 04       	cpc	r13, r1
    286e:	c1 f4       	brne	.+48     	; 0x28a0 <_ZN6SdFile4readEPvj+0x100>
    2870:	71 10       	cpse	r7, r1
    2872:	16 c0       	rjmp	.+44     	; 0x28a0 <_ZN6SdFile4readEPvj+0x100>
    2874:	45 2b       	or	r20, r21
    2876:	46 2b       	or	r20, r22
    2878:	47 2b       	or	r20, r23
    287a:	49 f4       	brne	.+18     	; 0x288e <_ZN6SdFile4readEPvj+0xee>
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	a9 8d       	ldd	r26, Y+25	; 0x19
    2882:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2884:	8e 83       	std	Y+6, r24	; 0x06
    2886:	9f 83       	std	Y+7, r25	; 0x07
    2888:	a8 87       	std	Y+8, r26	; 0x08
    288a:	b9 87       	std	Y+9, r27	; 0x09
    288c:	09 c0       	rjmp	.+18     	; 0x28a0 <_ZN6SdFile4readEPvj+0x100>
    288e:	4e 81       	ldd	r20, Y+6	; 0x06
    2890:	5f 81       	ldd	r21, Y+7	; 0x07
    2892:	68 85       	ldd	r22, Y+8	; 0x08
    2894:	79 85       	ldd	r23, Y+9	; 0x09
    2896:	91 01       	movw	r18, r2
    2898:	87 d3       	rcall	.+1806   	; 0x2fa8 <_ZNK8SdVolume6fatGetEmPm>
    289a:	88 23       	and	r24, r24
    289c:	09 f4       	brne	.+2      	; 0x28a0 <_ZN6SdFile4readEPvj+0x100>
    289e:	98 cf       	rjmp	.-208    	; 0x27d0 <_ZN6SdFile4readEPvj+0x30>
    28a0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    28a2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    28a4:	8e 81       	ldd	r24, Y+6	; 0x06
    28a6:	9f 81       	ldd	r25, Y+7	; 0x07
    28a8:	a8 85       	ldd	r26, Y+8	; 0x08
    28aa:	b9 85       	ldd	r27, Y+9	; 0x09
    28ac:	02 97       	sbiw	r24, 0x02	; 2
    28ae:	a1 09       	sbc	r26, r1
    28b0:	b1 09       	sbc	r27, r1
    28b2:	05 84       	ldd	r0, Z+13	; 0x0d
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <_ZN6SdFile4readEPvj+0x11e>
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	aa 1f       	adc	r26, r26
    28bc:	bb 1f       	adc	r27, r27
    28be:	0a 94       	dec	r0
    28c0:	d2 f7       	brpl	.-12     	; 0x28b6 <_ZN6SdFile4readEPvj+0x116>
    28c2:	46 85       	ldd	r20, Z+14	; 0x0e
    28c4:	57 85       	ldd	r21, Z+15	; 0x0f
    28c6:	60 89       	ldd	r22, Z+16	; 0x10
    28c8:	71 89       	ldd	r23, Z+17	; 0x11
    28ca:	84 0f       	add	r24, r20
    28cc:	95 1f       	adc	r25, r21
    28ce:	a6 1f       	adc	r26, r22
    28d0:	b7 1f       	adc	r27, r23
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	67 0d       	add	r22, r7
    28d8:	71 1d       	adc	r23, r1
    28da:	81 1d       	adc	r24, r1
    28dc:	91 1d       	adc	r25, r1
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	32 e0       	ldi	r19, 0x02	; 2
    28e2:	2c 19       	sub	r18, r12
    28e4:	3d 09       	sbc	r19, r13
    28e6:	32 01       	movw	r6, r4
    28e8:	24 15       	cp	r18, r4
    28ea:	35 05       	cpc	r19, r5
    28ec:	08 f4       	brcc	.+2      	; 0x28f0 <_ZN6SdFile4readEPvj+0x150>
    28ee:	39 01       	movw	r6, r18
    28f0:	2c 81       	ldd	r18, Y+4	; 0x04
    28f2:	26 fd       	sbrc	r18, 6
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <_ZN6SdFile4readEPvj+0x15e>
    28f6:	61 14       	cp	r6, r1
    28f8:	f2 e0       	ldi	r31, 0x02	; 2
    28fa:	7f 06       	cpc	r7, r31
    28fc:	71 f5       	brne	.+92     	; 0x295a <_ZN6SdFile4readEPvj+0x1ba>
    28fe:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2902:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2906:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    290a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    290e:	60 17       	cp	r22, r16
    2910:	71 07       	cpc	r23, r17
    2912:	82 07       	cpc	r24, r18
    2914:	93 07       	cpc	r25, r19
    2916:	19 f4       	brne	.+6      	; 0x291e <_ZN6SdFile4readEPvj+0x17e>
    2918:	20 c0       	rjmp	.+64     	; 0x295a <_ZN6SdFile4readEPvj+0x1ba>
    291a:	c4 01       	movw	r24, r8
    291c:	30 c0       	rjmp	.+96     	; 0x297e <_ZN6SdFile4readEPvj+0x1de>
    291e:	75 01       	movw	r14, r10
    2920:	83 01       	movw	r16, r6
    2922:	96 01       	movw	r18, r12
    2924:	ab 01       	movw	r20, r22
    2926:	bc 01       	movw	r22, r24
    2928:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <_ZN8SdVolume7sdCard_E>
    292c:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <_ZN8SdVolume7sdCard_E+0x1>
    2930:	14 de       	rcall	.-984    	; 0x255a <_ZN7Sd2Card8readDataEmjjPh>
    2932:	88 23       	and	r24, r24
    2934:	09 f4       	brne	.+2      	; 0x2938 <_ZN6SdFile4readEPvj+0x198>
    2936:	4c cf       	rjmp	.-360    	; 0x27d0 <_ZN6SdFile4readEPvj+0x30>
    2938:	a6 0c       	add	r10, r6
    293a:	b7 1c       	adc	r11, r7
    293c:	8a 85       	ldd	r24, Y+10	; 0x0a
    293e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2940:	ac 85       	ldd	r26, Y+12	; 0x0c
    2942:	bd 85       	ldd	r27, Y+13	; 0x0d
    2944:	86 0d       	add	r24, r6
    2946:	97 1d       	adc	r25, r7
    2948:	a1 1d       	adc	r26, r1
    294a:	b1 1d       	adc	r27, r1
    294c:	8a 87       	std	Y+10, r24	; 0x0a
    294e:	9b 87       	std	Y+11, r25	; 0x0b
    2950:	ac 87       	std	Y+12, r26	; 0x0c
    2952:	bd 87       	std	Y+13, r27	; 0x0d
    2954:	46 18       	sub	r4, r6
    2956:	57 08       	sbc	r5, r7
    2958:	5f cf       	rjmp	.-322    	; 0x2818 <_ZN6SdFile4readEPvj+0x78>
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	ec d2       	rcall	.+1496   	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    295e:	88 23       	and	r24, r24
    2960:	09 f4       	brne	.+2      	; 0x2964 <_ZN6SdFile4readEPvj+0x1c4>
    2962:	36 cf       	rjmp	.-404    	; 0x27d0 <_ZN6SdFile4readEPvj+0x30>
    2964:	f6 01       	movw	r30, r12
    2966:	e7 58       	subi	r30, 0x87	; 135
    2968:	f9 4f       	sbci	r31, 0xF9	; 249
    296a:	d5 01       	movw	r26, r10
    296c:	cf 01       	movw	r24, r30
    296e:	86 0d       	add	r24, r6
    2970:	97 1d       	adc	r25, r7
    2972:	8e 17       	cp	r24, r30
    2974:	9f 07       	cpc	r25, r31
    2976:	01 f3       	breq	.-64     	; 0x2938 <_ZN6SdFile4readEPvj+0x198>
    2978:	21 91       	ld	r18, Z+
    297a:	2d 93       	st	X+, r18
    297c:	fa cf       	rjmp	.-12     	; 0x2972 <_ZN6SdFile4readEPvj+0x1d2>
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	8f 90       	pop	r8
    2996:	7f 90       	pop	r7
    2998:	6f 90       	pop	r6
    299a:	5f 90       	pop	r5
    299c:	4f 90       	pop	r4
    299e:	3f 90       	pop	r3
    29a0:	2f 90       	pop	r2
    29a2:	08 95       	ret

000029a4 <_ZN6SdFile7seekSetEm>:
    29a4:	8f 92       	push	r8
    29a6:	9f 92       	push	r9
    29a8:	af 92       	push	r10
    29aa:	bf 92       	push	r11
    29ac:	cf 92       	push	r12
    29ae:	df 92       	push	r13
    29b0:	ef 92       	push	r14
    29b2:	ff 92       	push	r15
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	ec 01       	movw	r28, r24
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	81 11       	cpse	r24, r1
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <_ZN6SdFile7seekSetEm+0x24>
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	77 c0       	rjmp	.+238    	; 0x2ab6 <_ZN6SdFile7seekSetEm+0x112>
    29c8:	0b 89       	ldd	r16, Y+19	; 0x13
    29ca:	1c 89       	ldd	r17, Y+20	; 0x14
    29cc:	2d 89       	ldd	r18, Y+21	; 0x15
    29ce:	3e 89       	ldd	r19, Y+22	; 0x16
    29d0:	04 17       	cp	r16, r20
    29d2:	15 07       	cpc	r17, r21
    29d4:	26 07       	cpc	r18, r22
    29d6:	37 07       	cpc	r19, r23
    29d8:	a8 f3       	brcs	.-22     	; 0x29c4 <_ZN6SdFile7seekSetEm+0x20>
    29da:	6a 01       	movw	r12, r20
    29dc:	7b 01       	movw	r14, r22
    29de:	82 30       	cpi	r24, 0x02	; 2
    29e0:	29 f4       	brne	.+10     	; 0x29ec <_ZN6SdFile7seekSetEm+0x48>
    29e2:	ca 86       	std	Y+10, r12	; 0x0a
    29e4:	db 86       	std	Y+11, r13	; 0x0b
    29e6:	ec 86       	std	Y+12, r14	; 0x0c
    29e8:	fd 86       	std	Y+13, r15	; 0x0d
    29ea:	0d c0       	rjmp	.+26     	; 0x2a06 <_ZN6SdFile7seekSetEm+0x62>
    29ec:	c1 14       	cp	r12, r1
    29ee:	d1 04       	cpc	r13, r1
    29f0:	e1 04       	cpc	r14, r1
    29f2:	f1 04       	cpc	r15, r1
    29f4:	51 f4       	brne	.+20     	; 0x2a0a <_ZN6SdFile7seekSetEm+0x66>
    29f6:	1e 82       	std	Y+6, r1	; 0x06
    29f8:	1f 82       	std	Y+7, r1	; 0x07
    29fa:	18 86       	std	Y+8, r1	; 0x08
    29fc:	19 86       	std	Y+9, r1	; 0x09
    29fe:	1a 86       	std	Y+10, r1	; 0x0a
    2a00:	1b 86       	std	Y+11, r1	; 0x0b
    2a02:	1c 86       	std	Y+12, r1	; 0x0c
    2a04:	1d 86       	std	Y+13, r1	; 0x0d
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	56 c0       	rjmp	.+172    	; 0x2ab6 <_ZN6SdFile7seekSetEm+0x112>
    2a0a:	8a 84       	ldd	r8, Y+10	; 0x0a
    2a0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0e:	ac 84       	ldd	r10, Y+12	; 0x0c
    2a10:	bd 84       	ldd	r11, Y+13	; 0x0d
    2a12:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2a14:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2a16:	25 85       	ldd	r18, Z+13	; 0x0d
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	27 5f       	subi	r18, 0xF7	; 247
    2a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1e:	b5 01       	movw	r22, r10
    2a20:	a4 01       	movw	r20, r8
    2a22:	41 50       	subi	r20, 0x01	; 1
    2a24:	51 09       	sbc	r21, r1
    2a26:	61 09       	sbc	r22, r1
    2a28:	71 09       	sbc	r23, r1
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	04 c0       	rjmp	.+8      	; 0x2a36 <_ZN6SdFile7seekSetEm+0x92>
    2a2e:	76 95       	lsr	r23
    2a30:	67 95       	ror	r22
    2a32:	57 95       	ror	r21
    2a34:	47 95       	ror	r20
    2a36:	0a 94       	dec	r0
    2a38:	d2 f7       	brpl	.-12     	; 0x2a2e <_ZN6SdFile7seekSetEm+0x8a>
    2a3a:	d7 01       	movw	r26, r14
    2a3c:	c6 01       	movw	r24, r12
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	a1 09       	sbc	r26, r1
    2a42:	b1 09       	sbc	r27, r1
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <_ZN6SdFile7seekSetEm+0xaa>
    2a46:	b6 95       	lsr	r27
    2a48:	a7 95       	ror	r26
    2a4a:	97 95       	ror	r25
    2a4c:	87 95       	ror	r24
    2a4e:	2a 95       	dec	r18
    2a50:	d2 f7       	brpl	.-12     	; 0x2a46 <_ZN6SdFile7seekSetEm+0xa2>
    2a52:	84 17       	cp	r24, r20
    2a54:	95 07       	cpc	r25, r21
    2a56:	a6 07       	cpc	r26, r22
    2a58:	b7 07       	cpc	r27, r23
    2a5a:	20 f0       	brcs	.+8      	; 0x2a64 <_ZN6SdFile7seekSetEm+0xc0>
    2a5c:	89 28       	or	r8, r9
    2a5e:	8a 28       	or	r8, r10
    2a60:	8b 28       	or	r8, r11
    2a62:	71 f4       	brne	.+28     	; 0x2a80 <_ZN6SdFile7seekSetEm+0xdc>
    2a64:	4f 89       	ldd	r20, Y+23	; 0x17
    2a66:	58 8d       	ldd	r21, Y+24	; 0x18
    2a68:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6c:	4e 83       	std	Y+6, r20	; 0x06
    2a6e:	5f 83       	std	Y+7, r21	; 0x07
    2a70:	68 87       	std	Y+8, r22	; 0x08
    2a72:	79 87       	std	Y+9, r23	; 0x09
    2a74:	4c 01       	movw	r8, r24
    2a76:	5d 01       	movw	r10, r26
    2a78:	8e 01       	movw	r16, r28
    2a7a:	0a 5f       	subi	r16, 0xFA	; 250
    2a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7e:	15 c0       	rjmp	.+42     	; 0x2aaa <_ZN6SdFile7seekSetEm+0x106>
    2a80:	84 1b       	sub	r24, r20
    2a82:	95 0b       	sbc	r25, r21
    2a84:	a6 0b       	sbc	r26, r22
    2a86:	b7 0b       	sbc	r27, r23
    2a88:	f5 cf       	rjmp	.-22     	; 0x2a74 <_ZN6SdFile7seekSetEm+0xd0>
    2a8a:	4e 81       	ldd	r20, Y+6	; 0x06
    2a8c:	5f 81       	ldd	r21, Y+7	; 0x07
    2a8e:	68 85       	ldd	r22, Y+8	; 0x08
    2a90:	79 85       	ldd	r23, Y+9	; 0x09
    2a92:	98 01       	movw	r18, r16
    2a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a98:	87 d2       	rcall	.+1294   	; 0x2fa8 <_ZNK8SdVolume6fatGetEmPm>
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	89 1a       	sub	r8, r25
    2a9e:	91 08       	sbc	r9, r1
    2aa0:	a1 08       	sbc	r10, r1
    2aa2:	b1 08       	sbc	r11, r1
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <_ZN6SdFile7seekSetEm+0x106>
    2aa8:	8d cf       	rjmp	.-230    	; 0x29c4 <_ZN6SdFile7seekSetEm+0x20>
    2aaa:	81 14       	cp	r8, r1
    2aac:	91 04       	cpc	r9, r1
    2aae:	a1 04       	cpc	r10, r1
    2ab0:	b1 04       	cpc	r11, r1
    2ab2:	59 f7       	brne	.-42     	; 0x2a8a <_ZN6SdFile7seekSetEm+0xe6>
    2ab4:	96 cf       	rjmp	.-212    	; 0x29e2 <_ZN6SdFile7seekSetEm+0x3e>
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
    2ac6:	bf 90       	pop	r11
    2ac8:	af 90       	pop	r10
    2aca:	9f 90       	pop	r9
    2acc:	8f 90       	pop	r8
    2ace:	08 95       	ret

00002ad0 <_ZN6SdFile4syncEv>:
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	ec 01       	movw	r28, r24
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	88 23       	and	r24, r24
    2ade:	b9 f1       	breq	.+110    	; 0x2b4e <_ZN6SdFile4syncEv+0x7e>
    2ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae2:	87 ff       	sbrs	r24, 7
    2ae4:	2f c0       	rjmp	.+94     	; 0x2b44 <_ZN6SdFile4syncEv+0x74>
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	ce 01       	movw	r24, r28
    2aea:	f2 dd       	rcall	.-1052   	; 0x26d0 <_ZN6SdFile13cacheDirEntryEh>
    2aec:	8c 01       	movw	r16, r24
    2aee:	89 2b       	or	r24, r25
    2af0:	71 f1       	breq	.+92     	; 0x2b4e <_ZN6SdFile4syncEv+0x7e>
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	82 30       	cpi	r24, 0x02	; 2
    2af6:	48 f4       	brcc	.+18     	; 0x2b0a <_ZN6SdFile4syncEv+0x3a>
    2af8:	8b 89       	ldd	r24, Y+19	; 0x13
    2afa:	9c 89       	ldd	r25, Y+20	; 0x14
    2afc:	ad 89       	ldd	r26, Y+21	; 0x15
    2afe:	be 89       	ldd	r27, Y+22	; 0x16
    2b00:	f8 01       	movw	r30, r16
    2b02:	84 8f       	std	Z+28, r24	; 0x1c
    2b04:	95 8f       	std	Z+29, r25	; 0x1d
    2b06:	a6 8f       	std	Z+30, r26	; 0x1e
    2b08:	b7 8f       	std	Z+31, r27	; 0x1f
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2b10:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2b12:	f8 01       	movw	r30, r16
    2b14:	93 8f       	std	Z+27, r25	; 0x1b
    2b16:	82 8f       	std	Z+26, r24	; 0x1a
    2b18:	b5 8b       	std	Z+21, r27	; 0x15
    2b1a:	a4 8b       	std	Z+20, r26	; 0x14
    2b1c:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <_ZN6SdFile9dateTime_E>
    2b20:	f0 91 71 06 	lds	r31, 0x0671	; 0x800671 <_ZN6SdFile9dateTime_E+0x1>
    2b24:	30 97       	sbiw	r30, 0x00	; 0
    2b26:	59 f0       	breq	.+22     	; 0x2b3e <_ZN6SdFile4syncEv+0x6e>
    2b28:	b8 01       	movw	r22, r16
    2b2a:	6a 5e       	subi	r22, 0xEA	; 234
    2b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2e:	c8 01       	movw	r24, r16
    2b30:	48 96       	adiw	r24, 0x18	; 24
    2b32:	19 95       	eicall
    2b34:	f8 01       	movw	r30, r16
    2b36:	80 8d       	ldd	r24, Z+24	; 0x18
    2b38:	91 8d       	ldd	r25, Z+25	; 0x19
    2b3a:	93 8b       	std	Z+19, r25	; 0x13
    2b3c:	82 8b       	std	Z+18, r24	; 0x12
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	8f 77       	andi	r24, 0x7F	; 127
    2b42:	8c 83       	std	Y+4, r24	; 0x04
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	bb c1       	rjmp	.+886    	; 0x2ec4 <_ZN8SdVolume10cacheFlushEv>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	08 95       	ret

00002b5a <_ZN6SdFile5closeEv>:
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	ec 01       	movw	r28, r24
    2b60:	b7 df       	rcall	.-146    	; 0x2ad0 <_ZN6SdFile4syncEv>
    2b62:	88 23       	and	r24, r24
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <_ZN6SdFile5closeEv+0x10>
    2b66:	1d 82       	std	Y+5, r1	; 0x05
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2b70:	2f 92       	push	r2
    2b72:	3f 92       	push	r3
    2b74:	4f 92       	push	r4
    2b76:	5f 92       	push	r5
    2b78:	6f 92       	push	r6
    2b7a:	7f 92       	push	r7
    2b7c:	8f 92       	push	r8
    2b7e:	9f 92       	push	r9
    2b80:	af 92       	push	r10
    2b82:	bf 92       	push	r11
    2b84:	cf 92       	push	r12
    2b86:	df 92       	push	r13
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <_ZN6SdFile5writeEPKvj+0x26>
    2b96:	1f 92       	push	r1
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	8c 01       	movw	r16, r24
    2b9e:	6b 01       	movw	r12, r22
    2ba0:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	15 96       	adiw	r26, 0x05	; 5
    2ba6:	8c 91       	ld	r24, X
    2ba8:	15 97       	sbiw	r26, 0x05	; 5
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	c1 f4       	brne	.+48     	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>
    2bae:	14 96       	adiw	r26, 0x04	; 4
    2bb0:	8c 91       	ld	r24, X
    2bb2:	81 ff       	sbrs	r24, 1
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2bb6:	82 ff       	sbrs	r24, 2
    2bb8:	1c c0       	rjmp	.+56     	; 0x2bf2 <_ZN6SdFile5writeEPKvj+0x82>
    2bba:	f8 01       	movw	r30, r16
    2bbc:	43 89       	ldd	r20, Z+19	; 0x13
    2bbe:	54 89       	ldd	r21, Z+20	; 0x14
    2bc0:	65 89       	ldd	r22, Z+21	; 0x15
    2bc2:	76 89       	ldd	r23, Z+22	; 0x16
    2bc4:	82 85       	ldd	r24, Z+10	; 0x0a
    2bc6:	93 85       	ldd	r25, Z+11	; 0x0b
    2bc8:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bca:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bcc:	84 17       	cp	r24, r20
    2bce:	95 07       	cpc	r25, r21
    2bd0:	a6 07       	cpc	r26, r22
    2bd2:	b7 07       	cpc	r27, r23
    2bd4:	71 f0       	breq	.+28     	; 0x2bf2 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	e5 de       	rcall	.-566    	; 0x29a4 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    2bda:	81 11       	cpse	r24, r1
    2bdc:	0a c0       	rjmp	.+20     	; 0x2bf2 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	d8 01       	movw	r26, r16
    2be4:	13 96       	adiw	r26, 0x03	; 3
    2be6:	9c 93       	st	X, r25
    2be8:	8e 93       	st	-X, r24
    2bea:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	42 c1       	rjmp	.+644    	; 0x2e76 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2bf2:	41 01       	movw	r8, r2
    2bf4:	82 c0       	rjmp	.+260    	; 0x2cfa <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2bf6:	5b 96       	adiw	r26, 0x1b	; 27
    2bf8:	8d 91       	ld	r24, X+
    2bfa:	9c 91       	ld	r25, X
    2bfc:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2bfe:	fc 01       	movw	r30, r24
    2c00:	74 80       	ldd	r7, Z+4	; 0x04
    2c02:	2f ef       	ldi	r18, 0xFF	; 255
    2c04:	27 0d       	add	r18, r7
    2c06:	2a 01       	movw	r4, r20
    2c08:	3b 01       	movw	r6, r22
    2c0a:	39 e0       	ldi	r19, 0x09	; 9
    2c0c:	76 94       	lsr	r7
    2c0e:	67 94       	ror	r6
    2c10:	57 94       	ror	r5
    2c12:	47 94       	ror	r4
    2c14:	3a 95       	dec	r19
    2c16:	d1 f7       	brne	.-12     	; 0x2c0c <_ZN6SdFile5writeEPKvj+0x9c>
    2c18:	72 2e       	mov	r7, r18
    2c1a:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2c1c:	7a 01       	movw	r14, r20
    2c1e:	f1 e0       	ldi	r31, 0x01	; 1
    2c20:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    2c22:	77 20       	and	r7, r7
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <_ZN6SdFile5writeEPKvj+0xb8>
    2c26:	75 c0       	rjmp	.+234    	; 0x2d12 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	92 e0       	ldi	r25, 0x02	; 2
    2c2c:	8e 19       	sub	r24, r14
    2c2e:	9f 09       	sbc	r25, r15
    2c30:	54 01       	movw	r10, r8
    2c32:	88 15       	cp	r24, r8
    2c34:	99 05       	cpc	r25, r9
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <_ZN6SdFile5writeEPKvj+0xca>
    2c38:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2c3a:	d8 01       	movw	r26, r16
    2c3c:	5b 96       	adiw	r26, 0x1b	; 27
    2c3e:	2d 91       	ld	r18, X+
    2c40:	3c 91       	ld	r19, X
    2c42:	5c 97       	sbiw	r26, 0x1c	; 28
    2c44:	16 96       	adiw	r26, 0x06	; 6
    2c46:	8d 91       	ld	r24, X+
    2c48:	9d 91       	ld	r25, X+
    2c4a:	0d 90       	ld	r0, X+
    2c4c:	bc 91       	ld	r27, X
    2c4e:	a0 2d       	mov	r26, r0
    2c50:	02 97       	sbiw	r24, 0x02	; 2
    2c52:	a1 09       	sbc	r26, r1
    2c54:	b1 09       	sbc	r27, r1
    2c56:	f9 01       	movw	r30, r18
    2c58:	05 84       	ldd	r0, Z+13	; 0x0d
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <_ZN6SdFile5writeEPKvj+0xf4>
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	aa 1f       	adc	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	0a 94       	dec	r0
    2c66:	d2 f7       	brpl	.-12     	; 0x2c5c <_ZN6SdFile5writeEPKvj+0xec>
    2c68:	46 85       	ldd	r20, Z+14	; 0x0e
    2c6a:	57 85       	ldd	r21, Z+15	; 0x0f
    2c6c:	60 89       	ldd	r22, Z+16	; 0x10
    2c6e:	71 89       	ldd	r23, Z+17	; 0x11
    2c70:	84 0f       	add	r24, r20
    2c72:	95 1f       	adc	r25, r21
    2c74:	a6 1f       	adc	r26, r22
    2c76:	b7 1f       	adc	r27, r23
    2c78:	9c 01       	movw	r18, r24
    2c7a:	ad 01       	movw	r20, r26
    2c7c:	27 0d       	add	r18, r7
    2c7e:	31 1d       	adc	r19, r1
    2c80:	41 1d       	adc	r20, r1
    2c82:	51 1d       	adc	r21, r1
    2c84:	29 01       	movw	r4, r18
    2c86:	3a 01       	movw	r6, r20
    if (n == 512) {
    2c88:	a1 14       	cp	r10, r1
    2c8a:	32 e0       	ldi	r19, 0x02	; 2
    2c8c:	b3 06       	cpc	r11, r19
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <_ZN6SdFile5writeEPKvj+0x122>
    2c90:	85 c0       	rjmp	.+266    	; 0x2d9c <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2c92:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2c96:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c9a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c9e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2ca2:	48 16       	cp	r4, r24
    2ca4:	59 06       	cpc	r5, r25
    2ca6:	6a 06       	cpc	r6, r26
    2ca8:	7b 06       	cpc	r7, r27
    2caa:	59 f4       	brne	.+22     	; 0x2cc2 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2cac:	8f ef       	ldi	r24, 0xFF	; 255
    2cae:	9f ef       	ldi	r25, 0xFF	; 255
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2cb6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2cba:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2cbe:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2cc2:	96 01       	movw	r18, r12
    2cc4:	b3 01       	movw	r22, r6
    2cc6:	a2 01       	movw	r20, r4
    2cc8:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <_ZN8SdVolume7sdCard_E>
    2ccc:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <_ZN8SdVolume7sdCard_E+0x1>
    2cd0:	8c dc       	rcall	.-1768   	; 0x25ea <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2cd2:	88 23       	and	r24, r24
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <_ZN6SdFile5writeEPKvj+0x168>
    2cd6:	83 cf       	rjmp	.-250    	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    2cd8:	9e ef       	ldi	r25, 0xFE	; 254
    2cda:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2cdc:	8a 18       	sub	r8, r10
    2cde:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	82 85       	ldd	r24, Z+10	; 0x0a
    2ce4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ce6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ce8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cea:	8a 0d       	add	r24, r10
    2cec:	9b 1d       	adc	r25, r11
    2cee:	a1 1d       	adc	r26, r1
    2cf0:	b1 1d       	adc	r27, r1
    2cf2:	82 87       	std	Z+10, r24	; 0x0a
    2cf4:	93 87       	std	Z+11, r25	; 0x0b
    2cf6:	a4 87       	std	Z+12, r26	; 0x0c
    2cf8:	b5 87       	std	Z+13, r27	; 0x0d
    2cfa:	d8 01       	movw	r26, r16
    2cfc:	1a 96       	adiw	r26, 0x0a	; 10
    2cfe:	4d 91       	ld	r20, X+
    2d00:	5d 91       	ld	r21, X+
    2d02:	6d 91       	ld	r22, X+
    2d04:	7c 91       	ld	r23, X
    2d06:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2d08:	81 14       	cp	r8, r1
    2d0a:	91 04       	cpc	r9, r1
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <_ZN6SdFile5writeEPKvj+0x1a0>
    2d0e:	73 cf       	rjmp	.-282    	; 0x2bf6 <_ZN6SdFile5writeEPKvj+0x86>
    2d10:	83 c0       	rjmp	.+262    	; 0x2e18 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2d12:	e1 14       	cp	r14, r1
    2d14:	f1 04       	cpc	r15, r1
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <_ZN6SdFile5writeEPKvj+0x1aa>
    2d18:	87 cf       	rjmp	.-242    	; 0x2c28 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    2d1a:	16 96       	adiw	r26, 0x06	; 6
    2d1c:	4d 91       	ld	r20, X+
    2d1e:	5d 91       	ld	r21, X+
    2d20:	6d 91       	ld	r22, X+
    2d22:	7c 91       	ld	r23, X
    2d24:	19 97       	sbiw	r26, 0x09	; 9
    2d26:	41 15       	cp	r20, r1
    2d28:	51 05       	cpc	r21, r1
    2d2a:	61 05       	cpc	r22, r1
    2d2c:	71 05       	cpc	r23, r1
    2d2e:	59 f4       	brne	.+22     	; 0x2d46 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    2d30:	57 96       	adiw	r26, 0x17	; 23
    2d32:	8d 91       	ld	r24, X+
    2d34:	9d 91       	ld	r25, X+
    2d36:	0d 90       	ld	r0, X+
    2d38:	bc 91       	ld	r27, X
    2d3a:	a0 2d       	mov	r26, r0
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	a1 05       	cpc	r26, r1
    2d40:	b1 05       	cpc	r27, r1
    2d42:	31 f5       	brne	.+76     	; 0x2d90 <_ZN6SdFile5writeEPKvj+0x220>
    2d44:	20 c0       	rjmp	.+64     	; 0x2d86 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2d46:	9e 01       	movw	r18, r28
    2d48:	2f 5f       	subi	r18, 0xFF	; 255
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	2d d1       	rcall	.+602    	; 0x2fa8 <_ZNK8SdVolume6fatGetEmPm>
    2d4e:	88 23       	and	r24, r24
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <_ZN6SdFile5writeEPKvj+0x1e4>
    2d52:	4d cf       	rjmp	.-358    	; 0x2bee <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	9a 81       	ldd	r25, Y+2	; 0x02
    2d58:	ab 81       	ldd	r26, Y+3	; 0x03
    2d5a:	bc 81       	ldd	r27, Y+4	; 0x04
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2d60:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2d62:	f9 01       	movw	r30, r18
    2d64:	27 89       	ldd	r18, Z+23	; 0x17
    2d66:	20 31       	cpi	r18, 0x10	; 16
    2d68:	29 f0       	breq	.+10     	; 0x2d74 <_ZN6SdFile5writeEPKvj+0x204>
    2d6a:	48 ef       	ldi	r20, 0xF8	; 248
    2d6c:	5f ef       	ldi	r21, 0xFF	; 255
    2d6e:	6f ef       	ldi	r22, 0xFF	; 255
    2d70:	7f e0       	ldi	r23, 0x0F	; 15
    2d72:	04 c0       	rjmp	.+8      	; 0x2d7c <_ZN6SdFile5writeEPKvj+0x20c>
    2d74:	48 ef       	ldi	r20, 0xF8	; 248
    2d76:	5f ef       	ldi	r21, 0xFF	; 255
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	84 17       	cp	r24, r20
    2d7e:	95 07       	cpc	r25, r21
    2d80:	a6 07       	cpc	r26, r22
    2d82:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2d84:	28 f0       	brcs	.+10     	; 0x2d90 <_ZN6SdFile5writeEPKvj+0x220>
    2d86:	c8 01       	movw	r24, r16
    2d88:	7d dc       	rcall	.-1798   	; 0x2684 <_ZN6SdFile10addClusterEv>
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	4d cf       	rjmp	.-358    	; 0x2c28 <_ZN6SdFile5writeEPKvj+0xb8>
    2d8e:	27 cf       	rjmp	.-434    	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    2d90:	f8 01       	movw	r30, r16
    2d92:	86 83       	std	Z+6, r24	; 0x06
    2d94:	97 83       	std	Z+7, r25	; 0x07
    2d96:	a0 87       	std	Z+8, r26	; 0x08
    2d98:	b1 87       	std	Z+9, r27	; 0x09
    2d9a:	46 cf       	rjmp	.-372    	; 0x2c28 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2d9c:	e1 14       	cp	r14, r1
    2d9e:	f1 04       	cpc	r15, r1
    2da0:	21 f5       	brne	.+72     	; 0x2dea <_ZN6SdFile5writeEPKvj+0x27a>
    2da2:	d8 01       	movw	r26, r16
    2da4:	1a 96       	adiw	r26, 0x0a	; 10
    2da6:	4d 91       	ld	r20, X+
    2da8:	5d 91       	ld	r21, X+
    2daa:	6d 91       	ld	r22, X+
    2dac:	7c 91       	ld	r23, X
    2dae:	1d 97       	sbiw	r26, 0x0d	; 13
    2db0:	53 96       	adiw	r26, 0x13	; 19
    2db2:	8d 91       	ld	r24, X+
    2db4:	9d 91       	ld	r25, X+
    2db6:	0d 90       	ld	r0, X+
    2db8:	bc 91       	ld	r27, X
    2dba:	a0 2d       	mov	r26, r0
    2dbc:	48 17       	cp	r20, r24
    2dbe:	59 07       	cpc	r21, r25
    2dc0:	6a 07       	cpc	r22, r26
    2dc2:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2dc4:	90 f0       	brcs	.+36     	; 0x2dea <_ZN6SdFile5writeEPKvj+0x27a>
    2dc6:	7e d0       	rcall	.+252    	; 0x2ec4 <_ZN8SdVolume10cacheFlushEv>
    2dc8:	88 23       	and	r24, r24
    2dca:	09 f4       	brne	.+2      	; 0x2dce <_ZN6SdFile5writeEPKvj+0x25e>
    2dcc:	08 cf       	rjmp	.-496    	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    2dce:	40 92 06 02 	sts	0x0206, r4	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2dd2:	50 92 07 02 	sts	0x0207, r5	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2dd6:	60 92 08 02 	sts	0x0208, r6	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2dda:	70 92 09 02 	sts	0x0209, r7	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2dde:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    2de2:	81 60       	ori	r24, 0x01	; 1
    2de4:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <_ZN6SdFile5writeEPKvj+0x288>
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	c3 01       	movw	r24, r6
    2dee:	b2 01       	movw	r22, r4
    2df0:	a2 d0       	rcall	.+324    	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    2df2:	88 23       	and	r24, r24
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <_ZN6SdFile5writeEPKvj+0x288>
    2df6:	f3 ce       	rjmp	.-538    	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>
    2df8:	d6 01       	movw	r26, r12
    2dfa:	f7 01       	movw	r30, r14
    2dfc:	e7 58       	subi	r30, 0x87	; 135
    2dfe:	f9 4f       	sbci	r31, 0xF9	; 249
    2e00:	9f 01       	movw	r18, r30
    2e02:	2a 0d       	add	r18, r10
    2e04:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2e06:	2e 17       	cp	r18, r30
    2e08:	3f 07       	cpc	r19, r31
    2e0a:	19 f0       	breq	.+6      	; 0x2e12 <_ZN6SdFile5writeEPKvj+0x2a2>
    2e0c:	8d 91       	ld	r24, X+
    2e0e:	81 93       	st	Z+, r24
    2e10:	fa cf       	rjmp	.-12     	; 0x2e06 <_ZN6SdFile5writeEPKvj+0x296>
    2e12:	ca 0c       	add	r12, r10
    2e14:	db 1c       	adc	r13, r11
    2e16:	62 cf       	rjmp	.-316    	; 0x2cdc <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2e18:	d8 01       	movw	r26, r16
    2e1a:	53 96       	adiw	r26, 0x13	; 19
    2e1c:	cd 90       	ld	r12, X+
    2e1e:	dd 90       	ld	r13, X+
    2e20:	ed 90       	ld	r14, X+
    2e22:	fc 90       	ld	r15, X
    2e24:	56 97       	sbiw	r26, 0x16	; 22
    2e26:	14 96       	adiw	r26, 0x04	; 4
    2e28:	8c 91       	ld	r24, X
    2e2a:	c4 16       	cp	r12, r20
    2e2c:	d5 06       	cpc	r13, r21
    2e2e:	e6 06       	cpc	r14, r22
    2e30:	f7 06       	cpc	r15, r23
    2e32:	40 f4       	brcc	.+16     	; 0x2e44 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2e34:	f8 01       	movw	r30, r16
    2e36:	43 8b       	std	Z+19, r20	; 0x13
    2e38:	54 8b       	std	Z+20, r21	; 0x14
    2e3a:	65 8b       	std	Z+21, r22	; 0x15
    2e3c:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2e3e:	80 68       	ori	r24, 0x80	; 128
    2e40:	84 83       	std	Z+4, r24	; 0x04
    2e42:	0d c0       	rjmp	.+26     	; 0x2e5e <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    2e44:	20 91 70 06 	lds	r18, 0x0670	; 0x800670 <_ZN6SdFile9dateTime_E>
    2e48:	30 91 71 06 	lds	r19, 0x0671	; 0x800671 <_ZN6SdFile9dateTime_E+0x1>
    2e4c:	23 2b       	or	r18, r19
    2e4e:	39 f0       	breq	.+14     	; 0x2e5e <_ZN6SdFile5writeEPKvj+0x2ee>
    2e50:	21 14       	cp	r2, r1
    2e52:	31 04       	cpc	r3, r1
    2e54:	21 f0       	breq	.+8      	; 0x2e5e <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2e56:	80 68       	ori	r24, 0x80	; 128
    2e58:	d8 01       	movw	r26, r16
    2e5a:	14 96       	adiw	r26, 0x04	; 4
    2e5c:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2e5e:	f8 01       	movw	r30, r16
    2e60:	84 81       	ldd	r24, Z+4	; 0x04
    2e62:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <_ZN6SdFile5writeEPKvj+0x2fa>
    2e66:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2e68:	06 c0       	rjmp	.+12     	; 0x2e76 <_ZN6SdFile5writeEPKvj+0x306>
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	31 de       	rcall	.-926    	; 0x2ad0 <_ZN6SdFile4syncEv>
    2e6e:	88 23       	and	r24, r24
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <_ZN6SdFile5writeEPKvj+0x304>
    2e72:	b5 ce       	rjmp	.-662    	; 0x2bde <_ZN6SdFile5writeEPKvj+0x6e>
    2e74:	f8 cf       	rjmp	.-16     	; 0x2e66 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	ff 90       	pop	r15
    2e88:	ef 90       	pop	r14
    2e8a:	df 90       	pop	r13
    2e8c:	cf 90       	pop	r12
    2e8e:	bf 90       	pop	r11
    2e90:	af 90       	pop	r10
    2e92:	9f 90       	pop	r9
    2e94:	8f 90       	pop	r8
    2e96:	7f 90       	pop	r7
    2e98:	6f 90       	pop	r6
    2e9a:	5f 90       	pop	r5
    2e9c:	4f 90       	pop	r4
    2e9e:	3f 90       	pop	r3
    2ea0:	2f 90       	pop	r2
    2ea2:	08 95       	ret

00002ea4 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	1f 92       	push	r1
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	50 e0       	ldi	r21, 0x00	; 0
    2eb4:	be 01       	movw	r22, r28
    2eb6:	6f 5f       	subi	r22, 0xFF	; 255
    2eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eba:	5a de       	rcall	.-844    	; 0x2b70 <_ZN6SdFile5writeEPKvj>
}
    2ebc:	0f 90       	pop	r0
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <_ZN8SdVolume10cacheFlushEv>:

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    2ec4:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    2ec8:	88 23       	and	r24, r24
    2eca:	99 f1       	breq	.+102    	; 0x2f32 <_ZN8SdVolume10cacheFlushEv+0x6e>
    2ecc:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2ed0:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2ed4:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2ed8:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2edc:	29 e7       	ldi	r18, 0x79	; 121
    2ede:	36 e0       	ldi	r19, 0x06	; 6
    2ee0:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <_ZN8SdVolume7sdCard_E>
    2ee4:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <_ZN8SdVolume7sdCard_E+0x1>
    2ee8:	80 db       	rcall	.-2304   	; 0x25ea <_ZN7Sd2Card10writeBlockEmPKh>
    2eea:	81 11       	cpse	r24, r1
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <_ZN8SdVolume10cacheFlushEv+0x2e>
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	08 95       	ret
    2ef2:	40 91 72 06 	lds	r20, 0x0672	; 0x800672 <_ZN8SdVolume17cacheMirrorBlock_E>
    2ef6:	50 91 73 06 	lds	r21, 0x0673	; 0x800673 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2efa:	60 91 74 06 	lds	r22, 0x0674	; 0x800674 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2efe:	70 91 75 06 	lds	r23, 0x0675	; 0x800675 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2f02:	41 15       	cp	r20, r1
    2f04:	51 05       	cpc	r21, r1
    2f06:	61 05       	cpc	r22, r1
    2f08:	71 05       	cpc	r23, r1
    2f0a:	89 f0       	breq	.+34     	; 0x2f2e <_ZN8SdVolume10cacheFlushEv+0x6a>
    2f0c:	29 e7       	ldi	r18, 0x79	; 121
    2f0e:	36 e0       	ldi	r19, 0x06	; 6
    2f10:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <_ZN8SdVolume7sdCard_E>
    2f14:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <_ZN8SdVolume7sdCard_E+0x1>
    2f18:	68 db       	rcall	.-2352   	; 0x25ea <_ZN7Sd2Card10writeBlockEmPKh>
    2f1a:	88 23       	and	r24, r24
    2f1c:	41 f3       	breq	.-48     	; 0x2eee <_ZN8SdVolume10cacheFlushEv+0x2a>
    2f1e:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <_ZN8SdVolume17cacheMirrorBlock_E>
    2f22:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2f26:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2f2a:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2f2e:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	08 95       	ret

00002f36 <_ZN8SdVolume13cacheRawBlockEmh>:
    2f36:	cf 92       	push	r12
    2f38:	df 92       	push	r13
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	cf 93       	push	r28
    2f40:	6b 01       	movw	r12, r22
    2f42:	7c 01       	movw	r14, r24
    2f44:	c4 2f       	mov	r28, r20
    2f46:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2f4a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f4e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f52:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f56:	8c 15       	cp	r24, r12
    2f58:	9d 05       	cpc	r25, r13
    2f5a:	ae 05       	cpc	r26, r14
    2f5c:	bf 05       	cpc	r27, r15
    2f5e:	c1 f0       	breq	.+48     	; 0x2f90 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    2f60:	b1 df       	rcall	.-158    	; 0x2ec4 <_ZN8SdVolume10cacheFlushEv>
    2f62:	81 11       	cpse	r24, r1
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	19 c0       	rjmp	.+50     	; 0x2f9c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    2f6a:	29 e7       	ldi	r18, 0x79	; 121
    2f6c:	36 e0       	ldi	r19, 0x06	; 6
    2f6e:	b7 01       	movw	r22, r14
    2f70:	a6 01       	movw	r20, r12
    2f72:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <_ZN8SdVolume7sdCard_E>
    2f76:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <_ZN8SdVolume7sdCard_E+0x1>
    2f7a:	fe da       	rcall	.-2564   	; 0x2578 <_ZN7Sd2Card9readBlockEmPh>
    2f7c:	88 23       	and	r24, r24
    2f7e:	99 f3       	breq	.-26     	; 0x2f66 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    2f80:	c0 92 06 02 	sts	0x0206, r12	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2f84:	d0 92 07 02 	sts	0x0207, r13	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f88:	e0 92 08 02 	sts	0x0208, r14	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f8c:	f0 92 09 02 	sts	0x0209, r15	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f90:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    2f94:	c8 2b       	or	r28, r24
    2f96:	c0 93 76 06 	sts	0x0676, r28	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	cf 91       	pop	r28
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	df 90       	pop	r13
    2fa4:	cf 90       	pop	r12
    2fa6:	08 95       	ret

00002fa8 <_ZNK8SdVolume6fatGetEmPm>:
    2fa8:	8f 92       	push	r8
    2faa:	9f 92       	push	r9
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	81 85       	ldd	r24, Z+9	; 0x09
    2fc4:	92 85       	ldd	r25, Z+10	; 0x0a
    2fc6:	a3 85       	ldd	r26, Z+11	; 0x0b
    2fc8:	b4 85       	ldd	r27, Z+12	; 0x0c
    2fca:	01 96       	adiw	r24, 0x01	; 1
    2fcc:	a1 1d       	adc	r26, r1
    2fce:	b1 1d       	adc	r27, r1
    2fd0:	84 17       	cp	r24, r20
    2fd2:	95 07       	cpc	r25, r21
    2fd4:	a6 07       	cpc	r26, r22
    2fd6:	b7 07       	cpc	r27, r23
    2fd8:	10 f4       	brcc	.+4      	; 0x2fde <_ZNK8SdVolume6fatGetEmPm+0x36>
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	5a c0       	rjmp	.+180    	; 0x3092 <_ZNK8SdVolume6fatGetEmPm+0xea>
    2fde:	83 88       	ldd	r8, Z+19	; 0x13
    2fe0:	94 88       	ldd	r9, Z+20	; 0x14
    2fe2:	a5 88       	ldd	r10, Z+21	; 0x15
    2fe4:	b6 88       	ldd	r11, Z+22	; 0x16
    2fe6:	87 89       	ldd	r24, Z+23	; 0x17
    2fe8:	80 31       	cpi	r24, 0x10	; 16
    2fea:	29 f4       	brne	.+10     	; 0x2ff6 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2fec:	bb 27       	eor	r27, r27
    2fee:	a7 2f       	mov	r26, r23
    2ff0:	96 2f       	mov	r25, r22
    2ff2:	85 2f       	mov	r24, r21
    2ff4:	09 c0       	rjmp	.+18     	; 0x3008 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2ff6:	db 01       	movw	r26, r22
    2ff8:	ca 01       	movw	r24, r20
    2ffa:	c7 e0       	ldi	r28, 0x07	; 7
    2ffc:	b6 95       	lsr	r27
    2ffe:	a7 95       	ror	r26
    3000:	97 95       	ror	r25
    3002:	87 95       	ror	r24
    3004:	ca 95       	dec	r28
    3006:	d1 f7       	brne	.-12     	; 0x2ffc <_ZNK8SdVolume6fatGetEmPm+0x54>
    3008:	e9 01       	movw	r28, r18
    300a:	6a 01       	movw	r12, r20
    300c:	7b 01       	movw	r14, r22
    300e:	8f 01       	movw	r16, r30
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	68 0d       	add	r22, r8
    3016:	79 1d       	adc	r23, r9
    3018:	8a 1d       	adc	r24, r10
    301a:	9b 1d       	adc	r25, r11
    301c:	80 90 06 02 	lds	r8, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    3020:	90 90 07 02 	lds	r9, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3024:	a0 90 08 02 	lds	r10, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3028:	b0 90 09 02 	lds	r11, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    302c:	68 15       	cp	r22, r8
    302e:	79 05       	cpc	r23, r9
    3030:	8a 05       	cpc	r24, r10
    3032:	9b 05       	cpc	r25, r11
    3034:	91 f4       	brne	.+36     	; 0x305a <_ZNK8SdVolume6fatGetEmPm+0xb2>
    3036:	f8 01       	movw	r30, r16
    3038:	87 89       	ldd	r24, Z+23	; 0x17
    303a:	80 31       	cpi	r24, 0x10	; 16
    303c:	99 f4       	brne	.+38     	; 0x3064 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    303e:	dd 24       	eor	r13, r13
    3040:	ee 24       	eor	r14, r14
    3042:	ff 24       	eor	r15, r15
    3044:	c6 01       	movw	r24, r12
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	fc 01       	movw	r30, r24
    304c:	e7 58       	subi	r30, 0x87	; 135
    304e:	f9 4f       	sbci	r31, 0xF9	; 249
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	a0 e0       	ldi	r26, 0x00	; 0
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	17 c0       	rjmp	.+46     	; 0x3088 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	6c df       	rcall	.-296    	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    305e:	81 11       	cpse	r24, r1
    3060:	ea cf       	rjmp	.-44     	; 0x3036 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    3062:	bb cf       	rjmp	.-138    	; 0x2fda <_ZNK8SdVolume6fatGetEmPm+0x32>
    3064:	e8 94       	clt
    3066:	c7 f8       	bld	r12, 7
    3068:	dd 24       	eor	r13, r13
    306a:	ee 24       	eor	r14, r14
    306c:	ff 24       	eor	r15, r15
    306e:	c6 01       	movw	r24, r12
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	fc 01       	movw	r30, r24
    307a:	e7 58       	subi	r30, 0x87	; 135
    307c:	f9 4f       	sbci	r31, 0xF9	; 249
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	a2 81       	ldd	r26, Z+2	; 0x02
    3084:	b3 81       	ldd	r27, Z+3	; 0x03
    3086:	bf 70       	andi	r27, 0x0F	; 15
    3088:	88 83       	st	Y, r24
    308a:	99 83       	std	Y+1, r25	; 0x01
    308c:	aa 83       	std	Y+2, r26	; 0x02
    308e:	bb 83       	std	Y+3, r27	; 0x03
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	1f 91       	pop	r17
    3098:	0f 91       	pop	r16
    309a:	ff 90       	pop	r15
    309c:	ef 90       	pop	r14
    309e:	df 90       	pop	r13
    30a0:	cf 90       	pop	r12
    30a2:	bf 90       	pop	r11
    30a4:	af 90       	pop	r10
    30a6:	9f 90       	pop	r9
    30a8:	8f 90       	pop	r8
    30aa:	08 95       	ret

000030ac <_ZNK8SdVolume9chainSizeEmPm>:
    30ac:	4f 92       	push	r4
    30ae:	5f 92       	push	r5
    30b0:	6f 92       	push	r6
    30b2:	7f 92       	push	r7
    30b4:	af 92       	push	r10
    30b6:	bf 92       	push	r11
    30b8:	cf 92       	push	r12
    30ba:	df 92       	push	r13
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    30ca:	1f 92       	push	r1
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	8c 01       	movw	r16, r24
    30d2:	49 83       	std	Y+1, r20	; 0x01
    30d4:	5a 83       	std	Y+2, r21	; 0x02
    30d6:	6b 83       	std	Y+3, r22	; 0x03
    30d8:	7c 83       	std	Y+4, r23	; 0x04
    30da:	59 01       	movw	r10, r18
    30dc:	c1 2c       	mov	r12, r1
    30de:	d1 2c       	mov	r13, r1
    30e0:	76 01       	movw	r14, r12
    30e2:	41 2c       	mov	r4, r1
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	58 2e       	mov	r5, r24
    30e8:	61 2c       	mov	r6, r1
    30ea:	71 2c       	mov	r7, r1
    30ec:	49 81       	ldd	r20, Y+1	; 0x01
    30ee:	5a 81       	ldd	r21, Y+2	; 0x02
    30f0:	6b 81       	ldd	r22, Y+3	; 0x03
    30f2:	7c 81       	ldd	r23, Y+4	; 0x04
    30f4:	9e 01       	movw	r18, r28
    30f6:	2f 5f       	subi	r18, 0xFF	; 255
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	c8 01       	movw	r24, r16
    30fc:	55 df       	rcall	.-342    	; 0x2fa8 <_ZNK8SdVolume6fatGetEmPm>
    30fe:	88 23       	and	r24, r24
    3100:	51 f1       	breq	.+84     	; 0x3156 <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    3102:	d3 01       	movw	r26, r6
    3104:	c2 01       	movw	r24, r4
    3106:	f8 01       	movw	r30, r16
    3108:	05 84       	ldd	r0, Z+13	; 0x0d
    310a:	04 c0       	rjmp	.+8      	; 0x3114 <_ZNK8SdVolume9chainSizeEmPm+0x68>
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	aa 1f       	adc	r26, r26
    3112:	bb 1f       	adc	r27, r27
    3114:	0a 94       	dec	r0
    3116:	d2 f7       	brpl	.-12     	; 0x310c <_ZNK8SdVolume9chainSizeEmPm+0x60>
    3118:	c8 0e       	add	r12, r24
    311a:	d9 1e       	adc	r13, r25
    311c:	ea 1e       	adc	r14, r26
    311e:	fb 1e       	adc	r15, r27
    3120:	49 81       	ldd	r20, Y+1	; 0x01
    3122:	5a 81       	ldd	r21, Y+2	; 0x02
    3124:	6b 81       	ldd	r22, Y+3	; 0x03
    3126:	7c 81       	ldd	r23, Y+4	; 0x04
    3128:	87 89       	ldd	r24, Z+23	; 0x17
    312a:	80 31       	cpi	r24, 0x10	; 16
    312c:	29 f0       	breq	.+10     	; 0x3138 <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    312e:	88 ef       	ldi	r24, 0xF8	; 248
    3130:	9f ef       	ldi	r25, 0xFF	; 255
    3132:	af ef       	ldi	r26, 0xFF	; 255
    3134:	bf e0       	ldi	r27, 0x0F	; 15
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    3138:	88 ef       	ldi	r24, 0xF8	; 248
    313a:	9f ef       	ldi	r25, 0xFF	; 255
    313c:	a0 e0       	ldi	r26, 0x00	; 0
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	48 17       	cp	r20, r24
    3142:	59 07       	cpc	r21, r25
    3144:	6a 07       	cpc	r22, r26
    3146:	7b 07       	cpc	r23, r27
    3148:	88 f2       	brcs	.-94     	; 0x30ec <_ZNK8SdVolume9chainSizeEmPm+0x40>
    314a:	f5 01       	movw	r30, r10
    314c:	c0 82       	st	Z, r12
    314e:	d1 82       	std	Z+1, r13	; 0x01
    3150:	e2 82       	std	Z+2, r14	; 0x02
    3152:	f3 82       	std	Z+3, r15	; 0x03
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	ff 90       	pop	r15
    3168:	ef 90       	pop	r14
    316a:	df 90       	pop	r13
    316c:	cf 90       	pop	r12
    316e:	bf 90       	pop	r11
    3170:	af 90       	pop	r10
    3172:	7f 90       	pop	r7
    3174:	6f 90       	pop	r6
    3176:	5f 90       	pop	r5
    3178:	4f 90       	pop	r4
    317a:	08 95       	ret

0000317c <_ZN8SdVolume6fatPutEmm>:
    317c:	4f 92       	push	r4
    317e:	5f 92       	push	r5
    3180:	6f 92       	push	r6
    3182:	7f 92       	push	r7
    3184:	8f 92       	push	r8
    3186:	9f 92       	push	r9
    3188:	af 92       	push	r10
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	ec 01       	movw	r28, r24
    319e:	42 30       	cpi	r20, 0x02	; 2
    31a0:	51 05       	cpc	r21, r1
    31a2:	61 05       	cpc	r22, r1
    31a4:	71 05       	cpc	r23, r1
    31a6:	10 f4       	brcc	.+4      	; 0x31ac <_ZN8SdVolume6fatPutEmm+0x30>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	77 c0       	rjmp	.+238    	; 0x329a <_ZN8SdVolume6fatPutEmm+0x11e>
    31ac:	89 85       	ldd	r24, Y+9	; 0x09
    31ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    31b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	a1 1d       	adc	r26, r1
    31b8:	b1 1d       	adc	r27, r1
    31ba:	84 17       	cp	r24, r20
    31bc:	95 07       	cpc	r25, r21
    31be:	a6 07       	cpc	r26, r22
    31c0:	b7 07       	cpc	r27, r23
    31c2:	90 f3       	brcs	.-28     	; 0x31a8 <_ZN8SdVolume6fatPutEmm+0x2c>
    31c4:	cb 88       	ldd	r12, Y+19	; 0x13
    31c6:	dc 88       	ldd	r13, Y+20	; 0x14
    31c8:	ed 88       	ldd	r14, Y+21	; 0x15
    31ca:	fe 88       	ldd	r15, Y+22	; 0x16
    31cc:	8f 89       	ldd	r24, Y+23	; 0x17
    31ce:	80 31       	cpi	r24, 0x10	; 16
    31d0:	29 f4       	brne	.+10     	; 0x31dc <_ZN8SdVolume6fatPutEmm+0x60>
    31d2:	bb 27       	eor	r27, r27
    31d4:	a7 2f       	mov	r26, r23
    31d6:	96 2f       	mov	r25, r22
    31d8:	85 2f       	mov	r24, r21
    31da:	09 c0       	rjmp	.+18     	; 0x31ee <_ZN8SdVolume6fatPutEmm+0x72>
    31dc:	db 01       	movw	r26, r22
    31de:	ca 01       	movw	r24, r20
    31e0:	e7 e0       	ldi	r30, 0x07	; 7
    31e2:	b6 95       	lsr	r27
    31e4:	a7 95       	ror	r26
    31e6:	97 95       	ror	r25
    31e8:	87 95       	ror	r24
    31ea:	ea 95       	dec	r30
    31ec:	d1 f7       	brne	.-12     	; 0x31e2 <_ZN8SdVolume6fatPutEmm+0x66>
    31ee:	48 01       	movw	r8, r16
    31f0:	59 01       	movw	r10, r18
    31f2:	2a 01       	movw	r4, r20
    31f4:	3b 01       	movw	r6, r22
    31f6:	c8 0e       	add	r12, r24
    31f8:	d9 1e       	adc	r13, r25
    31fa:	ea 1e       	adc	r14, r26
    31fc:	fb 1e       	adc	r15, r27
    31fe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    3202:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3206:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    320a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    320e:	c8 16       	cp	r12, r24
    3210:	d9 06       	cpc	r13, r25
    3212:	ea 06       	cpc	r14, r26
    3214:	fb 06       	cpc	r15, r27
    3216:	81 f4       	brne	.+32     	; 0x3238 <_ZN8SdVolume6fatPutEmm+0xbc>
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	80 31       	cpi	r24, 0x10	; 16
    321c:	a1 f4       	brne	.+40     	; 0x3246 <_ZN8SdVolume6fatPutEmm+0xca>
    321e:	b3 01       	movw	r22, r6
    3220:	a2 01       	movw	r20, r4
    3222:	55 27       	eor	r21, r21
    3224:	66 27       	eor	r22, r22
    3226:	77 27       	eor	r23, r23
    3228:	44 0f       	add	r20, r20
    322a:	55 1f       	adc	r21, r21
    322c:	fa 01       	movw	r30, r20
    322e:	e7 58       	subi	r30, 0x87	; 135
    3230:	f9 4f       	sbci	r31, 0xF9	; 249
    3232:	91 82       	std	Z+1, r9	; 0x01
    3234:	80 82       	st	Z, r8
    3236:	18 c0       	rjmp	.+48     	; 0x3268 <_ZN8SdVolume6fatPutEmm+0xec>
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	c7 01       	movw	r24, r14
    323c:	b6 01       	movw	r22, r12
    323e:	7b de       	rcall	.-778    	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    3240:	81 11       	cpse	r24, r1
    3242:	ea cf       	rjmp	.-44     	; 0x3218 <_ZN8SdVolume6fatPutEmm+0x9c>
    3244:	b1 cf       	rjmp	.-158    	; 0x31a8 <_ZN8SdVolume6fatPutEmm+0x2c>
    3246:	b3 01       	movw	r22, r6
    3248:	a2 01       	movw	r20, r4
    324a:	4f 77       	andi	r20, 0x7F	; 127
    324c:	55 27       	eor	r21, r21
    324e:	66 27       	eor	r22, r22
    3250:	77 27       	eor	r23, r23
    3252:	44 0f       	add	r20, r20
    3254:	55 1f       	adc	r21, r21
    3256:	44 0f       	add	r20, r20
    3258:	55 1f       	adc	r21, r21
    325a:	fa 01       	movw	r30, r20
    325c:	e7 58       	subi	r30, 0x87	; 135
    325e:	f9 4f       	sbci	r31, 0xF9	; 249
    3260:	80 82       	st	Z, r8
    3262:	91 82       	std	Z+1, r9	; 0x01
    3264:	a2 82       	std	Z+2, r10	; 0x02
    3266:	b3 82       	std	Z+3, r11	; 0x03
    3268:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    326c:	81 60       	ori	r24, 0x01	; 1
    326e:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <_ZN8SdVolume11cacheDirty_E>
    3272:	8a 89       	ldd	r24, Y+18	; 0x12
    3274:	82 30       	cpi	r24, 0x02	; 2
    3276:	80 f0       	brcs	.+32     	; 0x3298 <_ZN8SdVolume6fatPutEmm+0x11c>
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	af 81       	ldd	r26, Y+7	; 0x07
    327e:	b8 85       	ldd	r27, Y+8	; 0x08
    3280:	c8 0e       	add	r12, r24
    3282:	d9 1e       	adc	r13, r25
    3284:	ea 1e       	adc	r14, r26
    3286:	fb 1e       	adc	r15, r27
    3288:	c0 92 72 06 	sts	0x0672, r12	; 0x800672 <_ZN8SdVolume17cacheMirrorBlock_E>
    328c:	d0 92 73 06 	sts	0x0673, r13	; 0x800673 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3290:	e0 92 74 06 	sts	0x0674, r14	; 0x800674 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3294:	f0 92 75 06 	sts	0x0675, r15	; 0x800675 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	0f 91       	pop	r16
    32a2:	ff 90       	pop	r15
    32a4:	ef 90       	pop	r14
    32a6:	df 90       	pop	r13
    32a8:	cf 90       	pop	r12
    32aa:	bf 90       	pop	r11
    32ac:	af 90       	pop	r10
    32ae:	9f 90       	pop	r9
    32b0:	8f 90       	pop	r8
    32b2:	7f 90       	pop	r7
    32b4:	6f 90       	pop	r6
    32b6:	5f 90       	pop	r5
    32b8:	4f 90       	pop	r4
    32ba:	08 95       	ret

000032bc <_ZN8SdVolume15allocContiguousEmPm>:
    32bc:	2f 92       	push	r2
    32be:	3f 92       	push	r3
    32c0:	4f 92       	push	r4
    32c2:	5f 92       	push	r5
    32c4:	6f 92       	push	r6
    32c6:	7f 92       	push	r7
    32c8:	9f 92       	push	r9
    32ca:	af 92       	push	r10
    32cc:	bf 92       	push	r11
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	60 97       	sbiw	r28, 0x10	; 16
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	5c 01       	movw	r10, r24
    32f0:	49 87       	std	Y+9, r20	; 0x09
    32f2:	5a 87       	std	Y+10, r21	; 0x0a
    32f4:	6b 87       	std	Y+11, r22	; 0x0b
    32f6:	7c 87       	std	Y+12, r23	; 0x0c
    32f8:	19 01       	movw	r2, r18
    32fa:	d9 01       	movw	r26, r18
    32fc:	cd 90       	ld	r12, X+
    32fe:	dd 90       	ld	r13, X+
    3300:	ed 90       	ld	r14, X+
    3302:	fc 90       	ld	r15, X
    3304:	c1 14       	cp	r12, r1
    3306:	d1 04       	cpc	r13, r1
    3308:	e1 04       	cpc	r14, r1
    330a:	f1 04       	cpc	r15, r1
    330c:	31 f0       	breq	.+12     	; 0x331a <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    330e:	bf ef       	ldi	r27, 0xFF	; 255
    3310:	cb 1a       	sub	r12, r27
    3312:	db 0a       	sbc	r13, r27
    3314:	eb 0a       	sbc	r14, r27
    3316:	fb 0a       	sbc	r15, r27
    3318:	10 c0       	rjmp	.+32     	; 0x333a <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    331a:	fc 01       	movw	r30, r24
    331c:	c0 80       	ld	r12, Z
    331e:	d1 80       	ldd	r13, Z+1	; 0x01
    3320:	e2 80       	ldd	r14, Z+2	; 0x02
    3322:	f3 80       	ldd	r15, Z+3	; 0x03
    3324:	99 24       	eor	r9, r9
    3326:	93 94       	inc	r9
    3328:	09 85       	ldd	r16, Y+9	; 0x09
    332a:	1a 85       	ldd	r17, Y+10	; 0x0a
    332c:	2b 85       	ldd	r18, Y+11	; 0x0b
    332e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3330:	01 30       	cpi	r16, 0x01	; 1
    3332:	11 05       	cpc	r17, r1
    3334:	21 05       	cpc	r18, r1
    3336:	31 05       	cpc	r19, r1
    3338:	09 f0       	breq	.+2      	; 0x333c <_ZN8SdVolume15allocContiguousEmPm+0x80>
    333a:	91 2c       	mov	r9, r1
    333c:	f5 01       	movw	r30, r10
    333e:	81 85       	ldd	r24, Z+9	; 0x09
    3340:	92 85       	ldd	r25, Z+10	; 0x0a
    3342:	a3 85       	ldd	r26, Z+11	; 0x0b
    3344:	b4 85       	ldd	r27, Z+12	; 0x0c
    3346:	8c 01       	movw	r16, r24
    3348:	9d 01       	movw	r18, r26
    334a:	0f 5f       	subi	r16, 0xFF	; 255
    334c:	1f 4f       	sbci	r17, 0xFF	; 255
    334e:	2f 4f       	sbci	r18, 0xFF	; 255
    3350:	3f 4f       	sbci	r19, 0xFF	; 255
    3352:	0d 87       	std	Y+13, r16	; 0x0d
    3354:	1e 87       	std	Y+14, r17	; 0x0e
    3356:	2f 87       	std	Y+15, r18	; 0x0f
    3358:	38 8b       	std	Y+16, r19	; 0x10
    335a:	26 01       	movw	r4, r12
    335c:	37 01       	movw	r6, r14
    335e:	1d 82       	std	Y+5, r1	; 0x05
    3360:	1e 82       	std	Y+6, r1	; 0x06
    3362:	1f 82       	std	Y+7, r1	; 0x07
    3364:	18 86       	std	Y+8, r1	; 0x08
    3366:	f5 01       	movw	r30, r10
    3368:	81 85       	ldd	r24, Z+9	; 0x09
    336a:	92 85       	ldd	r25, Z+10	; 0x0a
    336c:	a3 85       	ldd	r26, Z+11	; 0x0b
    336e:	b4 85       	ldd	r27, Z+12	; 0x0c
    3370:	0d 81       	ldd	r16, Y+5	; 0x05
    3372:	1e 81       	ldd	r17, Y+6	; 0x06
    3374:	2f 81       	ldd	r18, Y+7	; 0x07
    3376:	38 85       	ldd	r19, Y+8	; 0x08
    3378:	08 17       	cp	r16, r24
    337a:	19 07       	cpc	r17, r25
    337c:	2a 07       	cpc	r18, r26
    337e:	3b 07       	cpc	r19, r27
    3380:	08 f0       	brcs	.+2      	; 0x3384 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    3382:	54 c0       	rjmp	.+168    	; 0x342c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    3384:	2d 85       	ldd	r18, Y+13	; 0x0d
    3386:	3e 85       	ldd	r19, Y+14	; 0x0e
    3388:	4f 85       	ldd	r20, Y+15	; 0x0f
    338a:	58 89       	ldd	r21, Y+16	; 0x10
    338c:	24 15       	cp	r18, r4
    338e:	35 05       	cpc	r19, r5
    3390:	46 05       	cpc	r20, r6
    3392:	57 05       	cpc	r21, r7
    3394:	50 f4       	brcc	.+20     	; 0x33aa <_ZN8SdVolume15allocContiguousEmPm+0xee>
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	48 2e       	mov	r4, r24
    339a:	51 2c       	mov	r5, r1
    339c:	61 2c       	mov	r6, r1
    339e:	71 2c       	mov	r7, r1
    33a0:	92 e0       	ldi	r25, 0x02	; 2
    33a2:	c9 2e       	mov	r12, r25
    33a4:	d1 2c       	mov	r13, r1
    33a6:	e1 2c       	mov	r14, r1
    33a8:	f1 2c       	mov	r15, r1
    33aa:	9e 01       	movw	r18, r28
    33ac:	2f 5f       	subi	r18, 0xFF	; 255
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	b3 01       	movw	r22, r6
    33b2:	a2 01       	movw	r20, r4
    33b4:	c5 01       	movw	r24, r10
    33b6:	f8 dd       	rcall	.-1040   	; 0x2fa8 <_ZNK8SdVolume6fatGetEmPm>
    33b8:	88 23       	and	r24, r24
    33ba:	c1 f1       	breq	.+112    	; 0x342c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    33bc:	49 81       	ldd	r20, Y+1	; 0x01
    33be:	5a 81       	ldd	r21, Y+2	; 0x02
    33c0:	6b 81       	ldd	r22, Y+3	; 0x03
    33c2:	7c 81       	ldd	r23, Y+4	; 0x04
    33c4:	d3 01       	movw	r26, r6
    33c6:	c2 01       	movw	r24, r4
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	a1 1d       	adc	r26, r1
    33cc:	b1 1d       	adc	r27, r1
    33ce:	45 2b       	or	r20, r21
    33d0:	46 2b       	or	r20, r22
    33d2:	47 2b       	or	r20, r23
    33d4:	19 f0       	breq	.+6      	; 0x33dc <_ZN8SdVolume15allocContiguousEmPm+0x120>
    33d6:	6c 01       	movw	r12, r24
    33d8:	7d 01       	movw	r14, r26
    33da:	0f c0       	rjmp	.+30     	; 0x33fa <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    33dc:	ac 01       	movw	r20, r24
    33de:	bd 01       	movw	r22, r26
    33e0:	4c 19       	sub	r20, r12
    33e2:	5d 09       	sbc	r21, r13
    33e4:	6e 09       	sbc	r22, r14
    33e6:	7f 09       	sbc	r23, r15
    33e8:	09 85       	ldd	r16, Y+9	; 0x09
    33ea:	1a 85       	ldd	r17, Y+10	; 0x0a
    33ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    33ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    33f0:	04 17       	cp	r16, r20
    33f2:	15 07       	cpc	r17, r21
    33f4:	26 07       	cpc	r18, r22
    33f6:	37 07       	cpc	r19, r23
    33f8:	79 f0       	breq	.+30     	; 0x3418 <_ZN8SdVolume15allocContiguousEmPm+0x15c>
    33fa:	2d 81       	ldd	r18, Y+5	; 0x05
    33fc:	3e 81       	ldd	r19, Y+6	; 0x06
    33fe:	4f 81       	ldd	r20, Y+7	; 0x07
    3400:	58 85       	ldd	r21, Y+8	; 0x08
    3402:	2f 5f       	subi	r18, 0xFF	; 255
    3404:	3f 4f       	sbci	r19, 0xFF	; 255
    3406:	4f 4f       	sbci	r20, 0xFF	; 255
    3408:	5f 4f       	sbci	r21, 0xFF	; 255
    340a:	2d 83       	std	Y+5, r18	; 0x05
    340c:	3e 83       	std	Y+6, r19	; 0x06
    340e:	4f 83       	std	Y+7, r20	; 0x07
    3410:	58 87       	std	Y+8, r21	; 0x08
    3412:	2c 01       	movw	r4, r24
    3414:	3d 01       	movw	r6, r26
    3416:	a7 cf       	rjmp	.-178    	; 0x3366 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    3418:	0f ef       	ldi	r16, 0xFF	; 255
    341a:	1f ef       	ldi	r17, 0xFF	; 255
    341c:	2f ef       	ldi	r18, 0xFF	; 255
    341e:	3f e0       	ldi	r19, 0x0F	; 15
    3420:	b3 01       	movw	r22, r6
    3422:	a2 01       	movw	r20, r4
    3424:	c5 01       	movw	r24, r10
    3426:	aa de       	rcall	.-684    	; 0x317c <_ZN8SdVolume6fatPutEmm>
    3428:	81 11       	cpse	r24, r1
    342a:	17 c0       	rjmp	.+46     	; 0x345a <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	3f c0       	rjmp	.+126    	; 0x34ae <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    3430:	d3 01       	movw	r26, r6
    3432:	c2 01       	movw	r24, r4
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	a1 09       	sbc	r26, r1
    3438:	b1 09       	sbc	r27, r1
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	9e 83       	std	Y+6, r25	; 0x06
    343e:	af 83       	std	Y+7, r26	; 0x07
    3440:	b8 87       	std	Y+8, r27	; 0x08
    3442:	93 01       	movw	r18, r6
    3444:	82 01       	movw	r16, r4
    3446:	ac 01       	movw	r20, r24
    3448:	bd 01       	movw	r22, r26
    344a:	c5 01       	movw	r24, r10
    344c:	97 de       	rcall	.-722    	; 0x317c <_ZN8SdVolume6fatPutEmm>
    344e:	88 23       	and	r24, r24
    3450:	69 f3       	breq	.-38     	; 0x342c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    3452:	4d 80       	ldd	r4, Y+5	; 0x05
    3454:	5e 80       	ldd	r5, Y+6	; 0x06
    3456:	6f 80       	ldd	r6, Y+7	; 0x07
    3458:	78 84       	ldd	r7, Y+8	; 0x08
    345a:	c4 14       	cp	r12, r4
    345c:	d5 04       	cpc	r13, r5
    345e:	e6 04       	cpc	r14, r6
    3460:	f7 04       	cpc	r15, r7
    3462:	30 f3       	brcs	.-52     	; 0x3430 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    3464:	d1 01       	movw	r26, r2
    3466:	4d 91       	ld	r20, X+
    3468:	5d 91       	ld	r21, X+
    346a:	6d 91       	ld	r22, X+
    346c:	7c 91       	ld	r23, X
    346e:	41 15       	cp	r20, r1
    3470:	51 05       	cpc	r21, r1
    3472:	61 05       	cpc	r22, r1
    3474:	71 05       	cpc	r23, r1
    3476:	99 f4       	brne	.+38     	; 0x349e <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    3478:	f1 01       	movw	r30, r2
    347a:	c0 82       	st	Z, r12
    347c:	d1 82       	std	Z+1, r13	; 0x01
    347e:	e2 82       	std	Z+2, r14	; 0x02
    3480:	f3 82       	std	Z+3, r15	; 0x03
    3482:	99 20       	and	r9, r9
    3484:	99 f0       	breq	.+38     	; 0x34ac <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    3486:	ff ef       	ldi	r31, 0xFF	; 255
    3488:	cf 1a       	sub	r12, r31
    348a:	df 0a       	sbc	r13, r31
    348c:	ef 0a       	sbc	r14, r31
    348e:	ff 0a       	sbc	r15, r31
    3490:	d5 01       	movw	r26, r10
    3492:	cd 92       	st	X+, r12
    3494:	dd 92       	st	X+, r13
    3496:	ed 92       	st	X+, r14
    3498:	fc 92       	st	X, r15
    349a:	13 97       	sbiw	r26, 0x03	; 3
    349c:	07 c0       	rjmp	.+14     	; 0x34ac <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    349e:	97 01       	movw	r18, r14
    34a0:	86 01       	movw	r16, r12
    34a2:	c5 01       	movw	r24, r10
    34a4:	6b de       	rcall	.-810    	; 0x317c <_ZN8SdVolume6fatPutEmm>
    34a6:	81 11       	cpse	r24, r1
    34a8:	e7 cf       	rjmp	.-50     	; 0x3478 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    34aa:	c0 cf       	rjmp	.-128    	; 0x342c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	60 96       	adiw	r28, 0x10	; 16
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	df 90       	pop	r13
    34c8:	cf 90       	pop	r12
    34ca:	bf 90       	pop	r11
    34cc:	af 90       	pop	r10
    34ce:	9f 90       	pop	r9
    34d0:	7f 90       	pop	r7
    34d2:	6f 90       	pop	r6
    34d4:	5f 90       	pop	r5
    34d6:	4f 90       	pop	r4
    34d8:	3f 90       	pop	r3
    34da:	2f 90       	pop	r2
    34dc:	08 95       	ret

000034de <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    34de:	8f 92       	push	r8
    34e0:	9f 92       	push	r9
    34e2:	af 92       	push	r10
    34e4:	bf 92       	push	r11
    34e6:	cf 92       	push	r12
    34e8:	df 92       	push	r13
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	cf 93       	push	r28
    34f4:	df 93       	push	r29
    34f6:	ec 01       	movw	r28, r24
    34f8:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    34fa:	70 93 78 06 	sts	0x0678, r23	; 0x800678 <_ZN8SdVolume7sdCard_E+0x1>
    34fe:	60 93 77 06 	sts	0x0677, r22	; 0x800677 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3502:	44 23       	and	r20, r20
    3504:	61 f1       	breq	.+88     	; 0x355e <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    3506:	45 30       	cpi	r20, 0x05	; 5
    3508:	10 f0       	brcs	.+4      	; 0x350e <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	ef c0       	rjmp	.+478    	; 0x36ec <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	cb 01       	movw	r24, r22
    3516:	0f dd       	rcall	.-1506   	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    3518:	88 23       	and	r24, r24
    351a:	b9 f3       	breq	.-18     	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    351c:	20 e1       	ldi	r18, 0x10	; 16
    351e:	12 9f       	mul	r17, r18
    3520:	a0 01       	movw	r20, r0
    3522:	11 24       	eor	r1, r1
    3524:	47 59       	subi	r20, 0x97	; 151
    3526:	59 4f       	sbci	r21, 0xF9	; 249
    3528:	fa 01       	movw	r30, r20
    352a:	e2 54       	subi	r30, 0x42	; 66
    352c:	fe 4f       	sbci	r31, 0xFE	; 254
    352e:	80 81       	ld	r24, Z
    3530:	8f 77       	andi	r24, 0x7F	; 127
    3532:	59 f7       	brne	.-42     	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    3534:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	a2 81       	ldd	r26, Z+2	; 0x02
    353c:	b3 81       	ldd	r27, Z+3	; 0x03
    353e:	84 36       	cpi	r24, 0x64	; 100
    3540:	91 05       	cpc	r25, r1
    3542:	a1 05       	cpc	r26, r1
    3544:	b1 05       	cpc	r27, r1
    3546:	08 f3       	brcs	.-62     	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    3548:	34 97       	sbiw	r30, 0x04	; 4
    354a:	c0 80       	ld	r12, Z
    354c:	d1 80       	ldd	r13, Z+1	; 0x01
    354e:	e2 80       	ldd	r14, Z+2	; 0x02
    3550:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    3552:	c1 14       	cp	r12, r1
    3554:	d1 04       	cpc	r13, r1
    3556:	e1 04       	cpc	r14, r1
    3558:	f1 04       	cpc	r15, r1
    355a:	21 f4       	brne	.+8      	; 0x3564 <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    355c:	d6 cf       	rjmp	.-84     	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    355e:	c1 2c       	mov	r12, r1
    3560:	d1 2c       	mov	r13, r1
    3562:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	c7 01       	movw	r24, r14
    3568:	b6 01       	movw	r22, r12
    356a:	e5 dc       	rcall	.-1590   	; 0x2f36 <_ZN8SdVolume13cacheRawBlockEmh>
    356c:	88 23       	and	r24, r24
    356e:	69 f2       	breq	.-102    	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3570:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <_ZN8SdVolume12cacheBuffer_E+0xb>
    3574:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <_ZN8SdVolume12cacheBuffer_E+0xc>
    3578:	81 15       	cp	r24, r1
    357a:	92 40       	sbci	r25, 0x02	; 2
    357c:	31 f6       	brne	.-116    	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    357e:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3582:	99 23       	and	r25, r25
    3584:	09 f4       	brne	.+2      	; 0x3588 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    3586:	c1 cf       	rjmp	.-126    	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    3588:	20 91 87 06 	lds	r18, 0x0687	; 0x800687 <_ZN8SdVolume12cacheBuffer_E+0xe>
    358c:	30 91 88 06 	lds	r19, 0x0688	; 0x800688 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3590:	23 2b       	or	r18, r19
    3592:	09 f4       	brne	.+2      	; 0x3596 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    3594:	ba cf       	rjmp	.-140    	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    3596:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    359a:	88 23       	and	r24, r24
    359c:	09 f4       	brne	.+2      	; 0x35a0 <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    359e:	b5 cf       	rjmp	.-150    	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    35a0:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    35a2:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    35a4:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	41 e0       	ldi	r20, 0x01	; 1
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    35ae:	e2 2f       	mov	r30, r18
    35b0:	ba 01       	movw	r22, r20
    35b2:	02 2e       	mov	r0, r18
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    35b6:	66 0f       	add	r22, r22
    35b8:	77 1f       	adc	r23, r23
    35ba:	0a 94       	dec	r0
    35bc:	e2 f7       	brpl	.-8      	; 0x35b6 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    35be:	86 17       	cp	r24, r22
    35c0:	97 07       	cpc	r25, r23
    35c2:	31 f0       	breq	.+12     	; 0x35d0 <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    35c4:	31 e0       	ldi	r19, 0x01	; 1
    35c6:	32 0f       	add	r19, r18
    35c8:	3d 87       	std	Y+13, r19	; 0x0d
    35ca:	28 30       	cpi	r18, 0x08	; 8
    35cc:	78 f3       	brcs	.-34     	; 0x35ac <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    35ce:	9d cf       	rjmp	.-198    	; 0x350a <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    35d0:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <_ZN8SdVolume12cacheBuffer_E+0x16>
    35d4:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    35d8:	21 15       	cp	r18, r1
    35da:	31 05       	cpc	r19, r1
    35dc:	19 f0       	breq	.+6      	; 0x35e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	08 c0       	rjmp	.+16     	; 0x35f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    35e4:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <_ZN8SdVolume12cacheBuffer_E+0x24>
    35e8:	30 91 9e 06 	lds	r19, 0x069E	; 0x80069e <_ZN8SdVolume12cacheBuffer_E+0x25>
    35ec:	40 91 9f 06 	lds	r20, 0x069F	; 0x80069f <_ZN8SdVolume12cacheBuffer_E+0x26>
    35f0:	50 91 a0 06 	lds	r21, 0x06A0	; 0x8006a0 <_ZN8SdVolume12cacheBuffer_E+0x27>
    35f4:	2d 83       	std	Y+5, r18	; 0x05
    35f6:	3e 83       	std	Y+6, r19	; 0x06
    35f8:	4f 83       	std	Y+7, r20	; 0x07
    35fa:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    35fc:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <_ZN8SdVolume12cacheBuffer_E+0xe>
    3600:	90 91 88 06 	lds	r25, 0x0688	; 0x800688 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3604:	46 01       	movw	r8, r12
    3606:	57 01       	movw	r10, r14
    3608:	88 0e       	add	r8, r24
    360a:	99 1e       	adc	r9, r25
    360c:	a1 1c       	adc	r10, r1
    360e:	b1 1c       	adc	r11, r1
    3610:	8b 8a       	std	Y+19, r8	; 0x13
    3612:	9c 8a       	std	Y+20, r9	; 0x14
    3614:	ad 8a       	std	Y+21, r10	; 0x15
    3616:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3618:	00 91 8a 06 	lds	r16, 0x068A	; 0x80068a <_ZN8SdVolume12cacheBuffer_E+0x11>
    361c:	10 91 8b 06 	lds	r17, 0x068B	; 0x80068b <_ZN8SdVolume12cacheBuffer_E+0x12>
    3620:	19 8f       	std	Y+25, r17	; 0x19
    3622:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3624:	a0 91 89 06 	lds	r26, 0x0689	; 0x800689 <_ZN8SdVolume12cacheBuffer_E+0x10>
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	e9 d0       	rcall	.+466    	; 0x37fe <__muluhisi3>
    362c:	86 0e       	add	r8, r22
    362e:	97 1e       	adc	r9, r23
    3630:	a8 1e       	adc	r10, r24
    3632:	b9 1e       	adc	r11, r25
    3634:	8a 8e       	std	Y+26, r8	; 0x1a
    3636:	9b 8e       	std	Y+27, r9	; 0x1b
    3638:	ac 8e       	std	Y+28, r10	; 0x1c
    363a:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    363c:	85 e0       	ldi	r24, 0x05	; 5
    363e:	00 0f       	add	r16, r16
    3640:	11 1f       	adc	r17, r17
    3642:	8a 95       	dec	r24
    3644:	e1 f7       	brne	.-8      	; 0x363e <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    3646:	01 50       	subi	r16, 0x01	; 1
    3648:	1e 4f       	sbci	r17, 0xFE	; 254
    364a:	01 2f       	mov	r16, r17
    364c:	11 27       	eor	r17, r17
    364e:	06 95       	lsr	r16
    3650:	80 0e       	add	r8, r16
    3652:	91 1e       	adc	r9, r17
    3654:	a1 1c       	adc	r10, r1
    3656:	b1 1c       	adc	r11, r1
    3658:	8e 86       	std	Y+14, r8	; 0x0e
    365a:	9f 86       	std	Y+15, r9	; 0x0f
    365c:	a8 8a       	std	Y+16, r10	; 0x10
    365e:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    3660:	20 91 8c 06 	lds	r18, 0x068C	; 0x80068c <_ZN8SdVolume12cacheBuffer_E+0x13>
    3664:	30 91 8d 06 	lds	r19, 0x068D	; 0x80068d <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    3668:	21 15       	cp	r18, r1
    366a:	31 05       	cpc	r19, r1
    366c:	21 f0       	breq	.+8      	; 0x3676 <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    366e:	a9 01       	movw	r20, r18
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	08 c0       	rjmp	.+16     	; 0x3686 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    3676:	40 91 99 06 	lds	r20, 0x0699	; 0x800699 <_ZN8SdVolume12cacheBuffer_E+0x20>
    367a:	50 91 9a 06 	lds	r21, 0x069A	; 0x80069a <_ZN8SdVolume12cacheBuffer_E+0x21>
    367e:	60 91 9b 06 	lds	r22, 0x069B	; 0x80069b <_ZN8SdVolume12cacheBuffer_E+0x22>
    3682:	70 91 9c 06 	lds	r23, 0x069C	; 0x80069c <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3686:	d7 01       	movw	r26, r14
    3688:	c6 01       	movw	r24, r12
    368a:	88 19       	sub	r24, r8
    368c:	99 09       	sbc	r25, r9
    368e:	aa 09       	sbc	r26, r10
    3690:	bb 09       	sbc	r27, r11
    3692:	84 0f       	add	r24, r20
    3694:	95 1f       	adc	r25, r21
    3696:	a6 1f       	adc	r26, r22
    3698:	b7 1f       	adc	r27, r23
    369a:	04 c0       	rjmp	.+8      	; 0x36a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    369c:	b6 95       	lsr	r27
    369e:	a7 95       	ror	r26
    36a0:	97 95       	ror	r25
    36a2:	87 95       	ror	r24
    36a4:	ea 95       	dec	r30
    36a6:	d2 f7       	brpl	.-12     	; 0x369c <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    36a8:	89 87       	std	Y+9, r24	; 0x09
    36aa:	9a 87       	std	Y+10, r25	; 0x0a
    36ac:	ab 87       	std	Y+11, r26	; 0x0b
    36ae:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    36b0:	85 3f       	cpi	r24, 0xF5	; 245
    36b2:	2f e0       	ldi	r18, 0x0F	; 15
    36b4:	92 07       	cpc	r25, r18
    36b6:	a1 05       	cpc	r26, r1
    36b8:	b1 05       	cpc	r27, r1
    36ba:	10 f4       	brcc	.+4      	; 0x36c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    36bc:	8c e0       	ldi	r24, 0x0C	; 12
    36be:	14 c0       	rjmp	.+40     	; 0x36e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    36c0:	85 3f       	cpi	r24, 0xF5	; 245
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	a1 05       	cpc	r26, r1
    36c6:	b1 05       	cpc	r27, r1
    36c8:	10 f4       	brcc	.+4      	; 0x36ce <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    36ca:	80 e1       	ldi	r24, 0x10	; 16
    36cc:	0d c0       	rjmp	.+26     	; 0x36e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    36ce:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    36d2:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    36d6:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    36da:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    36de:	8a 8f       	std	Y+26, r24	; 0x1a
    36e0:	9b 8f       	std	Y+27, r25	; 0x1b
    36e2:	ac 8f       	std	Y+28, r26	; 0x1c
    36e4:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    36e6:	80 e2       	ldi	r24, 0x20	; 32
    36e8:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
}
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	df 90       	pop	r13
    36fa:	cf 90       	pop	r12
    36fc:	bf 90       	pop	r11
    36fe:	af 90       	pop	r10
    3700:	9f 90       	pop	r9
    3702:	8f 90       	pop	r8
    3704:	08 95       	ret

00003706 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3706:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3708:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    370a:	f8 94       	cli
  if (!initialized) {
    370c:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <_ZN8SPIClass11initializedE>
    3710:	81 11       	cpse	r24, r1
    3712:	27 c0       	rjmp	.+78     	; 0x3762 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3714:	e4 e0       	ldi	r30, 0x04	; 4
    3716:	f2 e0       	ldi	r31, 0x02	; 2
    3718:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    371a:	ee eb       	ldi	r30, 0xBE	; 190
    371c:	f1 e0       	ldi	r31, 0x01	; 1
    371e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3720:	e8 2f       	mov	r30, r24
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	ee 0f       	add	r30, r30
    3726:	ff 1f       	adc	r31, r31
    3728:	e7 5b       	subi	r30, 0xB7	; 183
    372a:	fd 4f       	sbci	r31, 0xFD	; 253
    372c:	a5 91       	lpm	r26, Z+
    372e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3730:	ec 91       	ld	r30, X
    3732:	e9 23       	and	r30, r25
    3734:	21 f4       	brne	.+8      	; 0x373e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	85 e3       	ldi	r24, 0x35	; 53
    373a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    373e:	61 e0       	ldi	r22, 0x01	; 1
    3740:	85 e3       	ldi	r24, 0x35	; 53
    3742:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3746:	8c b5       	in	r24, 0x2c	; 44
    3748:	80 61       	ori	r24, 0x10	; 16
    374a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    374c:	8c b5       	in	r24, 0x2c	; 44
    374e:	80 64       	ori	r24, 0x40	; 64
    3750:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3752:	61 e0       	ldi	r22, 0x01	; 1
    3754:	84 e3       	ldi	r24, 0x34	; 52
    3756:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>
    pinMode(MOSI, OUTPUT);
    375a:	61 e0       	ldi	r22, 0x01	; 1
    375c:	83 e3       	ldi	r24, 0x33	; 51
    375e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <pinMode>
  }
  initialized++; // reference count
    3762:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <_ZN8SPIClass11initializedE>
    3766:	8f 5f       	subi	r24, 0xFF	; 255
    3768:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <_ZN8SPIClass11initializedE>
  SREG = sreg;
    376c:	cf bf       	out	0x3f, r28	; 63
}
    376e:	cf 91       	pop	r28
    3770:	08 95       	ret

00003772 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3772:	08 95       	ret

00003774 <__udivmodqi4>:
    3774:	99 1b       	sub	r25, r25
    3776:	79 e0       	ldi	r23, 0x09	; 9
    3778:	04 c0       	rjmp	.+8      	; 0x3782 <__udivmodqi4_ep>

0000377a <__udivmodqi4_loop>:
    377a:	99 1f       	adc	r25, r25
    377c:	96 17       	cp	r25, r22
    377e:	08 f0       	brcs	.+2      	; 0x3782 <__udivmodqi4_ep>
    3780:	96 1b       	sub	r25, r22

00003782 <__udivmodqi4_ep>:
    3782:	88 1f       	adc	r24, r24
    3784:	7a 95       	dec	r23
    3786:	c9 f7       	brne	.-14     	; 0x377a <__udivmodqi4_loop>
    3788:	80 95       	com	r24
    378a:	08 95       	ret

0000378c <__udivmodsi4>:
    378c:	a1 e2       	ldi	r26, 0x21	; 33
    378e:	1a 2e       	mov	r1, r26
    3790:	aa 1b       	sub	r26, r26
    3792:	bb 1b       	sub	r27, r27
    3794:	fd 01       	movw	r30, r26
    3796:	0d c0       	rjmp	.+26     	; 0x37b2 <__udivmodsi4_ep>

00003798 <__udivmodsi4_loop>:
    3798:	aa 1f       	adc	r26, r26
    379a:	bb 1f       	adc	r27, r27
    379c:	ee 1f       	adc	r30, r30
    379e:	ff 1f       	adc	r31, r31
    37a0:	a2 17       	cp	r26, r18
    37a2:	b3 07       	cpc	r27, r19
    37a4:	e4 07       	cpc	r30, r20
    37a6:	f5 07       	cpc	r31, r21
    37a8:	20 f0       	brcs	.+8      	; 0x37b2 <__udivmodsi4_ep>
    37aa:	a2 1b       	sub	r26, r18
    37ac:	b3 0b       	sbc	r27, r19
    37ae:	e4 0b       	sbc	r30, r20
    37b0:	f5 0b       	sbc	r31, r21

000037b2 <__udivmodsi4_ep>:
    37b2:	66 1f       	adc	r22, r22
    37b4:	77 1f       	adc	r23, r23
    37b6:	88 1f       	adc	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	1a 94       	dec	r1
    37bc:	69 f7       	brne	.-38     	; 0x3798 <__udivmodsi4_loop>
    37be:	60 95       	com	r22
    37c0:	70 95       	com	r23
    37c2:	80 95       	com	r24
    37c4:	90 95       	com	r25
    37c6:	9b 01       	movw	r18, r22
    37c8:	ac 01       	movw	r20, r24
    37ca:	bd 01       	movw	r22, r26
    37cc:	cf 01       	movw	r24, r30
    37ce:	08 95       	ret

000037d0 <__tablejump2__>:
    37d0:	ee 0f       	add	r30, r30
    37d2:	ff 1f       	adc	r31, r31
    37d4:	88 1f       	adc	r24, r24
    37d6:	8b bf       	out	0x3b, r24	; 59
    37d8:	07 90       	elpm	r0, Z+
    37da:	f6 91       	elpm	r31, Z
    37dc:	e0 2d       	mov	r30, r0
    37de:	19 94       	eijmp

000037e0 <__umulhisi3>:
    37e0:	a2 9f       	mul	r26, r18
    37e2:	b0 01       	movw	r22, r0
    37e4:	b3 9f       	mul	r27, r19
    37e6:	c0 01       	movw	r24, r0
    37e8:	a3 9f       	mul	r26, r19
    37ea:	70 0d       	add	r23, r0
    37ec:	81 1d       	adc	r24, r1
    37ee:	11 24       	eor	r1, r1
    37f0:	91 1d       	adc	r25, r1
    37f2:	b2 9f       	mul	r27, r18
    37f4:	70 0d       	add	r23, r0
    37f6:	81 1d       	adc	r24, r1
    37f8:	11 24       	eor	r1, r1
    37fa:	91 1d       	adc	r25, r1
    37fc:	08 95       	ret

000037fe <__muluhisi3>:
    37fe:	f0 df       	rcall	.-32     	; 0x37e0 <__umulhisi3>
    3800:	a5 9f       	mul	r26, r21
    3802:	90 0d       	add	r25, r0
    3804:	b4 9f       	mul	r27, r20
    3806:	90 0d       	add	r25, r0
    3808:	a4 9f       	mul	r26, r20
    380a:	80 0d       	add	r24, r0
    380c:	91 1d       	adc	r25, r1
    380e:	11 24       	eor	r1, r1
    3810:	08 95       	ret

00003812 <malloc>:
    3812:	0f 93       	push	r16
    3814:	1f 93       	push	r17
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
    381a:	82 30       	cpi	r24, 0x02	; 2
    381c:	91 05       	cpc	r25, r1
    381e:	10 f4       	brcc	.+4      	; 0x3824 <malloc+0x12>
    3820:	82 e0       	ldi	r24, 0x02	; 2
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <__flp>
    3828:	f0 91 80 08 	lds	r31, 0x0880	; 0x800880 <__flp+0x1>
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	a0 e0       	ldi	r26, 0x00	; 0
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	30 97       	sbiw	r30, 0x00	; 0
    3836:	19 f1       	breq	.+70     	; 0x387e <malloc+0x6c>
    3838:	40 81       	ld	r20, Z
    383a:	51 81       	ldd	r21, Z+1	; 0x01
    383c:	02 81       	ldd	r16, Z+2	; 0x02
    383e:	13 81       	ldd	r17, Z+3	; 0x03
    3840:	48 17       	cp	r20, r24
    3842:	59 07       	cpc	r21, r25
    3844:	c8 f0       	brcs	.+50     	; 0x3878 <malloc+0x66>
    3846:	84 17       	cp	r24, r20
    3848:	95 07       	cpc	r25, r21
    384a:	69 f4       	brne	.+26     	; 0x3866 <malloc+0x54>
    384c:	10 97       	sbiw	r26, 0x00	; 0
    384e:	31 f0       	breq	.+12     	; 0x385c <malloc+0x4a>
    3850:	12 96       	adiw	r26, 0x02	; 2
    3852:	0c 93       	st	X, r16
    3854:	12 97       	sbiw	r26, 0x02	; 2
    3856:	13 96       	adiw	r26, 0x03	; 3
    3858:	1c 93       	st	X, r17
    385a:	27 c0       	rjmp	.+78     	; 0x38aa <malloc+0x98>
    385c:	00 93 7f 08 	sts	0x087F, r16	; 0x80087f <__flp>
    3860:	10 93 80 08 	sts	0x0880, r17	; 0x800880 <__flp+0x1>
    3864:	22 c0       	rjmp	.+68     	; 0x38aa <malloc+0x98>
    3866:	21 15       	cp	r18, r1
    3868:	31 05       	cpc	r19, r1
    386a:	19 f0       	breq	.+6      	; 0x3872 <malloc+0x60>
    386c:	42 17       	cp	r20, r18
    386e:	53 07       	cpc	r21, r19
    3870:	18 f4       	brcc	.+6      	; 0x3878 <malloc+0x66>
    3872:	9a 01       	movw	r18, r20
    3874:	bd 01       	movw	r22, r26
    3876:	ef 01       	movw	r28, r30
    3878:	df 01       	movw	r26, r30
    387a:	f8 01       	movw	r30, r16
    387c:	db cf       	rjmp	.-74     	; 0x3834 <malloc+0x22>
    387e:	21 15       	cp	r18, r1
    3880:	31 05       	cpc	r19, r1
    3882:	f9 f0       	breq	.+62     	; 0x38c2 <malloc+0xb0>
    3884:	28 1b       	sub	r18, r24
    3886:	39 0b       	sbc	r19, r25
    3888:	24 30       	cpi	r18, 0x04	; 4
    388a:	31 05       	cpc	r19, r1
    388c:	80 f4       	brcc	.+32     	; 0x38ae <malloc+0x9c>
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	9b 81       	ldd	r25, Y+3	; 0x03
    3892:	61 15       	cp	r22, r1
    3894:	71 05       	cpc	r23, r1
    3896:	21 f0       	breq	.+8      	; 0x38a0 <malloc+0x8e>
    3898:	fb 01       	movw	r30, r22
    389a:	93 83       	std	Z+3, r25	; 0x03
    389c:	82 83       	std	Z+2, r24	; 0x02
    389e:	04 c0       	rjmp	.+8      	; 0x38a8 <malloc+0x96>
    38a0:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <__flp+0x1>
    38a4:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <__flp>
    38a8:	fe 01       	movw	r30, r28
    38aa:	32 96       	adiw	r30, 0x02	; 2
    38ac:	44 c0       	rjmp	.+136    	; 0x3936 <malloc+0x124>
    38ae:	fe 01       	movw	r30, r28
    38b0:	e2 0f       	add	r30, r18
    38b2:	f3 1f       	adc	r31, r19
    38b4:	81 93       	st	Z+, r24
    38b6:	91 93       	st	Z+, r25
    38b8:	22 50       	subi	r18, 0x02	; 2
    38ba:	31 09       	sbc	r19, r1
    38bc:	39 83       	std	Y+1, r19	; 0x01
    38be:	28 83       	st	Y, r18
    38c0:	3a c0       	rjmp	.+116    	; 0x3936 <malloc+0x124>
    38c2:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <__brkval>
    38c6:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <__brkval+0x1>
    38ca:	23 2b       	or	r18, r19
    38cc:	41 f4       	brne	.+16     	; 0x38de <malloc+0xcc>
    38ce:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    38d2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    38d6:	30 93 7e 08 	sts	0x087E, r19	; 0x80087e <__brkval+0x1>
    38da:	20 93 7d 08 	sts	0x087D, r18	; 0x80087d <__brkval>
    38de:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    38e2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    38e6:	21 15       	cp	r18, r1
    38e8:	31 05       	cpc	r19, r1
    38ea:	41 f4       	brne	.+16     	; 0x38fc <malloc+0xea>
    38ec:	2d b7       	in	r18, 0x3d	; 61
    38ee:	3e b7       	in	r19, 0x3e	; 62
    38f0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    38f4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    38f8:	24 1b       	sub	r18, r20
    38fa:	35 0b       	sbc	r19, r21
    38fc:	e0 91 7d 08 	lds	r30, 0x087D	; 0x80087d <__brkval>
    3900:	f0 91 7e 08 	lds	r31, 0x087E	; 0x80087e <__brkval+0x1>
    3904:	e2 17       	cp	r30, r18
    3906:	f3 07       	cpc	r31, r19
    3908:	a0 f4       	brcc	.+40     	; 0x3932 <malloc+0x120>
    390a:	2e 1b       	sub	r18, r30
    390c:	3f 0b       	sbc	r19, r31
    390e:	28 17       	cp	r18, r24
    3910:	39 07       	cpc	r19, r25
    3912:	78 f0       	brcs	.+30     	; 0x3932 <malloc+0x120>
    3914:	ac 01       	movw	r20, r24
    3916:	4e 5f       	subi	r20, 0xFE	; 254
    3918:	5f 4f       	sbci	r21, 0xFF	; 255
    391a:	24 17       	cp	r18, r20
    391c:	35 07       	cpc	r19, r21
    391e:	48 f0       	brcs	.+18     	; 0x3932 <malloc+0x120>
    3920:	4e 0f       	add	r20, r30
    3922:	5f 1f       	adc	r21, r31
    3924:	50 93 7e 08 	sts	0x087E, r21	; 0x80087e <__brkval+0x1>
    3928:	40 93 7d 08 	sts	0x087D, r20	; 0x80087d <__brkval>
    392c:	81 93       	st	Z+, r24
    392e:	91 93       	st	Z+, r25
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <malloc+0x124>
    3932:	e0 e0       	ldi	r30, 0x00	; 0
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	cf 01       	movw	r24, r30
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    3940:	08 95       	ret

00003942 <free>:
    3942:	cf 93       	push	r28
    3944:	df 93       	push	r29
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	09 f4       	brne	.+2      	; 0x394c <free+0xa>
    394a:	81 c0       	rjmp	.+258    	; 0x3a4e <free+0x10c>
    394c:	fc 01       	movw	r30, r24
    394e:	32 97       	sbiw	r30, 0x02	; 2
    3950:	13 82       	std	Z+3, r1	; 0x03
    3952:	12 82       	std	Z+2, r1	; 0x02
    3954:	a0 91 7f 08 	lds	r26, 0x087F	; 0x80087f <__flp>
    3958:	b0 91 80 08 	lds	r27, 0x0880	; 0x800880 <__flp+0x1>
    395c:	10 97       	sbiw	r26, 0x00	; 0
    395e:	81 f4       	brne	.+32     	; 0x3980 <free+0x3e>
    3960:	20 81       	ld	r18, Z
    3962:	31 81       	ldd	r19, Z+1	; 0x01
    3964:	82 0f       	add	r24, r18
    3966:	93 1f       	adc	r25, r19
    3968:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <__brkval>
    396c:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <__brkval+0x1>
    3970:	28 17       	cp	r18, r24
    3972:	39 07       	cpc	r19, r25
    3974:	51 f5       	brne	.+84     	; 0x39ca <free+0x88>
    3976:	f0 93 7e 08 	sts	0x087E, r31	; 0x80087e <__brkval+0x1>
    397a:	e0 93 7d 08 	sts	0x087D, r30	; 0x80087d <__brkval>
    397e:	67 c0       	rjmp	.+206    	; 0x3a4e <free+0x10c>
    3980:	ed 01       	movw	r28, r26
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	ce 17       	cp	r28, r30
    3988:	df 07       	cpc	r29, r31
    398a:	40 f4       	brcc	.+16     	; 0x399c <free+0x5a>
    398c:	4a 81       	ldd	r20, Y+2	; 0x02
    398e:	5b 81       	ldd	r21, Y+3	; 0x03
    3990:	9e 01       	movw	r18, r28
    3992:	41 15       	cp	r20, r1
    3994:	51 05       	cpc	r21, r1
    3996:	f1 f0       	breq	.+60     	; 0x39d4 <free+0x92>
    3998:	ea 01       	movw	r28, r20
    399a:	f5 cf       	rjmp	.-22     	; 0x3986 <free+0x44>
    399c:	d3 83       	std	Z+3, r29	; 0x03
    399e:	c2 83       	std	Z+2, r28	; 0x02
    39a0:	40 81       	ld	r20, Z
    39a2:	51 81       	ldd	r21, Z+1	; 0x01
    39a4:	84 0f       	add	r24, r20
    39a6:	95 1f       	adc	r25, r21
    39a8:	c8 17       	cp	r28, r24
    39aa:	d9 07       	cpc	r29, r25
    39ac:	59 f4       	brne	.+22     	; 0x39c4 <free+0x82>
    39ae:	88 81       	ld	r24, Y
    39b0:	99 81       	ldd	r25, Y+1	; 0x01
    39b2:	84 0f       	add	r24, r20
    39b4:	95 1f       	adc	r25, r21
    39b6:	02 96       	adiw	r24, 0x02	; 2
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	93 83       	std	Z+3, r25	; 0x03
    39c2:	82 83       	std	Z+2, r24	; 0x02
    39c4:	21 15       	cp	r18, r1
    39c6:	31 05       	cpc	r19, r1
    39c8:	29 f4       	brne	.+10     	; 0x39d4 <free+0x92>
    39ca:	f0 93 80 08 	sts	0x0880, r31	; 0x800880 <__flp+0x1>
    39ce:	e0 93 7f 08 	sts	0x087F, r30	; 0x80087f <__flp>
    39d2:	3d c0       	rjmp	.+122    	; 0x3a4e <free+0x10c>
    39d4:	e9 01       	movw	r28, r18
    39d6:	fb 83       	std	Y+3, r31	; 0x03
    39d8:	ea 83       	std	Y+2, r30	; 0x02
    39da:	49 91       	ld	r20, Y+
    39dc:	59 91       	ld	r21, Y+
    39de:	c4 0f       	add	r28, r20
    39e0:	d5 1f       	adc	r29, r21
    39e2:	ec 17       	cp	r30, r28
    39e4:	fd 07       	cpc	r31, r29
    39e6:	61 f4       	brne	.+24     	; 0x3a00 <free+0xbe>
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	84 0f       	add	r24, r20
    39ee:	95 1f       	adc	r25, r21
    39f0:	02 96       	adiw	r24, 0x02	; 2
    39f2:	e9 01       	movw	r28, r18
    39f4:	99 83       	std	Y+1, r25	; 0x01
    39f6:	88 83       	st	Y, r24
    39f8:	82 81       	ldd	r24, Z+2	; 0x02
    39fa:	93 81       	ldd	r25, Z+3	; 0x03
    39fc:	9b 83       	std	Y+3, r25	; 0x03
    39fe:	8a 83       	std	Y+2, r24	; 0x02
    3a00:	e0 e0       	ldi	r30, 0x00	; 0
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	12 96       	adiw	r26, 0x02	; 2
    3a06:	8d 91       	ld	r24, X+
    3a08:	9c 91       	ld	r25, X
    3a0a:	13 97       	sbiw	r26, 0x03	; 3
    3a0c:	00 97       	sbiw	r24, 0x00	; 0
    3a0e:	19 f0       	breq	.+6      	; 0x3a16 <free+0xd4>
    3a10:	fd 01       	movw	r30, r26
    3a12:	dc 01       	movw	r26, r24
    3a14:	f7 cf       	rjmp	.-18     	; 0x3a04 <free+0xc2>
    3a16:	8d 91       	ld	r24, X+
    3a18:	9c 91       	ld	r25, X
    3a1a:	11 97       	sbiw	r26, 0x01	; 1
    3a1c:	9d 01       	movw	r18, r26
    3a1e:	2e 5f       	subi	r18, 0xFE	; 254
    3a20:	3f 4f       	sbci	r19, 0xFF	; 255
    3a22:	82 0f       	add	r24, r18
    3a24:	93 1f       	adc	r25, r19
    3a26:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <__brkval>
    3a2a:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <__brkval+0x1>
    3a2e:	28 17       	cp	r18, r24
    3a30:	39 07       	cpc	r19, r25
    3a32:	69 f4       	brne	.+26     	; 0x3a4e <free+0x10c>
    3a34:	30 97       	sbiw	r30, 0x00	; 0
    3a36:	29 f4       	brne	.+10     	; 0x3a42 <free+0x100>
    3a38:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <__flp+0x1>
    3a3c:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <__flp>
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <free+0x104>
    3a42:	13 82       	std	Z+3, r1	; 0x03
    3a44:	12 82       	std	Z+2, r1	; 0x02
    3a46:	b0 93 7e 08 	sts	0x087E, r27	; 0x80087e <__brkval+0x1>
    3a4a:	a0 93 7d 08 	sts	0x087D, r26	; 0x80087d <__brkval>
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	08 95       	ret

00003a54 <realloc>:
    3a54:	6f 92       	push	r6
    3a56:	7f 92       	push	r7
    3a58:	8f 92       	push	r8
    3a5a:	9f 92       	push	r9
    3a5c:	af 92       	push	r10
    3a5e:	bf 92       	push	r11
    3a60:	cf 92       	push	r12
    3a62:	df 92       	push	r13
    3a64:	ef 92       	push	r14
    3a66:	ff 92       	push	r15
    3a68:	0f 93       	push	r16
    3a6a:	1f 93       	push	r17
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	81 f4       	brne	.+32     	; 0x3a94 <realloc+0x40>
    3a74:	cb 01       	movw	r24, r22
    3a76:	df 91       	pop	r29
    3a78:	cf 91       	pop	r28
    3a7a:	1f 91       	pop	r17
    3a7c:	0f 91       	pop	r16
    3a7e:	ff 90       	pop	r15
    3a80:	ef 90       	pop	r14
    3a82:	df 90       	pop	r13
    3a84:	cf 90       	pop	r12
    3a86:	bf 90       	pop	r11
    3a88:	af 90       	pop	r10
    3a8a:	9f 90       	pop	r9
    3a8c:	8f 90       	pop	r8
    3a8e:	7f 90       	pop	r7
    3a90:	6f 90       	pop	r6
    3a92:	bf ce       	rjmp	.-642    	; 0x3812 <malloc>
    3a94:	fc 01       	movw	r30, r24
    3a96:	e6 0f       	add	r30, r22
    3a98:	f7 1f       	adc	r31, r23
    3a9a:	9c 01       	movw	r18, r24
    3a9c:	22 50       	subi	r18, 0x02	; 2
    3a9e:	31 09       	sbc	r19, r1
    3aa0:	e2 17       	cp	r30, r18
    3aa2:	f3 07       	cpc	r31, r19
    3aa4:	08 f4       	brcc	.+2      	; 0x3aa8 <realloc+0x54>
    3aa6:	a5 c0       	rjmp	.+330    	; 0x3bf2 <realloc+0x19e>
    3aa8:	ec 01       	movw	r28, r24
    3aaa:	d9 01       	movw	r26, r18
    3aac:	0d 91       	ld	r16, X+
    3aae:	1c 91       	ld	r17, X
    3ab0:	11 97       	sbiw	r26, 0x01	; 1
    3ab2:	06 17       	cp	r16, r22
    3ab4:	17 07       	cpc	r17, r23
    3ab6:	a8 f0       	brcs	.+42     	; 0x3ae2 <realloc+0x8e>
    3ab8:	05 30       	cpi	r16, 0x05	; 5
    3aba:	11 05       	cpc	r17, r1
    3abc:	08 f4       	brcc	.+2      	; 0x3ac0 <realloc+0x6c>
    3abe:	97 c0       	rjmp	.+302    	; 0x3bee <realloc+0x19a>
    3ac0:	c8 01       	movw	r24, r16
    3ac2:	04 97       	sbiw	r24, 0x04	; 4
    3ac4:	86 17       	cp	r24, r22
    3ac6:	97 07       	cpc	r25, r23
    3ac8:	08 f4       	brcc	.+2      	; 0x3acc <realloc+0x78>
    3aca:	91 c0       	rjmp	.+290    	; 0x3bee <realloc+0x19a>
    3acc:	02 50       	subi	r16, 0x02	; 2
    3ace:	11 09       	sbc	r17, r1
    3ad0:	06 1b       	sub	r16, r22
    3ad2:	17 0b       	sbc	r17, r23
    3ad4:	01 93       	st	Z+, r16
    3ad6:	11 93       	st	Z+, r17
    3ad8:	6d 93       	st	X+, r22
    3ada:	7c 93       	st	X, r23
    3adc:	cf 01       	movw	r24, r30
    3ade:	31 df       	rcall	.-414    	; 0x3942 <free>
    3ae0:	86 c0       	rjmp	.+268    	; 0x3bee <realloc+0x19a>
    3ae2:	5b 01       	movw	r10, r22
    3ae4:	a0 1a       	sub	r10, r16
    3ae6:	b1 0a       	sbc	r11, r17
    3ae8:	4c 01       	movw	r8, r24
    3aea:	80 0e       	add	r8, r16
    3aec:	91 1e       	adc	r9, r17
    3aee:	a0 91 7f 08 	lds	r26, 0x087F	; 0x80087f <__flp>
    3af2:	b0 91 80 08 	lds	r27, 0x0880	; 0x800880 <__flp+0x1>
    3af6:	61 2c       	mov	r6, r1
    3af8:	71 2c       	mov	r7, r1
    3afa:	e1 2c       	mov	r14, r1
    3afc:	f1 2c       	mov	r15, r1
    3afe:	10 97       	sbiw	r26, 0x00	; 0
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <realloc+0xb0>
    3b02:	46 c0       	rjmp	.+140    	; 0x3b90 <realloc+0x13c>
    3b04:	8d 91       	ld	r24, X+
    3b06:	9c 91       	ld	r25, X
    3b08:	11 97       	sbiw	r26, 0x01	; 1
    3b0a:	a8 15       	cp	r26, r8
    3b0c:	b9 05       	cpc	r27, r9
    3b0e:	b1 f5       	brne	.+108    	; 0x3b7c <realloc+0x128>
    3b10:	6c 01       	movw	r12, r24
    3b12:	42 e0       	ldi	r20, 0x02	; 2
    3b14:	c4 0e       	add	r12, r20
    3b16:	d1 1c       	adc	r13, r1
    3b18:	ca 14       	cp	r12, r10
    3b1a:	db 04       	cpc	r13, r11
    3b1c:	78 f1       	brcs	.+94     	; 0x3b7c <realloc+0x128>
    3b1e:	4c 01       	movw	r8, r24
    3b20:	8a 18       	sub	r8, r10
    3b22:	9b 08       	sbc	r9, r11
    3b24:	64 01       	movw	r12, r8
    3b26:	42 e0       	ldi	r20, 0x02	; 2
    3b28:	c4 0e       	add	r12, r20
    3b2a:	d1 1c       	adc	r13, r1
    3b2c:	12 96       	adiw	r26, 0x02	; 2
    3b2e:	bc 90       	ld	r11, X
    3b30:	12 97       	sbiw	r26, 0x02	; 2
    3b32:	13 96       	adiw	r26, 0x03	; 3
    3b34:	ac 91       	ld	r26, X
    3b36:	b5 e0       	ldi	r27, 0x05	; 5
    3b38:	cb 16       	cp	r12, r27
    3b3a:	d1 04       	cpc	r13, r1
    3b3c:	40 f0       	brcs	.+16     	; 0x3b4e <realloc+0xfa>
    3b3e:	b2 82       	std	Z+2, r11	; 0x02
    3b40:	a3 83       	std	Z+3, r26	; 0x03
    3b42:	91 82       	std	Z+1, r9	; 0x01
    3b44:	80 82       	st	Z, r8
    3b46:	d9 01       	movw	r26, r18
    3b48:	6d 93       	st	X+, r22
    3b4a:	7c 93       	st	X, r23
    3b4c:	09 c0       	rjmp	.+18     	; 0x3b60 <realloc+0x10c>
    3b4e:	0e 5f       	subi	r16, 0xFE	; 254
    3b50:	1f 4f       	sbci	r17, 0xFF	; 255
    3b52:	80 0f       	add	r24, r16
    3b54:	91 1f       	adc	r25, r17
    3b56:	f9 01       	movw	r30, r18
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	80 83       	st	Z, r24
    3b5c:	eb 2d       	mov	r30, r11
    3b5e:	fa 2f       	mov	r31, r26
    3b60:	e1 14       	cp	r14, r1
    3b62:	f1 04       	cpc	r15, r1
    3b64:	31 f0       	breq	.+12     	; 0x3b72 <realloc+0x11e>
    3b66:	d7 01       	movw	r26, r14
    3b68:	13 96       	adiw	r26, 0x03	; 3
    3b6a:	fc 93       	st	X, r31
    3b6c:	ee 93       	st	-X, r30
    3b6e:	12 97       	sbiw	r26, 0x02	; 2
    3b70:	3e c0       	rjmp	.+124    	; 0x3bee <realloc+0x19a>
    3b72:	f0 93 80 08 	sts	0x0880, r31	; 0x800880 <__flp+0x1>
    3b76:	e0 93 7f 08 	sts	0x087F, r30	; 0x80087f <__flp>
    3b7a:	39 c0       	rjmp	.+114    	; 0x3bee <realloc+0x19a>
    3b7c:	68 16       	cp	r6, r24
    3b7e:	79 06       	cpc	r7, r25
    3b80:	08 f4       	brcc	.+2      	; 0x3b84 <realloc+0x130>
    3b82:	3c 01       	movw	r6, r24
    3b84:	7d 01       	movw	r14, r26
    3b86:	12 96       	adiw	r26, 0x02	; 2
    3b88:	0d 90       	ld	r0, X+
    3b8a:	bc 91       	ld	r27, X
    3b8c:	a0 2d       	mov	r26, r0
    3b8e:	b7 cf       	rjmp	.-146    	; 0x3afe <realloc+0xaa>
    3b90:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <__brkval>
    3b94:	90 91 7e 08 	lds	r25, 0x087E	; 0x80087e <__brkval+0x1>
    3b98:	88 16       	cp	r8, r24
    3b9a:	99 06       	cpc	r9, r25
    3b9c:	e1 f4       	brne	.+56     	; 0x3bd6 <realloc+0x182>
    3b9e:	66 16       	cp	r6, r22
    3ba0:	77 06       	cpc	r7, r23
    3ba2:	c8 f4       	brcc	.+50     	; 0x3bd6 <realloc+0x182>
    3ba4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3ba8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3bac:	00 97       	sbiw	r24, 0x00	; 0
    3bae:	41 f4       	brne	.+16     	; 0x3bc0 <realloc+0x16c>
    3bb0:	8d b7       	in	r24, 0x3d	; 61
    3bb2:	9e b7       	in	r25, 0x3e	; 62
    3bb4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3bb8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3bbc:	84 1b       	sub	r24, r20
    3bbe:	95 0b       	sbc	r25, r21
    3bc0:	e8 17       	cp	r30, r24
    3bc2:	f9 07       	cpc	r31, r25
    3bc4:	b0 f4       	brcc	.+44     	; 0x3bf2 <realloc+0x19e>
    3bc6:	f0 93 7e 08 	sts	0x087E, r31	; 0x80087e <__brkval+0x1>
    3bca:	e0 93 7d 08 	sts	0x087D, r30	; 0x80087d <__brkval>
    3bce:	f9 01       	movw	r30, r18
    3bd0:	71 83       	std	Z+1, r23	; 0x01
    3bd2:	60 83       	st	Z, r22
    3bd4:	0c c0       	rjmp	.+24     	; 0x3bee <realloc+0x19a>
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	1c de       	rcall	.-968    	; 0x3812 <malloc>
    3bda:	7c 01       	movw	r14, r24
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	49 f0       	breq	.+18     	; 0x3bf2 <realloc+0x19e>
    3be0:	a8 01       	movw	r20, r16
    3be2:	be 01       	movw	r22, r28
    3be4:	20 d0       	rcall	.+64     	; 0x3c26 <memcpy>
    3be6:	ce 01       	movw	r24, r28
    3be8:	ac de       	rcall	.-680    	; 0x3942 <free>
    3bea:	c7 01       	movw	r24, r14
    3bec:	04 c0       	rjmp	.+8      	; 0x3bf6 <realloc+0x1a2>
    3bee:	ce 01       	movw	r24, r28
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <realloc+0x1a2>
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	1f 91       	pop	r17
    3bfc:	0f 91       	pop	r16
    3bfe:	ff 90       	pop	r15
    3c00:	ef 90       	pop	r14
    3c02:	df 90       	pop	r13
    3c04:	cf 90       	pop	r12
    3c06:	bf 90       	pop	r11
    3c08:	af 90       	pop	r10
    3c0a:	9f 90       	pop	r9
    3c0c:	8f 90       	pop	r8
    3c0e:	7f 90       	pop	r7
    3c10:	6f 90       	pop	r6
    3c12:	08 95       	ret

00003c14 <memcpy_P>:
    3c14:	fb 01       	movw	r30, r22
    3c16:	dc 01       	movw	r26, r24
    3c18:	02 c0       	rjmp	.+4      	; 0x3c1e <memcpy_P+0xa>
    3c1a:	05 90       	lpm	r0, Z+
    3c1c:	0d 92       	st	X+, r0
    3c1e:	41 50       	subi	r20, 0x01	; 1
    3c20:	50 40       	sbci	r21, 0x00	; 0
    3c22:	d8 f7       	brcc	.-10     	; 0x3c1a <memcpy_P+0x6>
    3c24:	08 95       	ret

00003c26 <memcpy>:
    3c26:	fb 01       	movw	r30, r22
    3c28:	dc 01       	movw	r26, r24
    3c2a:	02 c0       	rjmp	.+4      	; 0x3c30 <memcpy+0xa>
    3c2c:	01 90       	ld	r0, Z+
    3c2e:	0d 92       	st	X+, r0
    3c30:	41 50       	subi	r20, 0x01	; 1
    3c32:	50 40       	sbci	r21, 0x00	; 0
    3c34:	d8 f7       	brcc	.-10     	; 0x3c2c <memcpy+0x6>
    3c36:	08 95       	ret

00003c38 <strcpy>:
    3c38:	fb 01       	movw	r30, r22
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	01 90       	ld	r0, Z+
    3c3e:	0d 92       	st	X+, r0
    3c40:	00 20       	and	r0, r0
    3c42:	e1 f7       	brne	.-8      	; 0x3c3c <strcpy+0x4>
    3c44:	08 95       	ret

00003c46 <__do_global_dtors>:
    3c46:	11 e0       	ldi	r17, 0x01	; 1
    3c48:	c9 e3       	ldi	r28, 0x39	; 57
    3c4a:	d1 e0       	ldi	r29, 0x01	; 1
    3c4c:	00 e0       	ldi	r16, 0x00	; 0
    3c4e:	05 c0       	rjmp	.+10     	; 0x3c5a <__do_global_dtors+0x14>
    3c50:	80 2f       	mov	r24, r16
    3c52:	fe 01       	movw	r30, r28
    3c54:	bd dd       	rcall	.-1158   	; 0x37d0 <__tablejump2__>
    3c56:	21 96       	adiw	r28, 0x01	; 1
    3c58:	01 1d       	adc	r16, r1
    3c5a:	ca 33       	cpi	r28, 0x3A	; 58
    3c5c:	d1 07       	cpc	r29, r17
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	08 07       	cpc	r16, r24
    3c62:	b1 f7       	brne	.-20     	; 0x3c50 <__do_global_dtors+0xa>
    3c64:	f8 94       	cli

00003c66 <__stop_program>:
    3c66:	ff cf       	rjmp	.-2      	; 0x3c66 <__stop_program>
