
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800200  000035e4  00003678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004cd  00800460  00800460  000038d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000038d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000f20  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00031a54  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006e25  00000000  00000000  000362bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000970d  00000000  00000000  0003d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000038f4  00000000  00000000  000467f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007a3e  00000000  00000000  0004a0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015359  00000000  00000000  00051b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001148  00000000  00000000  00066e7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c1       	rjmp	.+580    	; 0x246 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__vector_1>
       8:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_2>
       c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_3>
      10:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_4>
      14:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_5>
      18:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_6>
      1c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_7>
      20:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_8>
      24:	d9 c4       	rjmp	.+2482   	; 0x9d8 <__vector_10>
      26:	00 00       	nop
      28:	d7 c4       	rjmp	.+2478   	; 0x9d8 <__vector_10>
      2a:	00 00       	nop
      2c:	d5 c4       	rjmp	.+2474   	; 0x9d8 <__vector_10>
      2e:	00 00       	nop
      30:	3b c1       	rjmp	.+630    	; 0x2a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	39 c1       	rjmp	.+626    	; 0x2a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	37 c1       	rjmp	.+622    	; 0x2a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c1       	rjmp	.+618    	; 0x2a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c1       	rjmp	.+614    	; 0x2a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c1       	rjmp	.+610    	; 0x2a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c1       	rjmp	.+606    	; 0x2a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c1       	rjmp	.+602    	; 0x2a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c1       	rjmp	.+598    	; 0x2a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c1       	rjmp	.+594    	; 0x2a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c1       	rjmp	.+590    	; 0x2a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_23>
      60:	23 c1       	rjmp	.+582    	; 0x2a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_25>
      68:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_26>
      6c:	1d c1       	rjmp	.+570    	; 0x2a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c1       	rjmp	.+566    	; 0x2a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c1       	rjmp	.+562    	; 0x2a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c1       	rjmp	.+558    	; 0x2a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c1       	rjmp	.+554    	; 0x2a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	13 c1       	rjmp	.+550    	; 0x2a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	11 c1       	rjmp	.+546    	; 0x2a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c1       	rjmp	.+542    	; 0x2a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0d c1       	rjmp	.+538    	; 0x2a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0b c1       	rjmp	.+534    	; 0x2a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	09 c1       	rjmp	.+530    	; 0x2a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	07 c1       	rjmp	.+526    	; 0x2a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c6       	rjmp	.+3122   	; 0xcd0 <__vector_39>
      9e:	00 00       	nop
      a0:	03 c1       	rjmp	.+518    	; 0x2a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	01 c1       	rjmp	.+514    	; 0x2a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ff c0       	rjmp	.+510    	; 0x2a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fd c0       	rjmp	.+506    	; 0x2a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fb c0       	rjmp	.+502    	; 0x2a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f9 c0       	rjmp	.+498    	; 0x2a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f7 c0       	rjmp	.+494    	; 0x2a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f5 c0       	rjmp	.+490    	; 0x2a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f3 c0       	rjmp	.+486    	; 0x2a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f1 c0       	rjmp	.+482    	; 0x2a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ef c0       	rjmp	.+478    	; 0x2a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ed c0       	rjmp	.+474    	; 0x2a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	eb c0       	rjmp	.+470    	; 0x2a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e9 c0       	rjmp	.+466    	; 0x2a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e7 c0       	rjmp	.+462    	; 0x2a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e5 c0       	rjmp	.+458    	; 0x2a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e3 c0       	rjmp	.+454    	; 0x2a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e5 0d       	add	r30, r5
      e6:	e8 0d       	add	r30, r8
      e8:	d7 0d       	add	r29, r7
      ea:	db 0d       	add	r29, r11
      ec:	e1 0d       	add	r30, r1
      ee:	1f 0e       	add	r1, r31
      f0:	ec 0d       	add	r30, r12
      f2:	f0 0d       	add	r31, r0
      f4:	f6 0d       	add	r31, r6
      f6:	fa 0d       	add	r31, r10
      f8:	fe 0d       	add	r31, r14
      fa:	04 0e       	add	r0, r20
      fc:	08 0e       	add	r0, r24
      fe:	0c 0e       	add	r0, r28
     100:	1f 0e       	add	r1, r31
     102:	12 0e       	add	r1, r18
     104:	16 0e       	add	r1, r22
     106:	1a 0e       	add	r1, r26

00000108 <__trampolines_end>:
     108:	1f 1c       	adc	r1, r15
     10a:	1f 1e       	adc	r1, r31
     10c:	1f 1e       	adc	r1, r31
     10e:	1f 1f       	adc	r17, r31
     110:	1e 1f       	adc	r17, r30
     112:	1e 1f       	adc	r17, r30

00000114 <digital_pin_to_timer_PGM>:
     114:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     140:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000015a <digital_pin_to_bit_mask_PGM>:
     15a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17a:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19a:	04 08 10 20 40 80                                   ... @.

000001a0 <digital_pin_to_port_PGM>:
     1a0:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b0:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c0:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d0:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e0:	0b 0b 0b 0b 0b 0b                                   ......

000001e6 <port_to_input_PGM>:
     1e6:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1f6:	00 01 00 00 03 01 06 01 09 01                       ..........

00000200 <port_to_output_PGM>:
     200:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     210:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000021a <port_to_mode_PGM>:
     21a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     22a:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000234 <__ctors_start>:
     234:	55 01       	movw	r10, r10
     236:	97 01       	movw	r18, r14
     238:	f1 08       	sbc	r15, r1
     23a:	03 09       	sbc	r16, r3
     23c:	f6 0a       	sbc	r15, r22
     23e:	10 10       	cpse	r1, r0
     240:	ff 11       	cpse	r31, r15

00000242 <__ctors_end>:
     242:	73 01       	movw	r14, r6
     244:	b3 01       	movw	r22, r6

00000246 <__dtors_end>:
     246:	11 24       	eor	r1, r1
     248:	1f be       	out	0x3f, r1	; 63
     24a:	cf ef       	ldi	r28, 0xFF	; 255
     24c:	d1 e2       	ldi	r29, 0x21	; 33
     24e:	de bf       	out	0x3e, r29	; 62
     250:	cd bf       	out	0x3d, r28	; 61
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0c bf       	out	0x3c, r16	; 60

00000256 <__do_copy_data>:
     256:	14 e0       	ldi	r17, 0x04	; 4
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b2 e0       	ldi	r27, 0x02	; 2
     25c:	e4 ee       	ldi	r30, 0xE4	; 228
     25e:	f5 e3       	ldi	r31, 0x35	; 53
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	0b bf       	out	0x3b, r16	; 59
     264:	02 c0       	rjmp	.+4      	; 0x26a <__do_copy_data+0x14>
     266:	07 90       	elpm	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	a0 36       	cpi	r26, 0x60	; 96
     26c:	b1 07       	cpc	r27, r17
     26e:	d9 f7       	brne	.-10     	; 0x266 <__do_copy_data+0x10>

00000270 <__do_clear_bss>:
     270:	29 e0       	ldi	r18, 0x09	; 9
     272:	a0 e6       	ldi	r26, 0x60	; 96
     274:	b4 e0       	ldi	r27, 0x04	; 4
     276:	01 c0       	rjmp	.+2      	; 0x27a <.do_clear_bss_start>

00000278 <.do_clear_bss_loop>:
     278:	1d 92       	st	X+, r1

0000027a <.do_clear_bss_start>:
     27a:	ad 32       	cpi	r26, 0x2D	; 45
     27c:	b2 07       	cpc	r27, r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <.do_clear_bss_loop>

00000280 <__do_global_ctors>:
     280:	11 e0       	ldi	r17, 0x01	; 1
     282:	c1 e2       	ldi	r28, 0x21	; 33
     284:	d1 e0       	ldi	r29, 0x01	; 1
     286:	00 e0       	ldi	r16, 0x00	; 0
     288:	06 c0       	rjmp	.+12     	; 0x296 <__do_global_ctors+0x16>
     28a:	21 97       	sbiw	r28, 0x01	; 1
     28c:	01 09       	sbc	r16, r1
     28e:	80 2f       	mov	r24, r16
     290:	fe 01       	movw	r30, r28
     292:	0e 94 c8 18 	call	0x3190	; 0x3190 <__tablejump2__>
     296:	ca 31       	cpi	r28, 0x1A	; 26
     298:	d1 07       	cpc	r29, r17
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	08 07       	cpc	r16, r24
     29e:	a9 f7       	brne	.-22     	; 0x28a <__do_global_ctors+0xa>
     2a0:	0e 94 24 0b 	call	0x1648	; 0x1648 <main>
     2a4:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__do_global_dtors>

000002a8 <__bad_interrupt>:
     2a8:	ab ce       	rjmp	.-682    	; 0x0 <__vectors>

000002aa <_GLOBAL__sub_I_command_help>:
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     2aa:	6a e1       	ldi	r22, 0x1A	; 26
     2ac:	72 e0       	ldi	r23, 0x02	; 2
     2ae:	88 e7       	ldi	r24, 0x78	; 120
     2b0:	94 e0       	ldi	r25, 0x04	; 4
     2b2:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6StringC1EPKc>
String command_config = "config\r";
     2b6:	60 e2       	ldi	r22, 0x20	; 32
     2b8:	72 e0       	ldi	r23, 0x02	; 2
     2ba:	82 e7       	ldi	r24, 0x72	; 114
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6StringC1EPKc>
String command_exit = "exit\r";
     2c2:	68 e2       	ldi	r22, 0x28	; 40
     2c4:	72 e0       	ldi	r23, 0x02	; 2
     2c6:	8c e6       	ldi	r24, 0x6C	; 108
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6StringC1EPKc>
String command_show = "show\r";
     2ce:	6e e2       	ldi	r22, 0x2E	; 46
     2d0:	72 e0       	ldi	r23, 0x02	; 2
     2d2:	86 e6       	ldi	r24, 0x66	; 102
     2d4:	94 e0       	ldi	r25, 0x04	; 4
     2d6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6StringC1EPKc>
String show_sdCardInfo = "sd card informations\r";
     2da:	64 e3       	ldi	r22, 0x34	; 52
     2dc:	72 e0       	ldi	r23, 0x02	; 2
     2de:	80 e6       	ldi	r24, 0x60	; 96
     2e0:	94 e0       	ldi	r25, 0x04	; 4
     2e2:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <_ZN6StringC1EPKc>

000002e6 <_GLOBAL__sub_D_command_help>:
     2e6:	80 e6       	ldi	r24, 0x60	; 96
     2e8:	94 e0       	ldi	r25, 0x04	; 4
     2ea:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN6StringD1Ev>
#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
String command_show = "show\r";
     2ee:	86 e6       	ldi	r24, 0x66	; 102
     2f0:	94 e0       	ldi	r25, 0x04	; 4
     2f2:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN6StringD1Ev>

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
     2f6:	8c e6       	ldi	r24, 0x6C	; 108
     2f8:	94 e0       	ldi	r25, 0x04	; 4
     2fa:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN6StringD1Ev>
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
     2fe:	82 e7       	ldi	r24, 0x72	; 114
     300:	94 e0       	ldi	r25, 0x04	; 4
     302:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN6StringD1Ev>
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     306:	88 e7       	ldi	r24, 0x78	; 120
     308:	94 e0       	ldi	r25, 0x04	; 4
     30a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <_ZN6StringD1Ev>

0000030e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     30e:	26 e0       	ldi	r18, 0x06	; 6
     310:	40 e8       	ldi	r20, 0x80	; 128
     312:	55 e2       	ldi	r21, 0x25	; 37
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	8a e2       	ldi	r24, 0x2A	; 42
     31a:	96 e0       	ldi	r25, 0x06	; 6
     31c:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN14HardwareSerial5beginEmh>

void setup()
{	
	bool status_bme, status_rtc;
	Serial.begin(9600);
	status_bme = bme.begin();
     320:	8d e8       	ldi	r24, 0x8D	; 141
     322:	94 e0       	ldi	r25, 0x04	; 4
     324:	d0 d2       	rcall	.+1440   	; 0x8c6 <_ZN15Adafruit_BME2805beginEv>
	status_rtc = rtc.begin();	
     326:	84 e8       	ldi	r24, 0x84	; 132
     328:	94 e0       	ldi	r25, 0x04	; 4
     32a:	4d c3       	rjmp	.+1690   	; 0x9c6 <_ZN10RTC_DS13075beginEv>

0000032c <loop>:
}

void loop()
{
     32c:	08 95       	ret

0000032e <_GLOBAL__sub_I_bme>:
	
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
#define MISO		50
#define MOSI		51
#define SCK			52
#define SEALEVELPRESSURE_HPA 1013.25

Adafruit_BME280 bme(BME_CS, MOSI, MISO, SCK);
     332:	04 e3       	ldi	r16, 0x34	; 52
     334:	22 e3       	ldi	r18, 0x32	; 50
     336:	43 e3       	ldi	r20, 0x33	; 51
     338:	60 e3       	ldi	r22, 0x30	; 48
     33a:	8d e8       	ldi	r24, 0x8D	; 141
     33c:	94 e0       	ldi	r25, 0x04	; 4
     33e:	41 d0       	rcall	.+130    	; 0x3c2 <_ZN15Adafruit_BME280C1Eaaaa>
sdcard SD(SD_CS, MOSI, MISO, SCK);
     340:	04 e3       	ldi	r16, 0x34	; 52
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	22 e3       	ldi	r18, 0x32	; 50
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	43 e3       	ldi	r20, 0x33	; 51
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	65 e3       	ldi	r22, 0x35	; 53
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	85 e8       	ldi	r24, 0x85	; 133
     352:	94 e0       	ldi	r25, 0x04	; 4
     354:	49 d7       	rcall	.+3730   	; 0x11e8 <_ZN6sdcardC1Ejjjj>
RTC_DS1307 rtc;
DateTime now;
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	ba 01       	movw	r22, r20
     35c:	8e e7       	ldi	r24, 0x7E	; 126
     35e:	94 e0       	ldi	r25, 0x04	; 4
}

void loop()
{
	
     360:	1f 91       	pop	r17
#define SEALEVELPRESSURE_HPA 1013.25

Adafruit_BME280 bme(BME_CS, MOSI, MISO, SCK);
sdcard SD(SD_CS, MOSI, MISO, SCK);
RTC_DS1307 rtc;
DateTime now;
     362:	0f 91       	pop	r16
     364:	b8 c2       	rjmp	.+1392   	; 0x8d6 <_ZN8DateTimeC1Em>

00000366 <_GLOBAL__sub_D_bme>:
#define MOSI		51
#define SCK			52
#define SEALEVELPRESSURE_HPA 1013.25

Adafruit_BME280 bme(BME_CS, MOSI, MISO, SCK);
sdcard SD(SD_CS, MOSI, MISO, SCK);
     366:	85 e8       	ldi	r24, 0x85	; 133
     368:	94 e0       	ldi	r25, 0x04	; 4
     36a:	4c c7       	rjmp	.+3736   	; 0x1204 <_ZN6sdcardD1Ev>

0000036c <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
     36c:	20 91 27 09 	lds	r18, 0x0927	; 0x800927 <_ZN8SPIClass13interruptModeE>
     370:	22 23       	and	r18, r18
     372:	99 f0       	breq	.+38     	; 0x39a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     374:	4f b7       	in	r20, 0x3f	; 63
     376:	f8 94       	cli
     378:	20 91 27 09 	lds	r18, 0x0927	; 0x800927 <_ZN8SPIClass13interruptModeE>
     37c:	21 30       	cpi	r18, 0x01	; 1
     37e:	59 f4       	brne	.+22     	; 0x396 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     380:	2d b3       	in	r18, 0x1d	; 29
     382:	20 93 25 09 	sts	0x0925, r18	; 0x800925 <_ZN8SPIClass13interruptSaveE>
     386:	3d b3       	in	r19, 0x1d	; 29
     388:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <_ZN8SPIClass13interruptMaskE>
     38c:	20 95       	com	r18
     38e:	23 23       	and	r18, r19
     390:	2d bb       	out	0x1d, r18	; 29
     392:	4f bf       	out	0x3f, r20	; 63
     394:	02 c0       	rjmp	.+4      	; 0x39a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     396:	40 93 25 09 	sts	0x0925, r20	; 0x800925 <_ZN8SPIClass13interruptSaveE>
     39a:	8c bd       	out	0x2c, r24	; 44
     39c:	9d bd       	out	0x2d, r25	; 45
     39e:	08 95       	ret

000003a0 <_ZN8SPIClass14endTransactionEv>:
     3a0:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <_ZN8SPIClass13interruptModeE>
     3a4:	88 23       	and	r24, r24
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <_ZN8SPIClass14endTransactionEv+0x20>
     3a8:	9f b7       	in	r25, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	20 91 27 09 	lds	r18, 0x0927	; 0x800927 <_ZN8SPIClass13interruptModeE>
     3b0:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <_ZN8SPIClass13interruptSaveE>
     3b4:	21 30       	cpi	r18, 0x01	; 1
     3b6:	19 f4       	brne	.+6      	; 0x3be <_ZN8SPIClass14endTransactionEv+0x1e>
     3b8:	8d bb       	out	0x1d, r24	; 29
     3ba:	9f bf       	out	0x3f, r25	; 63
     3bc:	08 95       	ret
     3be:	8f bf       	out	0x3f, r24	; 63
     3c0:	08 95       	ret

000003c2 <_ZN15Adafruit_BME280C1Eaaaa>:
     3c2:	0f 93       	push	r16
     3c4:	fc 01       	movw	r30, r24
     3c6:	63 87       	std	Z+11, r22	; 0x0b
     3c8:	44 87       	std	Z+12, r20	; 0x0c
     3ca:	25 87       	std	Z+13, r18	; 0x0d
     3cc:	06 87       	std	Z+14, r16	; 0x0e
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <_ZN15Adafruit_BME2807spixferEh>:
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	fc 01       	movw	r30, r24
     3e4:	26 85       	ldd	r18, Z+14	; 0x0e
     3e6:	2f 3f       	cpi	r18, 0xFF	; 255
     3e8:	39 f4       	brne	.+14     	; 0x3f8 <_ZN15Adafruit_BME2807spixferEh+0x26>
     3ea:	6e bd       	out	0x2e, r22	; 46
     3ec:	00 00       	nop
     3ee:	0d b4       	in	r0, 0x2d	; 45
     3f0:	07 fe       	sbrs	r0, 7
     3f2:	fd cf       	rjmp	.-6      	; 0x3ee <_ZN15Adafruit_BME2807spixferEh+0x1c>
     3f4:	8e b5       	in	r24, 0x2e	; 46
     3f6:	2b c0       	rjmp	.+86     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3f8:	d6 2f       	mov	r29, r22
     3fa:	8c 01       	movw	r16, r24
     3fc:	87 e0       	ldi	r24, 0x07	; 7
     3fe:	e8 2e       	mov	r14, r24
     400:	f1 2c       	mov	r15, r1
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	cc 24       	eor	r12, r12
     406:	c3 94       	inc	r12
     408:	d1 2c       	mov	r13, r1
     40a:	cc 0f       	add	r28, r28
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	f8 01       	movw	r30, r16
     410:	86 85       	ldd	r24, Z+14	; 0x0e
     412:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     416:	b6 01       	movw	r22, r12
     418:	0e 2c       	mov	r0, r14
     41a:	01 c0       	rjmp	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	66 0f       	add	r22, r22
     41e:	0a 94       	dec	r0
     420:	ea f7       	brpl	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     422:	6d 23       	and	r22, r29
     424:	f8 01       	movw	r30, r16
     426:	84 85       	ldd	r24, Z+12	; 0x0c
     428:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	f8 01       	movw	r30, r16
     430:	86 85       	ldd	r24, Z+14	; 0x0e
     432:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     436:	f8 01       	movw	r30, r16
     438:	85 85       	ldd	r24, Z+13	; 0x0d
     43a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <digitalRead>
     43e:	89 2b       	or	r24, r25
     440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	c1 60       	ori	r28, 0x01	; 1
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	ef 1a       	sub	r14, r31
     448:	f1 08       	sbc	r15, r1
     44a:	f8 f6       	brcc	.-66     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     44c:	8c 2f       	mov	r24, r28
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	08 95       	ret

00000460 <_ZN15Adafruit_BME2806write8Ehh>:
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	ec 01       	movw	r28, r24
     46a:	16 2f       	mov	r17, r22
     46c:	04 2f       	mov	r16, r20
     46e:	8b 85       	ldd	r24, Y+11	; 0x0b
     470:	8f 3f       	cpi	r24, 0xFF	; 255
     472:	f9 f4       	brne	.+62     	; 0x4b2 <_ZN15Adafruit_BME2806write8Ehh+0x52>
     474:	6a 81       	ldd	r22, Y+2	; 0x02
     476:	88 81       	ld	r24, Y
     478:	99 81       	ldd	r25, Y+1	; 0x01
     47a:	33 d6       	rcall	.+3174   	; 0x10e2 <_ZN7TwoWire17beginTransmissionEh>
     47c:	88 81       	ld	r24, Y
     47e:	99 81       	ldd	r25, Y+1	; 0x01
     480:	dc 01       	movw	r26, r24
     482:	ed 91       	ld	r30, X+
     484:	fc 91       	ld	r31, X
     486:	01 90       	ld	r0, Z+
     488:	f0 81       	ld	r31, Z
     48a:	e0 2d       	mov	r30, r0
     48c:	61 2f       	mov	r22, r17
     48e:	19 95       	eicall
     490:	88 81       	ld	r24, Y
     492:	99 81       	ldd	r25, Y+1	; 0x01
     494:	dc 01       	movw	r26, r24
     496:	ed 91       	ld	r30, X+
     498:	fc 91       	ld	r31, X
     49a:	01 90       	ld	r0, Z+
     49c:	f0 81       	ld	r31, Z
     49e:	e0 2d       	mov	r30, r0
     4a0:	60 2f       	mov	r22, r16
     4a2:	19 95       	eicall
     4a4:	88 81       	ld	r24, Y
     4a6:	99 81       	ldd	r25, Y+1	; 0x01
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	96 c6       	rjmp	.+3372   	; 0x11de <_ZN7TwoWire15endTransmissionEv>
     4b2:	8e 85       	ldd	r24, Y+14	; 0x0e
     4b4:	8f 3f       	cpi	r24, 0xFF	; 255
     4b6:	19 f4       	brne	.+6      	; 0x4be <_ZN15Adafruit_BME2806write8Ehh+0x5e>
     4b8:	82 e5       	ldi	r24, 0x52	; 82
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	57 df       	rcall	.-338    	; 0x36c <_ZN8SPIClass16beginTransactionE11SPISettings>
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     4c6:	61 2f       	mov	r22, r17
     4c8:	6f 77       	andi	r22, 0x7F	; 127
     4ca:	ce 01       	movw	r24, r28
     4cc:	82 df       	rcall	.-252    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     4ce:	60 2f       	mov	r22, r16
     4d0:	ce 01       	movw	r24, r28
     4d2:	7f df       	rcall	.-258    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     4dc:	8e 85       	ldd	r24, Y+14	; 0x0e
     4de:	8f 3f       	cpi	r24, 0xFF	; 255
     4e0:	29 f4       	brne	.+10     	; 0x4ec <_ZN15Adafruit_BME2806write8Ehh+0x8c>
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	5a cf       	rjmp	.-332    	; 0x3a0 <_ZN8SPIClass14endTransactionEv>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
     4f6:	cf 92       	push	r12
     4f8:	ef 92       	push	r14
     4fa:	0f 93       	push	r16
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	62 95       	swap	r22
     504:	66 0f       	add	r22, r22
     506:	66 0f       	add	r22, r22
     508:	60 7c       	andi	r22, 0xC0	; 192
     50a:	47 70       	andi	r20, 0x07	; 7
     50c:	27 70       	andi	r18, 0x07	; 7
     50e:	82 2f       	mov	r24, r18
     510:	88 0f       	add	r24, r24
     512:	88 0f       	add	r24, r24
     514:	88 0f       	add	r24, r24
     516:	26 2f       	mov	r18, r22
     518:	24 2b       	or	r18, r20
     51a:	28 2b       	or	r18, r24
     51c:	29 ab       	std	Y+49, r18	; 0x31
     51e:	90 2f       	mov	r25, r16
     520:	92 95       	swap	r25
     522:	99 0f       	add	r25, r25
     524:	90 7e       	andi	r25, 0xE0	; 224
     526:	8a a9       	ldd	r24, Y+50	; 0x32
     528:	8f 71       	andi	r24, 0x1F	; 31
     52a:	89 2b       	or	r24, r25
     52c:	8a ab       	std	Y+50, r24	; 0x32
     52e:	8e 2d       	mov	r24, r14
     530:	87 70       	andi	r24, 0x07	; 7
     532:	88 0f       	add	r24, r24
     534:	88 0f       	add	r24, r24
     536:	88 0f       	add	r24, r24
     538:	98 a9       	ldd	r25, Y+48	; 0x30
     53a:	29 2f       	mov	r18, r25
     53c:	20 7c       	andi	r18, 0xC0	; 192
     53e:	9c 2d       	mov	r25, r12
     540:	97 70       	andi	r25, 0x07	; 7
     542:	e2 2e       	mov	r14, r18
     544:	e8 2a       	or	r14, r24
     546:	e9 2a       	or	r14, r25
     548:	e8 aa       	std	Y+48, r14	; 0x30
     54a:	40 2f       	mov	r20, r16
     54c:	47 70       	andi	r20, 0x07	; 7
     54e:	62 ef       	ldi	r22, 0xF2	; 242
     550:	ce 01       	movw	r24, r28
     552:	86 df       	rcall	.-244    	; 0x460 <_ZN15Adafruit_BME2806write8Ehh>
     554:	98 a9       	ldd	r25, Y+48	; 0x30
     556:	49 2f       	mov	r20, r25
     558:	47 70       	andi	r20, 0x07	; 7
     55a:	60 e2       	ldi	r22, 0x20	; 32
     55c:	46 9f       	mul	r20, r22
     55e:	90 01       	movw	r18, r0
     560:	11 24       	eor	r1, r1
     562:	89 2f       	mov	r24, r25
     564:	86 95       	lsr	r24
     566:	86 95       	lsr	r24
     568:	86 95       	lsr	r24
     56a:	87 70       	andi	r24, 0x07	; 7
     56c:	68 e0       	ldi	r22, 0x08	; 8
     56e:	86 9f       	mul	r24, r22
     570:	a0 01       	movw	r20, r0
     572:	11 24       	eor	r1, r1
     574:	42 2b       	or	r20, r18
     576:	53 2b       	or	r21, r19
     578:	97 fb       	bst	r25, 7
     57a:	99 27       	eor	r25, r25
     57c:	90 f9       	bld	r25, 0
     57e:	49 2b       	or	r20, r25
     580:	65 ef       	ldi	r22, 0xF5	; 245
     582:	ce 01       	movw	r24, r28
     584:	6d df       	rcall	.-294    	; 0x460 <_ZN15Adafruit_BME2806write8Ehh>
     586:	99 a9       	ldd	r25, Y+49	; 0x31
     588:	49 2f       	mov	r20, r25
     58a:	47 70       	andi	r20, 0x07	; 7
     58c:	80 e2       	ldi	r24, 0x20	; 32
     58e:	48 9f       	mul	r20, r24
     590:	90 01       	movw	r18, r0
     592:	11 24       	eor	r1, r1
     594:	89 2f       	mov	r24, r25
     596:	86 95       	lsr	r24
     598:	86 95       	lsr	r24
     59a:	86 95       	lsr	r24
     59c:	87 70       	andi	r24, 0x07	; 7
     59e:	68 e0       	ldi	r22, 0x08	; 8
     5a0:	86 9f       	mul	r24, r22
     5a2:	a0 01       	movw	r20, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	42 2b       	or	r20, r18
     5a8:	53 2b       	or	r21, r19
     5aa:	92 95       	swap	r25
     5ac:	96 95       	lsr	r25
     5ae:	96 95       	lsr	r25
     5b0:	93 70       	andi	r25, 0x03	; 3
     5b2:	49 2b       	or	r20, r25
     5b4:	64 ef       	ldi	r22, 0xF4	; 244
     5b6:	ce 01       	movw	r24, r28
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	0f 91       	pop	r16
     5be:	ef 90       	pop	r14
     5c0:	cf 90       	pop	r12
     5c2:	4e cf       	rjmp	.-356    	; 0x460 <_ZN15Adafruit_BME2806write8Ehh>

000005c4 <_ZN15Adafruit_BME2805read8Eh>:
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ec 01       	movw	r28, r24
     5cc:	16 2f       	mov	r17, r22
     5ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     5d0:	8f 3f       	cpi	r24, 0xFF	; 255
     5d2:	09 f5       	brne	.+66     	; 0x616 <_ZN15Adafruit_BME2805read8Eh+0x52>
     5d4:	6a 81       	ldd	r22, Y+2	; 0x02
     5d6:	88 81       	ld	r24, Y
     5d8:	99 81       	ldd	r25, Y+1	; 0x01
     5da:	83 d5       	rcall	.+2822   	; 0x10e2 <_ZN7TwoWire17beginTransmissionEh>
     5dc:	88 81       	ld	r24, Y
     5de:	99 81       	ldd	r25, Y+1	; 0x01
     5e0:	dc 01       	movw	r26, r24
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	01 90       	ld	r0, Z+
     5e8:	f0 81       	ld	r31, Z
     5ea:	e0 2d       	mov	r30, r0
     5ec:	61 2f       	mov	r22, r17
     5ee:	19 95       	eicall
     5f0:	88 81       	ld	r24, Y
     5f2:	99 81       	ldd	r25, Y+1	; 0x01
     5f4:	f4 d5       	rcall	.+3048   	; 0x11de <_ZN7TwoWire15endTransmissionEv>
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	6a 81       	ldd	r22, Y+2	; 0x02
     5fa:	88 81       	ld	r24, Y
     5fc:	99 81       	ldd	r25, Y+1	; 0x01
     5fe:	ed d5       	rcall	.+3034   	; 0x11da <_ZN7TwoWire11requestFromEhh>
     600:	88 81       	ld	r24, Y
     602:	99 81       	ldd	r25, Y+1	; 0x01
     604:	dc 01       	movw	r26, r24
     606:	ed 91       	ld	r30, X+
     608:	fc 91       	ld	r31, X
     60a:	02 84       	ldd	r0, Z+10	; 0x0a
     60c:	f3 85       	ldd	r31, Z+11	; 0x0b
     60e:	e0 2d       	mov	r30, r0
     610:	19 95       	eicall
     612:	18 2f       	mov	r17, r24
     614:	1a c0       	rjmp	.+52     	; 0x64a <_ZN15Adafruit_BME2805read8Eh+0x86>
     616:	8e 85       	ldd	r24, Y+14	; 0x0e
     618:	8f 3f       	cpi	r24, 0xFF	; 255
     61a:	19 f4       	brne	.+6      	; 0x622 <_ZN15Adafruit_BME2805read8Eh+0x5e>
     61c:	82 e5       	ldi	r24, 0x52	; 82
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	a5 de       	rcall	.-694    	; 0x36c <_ZN8SPIClass16beginTransactionE11SPISettings>
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	8b 85       	ldd	r24, Y+11	; 0x0b
     626:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     62a:	61 2f       	mov	r22, r17
     62c:	60 68       	ori	r22, 0x80	; 128
     62e:	ce 01       	movw	r24, r28
     630:	d0 de       	rcall	.-608    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	ce 01       	movw	r24, r28
     636:	cd de       	rcall	.-614    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     638:	18 2f       	mov	r17, r24
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	8b 85       	ldd	r24, Y+11	; 0x0b
     63e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     642:	8e 85       	ldd	r24, Y+14	; 0x0e
     644:	8f 3f       	cpi	r24, 0xFF	; 255
     646:	09 f4       	brne	.+2      	; 0x64a <_ZN15Adafruit_BME2805read8Eh+0x86>
     648:	ab de       	rcall	.-682    	; 0x3a0 <_ZN8SPIClass14endTransactionEv>
     64a:	81 2f       	mov	r24, r17
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	08 95       	ret

00000654 <_ZN15Adafruit_BME2806read16Eh>:
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
     65e:	16 2f       	mov	r17, r22
     660:	8b 85       	ldd	r24, Y+11	; 0x0b
     662:	8f 3f       	cpi	r24, 0xFF	; 255
     664:	81 f5       	brne	.+96     	; 0x6c6 <_ZN15Adafruit_BME2806read16Eh+0x72>
     666:	6a 81       	ldd	r22, Y+2	; 0x02
     668:	88 81       	ld	r24, Y
     66a:	99 81       	ldd	r25, Y+1	; 0x01
     66c:	3a d5       	rcall	.+2676   	; 0x10e2 <_ZN7TwoWire17beginTransmissionEh>
     66e:	88 81       	ld	r24, Y
     670:	99 81       	ldd	r25, Y+1	; 0x01
     672:	dc 01       	movw	r26, r24
     674:	ed 91       	ld	r30, X+
     676:	fc 91       	ld	r31, X
     678:	01 90       	ld	r0, Z+
     67a:	f0 81       	ld	r31, Z
     67c:	e0 2d       	mov	r30, r0
     67e:	61 2f       	mov	r22, r17
     680:	19 95       	eicall
     682:	88 81       	ld	r24, Y
     684:	99 81       	ldd	r25, Y+1	; 0x01
     686:	ab d5       	rcall	.+2902   	; 0x11de <_ZN7TwoWire15endTransmissionEv>
     688:	42 e0       	ldi	r20, 0x02	; 2
     68a:	6a 81       	ldd	r22, Y+2	; 0x02
     68c:	88 81       	ld	r24, Y
     68e:	99 81       	ldd	r25, Y+1	; 0x01
     690:	a4 d5       	rcall	.+2888   	; 0x11da <_ZN7TwoWire11requestFromEhh>
     692:	88 81       	ld	r24, Y
     694:	99 81       	ldd	r25, Y+1	; 0x01
     696:	dc 01       	movw	r26, r24
     698:	ed 91       	ld	r30, X+
     69a:	fc 91       	ld	r31, X
     69c:	02 84       	ldd	r0, Z+10	; 0x0a
     69e:	f3 85       	ldd	r31, Z+11	; 0x0b
     6a0:	e0 2d       	mov	r30, r0
     6a2:	19 95       	eicall
     6a4:	18 2f       	mov	r17, r24
     6a6:	88 81       	ld	r24, Y
     6a8:	99 81       	ldd	r25, Y+1	; 0x01
     6aa:	dc 01       	movw	r26, r24
     6ac:	ed 91       	ld	r30, X+
     6ae:	fc 91       	ld	r31, X
     6b0:	02 84       	ldd	r0, Z+10	; 0x0a
     6b2:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b4:	e0 2d       	mov	r30, r0
     6b6:	19 95       	eicall
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	31 2f       	mov	r19, r17
     6be:	89 01       	movw	r16, r18
     6c0:	08 2b       	or	r16, r24
     6c2:	19 2b       	or	r17, r25
     6c4:	23 c0       	rjmp	.+70     	; 0x70c <_ZN15Adafruit_BME2806read16Eh+0xb8>
     6c6:	8e 85       	ldd	r24, Y+14	; 0x0e
     6c8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <_ZN15Adafruit_BME2806read16Eh+0x7e>
     6cc:	82 e5       	ldi	r24, 0x52	; 82
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	4d de       	rcall	.-870    	; 0x36c <_ZN8SPIClass16beginTransactionE11SPISettings>
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d6:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     6da:	61 2f       	mov	r22, r17
     6dc:	60 68       	ori	r22, 0x80	; 128
     6de:	ce 01       	movw	r24, r28
     6e0:	78 de       	rcall	.-784    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	ce 01       	movw	r24, r28
     6e6:	75 de       	rcall	.-790    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     6e8:	08 2f       	mov	r16, r24
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	ce 01       	movw	r24, r28
     6ee:	71 de       	rcall	.-798    	; 0x3d2 <_ZN15Adafruit_BME2807spixferEh>
     6f0:	20 2f       	mov	r18, r16
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	32 2f       	mov	r19, r18
     6f6:	22 27       	eor	r18, r18
     6f8:	89 01       	movw	r16, r18
     6fa:	08 2b       	or	r16, r24
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     700:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     704:	8e 85       	ldd	r24, Y+14	; 0x0e
     706:	8f 3f       	cpi	r24, 0xFF	; 255
     708:	09 f4       	brne	.+2      	; 0x70c <_ZN15Adafruit_BME2806read16Eh+0xb8>
     70a:	4a de       	rcall	.-876    	; 0x3a0 <_ZN8SPIClass14endTransactionEv>
     70c:	c8 01       	movw	r24, r16
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <_ZN15Adafruit_BME2809read16_LEEh>:
     718:	9d df       	rcall	.-198    	; 0x654 <_ZN15Adafruit_BME2806read16Eh>
     71a:	98 27       	eor	r25, r24
     71c:	89 27       	eor	r24, r25
     71e:	98 27       	eor	r25, r24
     720:	08 95       	ret

00000722 <_ZN15Adafruit_BME28016readCoefficientsEv>:
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ec 01       	movw	r28, r24
     72a:	68 e8       	ldi	r22, 0x88	; 136
     72c:	f5 df       	rcall	.-22     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     72e:	98 8b       	std	Y+16, r25	; 0x10
     730:	8f 87       	std	Y+15, r24	; 0x0f
     732:	6a e8       	ldi	r22, 0x8A	; 138
     734:	ce 01       	movw	r24, r28
     736:	f0 df       	rcall	.-32     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     738:	9a 8b       	std	Y+18, r25	; 0x12
     73a:	89 8b       	std	Y+17, r24	; 0x11
     73c:	6c e8       	ldi	r22, 0x8C	; 140
     73e:	ce 01       	movw	r24, r28
     740:	eb df       	rcall	.-42     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     742:	9c 8b       	std	Y+20, r25	; 0x14
     744:	8b 8b       	std	Y+19, r24	; 0x13
     746:	6e e8       	ldi	r22, 0x8E	; 142
     748:	ce 01       	movw	r24, r28
     74a:	e6 df       	rcall	.-52     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     74c:	9e 8b       	std	Y+22, r25	; 0x16
     74e:	8d 8b       	std	Y+21, r24	; 0x15
     750:	60 e9       	ldi	r22, 0x90	; 144
     752:	ce 01       	movw	r24, r28
     754:	e1 df       	rcall	.-62     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     756:	98 8f       	std	Y+24, r25	; 0x18
     758:	8f 8b       	std	Y+23, r24	; 0x17
     75a:	62 e9       	ldi	r22, 0x92	; 146
     75c:	ce 01       	movw	r24, r28
     75e:	dc df       	rcall	.-72     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     760:	9a 8f       	std	Y+26, r25	; 0x1a
     762:	89 8f       	std	Y+25, r24	; 0x19
     764:	64 e9       	ldi	r22, 0x94	; 148
     766:	ce 01       	movw	r24, r28
     768:	d7 df       	rcall	.-82     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     76a:	9c 8f       	std	Y+28, r25	; 0x1c
     76c:	8b 8f       	std	Y+27, r24	; 0x1b
     76e:	66 e9       	ldi	r22, 0x96	; 150
     770:	ce 01       	movw	r24, r28
     772:	d2 df       	rcall	.-92     	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     774:	9e 8f       	std	Y+30, r25	; 0x1e
     776:	8d 8f       	std	Y+29, r24	; 0x1d
     778:	68 e9       	ldi	r22, 0x98	; 152
     77a:	ce 01       	movw	r24, r28
     77c:	cd df       	rcall	.-102    	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     77e:	98 a3       	std	Y+32, r25	; 0x20
     780:	8f 8f       	std	Y+31, r24	; 0x1f
     782:	6a e9       	ldi	r22, 0x9A	; 154
     784:	ce 01       	movw	r24, r28
     786:	c8 df       	rcall	.-112    	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     788:	9a a3       	std	Y+34, r25	; 0x22
     78a:	89 a3       	std	Y+33, r24	; 0x21
     78c:	6c e9       	ldi	r22, 0x9C	; 156
     78e:	ce 01       	movw	r24, r28
     790:	c3 df       	rcall	.-122    	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     792:	9c a3       	std	Y+36, r25	; 0x24
     794:	8b a3       	std	Y+35, r24	; 0x23
     796:	6e e9       	ldi	r22, 0x9E	; 158
     798:	ce 01       	movw	r24, r28
     79a:	be df       	rcall	.-132    	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     79c:	9e a3       	std	Y+38, r25	; 0x26
     79e:	8d a3       	std	Y+37, r24	; 0x25
     7a0:	61 ea       	ldi	r22, 0xA1	; 161
     7a2:	ce 01       	movw	r24, r28
     7a4:	0f df       	rcall	.-482    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     7a6:	8f a3       	std	Y+39, r24	; 0x27
     7a8:	61 ee       	ldi	r22, 0xE1	; 225
     7aa:	ce 01       	movw	r24, r28
     7ac:	b5 df       	rcall	.-150    	; 0x718 <_ZN15Adafruit_BME2809read16_LEEh>
     7ae:	99 a7       	std	Y+41, r25	; 0x29
     7b0:	88 a7       	std	Y+40, r24	; 0x28
     7b2:	63 ee       	ldi	r22, 0xE3	; 227
     7b4:	ce 01       	movw	r24, r28
     7b6:	06 df       	rcall	.-500    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     7b8:	8a a7       	std	Y+42, r24	; 0x2a
     7ba:	64 ee       	ldi	r22, 0xE4	; 228
     7bc:	ce 01       	movw	r24, r28
     7be:	02 df       	rcall	.-508    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     7c0:	18 2f       	mov	r17, r24
     7c2:	65 ee       	ldi	r22, 0xE5	; 229
     7c4:	ce 01       	movw	r24, r28
     7c6:	fe de       	rcall	.-516    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     7c8:	90 e1       	ldi	r25, 0x10	; 16
     7ca:	19 9f       	mul	r17, r25
     7cc:	90 01       	movw	r18, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	8f 70       	andi	r24, 0x0F	; 15
     7d2:	28 2b       	or	r18, r24
     7d4:	3c a7       	std	Y+44, r19	; 0x2c
     7d6:	2b a7       	std	Y+43, r18	; 0x2b
     7d8:	66 ee       	ldi	r22, 0xE6	; 230
     7da:	ce 01       	movw	r24, r28
     7dc:	f3 de       	rcall	.-538    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     7de:	18 2f       	mov	r17, r24
     7e0:	65 ee       	ldi	r22, 0xE5	; 229
     7e2:	ce 01       	movw	r24, r28
     7e4:	ef de       	rcall	.-546    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     7e6:	90 e1       	ldi	r25, 0x10	; 16
     7e8:	19 9f       	mul	r17, r25
     7ea:	90 01       	movw	r18, r0
     7ec:	11 24       	eor	r1, r1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	44 e0       	ldi	r20, 0x04	; 4
     7f2:	95 95       	asr	r25
     7f4:	87 95       	ror	r24
     7f6:	4a 95       	dec	r20
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
     7fa:	82 2b       	or	r24, r18
     7fc:	93 2b       	or	r25, r19
     7fe:	9e a7       	std	Y+46, r25	; 0x2e
     800:	8d a7       	std	Y+45, r24	; 0x2d
     802:	67 ee       	ldi	r22, 0xE7	; 231
     804:	ce 01       	movw	r24, r28
     806:	de de       	rcall	.-580    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     808:	8f a7       	std	Y+47, r24	; 0x2f
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	08 95       	ret

00000812 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
     812:	63 ef       	ldi	r22, 0xF3	; 243
     814:	d7 de       	rcall	.-594    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     816:	81 70       	andi	r24, 0x01	; 1
     818:	08 95       	ret

0000081a <_ZN15Adafruit_BME2804initEv>:
     81a:	cf 92       	push	r12
     81c:	ef 92       	push	r14
     81e:	0f 93       	push	r16
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	ec 01       	movw	r28, r24
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	8f 3f       	cpi	r24, 0xFF	; 255
     82a:	21 f4       	brne	.+8      	; 0x834 <_ZN15Adafruit_BME2804initEv+0x1a>
     82c:	88 81       	ld	r24, Y
     82e:	99 81       	ldd	r25, Y+1	; 0x01
     830:	49 d4       	rcall	.+2194   	; 0x10c4 <_ZN7TwoWire5beginEv>
     832:	18 c0       	rjmp	.+48     	; 0x864 <_ZN15Adafruit_BME2804initEv+0x4a>
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	8b 85       	ldd	r24, Y+11	; 0x0b
     83e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>
     842:	8e 85       	ldd	r24, Y+14	; 0x0e
     844:	8f 3f       	cpi	r24, 0xFF	; 255
     846:	19 f4       	brne	.+6      	; 0x84e <_ZN15Adafruit_BME2804initEv+0x34>
     848:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN8SPIClass5beginEv>
     84c:	0b c0       	rjmp	.+22     	; 0x864 <_ZN15Adafruit_BME2804initEv+0x4a>
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	8c 85       	ldd	r24, Y+12	; 0x0c
     858:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	8d 85       	ldd	r24, Y+13	; 0x0d
     860:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>
     864:	60 ed       	ldi	r22, 0xD0	; 208
     866:	ce 01       	movw	r24, r28
     868:	ad de       	rcall	.-678    	; 0x5c4 <_ZN15Adafruit_BME2805read8Eh>
     86a:	80 36       	cpi	r24, 0x60	; 96
     86c:	29 f5       	brne	.+74     	; 0x8b8 <_ZN15Adafruit_BME2804initEv+0x9e>
     86e:	46 eb       	ldi	r20, 0xB6	; 182
     870:	60 ee       	ldi	r22, 0xE0	; 224
     872:	ce 01       	movw	r24, r28
     874:	f5 dd       	rcall	.-1046   	; 0x460 <_ZN15Adafruit_BME2806write8Ehh>
     876:	6c e2       	ldi	r22, 0x2C	; 44
     878:	71 e0       	ldi	r23, 0x01	; 1
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <delay>
     882:	ce 01       	movw	r24, r28
     884:	c6 df       	rcall	.-116    	; 0x812 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
     886:	88 23       	and	r24, r24
     888:	29 f0       	breq	.+10     	; 0x894 <_ZN15Adafruit_BME2804initEv+0x7a>
     88a:	64 e6       	ldi	r22, 0x64	; 100
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	f5 cf       	rjmp	.-22     	; 0x87e <_ZN15Adafruit_BME2804initEv+0x64>
     894:	ce 01       	movw	r24, r28
     896:	45 df       	rcall	.-374    	; 0x722 <_ZN15Adafruit_BME28016readCoefficientsEv>
     898:	c1 2c       	mov	r12, r1
     89a:	e1 2c       	mov	r14, r1
     89c:	05 e0       	ldi	r16, 0x05	; 5
     89e:	25 e0       	ldi	r18, 0x05	; 5
     8a0:	45 e0       	ldi	r20, 0x05	; 5
     8a2:	63 e0       	ldi	r22, 0x03	; 3
     8a4:	ce 01       	movw	r24, r28
     8a6:	27 de       	rcall	.-946    	; 0x4f6 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
     8a8:	64 e6       	ldi	r22, 0x64	; 100
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <delay>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <_ZN15Adafruit_BME2804initEv+0xa0>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	0f 91       	pop	r16
     8c0:	ef 90       	pop	r14
     8c2:	cf 90       	pop	r12
     8c4:	08 95       	ret

000008c6 <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
     8c6:	27 e7       	ldi	r18, 0x77	; 119
     8c8:	fc 01       	movw	r30, r24
     8ca:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
     8cc:	22 e7       	ldi	r18, 0x72	; 114
     8ce:	35 e0       	ldi	r19, 0x05	; 5
     8d0:	31 83       	std	Z+1, r19	; 0x01
     8d2:	20 83       	st	Z, r18
	return init();
     8d4:	a2 cf       	rjmp	.-188    	; 0x81a <_ZN15Adafruit_BME2804initEv>

000008d6 <_ZN8DateTimeC1Em>:

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
     8ec:	6a 01       	movw	r12, r20
     8ee:	7b 01       	movw	r14, r22
     8f0:	80 e8       	ldi	r24, 0x80	; 128
     8f2:	c8 1a       	sub	r12, r24
     8f4:	83 e4       	ldi	r24, 0x43	; 67
     8f6:	d8 0a       	sbc	r13, r24
     8f8:	8d e6       	ldi	r24, 0x6D	; 109
     8fa:	e8 0a       	sbc	r14, r24
     8fc:	88 e3       	ldi	r24, 0x38	; 56
     8fe:	f8 0a       	sbc	r15, r24

    ss = t % 60;
     900:	8c e3       	ldi	r24, 0x3C	; 60
     902:	88 2e       	mov	r8, r24
     904:	91 2c       	mov	r9, r1
     906:	a1 2c       	mov	r10, r1
     908:	b1 2c       	mov	r11, r1
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	a5 01       	movw	r20, r10
     910:	94 01       	movw	r18, r8
     912:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     916:	6d 83       	std	Y+5, r22	; 0x05
    t /= 60;
    mm = t % 60;
     918:	ca 01       	movw	r24, r20
     91a:	b9 01       	movw	r22, r18
     91c:	a5 01       	movw	r20, r10
     91e:	94 01       	movw	r18, r8
     920:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     924:	6c 83       	std	Y+4, r22	; 0x04
    t /= 60;
    hh = t % 24;
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	20 e1       	ldi	r18, 0x10	; 16
     92c:	3e e0       	ldi	r19, 0x0E	; 14
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     936:	ca 01       	movw	r24, r20
     938:	b9 01       	movw	r22, r18
     93a:	28 e1       	ldi	r18, 0x18	; 24
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     946:	6b 83       	std	Y+3, r22	; 0x03
    uint16_t days = t / 24;
     948:	c7 01       	movw	r24, r14
     94a:	b6 01       	movw	r22, r12
     94c:	20 e8       	ldi	r18, 0x80	; 128
     94e:	31 e5       	ldi	r19, 0x51	; 81
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
     958:	18 82       	st	Y, r1
        leap = yOff % 4 == 0;
     95a:	48 81       	ld	r20, Y
     95c:	54 2f       	mov	r21, r20
     95e:	53 70       	andi	r21, 0x03	; 3
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	09 f0       	breq	.+2      	; 0x966 <_ZN8DateTimeC1Em+0x90>
     964:	80 e0       	ldi	r24, 0x00	; 0
        if (days < 365 + leap)
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	bc 01       	movw	r22, r24
     96a:	63 59       	subi	r22, 0x93	; 147
     96c:	7e 4f       	sbci	r23, 0xFE	; 254
     96e:	26 17       	cp	r18, r22
     970:	37 07       	cpc	r19, r23
     972:	38 f0       	brcs	.+14     	; 0x982 <_ZN8DateTimeC1Em+0xac>
            break;
        days -= 365 + leap;
     974:	28 1b       	sub	r18, r24
     976:	39 0b       	sbc	r19, r25
     978:	2d 56       	subi	r18, 0x6D	; 109
     97a:	31 40       	sbci	r19, 0x01	; 1
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	48 83       	st	Y, r20
     980:	ec cf       	rjmp	.-40     	; 0x95a <_ZN8DateTimeC1Em+0x84>
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	89 83       	std	Y+1, r24	; 0x01
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	e8 2f       	mov	r30, r24
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	e9 5f       	subi	r30, 0xF9	; 249
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	e4 91       	lpm	r30, Z
        if (leap && m == 2)
     992:	51 11       	cpse	r21, r1
     994:	03 c0       	rjmp	.+6      	; 0x99c <_ZN8DateTimeC1Em+0xc6>
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	09 f4       	brne	.+2      	; 0x99c <_ZN8DateTimeC1Em+0xc6>
            ++daysPerMonth;
     99a:	ef 5f       	subi	r30, 0xFF	; 255
        if (days < daysPerMonth)
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	2e 17       	cp	r18, r30
     9a0:	3f 07       	cpc	r19, r31
     9a2:	20 f0       	brcs	.+8      	; 0x9ac <_ZN8DateTimeC1Em+0xd6>
            break;
        days -= daysPerMonth;
     9a4:	2e 1b       	sub	r18, r30
     9a6:	3f 0b       	sbc	r19, r31
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	ec cf       	rjmp	.-40     	; 0x984 <_ZN8DateTimeC1Em+0xae>
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	2a 83       	std	Y+2, r18	; 0x02
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	8f 90       	pop	r8
     9c4:	08 95       	ret

000009c6 <_ZN10RTC_DS13075beginEv>:
     9c6:	82 e7       	ldi	r24, 0x72	; 114
     9c8:	95 e0       	ldi	r25, 0x05	; 5
     9ca:	7c d3       	rcall	.+1784   	; 0x10c4 <_ZN7TwoWire5beginEv>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	08 95       	ret

000009d0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	08 95       	ret

000009d6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     9d6:	08 95       	ret

000009d8 <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	0b b6       	in	r0, 0x3b	; 59
     9e4:	0f 92       	push	r0
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     9fe:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <_ZN14SoftwareSerial13active_objectE>
     a02:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <_ZN14SoftwareSerial13active_objectE+0x1>
     a06:	30 97       	sbiw	r30, 0x00	; 0
     a08:	09 f4       	brne	.+2      	; 0xa0c <__vector_10+0x34>
     a0a:	51 c0       	rjmp	.+162    	; 0xaae <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a0c:	96 8d       	ldd	r25, Z+30	; 0x1e
     a0e:	a6 85       	ldd	r26, Z+14	; 0x0e
     a10:	b7 85       	ldd	r27, Z+15	; 0x0f
     a12:	85 85       	ldd	r24, Z+13	; 0x0d
     a14:	91 ff       	sbrs	r25, 1
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a18:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a1a:	89 23       	and	r24, r25
     a1c:	29 f4       	brne	.+10     	; 0xa28 <__vector_10+0x50>
     a1e:	47 c0       	rjmp	.+142    	; 0xaae <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a20:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a22:	89 23       	and	r24, r25
     a24:	09 f0       	breq	.+2      	; 0xa28 <__vector_10+0x50>
     a26:	43 c0       	rjmp	.+134    	; 0xaae <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     a28:	a3 89       	ldd	r26, Z+19	; 0x13
     a2a:	b4 89       	ldd	r27, Z+20	; 0x14
     a2c:	9c 91       	ld	r25, X
     a2e:	85 89       	ldd	r24, Z+21	; 0x15
     a30:	80 95       	com	r24
     a32:	89 23       	and	r24, r25
     a34:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     a36:	86 89       	ldd	r24, Z+22	; 0x16
     a38:	97 89       	ldd	r25, Z+23	; 0x17
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     a3e:	60 8d       	ldd	r22, Z+24	; 0x18
     a40:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a42:	a6 85       	ldd	r26, Z+14	; 0x0e
     a44:	b7 85       	ldd	r27, Z+15	; 0x0f
     a46:	55 85       	ldd	r21, Z+13	; 0x0d
     a48:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	cb 01       	movw	r24, r22
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     a52:	82 2f       	mov	r24, r18
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	95 95       	asr	r25
     a58:	87 95       	ror	r24
     a5a:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a5c:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     a5e:	45 23       	and	r20, r21
     a60:	09 f0       	breq	.+2      	; 0xa64 <__vector_10+0x8c>
        d |= 0x80;
     a62:	20 68       	ori	r18, 0x80	; 128
     a64:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     a66:	91 f7       	brne	.-28     	; 0xa4c <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     a68:	86 8d       	ldd	r24, Z+30	; 0x1e
     a6a:	81 fd       	sbrc	r24, 1
      d = ~d;
     a6c:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     a6e:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	8f 73       	andi	r24, 0x3F	; 63
     a78:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
     a7a:	30 91 c0 04 	lds	r19, 0x04C0	; 0x8004c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
     a7e:	38 17       	cp	r19, r24
     a80:	49 f0       	breq	.+18     	; 0xa94 <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     a82:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	ae 53       	subi	r26, 0x3E	; 62
     a8a:	bb 4f       	sbci	r27, 0xFB	; 251
     a8c:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
     a8e:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     a92:	03 c0       	rjmp	.+6      	; 0xa9a <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     a94:	86 8d       	ldd	r24, Z+30	; 0x1e
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	86 8f       	std	Z+30, r24	; 0x1e
     a9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a9c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     aa2:	a3 89       	ldd	r26, Z+19	; 0x13
     aa4:	b4 89       	ldd	r27, Z+20	; 0x14
     aa6:	9c 91       	ld	r25, X
     aa8:	85 89       	ldd	r24, Z+21	; 0x15
     aaa:	89 2b       	or	r24, r25
     aac:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0b be       	out	0x3b, r0	; 59
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     ad4:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <twi_state>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <twi_sendStop>
     ade:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_inRepStart>
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	84 e1       	ldi	r24, 0x14	; 20
     ae6:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	85 e1       	ldi	r24, 0x15	; 21
     aee:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
     af2:	e9 eb       	ldi	r30, 0xB9	; 185
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	80 83       	st	Z, r24
     afc:	80 81       	ld	r24, Z
     afe:	8d 7f       	andi	r24, 0xFD	; 253
     b00:	80 83       	st	Z, r24
     b02:	88 e4       	ldi	r24, 0x48	; 72
     b04:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     b08:	85 e4       	ldi	r24, 0x45	; 69
     b0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b0e:	08 95       	ret

00000b10 <twi_readFrom>:
     b10:	41 32       	cpi	r20, 0x21	; 33
     b12:	08 f0       	brcs	.+2      	; 0xb16 <twi_readFrom+0x6>
     b14:	43 c0       	rjmp	.+134    	; 0xb9c <twi_readFrom+0x8c>
     b16:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <twi_state>
     b1a:	91 11       	cpse	r25, r1
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <twi_readFrom+0x6>
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <twi_state>
     b24:	20 93 6f 05 	sts	0x056F, r18	; 0x80056f <twi_sendStop>
     b28:	2f ef       	ldi	r18, 0xFF	; 255
     b2a:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <twi_error>
     b2e:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <twi_masterBufferIndex>
     b32:	24 0f       	add	r18, r20
     b34:	20 93 48 05 	sts	0x0548, r18	; 0x800548 <twi_masterBufferLength>
     b38:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <twi_slarw>
     b3c:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_slarw>
     b40:	88 0f       	add	r24, r24
     b42:	89 2b       	or	r24, r25
     b44:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <twi_slarw>
     b48:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <twi_inRepStart>
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	61 f4       	brne	.+24     	; 0xb68 <twi_readFrom+0x58>
     b50:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_inRepStart>
     b54:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_slarw>
     b58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b5c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b60:	83 fd       	sbrc	r24, 3
     b62:	f8 cf       	rjmp	.-16     	; 0xb54 <twi_readFrom+0x44>
     b64:	85 ec       	ldi	r24, 0xC5	; 197
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <twi_readFrom+0x5a>
     b68:	85 ee       	ldi	r24, 0xE5	; 229
     b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b6e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_state>
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	e1 f3       	breq	.-8      	; 0xb6e <twi_readFrom+0x5e>
     b76:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <twi_masterBufferIndex>
     b7a:	84 17       	cp	r24, r20
     b7c:	10 f4       	brcc	.+4      	; 0xb82 <twi_readFrom+0x72>
     b7e:	40 91 49 05 	lds	r20, 0x0549	; 0x800549 <twi_masterBufferIndex>
     b82:	aa e4       	ldi	r26, 0x4A	; 74
     b84:	b5 e0       	ldi	r27, 0x05	; 5
     b86:	96 2f       	mov	r25, r22
     b88:	fb 01       	movw	r30, r22
     b8a:	8e 2f       	mov	r24, r30
     b8c:	89 1b       	sub	r24, r25
     b8e:	84 17       	cp	r24, r20
     b90:	18 f4       	brcc	.+6      	; 0xb98 <twi_readFrom+0x88>
     b92:	8d 91       	ld	r24, X+
     b94:	81 93       	st	Z+, r24
     b96:	f9 cf       	rjmp	.-14     	; 0xb8a <twi_readFrom+0x7a>
     b98:	84 2f       	mov	r24, r20
     b9a:	08 95       	ret
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <twi_writeTo>:
     ba0:	0f 93       	push	r16
     ba2:	41 32       	cpi	r20, 0x21	; 33
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <twi_writeTo+0x8>
     ba6:	4a c0       	rjmp	.+148    	; 0xc3c <twi_writeTo+0x9c>
     ba8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <twi_state>
     bac:	91 11       	cpse	r25, r1
     bae:	fc cf       	rjmp	.-8      	; 0xba8 <twi_writeTo+0x8>
     bb0:	32 e0       	ldi	r19, 0x02	; 2
     bb2:	30 93 71 05 	sts	0x0571, r19	; 0x800571 <twi_state>
     bb6:	00 93 6f 05 	sts	0x056F, r16	; 0x80056f <twi_sendStop>
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	30 93 04 05 	sts	0x0504, r19	; 0x800504 <twi_error>
     bc0:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <twi_masterBufferIndex>
     bc4:	40 93 48 05 	sts	0x0548, r20	; 0x800548 <twi_masterBufferLength>
     bc8:	56 2f       	mov	r21, r22
     bca:	aa e4       	ldi	r26, 0x4A	; 74
     bcc:	b5 e0       	ldi	r27, 0x05	; 5
     bce:	fb 01       	movw	r30, r22
     bd0:	3e 2f       	mov	r19, r30
     bd2:	35 1b       	sub	r19, r21
     bd4:	34 17       	cp	r19, r20
     bd6:	18 f4       	brcc	.+6      	; 0xbde <twi_writeTo+0x3e>
     bd8:	31 91       	ld	r19, Z+
     bda:	3d 93       	st	X+, r19
     bdc:	f9 cf       	rjmp	.-14     	; 0xbd0 <twi_writeTo+0x30>
     bde:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <twi_slarw>
     be2:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <twi_slarw>
     be6:	88 0f       	add	r24, r24
     be8:	83 2b       	or	r24, r19
     bea:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <twi_slarw>
     bee:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <twi_inRepStart>
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	61 f4       	brne	.+24     	; 0xc0e <twi_writeTo+0x6e>
     bf6:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_inRepStart>
     bfa:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_slarw>
     bfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c02:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c06:	83 fd       	sbrc	r24, 3
     c08:	f8 cf       	rjmp	.-16     	; 0xbfa <twi_writeTo+0x5a>
     c0a:	85 ec       	ldi	r24, 0xC5	; 197
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <twi_writeTo+0x70>
     c0e:	85 ee       	ldi	r24, 0xE5	; 229
     c10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c14:	22 23       	and	r18, r18
     c16:	21 f0       	breq	.+8      	; 0xc20 <twi_writeTo+0x80>
     c18:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_state>
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	d1 f3       	breq	.-12     	; 0xc14 <twi_writeTo+0x74>
     c20:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_error>
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	79 f0       	breq	.+30     	; 0xc46 <twi_writeTo+0xa6>
     c28:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_error>
     c2c:	80 32       	cpi	r24, 0x20	; 32
     c2e:	41 f0       	breq	.+16     	; 0xc40 <twi_writeTo+0xa0>
     c30:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_error>
     c34:	80 33       	cpi	r24, 0x30	; 48
     c36:	31 f0       	breq	.+12     	; 0xc44 <twi_writeTo+0xa4>
     c38:	94 e0       	ldi	r25, 0x04	; 4
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <twi_writeTo+0xa6>
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <twi_writeTo+0xa6>
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <twi_writeTo+0xa6>
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	89 2f       	mov	r24, r25
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <twi_transmit>:
     c4c:	40 91 26 05 	lds	r20, 0x0526	; 0x800526 <twi_txBufferLength>
     c50:	26 2f       	mov	r18, r22
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	24 0f       	add	r18, r20
     c56:	31 1d       	adc	r19, r1
     c58:	21 32       	cpi	r18, 0x21	; 33
     c5a:	31 05       	cpc	r19, r1
     c5c:	dc f4       	brge	.+54     	; 0xc94 <twi_transmit+0x48>
     c5e:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <twi_state>
     c62:	24 30       	cpi	r18, 0x04	; 4
     c64:	c9 f4       	brne	.+50     	; 0xc98 <twi_transmit+0x4c>
     c66:	fc 01       	movw	r30, r24
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	86 17       	cp	r24, r22
     c6e:	58 f4       	brcc	.+22     	; 0xc86 <twi_transmit+0x3a>
     c70:	30 91 26 05 	lds	r19, 0x0526	; 0x800526 <twi_txBufferLength>
     c74:	21 91       	ld	r18, Z+
     c76:	dc 01       	movw	r26, r24
     c78:	a8 5d       	subi	r26, 0xD8	; 216
     c7a:	ba 4f       	sbci	r27, 0xFA	; 250
     c7c:	a3 0f       	add	r26, r19
     c7e:	b1 1d       	adc	r27, r1
     c80:	2c 93       	st	X, r18
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	f3 cf       	rjmp	.-26     	; 0xc6c <twi_transmit+0x20>
     c86:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_txBufferLength>
     c8a:	68 0f       	add	r22, r24
     c8c:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <twi_txBufferLength>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	08 95       	ret

00000c9c <twi_attachSlaveRxEvent>:
     c9c:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <twi_onSlaveReceive+0x1>
     ca0:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_onSlaveReceive>
     ca4:	08 95       	ret

00000ca6 <twi_attachSlaveTxEvent>:
     ca6:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <twi_onSlaveTransmit+0x1>
     caa:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <twi_onSlaveTransmit>
     cae:	08 95       	ret

00000cb0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     cb0:	85 ed       	ldi	r24, 0xD5	; 213
     cb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     cb6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     cba:	84 fd       	sbrc	r24, 4
     cbc:	fc cf       	rjmp	.-8      	; 0xcb6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     cbe:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <twi_state>
     cc2:	08 95       	ret

00000cc4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     cc4:	85 ec       	ldi	r24, 0xC5	; 197
     cc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
     cca:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <twi_state>
     cce:	08 95       	ret

00000cd0 <__vector_39>:
}

ISR(TWI_vect)
{
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	0b b6       	in	r0, 0x3b	; 59
     cdc:	0f 92       	push	r0
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	4f 93       	push	r20
     ce4:	5f 93       	push	r21
     ce6:	6f 93       	push	r22
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
  switch(TW_STATUS){
     cf6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     cfa:	88 7f       	andi	r24, 0xF8	; 248
     cfc:	80 36       	cpi	r24, 0x60	; 96
     cfe:	09 f4       	brne	.+2      	; 0xd02 <__vector_39+0x32>
     d00:	9d c0       	rjmp	.+314    	; 0xe3c <__vector_39+0x16c>
     d02:	70 f5       	brcc	.+92     	; 0xd60 <__vector_39+0x90>
     d04:	88 32       	cpi	r24, 0x28	; 40
     d06:	09 f4       	brne	.+2      	; 0xd0a <__vector_39+0x3a>
     d08:	5c c0       	rjmp	.+184    	; 0xdc2 <__vector_39+0xf2>
     d0a:	90 f4       	brcc	.+36     	; 0xd30 <__vector_39+0x60>
     d0c:	80 31       	cpi	r24, 0x10	; 16
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__vector_39+0x42>
     d10:	55 c0       	rjmp	.+170    	; 0xdbc <__vector_39+0xec>
     d12:	38 f4       	brcc	.+14     	; 0xd22 <__vector_39+0x52>
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <__vector_39+0x4a>
     d18:	f3 c0       	rjmp	.+486    	; 0xf00 <__vector_39+0x230>
     d1a:	88 30       	cpi	r24, 0x08	; 8
     d1c:	09 f4       	brne	.+2      	; 0xd20 <__vector_39+0x50>
     d1e:	4e c0       	rjmp	.+156    	; 0xdbc <__vector_39+0xec>
     d20:	f2 c0       	rjmp	.+484    	; 0xf06 <__vector_39+0x236>
     d22:	88 31       	cpi	r24, 0x18	; 24
     d24:	09 f4       	brne	.+2      	; 0xd28 <__vector_39+0x58>
     d26:	4d c0       	rjmp	.+154    	; 0xdc2 <__vector_39+0xf2>
     d28:	80 32       	cpi	r24, 0x20	; 32
     d2a:	09 f4       	brne	.+2      	; 0xd2e <__vector_39+0x5e>
     d2c:	5e c0       	rjmp	.+188    	; 0xdea <__vector_39+0x11a>
     d2e:	eb c0       	rjmp	.+470    	; 0xf06 <__vector_39+0x236>
     d30:	80 34       	cpi	r24, 0x40	; 64
     d32:	09 f4       	brne	.+2      	; 0xd36 <__vector_39+0x66>
     d34:	69 c0       	rjmp	.+210    	; 0xe08 <__vector_39+0x138>
     d36:	50 f4       	brcc	.+20     	; 0xd4c <__vector_39+0x7c>
     d38:	80 33       	cpi	r24, 0x30	; 48
     d3a:	09 f4       	brne	.+2      	; 0xd3e <__vector_39+0x6e>
     d3c:	56 c0       	rjmp	.+172    	; 0xdea <__vector_39+0x11a>
     d3e:	88 33       	cpi	r24, 0x38	; 56
     d40:	09 f0       	breq	.+2      	; 0xd44 <__vector_39+0x74>
     d42:	e1 c0       	rjmp	.+450    	; 0xf06 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     d44:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_error>
      twi_releaseBus();
     d48:	bd df       	rcall	.-134    	; 0xcc4 <twi_releaseBus>
      break;
     d4a:	dd c0       	rjmp	.+442    	; 0xf06 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     d4c:	80 35       	cpi	r24, 0x50	; 80
     d4e:	09 f4       	brne	.+2      	; 0xd52 <__vector_39+0x82>
     d50:	4f c0       	rjmp	.+158    	; 0xdf0 <__vector_39+0x120>
     d52:	88 35       	cpi	r24, 0x58	; 88
     d54:	09 f4       	brne	.+2      	; 0xd58 <__vector_39+0x88>
     d56:	5d c0       	rjmp	.+186    	; 0xe12 <__vector_39+0x142>
     d58:	88 34       	cpi	r24, 0x48	; 72
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__vector_39+0x8e>
     d5c:	d4 c0       	rjmp	.+424    	; 0xf06 <__vector_39+0x236>
     d5e:	d2 c0       	rjmp	.+420    	; 0xf04 <__vector_39+0x234>
     d60:	88 39       	cpi	r24, 0x98	; 152
     d62:	09 f4       	brne	.+2      	; 0xd66 <__vector_39+0x96>
     d64:	c3 c0       	rjmp	.+390    	; 0xeec <__vector_39+0x21c>
     d66:	a8 f4       	brcc	.+42     	; 0xd92 <__vector_39+0xc2>
     d68:	88 37       	cpi	r24, 0x78	; 120
     d6a:	09 f4       	brne	.+2      	; 0xd6e <__vector_39+0x9e>
     d6c:	67 c0       	rjmp	.+206    	; 0xe3c <__vector_39+0x16c>
     d6e:	38 f4       	brcc	.+14     	; 0xd7e <__vector_39+0xae>
     d70:	88 36       	cpi	r24, 0x68	; 104
     d72:	09 f4       	brne	.+2      	; 0xd76 <__vector_39+0xa6>
     d74:	63 c0       	rjmp	.+198    	; 0xe3c <__vector_39+0x16c>
     d76:	80 37       	cpi	r24, 0x70	; 112
     d78:	09 f4       	brne	.+2      	; 0xd7c <__vector_39+0xac>
     d7a:	60 c0       	rjmp	.+192    	; 0xe3c <__vector_39+0x16c>
     d7c:	c4 c0       	rjmp	.+392    	; 0xf06 <__vector_39+0x236>
     d7e:	88 38       	cpi	r24, 0x88	; 136
     d80:	09 f4       	brne	.+2      	; 0xd84 <__vector_39+0xb4>
     d82:	b4 c0       	rjmp	.+360    	; 0xeec <__vector_39+0x21c>
     d84:	80 39       	cpi	r24, 0x90	; 144
     d86:	09 f4       	brne	.+2      	; 0xd8a <__vector_39+0xba>
     d88:	5f c0       	rjmp	.+190    	; 0xe48 <__vector_39+0x178>
     d8a:	80 38       	cpi	r24, 0x80	; 128
     d8c:	09 f0       	breq	.+2      	; 0xd90 <__vector_39+0xc0>
     d8e:	bb c0       	rjmp	.+374    	; 0xf06 <__vector_39+0x236>
     d90:	5b c0       	rjmp	.+182    	; 0xe48 <__vector_39+0x178>
     d92:	80 3b       	cpi	r24, 0xB0	; 176
     d94:	09 f4       	brne	.+2      	; 0xd98 <__vector_39+0xc8>
     d96:	82 c0       	rjmp	.+260    	; 0xe9c <__vector_39+0x1cc>
     d98:	38 f4       	brcc	.+14     	; 0xda8 <__vector_39+0xd8>
     d9a:	80 3a       	cpi	r24, 0xA0	; 160
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__vector_39+0xd0>
     d9e:	66 c0       	rjmp	.+204    	; 0xe6c <__vector_39+0x19c>
     da0:	88 3a       	cpi	r24, 0xA8	; 168
     da2:	09 f4       	brne	.+2      	; 0xda6 <__vector_39+0xd6>
     da4:	7b c0       	rjmp	.+246    	; 0xe9c <__vector_39+0x1cc>
     da6:	af c0       	rjmp	.+350    	; 0xf06 <__vector_39+0x236>
     da8:	80 3c       	cpi	r24, 0xC0	; 192
     daa:	09 f4       	brne	.+2      	; 0xdae <__vector_39+0xde>
     dac:	a3 c0       	rjmp	.+326    	; 0xef4 <__vector_39+0x224>
     dae:	88 3c       	cpi	r24, 0xC8	; 200
     db0:	09 f4       	brne	.+2      	; 0xdb4 <__vector_39+0xe4>
     db2:	a0 c0       	rjmp	.+320    	; 0xef4 <__vector_39+0x224>
     db4:	88 3b       	cpi	r24, 0xB8	; 184
     db6:	09 f4       	brne	.+2      	; 0xdba <__vector_39+0xea>
     db8:	86 c0       	rjmp	.+268    	; 0xec6 <__vector_39+0x1f6>
     dba:	a5 c0       	rjmp	.+330    	; 0xf06 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     dbc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_slarw>
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     dc2:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <twi_masterBufferIndex>
     dc6:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_masterBufferLength>
     dca:	98 17       	cp	r25, r24
     dcc:	70 f5       	brcc	.+92     	; 0xe2a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     dce:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <twi_masterBufferIndex>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	8e 0f       	add	r24, r30
     dd6:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <twi_masterBufferIndex>
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	e6 5b       	subi	r30, 0xB6	; 182
     dde:	fa 4f       	sbci	r31, 0xFA	; 250
     de0:	80 81       	ld	r24, Z
     de2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     de6:	85 ec       	ldi	r24, 0xC5	; 197
     de8:	82 c0       	rjmp	.+260    	; 0xeee <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     dea:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_error>
     dee:	8a c0       	rjmp	.+276    	; 0xf04 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     df0:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <twi_masterBufferIndex>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8e 0f       	add	r24, r30
     df8:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <twi_masterBufferIndex>
     dfc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	e6 5b       	subi	r30, 0xB6	; 182
     e04:	fa 4f       	sbci	r31, 0xFA	; 250
     e06:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     e08:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <twi_masterBufferIndex>
     e0c:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_masterBufferLength>
     e10:	6a c0       	rjmp	.+212    	; 0xee6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     e12:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <twi_masterBufferIndex>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8e 0f       	add	r24, r30
     e1a:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <twi_masterBufferIndex>
     e1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	e6 5b       	subi	r30, 0xB6	; 182
     e26:	fa 4f       	sbci	r31, 0xFA	; 250
     e28:	80 83       	st	Z, r24
	if (twi_sendStop)
     e2a:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_sendStop>
     e2e:	81 11       	cpse	r24, r1
     e30:	69 c0       	rjmp	.+210    	; 0xf04 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     e38:	84 ea       	ldi	r24, 0xA4	; 164
     e3a:	5d c0       	rjmp	.+186    	; 0xef6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     e42:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_rxBufferIndex>
     e46:	cf cf       	rjmp	.-98     	; 0xde6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e48:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_rxBufferIndex>
     e4c:	80 32       	cpi	r24, 0x20	; 32
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <__vector_39+0x182>
     e50:	4d c0       	rjmp	.+154    	; 0xeec <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     e52:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_rxBufferIndex>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	8e 0f       	add	r24, r30
     e5a:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_rxBufferIndex>
     e5e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	ea 5f       	subi	r30, 0xFA	; 250
     e66:	fa 4f       	sbci	r31, 0xFA	; 250
     e68:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     e6a:	bd cf       	rjmp	.-134    	; 0xde6 <__vector_39+0x116>
     e6c:	2b df       	rcall	.-426    	; 0xcc4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e6e:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_rxBufferIndex>
     e72:	80 32       	cpi	r24, 0x20	; 32
     e74:	30 f4       	brcc	.+12     	; 0xe82 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     e76:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_rxBufferIndex>
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	ea 5f       	subi	r30, 0xFA	; 250
     e7e:	fa 4f       	sbci	r31, 0xFA	; 250
     e80:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     e82:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <twi_rxBufferIndex>
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	e0 91 6a 05 	lds	r30, 0x056A	; 0x80056a <twi_onSlaveReceive>
     e8c:	f0 91 6b 05 	lds	r31, 0x056B	; 0x80056b <twi_onSlaveReceive+0x1>
     e90:	86 e0       	ldi	r24, 0x06	; 6
     e92:	95 e0       	ldi	r25, 0x05	; 5
     e94:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     e96:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_rxBufferIndex>
      break;
     e9a:	35 c0       	rjmp	.+106    	; 0xf06 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     ea2:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     ea6:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     eaa:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <twi_onSlaveTransmit>
     eae:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <twi_onSlaveTransmit+0x1>
     eb2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     eb4:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_txBufferLength>
     eb8:	81 11       	cpse	r24, r1
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     ec2:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     ec6:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_txBufferIndex>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8e 0f       	add	r24, r30
     ece:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_txBufferIndex>
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	e8 5d       	subi	r30, 0xD8	; 216
     ed6:	fa 4f       	sbci	r31, 0xFA	; 250
     ed8:	80 81       	ld	r24, Z
     eda:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     ede:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <twi_txBufferIndex>
     ee2:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_txBufferLength>
     ee6:	98 17       	cp	r25, r24
     ee8:	08 f4       	brcc	.+2      	; 0xeec <__vector_39+0x21c>
     eea:	7d cf       	rjmp	.-262    	; 0xde6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     eec:	85 e8       	ldi	r24, 0x85	; 133
     eee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ef4:	85 ec       	ldi	r24, 0xC5	; 197
     ef6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     efa:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <twi_state>
      break;
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     f00:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_error>
      twi_stop();
     f04:	d5 de       	rcall	.-598    	; 0xcb0 <twi_stop>
      break;
  }
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     f2c:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
     f36:	82 1b       	sub	r24, r18
     f38:	91 09       	sbc	r25, r1
     f3a:	08 95       	ret

00000f3c <_ZN7TwoWire4readEv>:
     f3c:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
     f40:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
     f44:	98 17       	cp	r25, r24
     f46:	50 f4       	brcc	.+20     	; 0xf5c <_ZN7TwoWire4readEv+0x20>
     f48:	e9 2f       	mov	r30, r25
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	e8 55       	subi	r30, 0x58	; 88
     f4e:	fa 4f       	sbci	r31, 0xFA	; 250
     f50:	20 81       	ld	r18, Z
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	9f 5f       	subi	r25, 0xFF	; 255
     f56:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <_ZN7TwoWire4readEv+0x24>
     f5c:	2f ef       	ldi	r18, 0xFF	; 255
     f5e:	3f ef       	ldi	r19, 0xFF	; 255
     f60:	c9 01       	movw	r24, r18
     f62:	08 95       	ret

00000f64 <_ZN7TwoWire4peekEv>:
     f64:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
     f68:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
     f6c:	e8 17       	cp	r30, r24
     f6e:	30 f4       	brcc	.+12     	; 0xf7c <_ZN7TwoWire4peekEv+0x18>
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	e8 55       	subi	r30, 0x58	; 88
     f74:	fa 4f       	sbci	r31, 0xFA	; 250
     f76:	80 81       	ld	r24, Z
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	08 95       	ret
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <_ZN7TwoWire5flushEv>:
     f82:	08 95       	ret

00000f84 <_ZN7TwoWire16onReceiveServiceEPhi>:
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <_ZN7TwoWire14user_onReceiveE>
     f8e:	f0 91 7f 05 	lds	r31, 0x057F	; 0x80057f <_ZN7TwoWire14user_onReceiveE+0x1>
     f92:	30 97       	sbiw	r30, 0x00	; 0
     f94:	f1 f0       	breq	.+60     	; 0xfd2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     f96:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
     f9a:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
     f9e:	98 17       	cp	r25, r24
     fa0:	c0 f0       	brcs	.+48     	; 0xfd2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	29 2f       	mov	r18, r25
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	26 17       	cp	r18, r22
     faa:	37 07       	cpc	r19, r23
     fac:	54 f4       	brge	.+20     	; 0xfc2 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
     fae:	de 01       	movw	r26, r28
     fb0:	a2 0f       	add	r26, r18
     fb2:	b3 1f       	adc	r27, r19
     fb4:	4c 91       	ld	r20, X
     fb6:	d9 01       	movw	r26, r18
     fb8:	a8 55       	subi	r26, 0x58	; 88
     fba:	ba 4f       	sbci	r27, 0xFA	; 250
     fbc:	4c 93       	st	X, r20
     fbe:	9f 5f       	subi	r25, 0xFF	; 255
     fc0:	f1 cf       	rjmp	.-30     	; 0xfa4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
     fc2:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
     fc6:	60 93 a6 05 	sts	0x05A6, r22	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
     fca:	cb 01       	movw	r24, r22
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	19 94       	eijmp
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <_ZN7TwoWire16onRequestServiceEv>:
     fd8:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <_ZN7TwoWire14user_onRequestE>
     fdc:	f0 91 81 05 	lds	r31, 0x0581	; 0x800581 <_ZN7TwoWire14user_onRequestE+0x1>
     fe0:	30 97       	sbiw	r30, 0x00	; 0
     fe2:	29 f0       	breq	.+10     	; 0xfee <_ZN7TwoWire16onRequestServiceEv+0x16>
     fe4:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZN7TwoWire13txBufferIndexE>
     fe8:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
     fec:	19 94       	eijmp
     fee:	08 95       	ret

00000ff0 <_ZN7TwoWire5writeEPKhj>:
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	7c 01       	movw	r14, r24
    1002:	cb 01       	movw	r24, r22
    1004:	8a 01       	movw	r16, r20
    1006:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <_ZN7TwoWire12transmittingE>
    100a:	22 23       	and	r18, r18
    100c:	89 f0       	breq	.+34     	; 0x1030 <_ZN7TwoWire5writeEPKhj+0x40>
    100e:	eb 01       	movw	r28, r22
    1010:	6b 01       	movw	r12, r22
    1012:	c4 0e       	add	r12, r20
    1014:	d5 1e       	adc	r13, r21
    1016:	cc 15       	cp	r28, r12
    1018:	dd 05       	cpc	r29, r13
    101a:	61 f0       	breq	.+24     	; 0x1034 <_ZN7TwoWire5writeEPKhj+0x44>
    101c:	69 91       	ld	r22, Y+
    101e:	d7 01       	movw	r26, r14
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	01 90       	ld	r0, Z+
    1026:	f0 81       	ld	r31, Z
    1028:	e0 2d       	mov	r30, r0
    102a:	c7 01       	movw	r24, r14
    102c:	19 95       	eicall
    102e:	f3 cf       	rjmp	.-26     	; 0x1016 <_ZN7TwoWire5writeEPKhj+0x26>
    1030:	64 2f       	mov	r22, r20
    1032:	0c de       	rcall	.-1000   	; 0xc4c <twi_transmit>
    1034:	c8 01       	movw	r24, r16
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	08 95       	ret

00001048 <_ZN7TwoWire5writeEh>:
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	69 83       	std	Y+1, r22	; 0x01
    1054:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <_ZN7TwoWire12transmittingE>
    1058:	22 23       	and	r18, r18
    105a:	d1 f0       	breq	.+52     	; 0x1090 <_ZN7TwoWire5writeEh+0x48>
    105c:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
    1060:	20 32       	cpi	r18, 0x20	; 32
    1062:	40 f0       	brcs	.+16     	; 0x1074 <_ZN7TwoWire5writeEh+0x2c>
    1064:	21 e0       	ldi	r18, 0x01	; 1
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	fc 01       	movw	r30, r24
    106a:	33 83       	std	Z+3, r19	; 0x03
    106c:	22 83       	std	Z+2, r18	; 0x02
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	14 c0       	rjmp	.+40     	; 0x109c <_ZN7TwoWire5writeEh+0x54>
    1074:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ZN7TwoWire13txBufferIndexE>
    1078:	e8 2f       	mov	r30, r24
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	eb 57       	subi	r30, 0x7B	; 123
    107e:	fa 4f       	sbci	r31, 0xFA	; 250
    1080:	99 81       	ldd	r25, Y+1	; 0x01
    1082:	90 83       	st	Z, r25
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <_ZN7TwoWire13txBufferIndexE>
    108a:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <_ZN7TwoWire5writeEh+0x50>
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	da dd       	rcall	.-1100   	; 0xc4c <twi_transmit>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0f 90       	pop	r0
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <_ZN7TwoWireC1Ev>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	13 82       	std	Z+3, r1	; 0x03
    10a8:	12 82       	std	Z+2, r1	; 0x02
    10aa:	88 ee       	ldi	r24, 0xE8	; 232
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	84 83       	std	Z+4, r24	; 0x04
    10b4:	95 83       	std	Z+5, r25	; 0x05
    10b6:	a6 83       	std	Z+6, r26	; 0x06
    10b8:	b7 83       	std	Z+7, r27	; 0x07
    10ba:	81 e2       	ldi	r24, 0x21	; 33
    10bc:	94 e0       	ldi	r25, 0x04	; 4
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    10c2:	08 95       	ret

000010c4 <_ZN7TwoWire5beginEv>:
    10c4:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
    10c8:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
    10cc:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZN7TwoWire13txBufferIndexE>
    10d0:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
    10d4:	ff dc       	rcall	.-1538   	; 0xad4 <twi_init>
    10d6:	8c ee       	ldi	r24, 0xEC	; 236
    10d8:	97 e0       	ldi	r25, 0x07	; 7
    10da:	e5 dd       	rcall	.-1078   	; 0xca6 <twi_attachSlaveTxEvent>
    10dc:	82 ec       	ldi	r24, 0xC2	; 194
    10de:	97 e0       	ldi	r25, 0x07	; 7
    10e0:	dd cd       	rjmp	.-1094   	; 0xc9c <twi_attachSlaveRxEvent>

000010e2 <_ZN7TwoWire17beginTransmissionEh>:
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZN7TwoWire12transmittingE>
    10e8:	60 93 a5 05 	sts	0x05A5, r22	; 0x8005a5 <_ZN7TwoWire9txAddressE>
    10ec:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZN7TwoWire13txBufferIndexE>
    10f0:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
    10f4:	08 95       	ret

000010f6 <_ZN7TwoWire15endTransmissionEh>:
    10f6:	0f 93       	push	r16
    10f8:	06 2f       	mov	r16, r22
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
    1100:	65 e8       	ldi	r22, 0x85	; 133
    1102:	75 e0       	ldi	r23, 0x05	; 5
    1104:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZN7TwoWire9txAddressE>
    1108:	4b dd       	rcall	.-1386   	; 0xba0 <twi_writeTo>
    110a:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZN7TwoWire13txBufferIndexE>
    110e:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire14txBufferLengthE>
    1112:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZN7TwoWire12transmittingE>
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <_ZN7TwoWire11requestFromEhhmhh>:
    111a:	4f 92       	push	r4
    111c:	5f 92       	push	r5
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	af 92       	push	r10
    1124:	bf 92       	push	r11
    1126:	cf 92       	push	r12
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	5c 01       	movw	r10, r24
    1136:	f6 2e       	mov	r15, r22
    1138:	d4 2f       	mov	r29, r20
    113a:	28 01       	movw	r4, r16
    113c:	39 01       	movw	r6, r18
    113e:	ee 20       	and	r14, r14
    1140:	11 f1       	breq	.+68     	; 0x1186 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    1142:	cf df       	rcall	.-98     	; 0x10e2 <_ZN7TwoWire17beginTransmissionEh>
    1144:	ce 2d       	mov	r28, r14
    1146:	c4 30       	cpi	r28, 0x04	; 4
    1148:	08 f0       	brcs	.+2      	; 0x114c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    114a:	c3 e0       	ldi	r28, 0x03	; 3
    114c:	c1 50       	subi	r28, 0x01	; 1
    114e:	c0 f0       	brcs	.+48     	; 0x1180 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    1150:	28 e0       	ldi	r18, 0x08	; 8
    1152:	c2 9f       	mul	r28, r18
    1154:	c0 01       	movw	r24, r0
    1156:	11 24       	eor	r1, r1
    1158:	a3 01       	movw	r20, r6
    115a:	92 01       	movw	r18, r4
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    115e:	56 95       	lsr	r21
    1160:	47 95       	ror	r20
    1162:	37 95       	ror	r19
    1164:	27 95       	ror	r18
    1166:	8a 95       	dec	r24
    1168:	d2 f7       	brpl	.-12     	; 0x115e <_ZN7TwoWire11requestFromEhhmhh+0x44>
    116a:	ca 01       	movw	r24, r20
    116c:	b9 01       	movw	r22, r18
    116e:	d5 01       	movw	r26, r10
    1170:	ed 91       	ld	r30, X+
    1172:	fc 91       	ld	r31, X
    1174:	01 90       	ld	r0, Z+
    1176:	f0 81       	ld	r31, Z
    1178:	e0 2d       	mov	r30, r0
    117a:	c5 01       	movw	r24, r10
    117c:	19 95       	eicall
    117e:	e6 cf       	rjmp	.-52     	; 0x114c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	c5 01       	movw	r24, r10
    1184:	b8 df       	rcall	.-144    	; 0x10f6 <_ZN7TwoWire15endTransmissionEh>
    1186:	4d 2f       	mov	r20, r29
    1188:	d1 32       	cpi	r29, 0x21	; 33
    118a:	08 f0       	brcs	.+2      	; 0x118e <_ZN7TwoWire11requestFromEhhmhh+0x74>
    118c:	40 e2       	ldi	r20, 0x20	; 32
    118e:	2c 2d       	mov	r18, r12
    1190:	68 ea       	ldi	r22, 0xA8	; 168
    1192:	75 e0       	ldi	r23, 0x05	; 5
    1194:	8f 2d       	mov	r24, r15
    1196:	bc dc       	rcall	.-1672   	; 0xb10 <twi_readFrom>
    1198:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire13rxBufferIndexE>
    119c:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <_ZN7TwoWire14rxBufferLengthE>
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	7f 90       	pop	r7
    11b4:	6f 90       	pop	r6
    11b6:	5f 90       	pop	r5
    11b8:	4f 90       	pop	r4
    11ba:	08 95       	ret

000011bc <_ZN7TwoWire11requestFromEhhh>:
    11bc:	cf 92       	push	r12
    11be:	ef 92       	push	r14
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	c2 2e       	mov	r12, r18
    11c6:	e1 2c       	mov	r14, r1
    11c8:	00 e0       	ldi	r16, 0x00	; 0
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	98 01       	movw	r18, r16
    11ce:	a5 df       	rcall	.-182    	; 0x111a <_ZN7TwoWire11requestFromEhhmhh>
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ef 90       	pop	r14
    11d6:	cf 90       	pop	r12
    11d8:	08 95       	ret

000011da <_ZN7TwoWire11requestFromEhh>:
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	ef cf       	rjmp	.-34     	; 0x11bc <_ZN7TwoWire11requestFromEhhh>

000011de <_ZN7TwoWire15endTransmissionEv>:
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	8a cf       	rjmp	.-236    	; 0x10f6 <_ZN7TwoWire15endTransmissionEh>

000011e2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    11e2:	82 e7       	ldi	r24, 0x72	; 114
    11e4:	95 e0       	ldi	r25, 0x05	; 5
    11e6:	5e cf       	rjmp	.-324    	; 0x10a4 <_ZN7TwoWireC1Ev>

000011e8 <_ZN6sdcardC1Ejjjj>:
	{
		Serial.println("File doesn't exist!");
	}
	digitalWrite(chipSelect_pin, LOW);
	while (digitalRead(chipSelect_pin) != LOW){}
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	fc 01       	movw	r30, r24
    11ee:	71 83       	std	Z+1, r23	; 0x01
    11f0:	60 83       	st	Z, r22
    11f2:	53 83       	std	Z+3, r21	; 0x03
    11f4:	42 83       	std	Z+2, r20	; 0x02
    11f6:	35 83       	std	Z+5, r19	; 0x05
    11f8:	24 83       	std	Z+4, r18	; 0x04
    11fa:	17 83       	std	Z+7, r17	; 0x07
    11fc:	06 83       	std	Z+6, r16	; 0x06
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <_ZN6sdcardD1Ev>:
    1204:	08 95       	ret

00001206 <_GLOBAL__sub_I_myFile>:
#include <SD.h>
#include <SPI.h>
#include <stdlib.h>
#include "sdcard.h"

File myFile;
    1206:	8f e0       	ldi	r24, 0x0F	; 15
    1208:	96 e0       	ldi	r25, 0x06	; 6
    120a:	aa d6       	rcall	.+3412   	; 0x1f60 <_ZN5SDLib4FileC1Ev>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    120c:	e3 e0       	ldi	r30, 0x03	; 3
    120e:	f6 e0       	ldi	r31, 0x06	; 6
    1210:	15 82       	std	Z+5, r1	; 0x05
    1212:	16 82       	std	Z+6, r1	; 0x06
    1214:	11 86       	std	Z+9, r1	; 0x09
    1216:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1218:	e5 ee       	ldi	r30, 0xE5	; 229
    121a:	f5 e0       	ldi	r31, 0x05	; 5
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	80 83       	st	Z, r24
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	a2 83       	std	Z+2, r26	; 0x02
    122a:	b3 83       	std	Z+3, r27	; 0x03
    122c:	17 8a       	std	Z+23, r1	; 0x17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    122e:	e8 ec       	ldi	r30, 0xC8	; 200
    1230:	f5 e0       	ldi	r31, 0x05	; 5
    1232:	13 82       	std	Z+3, r1	; 0x03
    1234:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1236:	87 e5       	ldi	r24, 0x57	; 87
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
    123e:	15 82       	std	Z+5, r1	; 0x05
    1240:	08 95       	ret

00001242 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1242:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1244:	91 8d       	ldd	r25, Z+25	; 0x19
    1246:	22 8d       	ldd	r18, Z+26	; 0x1a
    1248:	89 2f       	mov	r24, r25
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	80 5c       	subi	r24, 0xC0	; 192
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	82 1b       	sub	r24, r18
    1252:	91 09       	sbc	r25, r1
}
    1254:	8f 73       	andi	r24, 0x3F	; 63
    1256:	99 27       	eor	r25, r25
    1258:	08 95       	ret

0000125a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    125a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    125c:	91 8d       	ldd	r25, Z+25	; 0x19
    125e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1260:	98 17       	cp	r25, r24
    1262:	31 f0       	breq	.+12     	; 0x1270 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1264:	82 8d       	ldd	r24, Z+26	; 0x1a
    1266:	e8 0f       	add	r30, r24
    1268:	f1 1d       	adc	r31, r1
    126a:	85 8d       	ldd	r24, Z+29	; 0x1d
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1274:	08 95       	ret

00001276 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1276:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1278:	91 8d       	ldd	r25, Z+25	; 0x19
    127a:	82 8d       	ldd	r24, Z+26	; 0x1a
    127c:	98 17       	cp	r25, r24
    127e:	61 f0       	breq	.+24     	; 0x1298 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1280:	82 8d       	ldd	r24, Z+26	; 0x1a
    1282:	df 01       	movw	r26, r30
    1284:	a8 0f       	add	r26, r24
    1286:	b1 1d       	adc	r27, r1
    1288:	5d 96       	adiw	r26, 0x1d	; 29
    128a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    128c:	92 8d       	ldd	r25, Z+26	; 0x1a
    128e:	9f 5f       	subi	r25, 0xFF	; 255
    1290:	9f 73       	andi	r25, 0x3F	; 63
    1292:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    129c:	08 95       	ret

0000129e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    129e:	fc 01       	movw	r30, r24
    12a0:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    12a2:	44 8d       	ldd	r20, Z+28	; 0x1c
    12a4:	25 2f       	mov	r18, r21
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	84 2f       	mov	r24, r20
    12aa:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    12ac:	82 1b       	sub	r24, r18
    12ae:	93 0b       	sbc	r25, r19
    12b0:	54 17       	cp	r21, r20
    12b2:	10 f0       	brcs	.+4      	; 0x12b8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    12b4:	cf 96       	adiw	r24, 0x3f	; 63
    12b6:	08 95       	ret
  return tail - head - 1;
    12b8:	01 97       	sbiw	r24, 0x01	; 1
}
    12ba:	08 95       	ret

000012bc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    12bc:	8d ee       	ldi	r24, 0xED	; 237
    12be:	9a e0       	ldi	r25, 0x0A	; 10
    12c0:	89 2b       	or	r24, r25
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <_Z14serialEventRunv+0x16>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	89 2b       	or	r24, r25
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <_Z14serialEventRunv+0x16>
    12cc:	86 d1       	rcall	.+780    	; 0x15da <_Z17Serial0_availablev>
    12ce:	81 11       	cpse	r24, r1
    12d0:	25 c0       	rjmp	.+74     	; 0x131c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	89 2b       	or	r24, r25
    12d8:	41 f0       	breq	.+16     	; 0x12ea <_Z14serialEventRunv+0x2e>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	89 2b       	or	r24, r25
    12e0:	21 f0       	breq	.+8      	; 0x12ea <_Z14serialEventRunv+0x2e>
    12e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    12e6:	81 11       	cpse	r24, r1
    12e8:	1c c0       	rjmp	.+56     	; 0x1322 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	89 2b       	or	r24, r25
    12f0:	41 f0       	breq	.+16     	; 0x1302 <_Z14serialEventRunv+0x46>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	89 2b       	or	r24, r25
    12f8:	21 f0       	breq	.+8      	; 0x1302 <_Z14serialEventRunv+0x46>
    12fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    12fe:	81 11       	cpse	r24, r1
    1300:	13 c0       	rjmp	.+38     	; 0x1328 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	89 2b       	or	r24, r25
    1308:	a1 f0       	breq	.+40     	; 0x1332 <_Z14serialEventRunv+0x76>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	89 2b       	or	r24, r25
    1310:	81 f0       	breq	.+32     	; 0x1332 <_Z14serialEventRunv+0x76>
    1312:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1316:	81 11       	cpse	r24, r1
    1318:	0a c0       	rjmp	.+20     	; 0x132e <_Z14serialEventRunv+0x72>
    131a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    131c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1320:	d8 cf       	rjmp	.-80     	; 0x12d2 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1322:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1326:	e1 cf       	rjmp	.-62     	; 0x12ea <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1328:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    132c:	ea cf       	rjmp	.-44     	; 0x1302 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    132e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1332:	08 95       	ret

00001334 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1334:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1336:	84 8d       	ldd	r24, Z+28	; 0x1c
    1338:	df 01       	movw	r26, r30
    133a:	a8 0f       	add	r26, r24
    133c:	b1 1d       	adc	r27, r1
    133e:	a3 5a       	subi	r26, 0xA3	; 163
    1340:	bf 4f       	sbci	r27, 0xFF	; 255
    1342:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1344:	84 8d       	ldd	r24, Z+28	; 0x1c
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	8f 73       	andi	r24, 0x3F	; 63
    134c:	99 27       	eor	r25, r25
    134e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1350:	a6 89       	ldd	r26, Z+22	; 0x16
    1352:	b7 89       	ldd	r27, Z+23	; 0x17
    1354:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1356:	a0 89       	ldd	r26, Z+16	; 0x10
    1358:	b1 89       	ldd	r27, Z+17	; 0x11
    135a:	8c 91       	ld	r24, X
    135c:	83 70       	andi	r24, 0x03	; 3
    135e:	80 64       	ori	r24, 0x40	; 64
    1360:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1362:	93 8d       	ldd	r25, Z+27	; 0x1b
    1364:	84 8d       	ldd	r24, Z+28	; 0x1c
    1366:	98 13       	cpse	r25, r24
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    136a:	02 88       	ldd	r0, Z+18	; 0x12
    136c:	f3 89       	ldd	r31, Z+19	; 0x13
    136e:	e0 2d       	mov	r30, r0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7d       	andi	r24, 0xDF	; 223
    1374:	80 83       	st	Z, r24
    1376:	08 95       	ret

00001378 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	ec 01       	movw	r28, r24
  _written = true;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    138a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    138c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    138e:	98 13       	cpse	r25, r24
    1390:	05 c0       	rjmp	.+10     	; 0x139c <_ZN14HardwareSerial5writeEh+0x24>
    1392:	e8 89       	ldd	r30, Y+16	; 0x10
    1394:	f9 89       	ldd	r31, Y+17	; 0x11
    1396:	80 81       	ld	r24, Z
    1398:	85 fd       	sbrc	r24, 5
    139a:	25 c0       	rjmp	.+74     	; 0x13e6 <_ZN14HardwareSerial5writeEh+0x6e>
    139c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    139e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	0f 73       	andi	r16, 0x3F	; 63
    13a8:	11 27       	eor	r17, r17
    13aa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    13ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13ae:	e8 12       	cpse	r14, r24
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	07 fc       	sbrc	r0, 7
    13b6:	fa cf       	rjmp	.-12     	; 0x13ac <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13b8:	e8 89       	ldd	r30, Y+16	; 0x10
    13ba:	f9 89       	ldd	r31, Y+17	; 0x11
    13bc:	80 81       	ld	r24, Z
    13be:	85 ff       	sbrs	r24, 5
    13c0:	f5 cf       	rjmp	.-22     	; 0x13ac <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    13c2:	ce 01       	movw	r24, r28
    13c4:	b7 df       	rcall	.-146    	; 0x1334 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13c6:	f2 cf       	rjmp	.-28     	; 0x13ac <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    13c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ca:	fe 01       	movw	r30, r28
    13cc:	e8 0f       	add	r30, r24
    13ce:	f1 1d       	adc	r31, r1
    13d0:	e3 5a       	subi	r30, 0xA3	; 163
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    13d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13d8:	f8 94       	cli
    _tx_buffer_head = i;
    13da:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    13dc:	ea 89       	ldd	r30, Y+18	; 0x12
    13de:	fb 89       	ldd	r31, Y+19	; 0x13
    13e0:	80 81       	ld	r24, Z
    13e2:	80 62       	ori	r24, 0x20	; 32
    13e4:	0a c0       	rjmp	.+20     	; 0x13fa <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    13e6:	9f b7       	in	r25, 0x3f	; 63
    13e8:	f8 94       	cli
      *_udr = c;
    13ea:	ee 89       	ldd	r30, Y+22	; 0x16
    13ec:	ff 89       	ldd	r31, Y+23	; 0x17
    13ee:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    13f0:	e8 89       	ldd	r30, Y+16	; 0x10
    13f2:	f9 89       	ldd	r31, Y+17	; 0x11
    13f4:	80 81       	ld	r24, Z
    13f6:	83 70       	andi	r24, 0x03	; 3
    13f8:	80 64       	ori	r24, 0x40	; 64
    13fa:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13fc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	08 95       	ret

00001410 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1416:	88 8d       	ldd	r24, Y+24	; 0x18
    1418:	88 23       	and	r24, r24
    141a:	c1 f0       	breq	.+48     	; 0x144c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    141c:	ea 89       	ldd	r30, Y+18	; 0x12
    141e:	fb 89       	ldd	r31, Y+19	; 0x13
    1420:	80 81       	ld	r24, Z
    1422:	85 fd       	sbrc	r24, 5
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <_ZN14HardwareSerial5flushEv+0x20>
    1426:	a8 89       	ldd	r26, Y+16	; 0x10
    1428:	b9 89       	ldd	r27, Y+17	; 0x11
    142a:	8c 91       	ld	r24, X
    142c:	86 fd       	sbrc	r24, 6
    142e:	0e c0       	rjmp	.+28     	; 0x144c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	07 fc       	sbrc	r0, 7
    1434:	f5 cf       	rjmp	.-22     	; 0x1420 <_ZN14HardwareSerial5flushEv+0x10>
    1436:	80 81       	ld	r24, Z
    1438:	85 ff       	sbrs	r24, 5
    143a:	f2 cf       	rjmp	.-28     	; 0x1420 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    143c:	a8 89       	ldd	r26, Y+16	; 0x10
    143e:	b9 89       	ldd	r27, Y+17	; 0x11
    1440:	8c 91       	ld	r24, X
    1442:	85 ff       	sbrs	r24, 5
    1444:	ed cf       	rjmp	.-38     	; 0x1420 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1446:	ce 01       	movw	r24, r28
    1448:	75 df       	rcall	.-278    	; 0x1334 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    144a:	e8 cf       	rjmp	.-48     	; 0x141c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	ec 01       	movw	r28, r24
    1462:	6a 01       	movw	r12, r20
    1464:	7b 01       	movw	r14, r22
    1466:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1468:	e8 89       	ldd	r30, Y+16	; 0x10
    146a:	f9 89       	ldd	r31, Y+17	; 0x11
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1470:	41 15       	cp	r20, r1
    1472:	51 4e       	sbci	r21, 0xE1	; 225
    1474:	61 05       	cpc	r22, r1
    1476:	71 05       	cpc	r23, r1
    1478:	b1 f0       	breq	.+44     	; 0x14a6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	79 e0       	ldi	r23, 0x09	; 9
    147e:	8d e3       	ldi	r24, 0x3D	; 61
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a7 01       	movw	r20, r14
    1484:	96 01       	movw	r18, r12
    1486:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
    148a:	da 01       	movw	r26, r20
    148c:	c9 01       	movw	r24, r18
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	a1 09       	sbc	r26, r1
    1492:	b1 09       	sbc	r27, r1
    1494:	b6 95       	lsr	r27
    1496:	a7 95       	ror	r26
    1498:	97 95       	ror	r25
    149a:	87 95       	ror	r24
    149c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    149e:	21 15       	cp	r18, r1
    14a0:	80 e1       	ldi	r24, 0x10	; 16
    14a2:	38 07       	cpc	r19, r24
    14a4:	a8 f0       	brcs	.+42     	; 0x14d0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    14a6:	e8 89       	ldd	r30, Y+16	; 0x10
    14a8:	f9 89       	ldd	r31, Y+17	; 0x11
    14aa:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14ac:	60 e8       	ldi	r22, 0x80	; 128
    14ae:	74 e8       	ldi	r23, 0x84	; 132
    14b0:	8e e1       	ldi	r24, 0x1E	; 30
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a7 01       	movw	r20, r14
    14b6:	96 01       	movw	r18, r12
    14b8:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
    14bc:	da 01       	movw	r26, r20
    14be:	c9 01       	movw	r24, r18
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	a1 09       	sbc	r26, r1
    14c4:	b1 09       	sbc	r27, r1
    14c6:	b6 95       	lsr	r27
    14c8:	a7 95       	ror	r26
    14ca:	97 95       	ror	r25
    14cc:	87 95       	ror	r24
    14ce:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    14d2:	fd 85       	ldd	r31, Y+13	; 0x0d
    14d4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    14d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    14d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    14da:	20 83       	st	Z, r18

  _written = false;
    14dc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    14de:	ec 89       	ldd	r30, Y+20	; 0x14
    14e0:	fd 89       	ldd	r31, Y+21	; 0x15
    14e2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    14e4:	ea 89       	ldd	r30, Y+18	; 0x12
    14e6:	fb 89       	ldd	r31, Y+19	; 0x13
    14e8:	80 81       	ld	r24, Z
    14ea:	80 61       	ori	r24, 0x10	; 16
    14ec:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    14ee:	ea 89       	ldd	r30, Y+18	; 0x12
    14f0:	fb 89       	ldd	r31, Y+19	; 0x13
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    14f8:	ea 89       	ldd	r30, Y+18	; 0x12
    14fa:	fb 89       	ldd	r31, Y+19	; 0x13
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1502:	ea 89       	ldd	r30, Y+18	; 0x12
    1504:	fb 89       	ldd	r31, Y+19	; 0x13
    1506:	80 81       	ld	r24, Z
    1508:	8f 7d       	andi	r24, 0xDF	; 223
    150a:	80 83       	st	Z, r24
}
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	08 95       	ret

0000151c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	0b b6       	in	r0, 0x3b	; 59
    1528:	0f 92       	push	r0
    152a:	2f 93       	push	r18
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1534:	e0 91 3a 06 	lds	r30, 0x063A	; 0x80063a <Serial+0x10>
    1538:	f0 91 3b 06 	lds	r31, 0x063B	; 0x80063b <Serial+0x11>
    153c:	80 81       	ld	r24, Z
    153e:	e0 91 40 06 	lds	r30, 0x0640	; 0x800640 <Serial+0x16>
    1542:	f0 91 41 06 	lds	r31, 0x0641	; 0x800641 <Serial+0x17>
    1546:	82 fd       	sbrc	r24, 2
    1548:	12 c0       	rjmp	.+36     	; 0x156e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    154a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    154c:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <Serial+0x19>
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1554:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <Serial+0x1a>
    1558:	82 17       	cp	r24, r18
    155a:	51 f0       	breq	.+20     	; 0x1570 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    155c:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <Serial+0x19>
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	e6 5d       	subi	r30, 0xD6	; 214
    1564:	f9 4f       	sbci	r31, 0xF9	; 249
    1566:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1568:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <Serial+0x19>
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    156e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	9f 91       	pop	r25
    1576:	8f 91       	pop	r24
    1578:	2f 91       	pop	r18
    157a:	0f 90       	pop	r0
    157c:	0b be       	out	0x3b, r0	; 59
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	0b b6       	in	r0, 0x3b	; 59
    1594:	0f 92       	push	r0
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15ae:	8a e2       	ldi	r24, 0x2A	; 42
    15b0:	96 e0       	ldi	r25, 0x06	; 6
    15b2:	c0 de       	rcall	.-640    	; 0x1334 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0b be       	out	0x3b, r0	; 59
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15da:	8a e2       	ldi	r24, 0x2A	; 42
    15dc:	96 e0       	ldi	r25, 0x06	; 6
    15de:	31 de       	rcall	.-926    	; 0x1242 <_ZN14HardwareSerial9availableEv>
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	89 2b       	or	r24, r25
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <_Z17Serial0_availablev+0xe>
    15e6:	20 e0       	ldi	r18, 0x00	; 0
}
    15e8:	82 2f       	mov	r24, r18
    15ea:	08 95       	ret

000015ec <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15ec:	ea e2       	ldi	r30, 0x2A	; 42
    15ee:	f6 e0       	ldi	r31, 0x06	; 6
    15f0:	13 82       	std	Z+3, r1	; 0x03
    15f2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15f4:	88 ee       	ldi	r24, 0xE8	; 232
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	a0 e0       	ldi	r26, 0x00	; 0
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	84 83       	std	Z+4, r24	; 0x04
    15fe:	95 83       	std	Z+5, r25	; 0x05
    1600:	a6 83       	std	Z+6, r26	; 0x06
    1602:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1604:	83 e3       	ldi	r24, 0x33	; 51
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
    160c:	85 ec       	ldi	r24, 0xC5	; 197
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	95 87       	std	Z+13, r25	; 0x0d
    1612:	84 87       	std	Z+12, r24	; 0x0c
    1614:	84 ec       	ldi	r24, 0xC4	; 196
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	97 87       	std	Z+15, r25	; 0x0f
    161a:	86 87       	std	Z+14, r24	; 0x0e
    161c:	80 ec       	ldi	r24, 0xC0	; 192
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 8b       	std	Z+17, r25	; 0x11
    1622:	80 8b       	std	Z+16, r24	; 0x10
    1624:	81 ec       	ldi	r24, 0xC1	; 193
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	93 8b       	std	Z+19, r25	; 0x13
    162a:	82 8b       	std	Z+18, r24	; 0x12
    162c:	82 ec       	ldi	r24, 0xC2	; 194
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	95 8b       	std	Z+21, r25	; 0x15
    1632:	84 8b       	std	Z+20, r24	; 0x14
    1634:	86 ec       	ldi	r24, 0xC6	; 198
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	97 8b       	std	Z+23, r25	; 0x17
    163a:	86 8b       	std	Z+22, r24	; 0x16
    163c:	11 8e       	std	Z+25, r1	; 0x19
    163e:	12 8e       	std	Z+26, r1	; 0x1a
    1640:	13 8e       	std	Z+27, r1	; 0x1b
    1642:	14 8e       	std	Z+28, r1	; 0x1c
    1644:	08 95       	ret

00001646 <initVariant>:
    1646:	08 95       	ret

00001648 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1648:	43 d2       	rcall	.+1158   	; 0x1ad0 <init>

	initVariant();
    164a:	fd df       	rcall	.-6      	; 0x1646 <initVariant>
    164c:	0e 94 87 01 	call	0x30e	; 0x30e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1650:	ce e5       	ldi	r28, 0x5E	; 94
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1652:	d9 e0       	ldi	r29, 0x09	; 9
    1654:	0e 94 96 01 	call	0x32c	; 0x32c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    1658:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    165a:	e1 f3       	breq	.-8      	; 0x1654 <main+0xc>
    165c:	2f de       	rcall	.-930    	; 0x12bc <_Z14serialEventRunv>
    165e:	fa cf       	rjmp	.-12     	; 0x1654 <main+0xc>

00001660 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	6c 01       	movw	r12, r24
    1672:	7a 01       	movw	r14, r20
    1674:	8b 01       	movw	r16, r22
  size_t n = 0;
    1676:	c0 e0       	ldi	r28, 0x00	; 0
    1678:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    167a:	ce 15       	cp	r28, r14
    167c:	df 05       	cpc	r29, r15
    167e:	81 f0       	breq	.+32     	; 0x16a0 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    1680:	d8 01       	movw	r26, r16
    1682:	6d 91       	ld	r22, X+
    1684:	8d 01       	movw	r16, r26
    1686:	d6 01       	movw	r26, r12
    1688:	ed 91       	ld	r30, X+
    168a:	fc 91       	ld	r31, X
    168c:	01 90       	ld	r0, Z+
    168e:	f0 81       	ld	r31, Z
    1690:	e0 2d       	mov	r30, r0
    1692:	c6 01       	movw	r24, r12
    1694:	19 95       	eicall
    1696:	89 2b       	or	r24, r25
    1698:	11 f0       	breq	.+4      	; 0x169e <_ZN5Print5writeEPKhj+0x3e>
    169a:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    169c:	ee cf       	rjmp	.-36     	; 0x167a <_ZN5Print5writeEPKhj+0x1a>
    169e:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    16a0:	c7 01       	movw	r24, r14
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	08 95       	ret

000016b4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    16b4:	08 95       	ret

000016b6 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    16b6:	1f 92       	push	r1
    16b8:	0f 92       	push	r0
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	0b b6       	in	r0, 0x3b	; 59
    16c2:	0f 92       	push	r0
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    16e0:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    16e4:	19 95       	eicall
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	0b b6       	in	r0, 0x3b	; 59
    1718:	0f 92       	push	r0
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    1736:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    173a:	19 95       	eicall
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0b be       	out	0x3b, r0	; 59
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
    1788:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    178c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    1790:	19 95       	eicall
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0b be       	out	0x3b, r0	; 59
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	0b b6       	in	r0, 0x3b	; 59
    17c4:	0f 92       	push	r0
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
    17de:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    17e2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    17e6:	19 95       	eicall
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	7f 91       	pop	r23
    17f6:	6f 91       	pop	r22
    17f8:	5f 91       	pop	r21
    17fa:	4f 91       	pop	r20
    17fc:	3f 91       	pop	r19
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0b be       	out	0x3b, r0	; 59
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	0b b6       	in	r0, 0x3b	; 59
    181a:	0f 92       	push	r0
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	5f 93       	push	r21
    1824:	6f 93       	push	r22
    1826:	7f 93       	push	r23
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    1838:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    183c:	19 95       	eicall
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0b be       	out	0x3b, r0	; 59
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	0b b6       	in	r0, 0x3b	; 59
    1870:	0f 92       	push	r0
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    188e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    1892:	19 95       	eicall
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0b be       	out	0x3b, r0	; 59
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	0b b6       	in	r0, 0x3b	; 59
    18c6:	0f 92       	push	r0
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    18e4:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    18e8:	19 95       	eicall
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0b be       	out	0x3b, r0	; 59
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	0b b6       	in	r0, 0x3b	; 59
    191c:	0f 92       	push	r0
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    193a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    193e:	19 95       	eicall
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0b be       	out	0x3b, r0	; 59
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	0f 90       	pop	r0
    1962:	1f 90       	pop	r1
    1964:	18 95       	reti

00001966 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	8f 93       	push	r24
    1976:	9f 93       	push	r25
    1978:	af 93       	push	r26
    197a:	bf 93       	push	r27
    197c:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <timer0_millis>
    1980:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <timer0_millis+0x1>
    1984:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <timer0_millis+0x2>
    1988:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <timer0_millis+0x3>
    198c:	30 91 c7 06 	lds	r19, 0x06C7	; 0x8006c7 <timer0_fract>
    1990:	23 e0       	ldi	r18, 0x03	; 3
    1992:	23 0f       	add	r18, r19
    1994:	2d 37       	cpi	r18, 0x7D	; 125
    1996:	20 f4       	brcc	.+8      	; 0x19a0 <__vector_23+0x3a>
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	a1 1d       	adc	r26, r1
    199c:	b1 1d       	adc	r27, r1
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <__vector_23+0x44>
    19a0:	26 e8       	ldi	r18, 0x86	; 134
    19a2:	23 0f       	add	r18, r19
    19a4:	02 96       	adiw	r24, 0x02	; 2
    19a6:	a1 1d       	adc	r26, r1
    19a8:	b1 1d       	adc	r27, r1
    19aa:	20 93 c7 06 	sts	0x06C7, r18	; 0x8006c7 <timer0_fract>
    19ae:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <timer0_millis>
    19b2:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <timer0_millis+0x1>
    19b6:	a0 93 ca 06 	sts	0x06CA, r26	; 0x8006ca <timer0_millis+0x2>
    19ba:	b0 93 cb 06 	sts	0x06CB, r27	; 0x8006cb <timer0_millis+0x3>
    19be:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <timer0_overflow_count>
    19c2:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <timer0_overflow_count+0x1>
    19c6:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <timer0_overflow_count+0x2>
    19ca:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <timer0_overflow_count+0x3>
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	a1 1d       	adc	r26, r1
    19d2:	b1 1d       	adc	r27, r1
    19d4:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <timer0_overflow_count>
    19d8:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <timer0_overflow_count+0x1>
    19dc:	a0 93 ce 06 	sts	0x06CE, r26	; 0x8006ce <timer0_overflow_count+0x2>
    19e0:	b0 93 cf 06 	sts	0x06CF, r27	; 0x8006cf <timer0_overflow_count+0x3>
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <millis>:
    19fa:	2f b7       	in	r18, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	60 91 c8 06 	lds	r22, 0x06C8	; 0x8006c8 <timer0_millis>
    1a02:	70 91 c9 06 	lds	r23, 0x06C9	; 0x8006c9 <timer0_millis+0x1>
    1a06:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <timer0_millis+0x2>
    1a0a:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <timer0_millis+0x3>
    1a0e:	2f bf       	out	0x3f, r18	; 63
    1a10:	08 95       	ret

00001a12 <micros>:
    1a12:	3f b7       	in	r19, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <timer0_overflow_count>
    1a1a:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <timer0_overflow_count+0x1>
    1a1e:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <timer0_overflow_count+0x2>
    1a22:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <timer0_overflow_count+0x3>
    1a26:	26 b5       	in	r18, 0x26	; 38
    1a28:	a8 9b       	sbis	0x15, 0	; 21
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <micros+0x24>
    1a2c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a2e:	19 f0       	breq	.+6      	; 0x1a36 <micros+0x24>
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	a1 1d       	adc	r26, r1
    1a34:	b1 1d       	adc	r27, r1
    1a36:	3f bf       	out	0x3f, r19	; 63
    1a38:	ba 2f       	mov	r27, r26
    1a3a:	a9 2f       	mov	r26, r25
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	88 27       	eor	r24, r24
    1a40:	82 0f       	add	r24, r18
    1a42:	91 1d       	adc	r25, r1
    1a44:	a1 1d       	adc	r26, r1
    1a46:	b1 1d       	adc	r27, r1
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	42 e0       	ldi	r20, 0x02	; 2
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	4a 95       	dec	r20
    1a58:	d1 f7       	brne	.-12     	; 0x1a4e <micros+0x3c>
    1a5a:	08 95       	ret

00001a5c <delay>:
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	6b 01       	movw	r12, r22
    1a6e:	7c 01       	movw	r14, r24
    1a70:	d0 df       	rcall	.-96     	; 0x1a12 <micros>
    1a72:	4b 01       	movw	r8, r22
    1a74:	5c 01       	movw	r10, r24
    1a76:	c1 14       	cp	r12, r1
    1a78:	d1 04       	cpc	r13, r1
    1a7a:	e1 04       	cpc	r14, r1
    1a7c:	f1 04       	cpc	r15, r1
    1a7e:	f9 f0       	breq	.+62     	; 0x1abe <delay+0x62>
    1a80:	0e 94 a5 18 	call	0x314a	; 0x314a <yield>
    1a84:	c6 df       	rcall	.-116    	; 0x1a12 <micros>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	88 19       	sub	r24, r8
    1a8c:	99 09       	sbc	r25, r9
    1a8e:	aa 09       	sbc	r26, r10
    1a90:	bb 09       	sbc	r27, r11
    1a92:	88 3e       	cpi	r24, 0xE8	; 232
    1a94:	93 40       	sbci	r25, 0x03	; 3
    1a96:	a1 05       	cpc	r26, r1
    1a98:	b1 05       	cpc	r27, r1
    1a9a:	68 f3       	brcs	.-38     	; 0x1a76 <delay+0x1a>
    1a9c:	21 e0       	ldi	r18, 0x01	; 1
    1a9e:	c2 1a       	sub	r12, r18
    1aa0:	d1 08       	sbc	r13, r1
    1aa2:	e1 08       	sbc	r14, r1
    1aa4:	f1 08       	sbc	r15, r1
    1aa6:	88 ee       	ldi	r24, 0xE8	; 232
    1aa8:	88 0e       	add	r8, r24
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	98 1e       	adc	r9, r24
    1aae:	a1 1c       	adc	r10, r1
    1ab0:	b1 1c       	adc	r11, r1
    1ab2:	c1 14       	cp	r12, r1
    1ab4:	d1 04       	cpc	r13, r1
    1ab6:	e1 04       	cpc	r14, r1
    1ab8:	f1 04       	cpc	r15, r1
    1aba:	21 f7       	brne	.-56     	; 0x1a84 <delay+0x28>
    1abc:	dc cf       	rjmp	.-72     	; 0x1a76 <delay+0x1a>
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	08 95       	ret

00001ad0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ad0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1ad2:	84 b5       	in	r24, 0x24	; 36
    1ad4:	82 60       	ori	r24, 0x02	; 2
    1ad6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1ad8:	84 b5       	in	r24, 0x24	; 36
    1ada:	81 60       	ori	r24, 0x01	; 1
    1adc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1ade:	85 b5       	in	r24, 0x25	; 37
    1ae0:	82 60       	ori	r24, 0x02	; 2
    1ae2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1ae4:	85 b5       	in	r24, 0x25	; 37
    1ae6:	81 60       	ori	r24, 0x01	; 1
    1ae8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1aea:	ee e6       	ldi	r30, 0x6E	; 110
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	81 60       	ori	r24, 0x01	; 1
    1af2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1af4:	e1 e8       	ldi	r30, 0x81	; 129
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1afa:	80 81       	ld	r24, Z
    1afc:	82 60       	ori	r24, 0x02	; 2
    1afe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1b06:	e0 e8       	ldi	r30, 0x80	; 128
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	81 60       	ori	r24, 0x01	; 1
    1b0e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1b10:	e1 eb       	ldi	r30, 0xB1	; 177
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	84 60       	ori	r24, 0x04	; 4
    1b18:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1b1a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	81 60       	ori	r24, 0x01	; 1
    1b22:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1b24:	e1 e9       	ldi	r30, 0x91	; 145
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	82 60       	ori	r24, 0x02	; 2
    1b2c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1b2e:	80 81       	ld	r24, Z
    1b30:	81 60       	ori	r24, 0x01	; 1
    1b32:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1b34:	e0 e9       	ldi	r30, 0x90	; 144
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 60       	ori	r24, 0x01	; 1
    1b3c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1b3e:	e1 ea       	ldi	r30, 0xA1	; 161
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	82 60       	ori	r24, 0x02	; 2
    1b46:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 60       	ori	r24, 0x01	; 1
    1b4c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	81 60       	ori	r24, 0x01	; 1
    1b56:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1b58:	e1 e2       	ldi	r30, 0x21	; 33
    1b5a:	f1 e0       	ldi	r31, 0x01	; 1
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1b62:	80 81       	ld	r24, Z
    1b64:	81 60       	ori	r24, 0x01	; 1
    1b66:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1b68:	e0 e2       	ldi	r30, 0x20	; 32
    1b6a:	f1 e0       	ldi	r31, 0x01	; 1
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1b72:	ea e7       	ldi	r30, 0x7A	; 122
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	84 60       	ori	r24, 0x04	; 4
    1b7a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1b7c:	80 81       	ld	r24, Z
    1b7e:	82 60       	ori	r24, 0x02	; 2
    1b80:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1b82:	80 81       	ld	r24, Z
    1b84:	81 60       	ori	r24, 0x01	; 1
    1b86:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 68       	ori	r24, 0x80	; 128
    1b8c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1b8e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1b92:	08 95       	ret

00001b94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	fc 01       	movw	r30, r24
    1b98:	31 97       	sbiw	r30, 0x01	; 1
    1b9a:	e2 31       	cpi	r30, 0x12	; 18
    1b9c:	f1 05       	cpc	r31, r1
    1b9e:	08 f0       	brcs	.+2      	; 0x1ba2 <turnOffPWM+0xe>
    1ba0:	4e c0       	rjmp	.+156    	; 0x1c3e <turnOffPWM+0xaa>
    1ba2:	88 27       	eor	r24, r24
    1ba4:	ee 58       	subi	r30, 0x8E	; 142
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1bae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1bb6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bba:	8f 7d       	andi	r24, 0xDF	; 223
    1bbc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bc0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1bc2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bc6:	87 7f       	andi	r24, 0xF7	; 247
    1bc8:	f9 cf       	rjmp	.-14     	; 0x1bbc <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1bca:	84 b5       	in	r24, 0x24	; 36
    1bcc:	8f 77       	andi	r24, 0x7F	; 127
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1bd0:	84 b5       	in	r24, 0x24	; 36
    1bd2:	8f 7d       	andi	r24, 0xDF	; 223
    1bd4:	84 bd       	out	0x24, r24	; 36
    1bd6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1bd8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1bdc:	8f 77       	andi	r24, 0x7F	; 127
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1be0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1be4:	8f 7d       	andi	r24, 0xDF	; 223
    1be6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1bea:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1bec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1bf0:	8f 77       	andi	r24, 0x7F	; 127
    1bf2:	07 c0       	rjmp	.+14     	; 0x1c02 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1bf4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1bf8:	8f 7d       	andi	r24, 0xDF	; 223
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1bfc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1c00:	87 7f       	andi	r24, 0xF7	; 247
    1c02:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1c06:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1c08:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c0c:	8f 77       	andi	r24, 0x7F	; 127
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1c10:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c14:	8f 7d       	andi	r24, 0xDF	; 223
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1c18:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c1c:	87 7f       	andi	r24, 0xF7	; 247
    1c1e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c22:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1c24:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1c28:	8f 77       	andi	r24, 0x7F	; 127
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1c2c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1c30:	8f 7d       	andi	r24, 0xDF	; 223
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1c34:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1c38:	87 7f       	andi	r24, 0xF7	; 247
    1c3a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1c3e:	08 95       	ret

00001c40 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	fc 01       	movw	r30, r24
    1c48:	e6 5a       	subi	r30, 0xA6	; 166
    1c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e0 56       	subi	r30, 0x60	; 96
    1c52:	fe 4f       	sbci	r31, 0xFE	; 254
    1c54:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1c56:	88 23       	and	r24, r24
    1c58:	61 f1       	breq	.+88     	; 0x1cb2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	fc 01       	movw	r30, r24
    1c62:	e6 5e       	subi	r30, 0xE6	; 230
    1c64:	fd 4f       	sbci	r31, 0xFD	; 253
    1c66:	c5 91       	lpm	r28, Z+
    1c68:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	e0 50       	subi	r30, 0x00	; 0
    1c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c70:	a5 91       	lpm	r26, Z+
    1c72:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1c74:	61 11       	cpse	r22, r1
    1c76:	09 c0       	rjmp	.+18     	; 0x1c8a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1c78:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c7a:	f8 94       	cli
		*reg &= ~bit;
    1c7c:	88 81       	ld	r24, Y
    1c7e:	20 95       	com	r18
    1c80:	82 23       	and	r24, r18
    1c82:	88 83       	st	Y, r24
		*out &= ~bit;
    1c84:	ec 91       	ld	r30, X
    1c86:	2e 23       	and	r18, r30
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1c8a:	62 30       	cpi	r22, 0x02	; 2
    1c8c:	61 f4       	brne	.+24     	; 0x1ca6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1c8e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c90:	f8 94       	cli
		*reg &= ~bit;
    1c92:	88 81       	ld	r24, Y
    1c94:	32 2f       	mov	r19, r18
    1c96:	30 95       	com	r19
    1c98:	83 23       	and	r24, r19
    1c9a:	88 83       	st	Y, r24
		*out |= bit;
    1c9c:	ec 91       	ld	r30, X
    1c9e:	2e 2b       	or	r18, r30
    1ca0:	2c 93       	st	X, r18
		SREG = oldSREG;
    1ca2:	9f bf       	out	0x3f, r25	; 63
    1ca4:	06 c0       	rjmp	.+12     	; 0x1cb2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1ca6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1ca8:	f8 94       	cli
		*reg |= bit;
    1caa:	e8 81       	ld	r30, Y
    1cac:	2e 2b       	or	r18, r30
    1cae:	28 83       	st	Y, r18
		SREG = oldSREG;
    1cb0:	8f bf       	out	0x3f, r24	; 63
	}
}
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	f9 01       	movw	r30, r18
    1cc4:	ec 5e       	subi	r30, 0xEC	; 236
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1cca:	f9 01       	movw	r30, r18
    1ccc:	e6 5a       	subi	r30, 0xA6	; 166
    1cce:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	e0 56       	subi	r30, 0x60	; 96
    1cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1cda:	cc 23       	and	r28, r28
    1cdc:	b9 f0       	breq	.+46     	; 0x1d0c <digitalWrite+0x54>
    1cde:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	58 df       	rcall	.-336    	; 0x1b94 <turnOffPWM>

	out = portOutputRegister(port);
    1ce4:	ec 2f       	mov	r30, r28
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	e0 50       	subi	r30, 0x00	; 0
    1cee:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf0:	a5 91       	lpm	r26, Z+
    1cf2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1cf4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1cf6:	f8 94       	cli

	if (val == LOW) {
    1cf8:	11 11       	cpse	r17, r1
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <digitalWrite+0x4c>
		*out &= ~bit;
    1cfc:	8c 91       	ld	r24, X
    1cfe:	d0 95       	com	r29
    1d00:	d8 23       	and	r29, r24
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1d04:	ec 91       	ld	r30, X
    1d06:	de 2b       	or	r29, r30
    1d08:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1d0a:	9f bf       	out	0x3f, r25	; 63
}
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	08 95       	ret

00001d14 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	ec 5e       	subi	r30, 0xEC	; 236
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1d24:	f9 01       	movw	r30, r18
    1d26:	e6 5a       	subi	r30, 0xA6	; 166
    1d28:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	e0 56       	subi	r30, 0x60	; 96
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1d34:	cc 23       	and	r28, r28
    1d36:	89 f0       	breq	.+34     	; 0x1d5a <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1d38:	81 11       	cpse	r24, r1
    1d3a:	2c df       	rcall	.-424    	; 0x1b94 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1d3c:	ec 2f       	mov	r30, r28
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	ee 0f       	add	r30, r30
    1d42:	ff 1f       	adc	r31, r31
    1d44:	ea 51       	subi	r30, 0x1A	; 26
    1d46:	fe 4f       	sbci	r31, 0xFE	; 254
    1d48:	a5 91       	lpm	r26, Z+
    1d4a:	b4 91       	lpm	r27, Z
    1d4c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1d4e:	ed 23       	and	r30, r29
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <digitalRead+0x4a>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <digitalRead+0x4a>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    1d64:	fc 01       	movw	r30, r24
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <free>

00001d6e <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    1d74:	88 81       	ld	r24, Y
    1d76:	99 81       	ldd	r25, Y+1	; 0x01
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <_ZN6String10invalidateEv+0x12>
    1d7c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <free>
	buffer = NULL;
    1d80:	19 82       	std	Y+1, r1	; 0x01
    1d82:	18 82       	st	Y, r1
	capacity = len = 0;
    1d84:	1d 82       	std	Y+5, r1	; 0x05
    1d86:	1c 82       	std	Y+4, r1	; 0x04
    1d88:	1b 82       	std	Y+3, r1	; 0x03
    1d8a:	1a 82       	std	Y+2, r1	; 0x02
}
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	ec 01       	movw	r28, r24
    1d9c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	88 81       	ld	r24, Y
    1da4:	99 81       	ldd	r25, Y+1	; 0x01
    1da6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <realloc>
	if (newbuffer) {
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	31 f0       	breq	.+12     	; 0x1dba <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    1dae:	99 83       	std	Y+1, r25	; 0x01
    1db0:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1db2:	1b 83       	std	Y+3, r17	; 0x03
    1db4:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    1dba:	80 e0       	ldi	r24, 0x00	; 0
}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    1dcc:	88 81       	ld	r24, Y
    1dce:	99 81       	ldd	r25, Y+1	; 0x01
    1dd0:	89 2b       	or	r24, r25
    1dd2:	29 f0       	breq	.+10     	; 0x1dde <_ZN6String7reserveEj+0x18>
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	86 17       	cp	r24, r22
    1dda:	97 07       	cpc	r25, r23
    1ddc:	58 f4       	brcc	.+22     	; 0x1df4 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    1dde:	ce 01       	movw	r24, r28
    1de0:	d8 df       	rcall	.-80     	; 0x1d92 <_ZN6String12changeBufferEj>
    1de2:	88 23       	and	r24, r24
    1de4:	41 f0       	breq	.+16     	; 0x1df6 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	89 2b       	or	r24, r25
    1dec:	19 f4       	brne	.+6      	; 0x1df4 <_ZN6String7reserveEj+0x2e>
    1dee:	e8 81       	ld	r30, Y
    1df0:	f9 81       	ldd	r31, Y+1	; 0x01
    1df2:	10 82       	st	Z, r1
    1df4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	ec 01       	movw	r28, r24
    1e0a:	7b 01       	movw	r14, r22
    1e0c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    1e0e:	ba 01       	movw	r22, r20
    1e10:	da df       	rcall	.-76     	; 0x1dc6 <_ZN6String7reserveEj>
    1e12:	81 11       	cpse	r24, r1
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <_ZN6String4copyEPKcj+0x20>
		invalidate();
    1e16:	ce 01       	movw	r24, r28
    1e18:	aa df       	rcall	.-172    	; 0x1d6e <_ZN6String10invalidateEv>
		return *this;
    1e1a:	07 c0       	rjmp	.+14     	; 0x1e2a <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    1e1c:	1d 83       	std	Y+5, r17	; 0x05
    1e1e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1e20:	b7 01       	movw	r22, r14
    1e22:	88 81       	ld	r24, Y
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <strcpy>
	return *this;
}
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	08 95       	ret

00001e3a <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	11 82       	std	Z+1, r1	; 0x01
    1e3e:	10 82       	st	Z, r1
	capacity = 0;
    1e40:	13 82       	std	Z+3, r1	; 0x03
    1e42:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1e44:	15 82       	std	Z+5, r1	; 0x05
    1e46:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1e48:	61 15       	cp	r22, r1
    1e4a:	71 05       	cpc	r23, r1
    1e4c:	49 f0       	breq	.+18     	; 0x1e60 <_ZN6StringC1EPKc+0x26>
    1e4e:	fb 01       	movw	r30, r22
    1e50:	01 90       	ld	r0, Z+
    1e52:	00 20       	and	r0, r0
    1e54:	e9 f7       	brne	.-6      	; 0x1e50 <_ZN6StringC1EPKc+0x16>
    1e56:	31 97       	sbiw	r30, 0x01	; 1
    1e58:	af 01       	movw	r20, r30
    1e5a:	46 1b       	sub	r20, r22
    1e5c:	57 0b       	sbc	r21, r23
    1e5e:	ce cf       	rjmp	.-100    	; 0x1dfc <_ZN6String4copyEPKcj>
    1e60:	08 95       	ret

00001e62 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	1f 92       	push	r1
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	69 83       	std	Y+1, r22	; 0x01
    1e6e:	dc 01       	movw	r26, r24
    1e70:	ed 91       	ld	r30, X+
    1e72:	fc 91       	ld	r31, X
    1e74:	02 80       	ldd	r0, Z+2	; 0x02
    1e76:	f3 81       	ldd	r31, Z+3	; 0x03
    1e78:	e0 2d       	mov	r30, r0
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	be 01       	movw	r22, r28
    1e80:	6f 5f       	subi	r22, 0xFF	; 255
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	19 95       	eicall
    1e86:	0f 90       	pop	r0
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <_ZN5SDLib4File5writeEPKhj>:
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	ec 01       	movw	r28, r24
    1e94:	89 8d       	ldd	r24, Y+25	; 0x19
    1e96:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	39 f4       	brne	.+14     	; 0x1eaa <_ZN5SDLib4File5writeEPKhj+0x1c>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9b 83       	std	Y+3, r25	; 0x03
    1ea2:	8a 83       	std	Y+2, r24	; 0x02
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0a c0       	rjmp	.+20     	; 0x1ebe <_ZN5SDLib4File5writeEPKhj+0x30>
    1eaa:	fc 01       	movw	r30, r24
    1eac:	13 82       	std	Z+3, r1	; 0x03
    1eae:	12 82       	std	Z+2, r1	; 0x02
    1eb0:	c7 d4       	rcall	.+2446   	; 0x2840 <_ZN6SdFile5writeEPKvj>
    1eb2:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eb4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eb6:	22 81       	ldd	r18, Z+2	; 0x02
    1eb8:	33 81       	ldd	r19, Z+3	; 0x03
    1eba:	23 2b       	or	r18, r19
    1ebc:	79 f7       	brne	.-34     	; 0x1e9c <_ZN5SDLib4File5writeEPKhj+0xe>
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <_ZN5SDLib4File5flushEv>:
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	81 8d       	ldd	r24, Z+25	; 0x19
    1ec8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <_ZN5SDLib4File5flushEv+0xc>
    1ece:	73 c4       	rjmp	.+2278   	; 0x27b6 <_ZN6SdFile4syncEv>
    1ed0:	08 95       	ret

00001ed2 <_ZN6SdFile4readEv>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	1f 92       	push	r1
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	be 01       	movw	r22, r28
    1ee2:	6f 5f       	subi	r22, 0xFF	; 255
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	cf d2       	rcall	.+1438   	; 0x2486 <_ZN6SdFile4readEPvj>
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	19 f4       	brne	.+6      	; 0x1ef2 <_ZN6SdFile4readEv+0x20>
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <_ZN6SdFile4readEv+0x24>
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	9f ef       	ldi	r25, 0xFF	; 255
    1ef6:	0f 90       	pop	r0
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	08 95       	ret

00001efe <_ZN5SDLib4File4readEv>:
    1efe:	fc 01       	movw	r30, r24
    1f00:	81 8d       	ldd	r24, Z+25	; 0x19
    1f02:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <_ZN5SDLib4File4readEv+0xc>
    1f08:	e4 cf       	rjmp	.-56     	; 0x1ed2 <_ZN6SdFile4readEv>
    1f0a:	8f ef       	ldi	r24, 0xFF	; 255
    1f0c:	9f ef       	ldi	r25, 0xFF	; 255
    1f0e:	08 95       	ret

00001f10 <_ZN5SDLib4File4peekEv>:
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	fc 01       	movw	r30, r24
    1f1a:	81 8d       	ldd	r24, Z+25	; 0x19
    1f1c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	a9 f0       	breq	.+42     	; 0x1f4c <_ZN5SDLib4File4peekEv+0x3c>
    1f22:	ef 01       	movw	r28, r30
    1f24:	d6 df       	rcall	.-84     	; 0x1ed2 <_ZN6SdFile4readEv>
    1f26:	8c 01       	movw	r16, r24
    1f28:	0f 3f       	cpi	r16, 0xFF	; 255
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	18 07       	cpc	r17, r24
    1f2e:	89 f0       	breq	.+34     	; 0x1f52 <_ZN5SDLib4File4peekEv+0x42>
    1f30:	89 8d       	ldd	r24, Y+25	; 0x19
    1f32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f34:	fc 01       	movw	r30, r24
    1f36:	42 85       	ldd	r20, Z+10	; 0x0a
    1f38:	53 85       	ldd	r21, Z+11	; 0x0b
    1f3a:	64 85       	ldd	r22, Z+12	; 0x0c
    1f3c:	75 85       	ldd	r23, Z+13	; 0x0d
    1f3e:	41 50       	subi	r20, 0x01	; 1
    1f40:	51 09       	sbc	r21, r1
    1f42:	61 09       	sbc	r22, r1
    1f44:	71 09       	sbc	r23, r1
    1f46:	a1 d3       	rcall	.+1858   	; 0x268a <_ZN6SdFile7seekSetEm>
    1f48:	c8 01       	movw	r24, r16
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <_ZN5SDLib4File4peekEv+0x46>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <_ZN5SDLib4File4peekEv+0x46>
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	9f ef       	ldi	r25, 0xFF	; 255
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <_ZN5SDLib4FileC1Ev>:
    1f60:	fc 01       	movw	r30, r24
    1f62:	13 82       	std	Z+3, r1	; 0x03
    1f64:	12 82       	std	Z+2, r1	; 0x02
    1f66:	88 ee       	ldi	r24, 0xE8	; 232
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	84 83       	std	Z+4, r24	; 0x04
    1f70:	95 83       	std	Z+5, r25	; 0x05
    1f72:	a6 83       	std	Z+6, r26	; 0x06
    1f74:	b7 83       	std	Z+7, r27	; 0x07
    1f76:	85 e4       	ldi	r24, 0x45	; 69
    1f78:	94 e0       	ldi	r25, 0x04	; 4
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	12 8e       	std	Z+26, r1	; 0x1a
    1f80:	11 8e       	std	Z+25, r1	; 0x19
    1f82:	14 86       	std	Z+12, r1	; 0x0c
    1f84:	08 95       	ret

00001f86 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    1f86:	dc 01       	movw	r26, r24
    1f88:	59 96       	adiw	r26, 0x19	; 25
    1f8a:	ed 91       	ld	r30, X+
    1f8c:	fc 91       	ld	r31, X
    1f8e:	5a 97       	sbiw	r26, 0x1a	; 26
    1f90:	30 97       	sbiw	r30, 0x00	; 0
    1f92:	29 f0       	breq	.+10     	; 0x1f9e <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    1f94:	62 85       	ldd	r22, Z+10	; 0x0a
    1f96:	73 85       	ldd	r23, Z+11	; 0x0b
    1f98:	84 85       	ldd	r24, Z+12	; 0x0c
    1f9a:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    1f9c:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1f9e:	6f ef       	ldi	r22, 0xFF	; 255
    1fa0:	7f ef       	ldi	r23, 0xFF	; 255
    1fa2:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    1fa4:	08 95       	ret

00001fa6 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	59 96       	adiw	r26, 0x19	; 25
    1faa:	ed 91       	ld	r30, X+
    1fac:	fc 91       	ld	r31, X
    1fae:	5a 97       	sbiw	r26, 0x1a	; 26
    1fb0:	30 97       	sbiw	r30, 0x00	; 0
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    1fb4:	63 89       	ldd	r22, Z+19	; 0x13
    1fb6:	74 89       	ldd	r23, Z+20	; 0x14
    1fb8:	85 89       	ldd	r24, Z+21	; 0x15
    1fba:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    1fbc:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    1fc4:	08 95       	ret

00001fc6 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
  if (! _file) return 0;
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	21 8d       	ldd	r18, Z+25	; 0x19
    1fd6:	32 8d       	ldd	r19, Z+26	; 0x1a
    1fd8:	23 2b       	or	r18, r19
    1fda:	c9 f0       	breq	.+50     	; 0x200e <_ZN5SDLib4File9availableEv+0x48>
    1fdc:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    1fde:	e3 df       	rcall	.-58     	; 0x1fa6 <_ZN5SDLib4File4sizeEv>
    1fe0:	6b 01       	movw	r12, r22
    1fe2:	7c 01       	movw	r14, r24
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	cf df       	rcall	.-98     	; 0x1f86 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1fe8:	a7 01       	movw	r20, r14
    1fea:	96 01       	movw	r18, r12
    1fec:	26 1b       	sub	r18, r22
    1fee:	37 0b       	sbc	r19, r23
    1ff0:	48 0b       	sbc	r20, r24
    1ff2:	59 0b       	sbc	r21, r25
    1ff4:	da 01       	movw	r26, r20
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	81 15       	cp	r24, r1
    1ffa:	30 e8       	ldi	r19, 0x80	; 128
    1ffc:	93 07       	cpc	r25, r19
    1ffe:	a1 05       	cpc	r26, r1
    2000:	b1 05       	cpc	r27, r1
    2002:	38 f0       	brcs	.+14     	; 0x2012 <_ZN5SDLib4File9availableEv+0x4c>
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	9f e7       	ldi	r25, 0x7F	; 127
    2008:	a0 e0       	ldi	r26, 0x00	; 0
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	cf 90       	pop	r12
    201e:	08 95       	ret

00002020 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    2020:	e0 ed       	ldi	r30, 0xD0	; 208
    2022:	f6 e0       	ldi	r31, 0x06	; 6
    2024:	15 82       	std	Z+5, r1	; 0x05
    2026:	16 82       	std	Z+6, r1	; 0x06
    2028:	11 86       	std	Z+9, r1	; 0x09
    202a:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	84 87       	std	Z+12, r24	; 0x0c
    2036:	95 87       	std	Z+13, r25	; 0x0d
    2038:	a6 87       	std	Z+14, r26	; 0x0e
    203a:	b7 87       	std	Z+15, r27	; 0x0f
    203c:	13 a2       	std	Z+35, r1	; 0x23
    203e:	15 a6       	std	Z+45, r1	; 0x2d
    2040:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2042:	87 e5       	ldi	r24, 0x57	; 87
    2044:	94 e0       	ldi	r25, 0x04	; 4
    2046:	93 a7       	std	Z+43, r25	; 0x2b
    2048:	82 a7       	std	Z+42, r24	; 0x2a
    204a:	17 a6       	std	Z+47, r1	; 0x2f
    204c:	08 95       	ret

0000204e <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    204e:	9f b7       	in	r25, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	20 91 27 09 	lds	r18, 0x0927	; 0x800927 <_ZN8SPIClass13interruptModeE>
    2056:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <_ZN8SPIClass13interruptSaveE>
    205a:	21 30       	cpi	r18, 0x01	; 1
    205c:	19 f4       	brne	.+6      	; 0x2064 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    205e:	8d bb       	out	0x1d, r24	; 29
    2060:	9f bf       	out	0x3f, r25	; 63
    2062:	08 95       	ret
    2064:	8f bf       	out	0x3f, r24	; 63
    2066:	08 95       	ret

00002068 <_ZN8SPIClass8transferEh>:
    2068:	8e bd       	out	0x2e, r24	; 46
    206a:	00 00       	nop
    206c:	0d b4       	in	r0, 0x2d	; 45
    206e:	07 fe       	sbrs	r0, 7
    2070:	fd cf       	rjmp	.-6      	; 0x206c <_ZN8SPIClass8transferEh+0x4>
    2072:	8e b5       	in	r24, 0x2e	; 46
    2074:	08 95       	ret

00002076 <_ZL6spiRecv>:
    2076:	8f ef       	ldi	r24, 0xFF	; 255
    2078:	f7 cf       	rjmp	.-18     	; 0x2068 <_ZN8SPIClass8transferEh>

0000207a <_ZN7Sd2Card14chipSelectHighEv>:
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	fc 01       	movw	r30, r24
    207e:	84 81       	ldd	r24, Z+4	; 0x04
    2080:	1b de       	rcall	.-970    	; 0x1cb8 <digitalWrite>
    2082:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <_ZL20chip_select_asserted>
    2086:	88 23       	and	r24, r24
    2088:	31 f0       	breq	.+12     	; 0x2096 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    208a:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <_ZL20chip_select_asserted>
    208e:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <_ZN8SPIClass13interruptModeE>
    2092:	81 11       	cpse	r24, r1
    2094:	dc cf       	rjmp	.-72     	; 0x204e <_ZN8SPIClass14endTransactionEv.part.3>
    2096:	08 95       	ret

00002098 <_ZN7Sd2Card13chipSelectLowEv>:
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	ec 01       	movw	r28, r24
    209e:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <_ZL20chip_select_asserted>
    20a2:	81 11       	cpse	r24, r1
    20a4:	09 c0       	rjmp	.+18     	; 0x20b8 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <_ZL20chip_select_asserted>
    20ac:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_ZL8settings>
    20b0:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <_ZL8settings+0x1>
    20b4:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN8SPIClass16beginTransactionE11SPISettings>
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	fb cd       	rjmp	.-1034   	; 0x1cb8 <digitalWrite>

000020c2 <_ZN7Sd2Card7readEndEv>:
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	ec 01       	movw	r28, r24
    20c8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ca:	88 23       	and	r24, r24
    20cc:	79 f0       	breq	.+30     	; 0x20ec <_ZN7Sd2Card7readEndEv+0x2a>
    20ce:	8f 81       	ldd	r24, Y+7	; 0x07
    20d0:	98 85       	ldd	r25, Y+8	; 0x08
    20d2:	9c 01       	movw	r18, r24
    20d4:	2f 5f       	subi	r18, 0xFF	; 255
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	38 87       	std	Y+8, r19	; 0x08
    20da:	2f 83       	std	Y+7, r18	; 0x07
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	92 40       	sbci	r25, 0x02	; 2
    20e0:	10 f4       	brcc	.+4      	; 0x20e6 <_ZN7Sd2Card7readEndEv+0x24>
    20e2:	c9 df       	rcall	.-110    	; 0x2076 <_ZL6spiRecv>
    20e4:	f4 cf       	rjmp	.-24     	; 0x20ce <_ZN7Sd2Card7readEndEv+0xc>
    20e6:	ce 01       	movw	r24, r28
    20e8:	c8 df       	rcall	.-112    	; 0x207a <_ZN7Sd2Card14chipSelectHighEv>
    20ea:	1e 82       	std	Y+6, r1	; 0x06
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <_ZN7Sd2Card11waitNotBusyEj>:
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	eb 01       	movw	r28, r22
    20fc:	7e dc       	rcall	.-1796   	; 0x19fa <millis>
    20fe:	8b 01       	movw	r16, r22
    2100:	ba df       	rcall	.-140    	; 0x2076 <_ZL6spiRecv>
    2102:	8f 3f       	cpi	r24, 0xFF	; 255
    2104:	41 f0       	breq	.+16     	; 0x2116 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    2106:	79 dc       	rcall	.-1806   	; 0x19fa <millis>
    2108:	60 1b       	sub	r22, r16
    210a:	71 0b       	sbc	r23, r17
    210c:	6c 17       	cp	r22, r28
    210e:	7d 07       	cpc	r23, r29
    2110:	b8 f3       	brcs	.-18     	; 0x2100 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <_ZN7Sd2Card11cardCommandEhm>:
    2122:	8f 92       	push	r8
    2124:	9f 92       	push	r9
    2126:	af 92       	push	r10
    2128:	bf 92       	push	r11
    212a:	ff 92       	push	r15
    212c:	0f 93       	push	r16
    212e:	1f 93       	push	r17
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
    2136:	f6 2e       	mov	r15, r22
    2138:	49 01       	movw	r8, r18
    213a:	5a 01       	movw	r10, r20
    213c:	c2 df       	rcall	.-124    	; 0x20c2 <_ZN7Sd2Card7readEndEv>
    213e:	ce 01       	movw	r24, r28
    2140:	ab df       	rcall	.-170    	; 0x2098 <_ZN7Sd2Card13chipSelectLowEv>
    2142:	6c e2       	ldi	r22, 0x2C	; 44
    2144:	71 e0       	ldi	r23, 0x01	; 1
    2146:	ce 01       	movw	r24, r28
    2148:	d4 df       	rcall	.-88     	; 0x20f2 <_ZN7Sd2Card11waitNotBusyEj>
    214a:	8f 2d       	mov	r24, r15
    214c:	80 64       	ori	r24, 0x40	; 64
    214e:	8c df       	rcall	.-232    	; 0x2068 <_ZN8SPIClass8transferEh>
    2150:	08 e1       	ldi	r16, 0x18	; 24
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	d5 01       	movw	r26, r10
    2156:	c4 01       	movw	r24, r8
    2158:	00 2e       	mov	r0, r16
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <_ZN7Sd2Card11cardCommandEhm+0x42>
    215c:	b6 95       	lsr	r27
    215e:	a7 95       	ror	r26
    2160:	97 95       	ror	r25
    2162:	87 95       	ror	r24
    2164:	0a 94       	dec	r0
    2166:	d2 f7       	brpl	.-12     	; 0x215c <_ZN7Sd2Card11cardCommandEhm+0x3a>
    2168:	7f df       	rcall	.-258    	; 0x2068 <_ZN8SPIClass8transferEh>
    216a:	08 50       	subi	r16, 0x08	; 8
    216c:	11 09       	sbc	r17, r1
    216e:	08 3f       	cpi	r16, 0xF8	; 248
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	18 07       	cpc	r17, r24
    2174:	79 f7       	brne	.-34     	; 0x2154 <_ZN7Sd2Card11cardCommandEhm+0x32>
    2176:	ff 20       	and	r15, r15
    2178:	29 f0       	breq	.+10     	; 0x2184 <_ZN7Sd2Card11cardCommandEhm+0x62>
    217a:	88 e0       	ldi	r24, 0x08	; 8
    217c:	f8 12       	cpse	r15, r24
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <_ZN7Sd2Card11cardCommandEhm+0x66>
    2180:	87 e8       	ldi	r24, 0x87	; 135
    2182:	03 c0       	rjmp	.+6      	; 0x218a <_ZN7Sd2Card11cardCommandEhm+0x68>
    2184:	85 e9       	ldi	r24, 0x95	; 149
    2186:	01 c0       	rjmp	.+2      	; 0x218a <_ZN7Sd2Card11cardCommandEhm+0x68>
    2188:	8f ef       	ldi	r24, 0xFF	; 255
    218a:	6e df       	rcall	.-292    	; 0x2068 <_ZN8SPIClass8transferEh>
    218c:	10 e0       	ldi	r17, 0x00	; 0
    218e:	73 df       	rcall	.-282    	; 0x2076 <_ZL6spiRecv>
    2190:	8a 87       	std	Y+10, r24	; 0x0a
    2192:	87 ff       	sbrs	r24, 7
    2194:	04 c0       	rjmp	.+8      	; 0x219e <_ZN7Sd2Card11cardCommandEhm+0x7c>
    2196:	1f 3f       	cpi	r17, 0xFF	; 255
    2198:	11 f0       	breq	.+4      	; 0x219e <_ZN7Sd2Card11cardCommandEhm+0x7c>
    219a:	1f 5f       	subi	r17, 0xFF	; 255
    219c:	f8 cf       	rjmp	.-16     	; 0x218e <_ZN7Sd2Card11cardCommandEhm+0x6c>
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	bf 90       	pop	r11
    21aa:	af 90       	pop	r10
    21ac:	9f 90       	pop	r9
    21ae:	8f 90       	pop	r8
    21b0:	08 95       	ret

000021b2 <_ZN7Sd2Card14waitStartBlockEv>:
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	ec 01       	movw	r28, r24
    21bc:	1e dc       	rcall	.-1988   	; 0x19fa <millis>
    21be:	8b 01       	movw	r16, r22
    21c0:	5a df       	rcall	.-332    	; 0x2076 <_ZL6spiRecv>
    21c2:	8a 87       	std	Y+10, r24	; 0x0a
    21c4:	8f 3f       	cpi	r24, 0xFF	; 255
    21c6:	41 f4       	brne	.+16     	; 0x21d8 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    21c8:	18 dc       	rcall	.-2000   	; 0x19fa <millis>
    21ca:	60 1b       	sub	r22, r16
    21cc:	71 0b       	sbc	r23, r17
    21ce:	6d 32       	cpi	r22, 0x2D	; 45
    21d0:	71 40       	sbci	r23, 0x01	; 1
    21d2:	b0 f3       	brcs	.-20     	; 0x21c0 <_ZN7Sd2Card14waitStartBlockEv+0xe>
    21d4:	8f e0       	ldi	r24, 0x0F	; 15
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    21d8:	8e 3f       	cpi	r24, 0xFE	; 254
    21da:	31 f0       	breq	.+12     	; 0x21e8 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    21dc:	8d e0       	ldi	r24, 0x0D	; 13
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	ce 01       	movw	r24, r28
    21e2:	4b df       	rcall	.-362    	; 0x207a <_ZN7Sd2Card14chipSelectHighEv>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <_ZN7Sd2Card14waitStartBlockEv+0x38>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	08 95       	ret

000021f4 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    21f4:	cf 92       	push	r12
    21f6:	df 92       	push	r13
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	ec 01       	movw	r28, r24
    2206:	69 01       	movw	r12, r18
    2208:	c8 01       	movw	r24, r16
    220a:	82 0f       	add	r24, r18
    220c:	93 1f       	adc	r25, r19
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	92 40       	sbci	r25, 0x02	; 2
    2212:	08 f0       	brcs	.+2      	; 0x2216 <__stack+0x17>
    2214:	57 c0       	rjmp	.+174    	; 0x22c4 <__stack+0xc5>
    2216:	8e 81       	ldd	r24, Y+6	; 0x06
    2218:	88 23       	and	r24, r24
    221a:	71 f0       	breq	.+28     	; 0x2238 <__stack+0x39>
    221c:	88 81       	ld	r24, Y
    221e:	99 81       	ldd	r25, Y+1	; 0x01
    2220:	aa 81       	ldd	r26, Y+2	; 0x02
    2222:	bb 81       	ldd	r27, Y+3	; 0x03
    2224:	84 17       	cp	r24, r20
    2226:	95 07       	cpc	r25, r21
    2228:	a6 07       	cpc	r26, r22
    222a:	b7 07       	cpc	r27, r23
    222c:	29 f4       	brne	.+10     	; 0x2238 <__stack+0x39>
    222e:	8f 81       	ldd	r24, Y+7	; 0x07
    2230:	98 85       	ldd	r25, Y+8	; 0x08
    2232:	c8 16       	cp	r12, r24
    2234:	d9 06       	cpc	r13, r25
    2236:	00 f5       	brcc	.+64     	; 0x2278 <__stack+0x79>
    2238:	48 83       	st	Y, r20
    223a:	59 83       	std	Y+1, r21	; 0x01
    223c:	6a 83       	std	Y+2, r22	; 0x02
    223e:	7b 83       	std	Y+3, r23	; 0x03
    2240:	8b 85       	ldd	r24, Y+11	; 0x0b
    2242:	83 30       	cpi	r24, 0x03	; 3
    2244:	39 f0       	breq	.+14     	; 0x2254 <__stack+0x55>
    2246:	89 e0       	ldi	r24, 0x09	; 9
    2248:	44 0f       	add	r20, r20
    224a:	55 1f       	adc	r21, r21
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	8a 95       	dec	r24
    2252:	d1 f7       	brne	.-12     	; 0x2248 <__stack+0x49>
    2254:	9a 01       	movw	r18, r20
    2256:	ab 01       	movw	r20, r22
    2258:	61 e1       	ldi	r22, 0x11	; 17
    225a:	ce 01       	movw	r24, r28
    225c:	62 df       	rcall	.-316    	; 0x2122 <_ZN7Sd2Card11cardCommandEhm>
    225e:	88 23       	and	r24, r24
    2260:	19 f0       	breq	.+6      	; 0x2268 <__stack+0x69>
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	2e c0       	rjmp	.+92     	; 0x22c4 <__stack+0xc5>
    2268:	ce 01       	movw	r24, r28
    226a:	a3 df       	rcall	.-186    	; 0x21b2 <_ZN7Sd2Card14waitStartBlockEv>
    226c:	88 23       	and	r24, r24
    226e:	51 f1       	breq	.+84     	; 0x22c4 <__stack+0xc5>
    2270:	18 86       	std	Y+8, r1	; 0x08
    2272:	1f 82       	std	Y+7, r1	; 0x07
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	8e 83       	std	Y+6, r24	; 0x06
    2278:	8f 81       	ldd	r24, Y+7	; 0x07
    227a:	98 85       	ldd	r25, Y+8	; 0x08
    227c:	8c 15       	cp	r24, r12
    227e:	9d 05       	cpc	r25, r13
    2280:	38 f4       	brcc	.+14     	; 0x2290 <__stack+0x91>
    2282:	f9 de       	rcall	.-526    	; 0x2076 <_ZL6spiRecv>
    2284:	8f 81       	ldd	r24, Y+7	; 0x07
    2286:	98 85       	ldd	r25, Y+8	; 0x08
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	98 87       	std	Y+8, r25	; 0x08
    228c:	8f 83       	std	Y+7, r24	; 0x07
    228e:	f4 cf       	rjmp	.-24     	; 0x2278 <__stack+0x79>
    2290:	67 01       	movw	r12, r14
    2292:	e0 0e       	add	r14, r16
    2294:	f1 1e       	adc	r15, r17
    2296:	ce 14       	cp	r12, r14
    2298:	df 04       	cpc	r13, r15
    229a:	29 f0       	breq	.+10     	; 0x22a6 <__stack+0xa7>
    229c:	ec de       	rcall	.-552    	; 0x2076 <_ZL6spiRecv>
    229e:	f6 01       	movw	r30, r12
    22a0:	81 93       	st	Z+, r24
    22a2:	6f 01       	movw	r12, r30
    22a4:	f8 cf       	rjmp	.-16     	; 0x2296 <__stack+0x97>
    22a6:	8f 81       	ldd	r24, Y+7	; 0x07
    22a8:	98 85       	ldd	r25, Y+8	; 0x08
    22aa:	08 0f       	add	r16, r24
    22ac:	19 1f       	adc	r17, r25
    22ae:	18 87       	std	Y+8, r17	; 0x08
    22b0:	0f 83       	std	Y+7, r16	; 0x07
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	88 23       	and	r24, r24
    22b6:	19 f0       	breq	.+6      	; 0x22be <__stack+0xbf>
    22b8:	01 15       	cp	r16, r1
    22ba:	12 40       	sbci	r17, 0x02	; 2
    22bc:	38 f0       	brcs	.+14     	; 0x22cc <__stack+0xcd>
    22be:	ce 01       	movw	r24, r28
    22c0:	00 df       	rcall	.-512    	; 0x20c2 <_ZN7Sd2Card7readEndEv>
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <__stack+0xcd>
    22c4:	ce 01       	movw	r24, r28
    22c6:	d9 de       	rcall	.-590    	; 0x207a <_ZN7Sd2Card14chipSelectHighEv>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <__stack+0xcf>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
    22de:	08 95       	ret

000022e0 <_ZN7Sd2Card8readDataEmjjPh>:
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	01 15       	cp	r16, r1
    22ea:	11 05       	cpc	r17, r1
    22ec:	11 f0       	breq	.+4      	; 0x22f2 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    22ee:	82 df       	rcall	.-252    	; 0x21f4 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    22f0:	01 c0       	rjmp	.+2      	; 0x22f4 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ff 90       	pop	r15
    22fa:	ef 90       	pop	r14
    22fc:	08 95       	ret

000022fe <_ZN7Sd2Card9readBlockEmPh>:
    22fe:	ef 92       	push	r14
    2300:	ff 92       	push	r15
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	79 01       	movw	r14, r18
    2308:	00 e0       	ldi	r16, 0x00	; 0
    230a:	12 e0       	ldi	r17, 0x02	; 2
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	71 df       	rcall	.-286    	; 0x21f4 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ff 90       	pop	r15
    2318:	ef 90       	pop	r14
    231a:	08 95       	ret

0000231c <_ZN7Sd2Card9writeDataEhPKh>:
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	8c 01       	movw	r16, r24
    232a:	86 2f       	mov	r24, r22
    232c:	7a 01       	movw	r14, r20
    232e:	9c de       	rcall	.-712    	; 0x2068 <_ZN8SPIClass8transferEh>
    2330:	e7 01       	movw	r28, r14
    2332:	8e ef       	ldi	r24, 0xFE	; 254
    2334:	f8 1a       	sub	r15, r24
    2336:	89 91       	ld	r24, Y+
    2338:	97 de       	rcall	.-722    	; 0x2068 <_ZN8SPIClass8transferEh>
    233a:	ce 15       	cp	r28, r14
    233c:	df 05       	cpc	r29, r15
    233e:	d9 f7       	brne	.-10     	; 0x2336 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	92 de       	rcall	.-732    	; 0x2068 <_ZN8SPIClass8transferEh>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	90 de       	rcall	.-736    	; 0x2068 <_ZN8SPIClass8transferEh>
    2348:	96 de       	rcall	.-724    	; 0x2076 <_ZL6spiRecv>
    234a:	f8 01       	movw	r30, r16
    234c:	82 87       	std	Z+10, r24	; 0x0a
    234e:	8f 71       	andi	r24, 0x1F	; 31
    2350:	85 30       	cpi	r24, 0x05	; 5
    2352:	31 f0       	breq	.+12     	; 0x2360 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    2354:	81 e1       	ldi	r24, 0x11	; 17
    2356:	85 83       	std	Z+5, r24	; 0x05
    2358:	c8 01       	movw	r24, r16
    235a:	8f de       	rcall	.-738    	; 0x207a <_ZN7Sd2Card14chipSelectHighEv>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	08 95       	ret

00002370 <_ZN7Sd2Card10writeBlockEmPKh>:
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	ec 01       	movw	r28, r24
    237a:	89 01       	movw	r16, r18
    237c:	41 15       	cp	r20, r1
    237e:	51 05       	cpc	r21, r1
    2380:	61 05       	cpc	r22, r1
    2382:	71 05       	cpc	r23, r1
    2384:	11 f4       	brne	.+4      	; 0x238a <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    2386:	82 e1       	ldi	r24, 0x12	; 18
    2388:	2d c0       	rjmp	.+90     	; 0x23e4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    238a:	8b 85       	ldd	r24, Y+11	; 0x0b
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	39 f0       	breq	.+14     	; 0x239e <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    2390:	89 e0       	ldi	r24, 0x09	; 9
    2392:	44 0f       	add	r20, r20
    2394:	55 1f       	adc	r21, r21
    2396:	66 1f       	adc	r22, r22
    2398:	77 1f       	adc	r23, r23
    239a:	8a 95       	dec	r24
    239c:	d1 f7       	brne	.-12     	; 0x2392 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    239e:	9a 01       	movw	r18, r20
    23a0:	ab 01       	movw	r20, r22
    23a2:	68 e1       	ldi	r22, 0x18	; 24
    23a4:	ce 01       	movw	r24, r28
    23a6:	bd de       	rcall	.-646    	; 0x2122 <_ZN7Sd2Card11cardCommandEhm>
    23a8:	88 23       	and	r24, r24
    23aa:	11 f0       	breq	.+4      	; 0x23b0 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    23ac:	84 e0       	ldi	r24, 0x04	; 4
    23ae:	1a c0       	rjmp	.+52     	; 0x23e4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    23b0:	a8 01       	movw	r20, r16
    23b2:	6e ef       	ldi	r22, 0xFE	; 254
    23b4:	ce 01       	movw	r24, r28
    23b6:	b2 df       	rcall	.-156    	; 0x231c <_ZN7Sd2Card9writeDataEhPKh>
    23b8:	88 23       	and	r24, r24
    23ba:	a9 f0       	breq	.+42     	; 0x23e6 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    23bc:	68 e5       	ldi	r22, 0x58	; 88
    23be:	72 e0       	ldi	r23, 0x02	; 2
    23c0:	ce 01       	movw	r24, r28
    23c2:	97 de       	rcall	.-722    	; 0x20f2 <_ZN7Sd2Card11waitNotBusyEj>
    23c4:	81 11       	cpse	r24, r1
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    23c8:	85 e1       	ldi	r24, 0x15	; 21
    23ca:	0c c0       	rjmp	.+24     	; 0x23e4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	a9 01       	movw	r20, r18
    23d2:	6d e0       	ldi	r22, 0x0D	; 13
    23d4:	ce 01       	movw	r24, r28
    23d6:	a5 de       	rcall	.-694    	; 0x2122 <_ZN7Sd2Card11cardCommandEhm>
    23d8:	81 11       	cpse	r24, r1
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    23dc:	4c de       	rcall	.-872    	; 0x2076 <_ZL6spiRecv>
    23de:	88 23       	and	r24, r24
    23e0:	31 f0       	breq	.+12     	; 0x23ee <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    23e2:	84 e1       	ldi	r24, 0x14	; 20
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	ce 01       	movw	r24, r28
    23e8:	48 de       	rcall	.-880    	; 0x207a <_ZN7Sd2Card14chipSelectHighEv>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    23ee:	ce 01       	movw	r24, r28
    23f0:	44 de       	rcall	.-888    	; 0x207a <_ZN7Sd2Card14chipSelectHighEv>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    23fe:	ea e1       	ldi	r30, 0x1A	; 26
    2400:	f7 e0       	ldi	r31, 0x07	; 7
    2402:	80 e5       	ldi	r24, 0x50	; 80
    2404:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2406:	11 82       	std	Z+1, r1	; 0x01
    2408:	08 95       	ret

0000240a <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	ec 01       	movw	r28, r24
    2410:	9c 01       	movw	r18, r24
    2412:	2a 5f       	subi	r18, 0xFA	; 250
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2422:	4c d5       	rcall	.+2712   	; 0x2ebc <_ZN8SdVolume15allocContiguousEmPm>
    2424:	88 23       	and	r24, r24
    2426:	a1 f0       	breq	.+40     	; 0x2450 <_ZN6SdFile10addClusterEv+0x46>
    2428:	8f 89       	ldd	r24, Y+23	; 0x17
    242a:	98 8d       	ldd	r25, Y+24	; 0x18
    242c:	a9 8d       	ldd	r26, Y+25	; 0x19
    242e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2430:	89 2b       	or	r24, r25
    2432:	8a 2b       	or	r24, r26
    2434:	8b 2b       	or	r24, r27
    2436:	59 f4       	brne	.+22     	; 0x244e <_ZN6SdFile10addClusterEv+0x44>
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	9f 81       	ldd	r25, Y+7	; 0x07
    243c:	a8 85       	ldd	r26, Y+8	; 0x08
    243e:	b9 85       	ldd	r27, Y+9	; 0x09
    2440:	8f 8b       	std	Y+23, r24	; 0x17
    2442:	98 8f       	std	Y+24, r25	; 0x18
    2444:	a9 8f       	std	Y+25, r26	; 0x19
    2446:	ba 8f       	std	Y+26, r27	; 0x1a
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	80 68       	ori	r24, 0x80	; 128
    244c:	8c 83       	std	Y+4, r24	; 0x04
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <_ZN6SdFile13cacheDirEntryEh>:
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	ec 01       	movw	r28, r24
    245c:	46 2f       	mov	r20, r22
    245e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2460:	7f 85       	ldd	r23, Y+15	; 0x0f
    2462:	88 89       	ldd	r24, Y+16	; 0x10
    2464:	99 89       	ldd	r25, Y+17	; 0x11
    2466:	cf d3       	rcall	.+1950   	; 0x2c06 <_ZN8SdVolume13cacheRawBlockEmh>
    2468:	88 23       	and	r24, r24
    246a:	41 f0       	breq	.+16     	; 0x247c <_ZN6SdFile13cacheDirEntryEh+0x26>
    246c:	8a 89       	ldd	r24, Y+18	; 0x12
    246e:	20 e2       	ldi	r18, 0x20	; 32
    2470:	82 9f       	mul	r24, r18
    2472:	c0 01       	movw	r24, r0
    2474:	11 24       	eor	r1, r1
    2476:	8b 5d       	subi	r24, 0xDB	; 219
    2478:	98 4f       	sbci	r25, 0xF8	; 248
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	08 95       	ret

00002486 <_ZN6SdFile4readEPvj>:
    2486:	2f 92       	push	r2
    2488:	3f 92       	push	r3
    248a:	4f 92       	push	r4
    248c:	5f 92       	push	r5
    248e:	6f 92       	push	r6
    2490:	7f 92       	push	r7
    2492:	8f 92       	push	r8
    2494:	9f 92       	push	r9
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
    24ac:	5b 01       	movw	r10, r22
    24ae:	4a 01       	movw	r8, r20
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	81 11       	cpse	r24, r1
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <_ZN6SdFile4readEPvj+0x36>
    24b6:	8f ef       	ldi	r24, 0xFF	; 255
    24b8:	9f ef       	ldi	r25, 0xFF	; 255
    24ba:	d4 c0       	rjmp	.+424    	; 0x2664 <_ZN6SdFile4readEPvj+0x1de>
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	80 ff       	sbrs	r24, 0
    24c0:	fa cf       	rjmp	.-12     	; 0x24b6 <_ZN6SdFile4readEPvj+0x30>
    24c2:	4b 88       	ldd	r4, Y+19	; 0x13
    24c4:	5c 88       	ldd	r5, Y+20	; 0x14
    24c6:	6d 88       	ldd	r6, Y+21	; 0x15
    24c8:	7e 88       	ldd	r7, Y+22	; 0x16
    24ca:	4a 85       	ldd	r20, Y+10	; 0x0a
    24cc:	5b 85       	ldd	r21, Y+11	; 0x0b
    24ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    24d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    24d2:	c4 01       	movw	r24, r8
    24d4:	a0 e0       	ldi	r26, 0x00	; 0
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	93 01       	movw	r18, r6
    24da:	82 01       	movw	r16, r4
    24dc:	04 1b       	sub	r16, r20
    24de:	15 0b       	sbc	r17, r21
    24e0:	26 0b       	sbc	r18, r22
    24e2:	37 0b       	sbc	r19, r23
    24e4:	08 17       	cp	r16, r24
    24e6:	19 07       	cpc	r17, r25
    24e8:	2a 07       	cpc	r18, r26
    24ea:	3b 07       	cpc	r19, r27
    24ec:	18 f4       	brcc	.+6      	; 0x24f4 <_ZN6SdFile4readEPvj+0x6e>
    24ee:	42 01       	movw	r8, r4
    24f0:	84 1a       	sub	r8, r20
    24f2:	95 0a       	sbc	r9, r21
    24f4:	24 01       	movw	r4, r8
    24f6:	1e 01       	movw	r2, r28
    24f8:	26 e0       	ldi	r18, 0x06	; 6
    24fa:	22 0e       	add	r2, r18
    24fc:	31 1c       	adc	r3, r1
    24fe:	41 14       	cp	r4, r1
    2500:	51 04       	cpc	r5, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <_ZN6SdFile4readEPvj+0x80>
    2504:	7d c0       	rjmp	.+250    	; 0x2600 <_ZN6SdFile4readEPvj+0x17a>
    2506:	4a 85       	ldd	r20, Y+10	; 0x0a
    2508:	5b 85       	ldd	r21, Y+11	; 0x0b
    250a:	6c 85       	ldd	r22, Y+12	; 0x0c
    250c:	7d 85       	ldd	r23, Y+13	; 0x0d
    250e:	6a 01       	movw	r12, r20
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	d8 22       	and	r13, r24
    2514:	ed 81       	ldd	r30, Y+5	; 0x05
    2516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251a:	8a 01       	movw	r16, r20
    251c:	9b 01       	movw	r18, r22
    251e:	f9 e0       	ldi	r31, 0x09	; 9
    2520:	36 95       	lsr	r19
    2522:	27 95       	ror	r18
    2524:	17 95       	ror	r17
    2526:	07 95       	ror	r16
    2528:	fa 95       	dec	r31
    252a:	d1 f7       	brne	.-12     	; 0x2520 <_ZN6SdFile4readEPvj+0x9a>
    252c:	e2 30       	cpi	r30, 0x02	; 2
    252e:	61 f4       	brne	.+24     	; 0x2548 <_ZN6SdFile4readEPvj+0xc2>
    2530:	fc 01       	movw	r30, r24
    2532:	82 8d       	ldd	r24, Z+26	; 0x1a
    2534:	93 8d       	ldd	r25, Z+27	; 0x1b
    2536:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2538:	b5 8d       	ldd	r27, Z+29	; 0x1d
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	60 0f       	add	r22, r16
    2540:	71 1f       	adc	r23, r17
    2542:	82 1f       	adc	r24, r18
    2544:	93 1f       	adc	r25, r19
    2546:	3e c0       	rjmp	.+124    	; 0x25c4 <_ZN6SdFile4readEPvj+0x13e>
    2548:	fc 01       	movw	r30, r24
    254a:	74 80       	ldd	r7, Z+4	; 0x04
    254c:	7a 94       	dec	r7
    254e:	70 22       	and	r7, r16
    2550:	c1 14       	cp	r12, r1
    2552:	d1 04       	cpc	r13, r1
    2554:	c1 f4       	brne	.+48     	; 0x2586 <_ZN6SdFile4readEPvj+0x100>
    2556:	71 10       	cpse	r7, r1
    2558:	16 c0       	rjmp	.+44     	; 0x2586 <_ZN6SdFile4readEPvj+0x100>
    255a:	45 2b       	or	r20, r21
    255c:	46 2b       	or	r20, r22
    255e:	47 2b       	or	r20, r23
    2560:	49 f4       	brne	.+18     	; 0x2574 <_ZN6SdFile4readEPvj+0xee>
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	a9 8d       	ldd	r26, Y+25	; 0x19
    2568:	ba 8d       	ldd	r27, Y+26	; 0x1a
    256a:	8e 83       	std	Y+6, r24	; 0x06
    256c:	9f 83       	std	Y+7, r25	; 0x07
    256e:	a8 87       	std	Y+8, r26	; 0x08
    2570:	b9 87       	std	Y+9, r27	; 0x09
    2572:	09 c0       	rjmp	.+18     	; 0x2586 <_ZN6SdFile4readEPvj+0x100>
    2574:	4e 81       	ldd	r20, Y+6	; 0x06
    2576:	5f 81       	ldd	r21, Y+7	; 0x07
    2578:	68 85       	ldd	r22, Y+8	; 0x08
    257a:	79 85       	ldd	r23, Y+9	; 0x09
    257c:	91 01       	movw	r18, r2
    257e:	7c d3       	rcall	.+1784   	; 0x2c78 <_ZNK8SdVolume6fatGetEmPm>
    2580:	88 23       	and	r24, r24
    2582:	09 f4       	brne	.+2      	; 0x2586 <_ZN6SdFile4readEPvj+0x100>
    2584:	98 cf       	rjmp	.-208    	; 0x24b6 <_ZN6SdFile4readEPvj+0x30>
    2586:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2588:	fc 8d       	ldd	r31, Y+28	; 0x1c
    258a:	8e 81       	ldd	r24, Y+6	; 0x06
    258c:	9f 81       	ldd	r25, Y+7	; 0x07
    258e:	a8 85       	ldd	r26, Y+8	; 0x08
    2590:	b9 85       	ldd	r27, Y+9	; 0x09
    2592:	02 97       	sbiw	r24, 0x02	; 2
    2594:	a1 09       	sbc	r26, r1
    2596:	b1 09       	sbc	r27, r1
    2598:	05 84       	ldd	r0, Z+13	; 0x0d
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <_ZN6SdFile4readEPvj+0x11e>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	aa 1f       	adc	r26, r26
    25a2:	bb 1f       	adc	r27, r27
    25a4:	0a 94       	dec	r0
    25a6:	d2 f7       	brpl	.-12     	; 0x259c <_ZN6SdFile4readEPvj+0x116>
    25a8:	46 85       	ldd	r20, Z+14	; 0x0e
    25aa:	57 85       	ldd	r21, Z+15	; 0x0f
    25ac:	60 89       	ldd	r22, Z+16	; 0x10
    25ae:	71 89       	ldd	r23, Z+17	; 0x11
    25b0:	84 0f       	add	r24, r20
    25b2:	95 1f       	adc	r25, r21
    25b4:	a6 1f       	adc	r26, r22
    25b6:	b7 1f       	adc	r27, r23
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	67 0d       	add	r22, r7
    25be:	71 1d       	adc	r23, r1
    25c0:	81 1d       	adc	r24, r1
    25c2:	91 1d       	adc	r25, r1
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	32 e0       	ldi	r19, 0x02	; 2
    25c8:	2c 19       	sub	r18, r12
    25ca:	3d 09       	sbc	r19, r13
    25cc:	32 01       	movw	r6, r4
    25ce:	24 15       	cp	r18, r4
    25d0:	35 05       	cpc	r19, r5
    25d2:	08 f4       	brcc	.+2      	; 0x25d6 <_ZN6SdFile4readEPvj+0x150>
    25d4:	39 01       	movw	r6, r18
    25d6:	2c 81       	ldd	r18, Y+4	; 0x04
    25d8:	26 fd       	sbrc	r18, 6
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <_ZN6SdFile4readEPvj+0x15e>
    25dc:	61 14       	cp	r6, r1
    25de:	f2 e0       	ldi	r31, 0x02	; 2
    25e0:	7f 06       	cpc	r7, r31
    25e2:	71 f5       	brne	.+92     	; 0x2640 <_ZN6SdFile4readEPvj+0x1ba>
    25e4:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    25e8:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    25ec:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    25f0:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    25f4:	60 17       	cp	r22, r16
    25f6:	71 07       	cpc	r23, r17
    25f8:	82 07       	cpc	r24, r18
    25fa:	93 07       	cpc	r25, r19
    25fc:	19 f4       	brne	.+6      	; 0x2604 <_ZN6SdFile4readEPvj+0x17e>
    25fe:	20 c0       	rjmp	.+64     	; 0x2640 <_ZN6SdFile4readEPvj+0x1ba>
    2600:	c4 01       	movw	r24, r8
    2602:	30 c0       	rjmp	.+96     	; 0x2664 <_ZN6SdFile4readEPvj+0x1de>
    2604:	75 01       	movw	r14, r10
    2606:	83 01       	movw	r16, r6
    2608:	96 01       	movw	r18, r12
    260a:	ab 01       	movw	r20, r22
    260c:	bc 01       	movw	r22, r24
    260e:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E>
    2612:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <_ZN8SdVolume7sdCard_E+0x1>
    2616:	64 de       	rcall	.-824    	; 0x22e0 <_ZN7Sd2Card8readDataEmjjPh>
    2618:	88 23       	and	r24, r24
    261a:	09 f4       	brne	.+2      	; 0x261e <_ZN6SdFile4readEPvj+0x198>
    261c:	4c cf       	rjmp	.-360    	; 0x24b6 <_ZN6SdFile4readEPvj+0x30>
    261e:	a6 0c       	add	r10, r6
    2620:	b7 1c       	adc	r11, r7
    2622:	8a 85       	ldd	r24, Y+10	; 0x0a
    2624:	9b 85       	ldd	r25, Y+11	; 0x0b
    2626:	ac 85       	ldd	r26, Y+12	; 0x0c
    2628:	bd 85       	ldd	r27, Y+13	; 0x0d
    262a:	86 0d       	add	r24, r6
    262c:	97 1d       	adc	r25, r7
    262e:	a1 1d       	adc	r26, r1
    2630:	b1 1d       	adc	r27, r1
    2632:	8a 87       	std	Y+10, r24	; 0x0a
    2634:	9b 87       	std	Y+11, r25	; 0x0b
    2636:	ac 87       	std	Y+12, r26	; 0x0c
    2638:	bd 87       	std	Y+13, r27	; 0x0d
    263a:	46 18       	sub	r4, r6
    263c:	57 08       	sbc	r5, r7
    263e:	5f cf       	rjmp	.-322    	; 0x24fe <_ZN6SdFile4readEPvj+0x78>
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	e1 d2       	rcall	.+1474   	; 0x2c06 <_ZN8SdVolume13cacheRawBlockEmh>
    2644:	88 23       	and	r24, r24
    2646:	09 f4       	brne	.+2      	; 0x264a <_ZN6SdFile4readEPvj+0x1c4>
    2648:	36 cf       	rjmp	.-404    	; 0x24b6 <_ZN6SdFile4readEPvj+0x30>
    264a:	f6 01       	movw	r30, r12
    264c:	eb 5d       	subi	r30, 0xDB	; 219
    264e:	f8 4f       	sbci	r31, 0xF8	; 248
    2650:	d5 01       	movw	r26, r10
    2652:	cf 01       	movw	r24, r30
    2654:	86 0d       	add	r24, r6
    2656:	97 1d       	adc	r25, r7
    2658:	8e 17       	cp	r24, r30
    265a:	9f 07       	cpc	r25, r31
    265c:	01 f3       	breq	.-64     	; 0x261e <_ZN6SdFile4readEPvj+0x198>
    265e:	21 91       	ld	r18, Z+
    2660:	2d 93       	st	X+, r18
    2662:	fa cf       	rjmp	.-12     	; 0x2658 <_ZN6SdFile4readEPvj+0x1d2>
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ff 90       	pop	r15
    266e:	ef 90       	pop	r14
    2670:	df 90       	pop	r13
    2672:	cf 90       	pop	r12
    2674:	bf 90       	pop	r11
    2676:	af 90       	pop	r10
    2678:	9f 90       	pop	r9
    267a:	8f 90       	pop	r8
    267c:	7f 90       	pop	r7
    267e:	6f 90       	pop	r6
    2680:	5f 90       	pop	r5
    2682:	4f 90       	pop	r4
    2684:	3f 90       	pop	r3
    2686:	2f 90       	pop	r2
    2688:	08 95       	ret

0000268a <_ZN6SdFile7seekSetEm>:
    268a:	8f 92       	push	r8
    268c:	9f 92       	push	r9
    268e:	af 92       	push	r10
    2690:	bf 92       	push	r11
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	ec 01       	movw	r28, r24
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	81 11       	cpse	r24, r1
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <_ZN6SdFile7seekSetEm+0x24>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	77 c0       	rjmp	.+238    	; 0x279c <_ZN6SdFile7seekSetEm+0x112>
    26ae:	0b 89       	ldd	r16, Y+19	; 0x13
    26b0:	1c 89       	ldd	r17, Y+20	; 0x14
    26b2:	2d 89       	ldd	r18, Y+21	; 0x15
    26b4:	3e 89       	ldd	r19, Y+22	; 0x16
    26b6:	04 17       	cp	r16, r20
    26b8:	15 07       	cpc	r17, r21
    26ba:	26 07       	cpc	r18, r22
    26bc:	37 07       	cpc	r19, r23
    26be:	a8 f3       	brcs	.-22     	; 0x26aa <_ZN6SdFile7seekSetEm+0x20>
    26c0:	6a 01       	movw	r12, r20
    26c2:	7b 01       	movw	r14, r22
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	29 f4       	brne	.+10     	; 0x26d2 <_ZN6SdFile7seekSetEm+0x48>
    26c8:	ca 86       	std	Y+10, r12	; 0x0a
    26ca:	db 86       	std	Y+11, r13	; 0x0b
    26cc:	ec 86       	std	Y+12, r14	; 0x0c
    26ce:	fd 86       	std	Y+13, r15	; 0x0d
    26d0:	0d c0       	rjmp	.+26     	; 0x26ec <_ZN6SdFile7seekSetEm+0x62>
    26d2:	c1 14       	cp	r12, r1
    26d4:	d1 04       	cpc	r13, r1
    26d6:	e1 04       	cpc	r14, r1
    26d8:	f1 04       	cpc	r15, r1
    26da:	51 f4       	brne	.+20     	; 0x26f0 <_ZN6SdFile7seekSetEm+0x66>
    26dc:	1e 82       	std	Y+6, r1	; 0x06
    26de:	1f 82       	std	Y+7, r1	; 0x07
    26e0:	18 86       	std	Y+8, r1	; 0x08
    26e2:	19 86       	std	Y+9, r1	; 0x09
    26e4:	1a 86       	std	Y+10, r1	; 0x0a
    26e6:	1b 86       	std	Y+11, r1	; 0x0b
    26e8:	1c 86       	std	Y+12, r1	; 0x0c
    26ea:	1d 86       	std	Y+13, r1	; 0x0d
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	56 c0       	rjmp	.+172    	; 0x279c <_ZN6SdFile7seekSetEm+0x112>
    26f0:	8a 84       	ldd	r8, Y+10	; 0x0a
    26f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f4:	ac 84       	ldd	r10, Y+12	; 0x0c
    26f6:	bd 84       	ldd	r11, Y+13	; 0x0d
    26f8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    26fa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    26fc:	25 85       	ldd	r18, Z+13	; 0x0d
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	27 5f       	subi	r18, 0xF7	; 247
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	b5 01       	movw	r22, r10
    2706:	a4 01       	movw	r20, r8
    2708:	41 50       	subi	r20, 0x01	; 1
    270a:	51 09       	sbc	r21, r1
    270c:	61 09       	sbc	r22, r1
    270e:	71 09       	sbc	r23, r1
    2710:	02 2e       	mov	r0, r18
    2712:	04 c0       	rjmp	.+8      	; 0x271c <_ZN6SdFile7seekSetEm+0x92>
    2714:	76 95       	lsr	r23
    2716:	67 95       	ror	r22
    2718:	57 95       	ror	r21
    271a:	47 95       	ror	r20
    271c:	0a 94       	dec	r0
    271e:	d2 f7       	brpl	.-12     	; 0x2714 <_ZN6SdFile7seekSetEm+0x8a>
    2720:	d7 01       	movw	r26, r14
    2722:	c6 01       	movw	r24, r12
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	a1 09       	sbc	r26, r1
    2728:	b1 09       	sbc	r27, r1
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <_ZN6SdFile7seekSetEm+0xaa>
    272c:	b6 95       	lsr	r27
    272e:	a7 95       	ror	r26
    2730:	97 95       	ror	r25
    2732:	87 95       	ror	r24
    2734:	2a 95       	dec	r18
    2736:	d2 f7       	brpl	.-12     	; 0x272c <_ZN6SdFile7seekSetEm+0xa2>
    2738:	84 17       	cp	r24, r20
    273a:	95 07       	cpc	r25, r21
    273c:	a6 07       	cpc	r26, r22
    273e:	b7 07       	cpc	r27, r23
    2740:	20 f0       	brcs	.+8      	; 0x274a <_ZN6SdFile7seekSetEm+0xc0>
    2742:	89 28       	or	r8, r9
    2744:	8a 28       	or	r8, r10
    2746:	8b 28       	or	r8, r11
    2748:	71 f4       	brne	.+28     	; 0x2766 <_ZN6SdFile7seekSetEm+0xdc>
    274a:	4f 89       	ldd	r20, Y+23	; 0x17
    274c:	58 8d       	ldd	r21, Y+24	; 0x18
    274e:	69 8d       	ldd	r22, Y+25	; 0x19
    2750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2752:	4e 83       	std	Y+6, r20	; 0x06
    2754:	5f 83       	std	Y+7, r21	; 0x07
    2756:	68 87       	std	Y+8, r22	; 0x08
    2758:	79 87       	std	Y+9, r23	; 0x09
    275a:	4c 01       	movw	r8, r24
    275c:	5d 01       	movw	r10, r26
    275e:	8e 01       	movw	r16, r28
    2760:	0a 5f       	subi	r16, 0xFA	; 250
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	15 c0       	rjmp	.+42     	; 0x2790 <_ZN6SdFile7seekSetEm+0x106>
    2766:	84 1b       	sub	r24, r20
    2768:	95 0b       	sbc	r25, r21
    276a:	a6 0b       	sbc	r26, r22
    276c:	b7 0b       	sbc	r27, r23
    276e:	f5 cf       	rjmp	.-22     	; 0x275a <_ZN6SdFile7seekSetEm+0xd0>
    2770:	4e 81       	ldd	r20, Y+6	; 0x06
    2772:	5f 81       	ldd	r21, Y+7	; 0x07
    2774:	68 85       	ldd	r22, Y+8	; 0x08
    2776:	79 85       	ldd	r23, Y+9	; 0x09
    2778:	98 01       	movw	r18, r16
    277a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277e:	7c d2       	rcall	.+1272   	; 0x2c78 <_ZNK8SdVolume6fatGetEmPm>
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	89 1a       	sub	r8, r25
    2784:	91 08       	sbc	r9, r1
    2786:	a1 08       	sbc	r10, r1
    2788:	b1 08       	sbc	r11, r1
    278a:	88 23       	and	r24, r24
    278c:	09 f4       	brne	.+2      	; 0x2790 <_ZN6SdFile7seekSetEm+0x106>
    278e:	8d cf       	rjmp	.-230    	; 0x26aa <_ZN6SdFile7seekSetEm+0x20>
    2790:	81 14       	cp	r8, r1
    2792:	91 04       	cpc	r9, r1
    2794:	a1 04       	cpc	r10, r1
    2796:	b1 04       	cpc	r11, r1
    2798:	59 f7       	brne	.-42     	; 0x2770 <_ZN6SdFile7seekSetEm+0xe6>
    279a:	96 cf       	rjmp	.-212    	; 0x26c8 <_ZN6SdFile7seekSetEm+0x3e>
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	bf 90       	pop	r11
    27ae:	af 90       	pop	r10
    27b0:	9f 90       	pop	r9
    27b2:	8f 90       	pop	r8
    27b4:	08 95       	ret

000027b6 <_ZN6SdFile4syncEv>:
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	ec 01       	movw	r28, r24
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	88 23       	and	r24, r24
    27c4:	b9 f1       	breq	.+110    	; 0x2834 <_ZN6SdFile4syncEv+0x7e>
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	87 ff       	sbrs	r24, 7
    27ca:	2f c0       	rjmp	.+94     	; 0x282a <_ZN6SdFile4syncEv+0x74>
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	ce 01       	movw	r24, r28
    27d0:	42 de       	rcall	.-892    	; 0x2456 <_ZN6SdFile13cacheDirEntryEh>
    27d2:	8c 01       	movw	r16, r24
    27d4:	89 2b       	or	r24, r25
    27d6:	71 f1       	breq	.+92     	; 0x2834 <_ZN6SdFile4syncEv+0x7e>
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	82 30       	cpi	r24, 0x02	; 2
    27dc:	48 f4       	brcc	.+18     	; 0x27f0 <_ZN6SdFile4syncEv+0x3a>
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	ad 89       	ldd	r26, Y+21	; 0x15
    27e4:	be 89       	ldd	r27, Y+22	; 0x16
    27e6:	f8 01       	movw	r30, r16
    27e8:	84 8f       	std	Z+28, r24	; 0x1c
    27ea:	95 8f       	std	Z+29, r25	; 0x1d
    27ec:	a6 8f       	std	Z+30, r26	; 0x1e
    27ee:	b7 8f       	std	Z+31, r27	; 0x1f
    27f0:	8f 89       	ldd	r24, Y+23	; 0x17
    27f2:	98 8d       	ldd	r25, Y+24	; 0x18
    27f4:	a9 8d       	ldd	r26, Y+25	; 0x19
    27f6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    27f8:	f8 01       	movw	r30, r16
    27fa:	93 8f       	std	Z+27, r25	; 0x1b
    27fc:	82 8f       	std	Z+26, r24	; 0x1a
    27fe:	b5 8b       	std	Z+21, r27	; 0x15
    2800:	a4 8b       	std	Z+20, r26	; 0x14
    2802:	e0 91 1c 07 	lds	r30, 0x071C	; 0x80071c <_ZN6SdFile9dateTime_E>
    2806:	f0 91 1d 07 	lds	r31, 0x071D	; 0x80071d <_ZN6SdFile9dateTime_E+0x1>
    280a:	30 97       	sbiw	r30, 0x00	; 0
    280c:	59 f0       	breq	.+22     	; 0x2824 <_ZN6SdFile4syncEv+0x6e>
    280e:	b8 01       	movw	r22, r16
    2810:	6a 5e       	subi	r22, 0xEA	; 234
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	c8 01       	movw	r24, r16
    2816:	48 96       	adiw	r24, 0x18	; 24
    2818:	19 95       	eicall
    281a:	f8 01       	movw	r30, r16
    281c:	80 8d       	ldd	r24, Z+24	; 0x18
    281e:	91 8d       	ldd	r25, Z+25	; 0x19
    2820:	93 8b       	std	Z+19, r25	; 0x13
    2822:	82 8b       	std	Z+18, r24	; 0x12
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	8f 77       	andi	r24, 0x7F	; 127
    2828:	8c 83       	std	Y+4, r24	; 0x04
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	b0 c1       	rjmp	.+864    	; 0x2b94 <_ZN8SdVolume10cacheFlushEv>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	08 95       	ret

00002840 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2840:	2f 92       	push	r2
    2842:	3f 92       	push	r3
    2844:	4f 92       	push	r4
    2846:	5f 92       	push	r5
    2848:	6f 92       	push	r6
    284a:	7f 92       	push	r7
    284c:	8f 92       	push	r8
    284e:	9f 92       	push	r9
    2850:	af 92       	push	r10
    2852:	bf 92       	push	r11
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	00 d0       	rcall	.+0      	; 0x2866 <_ZN6SdFile5writeEPKvj+0x26>
    2866:	1f 92       	push	r1
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	8c 01       	movw	r16, r24
    286e:	6b 01       	movw	r12, r22
    2870:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2872:	dc 01       	movw	r26, r24
    2874:	15 96       	adiw	r26, 0x05	; 5
    2876:	8c 91       	ld	r24, X
    2878:	15 97       	sbiw	r26, 0x05	; 5
    287a:	81 30       	cpi	r24, 0x01	; 1
    287c:	c1 f4       	brne	.+48     	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>
    287e:	14 96       	adiw	r26, 0x04	; 4
    2880:	8c 91       	ld	r24, X
    2882:	81 ff       	sbrs	r24, 1
    2884:	14 c0       	rjmp	.+40     	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2886:	82 ff       	sbrs	r24, 2
    2888:	1c c0       	rjmp	.+56     	; 0x28c2 <_ZN6SdFile5writeEPKvj+0x82>
    288a:	f8 01       	movw	r30, r16
    288c:	43 89       	ldd	r20, Z+19	; 0x13
    288e:	54 89       	ldd	r21, Z+20	; 0x14
    2890:	65 89       	ldd	r22, Z+21	; 0x15
    2892:	76 89       	ldd	r23, Z+22	; 0x16
    2894:	82 85       	ldd	r24, Z+10	; 0x0a
    2896:	93 85       	ldd	r25, Z+11	; 0x0b
    2898:	a4 85       	ldd	r26, Z+12	; 0x0c
    289a:	b5 85       	ldd	r27, Z+13	; 0x0d
    289c:	84 17       	cp	r24, r20
    289e:	95 07       	cpc	r25, r21
    28a0:	a6 07       	cpc	r26, r22
    28a2:	b7 07       	cpc	r27, r23
    28a4:	71 f0       	breq	.+28     	; 0x28c2 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    28a6:	c8 01       	movw	r24, r16
    28a8:	f0 de       	rcall	.-544    	; 0x268a <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    28aa:	81 11       	cpse	r24, r1
    28ac:	0a c0       	rjmp	.+20     	; 0x28c2 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	d8 01       	movw	r26, r16
    28b4:	13 96       	adiw	r26, 0x03	; 3
    28b6:	9c 93       	st	X, r25
    28b8:	8e 93       	st	-X, r24
    28ba:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	42 c1       	rjmp	.+644    	; 0x2b46 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    28c2:	41 01       	movw	r8, r2
    28c4:	82 c0       	rjmp	.+260    	; 0x29ca <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    28c6:	5b 96       	adiw	r26, 0x1b	; 27
    28c8:	8d 91       	ld	r24, X+
    28ca:	9c 91       	ld	r25, X
    28cc:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    28ce:	fc 01       	movw	r30, r24
    28d0:	74 80       	ldd	r7, Z+4	; 0x04
    28d2:	2f ef       	ldi	r18, 0xFF	; 255
    28d4:	27 0d       	add	r18, r7
    28d6:	2a 01       	movw	r4, r20
    28d8:	3b 01       	movw	r6, r22
    28da:	39 e0       	ldi	r19, 0x09	; 9
    28dc:	76 94       	lsr	r7
    28de:	67 94       	ror	r6
    28e0:	57 94       	ror	r5
    28e2:	47 94       	ror	r4
    28e4:	3a 95       	dec	r19
    28e6:	d1 f7       	brne	.-12     	; 0x28dc <_ZN6SdFile5writeEPKvj+0x9c>
    28e8:	72 2e       	mov	r7, r18
    28ea:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    28ec:	7a 01       	movw	r14, r20
    28ee:	f1 e0       	ldi	r31, 0x01	; 1
    28f0:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    28f2:	77 20       	and	r7, r7
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <_ZN6SdFile5writeEPKvj+0xb8>
    28f6:	75 c0       	rjmp	.+234    	; 0x29e2 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	8e 19       	sub	r24, r14
    28fe:	9f 09       	sbc	r25, r15
    2900:	54 01       	movw	r10, r8
    2902:	88 15       	cp	r24, r8
    2904:	99 05       	cpc	r25, r9
    2906:	08 f4       	brcc	.+2      	; 0x290a <_ZN6SdFile5writeEPKvj+0xca>
    2908:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    290a:	d8 01       	movw	r26, r16
    290c:	5b 96       	adiw	r26, 0x1b	; 27
    290e:	2d 91       	ld	r18, X+
    2910:	3c 91       	ld	r19, X
    2912:	5c 97       	sbiw	r26, 0x1c	; 28
    2914:	16 96       	adiw	r26, 0x06	; 6
    2916:	8d 91       	ld	r24, X+
    2918:	9d 91       	ld	r25, X+
    291a:	0d 90       	ld	r0, X+
    291c:	bc 91       	ld	r27, X
    291e:	a0 2d       	mov	r26, r0
    2920:	02 97       	sbiw	r24, 0x02	; 2
    2922:	a1 09       	sbc	r26, r1
    2924:	b1 09       	sbc	r27, r1
    2926:	f9 01       	movw	r30, r18
    2928:	05 84       	ldd	r0, Z+13	; 0x0d
    292a:	04 c0       	rjmp	.+8      	; 0x2934 <_ZN6SdFile5writeEPKvj+0xf4>
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	aa 1f       	adc	r26, r26
    2932:	bb 1f       	adc	r27, r27
    2934:	0a 94       	dec	r0
    2936:	d2 f7       	brpl	.-12     	; 0x292c <_ZN6SdFile5writeEPKvj+0xec>
    2938:	46 85       	ldd	r20, Z+14	; 0x0e
    293a:	57 85       	ldd	r21, Z+15	; 0x0f
    293c:	60 89       	ldd	r22, Z+16	; 0x10
    293e:	71 89       	ldd	r23, Z+17	; 0x11
    2940:	84 0f       	add	r24, r20
    2942:	95 1f       	adc	r25, r21
    2944:	a6 1f       	adc	r26, r22
    2946:	b7 1f       	adc	r27, r23
    2948:	9c 01       	movw	r18, r24
    294a:	ad 01       	movw	r20, r26
    294c:	27 0d       	add	r18, r7
    294e:	31 1d       	adc	r19, r1
    2950:	41 1d       	adc	r20, r1
    2952:	51 1d       	adc	r21, r1
    2954:	29 01       	movw	r4, r18
    2956:	3a 01       	movw	r6, r20
    if (n == 512) {
    2958:	a1 14       	cp	r10, r1
    295a:	32 e0       	ldi	r19, 0x02	; 2
    295c:	b3 06       	cpc	r11, r19
    295e:	09 f0       	breq	.+2      	; 0x2962 <_ZN6SdFile5writeEPKvj+0x122>
    2960:	85 c0       	rjmp	.+266    	; 0x2a6c <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2962:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2966:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    296a:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    296e:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2972:	48 16       	cp	r4, r24
    2974:	59 06       	cpc	r5, r25
    2976:	6a 06       	cpc	r6, r26
    2978:	7b 06       	cpc	r7, r27
    297a:	59 f4       	brne	.+22     	; 0x2992 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    297c:	8f ef       	ldi	r24, 0xFF	; 255
    297e:	9f ef       	ldi	r25, 0xFF	; 255
    2980:	dc 01       	movw	r26, r24
    2982:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2986:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    298a:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    298e:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2992:	96 01       	movw	r18, r12
    2994:	b3 01       	movw	r22, r6
    2996:	a2 01       	movw	r20, r4
    2998:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E>
    299c:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <_ZN8SdVolume7sdCard_E+0x1>
    29a0:	e7 dc       	rcall	.-1586   	; 0x2370 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    29a2:	88 23       	and	r24, r24
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <_ZN6SdFile5writeEPKvj+0x168>
    29a6:	83 cf       	rjmp	.-250    	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    29a8:	9e ef       	ldi	r25, 0xFE	; 254
    29aa:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    29ac:	8a 18       	sub	r8, r10
    29ae:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    29b0:	f8 01       	movw	r30, r16
    29b2:	82 85       	ldd	r24, Z+10	; 0x0a
    29b4:	93 85       	ldd	r25, Z+11	; 0x0b
    29b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    29b8:	b5 85       	ldd	r27, Z+13	; 0x0d
    29ba:	8a 0d       	add	r24, r10
    29bc:	9b 1d       	adc	r25, r11
    29be:	a1 1d       	adc	r26, r1
    29c0:	b1 1d       	adc	r27, r1
    29c2:	82 87       	std	Z+10, r24	; 0x0a
    29c4:	93 87       	std	Z+11, r25	; 0x0b
    29c6:	a4 87       	std	Z+12, r26	; 0x0c
    29c8:	b5 87       	std	Z+13, r27	; 0x0d
    29ca:	d8 01       	movw	r26, r16
    29cc:	1a 96       	adiw	r26, 0x0a	; 10
    29ce:	4d 91       	ld	r20, X+
    29d0:	5d 91       	ld	r21, X+
    29d2:	6d 91       	ld	r22, X+
    29d4:	7c 91       	ld	r23, X
    29d6:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    29d8:	81 14       	cp	r8, r1
    29da:	91 04       	cpc	r9, r1
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <_ZN6SdFile5writeEPKvj+0x1a0>
    29de:	73 cf       	rjmp	.-282    	; 0x28c6 <_ZN6SdFile5writeEPKvj+0x86>
    29e0:	83 c0       	rjmp	.+262    	; 0x2ae8 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    29e2:	e1 14       	cp	r14, r1
    29e4:	f1 04       	cpc	r15, r1
    29e6:	09 f0       	breq	.+2      	; 0x29ea <_ZN6SdFile5writeEPKvj+0x1aa>
    29e8:	87 cf       	rjmp	.-242    	; 0x28f8 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    29ea:	16 96       	adiw	r26, 0x06	; 6
    29ec:	4d 91       	ld	r20, X+
    29ee:	5d 91       	ld	r21, X+
    29f0:	6d 91       	ld	r22, X+
    29f2:	7c 91       	ld	r23, X
    29f4:	19 97       	sbiw	r26, 0x09	; 9
    29f6:	41 15       	cp	r20, r1
    29f8:	51 05       	cpc	r21, r1
    29fa:	61 05       	cpc	r22, r1
    29fc:	71 05       	cpc	r23, r1
    29fe:	59 f4       	brne	.+22     	; 0x2a16 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    2a00:	57 96       	adiw	r26, 0x17	; 23
    2a02:	8d 91       	ld	r24, X+
    2a04:	9d 91       	ld	r25, X+
    2a06:	0d 90       	ld	r0, X+
    2a08:	bc 91       	ld	r27, X
    2a0a:	a0 2d       	mov	r26, r0
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	a1 05       	cpc	r26, r1
    2a10:	b1 05       	cpc	r27, r1
    2a12:	31 f5       	brne	.+76     	; 0x2a60 <_ZN6SdFile5writeEPKvj+0x220>
    2a14:	20 c0       	rjmp	.+64     	; 0x2a56 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2a16:	9e 01       	movw	r18, r28
    2a18:	2f 5f       	subi	r18, 0xFF	; 255
    2a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1c:	2d d1       	rcall	.+602    	; 0x2c78 <_ZNK8SdVolume6fatGetEmPm>
    2a1e:	88 23       	and	r24, r24
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <_ZN6SdFile5writeEPKvj+0x1e4>
    2a22:	4d cf       	rjmp	.-358    	; 0x28be <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	ab 81       	ldd	r26, Y+3	; 0x03
    2a2a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a30:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a32:	f9 01       	movw	r30, r18
    2a34:	27 89       	ldd	r18, Z+23	; 0x17
    2a36:	20 31       	cpi	r18, 0x10	; 16
    2a38:	29 f0       	breq	.+10     	; 0x2a44 <_ZN6SdFile5writeEPKvj+0x204>
    2a3a:	48 ef       	ldi	r20, 0xF8	; 248
    2a3c:	5f ef       	ldi	r21, 0xFF	; 255
    2a3e:	6f ef       	ldi	r22, 0xFF	; 255
    2a40:	7f e0       	ldi	r23, 0x0F	; 15
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <_ZN6SdFile5writeEPKvj+0x20c>
    2a44:	48 ef       	ldi	r20, 0xF8	; 248
    2a46:	5f ef       	ldi	r21, 0xFF	; 255
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	84 17       	cp	r24, r20
    2a4e:	95 07       	cpc	r25, r21
    2a50:	a6 07       	cpc	r26, r22
    2a52:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2a54:	28 f0       	brcs	.+10     	; 0x2a60 <_ZN6SdFile5writeEPKvj+0x220>
    2a56:	c8 01       	movw	r24, r16
    2a58:	d8 dc       	rcall	.-1616   	; 0x240a <_ZN6SdFile10addClusterEv>
    2a5a:	81 11       	cpse	r24, r1
    2a5c:	4d cf       	rjmp	.-358    	; 0x28f8 <_ZN6SdFile5writeEPKvj+0xb8>
    2a5e:	27 cf       	rjmp	.-434    	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    2a60:	f8 01       	movw	r30, r16
    2a62:	86 83       	std	Z+6, r24	; 0x06
    2a64:	97 83       	std	Z+7, r25	; 0x07
    2a66:	a0 87       	std	Z+8, r26	; 0x08
    2a68:	b1 87       	std	Z+9, r27	; 0x09
    2a6a:	46 cf       	rjmp	.-372    	; 0x28f8 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2a6c:	e1 14       	cp	r14, r1
    2a6e:	f1 04       	cpc	r15, r1
    2a70:	21 f5       	brne	.+72     	; 0x2aba <_ZN6SdFile5writeEPKvj+0x27a>
    2a72:	d8 01       	movw	r26, r16
    2a74:	1a 96       	adiw	r26, 0x0a	; 10
    2a76:	4d 91       	ld	r20, X+
    2a78:	5d 91       	ld	r21, X+
    2a7a:	6d 91       	ld	r22, X+
    2a7c:	7c 91       	ld	r23, X
    2a7e:	1d 97       	sbiw	r26, 0x0d	; 13
    2a80:	53 96       	adiw	r26, 0x13	; 19
    2a82:	8d 91       	ld	r24, X+
    2a84:	9d 91       	ld	r25, X+
    2a86:	0d 90       	ld	r0, X+
    2a88:	bc 91       	ld	r27, X
    2a8a:	a0 2d       	mov	r26, r0
    2a8c:	48 17       	cp	r20, r24
    2a8e:	59 07       	cpc	r21, r25
    2a90:	6a 07       	cpc	r22, r26
    2a92:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2a94:	90 f0       	brcs	.+36     	; 0x2aba <_ZN6SdFile5writeEPKvj+0x27a>
    2a96:	7e d0       	rcall	.+252    	; 0x2b94 <_ZN8SdVolume10cacheFlushEv>
    2a98:	88 23       	and	r24, r24
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <_ZN6SdFile5writeEPKvj+0x25e>
    2a9c:	08 cf       	rjmp	.-496    	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    2a9e:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2aa2:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2aa6:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2aaa:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2aae:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
    2ab2:	81 60       	ori	r24, 0x01	; 1
    2ab4:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2ab8:	07 c0       	rjmp	.+14     	; 0x2ac8 <_ZN6SdFile5writeEPKvj+0x288>
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	c3 01       	movw	r24, r6
    2abe:	b2 01       	movw	r22, r4
    2ac0:	a2 d0       	rcall	.+324    	; 0x2c06 <_ZN8SdVolume13cacheRawBlockEmh>
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <_ZN6SdFile5writeEPKvj+0x288>
    2ac6:	f3 ce       	rjmp	.-538    	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>
    2ac8:	d6 01       	movw	r26, r12
    2aca:	f7 01       	movw	r30, r14
    2acc:	eb 5d       	subi	r30, 0xDB	; 219
    2ace:	f8 4f       	sbci	r31, 0xF8	; 248
    2ad0:	9f 01       	movw	r18, r30
    2ad2:	2a 0d       	add	r18, r10
    2ad4:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2ad6:	2e 17       	cp	r18, r30
    2ad8:	3f 07       	cpc	r19, r31
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <_ZN6SdFile5writeEPKvj+0x2a2>
    2adc:	8d 91       	ld	r24, X+
    2ade:	81 93       	st	Z+, r24
    2ae0:	fa cf       	rjmp	.-12     	; 0x2ad6 <_ZN6SdFile5writeEPKvj+0x296>
    2ae2:	ca 0c       	add	r12, r10
    2ae4:	db 1c       	adc	r13, r11
    2ae6:	62 cf       	rjmp	.-316    	; 0x29ac <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2ae8:	d8 01       	movw	r26, r16
    2aea:	53 96       	adiw	r26, 0x13	; 19
    2aec:	cd 90       	ld	r12, X+
    2aee:	dd 90       	ld	r13, X+
    2af0:	ed 90       	ld	r14, X+
    2af2:	fc 90       	ld	r15, X
    2af4:	56 97       	sbiw	r26, 0x16	; 22
    2af6:	14 96       	adiw	r26, 0x04	; 4
    2af8:	8c 91       	ld	r24, X
    2afa:	c4 16       	cp	r12, r20
    2afc:	d5 06       	cpc	r13, r21
    2afe:	e6 06       	cpc	r14, r22
    2b00:	f7 06       	cpc	r15, r23
    2b02:	40 f4       	brcc	.+16     	; 0x2b14 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2b04:	f8 01       	movw	r30, r16
    2b06:	43 8b       	std	Z+19, r20	; 0x13
    2b08:	54 8b       	std	Z+20, r21	; 0x14
    2b0a:	65 8b       	std	Z+21, r22	; 0x15
    2b0c:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2b0e:	80 68       	ori	r24, 0x80	; 128
    2b10:	84 83       	std	Z+4, r24	; 0x04
    2b12:	0d c0       	rjmp	.+26     	; 0x2b2e <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    2b14:	20 91 1c 07 	lds	r18, 0x071C	; 0x80071c <_ZN6SdFile9dateTime_E>
    2b18:	30 91 1d 07 	lds	r19, 0x071D	; 0x80071d <_ZN6SdFile9dateTime_E+0x1>
    2b1c:	23 2b       	or	r18, r19
    2b1e:	39 f0       	breq	.+14     	; 0x2b2e <_ZN6SdFile5writeEPKvj+0x2ee>
    2b20:	21 14       	cp	r2, r1
    2b22:	31 04       	cpc	r3, r1
    2b24:	21 f0       	breq	.+8      	; 0x2b2e <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2b26:	80 68       	ori	r24, 0x80	; 128
    2b28:	d8 01       	movw	r26, r16
    2b2a:	14 96       	adiw	r26, 0x04	; 4
    2b2c:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2b2e:	f8 01       	movw	r30, r16
    2b30:	84 81       	ldd	r24, Z+4	; 0x04
    2b32:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <_ZN6SdFile5writeEPKvj+0x2fa>
    2b36:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <_ZN6SdFile5writeEPKvj+0x306>
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	3c de       	rcall	.-904    	; 0x27b6 <_ZN6SdFile4syncEv>
    2b3e:	88 23       	and	r24, r24
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <_ZN6SdFile5writeEPKvj+0x304>
    2b42:	b5 ce       	rjmp	.-662    	; 0x28ae <_ZN6SdFile5writeEPKvj+0x6e>
    2b44:	f8 cf       	rjmp	.-16     	; 0x2b36 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
    2b5e:	bf 90       	pop	r11
    2b60:	af 90       	pop	r10
    2b62:	9f 90       	pop	r9
    2b64:	8f 90       	pop	r8
    2b66:	7f 90       	pop	r7
    2b68:	6f 90       	pop	r6
    2b6a:	5f 90       	pop	r5
    2b6c:	4f 90       	pop	r4
    2b6e:	3f 90       	pop	r3
    2b70:	2f 90       	pop	r2
    2b72:	08 95       	ret

00002b74 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	1f 92       	push	r1
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	be 01       	movw	r22, r28
    2b86:	6f 5f       	subi	r22, 0xFF	; 255
    2b88:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8a:	5a de       	rcall	.-844    	; 0x2840 <_ZN6SdFile5writeEPKvj>
}
    2b8c:	0f 90       	pop	r0
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	08 95       	ret

00002b94 <_ZN8SdVolume10cacheFlushEv>:
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    2b94:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
    2b98:	88 23       	and	r24, r24
    2b9a:	99 f1       	breq	.+102    	; 0x2c02 <_ZN8SdVolume10cacheFlushEv+0x6e>
    2b9c:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2ba0:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2ba4:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2ba8:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2bac:	25 e2       	ldi	r18, 0x25	; 37
    2bae:	37 e0       	ldi	r19, 0x07	; 7
    2bb0:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E>
    2bb4:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <_ZN8SdVolume7sdCard_E+0x1>
    2bb8:	db db       	rcall	.-2122   	; 0x2370 <_ZN7Sd2Card10writeBlockEmPKh>
    2bba:	81 11       	cpse	r24, r1
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <_ZN8SdVolume10cacheFlushEv+0x2e>
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	08 95       	ret
    2bc2:	40 91 1e 07 	lds	r20, 0x071E	; 0x80071e <_ZN8SdVolume17cacheMirrorBlock_E>
    2bc6:	50 91 1f 07 	lds	r21, 0x071F	; 0x80071f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2bca:	60 91 20 07 	lds	r22, 0x0720	; 0x800720 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2bce:	70 91 21 07 	lds	r23, 0x0721	; 0x800721 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2bd2:	41 15       	cp	r20, r1
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	61 05       	cpc	r22, r1
    2bd8:	71 05       	cpc	r23, r1
    2bda:	89 f0       	breq	.+34     	; 0x2bfe <_ZN8SdVolume10cacheFlushEv+0x6a>
    2bdc:	25 e2       	ldi	r18, 0x25	; 37
    2bde:	37 e0       	ldi	r19, 0x07	; 7
    2be0:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E>
    2be4:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <_ZN8SdVolume7sdCard_E+0x1>
    2be8:	c3 db       	rcall	.-2170   	; 0x2370 <_ZN7Sd2Card10writeBlockEmPKh>
    2bea:	88 23       	and	r24, r24
    2bec:	41 f3       	breq	.-48     	; 0x2bbe <_ZN8SdVolume10cacheFlushEv+0x2a>
    2bee:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <_ZN8SdVolume17cacheMirrorBlock_E>
    2bf2:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2bf6:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2bfa:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2bfe:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	08 95       	ret

00002c06 <_ZN8SdVolume13cacheRawBlockEmh>:
    2c06:	cf 92       	push	r12
    2c08:	df 92       	push	r13
    2c0a:	ef 92       	push	r14
    2c0c:	ff 92       	push	r15
    2c0e:	cf 93       	push	r28
    2c10:	6b 01       	movw	r12, r22
    2c12:	7c 01       	movw	r14, r24
    2c14:	c4 2f       	mov	r28, r20
    2c16:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2c1a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c1e:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c22:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c26:	8c 15       	cp	r24, r12
    2c28:	9d 05       	cpc	r25, r13
    2c2a:	ae 05       	cpc	r26, r14
    2c2c:	bf 05       	cpc	r27, r15
    2c2e:	c1 f0       	breq	.+48     	; 0x2c60 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    2c30:	b1 df       	rcall	.-158    	; 0x2b94 <_ZN8SdVolume10cacheFlushEv>
    2c32:	81 11       	cpse	r24, r1
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	19 c0       	rjmp	.+50     	; 0x2c6c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    2c3a:	25 e2       	ldi	r18, 0x25	; 37
    2c3c:	37 e0       	ldi	r19, 0x07	; 7
    2c3e:	b7 01       	movw	r22, r14
    2c40:	a6 01       	movw	r20, r12
    2c42:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E>
    2c46:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <_ZN8SdVolume7sdCard_E+0x1>
    2c4a:	59 db       	rcall	.-2382   	; 0x22fe <_ZN7Sd2Card9readBlockEmPh>
    2c4c:	88 23       	and	r24, r24
    2c4e:	99 f3       	breq	.-26     	; 0x2c36 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    2c50:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2c54:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c58:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c5c:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c60:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
    2c64:	c8 2b       	or	r28, r24
    2c66:	c0 93 22 07 	sts	0x0722, r28	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	cf 91       	pop	r28
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	08 95       	ret

00002c78 <_ZNK8SdVolume6fatGetEmPm>:
    2c78:	8f 92       	push	r8
    2c7a:	9f 92       	push	r9
    2c7c:	af 92       	push	r10
    2c7e:	bf 92       	push	r11
    2c80:	cf 92       	push	r12
    2c82:	df 92       	push	r13
    2c84:	ef 92       	push	r14
    2c86:	ff 92       	push	r15
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	fc 01       	movw	r30, r24
    2c92:	81 85       	ldd	r24, Z+9	; 0x09
    2c94:	92 85       	ldd	r25, Z+10	; 0x0a
    2c96:	a3 85       	ldd	r26, Z+11	; 0x0b
    2c98:	b4 85       	ldd	r27, Z+12	; 0x0c
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	a1 1d       	adc	r26, r1
    2c9e:	b1 1d       	adc	r27, r1
    2ca0:	84 17       	cp	r24, r20
    2ca2:	95 07       	cpc	r25, r21
    2ca4:	a6 07       	cpc	r26, r22
    2ca6:	b7 07       	cpc	r27, r23
    2ca8:	10 f4       	brcc	.+4      	; 0x2cae <_ZNK8SdVolume6fatGetEmPm+0x36>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	5a c0       	rjmp	.+180    	; 0x2d62 <_ZNK8SdVolume6fatGetEmPm+0xea>
    2cae:	83 88       	ldd	r8, Z+19	; 0x13
    2cb0:	94 88       	ldd	r9, Z+20	; 0x14
    2cb2:	a5 88       	ldd	r10, Z+21	; 0x15
    2cb4:	b6 88       	ldd	r11, Z+22	; 0x16
    2cb6:	87 89       	ldd	r24, Z+23	; 0x17
    2cb8:	80 31       	cpi	r24, 0x10	; 16
    2cba:	29 f4       	brne	.+10     	; 0x2cc6 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2cbc:	bb 27       	eor	r27, r27
    2cbe:	a7 2f       	mov	r26, r23
    2cc0:	96 2f       	mov	r25, r22
    2cc2:	85 2f       	mov	r24, r21
    2cc4:	09 c0       	rjmp	.+18     	; 0x2cd8 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2cc6:	db 01       	movw	r26, r22
    2cc8:	ca 01       	movw	r24, r20
    2cca:	c7 e0       	ldi	r28, 0x07	; 7
    2ccc:	b6 95       	lsr	r27
    2cce:	a7 95       	ror	r26
    2cd0:	97 95       	ror	r25
    2cd2:	87 95       	ror	r24
    2cd4:	ca 95       	dec	r28
    2cd6:	d1 f7       	brne	.-12     	; 0x2ccc <_ZNK8SdVolume6fatGetEmPm+0x54>
    2cd8:	e9 01       	movw	r28, r18
    2cda:	6a 01       	movw	r12, r20
    2cdc:	7b 01       	movw	r14, r22
    2cde:	8f 01       	movw	r16, r30
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	68 0d       	add	r22, r8
    2ce6:	79 1d       	adc	r23, r9
    2ce8:	8a 1d       	adc	r24, r10
    2cea:	9b 1d       	adc	r25, r11
    2cec:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2cf0:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2cf4:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2cf8:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2cfc:	68 15       	cp	r22, r8
    2cfe:	79 05       	cpc	r23, r9
    2d00:	8a 05       	cpc	r24, r10
    2d02:	9b 05       	cpc	r25, r11
    2d04:	91 f4       	brne	.+36     	; 0x2d2a <_ZNK8SdVolume6fatGetEmPm+0xb2>
    2d06:	f8 01       	movw	r30, r16
    2d08:	87 89       	ldd	r24, Z+23	; 0x17
    2d0a:	80 31       	cpi	r24, 0x10	; 16
    2d0c:	99 f4       	brne	.+38     	; 0x2d34 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    2d0e:	dd 24       	eor	r13, r13
    2d10:	ee 24       	eor	r14, r14
    2d12:	ff 24       	eor	r15, r15
    2d14:	c6 01       	movw	r24, r12
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	eb 5d       	subi	r30, 0xDB	; 219
    2d1e:	f8 4f       	sbci	r31, 0xF8	; 248
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	a0 e0       	ldi	r26, 0x00	; 0
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	17 c0       	rjmp	.+46     	; 0x2d58 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	6c df       	rcall	.-296    	; 0x2c06 <_ZN8SdVolume13cacheRawBlockEmh>
    2d2e:	81 11       	cpse	r24, r1
    2d30:	ea cf       	rjmp	.-44     	; 0x2d06 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2d32:	bb cf       	rjmp	.-138    	; 0x2caa <_ZNK8SdVolume6fatGetEmPm+0x32>
    2d34:	e8 94       	clt
    2d36:	c7 f8       	bld	r12, 7
    2d38:	dd 24       	eor	r13, r13
    2d3a:	ee 24       	eor	r14, r14
    2d3c:	ff 24       	eor	r15, r15
    2d3e:	c6 01       	movw	r24, r12
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	fc 01       	movw	r30, r24
    2d4a:	eb 5d       	subi	r30, 0xDB	; 219
    2d4c:	f8 4f       	sbci	r31, 0xF8	; 248
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	a2 81       	ldd	r26, Z+2	; 0x02
    2d54:	b3 81       	ldd	r27, Z+3	; 0x03
    2d56:	bf 70       	andi	r27, 0x0F	; 15
    2d58:	88 83       	st	Y, r24
    2d5a:	99 83       	std	Y+1, r25	; 0x01
    2d5c:	aa 83       	std	Y+2, r26	; 0x02
    2d5e:	bb 83       	std	Y+3, r27	; 0x03
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	9f 90       	pop	r9
    2d78:	8f 90       	pop	r8
    2d7a:	08 95       	ret

00002d7c <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2d7c:	4f 92       	push	r4
    2d7e:	5f 92       	push	r5
    2d80:	6f 92       	push	r6
    2d82:	7f 92       	push	r7
    2d84:	8f 92       	push	r8
    2d86:	9f 92       	push	r9
    2d88:	af 92       	push	r10
    2d8a:	bf 92       	push	r11
    2d8c:	cf 92       	push	r12
    2d8e:	df 92       	push	r13
    2d90:	ef 92       	push	r14
    2d92:	ff 92       	push	r15
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2d9e:	42 30       	cpi	r20, 0x02	; 2
    2da0:	51 05       	cpc	r21, r1
    2da2:	61 05       	cpc	r22, r1
    2da4:	71 05       	cpc	r23, r1
    2da6:	10 f4       	brcc	.+4      	; 0x2dac <_ZN8SdVolume6fatPutEmm+0x30>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	77 c0       	rjmp	.+238    	; 0x2e9a <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	ab 85       	ldd	r26, Y+11	; 0x0b
    2db2:	bc 85       	ldd	r27, Y+12	; 0x0c
    2db4:	01 96       	adiw	r24, 0x01	; 1
    2db6:	a1 1d       	adc	r26, r1
    2db8:	b1 1d       	adc	r27, r1
    2dba:	84 17       	cp	r24, r20
    2dbc:	95 07       	cpc	r25, r21
    2dbe:	a6 07       	cpc	r26, r22
    2dc0:	b7 07       	cpc	r27, r23
    2dc2:	90 f3       	brcs	.-28     	; 0x2da8 <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2dc4:	cb 88       	ldd	r12, Y+19	; 0x13
    2dc6:	dc 88       	ldd	r13, Y+20	; 0x14
    2dc8:	ed 88       	ldd	r14, Y+21	; 0x15
    2dca:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	80 31       	cpi	r24, 0x10	; 16
    2dd0:	29 f4       	brne	.+10     	; 0x2ddc <_ZN8SdVolume6fatPutEmm+0x60>
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	a7 2f       	mov	r26, r23
    2dd6:	96 2f       	mov	r25, r22
    2dd8:	85 2f       	mov	r24, r21
    2dda:	09 c0       	rjmp	.+18     	; 0x2dee <_ZN8SdVolume6fatPutEmm+0x72>
    2ddc:	db 01       	movw	r26, r22
    2dde:	ca 01       	movw	r24, r20
    2de0:	e7 e0       	ldi	r30, 0x07	; 7
    2de2:	b6 95       	lsr	r27
    2de4:	a7 95       	ror	r26
    2de6:	97 95       	ror	r25
    2de8:	87 95       	ror	r24
    2dea:	ea 95       	dec	r30
    2dec:	d1 f7       	brne	.-12     	; 0x2de2 <_ZN8SdVolume6fatPutEmm+0x66>
    2dee:	48 01       	movw	r8, r16
    2df0:	59 01       	movw	r10, r18
    2df2:	2a 01       	movw	r4, r20
    2df4:	3b 01       	movw	r6, r22
    2df6:	c8 0e       	add	r12, r24
    2df8:	d9 1e       	adc	r13, r25
    2dfa:	ea 1e       	adc	r14, r26
    2dfc:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2dfe:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2e02:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e06:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e0a:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e0e:	c8 16       	cp	r12, r24
    2e10:	d9 06       	cpc	r13, r25
    2e12:	ea 06       	cpc	r14, r26
    2e14:	fb 06       	cpc	r15, r27
    2e16:	81 f4       	brne	.+32     	; 0x2e38 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2e18:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1a:	80 31       	cpi	r24, 0x10	; 16
    2e1c:	a1 f4       	brne	.+40     	; 0x2e46 <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2e1e:	b3 01       	movw	r22, r6
    2e20:	a2 01       	movw	r20, r4
    2e22:	55 27       	eor	r21, r21
    2e24:	66 27       	eor	r22, r22
    2e26:	77 27       	eor	r23, r23
    2e28:	44 0f       	add	r20, r20
    2e2a:	55 1f       	adc	r21, r21
    2e2c:	fa 01       	movw	r30, r20
    2e2e:	eb 5d       	subi	r30, 0xDB	; 219
    2e30:	f8 4f       	sbci	r31, 0xF8	; 248
    2e32:	91 82       	std	Z+1, r9	; 0x01
    2e34:	80 82       	st	Z, r8
    2e36:	18 c0       	rjmp	.+48     	; 0x2e68 <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	c7 01       	movw	r24, r14
    2e3c:	b6 01       	movw	r22, r12
    2e3e:	e3 de       	rcall	.-570    	; 0x2c06 <_ZN8SdVolume13cacheRawBlockEmh>
    2e40:	81 11       	cpse	r24, r1
    2e42:	ea cf       	rjmp	.-44     	; 0x2e18 <_ZN8SdVolume6fatPutEmm+0x9c>
    2e44:	b1 cf       	rjmp	.-158    	; 0x2da8 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2e46:	b3 01       	movw	r22, r6
    2e48:	a2 01       	movw	r20, r4
    2e4a:	4f 77       	andi	r20, 0x7F	; 127
    2e4c:	55 27       	eor	r21, r21
    2e4e:	66 27       	eor	r22, r22
    2e50:	77 27       	eor	r23, r23
    2e52:	44 0f       	add	r20, r20
    2e54:	55 1f       	adc	r21, r21
    2e56:	44 0f       	add	r20, r20
    2e58:	55 1f       	adc	r21, r21
    2e5a:	fa 01       	movw	r30, r20
    2e5c:	eb 5d       	subi	r30, 0xDB	; 219
    2e5e:	f8 4f       	sbci	r31, 0xF8	; 248
    2e60:	80 82       	st	Z, r8
    2e62:	91 82       	std	Z+1, r9	; 0x01
    2e64:	a2 82       	std	Z+2, r10	; 0x02
    2e66:	b3 82       	std	Z+3, r11	; 0x03
    2e68:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
    2e6c:	81 60       	ori	r24, 0x01	; 1
    2e6e:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2e72:	8a 89       	ldd	r24, Y+18	; 0x12
    2e74:	82 30       	cpi	r24, 0x02	; 2
    2e76:	80 f0       	brcs	.+32     	; 0x2e98 <_ZN8SdVolume6fatPutEmm+0x11c>
    2e78:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7c:	af 81       	ldd	r26, Y+7	; 0x07
    2e7e:	b8 85       	ldd	r27, Y+8	; 0x08
    2e80:	c8 0e       	add	r12, r24
    2e82:	d9 1e       	adc	r13, r25
    2e84:	ea 1e       	adc	r14, r26
    2e86:	fb 1e       	adc	r15, r27
    2e88:	c0 92 1e 07 	sts	0x071E, r12	; 0x80071e <_ZN8SdVolume17cacheMirrorBlock_E>
    2e8c:	d0 92 1f 07 	sts	0x071F, r13	; 0x80071f <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2e90:	e0 92 20 07 	sts	0x0720, r14	; 0x800720 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2e94:	f0 92 21 07 	sts	0x0721, r15	; 0x800721 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
}
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	ef 90       	pop	r14
    2ea6:	df 90       	pop	r13
    2ea8:	cf 90       	pop	r12
    2eaa:	bf 90       	pop	r11
    2eac:	af 90       	pop	r10
    2eae:	9f 90       	pop	r9
    2eb0:	8f 90       	pop	r8
    2eb2:	7f 90       	pop	r7
    2eb4:	6f 90       	pop	r6
    2eb6:	5f 90       	pop	r5
    2eb8:	4f 90       	pop	r4
    2eba:	08 95       	ret

00002ebc <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2ebc:	2f 92       	push	r2
    2ebe:	3f 92       	push	r3
    2ec0:	4f 92       	push	r4
    2ec2:	5f 92       	push	r5
    2ec4:	6f 92       	push	r6
    2ec6:	7f 92       	push	r7
    2ec8:	9f 92       	push	r9
    2eca:	af 92       	push	r10
    2ecc:	bf 92       	push	r11
    2ece:	cf 92       	push	r12
    2ed0:	df 92       	push	r13
    2ed2:	ef 92       	push	r14
    2ed4:	ff 92       	push	r15
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	60 97       	sbiw	r28, 0x10	; 16
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	5c 01       	movw	r10, r24
    2ef0:	49 87       	std	Y+9, r20	; 0x09
    2ef2:	5a 87       	std	Y+10, r21	; 0x0a
    2ef4:	6b 87       	std	Y+11, r22	; 0x0b
    2ef6:	7c 87       	std	Y+12, r23	; 0x0c
    2ef8:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2efa:	d9 01       	movw	r26, r18
    2efc:	cd 90       	ld	r12, X+
    2efe:	dd 90       	ld	r13, X+
    2f00:	ed 90       	ld	r14, X+
    2f02:	fc 90       	ld	r15, X
    2f04:	c1 14       	cp	r12, r1
    2f06:	d1 04       	cpc	r13, r1
    2f08:	e1 04       	cpc	r14, r1
    2f0a:	f1 04       	cpc	r15, r1
    2f0c:	31 f0       	breq	.+12     	; 0x2f1a <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2f0e:	bf ef       	ldi	r27, 0xFF	; 255
    2f10:	cb 1a       	sub	r12, r27
    2f12:	db 0a       	sbc	r13, r27
    2f14:	eb 0a       	sbc	r14, r27
    2f16:	fb 0a       	sbc	r15, r27
    2f18:	10 c0       	rjmp	.+32     	; 0x2f3a <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	c0 80       	ld	r12, Z
    2f1e:	d1 80       	ldd	r13, Z+1	; 0x01
    2f20:	e2 80       	ldd	r14, Z+2	; 0x02
    2f22:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2f24:	99 24       	eor	r9, r9
    2f26:	93 94       	inc	r9
    2f28:	09 85       	ldd	r16, Y+9	; 0x09
    2f2a:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f30:	01 30       	cpi	r16, 0x01	; 1
    2f32:	11 05       	cpc	r17, r1
    2f34:	21 05       	cpc	r18, r1
    2f36:	31 05       	cpc	r19, r1
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <_ZN8SdVolume15allocContiguousEmPm+0x80>
    2f3a:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2f3c:	f5 01       	movw	r30, r10
    2f3e:	81 85       	ldd	r24, Z+9	; 0x09
    2f40:	92 85       	ldd	r25, Z+10	; 0x0a
    2f42:	a3 85       	ldd	r26, Z+11	; 0x0b
    2f44:	b4 85       	ldd	r27, Z+12	; 0x0c
    2f46:	8c 01       	movw	r16, r24
    2f48:	9d 01       	movw	r18, r26
    2f4a:	0f 5f       	subi	r16, 0xFF	; 255
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	2f 4f       	sbci	r18, 0xFF	; 255
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	0d 87       	std	Y+13, r16	; 0x0d
    2f54:	1e 87       	std	Y+14, r17	; 0x0e
    2f56:	2f 87       	std	Y+15, r18	; 0x0f
    2f58:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2f5a:	26 01       	movw	r4, r12
    2f5c:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2f5e:	1d 82       	std	Y+5, r1	; 0x05
    2f60:	1e 82       	std	Y+6, r1	; 0x06
    2f62:	1f 82       	std	Y+7, r1	; 0x07
    2f64:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2f66:	f5 01       	movw	r30, r10
    2f68:	81 85       	ldd	r24, Z+9	; 0x09
    2f6a:	92 85       	ldd	r25, Z+10	; 0x0a
    2f6c:	a3 85       	ldd	r26, Z+11	; 0x0b
    2f6e:	b4 85       	ldd	r27, Z+12	; 0x0c
    2f70:	0d 81       	ldd	r16, Y+5	; 0x05
    2f72:	1e 81       	ldd	r17, Y+6	; 0x06
    2f74:	2f 81       	ldd	r18, Y+7	; 0x07
    2f76:	38 85       	ldd	r19, Y+8	; 0x08
    2f78:	08 17       	cp	r16, r24
    2f7a:	19 07       	cpc	r17, r25
    2f7c:	2a 07       	cpc	r18, r26
    2f7e:	3b 07       	cpc	r19, r27
    2f80:	08 f0       	brcs	.+2      	; 0x2f84 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2f82:	54 c0       	rjmp	.+168    	; 0x302c <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2f84:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f86:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f88:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f8a:	58 89       	ldd	r21, Y+16	; 0x10
    2f8c:	24 15       	cp	r18, r4
    2f8e:	35 05       	cpc	r19, r5
    2f90:	46 05       	cpc	r20, r6
    2f92:	57 05       	cpc	r21, r7
    2f94:	50 f4       	brcc	.+20     	; 0x2faa <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	48 2e       	mov	r4, r24
    2f9a:	51 2c       	mov	r5, r1
    2f9c:	61 2c       	mov	r6, r1
    2f9e:	71 2c       	mov	r7, r1
    2fa0:	92 e0       	ldi	r25, 0x02	; 2
    2fa2:	c9 2e       	mov	r12, r25
    2fa4:	d1 2c       	mov	r13, r1
    2fa6:	e1 2c       	mov	r14, r1
    2fa8:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2faa:	9e 01       	movw	r18, r28
    2fac:	2f 5f       	subi	r18, 0xFF	; 255
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	b3 01       	movw	r22, r6
    2fb2:	a2 01       	movw	r20, r4
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	60 de       	rcall	.-832    	; 0x2c78 <_ZNK8SdVolume6fatGetEmPm>
    2fb8:	88 23       	and	r24, r24
    2fba:	c1 f1       	breq	.+112    	; 0x302c <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    2fbc:	49 81       	ldd	r20, Y+1	; 0x01
    2fbe:	5a 81       	ldd	r21, Y+2	; 0x02
    2fc0:	6b 81       	ldd	r22, Y+3	; 0x03
    2fc2:	7c 81       	ldd	r23, Y+4	; 0x04
    2fc4:	d3 01       	movw	r26, r6
    2fc6:	c2 01       	movw	r24, r4
    2fc8:	01 96       	adiw	r24, 0x01	; 1
    2fca:	a1 1d       	adc	r26, r1
    2fcc:	b1 1d       	adc	r27, r1
    2fce:	45 2b       	or	r20, r21
    2fd0:	46 2b       	or	r20, r22
    2fd2:	47 2b       	or	r20, r23
    2fd4:	19 f0       	breq	.+6      	; 0x2fdc <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2fd6:	6c 01       	movw	r12, r24
    2fd8:	7d 01       	movw	r14, r26
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    2fdc:	ac 01       	movw	r20, r24
    2fde:	bd 01       	movw	r22, r26
    2fe0:	4c 19       	sub	r20, r12
    2fe2:	5d 09       	sbc	r21, r13
    2fe4:	6e 09       	sbc	r22, r14
    2fe6:	7f 09       	sbc	r23, r15
    2fe8:	09 85       	ldd	r16, Y+9	; 0x09
    2fea:	1a 85       	ldd	r17, Y+10	; 0x0a
    2fec:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fee:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ff0:	04 17       	cp	r16, r20
    2ff2:	15 07       	cpc	r17, r21
    2ff4:	26 07       	cpc	r18, r22
    2ff6:	37 07       	cpc	r19, r23
    2ff8:	79 f0       	breq	.+30     	; 0x3018 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2ffa:	2d 81       	ldd	r18, Y+5	; 0x05
    2ffc:	3e 81       	ldd	r19, Y+6	; 0x06
    2ffe:	4f 81       	ldd	r20, Y+7	; 0x07
    3000:	58 85       	ldd	r21, Y+8	; 0x08
    3002:	2f 5f       	subi	r18, 0xFF	; 255
    3004:	3f 4f       	sbci	r19, 0xFF	; 255
    3006:	4f 4f       	sbci	r20, 0xFF	; 255
    3008:	5f 4f       	sbci	r21, 0xFF	; 255
    300a:	2d 83       	std	Y+5, r18	; 0x05
    300c:	3e 83       	std	Y+6, r19	; 0x06
    300e:	4f 83       	std	Y+7, r20	; 0x07
    3010:	58 87       	std	Y+8, r21	; 0x08
    3012:	2c 01       	movw	r4, r24
    3014:	3d 01       	movw	r6, r26
    3016:	a7 cf       	rjmp	.-178    	; 0x2f66 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    3018:	0f ef       	ldi	r16, 0xFF	; 255
    301a:	1f ef       	ldi	r17, 0xFF	; 255
    301c:	2f ef       	ldi	r18, 0xFF	; 255
    301e:	3f e0       	ldi	r19, 0x0F	; 15
    3020:	b3 01       	movw	r22, r6
    3022:	a2 01       	movw	r20, r4
    3024:	c5 01       	movw	r24, r10
    3026:	aa de       	rcall	.-684    	; 0x2d7c <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    3028:	81 11       	cpse	r24, r1
    302a:	17 c0       	rjmp	.+46     	; 0x305a <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	3f c0       	rjmp	.+126    	; 0x30ae <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3030:	d3 01       	movw	r26, r6
    3032:	c2 01       	movw	r24, r4
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	a1 09       	sbc	r26, r1
    3038:	b1 09       	sbc	r27, r1
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	af 83       	std	Y+7, r26	; 0x07
    3040:	b8 87       	std	Y+8, r27	; 0x08
    3042:	93 01       	movw	r18, r6
    3044:	82 01       	movw	r16, r4
    3046:	ac 01       	movw	r20, r24
    3048:	bd 01       	movw	r22, r26
    304a:	c5 01       	movw	r24, r10
    304c:	97 de       	rcall	.-722    	; 0x2d7c <_ZN8SdVolume6fatPutEmm>
    304e:	88 23       	and	r24, r24
    3050:	69 f3       	breq	.-38     	; 0x302c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    3052:	4d 80       	ldd	r4, Y+5	; 0x05
    3054:	5e 80       	ldd	r5, Y+6	; 0x06
    3056:	6f 80       	ldd	r6, Y+7	; 0x07
    3058:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    305a:	c4 14       	cp	r12, r4
    305c:	d5 04       	cpc	r13, r5
    305e:	e6 04       	cpc	r14, r6
    3060:	f7 04       	cpc	r15, r7
    3062:	30 f3       	brcs	.-52     	; 0x3030 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    3064:	d1 01       	movw	r26, r2
    3066:	4d 91       	ld	r20, X+
    3068:	5d 91       	ld	r21, X+
    306a:	6d 91       	ld	r22, X+
    306c:	7c 91       	ld	r23, X
    306e:	41 15       	cp	r20, r1
    3070:	51 05       	cpc	r21, r1
    3072:	61 05       	cpc	r22, r1
    3074:	71 05       	cpc	r23, r1
    3076:	99 f4       	brne	.+38     	; 0x309e <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3078:	f1 01       	movw	r30, r2
    307a:	c0 82       	st	Z, r12
    307c:	d1 82       	std	Z+1, r13	; 0x01
    307e:	e2 82       	std	Z+2, r14	; 0x02
    3080:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3082:	99 20       	and	r9, r9
    3084:	99 f0       	breq	.+38     	; 0x30ac <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    3086:	ff ef       	ldi	r31, 0xFF	; 255
    3088:	cf 1a       	sub	r12, r31
    308a:	df 0a       	sbc	r13, r31
    308c:	ef 0a       	sbc	r14, r31
    308e:	ff 0a       	sbc	r15, r31
    3090:	d5 01       	movw	r26, r10
    3092:	cd 92       	st	X+, r12
    3094:	dd 92       	st	X+, r13
    3096:	ed 92       	st	X+, r14
    3098:	fc 92       	st	X, r15
    309a:	13 97       	sbiw	r26, 0x03	; 3
    309c:	07 c0       	rjmp	.+14     	; 0x30ac <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    309e:	97 01       	movw	r18, r14
    30a0:	86 01       	movw	r16, r12
    30a2:	c5 01       	movw	r24, r10
    30a4:	6b de       	rcall	.-810    	; 0x2d7c <_ZN8SdVolume6fatPutEmm>
    30a6:	81 11       	cpse	r24, r1
    30a8:	e7 cf       	rjmp	.-50     	; 0x3078 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    30aa:	c0 cf       	rjmp	.-128    	; 0x302c <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
}
    30ae:	60 96       	adiw	r28, 0x10	; 16
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	df 90       	pop	r13
    30c8:	cf 90       	pop	r12
    30ca:	bf 90       	pop	r11
    30cc:	af 90       	pop	r10
    30ce:	9f 90       	pop	r9
    30d0:	7f 90       	pop	r7
    30d2:	6f 90       	pop	r6
    30d4:	5f 90       	pop	r5
    30d6:	4f 90       	pop	r4
    30d8:	3f 90       	pop	r3
    30da:	2f 90       	pop	r2
    30dc:	08 95       	ret

000030de <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    30de:	cf 93       	push	r28
  uint8_t sreg = SREG;
    30e0:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    30e2:	f8 94       	cli
  if (!initialized) {
    30e4:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <_ZN8SPIClass11initializedE>
    30e8:	81 11       	cpse	r24, r1
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    30ec:	e5 ed       	ldi	r30, 0xD5	; 213
    30ee:	f1 e0       	ldi	r31, 0x01	; 1
    30f0:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    30f2:	ef e8       	ldi	r30, 0x8F	; 143
    30f4:	f1 e0       	ldi	r31, 0x01	; 1
    30f6:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    30f8:	e8 2f       	mov	r30, r24
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	ee 0f       	add	r30, r30
    30fe:	ff 1f       	adc	r31, r31
    3100:	e6 5e       	subi	r30, 0xE6	; 230
    3102:	fd 4f       	sbci	r31, 0xFD	; 253
    3104:	a5 91       	lpm	r26, Z+
    3106:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3108:	ec 91       	ld	r30, X
    310a:	e9 23       	and	r30, r25
    310c:	21 f4       	brne	.+8      	; 0x3116 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    310e:	61 e0       	ldi	r22, 0x01	; 1
    3110:	85 e3       	ldi	r24, 0x35	; 53
    3112:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	85 e3       	ldi	r24, 0x35	; 53
    311a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    311e:	8c b5       	in	r24, 0x2c	; 44
    3120:	80 61       	ori	r24, 0x10	; 16
    3122:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3124:	8c b5       	in	r24, 0x2c	; 44
    3126:	80 64       	ori	r24, 0x40	; 64
    3128:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    312a:	61 e0       	ldi	r22, 0x01	; 1
    312c:	84 e3       	ldi	r24, 0x34	; 52
    312e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>
    pinMode(MOSI, OUTPUT);
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	83 e3       	ldi	r24, 0x33	; 51
    3136:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pinMode>
  }
  initialized++; // reference count
    313a:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <_ZN8SPIClass11initializedE>
    313e:	8f 5f       	subi	r24, 0xFF	; 255
    3140:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3144:	cf bf       	out	0x3f, r28	; 63
}
    3146:	cf 91       	pop	r28
    3148:	08 95       	ret

0000314a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    314a:	08 95       	ret

0000314c <__udivmodsi4>:
    314c:	a1 e2       	ldi	r26, 0x21	; 33
    314e:	1a 2e       	mov	r1, r26
    3150:	aa 1b       	sub	r26, r26
    3152:	bb 1b       	sub	r27, r27
    3154:	fd 01       	movw	r30, r26
    3156:	0d c0       	rjmp	.+26     	; 0x3172 <__udivmodsi4_ep>

00003158 <__udivmodsi4_loop>:
    3158:	aa 1f       	adc	r26, r26
    315a:	bb 1f       	adc	r27, r27
    315c:	ee 1f       	adc	r30, r30
    315e:	ff 1f       	adc	r31, r31
    3160:	a2 17       	cp	r26, r18
    3162:	b3 07       	cpc	r27, r19
    3164:	e4 07       	cpc	r30, r20
    3166:	f5 07       	cpc	r31, r21
    3168:	20 f0       	brcs	.+8      	; 0x3172 <__udivmodsi4_ep>
    316a:	a2 1b       	sub	r26, r18
    316c:	b3 0b       	sbc	r27, r19
    316e:	e4 0b       	sbc	r30, r20
    3170:	f5 0b       	sbc	r31, r21

00003172 <__udivmodsi4_ep>:
    3172:	66 1f       	adc	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	1a 94       	dec	r1
    317c:	69 f7       	brne	.-38     	; 0x3158 <__udivmodsi4_loop>
    317e:	60 95       	com	r22
    3180:	70 95       	com	r23
    3182:	80 95       	com	r24
    3184:	90 95       	com	r25
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	bd 01       	movw	r22, r26
    318c:	cf 01       	movw	r24, r30
    318e:	08 95       	ret

00003190 <__tablejump2__>:
    3190:	ee 0f       	add	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	88 1f       	adc	r24, r24
    3196:	8b bf       	out	0x3b, r24	; 59
    3198:	07 90       	elpm	r0, Z+
    319a:	f6 91       	elpm	r31, Z
    319c:	e0 2d       	mov	r30, r0
    319e:	19 94       	eijmp

000031a0 <malloc>:
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	82 30       	cpi	r24, 0x02	; 2
    31aa:	91 05       	cpc	r25, r1
    31ac:	10 f4       	brcc	.+4      	; 0x31b2 <malloc+0x12>
    31ae:	82 e0       	ldi	r24, 0x02	; 2
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	e0 91 2b 09 	lds	r30, 0x092B	; 0x80092b <__flp>
    31b6:	f0 91 2c 09 	lds	r31, 0x092C	; 0x80092c <__flp+0x1>
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	a0 e0       	ldi	r26, 0x00	; 0
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	30 97       	sbiw	r30, 0x00	; 0
    31c4:	19 f1       	breq	.+70     	; 0x320c <malloc+0x6c>
    31c6:	40 81       	ld	r20, Z
    31c8:	51 81       	ldd	r21, Z+1	; 0x01
    31ca:	02 81       	ldd	r16, Z+2	; 0x02
    31cc:	13 81       	ldd	r17, Z+3	; 0x03
    31ce:	48 17       	cp	r20, r24
    31d0:	59 07       	cpc	r21, r25
    31d2:	c8 f0       	brcs	.+50     	; 0x3206 <malloc+0x66>
    31d4:	84 17       	cp	r24, r20
    31d6:	95 07       	cpc	r25, r21
    31d8:	69 f4       	brne	.+26     	; 0x31f4 <malloc+0x54>
    31da:	10 97       	sbiw	r26, 0x00	; 0
    31dc:	31 f0       	breq	.+12     	; 0x31ea <malloc+0x4a>
    31de:	12 96       	adiw	r26, 0x02	; 2
    31e0:	0c 93       	st	X, r16
    31e2:	12 97       	sbiw	r26, 0x02	; 2
    31e4:	13 96       	adiw	r26, 0x03	; 3
    31e6:	1c 93       	st	X, r17
    31e8:	27 c0       	rjmp	.+78     	; 0x3238 <malloc+0x98>
    31ea:	00 93 2b 09 	sts	0x092B, r16	; 0x80092b <__flp>
    31ee:	10 93 2c 09 	sts	0x092C, r17	; 0x80092c <__flp+0x1>
    31f2:	22 c0       	rjmp	.+68     	; 0x3238 <malloc+0x98>
    31f4:	21 15       	cp	r18, r1
    31f6:	31 05       	cpc	r19, r1
    31f8:	19 f0       	breq	.+6      	; 0x3200 <malloc+0x60>
    31fa:	42 17       	cp	r20, r18
    31fc:	53 07       	cpc	r21, r19
    31fe:	18 f4       	brcc	.+6      	; 0x3206 <malloc+0x66>
    3200:	9a 01       	movw	r18, r20
    3202:	bd 01       	movw	r22, r26
    3204:	ef 01       	movw	r28, r30
    3206:	df 01       	movw	r26, r30
    3208:	f8 01       	movw	r30, r16
    320a:	db cf       	rjmp	.-74     	; 0x31c2 <malloc+0x22>
    320c:	21 15       	cp	r18, r1
    320e:	31 05       	cpc	r19, r1
    3210:	f9 f0       	breq	.+62     	; 0x3250 <malloc+0xb0>
    3212:	28 1b       	sub	r18, r24
    3214:	39 0b       	sbc	r19, r25
    3216:	24 30       	cpi	r18, 0x04	; 4
    3218:	31 05       	cpc	r19, r1
    321a:	80 f4       	brcc	.+32     	; 0x323c <malloc+0x9c>
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	9b 81       	ldd	r25, Y+3	; 0x03
    3220:	61 15       	cp	r22, r1
    3222:	71 05       	cpc	r23, r1
    3224:	21 f0       	breq	.+8      	; 0x322e <malloc+0x8e>
    3226:	fb 01       	movw	r30, r22
    3228:	93 83       	std	Z+3, r25	; 0x03
    322a:	82 83       	std	Z+2, r24	; 0x02
    322c:	04 c0       	rjmp	.+8      	; 0x3236 <malloc+0x96>
    322e:	90 93 2c 09 	sts	0x092C, r25	; 0x80092c <__flp+0x1>
    3232:	80 93 2b 09 	sts	0x092B, r24	; 0x80092b <__flp>
    3236:	fe 01       	movw	r30, r28
    3238:	32 96       	adiw	r30, 0x02	; 2
    323a:	44 c0       	rjmp	.+136    	; 0x32c4 <malloc+0x124>
    323c:	fe 01       	movw	r30, r28
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	81 93       	st	Z+, r24
    3244:	91 93       	st	Z+, r25
    3246:	22 50       	subi	r18, 0x02	; 2
    3248:	31 09       	sbc	r19, r1
    324a:	39 83       	std	Y+1, r19	; 0x01
    324c:	28 83       	st	Y, r18
    324e:	3a c0       	rjmp	.+116    	; 0x32c4 <malloc+0x124>
    3250:	20 91 29 09 	lds	r18, 0x0929	; 0x800929 <__brkval>
    3254:	30 91 2a 09 	lds	r19, 0x092A	; 0x80092a <__brkval+0x1>
    3258:	23 2b       	or	r18, r19
    325a:	41 f4       	brne	.+16     	; 0x326c <malloc+0xcc>
    325c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3260:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3264:	30 93 2a 09 	sts	0x092A, r19	; 0x80092a <__brkval+0x1>
    3268:	20 93 29 09 	sts	0x0929, r18	; 0x800929 <__brkval>
    326c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3270:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3274:	21 15       	cp	r18, r1
    3276:	31 05       	cpc	r19, r1
    3278:	41 f4       	brne	.+16     	; 0x328a <malloc+0xea>
    327a:	2d b7       	in	r18, 0x3d	; 61
    327c:	3e b7       	in	r19, 0x3e	; 62
    327e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3282:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3286:	24 1b       	sub	r18, r20
    3288:	35 0b       	sbc	r19, r21
    328a:	e0 91 29 09 	lds	r30, 0x0929	; 0x800929 <__brkval>
    328e:	f0 91 2a 09 	lds	r31, 0x092A	; 0x80092a <__brkval+0x1>
    3292:	e2 17       	cp	r30, r18
    3294:	f3 07       	cpc	r31, r19
    3296:	a0 f4       	brcc	.+40     	; 0x32c0 <malloc+0x120>
    3298:	2e 1b       	sub	r18, r30
    329a:	3f 0b       	sbc	r19, r31
    329c:	28 17       	cp	r18, r24
    329e:	39 07       	cpc	r19, r25
    32a0:	78 f0       	brcs	.+30     	; 0x32c0 <malloc+0x120>
    32a2:	ac 01       	movw	r20, r24
    32a4:	4e 5f       	subi	r20, 0xFE	; 254
    32a6:	5f 4f       	sbci	r21, 0xFF	; 255
    32a8:	24 17       	cp	r18, r20
    32aa:	35 07       	cpc	r19, r21
    32ac:	48 f0       	brcs	.+18     	; 0x32c0 <malloc+0x120>
    32ae:	4e 0f       	add	r20, r30
    32b0:	5f 1f       	adc	r21, r31
    32b2:	50 93 2a 09 	sts	0x092A, r21	; 0x80092a <__brkval+0x1>
    32b6:	40 93 29 09 	sts	0x0929, r20	; 0x800929 <__brkval>
    32ba:	81 93       	st	Z+, r24
    32bc:	91 93       	st	Z+, r25
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <malloc+0x124>
    32c0:	e0 e0       	ldi	r30, 0x00	; 0
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	cf 01       	movw	r24, r30
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	0f 91       	pop	r16
    32ce:	08 95       	ret

000032d0 <free>:
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	00 97       	sbiw	r24, 0x00	; 0
    32d6:	09 f4       	brne	.+2      	; 0x32da <free+0xa>
    32d8:	81 c0       	rjmp	.+258    	; 0x33dc <free+0x10c>
    32da:	fc 01       	movw	r30, r24
    32dc:	32 97       	sbiw	r30, 0x02	; 2
    32de:	13 82       	std	Z+3, r1	; 0x03
    32e0:	12 82       	std	Z+2, r1	; 0x02
    32e2:	a0 91 2b 09 	lds	r26, 0x092B	; 0x80092b <__flp>
    32e6:	b0 91 2c 09 	lds	r27, 0x092C	; 0x80092c <__flp+0x1>
    32ea:	10 97       	sbiw	r26, 0x00	; 0
    32ec:	81 f4       	brne	.+32     	; 0x330e <free+0x3e>
    32ee:	20 81       	ld	r18, Z
    32f0:	31 81       	ldd	r19, Z+1	; 0x01
    32f2:	82 0f       	add	r24, r18
    32f4:	93 1f       	adc	r25, r19
    32f6:	20 91 29 09 	lds	r18, 0x0929	; 0x800929 <__brkval>
    32fa:	30 91 2a 09 	lds	r19, 0x092A	; 0x80092a <__brkval+0x1>
    32fe:	28 17       	cp	r18, r24
    3300:	39 07       	cpc	r19, r25
    3302:	51 f5       	brne	.+84     	; 0x3358 <free+0x88>
    3304:	f0 93 2a 09 	sts	0x092A, r31	; 0x80092a <__brkval+0x1>
    3308:	e0 93 29 09 	sts	0x0929, r30	; 0x800929 <__brkval>
    330c:	67 c0       	rjmp	.+206    	; 0x33dc <free+0x10c>
    330e:	ed 01       	movw	r28, r26
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	ce 17       	cp	r28, r30
    3316:	df 07       	cpc	r29, r31
    3318:	40 f4       	brcc	.+16     	; 0x332a <free+0x5a>
    331a:	4a 81       	ldd	r20, Y+2	; 0x02
    331c:	5b 81       	ldd	r21, Y+3	; 0x03
    331e:	9e 01       	movw	r18, r28
    3320:	41 15       	cp	r20, r1
    3322:	51 05       	cpc	r21, r1
    3324:	f1 f0       	breq	.+60     	; 0x3362 <free+0x92>
    3326:	ea 01       	movw	r28, r20
    3328:	f5 cf       	rjmp	.-22     	; 0x3314 <free+0x44>
    332a:	d3 83       	std	Z+3, r29	; 0x03
    332c:	c2 83       	std	Z+2, r28	; 0x02
    332e:	40 81       	ld	r20, Z
    3330:	51 81       	ldd	r21, Z+1	; 0x01
    3332:	84 0f       	add	r24, r20
    3334:	95 1f       	adc	r25, r21
    3336:	c8 17       	cp	r28, r24
    3338:	d9 07       	cpc	r29, r25
    333a:	59 f4       	brne	.+22     	; 0x3352 <free+0x82>
    333c:	88 81       	ld	r24, Y
    333e:	99 81       	ldd	r25, Y+1	; 0x01
    3340:	84 0f       	add	r24, r20
    3342:	95 1f       	adc	r25, r21
    3344:	02 96       	adiw	r24, 0x02	; 2
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	9b 81       	ldd	r25, Y+3	; 0x03
    334e:	93 83       	std	Z+3, r25	; 0x03
    3350:	82 83       	std	Z+2, r24	; 0x02
    3352:	21 15       	cp	r18, r1
    3354:	31 05       	cpc	r19, r1
    3356:	29 f4       	brne	.+10     	; 0x3362 <free+0x92>
    3358:	f0 93 2c 09 	sts	0x092C, r31	; 0x80092c <__flp+0x1>
    335c:	e0 93 2b 09 	sts	0x092B, r30	; 0x80092b <__flp>
    3360:	3d c0       	rjmp	.+122    	; 0x33dc <free+0x10c>
    3362:	e9 01       	movw	r28, r18
    3364:	fb 83       	std	Y+3, r31	; 0x03
    3366:	ea 83       	std	Y+2, r30	; 0x02
    3368:	49 91       	ld	r20, Y+
    336a:	59 91       	ld	r21, Y+
    336c:	c4 0f       	add	r28, r20
    336e:	d5 1f       	adc	r29, r21
    3370:	ec 17       	cp	r30, r28
    3372:	fd 07       	cpc	r31, r29
    3374:	61 f4       	brne	.+24     	; 0x338e <free+0xbe>
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	84 0f       	add	r24, r20
    337c:	95 1f       	adc	r25, r21
    337e:	02 96       	adiw	r24, 0x02	; 2
    3380:	e9 01       	movw	r28, r18
    3382:	99 83       	std	Y+1, r25	; 0x01
    3384:	88 83       	st	Y, r24
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	9b 83       	std	Y+3, r25	; 0x03
    338c:	8a 83       	std	Y+2, r24	; 0x02
    338e:	e0 e0       	ldi	r30, 0x00	; 0
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	12 96       	adiw	r26, 0x02	; 2
    3394:	8d 91       	ld	r24, X+
    3396:	9c 91       	ld	r25, X
    3398:	13 97       	sbiw	r26, 0x03	; 3
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	19 f0       	breq	.+6      	; 0x33a4 <free+0xd4>
    339e:	fd 01       	movw	r30, r26
    33a0:	dc 01       	movw	r26, r24
    33a2:	f7 cf       	rjmp	.-18     	; 0x3392 <free+0xc2>
    33a4:	8d 91       	ld	r24, X+
    33a6:	9c 91       	ld	r25, X
    33a8:	11 97       	sbiw	r26, 0x01	; 1
    33aa:	9d 01       	movw	r18, r26
    33ac:	2e 5f       	subi	r18, 0xFE	; 254
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	82 0f       	add	r24, r18
    33b2:	93 1f       	adc	r25, r19
    33b4:	20 91 29 09 	lds	r18, 0x0929	; 0x800929 <__brkval>
    33b8:	30 91 2a 09 	lds	r19, 0x092A	; 0x80092a <__brkval+0x1>
    33bc:	28 17       	cp	r18, r24
    33be:	39 07       	cpc	r19, r25
    33c0:	69 f4       	brne	.+26     	; 0x33dc <free+0x10c>
    33c2:	30 97       	sbiw	r30, 0x00	; 0
    33c4:	29 f4       	brne	.+10     	; 0x33d0 <free+0x100>
    33c6:	10 92 2c 09 	sts	0x092C, r1	; 0x80092c <__flp+0x1>
    33ca:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__flp>
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <free+0x104>
    33d0:	13 82       	std	Z+3, r1	; 0x03
    33d2:	12 82       	std	Z+2, r1	; 0x02
    33d4:	b0 93 2a 09 	sts	0x092A, r27	; 0x80092a <__brkval+0x1>
    33d8:	a0 93 29 09 	sts	0x0929, r26	; 0x800929 <__brkval>
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <realloc>:
    33e2:	6f 92       	push	r6
    33e4:	7f 92       	push	r7
    33e6:	8f 92       	push	r8
    33e8:	9f 92       	push	r9
    33ea:	af 92       	push	r10
    33ec:	bf 92       	push	r11
    33ee:	cf 92       	push	r12
    33f0:	df 92       	push	r13
    33f2:	ef 92       	push	r14
    33f4:	ff 92       	push	r15
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	81 f4       	brne	.+32     	; 0x3422 <realloc+0x40>
    3402:	cb 01       	movw	r24, r22
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	bf 90       	pop	r11
    3416:	af 90       	pop	r10
    3418:	9f 90       	pop	r9
    341a:	8f 90       	pop	r8
    341c:	7f 90       	pop	r7
    341e:	6f 90       	pop	r6
    3420:	bf ce       	rjmp	.-642    	; 0x31a0 <malloc>
    3422:	fc 01       	movw	r30, r24
    3424:	e6 0f       	add	r30, r22
    3426:	f7 1f       	adc	r31, r23
    3428:	9c 01       	movw	r18, r24
    342a:	22 50       	subi	r18, 0x02	; 2
    342c:	31 09       	sbc	r19, r1
    342e:	e2 17       	cp	r30, r18
    3430:	f3 07       	cpc	r31, r19
    3432:	08 f4       	brcc	.+2      	; 0x3436 <realloc+0x54>
    3434:	a5 c0       	rjmp	.+330    	; 0x3580 <realloc+0x19e>
    3436:	ec 01       	movw	r28, r24
    3438:	d9 01       	movw	r26, r18
    343a:	0d 91       	ld	r16, X+
    343c:	1c 91       	ld	r17, X
    343e:	11 97       	sbiw	r26, 0x01	; 1
    3440:	06 17       	cp	r16, r22
    3442:	17 07       	cpc	r17, r23
    3444:	a8 f0       	brcs	.+42     	; 0x3470 <realloc+0x8e>
    3446:	05 30       	cpi	r16, 0x05	; 5
    3448:	11 05       	cpc	r17, r1
    344a:	08 f4       	brcc	.+2      	; 0x344e <realloc+0x6c>
    344c:	97 c0       	rjmp	.+302    	; 0x357c <realloc+0x19a>
    344e:	c8 01       	movw	r24, r16
    3450:	04 97       	sbiw	r24, 0x04	; 4
    3452:	86 17       	cp	r24, r22
    3454:	97 07       	cpc	r25, r23
    3456:	08 f4       	brcc	.+2      	; 0x345a <realloc+0x78>
    3458:	91 c0       	rjmp	.+290    	; 0x357c <realloc+0x19a>
    345a:	02 50       	subi	r16, 0x02	; 2
    345c:	11 09       	sbc	r17, r1
    345e:	06 1b       	sub	r16, r22
    3460:	17 0b       	sbc	r17, r23
    3462:	01 93       	st	Z+, r16
    3464:	11 93       	st	Z+, r17
    3466:	6d 93       	st	X+, r22
    3468:	7c 93       	st	X, r23
    346a:	cf 01       	movw	r24, r30
    346c:	31 df       	rcall	.-414    	; 0x32d0 <free>
    346e:	86 c0       	rjmp	.+268    	; 0x357c <realloc+0x19a>
    3470:	5b 01       	movw	r10, r22
    3472:	a0 1a       	sub	r10, r16
    3474:	b1 0a       	sbc	r11, r17
    3476:	4c 01       	movw	r8, r24
    3478:	80 0e       	add	r8, r16
    347a:	91 1e       	adc	r9, r17
    347c:	a0 91 2b 09 	lds	r26, 0x092B	; 0x80092b <__flp>
    3480:	b0 91 2c 09 	lds	r27, 0x092C	; 0x80092c <__flp+0x1>
    3484:	61 2c       	mov	r6, r1
    3486:	71 2c       	mov	r7, r1
    3488:	e1 2c       	mov	r14, r1
    348a:	f1 2c       	mov	r15, r1
    348c:	10 97       	sbiw	r26, 0x00	; 0
    348e:	09 f4       	brne	.+2      	; 0x3492 <realloc+0xb0>
    3490:	46 c0       	rjmp	.+140    	; 0x351e <realloc+0x13c>
    3492:	8d 91       	ld	r24, X+
    3494:	9c 91       	ld	r25, X
    3496:	11 97       	sbiw	r26, 0x01	; 1
    3498:	a8 15       	cp	r26, r8
    349a:	b9 05       	cpc	r27, r9
    349c:	b1 f5       	brne	.+108    	; 0x350a <realloc+0x128>
    349e:	6c 01       	movw	r12, r24
    34a0:	42 e0       	ldi	r20, 0x02	; 2
    34a2:	c4 0e       	add	r12, r20
    34a4:	d1 1c       	adc	r13, r1
    34a6:	ca 14       	cp	r12, r10
    34a8:	db 04       	cpc	r13, r11
    34aa:	78 f1       	brcs	.+94     	; 0x350a <realloc+0x128>
    34ac:	4c 01       	movw	r8, r24
    34ae:	8a 18       	sub	r8, r10
    34b0:	9b 08       	sbc	r9, r11
    34b2:	64 01       	movw	r12, r8
    34b4:	42 e0       	ldi	r20, 0x02	; 2
    34b6:	c4 0e       	add	r12, r20
    34b8:	d1 1c       	adc	r13, r1
    34ba:	12 96       	adiw	r26, 0x02	; 2
    34bc:	bc 90       	ld	r11, X
    34be:	12 97       	sbiw	r26, 0x02	; 2
    34c0:	13 96       	adiw	r26, 0x03	; 3
    34c2:	ac 91       	ld	r26, X
    34c4:	b5 e0       	ldi	r27, 0x05	; 5
    34c6:	cb 16       	cp	r12, r27
    34c8:	d1 04       	cpc	r13, r1
    34ca:	40 f0       	brcs	.+16     	; 0x34dc <realloc+0xfa>
    34cc:	b2 82       	std	Z+2, r11	; 0x02
    34ce:	a3 83       	std	Z+3, r26	; 0x03
    34d0:	91 82       	std	Z+1, r9	; 0x01
    34d2:	80 82       	st	Z, r8
    34d4:	d9 01       	movw	r26, r18
    34d6:	6d 93       	st	X+, r22
    34d8:	7c 93       	st	X, r23
    34da:	09 c0       	rjmp	.+18     	; 0x34ee <realloc+0x10c>
    34dc:	0e 5f       	subi	r16, 0xFE	; 254
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
    34e0:	80 0f       	add	r24, r16
    34e2:	91 1f       	adc	r25, r17
    34e4:	f9 01       	movw	r30, r18
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
    34ea:	eb 2d       	mov	r30, r11
    34ec:	fa 2f       	mov	r31, r26
    34ee:	e1 14       	cp	r14, r1
    34f0:	f1 04       	cpc	r15, r1
    34f2:	31 f0       	breq	.+12     	; 0x3500 <realloc+0x11e>
    34f4:	d7 01       	movw	r26, r14
    34f6:	13 96       	adiw	r26, 0x03	; 3
    34f8:	fc 93       	st	X, r31
    34fa:	ee 93       	st	-X, r30
    34fc:	12 97       	sbiw	r26, 0x02	; 2
    34fe:	3e c0       	rjmp	.+124    	; 0x357c <realloc+0x19a>
    3500:	f0 93 2c 09 	sts	0x092C, r31	; 0x80092c <__flp+0x1>
    3504:	e0 93 2b 09 	sts	0x092B, r30	; 0x80092b <__flp>
    3508:	39 c0       	rjmp	.+114    	; 0x357c <realloc+0x19a>
    350a:	68 16       	cp	r6, r24
    350c:	79 06       	cpc	r7, r25
    350e:	08 f4       	brcc	.+2      	; 0x3512 <realloc+0x130>
    3510:	3c 01       	movw	r6, r24
    3512:	7d 01       	movw	r14, r26
    3514:	12 96       	adiw	r26, 0x02	; 2
    3516:	0d 90       	ld	r0, X+
    3518:	bc 91       	ld	r27, X
    351a:	a0 2d       	mov	r26, r0
    351c:	b7 cf       	rjmp	.-146    	; 0x348c <realloc+0xaa>
    351e:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <__brkval>
    3522:	90 91 2a 09 	lds	r25, 0x092A	; 0x80092a <__brkval+0x1>
    3526:	88 16       	cp	r8, r24
    3528:	99 06       	cpc	r9, r25
    352a:	e1 f4       	brne	.+56     	; 0x3564 <realloc+0x182>
    352c:	66 16       	cp	r6, r22
    352e:	77 06       	cpc	r7, r23
    3530:	c8 f4       	brcc	.+50     	; 0x3564 <realloc+0x182>
    3532:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3536:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	41 f4       	brne	.+16     	; 0x354e <realloc+0x16c>
    353e:	8d b7       	in	r24, 0x3d	; 61
    3540:	9e b7       	in	r25, 0x3e	; 62
    3542:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3546:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    354a:	84 1b       	sub	r24, r20
    354c:	95 0b       	sbc	r25, r21
    354e:	e8 17       	cp	r30, r24
    3550:	f9 07       	cpc	r31, r25
    3552:	b0 f4       	brcc	.+44     	; 0x3580 <realloc+0x19e>
    3554:	f0 93 2a 09 	sts	0x092A, r31	; 0x80092a <__brkval+0x1>
    3558:	e0 93 29 09 	sts	0x0929, r30	; 0x800929 <__brkval>
    355c:	f9 01       	movw	r30, r18
    355e:	71 83       	std	Z+1, r23	; 0x01
    3560:	60 83       	st	Z, r22
    3562:	0c c0       	rjmp	.+24     	; 0x357c <realloc+0x19a>
    3564:	cb 01       	movw	r24, r22
    3566:	1c de       	rcall	.-968    	; 0x31a0 <malloc>
    3568:	7c 01       	movw	r14, r24
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	49 f0       	breq	.+18     	; 0x3580 <realloc+0x19e>
    356e:	a8 01       	movw	r20, r16
    3570:	be 01       	movw	r22, r28
    3572:	17 d0       	rcall	.+46     	; 0x35a2 <memcpy>
    3574:	ce 01       	movw	r24, r28
    3576:	ac de       	rcall	.-680    	; 0x32d0 <free>
    3578:	c7 01       	movw	r24, r14
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <realloc+0x1a2>
    357c:	ce 01       	movw	r24, r28
    357e:	02 c0       	rjmp	.+4      	; 0x3584 <realloc+0x1a2>
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	bf 90       	pop	r11
    3596:	af 90       	pop	r10
    3598:	9f 90       	pop	r9
    359a:	8f 90       	pop	r8
    359c:	7f 90       	pop	r7
    359e:	6f 90       	pop	r6
    35a0:	08 95       	ret

000035a2 <memcpy>:
    35a2:	fb 01       	movw	r30, r22
    35a4:	dc 01       	movw	r26, r24
    35a6:	02 c0       	rjmp	.+4      	; 0x35ac <memcpy+0xa>
    35a8:	01 90       	ld	r0, Z+
    35aa:	0d 92       	st	X+, r0
    35ac:	41 50       	subi	r20, 0x01	; 1
    35ae:	50 40       	sbci	r21, 0x00	; 0
    35b0:	d8 f7       	brcc	.-10     	; 0x35a8 <memcpy+0x6>
    35b2:	08 95       	ret

000035b4 <strcpy>:
    35b4:	fb 01       	movw	r30, r22
    35b6:	dc 01       	movw	r26, r24
    35b8:	01 90       	ld	r0, Z+
    35ba:	0d 92       	st	X+, r0
    35bc:	00 20       	and	r0, r0
    35be:	e1 f7       	brne	.-8      	; 0x35b8 <strcpy+0x4>
    35c0:	08 95       	ret

000035c2 <__do_global_dtors>:
    35c2:	11 e0       	ldi	r17, 0x01	; 1
    35c4:	c1 e2       	ldi	r28, 0x21	; 33
    35c6:	d1 e0       	ldi	r29, 0x01	; 1
    35c8:	00 e0       	ldi	r16, 0x00	; 0
    35ca:	05 c0       	rjmp	.+10     	; 0x35d6 <__do_global_dtors+0x14>
    35cc:	80 2f       	mov	r24, r16
    35ce:	fe 01       	movw	r30, r28
    35d0:	df dd       	rcall	.-1090   	; 0x3190 <__tablejump2__>
    35d2:	21 96       	adiw	r28, 0x01	; 1
    35d4:	01 1d       	adc	r16, r1
    35d6:	c3 32       	cpi	r28, 0x23	; 35
    35d8:	d1 07       	cpc	r29, r17
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	08 07       	cpc	r16, r24
    35de:	b1 f7       	brne	.-20     	; 0x35cc <__do_global_dtors+0xa>
    35e0:	f8 94       	cli

000035e2 <__stop_program>:
    35e2:	ff cf       	rjmp	.-2      	; 0x35e2 <__stop_program>
