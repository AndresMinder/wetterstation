
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000256  00800200  000024e4  00002578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000382  00800456  00800456  000027ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a70  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00025722  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005158  00000000  00000000  000289d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b04  00000000  00000000  0002db2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000298c  00000000  00000000  00034630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000587c  00000000  00000000  00036fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010246  00000000  00000000  0003c838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c08  00000000  00000000  0004ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ff c0       	rjmp	.+510    	; 0x200 <__dtors_end>
       2:	00 00       	nop
       4:	b9 c3       	rjmp	.+1906   	; 0x778 <__vector_1>
       6:	00 00       	nop
       8:	e2 c3       	rjmp	.+1988   	; 0x7ce <__vector_2>
       a:	00 00       	nop
       c:	0b c4       	rjmp	.+2070   	; 0x824 <__vector_3>
       e:	00 00       	nop
      10:	34 c4       	rjmp	.+2152   	; 0x87a <__vector_4>
      12:	00 00       	nop
      14:	5d c4       	rjmp	.+2234   	; 0x8d0 <__vector_5>
      16:	00 00       	nop
      18:	86 c4       	rjmp	.+2316   	; 0x926 <__vector_6>
      1a:	00 00       	nop
      1c:	af c4       	rjmp	.+2398   	; 0x97c <__vector_7>
      1e:	00 00       	nop
      20:	d8 c4       	rjmp	.+2480   	; 0x9d2 <__vector_8>
      22:	00 00       	nop
      24:	1d c1       	rjmp	.+570    	; 0x260 <__bad_interrupt>
      26:	00 00       	nop
      28:	1b c1       	rjmp	.+566    	; 0x260 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	19 c1       	rjmp	.+562    	; 0x260 <__bad_interrupt>
      2e:	00 00       	nop
      30:	17 c1       	rjmp	.+558    	; 0x260 <__bad_interrupt>
      32:	00 00       	nop
      34:	15 c1       	rjmp	.+554    	; 0x260 <__bad_interrupt>
      36:	00 00       	nop
      38:	13 c1       	rjmp	.+550    	; 0x260 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	11 c1       	rjmp	.+546    	; 0x260 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0f c1       	rjmp	.+542    	; 0x260 <__bad_interrupt>
      42:	00 00       	nop
      44:	0d c1       	rjmp	.+538    	; 0x260 <__bad_interrupt>
      46:	00 00       	nop
      48:	0b c1       	rjmp	.+534    	; 0x260 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	09 c1       	rjmp	.+530    	; 0x260 <__bad_interrupt>
      4e:	00 00       	nop
      50:	07 c1       	rjmp	.+526    	; 0x260 <__bad_interrupt>
      52:	00 00       	nop
      54:	05 c1       	rjmp	.+522    	; 0x260 <__bad_interrupt>
      56:	00 00       	nop
      58:	03 c1       	rjmp	.+518    	; 0x260 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c4       	rjmp	.+2506   	; 0xa28 <__vector_23>
      5e:	00 00       	nop
      60:	ff c0       	rjmp	.+510    	; 0x260 <__bad_interrupt>
      62:	00 00       	nop
      64:	be c2       	rjmp	.+1404   	; 0x5e2 <__vector_25>
      66:	00 00       	nop
      68:	f2 c2       	rjmp	.+1508   	; 0x64e <__vector_26>
      6a:	00 00       	nop
      6c:	f9 c0       	rjmp	.+498    	; 0x260 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f7 c0       	rjmp	.+494    	; 0x260 <__bad_interrupt>
      72:	00 00       	nop
      74:	f5 c0       	rjmp	.+490    	; 0x260 <__bad_interrupt>
      76:	00 00       	nop
      78:	f3 c0       	rjmp	.+486    	; 0x260 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f1 c0       	rjmp	.+482    	; 0x260 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ef c0       	rjmp	.+478    	; 0x260 <__bad_interrupt>
      82:	00 00       	nop
      84:	ed c0       	rjmp	.+474    	; 0x260 <__bad_interrupt>
      86:	00 00       	nop
      88:	eb c0       	rjmp	.+470    	; 0x260 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e9 c0       	rjmp	.+466    	; 0x260 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e7 c0       	rjmp	.+462    	; 0x260 <__bad_interrupt>
      92:	00 00       	nop
      94:	e5 c0       	rjmp	.+458    	; 0x260 <__bad_interrupt>
      96:	00 00       	nop
      98:	e3 c0       	rjmp	.+454    	; 0x260 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e1 c0       	rjmp	.+450    	; 0x260 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	df c0       	rjmp	.+446    	; 0x260 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dd c0       	rjmp	.+442    	; 0x260 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	db c0       	rjmp	.+438    	; 0x260 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d9 c0       	rjmp	.+434    	; 0x260 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d7 c0       	rjmp	.+430    	; 0x260 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d5 c0       	rjmp	.+426    	; 0x260 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d3 c0       	rjmp	.+422    	; 0x260 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d1 c0       	rjmp	.+418    	; 0x260 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cf c0       	rjmp	.+414    	; 0x260 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cd c0       	rjmp	.+410    	; 0x260 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cb c0       	rjmp	.+406    	; 0x260 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c9 c0       	rjmp	.+402    	; 0x260 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c7 c0       	rjmp	.+398    	; 0x260 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c5 c0       	rjmp	.+394    	; 0x260 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c3 c0       	rjmp	.+390    	; 0x260 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c1 c0       	rjmp	.+386    	; 0x260 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bf c0       	rjmp	.+382    	; 0x260 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e7 05       	cpc	r30, r7
      e6:	ea 05       	cpc	r30, r10
      e8:	d9 05       	cpc	r29, r9
      ea:	dd 05       	cpc	r29, r13
      ec:	e3 05       	cpc	r30, r3
      ee:	21 06       	cpc	r2, r17
      f0:	ee 05       	cpc	r30, r14
      f2:	f2 05       	cpc	r31, r2
      f4:	f8 05       	cpc	r31, r8
      f6:	fc 05       	cpc	r31, r12
      f8:	00 06       	cpc	r0, r16
      fa:	06 06       	cpc	r0, r22
      fc:	0a 06       	cpc	r0, r26
      fe:	0e 06       	cpc	r0, r30
     100:	21 06       	cpc	r2, r17
     102:	14 06       	cpc	r1, r20
     104:	18 06       	cpc	r1, r24
     106:	1c 06       	cpc	r1, r28

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <__ctors_start>:
     1f4:	31 01       	movw	r6, r2
     1f6:	59 01       	movw	r10, r18
     1f8:	59 03       	fmul	r21, r17
     1fa:	ae 07       	cpc	r26, r30
     1fc:	b6 09       	sbc	r27, r6

000001fe <__ctors_end>:
     1fe:	4a 01       	movw	r8, r20

00000200 <__dtors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d1 e2       	ldi	r29, 0x21	; 33
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60

00000210 <__do_copy_data>:
     210:	14 e0       	ldi	r17, 0x04	; 4
     212:	a0 e0       	ldi	r26, 0x00	; 0
     214:	b2 e0       	ldi	r27, 0x02	; 2
     216:	e4 ee       	ldi	r30, 0xE4	; 228
     218:	f4 e2       	ldi	r31, 0x24	; 36
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	0b bf       	out	0x3b, r16	; 59
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__do_copy_data+0x14>
     220:	07 90       	elpm	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	a6 35       	cpi	r26, 0x56	; 86
     226:	b1 07       	cpc	r27, r17
     228:	d9 f7       	brne	.-10     	; 0x220 <__do_copy_data+0x10>

0000022a <__do_clear_bss>:
     22a:	27 e0       	ldi	r18, 0x07	; 7
     22c:	a6 e5       	ldi	r26, 0x56	; 86
     22e:	b4 e0       	ldi	r27, 0x04	; 4
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a8 3d       	cpi	r26, 0xD8	; 216
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>

0000023a <__do_global_ctors>:
     23a:	10 e0       	ldi	r17, 0x00	; 0
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	d0 e0       	ldi	r29, 0x00	; 0
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	06 c0       	rjmp	.+12     	; 0x250 <__do_global_ctors+0x16>
     244:	21 97       	sbiw	r28, 0x01	; 1
     246:	01 09       	sbc	r16, r1
     248:	80 2f       	mov	r24, r16
     24a:	fe 01       	movw	r30, r28
     24c:	0e 94 48 10 	call	0x2090	; 0x2090 <__tablejump2__>
     250:	ca 3f       	cpi	r28, 0xFA	; 250
     252:	d1 07       	cpc	r29, r17
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 07       	cpc	r16, r24
     258:	a9 f7       	brne	.-22     	; 0x244 <__do_global_ctors+0xa>
     25a:	59 d2       	rcall	.+1202   	; 0x70e <main>
     25c:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__do_global_dtors>

00000260 <__bad_interrupt>:
     260:	cf ce       	rjmp	.-610    	; 0x0 <__vectors>

00000262 <_GLOBAL__sub_I_command_help>:
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     262:	6a e1       	ldi	r22, 0x1A	; 26
     264:	72 e0       	ldi	r23, 0x02	; 2
     266:	8e e6       	ldi	r24, 0x6E	; 110
     268:	94 e0       	ldi	r25, 0x04	; 4
     26a:	85 d5       	rcall	.+2826   	; 0xd76 <_ZN6StringC1EPKc>
String command_config = "config\r";
     26c:	60 e2       	ldi	r22, 0x20	; 32
     26e:	72 e0       	ldi	r23, 0x02	; 2
     270:	88 e6       	ldi	r24, 0x68	; 104
     272:	94 e0       	ldi	r25, 0x04	; 4
     274:	80 d5       	rcall	.+2816   	; 0xd76 <_ZN6StringC1EPKc>
String command_exit = "exit\r";
     276:	68 e2       	ldi	r22, 0x28	; 40
     278:	72 e0       	ldi	r23, 0x02	; 2
     27a:	82 e6       	ldi	r24, 0x62	; 98
     27c:	94 e0       	ldi	r25, 0x04	; 4
     27e:	7b d5       	rcall	.+2806   	; 0xd76 <_ZN6StringC1EPKc>
String command_show = "show\r";
     280:	6e e2       	ldi	r22, 0x2E	; 46
     282:	72 e0       	ldi	r23, 0x02	; 2
     284:	8c e5       	ldi	r24, 0x5C	; 92
     286:	94 e0       	ldi	r25, 0x04	; 4
     288:	76 d5       	rcall	.+2796   	; 0xd76 <_ZN6StringC1EPKc>
String show_sdCardInfo = "sd card informations\r";
     28a:	64 e3       	ldi	r22, 0x34	; 52
     28c:	72 e0       	ldi	r23, 0x02	; 2
     28e:	86 e5       	ldi	r24, 0x56	; 86
     290:	94 e0       	ldi	r25, 0x04	; 4
     292:	71 c5       	rjmp	.+2786   	; 0xd76 <_ZN6StringC1EPKc>

00000294 <_GLOBAL__sub_D_command_help>:
     294:	86 e5       	ldi	r24, 0x56	; 86
     296:	94 e0       	ldi	r25, 0x04	; 4
     298:	03 d5       	rcall	.+2566   	; 0xca0 <_ZN6StringD1Ev>
#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
String command_show = "show\r";
     29a:	8c e5       	ldi	r24, 0x5C	; 92
     29c:	94 e0       	ldi	r25, 0x04	; 4
     29e:	00 d5       	rcall	.+2560   	; 0xca0 <_ZN6StringD1Ev>

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
     2a0:	82 e6       	ldi	r24, 0x62	; 98
     2a2:	94 e0       	ldi	r25, 0x04	; 4
     2a4:	fd d4       	rcall	.+2554   	; 0xca0 <_ZN6StringD1Ev>
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
     2a6:	88 e6       	ldi	r24, 0x68	; 104
     2a8:	94 e0       	ldi	r25, 0x04	; 4
     2aa:	fa d4       	rcall	.+2548   	; 0xca0 <_ZN6StringD1Ev>
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     2ac:	8e e6       	ldi	r24, 0x6E	; 110
     2ae:	94 e0       	ldi	r25, 0x04	; 4
     2b0:	f7 c4       	rjmp	.+2542   	; 0xca0 <_ZN6StringD1Ev>

000002b2 <_GLOBAL__sub_I_myFile>:
     2b2:	8b eb       	ldi	r24, 0xBB	; 187

#include "SDCard.h"

const int chipSelect = 53;

File myFile;
     2b4:	94 e0       	ldi	r25, 0x04	; 4
     2b6:	f2 d5       	rcall	.+3044   	; 0xe9c <_ZN5SDLib4FileC1Ev>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     2b8:	ef ea       	ldi	r30, 0xAF	; 175
     2ba:	f4 e0       	ldi	r31, 0x04	; 4
     2bc:	15 82       	std	Z+5, r1	; 0x05
     2be:	16 82       	std	Z+6, r1	; 0x06
     2c0:	11 86       	std	Z+9, r1	; 0x09
     2c2:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     2c4:	e1 e9       	ldi	r30, 0x91	; 145
     2c6:	f4 e0       	ldi	r31, 0x04	; 4
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	80 83       	st	Z, r24
     2d2:	91 83       	std	Z+1, r25	; 0x01
     2d4:	a2 83       	std	Z+2, r26	; 0x02
     2d6:	b3 83       	std	Z+3, r27	; 0x03
     2d8:	17 8a       	std	Z+23, r1	; 0x17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     2da:	e4 e7       	ldi	r30, 0x74	; 116
     2dc:	f4 e0       	ldi	r31, 0x04	; 4
     2de:	13 82       	std	Z+3, r1	; 0x03
     2e0:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     2e2:	8e e4       	ldi	r24, 0x4E	; 78
     2e4:	94 e0       	ldi	r25, 0x04	; 4
     2e6:	91 83       	std	Z+1, r25	; 0x01
     2e8:	80 83       	st	Z, r24
     2ea:	15 82       	std	Z+5, r1	; 0x05
     2ec:	08 95       	ret

000002ee <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2ee:	26 e0       	ldi	r18, 0x06	; 6
     2f0:	40 e8       	ldi	r20, 0x80	; 128
     2f2:	55 e2       	ldi	r21, 0x25	; 37
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	86 ed       	ldi	r24, 0xD6	; 214
     2fa:	94 e0       	ldi	r25, 0x04	; 4
     2fc:	09 c1       	rjmp	.+530    	; 0x510 <_ZN14HardwareSerial5beginEmh>

000002fe <loop>:
{
	Serial.begin(9600);
}

void loop()
{
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     300:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     302:	91 8d       	ldd	r25, Z+25	; 0x19
     304:	22 8d       	ldd	r18, Z+26	; 0x1a
     306:	89 2f       	mov	r24, r25
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	80 5c       	subi	r24, 0xC0	; 192
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	82 1b       	sub	r24, r18
     310:	91 09       	sbc	r25, r1
}
     312:	8f 73       	andi	r24, 0x3F	; 63
     314:	99 27       	eor	r25, r25
     316:	08 95       	ret

00000318 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     318:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     31a:	91 8d       	ldd	r25, Z+25	; 0x19
     31c:	82 8d       	ldd	r24, Z+26	; 0x1a
     31e:	98 17       	cp	r25, r24
     320:	31 f0       	breq	.+12     	; 0x32e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     322:	82 8d       	ldd	r24, Z+26	; 0x1a
     324:	e8 0f       	add	r30, r24
     326:	f1 1d       	adc	r31, r1
     328:	85 8d       	ldd	r24, Z+29	; 0x1d
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     332:	08 95       	ret

00000334 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     334:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     336:	91 8d       	ldd	r25, Z+25	; 0x19
     338:	82 8d       	ldd	r24, Z+26	; 0x1a
     33a:	98 17       	cp	r25, r24
     33c:	61 f0       	breq	.+24     	; 0x356 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     33e:	82 8d       	ldd	r24, Z+26	; 0x1a
     340:	df 01       	movw	r26, r30
     342:	a8 0f       	add	r26, r24
     344:	b1 1d       	adc	r27, r1
     346:	5d 96       	adiw	r26, 0x1d	; 29
     348:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     34a:	92 8d       	ldd	r25, Z+26	; 0x1a
     34c:	9f 5f       	subi	r25, 0xFF	; 255
     34e:	9f 73       	andi	r25, 0x3F	; 63
     350:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     35a:	08 95       	ret

0000035c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     35c:	fc 01       	movw	r30, r24
     35e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     360:	44 8d       	ldd	r20, Z+28	; 0x1c
     362:	25 2f       	mov	r18, r21
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	84 2f       	mov	r24, r20
     368:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     36a:	82 1b       	sub	r24, r18
     36c:	93 0b       	sbc	r25, r19
     36e:	54 17       	cp	r21, r20
     370:	10 f0       	brcs	.+4      	; 0x376 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     372:	cf 96       	adiw	r24, 0x3f	; 63
     374:	08 95       	ret
  return tail - head - 1;
     376:	01 97       	sbiw	r24, 0x01	; 1
}
     378:	08 95       	ret

0000037a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     37a:	80 e5       	ldi	r24, 0x50	; 80
     37c:	93 e0       	ldi	r25, 0x03	; 3
     37e:	89 2b       	or	r24, r25
     380:	39 f0       	breq	.+14     	; 0x390 <_Z14serialEventRunv+0x16>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	89 2b       	or	r24, r25
     388:	19 f0       	breq	.+6      	; 0x390 <_Z14serialEventRunv+0x16>
     38a:	8a d1       	rcall	.+788    	; 0x6a0 <_Z17Serial0_availablev>
     38c:	81 11       	cpse	r24, r1
     38e:	25 c0       	rjmp	.+74     	; 0x3da <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	89 2b       	or	r24, r25
     396:	41 f0       	breq	.+16     	; 0x3a8 <_Z14serialEventRunv+0x2e>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	89 2b       	or	r24, r25
     39e:	21 f0       	breq	.+8      	; 0x3a8 <_Z14serialEventRunv+0x2e>
     3a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3a4:	81 11       	cpse	r24, r1
     3a6:	1c c0       	rjmp	.+56     	; 0x3e0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	89 2b       	or	r24, r25
     3ae:	41 f0       	breq	.+16     	; 0x3c0 <_Z14serialEventRunv+0x46>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	89 2b       	or	r24, r25
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <_Z14serialEventRunv+0x46>
     3b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3bc:	81 11       	cpse	r24, r1
     3be:	13 c0       	rjmp	.+38     	; 0x3e6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	89 2b       	or	r24, r25
     3c6:	a1 f0       	breq	.+40     	; 0x3f0 <_Z14serialEventRunv+0x76>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	89 2b       	or	r24, r25
     3ce:	81 f0       	breq	.+32     	; 0x3f0 <_Z14serialEventRunv+0x76>
     3d0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3d4:	81 11       	cpse	r24, r1
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <_Z14serialEventRunv+0x72>
     3d8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3de:	d8 cf       	rjmp	.-80     	; 0x390 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     3e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3e4:	e1 cf       	rjmp	.-62     	; 0x3a8 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     3e6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3ea:	ea cf       	rjmp	.-44     	; 0x3c0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     3ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     3f0:	08 95       	ret

000003f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     3f2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     3f4:	84 8d       	ldd	r24, Z+28	; 0x1c
     3f6:	df 01       	movw	r26, r30
     3f8:	a8 0f       	add	r26, r24
     3fa:	b1 1d       	adc	r27, r1
     3fc:	a3 5a       	subi	r26, 0xA3	; 163
     3fe:	bf 4f       	sbci	r27, 0xFF	; 255
     400:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     402:	84 8d       	ldd	r24, Z+28	; 0x1c
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	8f 73       	andi	r24, 0x3F	; 63
     40a:	99 27       	eor	r25, r25
     40c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     40e:	a6 89       	ldd	r26, Z+22	; 0x16
     410:	b7 89       	ldd	r27, Z+23	; 0x17
     412:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     414:	a0 89       	ldd	r26, Z+16	; 0x10
     416:	b1 89       	ldd	r27, Z+17	; 0x11
     418:	8c 91       	ld	r24, X
     41a:	83 70       	andi	r24, 0x03	; 3
     41c:	80 64       	ori	r24, 0x40	; 64
     41e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     420:	93 8d       	ldd	r25, Z+27	; 0x1b
     422:	84 8d       	ldd	r24, Z+28	; 0x1c
     424:	98 13       	cpse	r25, r24
     426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     428:	02 88       	ldd	r0, Z+18	; 0x12
     42a:	f3 89       	ldd	r31, Z+19	; 0x13
     42c:	e0 2d       	mov	r30, r0
     42e:	80 81       	ld	r24, Z
     430:	8f 7d       	andi	r24, 0xDF	; 223
     432:	80 83       	st	Z, r24
     434:	08 95       	ret

00000436 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
  _written = true;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     448:	9b 8d       	ldd	r25, Y+27	; 0x1b
     44a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     44c:	98 13       	cpse	r25, r24
     44e:	05 c0       	rjmp	.+10     	; 0x45a <_ZN14HardwareSerial5writeEh+0x24>
     450:	e8 89       	ldd	r30, Y+16	; 0x10
     452:	f9 89       	ldd	r31, Y+17	; 0x11
     454:	80 81       	ld	r24, Z
     456:	85 fd       	sbrc	r24, 5
     458:	25 c0       	rjmp	.+74     	; 0x4a4 <_ZN14HardwareSerial5writeEh+0x6e>
     45a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     45c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     45e:	10 e0       	ldi	r17, 0x00	; 0
     460:	0f 5f       	subi	r16, 0xFF	; 255
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	0f 73       	andi	r16, 0x3F	; 63
     466:	11 27       	eor	r17, r17
     468:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     46a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     46c:	e8 12       	cpse	r14, r24
     46e:	0b c0       	rjmp	.+22     	; 0x486 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	07 fc       	sbrc	r0, 7
     474:	fa cf       	rjmp	.-12     	; 0x46a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     476:	e8 89       	ldd	r30, Y+16	; 0x10
     478:	f9 89       	ldd	r31, Y+17	; 0x11
     47a:	80 81       	ld	r24, Z
     47c:	85 ff       	sbrs	r24, 5
     47e:	f5 cf       	rjmp	.-22     	; 0x46a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     480:	ce 01       	movw	r24, r28
     482:	b7 df       	rcall	.-146    	; 0x3f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     484:	f2 cf       	rjmp	.-28     	; 0x46a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     486:	8b 8d       	ldd	r24, Y+27	; 0x1b
     488:	fe 01       	movw	r30, r28
     48a:	e8 0f       	add	r30, r24
     48c:	f1 1d       	adc	r31, r1
     48e:	e3 5a       	subi	r30, 0xA3	; 163
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     494:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     496:	f8 94       	cli
    _tx_buffer_head = i;
     498:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     49a:	ea 89       	ldd	r30, Y+18	; 0x12
     49c:	fb 89       	ldd	r31, Y+19	; 0x13
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4a4:	9f b7       	in	r25, 0x3f	; 63
     4a6:	f8 94       	cli
      *_udr = c;
     4a8:	ee 89       	ldd	r30, Y+22	; 0x16
     4aa:	ff 89       	ldd	r31, Y+23	; 0x17
     4ac:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     4ae:	e8 89       	ldd	r30, Y+16	; 0x10
     4b0:	f9 89       	ldd	r31, Y+17	; 0x11
     4b2:	80 81       	ld	r24, Z
     4b4:	83 70       	andi	r24, 0x03	; 3
     4b6:	80 64       	ori	r24, 0x40	; 64
     4b8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4ba:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	08 95       	ret

000004ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4d4:	88 8d       	ldd	r24, Y+24	; 0x18
     4d6:	88 23       	and	r24, r24
     4d8:	c1 f0       	breq	.+48     	; 0x50a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4da:	ea 89       	ldd	r30, Y+18	; 0x12
     4dc:	fb 89       	ldd	r31, Y+19	; 0x13
     4de:	80 81       	ld	r24, Z
     4e0:	85 fd       	sbrc	r24, 5
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <_ZN14HardwareSerial5flushEv+0x20>
     4e4:	a8 89       	ldd	r26, Y+16	; 0x10
     4e6:	b9 89       	ldd	r27, Y+17	; 0x11
     4e8:	8c 91       	ld	r24, X
     4ea:	86 fd       	sbrc	r24, 6
     4ec:	0e c0       	rjmp	.+28     	; 0x50a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	07 fc       	sbrc	r0, 7
     4f2:	f5 cf       	rjmp	.-22     	; 0x4de <_ZN14HardwareSerial5flushEv+0x10>
     4f4:	80 81       	ld	r24, Z
     4f6:	85 ff       	sbrs	r24, 5
     4f8:	f2 cf       	rjmp	.-28     	; 0x4de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     4fa:	a8 89       	ldd	r26, Y+16	; 0x10
     4fc:	b9 89       	ldd	r27, Y+17	; 0x11
     4fe:	8c 91       	ld	r24, X
     500:	85 ff       	sbrs	r24, 5
     502:	ed cf       	rjmp	.-38     	; 0x4de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     504:	ce 01       	movw	r24, r28
     506:	75 df       	rcall	.-278    	; 0x3f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     508:	e8 cf       	rjmp	.-48     	; 0x4da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
     520:	6a 01       	movw	r12, r20
     522:	7b 01       	movw	r14, r22
     524:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     526:	e8 89       	ldd	r30, Y+16	; 0x10
     528:	f9 89       	ldd	r31, Y+17	; 0x11
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     52e:	41 15       	cp	r20, r1
     530:	51 4e       	sbci	r21, 0xE1	; 225
     532:	61 05       	cpc	r22, r1
     534:	71 05       	cpc	r23, r1
     536:	b1 f0       	breq	.+44     	; 0x564 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	79 e0       	ldi	r23, 0x09	; 9
     53c:	8d e3       	ldi	r24, 0x3D	; 61
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	a7 01       	movw	r20, r14
     542:	96 01       	movw	r18, r12
     544:	0e 94 26 10 	call	0x204c	; 0x204c <__udivmodsi4>
     548:	da 01       	movw	r26, r20
     54a:	c9 01       	movw	r24, r18
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	a1 09       	sbc	r26, r1
     550:	b1 09       	sbc	r27, r1
     552:	b6 95       	lsr	r27
     554:	a7 95       	ror	r26
     556:	97 95       	ror	r25
     558:	87 95       	ror	r24
     55a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     55c:	21 15       	cp	r18, r1
     55e:	80 e1       	ldi	r24, 0x10	; 16
     560:	38 07       	cpc	r19, r24
     562:	a8 f0       	brcs	.+42     	; 0x58e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     564:	e8 89       	ldd	r30, Y+16	; 0x10
     566:	f9 89       	ldd	r31, Y+17	; 0x11
     568:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     56a:	60 e8       	ldi	r22, 0x80	; 128
     56c:	74 e8       	ldi	r23, 0x84	; 132
     56e:	8e e1       	ldi	r24, 0x1E	; 30
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	a7 01       	movw	r20, r14
     574:	96 01       	movw	r18, r12
     576:	0e 94 26 10 	call	0x204c	; 0x204c <__udivmodsi4>
     57a:	da 01       	movw	r26, r20
     57c:	c9 01       	movw	r24, r18
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	a1 09       	sbc	r26, r1
     582:	b1 09       	sbc	r27, r1
     584:	b6 95       	lsr	r27
     586:	a7 95       	ror	r26
     588:	97 95       	ror	r25
     58a:	87 95       	ror	r24
     58c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     58e:	ec 85       	ldd	r30, Y+12	; 0x0c
     590:	fd 85       	ldd	r31, Y+13	; 0x0d
     592:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     594:	ee 85       	ldd	r30, Y+14	; 0x0e
     596:	ff 85       	ldd	r31, Y+15	; 0x0f
     598:	20 83       	st	Z, r18

  _written = false;
     59a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     59c:	ec 89       	ldd	r30, Y+20	; 0x14
     59e:	fd 89       	ldd	r31, Y+21	; 0x15
     5a0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     5a2:	ea 89       	ldd	r30, Y+18	; 0x12
     5a4:	fb 89       	ldd	r31, Y+19	; 0x13
     5a6:	80 81       	ld	r24, Z
     5a8:	80 61       	ori	r24, 0x10	; 16
     5aa:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     5ac:	ea 89       	ldd	r30, Y+18	; 0x12
     5ae:	fb 89       	ldd	r31, Y+19	; 0x13
     5b0:	80 81       	ld	r24, Z
     5b2:	88 60       	ori	r24, 0x08	; 8
     5b4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     5b6:	ea 89       	ldd	r30, Y+18	; 0x12
     5b8:	fb 89       	ldd	r31, Y+19	; 0x13
     5ba:	80 81       	ld	r24, Z
     5bc:	80 68       	ori	r24, 0x80	; 128
     5be:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     5c0:	ea 89       	ldd	r30, Y+18	; 0x12
     5c2:	fb 89       	ldd	r31, Y+19	; 0x13
     5c4:	80 81       	ld	r24, Z
     5c6:	8f 7d       	andi	r24, 0xDF	; 223
     5c8:	80 83       	st	Z, r24
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	08 95       	ret

000005da <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 95       	ret

000005e0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     5e0:	08 95       	ret

000005e2 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	0b b6       	in	r0, 0x3b	; 59
     5ee:	0f 92       	push	r0
     5f0:	2f 93       	push	r18
     5f2:	8f 93       	push	r24
     5f4:	9f 93       	push	r25
     5f6:	ef 93       	push	r30
     5f8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     5fa:	e0 91 e6 04 	lds	r30, 0x04E6	; 0x8004e6 <Serial+0x10>
     5fe:	f0 91 e7 04 	lds	r31, 0x04E7	; 0x8004e7 <Serial+0x11>
     602:	80 81       	ld	r24, Z
     604:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Serial+0x16>
     608:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Serial+0x17>
     60c:	82 fd       	sbrc	r24, 2
     60e:	12 c0       	rjmp	.+36     	; 0x634 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     610:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     612:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <Serial+0x19>
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     61a:	20 91 f0 04 	lds	r18, 0x04F0	; 0x8004f0 <Serial+0x1a>
     61e:	82 17       	cp	r24, r18
     620:	51 f0       	breq	.+20     	; 0x636 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     622:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <Serial+0x19>
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ea 52       	subi	r30, 0x2A	; 42
     62a:	fb 4f       	sbci	r31, 0xFB	; 251
     62c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     62e:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <Serial+0x19>
     632:	01 c0       	rjmp	.+2      	; 0x636 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     634:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     636:	ff 91       	pop	r31
     638:	ef 91       	pop	r30
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0b be       	out	0x3b, r0	; 59
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	0b b6       	in	r0, 0x3b	; 59
     65a:	0f 92       	push	r0
     65c:	2f 93       	push	r18
     65e:	3f 93       	push	r19
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	6f 93       	push	r22
     666:	7f 93       	push	r23
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27
     670:	ef 93       	push	r30
     672:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     674:	86 ed       	ldi	r24, 0xD6	; 214
     676:	94 e0       	ldi	r25, 0x04	; 4
     678:	bc de       	rcall	.-648    	; 0x3f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0b be       	out	0x3b, r0	; 59
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     6a0:	86 ed       	ldi	r24, 0xD6	; 214
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	2d de       	rcall	.-934    	; 0x300 <_ZN14HardwareSerial9availableEv>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	89 2b       	or	r24, r25
     6aa:	09 f4       	brne	.+2      	; 0x6ae <_Z17Serial0_availablev+0xe>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
}
     6ae:	82 2f       	mov	r24, r18
     6b0:	08 95       	ret

000006b2 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6b2:	e6 ed       	ldi	r30, 0xD6	; 214
     6b4:	f4 e0       	ldi	r31, 0x04	; 4
     6b6:	13 82       	std	Z+3, r1	; 0x03
     6b8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     6ba:	88 ee       	ldi	r24, 0xE8	; 232
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	84 83       	std	Z+4, r24	; 0x04
     6c4:	95 83       	std	Z+5, r25	; 0x05
     6c6:	a6 83       	std	Z+6, r26	; 0x06
     6c8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     6ca:	8a e2       	ldi	r24, 0x2A	; 42
     6cc:	94 e0       	ldi	r25, 0x04	; 4
     6ce:	91 83       	std	Z+1, r25	; 0x01
     6d0:	80 83       	st	Z, r24
     6d2:	85 ec       	ldi	r24, 0xC5	; 197
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	95 87       	std	Z+13, r25	; 0x0d
     6d8:	84 87       	std	Z+12, r24	; 0x0c
     6da:	84 ec       	ldi	r24, 0xC4	; 196
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	97 87       	std	Z+15, r25	; 0x0f
     6e0:	86 87       	std	Z+14, r24	; 0x0e
     6e2:	80 ec       	ldi	r24, 0xC0	; 192
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	91 8b       	std	Z+17, r25	; 0x11
     6e8:	80 8b       	std	Z+16, r24	; 0x10
     6ea:	81 ec       	ldi	r24, 0xC1	; 193
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	93 8b       	std	Z+19, r25	; 0x13
     6f0:	82 8b       	std	Z+18, r24	; 0x12
     6f2:	82 ec       	ldi	r24, 0xC2	; 194
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	95 8b       	std	Z+21, r25	; 0x15
     6f8:	84 8b       	std	Z+20, r24	; 0x14
     6fa:	86 ec       	ldi	r24, 0xC6	; 198
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	97 8b       	std	Z+23, r25	; 0x17
     700:	86 8b       	std	Z+22, r24	; 0x16
     702:	11 8e       	std	Z+25, r1	; 0x19
     704:	12 8e       	std	Z+26, r1	; 0x1a
     706:	13 8e       	std	Z+27, r1	; 0x1b
     708:	14 8e       	std	Z+28, r1	; 0x1c
     70a:	08 95       	ret

0000070c <initVariant>:
     70c:	08 95       	ret

0000070e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     70e:	e2 d1       	rcall	.+964    	; 0xad4 <init>

	initVariant();
     710:	fd df       	rcall	.-6      	; 0x70c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     712:	ed dd       	rcall	.-1062   	; 0x2ee <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     714:	cd eb       	ldi	r28, 0xBD	; 189
     716:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     718:	f2 dd       	rcall	.-1052   	; 0x2fe <loop>
		if (serialEventRun) serialEventRun();
     71a:	20 97       	sbiw	r28, 0x00	; 0
     71c:	e9 f3       	breq	.-6      	; 0x718 <main+0xa>
     71e:	2d de       	rcall	.-934    	; 0x37a <_Z14serialEventRunv>
     720:	fb cf       	rjmp	.-10     	; 0x718 <main+0xa>

00000722 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	6c 01       	movw	r12, r24
     734:	7a 01       	movw	r14, r20
     736:	8b 01       	movw	r16, r22
  size_t n = 0;
     738:	c0 e0       	ldi	r28, 0x00	; 0
     73a:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     73c:	ce 15       	cp	r28, r14
     73e:	df 05       	cpc	r29, r15
     740:	81 f0       	breq	.+32     	; 0x762 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
     742:	d8 01       	movw	r26, r16
     744:	6d 91       	ld	r22, X+
     746:	8d 01       	movw	r16, r26
     748:	d6 01       	movw	r26, r12
     74a:	ed 91       	ld	r30, X+
     74c:	fc 91       	ld	r31, X
     74e:	01 90       	ld	r0, Z+
     750:	f0 81       	ld	r31, Z
     752:	e0 2d       	mov	r30, r0
     754:	c6 01       	movw	r24, r12
     756:	19 95       	eicall
     758:	89 2b       	or	r24, r25
     75a:	11 f0       	breq	.+4      	; 0x760 <_ZN5Print5writeEPKhj+0x3e>
     75c:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     75e:	ee cf       	rjmp	.-36     	; 0x73c <_ZN5Print5writeEPKhj+0x1a>
     760:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
     762:	c7 01       	movw	r24, r14
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     776:	08 95       	ret

00000778 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	0b b6       	in	r0, 0x3b	; 59
     784:	0f 92       	push	r0
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
     79e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
     7a2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
     7a6:	19 95       	eicall
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	0f 90       	pop	r0
     7c2:	0b be       	out	0x3b, r0	; 59
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	0b b6       	in	r0, 0x3b	; 59
     7da:	0f 92       	push	r0
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
     7f4:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
     7f8:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
     7fc:	19 95       	eicall
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	bf 91       	pop	r27
     804:	af 91       	pop	r26
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	7f 91       	pop	r23
     80c:	6f 91       	pop	r22
     80e:	5f 91       	pop	r21
     810:	4f 91       	pop	r20
     812:	3f 91       	pop	r19
     814:	2f 91       	pop	r18
     816:	0f 90       	pop	r0
     818:	0b be       	out	0x3b, r0	; 59
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	0f 90       	pop	r0
     820:	1f 90       	pop	r1
     822:	18 95       	reti

00000824 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     824:	1f 92       	push	r1
     826:	0f 92       	push	r0
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	0b b6       	in	r0, 0x3b	; 59
     830:	0f 92       	push	r0
     832:	2f 93       	push	r18
     834:	3f 93       	push	r19
     836:	4f 93       	push	r20
     838:	5f 93       	push	r21
     83a:	6f 93       	push	r22
     83c:	7f 93       	push	r23
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	af 93       	push	r26
     844:	bf 93       	push	r27
     846:	ef 93       	push	r30
     848:	ff 93       	push	r31
     84a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
     84e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
     852:	19 95       	eicall
     854:	ff 91       	pop	r31
     856:	ef 91       	pop	r30
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	0f 90       	pop	r0
     86e:	0b be       	out	0x3b, r0	; 59
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	0b b6       	in	r0, 0x3b	; 59
     886:	0f 92       	push	r0
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
     8a0:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
     8a4:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
     8a8:	19 95       	eicall
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	0b b6       	in	r0, 0x3b	; 59
     8dc:	0f 92       	push	r0
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
     8f6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
     8fa:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
     8fe:	19 95       	eicall
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0b be       	out	0x3b, r0	; 59
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	0b b6       	in	r0, 0x3b	; 59
     932:	0f 92       	push	r0
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	4f 93       	push	r20
     93a:	5f 93       	push	r21
     93c:	6f 93       	push	r22
     93e:	7f 93       	push	r23
     940:	8f 93       	push	r24
     942:	9f 93       	push	r25
     944:	af 93       	push	r26
     946:	bf 93       	push	r27
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
     94c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
     950:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
     954:	19 95       	eicall
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	bf 91       	pop	r27
     95c:	af 91       	pop	r26
     95e:	9f 91       	pop	r25
     960:	8f 91       	pop	r24
     962:	7f 91       	pop	r23
     964:	6f 91       	pop	r22
     966:	5f 91       	pop	r21
     968:	4f 91       	pop	r20
     96a:	3f 91       	pop	r19
     96c:	2f 91       	pop	r18
     96e:	0f 90       	pop	r0
     970:	0b be       	out	0x3b, r0	; 59
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     97c:	1f 92       	push	r1
     97e:	0f 92       	push	r0
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	0b b6       	in	r0, 0x3b	; 59
     988:	0f 92       	push	r0
     98a:	2f 93       	push	r18
     98c:	3f 93       	push	r19
     98e:	4f 93       	push	r20
     990:	5f 93       	push	r21
     992:	6f 93       	push	r22
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
     9a2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
     9a6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
     9aa:	19 95       	eicall
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0b be       	out	0x3b, r0	; 59
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	0b b6       	in	r0, 0x3b	; 59
     9de:	0f 92       	push	r0
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
     9f8:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
     9fc:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
     a00:	19 95       	eicall
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	0b be       	out	0x3b, r0	; 59
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
     a3e:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <timer0_millis>
     a42:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <timer0_millis+0x1>
     a46:	a0 91 76 05 	lds	r26, 0x0576	; 0x800576 <timer0_millis+0x2>
     a4a:	b0 91 77 05 	lds	r27, 0x0577	; 0x800577 <timer0_millis+0x3>
     a4e:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <timer0_fract>
     a52:	23 e0       	ldi	r18, 0x03	; 3
     a54:	23 0f       	add	r18, r19
     a56:	2d 37       	cpi	r18, 0x7D	; 125
     a58:	20 f4       	brcc	.+8      	; 0xa62 <__vector_23+0x3a>
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	a1 1d       	adc	r26, r1
     a5e:	b1 1d       	adc	r27, r1
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__vector_23+0x44>
     a62:	26 e8       	ldi	r18, 0x86	; 134
     a64:	23 0f       	add	r18, r19
     a66:	02 96       	adiw	r24, 0x02	; 2
     a68:	a1 1d       	adc	r26, r1
     a6a:	b1 1d       	adc	r27, r1
     a6c:	20 93 73 05 	sts	0x0573, r18	; 0x800573 <timer0_fract>
     a70:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <timer0_millis>
     a74:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <timer0_millis+0x1>
     a78:	a0 93 76 05 	sts	0x0576, r26	; 0x800576 <timer0_millis+0x2>
     a7c:	b0 93 77 05 	sts	0x0577, r27	; 0x800577 <timer0_millis+0x3>
     a80:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <timer0_overflow_count>
     a84:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <timer0_overflow_count+0x1>
     a88:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <timer0_overflow_count+0x2>
     a8c:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <timer0_overflow_count+0x3>
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <timer0_overflow_count>
     a9a:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <timer0_overflow_count+0x1>
     a9e:	a0 93 7a 05 	sts	0x057A, r26	; 0x80057a <timer0_overflow_count+0x2>
     aa2:	b0 93 7b 05 	sts	0x057B, r27	; 0x80057b <timer0_overflow_count+0x3>
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <millis>:
     abc:	2f b7       	in	r18, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <timer0_millis>
     ac4:	70 91 75 05 	lds	r23, 0x0575	; 0x800575 <timer0_millis+0x1>
     ac8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <timer0_millis+0x2>
     acc:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <timer0_millis+0x3>
     ad0:	2f bf       	out	0x3f, r18	; 63
     ad2:	08 95       	ret

00000ad4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ad4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ad6:	84 b5       	in	r24, 0x24	; 36
     ad8:	82 60       	ori	r24, 0x02	; 2
     ada:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     adc:	84 b5       	in	r24, 0x24	; 36
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ae2:	85 b5       	in	r24, 0x25	; 37
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ae8:	85 b5       	in	r24, 0x25	; 37
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     aee:	ee e6       	ldi	r30, 0x6E	; 110
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	81 60       	ori	r24, 0x01	; 1
     af6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     af8:	e1 e8       	ldi	r30, 0x81	; 129
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     afe:	80 81       	ld	r24, Z
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     b04:	80 81       	ld	r24, Z
     b06:	81 60       	ori	r24, 0x01	; 1
     b08:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     b0a:	e0 e8       	ldi	r30, 0x80	; 128
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	81 60       	ori	r24, 0x01	; 1
     b12:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     b14:	e1 eb       	ldi	r30, 0xB1	; 177
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	84 60       	ori	r24, 0x04	; 4
     b1c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b1e:	e0 eb       	ldi	r30, 0xB0	; 176
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     b28:	e1 e9       	ldi	r30, 0x91	; 145
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	82 60       	ori	r24, 0x02	; 2
     b30:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     b32:	80 81       	ld	r24, Z
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     b38:	e0 e9       	ldi	r30, 0x90	; 144
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     b42:	e1 ea       	ldi	r30, 0xA1	; 161
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	82 60       	ori	r24, 0x02	; 2
     b4a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     b4c:	80 81       	ld	r24, Z
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     b52:	e0 ea       	ldi	r30, 0xA0	; 160
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     b5c:	e1 e2       	ldi	r30, 0x21	; 33
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	80 81       	ld	r24, Z
     b62:	82 60       	ori	r24, 0x02	; 2
     b64:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     b66:	80 81       	ld	r24, Z
     b68:	81 60       	ori	r24, 0x01	; 1
     b6a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     b6c:	e0 e2       	ldi	r30, 0x20	; 32
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	80 81       	ld	r24, Z
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     b76:	ea e7       	ldi	r30, 0x7A	; 122
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	84 60       	ori	r24, 0x04	; 4
     b7e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b80:	80 81       	ld	r24, Z
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b86:	80 81       	ld	r24, Z
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b8c:	80 81       	ld	r24, Z
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     b96:	08 95       	ret

00000b98 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	e2 31       	cpi	r30, 0x12	; 18
     ba0:	f1 05       	cpc	r31, r1
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <turnOffPWM+0xe>
     ba4:	4e c0       	rjmp	.+156    	; 0xc42 <turnOffPWM+0xaa>
     ba6:	88 27       	eor	r24, r24
     ba8:	ee 58       	subi	r30, 0x8E	; 142
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	8f 4f       	sbci	r24, 0xFF	; 255
     bae:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__tablejump2__>
     bb2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     bb6:	8f 77       	andi	r24, 0x7F	; 127
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <turnOffPWM+0x28>
     bba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     bbe:	8f 7d       	andi	r24, 0xDF	; 223
     bc0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     bc4:	08 95       	ret
     bc6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     bca:	87 7f       	andi	r24, 0xF7	; 247
     bcc:	f9 cf       	rjmp	.-14     	; 0xbc0 <turnOffPWM+0x28>
     bce:	84 b5       	in	r24, 0x24	; 36
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <turnOffPWM+0x40>
     bd4:	84 b5       	in	r24, 0x24	; 36
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	84 bd       	out	0x24, r24	; 36
     bda:	08 95       	ret
     bdc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     be0:	8f 77       	andi	r24, 0x7F	; 127
     be2:	03 c0       	rjmp	.+6      	; 0xbea <turnOffPWM+0x52>
     be4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     be8:	8f 7d       	andi	r24, 0xDF	; 223
     bea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     bee:	08 95       	ret
     bf0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     bf4:	8f 77       	andi	r24, 0x7F	; 127
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <turnOffPWM+0x6e>
     bf8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     bfc:	8f 7d       	andi	r24, 0xDF	; 223
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <turnOffPWM+0x6e>
     c00:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     c04:	87 7f       	andi	r24, 0xF7	; 247
     c06:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     c0a:	08 95       	ret
     c0c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	07 c0       	rjmp	.+14     	; 0xc22 <turnOffPWM+0x8a>
     c14:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     c18:	8f 7d       	andi	r24, 0xDF	; 223
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <turnOffPWM+0x8a>
     c1c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     c26:	08 95       	ret
     c28:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     c2c:	8f 77       	andi	r24, 0x7F	; 127
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <turnOffPWM+0xa6>
     c30:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     c34:	8f 7d       	andi	r24, 0xDF	; 223
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <turnOffPWM+0xa6>
     c38:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     c42:	08 95       	ret

00000c44 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	f9 01       	movw	r30, r18
     c50:	e8 5f       	subi	r30, 0xF8	; 248
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c56:	f9 01       	movw	r30, r18
     c58:	e2 5b       	subi	r30, 0xB2	; 178
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c5e:	f9 01       	movw	r30, r18
     c60:	ec 56       	subi	r30, 0x6C	; 108
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c66:	cc 23       	and	r28, r28
     c68:	b9 f0       	breq	.+46     	; 0xc98 <digitalWrite+0x54>
     c6a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c6c:	81 11       	cpse	r24, r1
     c6e:	94 df       	rcall	.-216    	; 0xb98 <turnOffPWM>

	out = portOutputRegister(port);
     c70:	ec 2f       	mov	r30, r28
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	e6 52       	subi	r30, 0x26	; 38
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	a5 91       	lpm	r26, Z+
     c7e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c80:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c82:	f8 94       	cli

	if (val == LOW) {
     c84:	11 11       	cpse	r17, r1
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <digitalWrite+0x4c>
		*out &= ~bit;
     c88:	8c 91       	ld	r24, X
     c8a:	d0 95       	com	r29
     c8c:	d8 23       	and	r29, r24
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <digitalWrite+0x50>
	} else {
		*out |= bit;
     c90:	ec 91       	ld	r30, X
     c92:	de 2b       	or	r29, r30
     c94:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     c96:	9f bf       	out	0x3f, r25	; 63
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <free>

00000caa <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     cb0:	88 81       	ld	r24, Y
     cb2:	99 81       	ldd	r25, Y+1	; 0x01
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	11 f0       	breq	.+4      	; 0xcbc <_ZN6String10invalidateEv+0x12>
     cb8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <free>
	buffer = NULL;
     cbc:	19 82       	std	Y+1, r1	; 0x01
     cbe:	18 82       	st	Y, r1
	capacity = len = 0;
     cc0:	1d 82       	std	Y+5, r1	; 0x05
     cc2:	1c 82       	std	Y+4, r1	; 0x04
     cc4:	1b 82       	std	Y+3, r1	; 0x03
     cc6:	1a 82       	std	Y+2, r1	; 0x02
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
     cd8:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	88 81       	ld	r24, Y
     ce0:	99 81       	ldd	r25, Y+1	; 0x01
     ce2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <realloc>
	if (newbuffer) {
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     cea:	99 83       	std	Y+1, r25	; 0x01
     cec:	88 83       	st	Y, r24
		capacity = maxStrLen;
     cee:	1b 83       	std	Y+3, r17	; 0x03
     cf0:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     d08:	88 81       	ld	r24, Y
     d0a:	99 81       	ldd	r25, Y+1	; 0x01
     d0c:	89 2b       	or	r24, r25
     d0e:	29 f0       	breq	.+10     	; 0xd1a <_ZN6String7reserveEj+0x18>
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	9b 81       	ldd	r25, Y+3	; 0x03
     d14:	86 17       	cp	r24, r22
     d16:	97 07       	cpc	r25, r23
     d18:	58 f4       	brcc	.+22     	; 0xd30 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
     d1a:	ce 01       	movw	r24, r28
     d1c:	d8 df       	rcall	.-80     	; 0xcce <_ZN6String12changeBufferEj>
     d1e:	88 23       	and	r24, r24
     d20:	41 f0       	breq	.+16     	; 0xd32 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	9d 81       	ldd	r25, Y+5	; 0x05
     d26:	89 2b       	or	r24, r25
     d28:	19 f4       	brne	.+6      	; 0xd30 <_ZN6String7reserveEj+0x2e>
     d2a:	e8 81       	ld	r30, Y
     d2c:	f9 81       	ldd	r31, Y+1	; 0x01
     d2e:	10 82       	st	Z, r1
     d30:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ec 01       	movw	r28, r24
     d46:	7b 01       	movw	r14, r22
     d48:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     d4a:	ba 01       	movw	r22, r20
     d4c:	da df       	rcall	.-76     	; 0xd02 <_ZN6String7reserveEj>
     d4e:	81 11       	cpse	r24, r1
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <_ZN6String4copyEPKcj+0x20>
		invalidate();
     d52:	ce 01       	movw	r24, r28
     d54:	aa df       	rcall	.-172    	; 0xcaa <_ZN6String10invalidateEv>
		return *this;
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
     d58:	1d 83       	std	Y+5, r17	; 0x05
     d5a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     d5c:	b7 01       	movw	r22, r14
     d5e:	88 81       	ld	r24, Y
     d60:	99 81       	ldd	r25, Y+1	; 0x01
     d62:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <strcpy>
	return *this;
}
     d66:	ce 01       	movw	r24, r28
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d76:	fc 01       	movw	r30, r24
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	10 82       	st	Z, r1
	capacity = 0;
     d7c:	13 82       	std	Z+3, r1	; 0x03
     d7e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     d80:	15 82       	std	Z+5, r1	; 0x05
     d82:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     d84:	61 15       	cp	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	49 f0       	breq	.+18     	; 0xd9c <_ZN6StringC1EPKc+0x26>
     d8a:	fb 01       	movw	r30, r22
     d8c:	01 90       	ld	r0, Z+
     d8e:	00 20       	and	r0, r0
     d90:	e9 f7       	brne	.-6      	; 0xd8c <_ZN6StringC1EPKc+0x16>
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	af 01       	movw	r20, r30
     d96:	46 1b       	sub	r20, r22
     d98:	57 0b       	sbc	r21, r23
     d9a:	ce cf       	rjmp	.-100    	; 0xd38 <_ZN6String4copyEPKcj>
     d9c:	08 95       	ret

00000d9e <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	1f 92       	push	r1
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	69 83       	std	Y+1, r22	; 0x01
     daa:	dc 01       	movw	r26, r24
     dac:	ed 91       	ld	r30, X+
     dae:	fc 91       	ld	r31, X
     db0:	02 80       	ldd	r0, Z+2	; 0x02
     db2:	f3 81       	ldd	r31, Z+3	; 0x03
     db4:	e0 2d       	mov	r30, r0
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	be 01       	movw	r22, r28
     dbc:	6f 5f       	subi	r22, 0xFF	; 255
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	19 95       	eicall
     dc2:	0f 90       	pop	r0
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <_ZN5SDLib4File5writeEPKhj>:
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
     dd0:	89 8d       	ldd	r24, Y+25	; 0x19
     dd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	39 f4       	brne	.+14     	; 0xde6 <_ZN5SDLib4File5writeEPKhj+0x1c>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <_ZN5SDLib4File5writeEPKhj+0x30>
     de6:	fc 01       	movw	r30, r24
     de8:	13 82       	std	Z+3, r1	; 0x03
     dea:	12 82       	std	Z+2, r1	; 0x02
     dec:	e0 d4       	rcall	.+2496   	; 0x17ae <_ZN6SdFile5writeEPKvj>
     dee:	e9 8d       	ldd	r30, Y+25	; 0x19
     df0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     df2:	22 81       	ldd	r18, Z+2	; 0x02
     df4:	33 81       	ldd	r19, Z+3	; 0x03
     df6:	23 2b       	or	r18, r19
     df8:	79 f7       	brne	.-34     	; 0xdd8 <_ZN5SDLib4File5writeEPKhj+0xe>
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <_ZN5SDLib4File5flushEv>:
     e00:	fc 01       	movw	r30, r24
     e02:	81 8d       	ldd	r24, Z+25	; 0x19
     e04:	92 8d       	ldd	r25, Z+26	; 0x1a
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	09 f0       	breq	.+2      	; 0xe0c <_ZN5SDLib4File5flushEv+0xc>
     e0a:	8c c4       	rjmp	.+2328   	; 0x1724 <_ZN6SdFile4syncEv>
     e0c:	08 95       	ret

00000e0e <_ZN6SdFile4readEv>:
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	1f 92       	push	r1
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	e8 d2       	rcall	.+1488   	; 0x13f4 <_ZN6SdFile4readEPvj>
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	19 f4       	brne	.+6      	; 0xe2e <_ZN6SdFile4readEv+0x20>
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <_ZN6SdFile4readEv+0x24>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	0f 90       	pop	r0
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <_ZN5SDLib4File4readEv>:
     e3a:	fc 01       	movw	r30, r24
     e3c:	81 8d       	ldd	r24, Z+25	; 0x19
     e3e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	09 f0       	breq	.+2      	; 0xe46 <_ZN5SDLib4File4readEv+0xc>
     e44:	e4 cf       	rjmp	.-56     	; 0xe0e <_ZN6SdFile4readEv>
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	9f ef       	ldi	r25, 0xFF	; 255
     e4a:	08 95       	ret

00000e4c <_ZN5SDLib4File4peekEv>:
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	fc 01       	movw	r30, r24
     e56:	81 8d       	ldd	r24, Z+25	; 0x19
     e58:	92 8d       	ldd	r25, Z+26	; 0x1a
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	a9 f0       	breq	.+42     	; 0xe88 <_ZN5SDLib4File4peekEv+0x3c>
     e5e:	ef 01       	movw	r28, r30
     e60:	d6 df       	rcall	.-84     	; 0xe0e <_ZN6SdFile4readEv>
     e62:	8c 01       	movw	r16, r24
     e64:	0f 3f       	cpi	r16, 0xFF	; 255
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	18 07       	cpc	r17, r24
     e6a:	89 f0       	breq	.+34     	; 0xe8e <_ZN5SDLib4File4peekEv+0x42>
     e6c:	89 8d       	ldd	r24, Y+25	; 0x19
     e6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e70:	fc 01       	movw	r30, r24
     e72:	42 85       	ldd	r20, Z+10	; 0x0a
     e74:	53 85       	ldd	r21, Z+11	; 0x0b
     e76:	64 85       	ldd	r22, Z+12	; 0x0c
     e78:	75 85       	ldd	r23, Z+13	; 0x0d
     e7a:	41 50       	subi	r20, 0x01	; 1
     e7c:	51 09       	sbc	r21, r1
     e7e:	61 09       	sbc	r22, r1
     e80:	71 09       	sbc	r23, r1
     e82:	ba d3       	rcall	.+1908   	; 0x15f8 <_ZN6SdFile7seekSetEm>
     e84:	c8 01       	movw	r24, r16
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <_ZN5SDLib4File4peekEv+0x46>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <_ZN5SDLib4File4peekEv+0x46>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <_ZN5SDLib4FileC1Ev>:
     e9c:	fc 01       	movw	r30, r24
     e9e:	13 82       	std	Z+3, r1	; 0x03
     ea0:	12 82       	std	Z+2, r1	; 0x02
     ea2:	88 ee       	ldi	r24, 0xE8	; 232
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	84 83       	std	Z+4, r24	; 0x04
     eac:	95 83       	std	Z+5, r25	; 0x05
     eae:	a6 83       	std	Z+6, r26	; 0x06
     eb0:	b7 83       	std	Z+7, r27	; 0x07
     eb2:	8c e3       	ldi	r24, 0x3C	; 60
     eb4:	94 e0       	ldi	r25, 0x04	; 4
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	80 83       	st	Z, r24
     eba:	12 8e       	std	Z+26, r1	; 0x1a
     ebc:	11 8e       	std	Z+25, r1	; 0x19
     ebe:	14 86       	std	Z+12, r1	; 0x0c
     ec0:	08 95       	ret

00000ec2 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
     ec2:	dc 01       	movw	r26, r24
     ec4:	59 96       	adiw	r26, 0x19	; 25
     ec6:	ed 91       	ld	r30, X+
     ec8:	fc 91       	ld	r31, X
     eca:	5a 97       	sbiw	r26, 0x1a	; 26
     ecc:	30 97       	sbiw	r30, 0x00	; 0
     ece:	29 f0       	breq	.+10     	; 0xeda <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     ed0:	62 85       	ldd	r22, Z+10	; 0x0a
     ed2:	73 85       	ldd	r23, Z+11	; 0x0b
     ed4:	84 85       	ldd	r24, Z+12	; 0x0c
     ed6:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
     ed8:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
     ee0:	08 95       	ret

00000ee2 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
     ee2:	dc 01       	movw	r26, r24
     ee4:	59 96       	adiw	r26, 0x19	; 25
     ee6:	ed 91       	ld	r30, X+
     ee8:	fc 91       	ld	r31, X
     eea:	5a 97       	sbiw	r26, 0x1a	; 26
     eec:	30 97       	sbiw	r30, 0x00	; 0
     eee:	29 f0       	breq	.+10     	; 0xefa <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     ef0:	63 89       	ldd	r22, Z+19	; 0x13
     ef2:	74 89       	ldd	r23, Z+20	; 0x14
     ef4:	85 89       	ldd	r24, Z+21	; 0x15
     ef6:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
     ef8:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
     f00:	08 95       	ret

00000f02 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
  if (! _file) return 0;
     f0e:	fc 01       	movw	r30, r24
     f10:	21 8d       	ldd	r18, Z+25	; 0x19
     f12:	32 8d       	ldd	r19, Z+26	; 0x1a
     f14:	23 2b       	or	r18, r19
     f16:	c9 f0       	breq	.+50     	; 0xf4a <_ZN5SDLib4File9availableEv+0x48>
     f18:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
     f1a:	e3 df       	rcall	.-58     	; 0xee2 <_ZN5SDLib4File4sizeEv>
     f1c:	6b 01       	movw	r12, r22
     f1e:	7c 01       	movw	r14, r24
     f20:	ce 01       	movw	r24, r28
     f22:	cf df       	rcall	.-98     	; 0xec2 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
     f24:	a7 01       	movw	r20, r14
     f26:	96 01       	movw	r18, r12
     f28:	26 1b       	sub	r18, r22
     f2a:	37 0b       	sbc	r19, r23
     f2c:	48 0b       	sbc	r20, r24
     f2e:	59 0b       	sbc	r21, r25
     f30:	da 01       	movw	r26, r20
     f32:	c9 01       	movw	r24, r18
     f34:	81 15       	cp	r24, r1
     f36:	30 e8       	ldi	r19, 0x80	; 128
     f38:	93 07       	cpc	r25, r19
     f3a:	a1 05       	cpc	r26, r1
     f3c:	b1 05       	cpc	r27, r1
     f3e:	38 f0       	brcs	.+14     	; 0xf4e <_ZN5SDLib4File9availableEv+0x4c>
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	9f e7       	ldi	r25, 0x7F	; 127
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	08 95       	ret

00000f5c <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     f5c:	ec e7       	ldi	r30, 0x7C	; 124
     f5e:	f5 e0       	ldi	r31, 0x05	; 5
     f60:	15 82       	std	Z+5, r1	; 0x05
     f62:	16 82       	std	Z+6, r1	; 0x06
     f64:	11 86       	std	Z+9, r1	; 0x09
     f66:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	84 87       	std	Z+12, r24	; 0x0c
     f72:	95 87       	std	Z+13, r25	; 0x0d
     f74:	a6 87       	std	Z+14, r26	; 0x0e
     f76:	b7 87       	std	Z+15, r27	; 0x0f
     f78:	13 a2       	std	Z+35, r1	; 0x23
     f7a:	15 a6       	std	Z+45, r1	; 0x2d
     f7c:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     f7e:	8e e4       	ldi	r24, 0x4E	; 78
     f80:	94 e0       	ldi	r25, 0x04	; 4
     f82:	93 a7       	std	Z+43, r25	; 0x2b
     f84:	82 a7       	std	Z+42, r24	; 0x2a
     f86:	17 a6       	std	Z+47, r1	; 0x2f
     f88:	08 95       	ret

00000f8a <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
     f8a:	9f b7       	in	r25, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	20 91 d3 07 	lds	r18, 0x07D3	; 0x8007d3 <_ZN8SPIClass13interruptModeE>
     f92:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <_ZN8SPIClass13interruptSaveE>
     f96:	21 30       	cpi	r18, 0x01	; 1
     f98:	19 f4       	brne	.+6      	; 0xfa0 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
     f9a:	8d bb       	out	0x1d, r24	; 29
     f9c:	9f bf       	out	0x3f, r25	; 63
     f9e:	08 95       	ret
     fa0:	8f bf       	out	0x3f, r24	; 63
     fa2:	08 95       	ret

00000fa4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     fa4:	20 91 d3 07 	lds	r18, 0x07D3	; 0x8007d3 <_ZN8SPIClass13interruptModeE>
     fa8:	22 23       	and	r18, r18
     faa:	99 f0       	breq	.+38     	; 0xfd2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     fac:	4f b7       	in	r20, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	20 91 d3 07 	lds	r18, 0x07D3	; 0x8007d3 <_ZN8SPIClass13interruptModeE>
     fb4:	21 30       	cpi	r18, 0x01	; 1
     fb6:	59 f4       	brne	.+22     	; 0xfce <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     fb8:	2d b3       	in	r18, 0x1d	; 29
     fba:	20 93 d1 07 	sts	0x07D1, r18	; 0x8007d1 <_ZN8SPIClass13interruptSaveE>
     fbe:	3d b3       	in	r19, 0x1d	; 29
     fc0:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <_ZN8SPIClass13interruptMaskE>
     fc4:	20 95       	com	r18
     fc6:	23 23       	and	r18, r19
     fc8:	2d bb       	out	0x1d, r18	; 29
     fca:	4f bf       	out	0x3f, r20	; 63
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     fce:	40 93 d1 07 	sts	0x07D1, r20	; 0x8007d1 <_ZN8SPIClass13interruptSaveE>
     fd2:	8c bd       	out	0x2c, r24	; 44
     fd4:	9d bd       	out	0x2d, r25	; 45
     fd6:	08 95       	ret

00000fd8 <_ZN8SPIClass8transferEh>:
     fd8:	8e bd       	out	0x2e, r24	; 46
     fda:	00 00       	nop
     fdc:	0d b4       	in	r0, 0x2d	; 45
     fde:	07 fe       	sbrs	r0, 7
     fe0:	fd cf       	rjmp	.-6      	; 0xfdc <_ZN8SPIClass8transferEh+0x4>
     fe2:	8e b5       	in	r24, 0x2e	; 46
     fe4:	08 95       	ret

00000fe6 <_ZL6spiRecv>:
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	f7 cf       	rjmp	.-18     	; 0xfd8 <_ZN8SPIClass8transferEh>

00000fea <_ZN7Sd2Card14chipSelectHighEv>:
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	fc 01       	movw	r30, r24
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	29 de       	rcall	.-942    	; 0xc44 <digitalWrite>
     ff2:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <_ZL20chip_select_asserted>
     ff6:	88 23       	and	r24, r24
     ff8:	31 f0       	breq	.+12     	; 0x1006 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
     ffa:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <_ZL20chip_select_asserted>
     ffe:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <_ZN8SPIClass13interruptModeE>
    1002:	81 11       	cpse	r24, r1
    1004:	c2 cf       	rjmp	.-124    	; 0xf8a <_ZN8SPIClass14endTransactionEv.part.3>
    1006:	08 95       	ret

00001008 <_ZN7Sd2Card13chipSelectLowEv>:
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
    100e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <_ZL20chip_select_asserted>
    1012:	81 11       	cpse	r24, r1
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <_ZN7Sd2Card13chipSelectLowEv+0x1e>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <_ZL20chip_select_asserted>
    101c:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <_ZL8settings>
    1020:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <_ZL8settings+0x1>
    1024:	bf df       	rcall	.-130    	; 0xfa4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	0a ce       	rjmp	.-1004   	; 0xc44 <digitalWrite>

00001030 <_ZN7Sd2Card7readEndEv>:
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	88 23       	and	r24, r24
    103a:	79 f0       	breq	.+30     	; 0x105a <_ZN7Sd2Card7readEndEv+0x2a>
    103c:	8f 81       	ldd	r24, Y+7	; 0x07
    103e:	98 85       	ldd	r25, Y+8	; 0x08
    1040:	9c 01       	movw	r18, r24
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	38 87       	std	Y+8, r19	; 0x08
    1048:	2f 83       	std	Y+7, r18	; 0x07
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	92 40       	sbci	r25, 0x02	; 2
    104e:	10 f4       	brcc	.+4      	; 0x1054 <_ZN7Sd2Card7readEndEv+0x24>
    1050:	ca df       	rcall	.-108    	; 0xfe6 <_ZL6spiRecv>
    1052:	f4 cf       	rjmp	.-24     	; 0x103c <_ZN7Sd2Card7readEndEv+0xc>
    1054:	ce 01       	movw	r24, r28
    1056:	c9 df       	rcall	.-110    	; 0xfea <_ZN7Sd2Card14chipSelectHighEv>
    1058:	1e 82       	std	Y+6, r1	; 0x06
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <_ZN7Sd2Card11waitNotBusyEj>:
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	eb 01       	movw	r28, r22
    106a:	28 dd       	rcall	.-1456   	; 0xabc <millis>
    106c:	8b 01       	movw	r16, r22
    106e:	bb df       	rcall	.-138    	; 0xfe6 <_ZL6spiRecv>
    1070:	8f 3f       	cpi	r24, 0xFF	; 255
    1072:	41 f0       	breq	.+16     	; 0x1084 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    1074:	23 dd       	rcall	.-1466   	; 0xabc <millis>
    1076:	60 1b       	sub	r22, r16
    1078:	71 0b       	sbc	r23, r17
    107a:	6c 17       	cp	r22, r28
    107c:	7d 07       	cpc	r23, r29
    107e:	b8 f3       	brcs	.-18     	; 0x106e <_ZN7Sd2Card11waitNotBusyEj+0xe>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <_ZN7Sd2Card11cardCommandEhm>:
    1090:	8f 92       	push	r8
    1092:	9f 92       	push	r9
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
    10a4:	f6 2e       	mov	r15, r22
    10a6:	49 01       	movw	r8, r18
    10a8:	5a 01       	movw	r10, r20
    10aa:	c2 df       	rcall	.-124    	; 0x1030 <_ZN7Sd2Card7readEndEv>
    10ac:	ce 01       	movw	r24, r28
    10ae:	ac df       	rcall	.-168    	; 0x1008 <_ZN7Sd2Card13chipSelectLowEv>
    10b0:	6c e2       	ldi	r22, 0x2C	; 44
    10b2:	71 e0       	ldi	r23, 0x01	; 1
    10b4:	ce 01       	movw	r24, r28
    10b6:	d4 df       	rcall	.-88     	; 0x1060 <_ZN7Sd2Card11waitNotBusyEj>
    10b8:	8f 2d       	mov	r24, r15
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	8d df       	rcall	.-230    	; 0xfd8 <_ZN8SPIClass8transferEh>
    10be:	08 e1       	ldi	r16, 0x18	; 24
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	d5 01       	movw	r26, r10
    10c4:	c4 01       	movw	r24, r8
    10c6:	00 2e       	mov	r0, r16
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <_ZN7Sd2Card11cardCommandEhm+0x42>
    10ca:	b6 95       	lsr	r27
    10cc:	a7 95       	ror	r26
    10ce:	97 95       	ror	r25
    10d0:	87 95       	ror	r24
    10d2:	0a 94       	dec	r0
    10d4:	d2 f7       	brpl	.-12     	; 0x10ca <_ZN7Sd2Card11cardCommandEhm+0x3a>
    10d6:	80 df       	rcall	.-256    	; 0xfd8 <_ZN8SPIClass8transferEh>
    10d8:	08 50       	subi	r16, 0x08	; 8
    10da:	11 09       	sbc	r17, r1
    10dc:	08 3f       	cpi	r16, 0xF8	; 248
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	18 07       	cpc	r17, r24
    10e2:	79 f7       	brne	.-34     	; 0x10c2 <_ZN7Sd2Card11cardCommandEhm+0x32>
    10e4:	ff 20       	and	r15, r15
    10e6:	29 f0       	breq	.+10     	; 0x10f2 <_ZN7Sd2Card11cardCommandEhm+0x62>
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	f8 12       	cpse	r15, r24
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <_ZN7Sd2Card11cardCommandEhm+0x66>
    10ee:	87 e8       	ldi	r24, 0x87	; 135
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <_ZN7Sd2Card11cardCommandEhm+0x68>
    10f2:	85 e9       	ldi	r24, 0x95	; 149
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <_ZN7Sd2Card11cardCommandEhm+0x68>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	6f df       	rcall	.-290    	; 0xfd8 <_ZN8SPIClass8transferEh>
    10fa:	10 e0       	ldi	r17, 0x00	; 0
    10fc:	74 df       	rcall	.-280    	; 0xfe6 <_ZL6spiRecv>
    10fe:	8a 87       	std	Y+10, r24	; 0x0a
    1100:	87 ff       	sbrs	r24, 7
    1102:	04 c0       	rjmp	.+8      	; 0x110c <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1104:	1f 3f       	cpi	r17, 0xFF	; 255
    1106:	11 f0       	breq	.+4      	; 0x110c <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1108:	1f 5f       	subi	r17, 0xFF	; 255
    110a:	f8 cf       	rjmp	.-16     	; 0x10fc <_ZN7Sd2Card11cardCommandEhm+0x6c>
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	08 95       	ret

00001120 <_ZN7Sd2Card14waitStartBlockEv>:
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
    112a:	c8 dc       	rcall	.-1648   	; 0xabc <millis>
    112c:	8b 01       	movw	r16, r22
    112e:	5b df       	rcall	.-330    	; 0xfe6 <_ZL6spiRecv>
    1130:	8a 87       	std	Y+10, r24	; 0x0a
    1132:	8f 3f       	cpi	r24, 0xFF	; 255
    1134:	41 f4       	brne	.+16     	; 0x1146 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    1136:	c2 dc       	rcall	.-1660   	; 0xabc <millis>
    1138:	60 1b       	sub	r22, r16
    113a:	71 0b       	sbc	r23, r17
    113c:	6d 32       	cpi	r22, 0x2D	; 45
    113e:	71 40       	sbci	r23, 0x01	; 1
    1140:	b0 f3       	brcs	.-20     	; 0x112e <_ZN7Sd2Card14waitStartBlockEv+0xe>
    1142:	8f e0       	ldi	r24, 0x0F	; 15
    1144:	03 c0       	rjmp	.+6      	; 0x114c <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1146:	8e 3f       	cpi	r24, 0xFE	; 254
    1148:	31 f0       	breq	.+12     	; 0x1156 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    114a:	8d e0       	ldi	r24, 0x0D	; 13
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	ce 01       	movw	r24, r28
    1150:	4c df       	rcall	.-360    	; 0xfea <_ZN7Sd2Card14chipSelectHighEv>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	69 01       	movw	r12, r18
    1176:	c8 01       	movw	r24, r16
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	92 40       	sbci	r25, 0x02	; 2
    1180:	08 f0       	brcs	.+2      	; 0x1184 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1182:	57 c0       	rjmp	.+174    	; 0x1232 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	88 23       	and	r24, r24
    1188:	71 f0       	breq	.+28     	; 0x11a6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    118a:	88 81       	ld	r24, Y
    118c:	99 81       	ldd	r25, Y+1	; 0x01
    118e:	aa 81       	ldd	r26, Y+2	; 0x02
    1190:	bb 81       	ldd	r27, Y+3	; 0x03
    1192:	84 17       	cp	r24, r20
    1194:	95 07       	cpc	r25, r21
    1196:	a6 07       	cpc	r26, r22
    1198:	b7 07       	cpc	r27, r23
    119a:	29 f4       	brne	.+10     	; 0x11a6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	98 85       	ldd	r25, Y+8	; 0x08
    11a0:	c8 16       	cp	r12, r24
    11a2:	d9 06       	cpc	r13, r25
    11a4:	00 f5       	brcc	.+64     	; 0x11e6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    11a6:	48 83       	st	Y, r20
    11a8:	59 83       	std	Y+1, r21	; 0x01
    11aa:	6a 83       	std	Y+2, r22	; 0x02
    11ac:	7b 83       	std	Y+3, r23	; 0x03
    11ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	39 f0       	breq	.+14     	; 0x11c2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    11b4:	89 e0       	ldi	r24, 0x09	; 9
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	66 1f       	adc	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	8a 95       	dec	r24
    11c0:	d1 f7       	brne	.-12     	; 0x11b6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    11c2:	9a 01       	movw	r18, r20
    11c4:	ab 01       	movw	r20, r22
    11c6:	61 e1       	ldi	r22, 0x11	; 17
    11c8:	ce 01       	movw	r24, r28
    11ca:	62 df       	rcall	.-316    	; 0x1090 <_ZN7Sd2Card11cardCommandEhm>
    11cc:	88 23       	and	r24, r24
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	2e c0       	rjmp	.+92     	; 0x1232 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    11d6:	ce 01       	movw	r24, r28
    11d8:	a3 df       	rcall	.-186    	; 0x1120 <_ZN7Sd2Card14waitStartBlockEv>
    11da:	88 23       	and	r24, r24
    11dc:	51 f1       	breq	.+84     	; 0x1232 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    11de:	18 86       	std	Y+8, r1	; 0x08
    11e0:	1f 82       	std	Y+7, r1	; 0x07
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	8e 83       	std	Y+6, r24	; 0x06
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	8c 15       	cp	r24, r12
    11ec:	9d 05       	cpc	r25, r13
    11ee:	38 f4       	brcc	.+14     	; 0x11fe <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    11f0:	fa de       	rcall	.-524    	; 0xfe6 <_ZL6spiRecv>
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	98 87       	std	Y+8, r25	; 0x08
    11fa:	8f 83       	std	Y+7, r24	; 0x07
    11fc:	f4 cf       	rjmp	.-24     	; 0x11e6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    11fe:	67 01       	movw	r12, r14
    1200:	e0 0e       	add	r14, r16
    1202:	f1 1e       	adc	r15, r17
    1204:	ce 14       	cp	r12, r14
    1206:	df 04       	cpc	r13, r15
    1208:	29 f0       	breq	.+10     	; 0x1214 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    120a:	ed de       	rcall	.-550    	; 0xfe6 <_ZL6spiRecv>
    120c:	f6 01       	movw	r30, r12
    120e:	81 93       	st	Z+, r24
    1210:	6f 01       	movw	r12, r30
    1212:	f8 cf       	rjmp	.-16     	; 0x1204 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    1214:	8f 81       	ldd	r24, Y+7	; 0x07
    1216:	98 85       	ldd	r25, Y+8	; 0x08
    1218:	08 0f       	add	r16, r24
    121a:	19 1f       	adc	r17, r25
    121c:	18 87       	std	Y+8, r17	; 0x08
    121e:	0f 83       	std	Y+7, r16	; 0x07
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	88 23       	and	r24, r24
    1224:	19 f0       	breq	.+6      	; 0x122c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    1226:	01 15       	cp	r16, r1
    1228:	12 40       	sbci	r17, 0x02	; 2
    122a:	38 f0       	brcs	.+14     	; 0x123a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    122c:	ce 01       	movw	r24, r28
    122e:	00 df       	rcall	.-512    	; 0x1030 <_ZN7Sd2Card7readEndEv>
    1230:	04 c0       	rjmp	.+8      	; 0x123a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    1232:	ce 01       	movw	r24, r28
    1234:	da de       	rcall	.-588    	; 0xfea <_ZN7Sd2Card14chipSelectHighEv>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	01 c0       	rjmp	.+2      	; 0x123c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	08 95       	ret

0000124e <_ZN7Sd2Card8readDataEmjjPh>:
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	01 15       	cp	r16, r1
    1258:	11 05       	cpc	r17, r1
    125a:	11 f0       	breq	.+4      	; 0x1260 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    125c:	82 df       	rcall	.-252    	; 0x1162 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	08 95       	ret

0000126c <_ZN7Sd2Card9readBlockEmPh>:
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	79 01       	movw	r14, r18
    1276:	00 e0       	ldi	r16, 0x00	; 0
    1278:	12 e0       	ldi	r17, 0x02	; 2
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	71 df       	rcall	.-286    	; 0x1162 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	08 95       	ret

0000128a <_ZN7Sd2Card9writeDataEhPKh>:
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	8c 01       	movw	r16, r24
    1298:	86 2f       	mov	r24, r22
    129a:	7a 01       	movw	r14, r20
    129c:	9d de       	rcall	.-710    	; 0xfd8 <_ZN8SPIClass8transferEh>
    129e:	e7 01       	movw	r28, r14
    12a0:	8e ef       	ldi	r24, 0xFE	; 254
    12a2:	f8 1a       	sub	r15, r24
    12a4:	89 91       	ld	r24, Y+
    12a6:	98 de       	rcall	.-720    	; 0xfd8 <_ZN8SPIClass8transferEh>
    12a8:	ce 15       	cp	r28, r14
    12aa:	df 05       	cpc	r29, r15
    12ac:	d9 f7       	brne	.-10     	; 0x12a4 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	93 de       	rcall	.-730    	; 0xfd8 <_ZN8SPIClass8transferEh>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	91 de       	rcall	.-734    	; 0xfd8 <_ZN8SPIClass8transferEh>
    12b6:	97 de       	rcall	.-722    	; 0xfe6 <_ZL6spiRecv>
    12b8:	f8 01       	movw	r30, r16
    12ba:	82 87       	std	Z+10, r24	; 0x0a
    12bc:	8f 71       	andi	r24, 0x1F	; 31
    12be:	85 30       	cpi	r24, 0x05	; 5
    12c0:	31 f0       	breq	.+12     	; 0x12ce <_ZN7Sd2Card9writeDataEhPKh+0x44>
    12c2:	81 e1       	ldi	r24, 0x11	; 17
    12c4:	85 83       	std	Z+5, r24	; 0x05
    12c6:	c8 01       	movw	r24, r16
    12c8:	90 de       	rcall	.-736    	; 0xfea <_ZN7Sd2Card14chipSelectHighEv>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	08 95       	ret

000012de <_ZN7Sd2Card10writeBlockEmPKh>:
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
    12e8:	89 01       	movw	r16, r18
    12ea:	41 15       	cp	r20, r1
    12ec:	51 05       	cpc	r21, r1
    12ee:	61 05       	cpc	r22, r1
    12f0:	71 05       	cpc	r23, r1
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    12f4:	82 e1       	ldi	r24, 0x12	; 18
    12f6:	2d c0       	rjmp	.+90     	; 0x1352 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    12f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	39 f0       	breq	.+14     	; 0x130c <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    12fe:	89 e0       	ldi	r24, 0x09	; 9
    1300:	44 0f       	add	r20, r20
    1302:	55 1f       	adc	r21, r21
    1304:	66 1f       	adc	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	8a 95       	dec	r24
    130a:	d1 f7       	brne	.-12     	; 0x1300 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    130c:	9a 01       	movw	r18, r20
    130e:	ab 01       	movw	r20, r22
    1310:	68 e1       	ldi	r22, 0x18	; 24
    1312:	ce 01       	movw	r24, r28
    1314:	bd de       	rcall	.-646    	; 0x1090 <_ZN7Sd2Card11cardCommandEhm>
    1316:	88 23       	and	r24, r24
    1318:	11 f0       	breq	.+4      	; 0x131e <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    131a:	84 e0       	ldi	r24, 0x04	; 4
    131c:	1a c0       	rjmp	.+52     	; 0x1352 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    131e:	a8 01       	movw	r20, r16
    1320:	6e ef       	ldi	r22, 0xFE	; 254
    1322:	ce 01       	movw	r24, r28
    1324:	b2 df       	rcall	.-156    	; 0x128a <_ZN7Sd2Card9writeDataEhPKh>
    1326:	88 23       	and	r24, r24
    1328:	a9 f0       	breq	.+42     	; 0x1354 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    132a:	68 e5       	ldi	r22, 0x58	; 88
    132c:	72 e0       	ldi	r23, 0x02	; 2
    132e:	ce 01       	movw	r24, r28
    1330:	97 de       	rcall	.-722    	; 0x1060 <_ZN7Sd2Card11waitNotBusyEj>
    1332:	81 11       	cpse	r24, r1
    1334:	02 c0       	rjmp	.+4      	; 0x133a <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    1336:	85 e1       	ldi	r24, 0x15	; 21
    1338:	0c c0       	rjmp	.+24     	; 0x1352 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	a9 01       	movw	r20, r18
    1340:	6d e0       	ldi	r22, 0x0D	; 13
    1342:	ce 01       	movw	r24, r28
    1344:	a5 de       	rcall	.-694    	; 0x1090 <_ZN7Sd2Card11cardCommandEhm>
    1346:	81 11       	cpse	r24, r1
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    134a:	4d de       	rcall	.-870    	; 0xfe6 <_ZL6spiRecv>
    134c:	88 23       	and	r24, r24
    134e:	31 f0       	breq	.+12     	; 0x135c <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1350:	84 e1       	ldi	r24, 0x14	; 20
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	ce 01       	movw	r24, r28
    1356:	49 de       	rcall	.-878    	; 0xfea <_ZN7Sd2Card14chipSelectHighEv>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    135c:	ce 01       	movw	r24, r28
    135e:	45 de       	rcall	.-886    	; 0xfea <_ZN7Sd2Card14chipSelectHighEv>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    136c:	e6 ec       	ldi	r30, 0xC6	; 198
    136e:	f5 e0       	ldi	r31, 0x05	; 5
    1370:	80 e5       	ldi	r24, 0x50	; 80
    1372:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1374:	11 82       	std	Z+1, r1	; 0x01
    1376:	08 95       	ret

00001378 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
    137e:	9c 01       	movw	r18, r24
    1380:	2a 5f       	subi	r18, 0xFA	; 250
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	41 e0       	ldi	r20, 0x01	; 1
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    138e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1390:	4c d5       	rcall	.+2712   	; 0x1e2a <_ZN8SdVolume15allocContiguousEmPm>
    1392:	88 23       	and	r24, r24
    1394:	a1 f0       	breq	.+40     	; 0x13be <_ZN6SdFile10addClusterEv+0x46>
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	a9 8d       	ldd	r26, Y+25	; 0x19
    139c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    139e:	89 2b       	or	r24, r25
    13a0:	8a 2b       	or	r24, r26
    13a2:	8b 2b       	or	r24, r27
    13a4:	59 f4       	brne	.+22     	; 0x13bc <_ZN6SdFile10addClusterEv+0x44>
    13a6:	8e 81       	ldd	r24, Y+6	; 0x06
    13a8:	9f 81       	ldd	r25, Y+7	; 0x07
    13aa:	a8 85       	ldd	r26, Y+8	; 0x08
    13ac:	b9 85       	ldd	r27, Y+9	; 0x09
    13ae:	8f 8b       	std	Y+23, r24	; 0x17
    13b0:	98 8f       	std	Y+24, r25	; 0x18
    13b2:	a9 8f       	std	Y+25, r26	; 0x19
    13b4:	ba 8f       	std	Y+26, r27	; 0x1a
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	80 68       	ori	r24, 0x80	; 128
    13ba:	8c 83       	std	Y+4, r24	; 0x04
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <_ZN6SdFile13cacheDirEntryEh>:
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	ec 01       	movw	r28, r24
    13ca:	46 2f       	mov	r20, r22
    13cc:	6e 85       	ldd	r22, Y+14	; 0x0e
    13ce:	7f 85       	ldd	r23, Y+15	; 0x0f
    13d0:	88 89       	ldd	r24, Y+16	; 0x10
    13d2:	99 89       	ldd	r25, Y+17	; 0x11
    13d4:	cf d3       	rcall	.+1950   	; 0x1b74 <_ZN8SdVolume13cacheRawBlockEmh>
    13d6:	88 23       	and	r24, r24
    13d8:	41 f0       	breq	.+16     	; 0x13ea <_ZN6SdFile13cacheDirEntryEh+0x26>
    13da:	8a 89       	ldd	r24, Y+18	; 0x12
    13dc:	20 e2       	ldi	r18, 0x20	; 32
    13de:	82 9f       	mul	r24, r18
    13e0:	c0 01       	movw	r24, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	8f 52       	subi	r24, 0x2F	; 47
    13e6:	9a 4f       	sbci	r25, 0xFA	; 250
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <_ZN6SdFile13cacheDirEntryEh+0x2a>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <_ZN6SdFile4readEPvj>:
    13f4:	2f 92       	push	r2
    13f6:	3f 92       	push	r3
    13f8:	4f 92       	push	r4
    13fa:	5f 92       	push	r5
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	5b 01       	movw	r10, r22
    141c:	4a 01       	movw	r8, r20
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	81 11       	cpse	r24, r1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <_ZN6SdFile4readEPvj+0x36>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255
    1428:	d4 c0       	rjmp	.+424    	; 0x15d2 <_ZN6SdFile4readEPvj+0x1de>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	80 ff       	sbrs	r24, 0
    142e:	fa cf       	rjmp	.-12     	; 0x1424 <_ZN6SdFile4readEPvj+0x30>
    1430:	4b 88       	ldd	r4, Y+19	; 0x13
    1432:	5c 88       	ldd	r5, Y+20	; 0x14
    1434:	6d 88       	ldd	r6, Y+21	; 0x15
    1436:	7e 88       	ldd	r7, Y+22	; 0x16
    1438:	4a 85       	ldd	r20, Y+10	; 0x0a
    143a:	5b 85       	ldd	r21, Y+11	; 0x0b
    143c:	6c 85       	ldd	r22, Y+12	; 0x0c
    143e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1440:	c4 01       	movw	r24, r8
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	93 01       	movw	r18, r6
    1448:	82 01       	movw	r16, r4
    144a:	04 1b       	sub	r16, r20
    144c:	15 0b       	sbc	r17, r21
    144e:	26 0b       	sbc	r18, r22
    1450:	37 0b       	sbc	r19, r23
    1452:	08 17       	cp	r16, r24
    1454:	19 07       	cpc	r17, r25
    1456:	2a 07       	cpc	r18, r26
    1458:	3b 07       	cpc	r19, r27
    145a:	18 f4       	brcc	.+6      	; 0x1462 <_ZN6SdFile4readEPvj+0x6e>
    145c:	42 01       	movw	r8, r4
    145e:	84 1a       	sub	r8, r20
    1460:	95 0a       	sbc	r9, r21
    1462:	24 01       	movw	r4, r8
    1464:	1e 01       	movw	r2, r28
    1466:	26 e0       	ldi	r18, 0x06	; 6
    1468:	22 0e       	add	r2, r18
    146a:	31 1c       	adc	r3, r1
    146c:	41 14       	cp	r4, r1
    146e:	51 04       	cpc	r5, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <_ZN6SdFile4readEPvj+0x80>
    1472:	7d c0       	rjmp	.+250    	; 0x156e <_ZN6SdFile4readEPvj+0x17a>
    1474:	4a 85       	ldd	r20, Y+10	; 0x0a
    1476:	5b 85       	ldd	r21, Y+11	; 0x0b
    1478:	6c 85       	ldd	r22, Y+12	; 0x0c
    147a:	7d 85       	ldd	r23, Y+13	; 0x0d
    147c:	6a 01       	movw	r12, r20
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	d8 22       	and	r13, r24
    1482:	ed 81       	ldd	r30, Y+5	; 0x05
    1484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1488:	8a 01       	movw	r16, r20
    148a:	9b 01       	movw	r18, r22
    148c:	f9 e0       	ldi	r31, 0x09	; 9
    148e:	36 95       	lsr	r19
    1490:	27 95       	ror	r18
    1492:	17 95       	ror	r17
    1494:	07 95       	ror	r16
    1496:	fa 95       	dec	r31
    1498:	d1 f7       	brne	.-12     	; 0x148e <_ZN6SdFile4readEPvj+0x9a>
    149a:	e2 30       	cpi	r30, 0x02	; 2
    149c:	61 f4       	brne	.+24     	; 0x14b6 <_ZN6SdFile4readEPvj+0xc2>
    149e:	fc 01       	movw	r30, r24
    14a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    14a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    14a4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    14a6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	60 0f       	add	r22, r16
    14ae:	71 1f       	adc	r23, r17
    14b0:	82 1f       	adc	r24, r18
    14b2:	93 1f       	adc	r25, r19
    14b4:	3e c0       	rjmp	.+124    	; 0x1532 <_ZN6SdFile4readEPvj+0x13e>
    14b6:	fc 01       	movw	r30, r24
    14b8:	74 80       	ldd	r7, Z+4	; 0x04
    14ba:	7a 94       	dec	r7
    14bc:	70 22       	and	r7, r16
    14be:	c1 14       	cp	r12, r1
    14c0:	d1 04       	cpc	r13, r1
    14c2:	c1 f4       	brne	.+48     	; 0x14f4 <_ZN6SdFile4readEPvj+0x100>
    14c4:	71 10       	cpse	r7, r1
    14c6:	16 c0       	rjmp	.+44     	; 0x14f4 <_ZN6SdFile4readEPvj+0x100>
    14c8:	45 2b       	or	r20, r21
    14ca:	46 2b       	or	r20, r22
    14cc:	47 2b       	or	r20, r23
    14ce:	49 f4       	brne	.+18     	; 0x14e2 <_ZN6SdFile4readEPvj+0xee>
    14d0:	8f 89       	ldd	r24, Y+23	; 0x17
    14d2:	98 8d       	ldd	r25, Y+24	; 0x18
    14d4:	a9 8d       	ldd	r26, Y+25	; 0x19
    14d6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    14d8:	8e 83       	std	Y+6, r24	; 0x06
    14da:	9f 83       	std	Y+7, r25	; 0x07
    14dc:	a8 87       	std	Y+8, r26	; 0x08
    14de:	b9 87       	std	Y+9, r27	; 0x09
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <_ZN6SdFile4readEPvj+0x100>
    14e2:	4e 81       	ldd	r20, Y+6	; 0x06
    14e4:	5f 81       	ldd	r21, Y+7	; 0x07
    14e6:	68 85       	ldd	r22, Y+8	; 0x08
    14e8:	79 85       	ldd	r23, Y+9	; 0x09
    14ea:	91 01       	movw	r18, r2
    14ec:	7c d3       	rcall	.+1784   	; 0x1be6 <_ZNK8SdVolume6fatGetEmPm>
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <_ZN6SdFile4readEPvj+0x100>
    14f2:	98 cf       	rjmp	.-208    	; 0x1424 <_ZN6SdFile4readEPvj+0x30>
    14f4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    14f6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	9f 81       	ldd	r25, Y+7	; 0x07
    14fc:	a8 85       	ldd	r26, Y+8	; 0x08
    14fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1500:	02 97       	sbiw	r24, 0x02	; 2
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	05 84       	ldd	r0, Z+13	; 0x0d
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <_ZN6SdFile4readEPvj+0x11e>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	aa 1f       	adc	r26, r26
    1510:	bb 1f       	adc	r27, r27
    1512:	0a 94       	dec	r0
    1514:	d2 f7       	brpl	.-12     	; 0x150a <_ZN6SdFile4readEPvj+0x116>
    1516:	46 85       	ldd	r20, Z+14	; 0x0e
    1518:	57 85       	ldd	r21, Z+15	; 0x0f
    151a:	60 89       	ldd	r22, Z+16	; 0x10
    151c:	71 89       	ldd	r23, Z+17	; 0x11
    151e:	84 0f       	add	r24, r20
    1520:	95 1f       	adc	r25, r21
    1522:	a6 1f       	adc	r26, r22
    1524:	b7 1f       	adc	r27, r23
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	67 0d       	add	r22, r7
    152c:	71 1d       	adc	r23, r1
    152e:	81 1d       	adc	r24, r1
    1530:	91 1d       	adc	r25, r1
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	32 e0       	ldi	r19, 0x02	; 2
    1536:	2c 19       	sub	r18, r12
    1538:	3d 09       	sbc	r19, r13
    153a:	32 01       	movw	r6, r4
    153c:	24 15       	cp	r18, r4
    153e:	35 05       	cpc	r19, r5
    1540:	08 f4       	brcc	.+2      	; 0x1544 <_ZN6SdFile4readEPvj+0x150>
    1542:	39 01       	movw	r6, r18
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	26 fd       	sbrc	r18, 6
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <_ZN6SdFile4readEPvj+0x15e>
    154a:	61 14       	cp	r6, r1
    154c:	f2 e0       	ldi	r31, 0x02	; 2
    154e:	7f 06       	cpc	r7, r31
    1550:	71 f5       	brne	.+92     	; 0x15ae <_ZN6SdFile4readEPvj+0x1ba>
    1552:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1556:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    155a:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    155e:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1562:	60 17       	cp	r22, r16
    1564:	71 07       	cpc	r23, r17
    1566:	82 07       	cpc	r24, r18
    1568:	93 07       	cpc	r25, r19
    156a:	19 f4       	brne	.+6      	; 0x1572 <_ZN6SdFile4readEPvj+0x17e>
    156c:	20 c0       	rjmp	.+64     	; 0x15ae <_ZN6SdFile4readEPvj+0x1ba>
    156e:	c4 01       	movw	r24, r8
    1570:	30 c0       	rjmp	.+96     	; 0x15d2 <_ZN6SdFile4readEPvj+0x1de>
    1572:	75 01       	movw	r14, r10
    1574:	83 01       	movw	r16, r6
    1576:	96 01       	movw	r18, r12
    1578:	ab 01       	movw	r20, r22
    157a:	bc 01       	movw	r22, r24
    157c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SdVolume7sdCard_E>
    1580:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <_ZN8SdVolume7sdCard_E+0x1>
    1584:	64 de       	rcall	.-824    	; 0x124e <_ZN7Sd2Card8readDataEmjjPh>
    1586:	88 23       	and	r24, r24
    1588:	09 f4       	brne	.+2      	; 0x158c <_ZN6SdFile4readEPvj+0x198>
    158a:	4c cf       	rjmp	.-360    	; 0x1424 <_ZN6SdFile4readEPvj+0x30>
    158c:	a6 0c       	add	r10, r6
    158e:	b7 1c       	adc	r11, r7
    1590:	8a 85       	ldd	r24, Y+10	; 0x0a
    1592:	9b 85       	ldd	r25, Y+11	; 0x0b
    1594:	ac 85       	ldd	r26, Y+12	; 0x0c
    1596:	bd 85       	ldd	r27, Y+13	; 0x0d
    1598:	86 0d       	add	r24, r6
    159a:	97 1d       	adc	r25, r7
    159c:	a1 1d       	adc	r26, r1
    159e:	b1 1d       	adc	r27, r1
    15a0:	8a 87       	std	Y+10, r24	; 0x0a
    15a2:	9b 87       	std	Y+11, r25	; 0x0b
    15a4:	ac 87       	std	Y+12, r26	; 0x0c
    15a6:	bd 87       	std	Y+13, r27	; 0x0d
    15a8:	46 18       	sub	r4, r6
    15aa:	57 08       	sbc	r5, r7
    15ac:	5f cf       	rjmp	.-322    	; 0x146c <_ZN6SdFile4readEPvj+0x78>
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	e1 d2       	rcall	.+1474   	; 0x1b74 <_ZN8SdVolume13cacheRawBlockEmh>
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <_ZN6SdFile4readEPvj+0x1c4>
    15b6:	36 cf       	rjmp	.-404    	; 0x1424 <_ZN6SdFile4readEPvj+0x30>
    15b8:	f6 01       	movw	r30, r12
    15ba:	ef 52       	subi	r30, 0x2F	; 47
    15bc:	fa 4f       	sbci	r31, 0xFA	; 250
    15be:	d5 01       	movw	r26, r10
    15c0:	cf 01       	movw	r24, r30
    15c2:	86 0d       	add	r24, r6
    15c4:	97 1d       	adc	r25, r7
    15c6:	8e 17       	cp	r24, r30
    15c8:	9f 07       	cpc	r25, r31
    15ca:	01 f3       	breq	.-64     	; 0x158c <_ZN6SdFile4readEPvj+0x198>
    15cc:	21 91       	ld	r18, Z+
    15ce:	2d 93       	st	X+, r18
    15d0:	fa cf       	rjmp	.-12     	; 0x15c6 <_ZN6SdFile4readEPvj+0x1d2>
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	5f 90       	pop	r5
    15f0:	4f 90       	pop	r4
    15f2:	3f 90       	pop	r3
    15f4:	2f 90       	pop	r2
    15f6:	08 95       	ret

000015f8 <_ZN6SdFile7seekSetEm>:
    15f8:	8f 92       	push	r8
    15fa:	9f 92       	push	r9
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	ec 01       	movw	r28, r24
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	81 11       	cpse	r24, r1
    1616:	02 c0       	rjmp	.+4      	; 0x161c <_ZN6SdFile7seekSetEm+0x24>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	77 c0       	rjmp	.+238    	; 0x170a <_ZN6SdFile7seekSetEm+0x112>
    161c:	0b 89       	ldd	r16, Y+19	; 0x13
    161e:	1c 89       	ldd	r17, Y+20	; 0x14
    1620:	2d 89       	ldd	r18, Y+21	; 0x15
    1622:	3e 89       	ldd	r19, Y+22	; 0x16
    1624:	04 17       	cp	r16, r20
    1626:	15 07       	cpc	r17, r21
    1628:	26 07       	cpc	r18, r22
    162a:	37 07       	cpc	r19, r23
    162c:	a8 f3       	brcs	.-22     	; 0x1618 <_ZN6SdFile7seekSetEm+0x20>
    162e:	6a 01       	movw	r12, r20
    1630:	7b 01       	movw	r14, r22
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	29 f4       	brne	.+10     	; 0x1640 <_ZN6SdFile7seekSetEm+0x48>
    1636:	ca 86       	std	Y+10, r12	; 0x0a
    1638:	db 86       	std	Y+11, r13	; 0x0b
    163a:	ec 86       	std	Y+12, r14	; 0x0c
    163c:	fd 86       	std	Y+13, r15	; 0x0d
    163e:	0d c0       	rjmp	.+26     	; 0x165a <_ZN6SdFile7seekSetEm+0x62>
    1640:	c1 14       	cp	r12, r1
    1642:	d1 04       	cpc	r13, r1
    1644:	e1 04       	cpc	r14, r1
    1646:	f1 04       	cpc	r15, r1
    1648:	51 f4       	brne	.+20     	; 0x165e <_ZN6SdFile7seekSetEm+0x66>
    164a:	1e 82       	std	Y+6, r1	; 0x06
    164c:	1f 82       	std	Y+7, r1	; 0x07
    164e:	18 86       	std	Y+8, r1	; 0x08
    1650:	19 86       	std	Y+9, r1	; 0x09
    1652:	1a 86       	std	Y+10, r1	; 0x0a
    1654:	1b 86       	std	Y+11, r1	; 0x0b
    1656:	1c 86       	std	Y+12, r1	; 0x0c
    1658:	1d 86       	std	Y+13, r1	; 0x0d
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	56 c0       	rjmp	.+172    	; 0x170a <_ZN6SdFile7seekSetEm+0x112>
    165e:	8a 84       	ldd	r8, Y+10	; 0x0a
    1660:	9b 84       	ldd	r9, Y+11	; 0x0b
    1662:	ac 84       	ldd	r10, Y+12	; 0x0c
    1664:	bd 84       	ldd	r11, Y+13	; 0x0d
    1666:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1668:	fc 8d       	ldd	r31, Y+28	; 0x1c
    166a:	25 85       	ldd	r18, Z+13	; 0x0d
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	27 5f       	subi	r18, 0xF7	; 247
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	b5 01       	movw	r22, r10
    1674:	a4 01       	movw	r20, r8
    1676:	41 50       	subi	r20, 0x01	; 1
    1678:	51 09       	sbc	r21, r1
    167a:	61 09       	sbc	r22, r1
    167c:	71 09       	sbc	r23, r1
    167e:	02 2e       	mov	r0, r18
    1680:	04 c0       	rjmp	.+8      	; 0x168a <_ZN6SdFile7seekSetEm+0x92>
    1682:	76 95       	lsr	r23
    1684:	67 95       	ror	r22
    1686:	57 95       	ror	r21
    1688:	47 95       	ror	r20
    168a:	0a 94       	dec	r0
    168c:	d2 f7       	brpl	.-12     	; 0x1682 <_ZN6SdFile7seekSetEm+0x8a>
    168e:	d7 01       	movw	r26, r14
    1690:	c6 01       	movw	r24, r12
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	a1 09       	sbc	r26, r1
    1696:	b1 09       	sbc	r27, r1
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <_ZN6SdFile7seekSetEm+0xaa>
    169a:	b6 95       	lsr	r27
    169c:	a7 95       	ror	r26
    169e:	97 95       	ror	r25
    16a0:	87 95       	ror	r24
    16a2:	2a 95       	dec	r18
    16a4:	d2 f7       	brpl	.-12     	; 0x169a <_ZN6SdFile7seekSetEm+0xa2>
    16a6:	84 17       	cp	r24, r20
    16a8:	95 07       	cpc	r25, r21
    16aa:	a6 07       	cpc	r26, r22
    16ac:	b7 07       	cpc	r27, r23
    16ae:	20 f0       	brcs	.+8      	; 0x16b8 <_ZN6SdFile7seekSetEm+0xc0>
    16b0:	89 28       	or	r8, r9
    16b2:	8a 28       	or	r8, r10
    16b4:	8b 28       	or	r8, r11
    16b6:	71 f4       	brne	.+28     	; 0x16d4 <_ZN6SdFile7seekSetEm+0xdc>
    16b8:	4f 89       	ldd	r20, Y+23	; 0x17
    16ba:	58 8d       	ldd	r21, Y+24	; 0x18
    16bc:	69 8d       	ldd	r22, Y+25	; 0x19
    16be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c0:	4e 83       	std	Y+6, r20	; 0x06
    16c2:	5f 83       	std	Y+7, r21	; 0x07
    16c4:	68 87       	std	Y+8, r22	; 0x08
    16c6:	79 87       	std	Y+9, r23	; 0x09
    16c8:	4c 01       	movw	r8, r24
    16ca:	5d 01       	movw	r10, r26
    16cc:	8e 01       	movw	r16, r28
    16ce:	0a 5f       	subi	r16, 0xFA	; 250
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	15 c0       	rjmp	.+42     	; 0x16fe <_ZN6SdFile7seekSetEm+0x106>
    16d4:	84 1b       	sub	r24, r20
    16d6:	95 0b       	sbc	r25, r21
    16d8:	a6 0b       	sbc	r26, r22
    16da:	b7 0b       	sbc	r27, r23
    16dc:	f5 cf       	rjmp	.-22     	; 0x16c8 <_ZN6SdFile7seekSetEm+0xd0>
    16de:	4e 81       	ldd	r20, Y+6	; 0x06
    16e0:	5f 81       	ldd	r21, Y+7	; 0x07
    16e2:	68 85       	ldd	r22, Y+8	; 0x08
    16e4:	79 85       	ldd	r23, Y+9	; 0x09
    16e6:	98 01       	movw	r18, r16
    16e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ec:	7c d2       	rcall	.+1272   	; 0x1be6 <_ZNK8SdVolume6fatGetEmPm>
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	89 1a       	sub	r8, r25
    16f2:	91 08       	sbc	r9, r1
    16f4:	a1 08       	sbc	r10, r1
    16f6:	b1 08       	sbc	r11, r1
    16f8:	88 23       	and	r24, r24
    16fa:	09 f4       	brne	.+2      	; 0x16fe <_ZN6SdFile7seekSetEm+0x106>
    16fc:	8d cf       	rjmp	.-230    	; 0x1618 <_ZN6SdFile7seekSetEm+0x20>
    16fe:	81 14       	cp	r8, r1
    1700:	91 04       	cpc	r9, r1
    1702:	a1 04       	cpc	r10, r1
    1704:	b1 04       	cpc	r11, r1
    1706:	59 f7       	brne	.-42     	; 0x16de <_ZN6SdFile7seekSetEm+0xe6>
    1708:	96 cf       	rjmp	.-212    	; 0x1636 <_ZN6SdFile7seekSetEm+0x3e>
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	08 95       	ret

00001724 <_ZN6SdFile4syncEv>:
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	88 23       	and	r24, r24
    1732:	b9 f1       	breq	.+110    	; 0x17a2 <_ZN6SdFile4syncEv+0x7e>
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	87 ff       	sbrs	r24, 7
    1738:	2f c0       	rjmp	.+94     	; 0x1798 <_ZN6SdFile4syncEv+0x74>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	ce 01       	movw	r24, r28
    173e:	42 de       	rcall	.-892    	; 0x13c4 <_ZN6SdFile13cacheDirEntryEh>
    1740:	8c 01       	movw	r16, r24
    1742:	89 2b       	or	r24, r25
    1744:	71 f1       	breq	.+92     	; 0x17a2 <_ZN6SdFile4syncEv+0x7e>
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	48 f4       	brcc	.+18     	; 0x175e <_ZN6SdFile4syncEv+0x3a>
    174c:	8b 89       	ldd	r24, Y+19	; 0x13
    174e:	9c 89       	ldd	r25, Y+20	; 0x14
    1750:	ad 89       	ldd	r26, Y+21	; 0x15
    1752:	be 89       	ldd	r27, Y+22	; 0x16
    1754:	f8 01       	movw	r30, r16
    1756:	84 8f       	std	Z+28, r24	; 0x1c
    1758:	95 8f       	std	Z+29, r25	; 0x1d
    175a:	a6 8f       	std	Z+30, r26	; 0x1e
    175c:	b7 8f       	std	Z+31, r27	; 0x1f
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	a9 8d       	ldd	r26, Y+25	; 0x19
    1764:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1766:	f8 01       	movw	r30, r16
    1768:	93 8f       	std	Z+27, r25	; 0x1b
    176a:	82 8f       	std	Z+26, r24	; 0x1a
    176c:	b5 8b       	std	Z+21, r27	; 0x15
    176e:	a4 8b       	std	Z+20, r26	; 0x14
    1770:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <_ZN6SdFile9dateTime_E>
    1774:	f0 91 c9 05 	lds	r31, 0x05C9	; 0x8005c9 <_ZN6SdFile9dateTime_E+0x1>
    1778:	30 97       	sbiw	r30, 0x00	; 0
    177a:	59 f0       	breq	.+22     	; 0x1792 <_ZN6SdFile4syncEv+0x6e>
    177c:	b8 01       	movw	r22, r16
    177e:	6a 5e       	subi	r22, 0xEA	; 234
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	c8 01       	movw	r24, r16
    1784:	48 96       	adiw	r24, 0x18	; 24
    1786:	19 95       	eicall
    1788:	f8 01       	movw	r30, r16
    178a:	80 8d       	ldd	r24, Z+24	; 0x18
    178c:	91 8d       	ldd	r25, Z+25	; 0x19
    178e:	93 8b       	std	Z+19, r25	; 0x13
    1790:	82 8b       	std	Z+18, r24	; 0x12
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	8f 77       	andi	r24, 0x7F	; 127
    1796:	8c 83       	std	Y+4, r24	; 0x04
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	b0 c1       	rjmp	.+864    	; 0x1b02 <_ZN8SdVolume10cacheFlushEv>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	08 95       	ret

000017ae <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    17ae:	2f 92       	push	r2
    17b0:	3f 92       	push	r3
    17b2:	4f 92       	push	r4
    17b4:	5f 92       	push	r5
    17b6:	6f 92       	push	r6
    17b8:	7f 92       	push	r7
    17ba:	8f 92       	push	r8
    17bc:	9f 92       	push	r9
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <_ZN6SdFile5writeEPKvj+0x26>
    17d4:	1f 92       	push	r1
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	8c 01       	movw	r16, r24
    17dc:	6b 01       	movw	r12, r22
    17de:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    17e0:	dc 01       	movw	r26, r24
    17e2:	15 96       	adiw	r26, 0x05	; 5
    17e4:	8c 91       	ld	r24, X
    17e6:	15 97       	sbiw	r26, 0x05	; 5
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	c1 f4       	brne	.+48     	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>
    17ec:	14 96       	adiw	r26, 0x04	; 4
    17ee:	8c 91       	ld	r24, X
    17f0:	81 ff       	sbrs	r24, 1
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    17f4:	82 ff       	sbrs	r24, 2
    17f6:	1c c0       	rjmp	.+56     	; 0x1830 <_ZN6SdFile5writeEPKvj+0x82>
    17f8:	f8 01       	movw	r30, r16
    17fa:	43 89       	ldd	r20, Z+19	; 0x13
    17fc:	54 89       	ldd	r21, Z+20	; 0x14
    17fe:	65 89       	ldd	r22, Z+21	; 0x15
    1800:	76 89       	ldd	r23, Z+22	; 0x16
    1802:	82 85       	ldd	r24, Z+10	; 0x0a
    1804:	93 85       	ldd	r25, Z+11	; 0x0b
    1806:	a4 85       	ldd	r26, Z+12	; 0x0c
    1808:	b5 85       	ldd	r27, Z+13	; 0x0d
    180a:	84 17       	cp	r24, r20
    180c:	95 07       	cpc	r25, r21
    180e:	a6 07       	cpc	r26, r22
    1810:	b7 07       	cpc	r27, r23
    1812:	71 f0       	breq	.+28     	; 0x1830 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1814:	c8 01       	movw	r24, r16
    1816:	f0 de       	rcall	.-544    	; 0x15f8 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    1818:	81 11       	cpse	r24, r1
    181a:	0a c0       	rjmp	.+20     	; 0x1830 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	d8 01       	movw	r26, r16
    1822:	13 96       	adiw	r26, 0x03	; 3
    1824:	9c 93       	st	X, r25
    1826:	8e 93       	st	-X, r24
    1828:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	42 c1       	rjmp	.+644    	; 0x1ab4 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1830:	41 01       	movw	r8, r2
    1832:	82 c0       	rjmp	.+260    	; 0x1938 <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1834:	5b 96       	adiw	r26, 0x1b	; 27
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    183c:	fc 01       	movw	r30, r24
    183e:	74 80       	ldd	r7, Z+4	; 0x04
    1840:	2f ef       	ldi	r18, 0xFF	; 255
    1842:	27 0d       	add	r18, r7
    1844:	2a 01       	movw	r4, r20
    1846:	3b 01       	movw	r6, r22
    1848:	39 e0       	ldi	r19, 0x09	; 9
    184a:	76 94       	lsr	r7
    184c:	67 94       	ror	r6
    184e:	57 94       	ror	r5
    1850:	47 94       	ror	r4
    1852:	3a 95       	dec	r19
    1854:	d1 f7       	brne	.-12     	; 0x184a <_ZN6SdFile5writeEPKvj+0x9c>
    1856:	72 2e       	mov	r7, r18
    1858:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    185a:	7a 01       	movw	r14, r20
    185c:	f1 e0       	ldi	r31, 0x01	; 1
    185e:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    1860:	77 20       	and	r7, r7
    1862:	09 f4       	brne	.+2      	; 0x1866 <_ZN6SdFile5writeEPKvj+0xb8>
    1864:	75 c0       	rjmp	.+234    	; 0x1950 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	8e 19       	sub	r24, r14
    186c:	9f 09       	sbc	r25, r15
    186e:	54 01       	movw	r10, r8
    1870:	88 15       	cp	r24, r8
    1872:	99 05       	cpc	r25, r9
    1874:	08 f4       	brcc	.+2      	; 0x1878 <_ZN6SdFile5writeEPKvj+0xca>
    1876:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1878:	d8 01       	movw	r26, r16
    187a:	5b 96       	adiw	r26, 0x1b	; 27
    187c:	2d 91       	ld	r18, X+
    187e:	3c 91       	ld	r19, X
    1880:	5c 97       	sbiw	r26, 0x1c	; 28
    1882:	16 96       	adiw	r26, 0x06	; 6
    1884:	8d 91       	ld	r24, X+
    1886:	9d 91       	ld	r25, X+
    1888:	0d 90       	ld	r0, X+
    188a:	bc 91       	ld	r27, X
    188c:	a0 2d       	mov	r26, r0
    188e:	02 97       	sbiw	r24, 0x02	; 2
    1890:	a1 09       	sbc	r26, r1
    1892:	b1 09       	sbc	r27, r1
    1894:	f9 01       	movw	r30, r18
    1896:	05 84       	ldd	r0, Z+13	; 0x0d
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <_ZN6SdFile5writeEPKvj+0xf4>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	aa 1f       	adc	r26, r26
    18a0:	bb 1f       	adc	r27, r27
    18a2:	0a 94       	dec	r0
    18a4:	d2 f7       	brpl	.-12     	; 0x189a <_ZN6SdFile5writeEPKvj+0xec>
    18a6:	46 85       	ldd	r20, Z+14	; 0x0e
    18a8:	57 85       	ldd	r21, Z+15	; 0x0f
    18aa:	60 89       	ldd	r22, Z+16	; 0x10
    18ac:	71 89       	ldd	r23, Z+17	; 0x11
    18ae:	84 0f       	add	r24, r20
    18b0:	95 1f       	adc	r25, r21
    18b2:	a6 1f       	adc	r26, r22
    18b4:	b7 1f       	adc	r27, r23
    18b6:	9c 01       	movw	r18, r24
    18b8:	ad 01       	movw	r20, r26
    18ba:	27 0d       	add	r18, r7
    18bc:	31 1d       	adc	r19, r1
    18be:	41 1d       	adc	r20, r1
    18c0:	51 1d       	adc	r21, r1
    18c2:	29 01       	movw	r4, r18
    18c4:	3a 01       	movw	r6, r20
    if (n == 512) {
    18c6:	a1 14       	cp	r10, r1
    18c8:	32 e0       	ldi	r19, 0x02	; 2
    18ca:	b3 06       	cpc	r11, r19
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <_ZN6SdFile5writeEPKvj+0x122>
    18ce:	85 c0       	rjmp	.+266    	; 0x19da <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    18d0:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    18d4:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    18d8:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    18dc:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    18e0:	48 16       	cp	r4, r24
    18e2:	59 06       	cpc	r5, r25
    18e4:	6a 06       	cpc	r6, r26
    18e6:	7b 06       	cpc	r7, r27
    18e8:	59 f4       	brne	.+22     	; 0x1900 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	dc 01       	movw	r26, r24
    18f0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    18f4:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    18f8:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    18fc:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1900:	96 01       	movw	r18, r12
    1902:	b3 01       	movw	r22, r6
    1904:	a2 01       	movw	r20, r4
    1906:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SdVolume7sdCard_E>
    190a:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <_ZN8SdVolume7sdCard_E+0x1>
    190e:	e7 dc       	rcall	.-1586   	; 0x12de <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1910:	88 23       	and	r24, r24
    1912:	09 f4       	brne	.+2      	; 0x1916 <_ZN6SdFile5writeEPKvj+0x168>
    1914:	83 cf       	rjmp	.-250    	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    1916:	9e ef       	ldi	r25, 0xFE	; 254
    1918:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    191a:	8a 18       	sub	r8, r10
    191c:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    191e:	f8 01       	movw	r30, r16
    1920:	82 85       	ldd	r24, Z+10	; 0x0a
    1922:	93 85       	ldd	r25, Z+11	; 0x0b
    1924:	a4 85       	ldd	r26, Z+12	; 0x0c
    1926:	b5 85       	ldd	r27, Z+13	; 0x0d
    1928:	8a 0d       	add	r24, r10
    192a:	9b 1d       	adc	r25, r11
    192c:	a1 1d       	adc	r26, r1
    192e:	b1 1d       	adc	r27, r1
    1930:	82 87       	std	Z+10, r24	; 0x0a
    1932:	93 87       	std	Z+11, r25	; 0x0b
    1934:	a4 87       	std	Z+12, r26	; 0x0c
    1936:	b5 87       	std	Z+13, r27	; 0x0d
    1938:	d8 01       	movw	r26, r16
    193a:	1a 96       	adiw	r26, 0x0a	; 10
    193c:	4d 91       	ld	r20, X+
    193e:	5d 91       	ld	r21, X+
    1940:	6d 91       	ld	r22, X+
    1942:	7c 91       	ld	r23, X
    1944:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1946:	81 14       	cp	r8, r1
    1948:	91 04       	cpc	r9, r1
    194a:	09 f0       	breq	.+2      	; 0x194e <_ZN6SdFile5writeEPKvj+0x1a0>
    194c:	73 cf       	rjmp	.-282    	; 0x1834 <_ZN6SdFile5writeEPKvj+0x86>
    194e:	83 c0       	rjmp	.+262    	; 0x1a56 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    1950:	e1 14       	cp	r14, r1
    1952:	f1 04       	cpc	r15, r1
    1954:	09 f0       	breq	.+2      	; 0x1958 <_ZN6SdFile5writeEPKvj+0x1aa>
    1956:	87 cf       	rjmp	.-242    	; 0x1866 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    1958:	16 96       	adiw	r26, 0x06	; 6
    195a:	4d 91       	ld	r20, X+
    195c:	5d 91       	ld	r21, X+
    195e:	6d 91       	ld	r22, X+
    1960:	7c 91       	ld	r23, X
    1962:	19 97       	sbiw	r26, 0x09	; 9
    1964:	41 15       	cp	r20, r1
    1966:	51 05       	cpc	r21, r1
    1968:	61 05       	cpc	r22, r1
    196a:	71 05       	cpc	r23, r1
    196c:	59 f4       	brne	.+22     	; 0x1984 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    196e:	57 96       	adiw	r26, 0x17	; 23
    1970:	8d 91       	ld	r24, X+
    1972:	9d 91       	ld	r25, X+
    1974:	0d 90       	ld	r0, X+
    1976:	bc 91       	ld	r27, X
    1978:	a0 2d       	mov	r26, r0
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	a1 05       	cpc	r26, r1
    197e:	b1 05       	cpc	r27, r1
    1980:	31 f5       	brne	.+76     	; 0x19ce <_ZN6SdFile5writeEPKvj+0x220>
    1982:	20 c0       	rjmp	.+64     	; 0x19c4 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1984:	9e 01       	movw	r18, r28
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	2d d1       	rcall	.+602    	; 0x1be6 <_ZNK8SdVolume6fatGetEmPm>
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <_ZN6SdFile5writeEPKvj+0x1e4>
    1990:	4d cf       	rjmp	.-358    	; 0x182c <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	ab 81       	ldd	r26, Y+3	; 0x03
    1998:	bc 81       	ldd	r27, Y+4	; 0x04
    199a:	f8 01       	movw	r30, r16
    199c:	23 8d       	ldd	r18, Z+27	; 0x1b
    199e:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    19a0:	f9 01       	movw	r30, r18
    19a2:	27 89       	ldd	r18, Z+23	; 0x17
    19a4:	20 31       	cpi	r18, 0x10	; 16
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <_ZN6SdFile5writeEPKvj+0x204>
    19a8:	48 ef       	ldi	r20, 0xF8	; 248
    19aa:	5f ef       	ldi	r21, 0xFF	; 255
    19ac:	6f ef       	ldi	r22, 0xFF	; 255
    19ae:	7f e0       	ldi	r23, 0x0F	; 15
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <_ZN6SdFile5writeEPKvj+0x20c>
    19b2:	48 ef       	ldi	r20, 0xF8	; 248
    19b4:	5f ef       	ldi	r21, 0xFF	; 255
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	84 17       	cp	r24, r20
    19bc:	95 07       	cpc	r25, r21
    19be:	a6 07       	cpc	r26, r22
    19c0:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    19c2:	28 f0       	brcs	.+10     	; 0x19ce <_ZN6SdFile5writeEPKvj+0x220>
    19c4:	c8 01       	movw	r24, r16
    19c6:	d8 dc       	rcall	.-1616   	; 0x1378 <_ZN6SdFile10addClusterEv>
    19c8:	81 11       	cpse	r24, r1
    19ca:	4d cf       	rjmp	.-358    	; 0x1866 <_ZN6SdFile5writeEPKvj+0xb8>
    19cc:	27 cf       	rjmp	.-434    	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    19ce:	f8 01       	movw	r30, r16
    19d0:	86 83       	std	Z+6, r24	; 0x06
    19d2:	97 83       	std	Z+7, r25	; 0x07
    19d4:	a0 87       	std	Z+8, r26	; 0x08
    19d6:	b1 87       	std	Z+9, r27	; 0x09
    19d8:	46 cf       	rjmp	.-372    	; 0x1866 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    19da:	e1 14       	cp	r14, r1
    19dc:	f1 04       	cpc	r15, r1
    19de:	21 f5       	brne	.+72     	; 0x1a28 <_ZN6SdFile5writeEPKvj+0x27a>
    19e0:	d8 01       	movw	r26, r16
    19e2:	1a 96       	adiw	r26, 0x0a	; 10
    19e4:	4d 91       	ld	r20, X+
    19e6:	5d 91       	ld	r21, X+
    19e8:	6d 91       	ld	r22, X+
    19ea:	7c 91       	ld	r23, X
    19ec:	1d 97       	sbiw	r26, 0x0d	; 13
    19ee:	53 96       	adiw	r26, 0x13	; 19
    19f0:	8d 91       	ld	r24, X+
    19f2:	9d 91       	ld	r25, X+
    19f4:	0d 90       	ld	r0, X+
    19f6:	bc 91       	ld	r27, X
    19f8:	a0 2d       	mov	r26, r0
    19fa:	48 17       	cp	r20, r24
    19fc:	59 07       	cpc	r21, r25
    19fe:	6a 07       	cpc	r22, r26
    1a00:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1a02:	90 f0       	brcs	.+36     	; 0x1a28 <_ZN6SdFile5writeEPKvj+0x27a>
    1a04:	7e d0       	rcall	.+252    	; 0x1b02 <_ZN8SdVolume10cacheFlushEv>
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <_ZN6SdFile5writeEPKvj+0x25e>
    1a0a:	08 cf       	rjmp	.-496    	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    1a0c:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1a10:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1a14:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1a18:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1a1c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
    1a20:	81 60       	ori	r24, 0x01	; 1
    1a22:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1a26:	07 c0       	rjmp	.+14     	; 0x1a36 <_ZN6SdFile5writeEPKvj+0x288>
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	c3 01       	movw	r24, r6
    1a2c:	b2 01       	movw	r22, r4
    1a2e:	a2 d0       	rcall	.+324    	; 0x1b74 <_ZN8SdVolume13cacheRawBlockEmh>
    1a30:	88 23       	and	r24, r24
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <_ZN6SdFile5writeEPKvj+0x288>
    1a34:	f3 ce       	rjmp	.-538    	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>
    1a36:	d6 01       	movw	r26, r12
    1a38:	f7 01       	movw	r30, r14
    1a3a:	ef 52       	subi	r30, 0x2F	; 47
    1a3c:	fa 4f       	sbci	r31, 0xFA	; 250
    1a3e:	9f 01       	movw	r18, r30
    1a40:	2a 0d       	add	r18, r10
    1a42:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    1a44:	2e 17       	cp	r18, r30
    1a46:	3f 07       	cpc	r19, r31
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <_ZN6SdFile5writeEPKvj+0x2a2>
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	81 93       	st	Z+, r24
    1a4e:	fa cf       	rjmp	.-12     	; 0x1a44 <_ZN6SdFile5writeEPKvj+0x296>
    1a50:	ca 0c       	add	r12, r10
    1a52:	db 1c       	adc	r13, r11
    1a54:	62 cf       	rjmp	.-316    	; 0x191a <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1a56:	d8 01       	movw	r26, r16
    1a58:	53 96       	adiw	r26, 0x13	; 19
    1a5a:	cd 90       	ld	r12, X+
    1a5c:	dd 90       	ld	r13, X+
    1a5e:	ed 90       	ld	r14, X+
    1a60:	fc 90       	ld	r15, X
    1a62:	56 97       	sbiw	r26, 0x16	; 22
    1a64:	14 96       	adiw	r26, 0x04	; 4
    1a66:	8c 91       	ld	r24, X
    1a68:	c4 16       	cp	r12, r20
    1a6a:	d5 06       	cpc	r13, r21
    1a6c:	e6 06       	cpc	r14, r22
    1a6e:	f7 06       	cpc	r15, r23
    1a70:	40 f4       	brcc	.+16     	; 0x1a82 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1a72:	f8 01       	movw	r30, r16
    1a74:	43 8b       	std	Z+19, r20	; 0x13
    1a76:	54 8b       	std	Z+20, r21	; 0x14
    1a78:	65 8b       	std	Z+21, r22	; 0x15
    1a7a:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    1a7c:	80 68       	ori	r24, 0x80	; 128
    1a7e:	84 83       	std	Z+4, r24	; 0x04
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    1a82:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <_ZN6SdFile9dateTime_E>
    1a86:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <_ZN6SdFile9dateTime_E+0x1>
    1a8a:	23 2b       	or	r18, r19
    1a8c:	39 f0       	breq	.+14     	; 0x1a9c <_ZN6SdFile5writeEPKvj+0x2ee>
    1a8e:	21 14       	cp	r2, r1
    1a90:	31 04       	cpc	r3, r1
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1a94:	80 68       	ori	r24, 0x80	; 128
    1a96:	d8 01       	movw	r26, r16
    1a98:	14 96       	adiw	r26, 0x04	; 4
    1a9a:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	84 81       	ldd	r24, Z+4	; 0x04
    1aa0:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <_ZN6SdFile5writeEPKvj+0x2fa>
    1aa4:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <_ZN6SdFile5writeEPKvj+0x306>
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	3c de       	rcall	.-904    	; 0x1724 <_ZN6SdFile4syncEv>
    1aac:	88 23       	and	r24, r24
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <_ZN6SdFile5writeEPKvj+0x304>
    1ab0:	b5 ce       	rjmp	.-662    	; 0x181c <_ZN6SdFile5writeEPKvj+0x6e>
    1ab2:	f8 cf       	rjmp	.-16     	; 0x1aa4 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	7f 90       	pop	r7
    1ad6:	6f 90       	pop	r6
    1ad8:	5f 90       	pop	r5
    1ada:	4f 90       	pop	r4
    1adc:	3f 90       	pop	r3
    1ade:	2f 90       	pop	r2
    1ae0:	08 95       	ret

00001ae2 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	1f 92       	push	r1
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	be 01       	movw	r22, r28
    1af4:	6f 5f       	subi	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	5a de       	rcall	.-844    	; 0x17ae <_ZN6SdFile5writeEPKvj>
}
    1afa:	0f 90       	pop	r0
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <_ZN8SdVolume10cacheFlushEv>:
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    1b02:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
    1b06:	88 23       	and	r24, r24
    1b08:	99 f1       	breq	.+102    	; 0x1b70 <_ZN8SdVolume10cacheFlushEv+0x6e>
    1b0a:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1b0e:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1b12:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1b16:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1b1a:	21 ed       	ldi	r18, 0xD1	; 209
    1b1c:	35 e0       	ldi	r19, 0x05	; 5
    1b1e:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SdVolume7sdCard_E>
    1b22:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <_ZN8SdVolume7sdCard_E+0x1>
    1b26:	db db       	rcall	.-2122   	; 0x12de <_ZN7Sd2Card10writeBlockEmPKh>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <_ZN8SdVolume10cacheFlushEv+0x2e>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	08 95       	ret
    1b30:	40 91 ca 05 	lds	r20, 0x05CA	; 0x8005ca <_ZN8SdVolume17cacheMirrorBlock_E>
    1b34:	50 91 cb 05 	lds	r21, 0x05CB	; 0x8005cb <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    1b38:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    1b3c:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    1b40:	41 15       	cp	r20, r1
    1b42:	51 05       	cpc	r21, r1
    1b44:	61 05       	cpc	r22, r1
    1b46:	71 05       	cpc	r23, r1
    1b48:	89 f0       	breq	.+34     	; 0x1b6c <_ZN8SdVolume10cacheFlushEv+0x6a>
    1b4a:	21 ed       	ldi	r18, 0xD1	; 209
    1b4c:	35 e0       	ldi	r19, 0x05	; 5
    1b4e:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SdVolume7sdCard_E>
    1b52:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <_ZN8SdVolume7sdCard_E+0x1>
    1b56:	c3 db       	rcall	.-2170   	; 0x12de <_ZN7Sd2Card10writeBlockEmPKh>
    1b58:	88 23       	and	r24, r24
    1b5a:	41 f3       	breq	.-48     	; 0x1b2c <_ZN8SdVolume10cacheFlushEv+0x2a>
    1b5c:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <_ZN8SdVolume17cacheMirrorBlock_E>
    1b60:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    1b64:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    1b68:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    1b6c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	08 95       	ret

00001b74 <_ZN8SdVolume13cacheRawBlockEmh>:
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	cf 93       	push	r28
    1b7e:	6b 01       	movw	r12, r22
    1b80:	7c 01       	movw	r14, r24
    1b82:	c4 2f       	mov	r28, r20
    1b84:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1b88:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1b8c:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1b90:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1b94:	8c 15       	cp	r24, r12
    1b96:	9d 05       	cpc	r25, r13
    1b98:	ae 05       	cpc	r26, r14
    1b9a:	bf 05       	cpc	r27, r15
    1b9c:	c1 f0       	breq	.+48     	; 0x1bce <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    1b9e:	b1 df       	rcall	.-158    	; 0x1b02 <_ZN8SdVolume10cacheFlushEv>
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	19 c0       	rjmp	.+50     	; 0x1bda <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    1ba8:	21 ed       	ldi	r18, 0xD1	; 209
    1baa:	35 e0       	ldi	r19, 0x05	; 5
    1bac:	b7 01       	movw	r22, r14
    1bae:	a6 01       	movw	r20, r12
    1bb0:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SdVolume7sdCard_E>
    1bb4:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <_ZN8SdVolume7sdCard_E+0x1>
    1bb8:	59 db       	rcall	.-2382   	; 0x126c <_ZN7Sd2Card9readBlockEmPh>
    1bba:	88 23       	and	r24, r24
    1bbc:	99 f3       	breq	.-26     	; 0x1ba4 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    1bbe:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1bc2:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1bc6:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1bca:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1bce:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
    1bd2:	c8 2b       	or	r28, r24
    1bd4:	c0 93 ce 05 	sts	0x05CE, r28	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	cf 91       	pop	r28
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	cf 90       	pop	r12
    1be4:	08 95       	ret

00001be6 <_ZNK8SdVolume6fatGetEmPm>:
    1be6:	8f 92       	push	r8
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	fc 01       	movw	r30, r24
    1c00:	81 85       	ldd	r24, Z+9	; 0x09
    1c02:	92 85       	ldd	r25, Z+10	; 0x0a
    1c04:	a3 85       	ldd	r26, Z+11	; 0x0b
    1c06:	b4 85       	ldd	r27, Z+12	; 0x0c
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	a1 1d       	adc	r26, r1
    1c0c:	b1 1d       	adc	r27, r1
    1c0e:	84 17       	cp	r24, r20
    1c10:	95 07       	cpc	r25, r21
    1c12:	a6 07       	cpc	r26, r22
    1c14:	b7 07       	cpc	r27, r23
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <_ZNK8SdVolume6fatGetEmPm+0x36>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	5a c0       	rjmp	.+180    	; 0x1cd0 <_ZNK8SdVolume6fatGetEmPm+0xea>
    1c1c:	83 88       	ldd	r8, Z+19	; 0x13
    1c1e:	94 88       	ldd	r9, Z+20	; 0x14
    1c20:	a5 88       	ldd	r10, Z+21	; 0x15
    1c22:	b6 88       	ldd	r11, Z+22	; 0x16
    1c24:	87 89       	ldd	r24, Z+23	; 0x17
    1c26:	80 31       	cpi	r24, 0x10	; 16
    1c28:	29 f4       	brne	.+10     	; 0x1c34 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    1c2a:	bb 27       	eor	r27, r27
    1c2c:	a7 2f       	mov	r26, r23
    1c2e:	96 2f       	mov	r25, r22
    1c30:	85 2f       	mov	r24, r21
    1c32:	09 c0       	rjmp	.+18     	; 0x1c46 <_ZNK8SdVolume6fatGetEmPm+0x60>
    1c34:	db 01       	movw	r26, r22
    1c36:	ca 01       	movw	r24, r20
    1c38:	c7 e0       	ldi	r28, 0x07	; 7
    1c3a:	b6 95       	lsr	r27
    1c3c:	a7 95       	ror	r26
    1c3e:	97 95       	ror	r25
    1c40:	87 95       	ror	r24
    1c42:	ca 95       	dec	r28
    1c44:	d1 f7       	brne	.-12     	; 0x1c3a <_ZNK8SdVolume6fatGetEmPm+0x54>
    1c46:	e9 01       	movw	r28, r18
    1c48:	6a 01       	movw	r12, r20
    1c4a:	7b 01       	movw	r14, r22
    1c4c:	8f 01       	movw	r16, r30
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	68 0d       	add	r22, r8
    1c54:	79 1d       	adc	r23, r9
    1c56:	8a 1d       	adc	r24, r10
    1c58:	9b 1d       	adc	r25, r11
    1c5a:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1c5e:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1c62:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1c66:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1c6a:	68 15       	cp	r22, r8
    1c6c:	79 05       	cpc	r23, r9
    1c6e:	8a 05       	cpc	r24, r10
    1c70:	9b 05       	cpc	r25, r11
    1c72:	91 f4       	brne	.+36     	; 0x1c98 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    1c74:	f8 01       	movw	r30, r16
    1c76:	87 89       	ldd	r24, Z+23	; 0x17
    1c78:	80 31       	cpi	r24, 0x10	; 16
    1c7a:	99 f4       	brne	.+38     	; 0x1ca2 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    1c7c:	dd 24       	eor	r13, r13
    1c7e:	ee 24       	eor	r14, r14
    1c80:	ff 24       	eor	r15, r15
    1c82:	c6 01       	movw	r24, r12
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	fc 01       	movw	r30, r24
    1c8a:	ef 52       	subi	r30, 0x2F	; 47
    1c8c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	17 c0       	rjmp	.+46     	; 0x1cc6 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	6c df       	rcall	.-296    	; 0x1b74 <_ZN8SdVolume13cacheRawBlockEmh>
    1c9c:	81 11       	cpse	r24, r1
    1c9e:	ea cf       	rjmp	.-44     	; 0x1c74 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    1ca0:	bb cf       	rjmp	.-138    	; 0x1c18 <_ZNK8SdVolume6fatGetEmPm+0x32>
    1ca2:	e8 94       	clt
    1ca4:	c7 f8       	bld	r12, 7
    1ca6:	dd 24       	eor	r13, r13
    1ca8:	ee 24       	eor	r14, r14
    1caa:	ff 24       	eor	r15, r15
    1cac:	c6 01       	movw	r24, r12
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	ef 52       	subi	r30, 0x2F	; 47
    1cba:	fa 4f       	sbci	r31, 0xFA	; 250
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	a2 81       	ldd	r26, Z+2	; 0x02
    1cc2:	b3 81       	ldd	r27, Z+3	; 0x03
    1cc4:	bf 70       	andi	r27, 0x0F	; 15
    1cc6:	88 83       	st	Y, r24
    1cc8:	99 83       	std	Y+1, r25	; 0x01
    1cca:	aa 83       	std	Y+2, r26	; 0x02
    1ccc:	bb 83       	std	Y+3, r27	; 0x03
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	08 95       	ret

00001cea <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1cea:	4f 92       	push	r4
    1cec:	5f 92       	push	r5
    1cee:	6f 92       	push	r6
    1cf0:	7f 92       	push	r7
    1cf2:	8f 92       	push	r8
    1cf4:	9f 92       	push	r9
    1cf6:	af 92       	push	r10
    1cf8:	bf 92       	push	r11
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    1d0c:	42 30       	cpi	r20, 0x02	; 2
    1d0e:	51 05       	cpc	r21, r1
    1d10:	61 05       	cpc	r22, r1
    1d12:	71 05       	cpc	r23, r1
    1d14:	10 f4       	brcc	.+4      	; 0x1d1a <_ZN8SdVolume6fatPutEmm+0x30>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	77 c0       	rjmp	.+238    	; 0x1e08 <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d20:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	a1 1d       	adc	r26, r1
    1d26:	b1 1d       	adc	r27, r1
    1d28:	84 17       	cp	r24, r20
    1d2a:	95 07       	cpc	r25, r21
    1d2c:	a6 07       	cpc	r26, r22
    1d2e:	b7 07       	cpc	r27, r23
    1d30:	90 f3       	brcs	.-28     	; 0x1d16 <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1d32:	cb 88       	ldd	r12, Y+19	; 0x13
    1d34:	dc 88       	ldd	r13, Y+20	; 0x14
    1d36:	ed 88       	ldd	r14, Y+21	; 0x15
    1d38:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	80 31       	cpi	r24, 0x10	; 16
    1d3e:	29 f4       	brne	.+10     	; 0x1d4a <_ZN8SdVolume6fatPutEmm+0x60>
    1d40:	bb 27       	eor	r27, r27
    1d42:	a7 2f       	mov	r26, r23
    1d44:	96 2f       	mov	r25, r22
    1d46:	85 2f       	mov	r24, r21
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <_ZN8SdVolume6fatPutEmm+0x72>
    1d4a:	db 01       	movw	r26, r22
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	e7 e0       	ldi	r30, 0x07	; 7
    1d50:	b6 95       	lsr	r27
    1d52:	a7 95       	ror	r26
    1d54:	97 95       	ror	r25
    1d56:	87 95       	ror	r24
    1d58:	ea 95       	dec	r30
    1d5a:	d1 f7       	brne	.-12     	; 0x1d50 <_ZN8SdVolume6fatPutEmm+0x66>
    1d5c:	48 01       	movw	r8, r16
    1d5e:	59 01       	movw	r10, r18
    1d60:	2a 01       	movw	r4, r20
    1d62:	3b 01       	movw	r6, r22
    1d64:	c8 0e       	add	r12, r24
    1d66:	d9 1e       	adc	r13, r25
    1d68:	ea 1e       	adc	r14, r26
    1d6a:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    1d6c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1d70:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1d74:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1d78:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1d7c:	c8 16       	cp	r12, r24
    1d7e:	d9 06       	cpc	r13, r25
    1d80:	ea 06       	cpc	r14, r26
    1d82:	fb 06       	cpc	r15, r27
    1d84:	81 f4       	brne	.+32     	; 0x1da6 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    1d86:	8f 89       	ldd	r24, Y+23	; 0x17
    1d88:	80 31       	cpi	r24, 0x10	; 16
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1d8c:	b3 01       	movw	r22, r6
    1d8e:	a2 01       	movw	r20, r4
    1d90:	55 27       	eor	r21, r21
    1d92:	66 27       	eor	r22, r22
    1d94:	77 27       	eor	r23, r23
    1d96:	44 0f       	add	r20, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	fa 01       	movw	r30, r20
    1d9c:	ef 52       	subi	r30, 0x2F	; 47
    1d9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1da0:	91 82       	std	Z+1, r9	; 0x01
    1da2:	80 82       	st	Z, r8
    1da4:	18 c0       	rjmp	.+48     	; 0x1dd6 <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	c7 01       	movw	r24, r14
    1daa:	b6 01       	movw	r22, r12
    1dac:	e3 de       	rcall	.-570    	; 0x1b74 <_ZN8SdVolume13cacheRawBlockEmh>
    1dae:	81 11       	cpse	r24, r1
    1db0:	ea cf       	rjmp	.-44     	; 0x1d86 <_ZN8SdVolume6fatPutEmm+0x9c>
    1db2:	b1 cf       	rjmp	.-158    	; 0x1d16 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    1db4:	b3 01       	movw	r22, r6
    1db6:	a2 01       	movw	r20, r4
    1db8:	4f 77       	andi	r20, 0x7F	; 127
    1dba:	55 27       	eor	r21, r21
    1dbc:	66 27       	eor	r22, r22
    1dbe:	77 27       	eor	r23, r23
    1dc0:	44 0f       	add	r20, r20
    1dc2:	55 1f       	adc	r21, r21
    1dc4:	44 0f       	add	r20, r20
    1dc6:	55 1f       	adc	r21, r21
    1dc8:	fa 01       	movw	r30, r20
    1dca:	ef 52       	subi	r30, 0x2F	; 47
    1dcc:	fa 4f       	sbci	r31, 0xFA	; 250
    1dce:	80 82       	st	Z, r8
    1dd0:	91 82       	std	Z+1, r9	; 0x01
    1dd2:	a2 82       	std	Z+2, r10	; 0x02
    1dd4:	b3 82       	std	Z+3, r11	; 0x03
    1dd6:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
    1dda:	81 60       	ori	r24, 0x01	; 1
    1ddc:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1de0:	8a 89       	ldd	r24, Y+18	; 0x12
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	80 f0       	brcs	.+32     	; 0x1e06 <_ZN8SdVolume6fatPutEmm+0x11c>
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	af 81       	ldd	r26, Y+7	; 0x07
    1dec:	b8 85       	ldd	r27, Y+8	; 0x08
    1dee:	c8 0e       	add	r12, r24
    1df0:	d9 1e       	adc	r13, r25
    1df2:	ea 1e       	adc	r14, r26
    1df4:	fb 1e       	adc	r15, r27
    1df6:	c0 92 ca 05 	sts	0x05CA, r12	; 0x8005ca <_ZN8SdVolume17cacheMirrorBlock_E>
    1dfa:	d0 92 cb 05 	sts	0x05CB, r13	; 0x8005cb <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    1dfe:	e0 92 cc 05 	sts	0x05CC, r14	; 0x8005cc <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    1e02:	f0 92 cd 05 	sts	0x05CD, r15	; 0x8005cd <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
}
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	8f 90       	pop	r8
    1e20:	7f 90       	pop	r7
    1e22:	6f 90       	pop	r6
    1e24:	5f 90       	pop	r5
    1e26:	4f 90       	pop	r4
    1e28:	08 95       	ret

00001e2a <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1e2a:	2f 92       	push	r2
    1e2c:	3f 92       	push	r3
    1e2e:	4f 92       	push	r4
    1e30:	5f 92       	push	r5
    1e32:	6f 92       	push	r6
    1e34:	7f 92       	push	r7
    1e36:	9f 92       	push	r9
    1e38:	af 92       	push	r10
    1e3a:	bf 92       	push	r11
    1e3c:	cf 92       	push	r12
    1e3e:	df 92       	push	r13
    1e40:	ef 92       	push	r14
    1e42:	ff 92       	push	r15
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	60 97       	sbiw	r28, 0x10	; 16
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	5c 01       	movw	r10, r24
    1e5e:	49 87       	std	Y+9, r20	; 0x09
    1e60:	5a 87       	std	Y+10, r21	; 0x0a
    1e62:	6b 87       	std	Y+11, r22	; 0x0b
    1e64:	7c 87       	std	Y+12, r23	; 0x0c
    1e66:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    1e68:	d9 01       	movw	r26, r18
    1e6a:	cd 90       	ld	r12, X+
    1e6c:	dd 90       	ld	r13, X+
    1e6e:	ed 90       	ld	r14, X+
    1e70:	fc 90       	ld	r15, X
    1e72:	c1 14       	cp	r12, r1
    1e74:	d1 04       	cpc	r13, r1
    1e76:	e1 04       	cpc	r14, r1
    1e78:	f1 04       	cpc	r15, r1
    1e7a:	31 f0       	breq	.+12     	; 0x1e88 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    1e7c:	bf ef       	ldi	r27, 0xFF	; 255
    1e7e:	cb 1a       	sub	r12, r27
    1e80:	db 0a       	sbc	r13, r27
    1e82:	eb 0a       	sbc	r14, r27
    1e84:	fb 0a       	sbc	r15, r27
    1e86:	10 c0       	rjmp	.+32     	; 0x1ea8 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    1e88:	fc 01       	movw	r30, r24
    1e8a:	c0 80       	ld	r12, Z
    1e8c:	d1 80       	ldd	r13, Z+1	; 0x01
    1e8e:	e2 80       	ldd	r14, Z+2	; 0x02
    1e90:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    1e92:	99 24       	eor	r9, r9
    1e94:	93 94       	inc	r9
    1e96:	09 85       	ldd	r16, Y+9	; 0x09
    1e98:	1a 85       	ldd	r17, Y+10	; 0x0a
    1e9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e9e:	01 30       	cpi	r16, 0x01	; 1
    1ea0:	11 05       	cpc	r17, r1
    1ea2:	21 05       	cpc	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <_ZN8SdVolume15allocContiguousEmPm+0x80>
    1ea8:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    1eaa:	f5 01       	movw	r30, r10
    1eac:	81 85       	ldd	r24, Z+9	; 0x09
    1eae:	92 85       	ldd	r25, Z+10	; 0x0a
    1eb0:	a3 85       	ldd	r26, Z+11	; 0x0b
    1eb2:	b4 85       	ldd	r27, Z+12	; 0x0c
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	9d 01       	movw	r18, r26
    1eb8:	0f 5f       	subi	r16, 0xFF	; 255
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	2f 4f       	sbci	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	0d 87       	std	Y+13, r16	; 0x0d
    1ec2:	1e 87       	std	Y+14, r17	; 0x0e
    1ec4:	2f 87       	std	Y+15, r18	; 0x0f
    1ec6:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    1ec8:	26 01       	movw	r4, r12
    1eca:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1ecc:	1d 82       	std	Y+5, r1	; 0x05
    1ece:	1e 82       	std	Y+6, r1	; 0x06
    1ed0:	1f 82       	std	Y+7, r1	; 0x07
    1ed2:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1ed4:	f5 01       	movw	r30, r10
    1ed6:	81 85       	ldd	r24, Z+9	; 0x09
    1ed8:	92 85       	ldd	r25, Z+10	; 0x0a
    1eda:	a3 85       	ldd	r26, Z+11	; 0x0b
    1edc:	b4 85       	ldd	r27, Z+12	; 0x0c
    1ede:	0d 81       	ldd	r16, Y+5	; 0x05
    1ee0:	1e 81       	ldd	r17, Y+6	; 0x06
    1ee2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee4:	38 85       	ldd	r19, Y+8	; 0x08
    1ee6:	08 17       	cp	r16, r24
    1ee8:	19 07       	cpc	r17, r25
    1eea:	2a 07       	cpc	r18, r26
    1eec:	3b 07       	cpc	r19, r27
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    1ef0:	54 c0       	rjmp	.+168    	; 0x1f9a <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    1ef2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ef4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ef6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ef8:	58 89       	ldd	r21, Y+16	; 0x10
    1efa:	24 15       	cp	r18, r4
    1efc:	35 05       	cpc	r19, r5
    1efe:	46 05       	cpc	r20, r6
    1f00:	57 05       	cpc	r21, r7
    1f02:	50 f4       	brcc	.+20     	; 0x1f18 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	48 2e       	mov	r4, r24
    1f08:	51 2c       	mov	r5, r1
    1f0a:	61 2c       	mov	r6, r1
    1f0c:	71 2c       	mov	r7, r1
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	c9 2e       	mov	r12, r25
    1f12:	d1 2c       	mov	r13, r1
    1f14:	e1 2c       	mov	r14, r1
    1f16:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    1f18:	9e 01       	movw	r18, r28
    1f1a:	2f 5f       	subi	r18, 0xFF	; 255
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1e:	b3 01       	movw	r22, r6
    1f20:	a2 01       	movw	r20, r4
    1f22:	c5 01       	movw	r24, r10
    1f24:	60 de       	rcall	.-832    	; 0x1be6 <_ZNK8SdVolume6fatGetEmPm>
    1f26:	88 23       	and	r24, r24
    1f28:	c1 f1       	breq	.+112    	; 0x1f9a <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    1f2a:	49 81       	ldd	r20, Y+1	; 0x01
    1f2c:	5a 81       	ldd	r21, Y+2	; 0x02
    1f2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f30:	7c 81       	ldd	r23, Y+4	; 0x04
    1f32:	d3 01       	movw	r26, r6
    1f34:	c2 01       	movw	r24, r4
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	a1 1d       	adc	r26, r1
    1f3a:	b1 1d       	adc	r27, r1
    1f3c:	45 2b       	or	r20, r21
    1f3e:	46 2b       	or	r20, r22
    1f40:	47 2b       	or	r20, r23
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    1f44:	6c 01       	movw	r12, r24
    1f46:	7d 01       	movw	r14, r26
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	bd 01       	movw	r22, r26
    1f4e:	4c 19       	sub	r20, r12
    1f50:	5d 09       	sbc	r21, r13
    1f52:	6e 09       	sbc	r22, r14
    1f54:	7f 09       	sbc	r23, r15
    1f56:	09 85       	ldd	r16, Y+9	; 0x09
    1f58:	1a 85       	ldd	r17, Y+10	; 0x0a
    1f5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f5e:	04 17       	cp	r16, r20
    1f60:	15 07       	cpc	r17, r21
    1f62:	26 07       	cpc	r18, r22
    1f64:	37 07       	cpc	r19, r23
    1f66:	79 f0       	breq	.+30     	; 0x1f86 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1f68:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6c:	4f 81       	ldd	r20, Y+7	; 0x07
    1f6e:	58 85       	ldd	r21, Y+8	; 0x08
    1f70:	2f 5f       	subi	r18, 0xFF	; 255
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	4f 4f       	sbci	r20, 0xFF	; 255
    1f76:	5f 4f       	sbci	r21, 0xFF	; 255
    1f78:	2d 83       	std	Y+5, r18	; 0x05
    1f7a:	3e 83       	std	Y+6, r19	; 0x06
    1f7c:	4f 83       	std	Y+7, r20	; 0x07
    1f7e:	58 87       	std	Y+8, r21	; 0x08
    1f80:	2c 01       	movw	r4, r24
    1f82:	3d 01       	movw	r6, r26
    1f84:	a7 cf       	rjmp	.-178    	; 0x1ed4 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    1f86:	0f ef       	ldi	r16, 0xFF	; 255
    1f88:	1f ef       	ldi	r17, 0xFF	; 255
    1f8a:	2f ef       	ldi	r18, 0xFF	; 255
    1f8c:	3f e0       	ldi	r19, 0x0F	; 15
    1f8e:	b3 01       	movw	r22, r6
    1f90:	a2 01       	movw	r20, r4
    1f92:	c5 01       	movw	r24, r10
    1f94:	aa de       	rcall	.-684    	; 0x1cea <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1f96:	81 11       	cpse	r24, r1
    1f98:	17 c0       	rjmp	.+46     	; 0x1fc8 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1f9e:	d3 01       	movw	r26, r6
    1fa0:	c2 01       	movw	r24, r4
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	a1 09       	sbc	r26, r1
    1fa6:	b1 09       	sbc	r27, r1
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	af 83       	std	Y+7, r26	; 0x07
    1fae:	b8 87       	std	Y+8, r27	; 0x08
    1fb0:	93 01       	movw	r18, r6
    1fb2:	82 01       	movw	r16, r4
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	bd 01       	movw	r22, r26
    1fb8:	c5 01       	movw	r24, r10
    1fba:	97 de       	rcall	.-722    	; 0x1cea <_ZN8SdVolume6fatPutEmm>
    1fbc:	88 23       	and	r24, r24
    1fbe:	69 f3       	breq	.-38     	; 0x1f9a <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    1fc0:	4d 80       	ldd	r4, Y+5	; 0x05
    1fc2:	5e 80       	ldd	r5, Y+6	; 0x06
    1fc4:	6f 80       	ldd	r6, Y+7	; 0x07
    1fc6:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1fc8:	c4 14       	cp	r12, r4
    1fca:	d5 04       	cpc	r13, r5
    1fcc:	e6 04       	cpc	r14, r6
    1fce:	f7 04       	cpc	r15, r7
    1fd0:	30 f3       	brcs	.-52     	; 0x1f9e <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    1fd2:	d1 01       	movw	r26, r2
    1fd4:	4d 91       	ld	r20, X+
    1fd6:	5d 91       	ld	r21, X+
    1fd8:	6d 91       	ld	r22, X+
    1fda:	7c 91       	ld	r23, X
    1fdc:	41 15       	cp	r20, r1
    1fde:	51 05       	cpc	r21, r1
    1fe0:	61 05       	cpc	r22, r1
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	99 f4       	brne	.+38     	; 0x200c <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    1fe6:	f1 01       	movw	r30, r2
    1fe8:	c0 82       	st	Z, r12
    1fea:	d1 82       	std	Z+1, r13	; 0x01
    1fec:	e2 82       	std	Z+2, r14	; 0x02
    1fee:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    1ff0:	99 20       	and	r9, r9
    1ff2:	99 f0       	breq	.+38     	; 0x201a <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    1ff4:	ff ef       	ldi	r31, 0xFF	; 255
    1ff6:	cf 1a       	sub	r12, r31
    1ff8:	df 0a       	sbc	r13, r31
    1ffa:	ef 0a       	sbc	r14, r31
    1ffc:	ff 0a       	sbc	r15, r31
    1ffe:	d5 01       	movw	r26, r10
    2000:	cd 92       	st	X+, r12
    2002:	dd 92       	st	X+, r13
    2004:	ed 92       	st	X+, r14
    2006:	fc 92       	st	X, r15
    2008:	13 97       	sbiw	r26, 0x03	; 3
    200a:	07 c0       	rjmp	.+14     	; 0x201a <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    200c:	97 01       	movw	r18, r14
    200e:	86 01       	movw	r16, r12
    2010:	c5 01       	movw	r24, r10
    2012:	6b de       	rcall	.-810    	; 0x1cea <_ZN8SdVolume6fatPutEmm>
    2014:	81 11       	cpse	r24, r1
    2016:	e7 cf       	rjmp	.-50     	; 0x1fe6 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    2018:	c0 cf       	rjmp	.-128    	; 0x1f9a <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    201a:	81 e0       	ldi	r24, 0x01	; 1
}
    201c:	60 96       	adiw	r28, 0x10	; 16
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	bf 90       	pop	r11
    203a:	af 90       	pop	r10
    203c:	9f 90       	pop	r9
    203e:	7f 90       	pop	r7
    2040:	6f 90       	pop	r6
    2042:	5f 90       	pop	r5
    2044:	4f 90       	pop	r4
    2046:	3f 90       	pop	r3
    2048:	2f 90       	pop	r2
    204a:	08 95       	ret

0000204c <__udivmodsi4>:
    204c:	a1 e2       	ldi	r26, 0x21	; 33
    204e:	1a 2e       	mov	r1, r26
    2050:	aa 1b       	sub	r26, r26
    2052:	bb 1b       	sub	r27, r27
    2054:	fd 01       	movw	r30, r26
    2056:	0d c0       	rjmp	.+26     	; 0x2072 <__udivmodsi4_ep>

00002058 <__udivmodsi4_loop>:
    2058:	aa 1f       	adc	r26, r26
    205a:	bb 1f       	adc	r27, r27
    205c:	ee 1f       	adc	r30, r30
    205e:	ff 1f       	adc	r31, r31
    2060:	a2 17       	cp	r26, r18
    2062:	b3 07       	cpc	r27, r19
    2064:	e4 07       	cpc	r30, r20
    2066:	f5 07       	cpc	r31, r21
    2068:	20 f0       	brcs	.+8      	; 0x2072 <__udivmodsi4_ep>
    206a:	a2 1b       	sub	r26, r18
    206c:	b3 0b       	sbc	r27, r19
    206e:	e4 0b       	sbc	r30, r20
    2070:	f5 0b       	sbc	r31, r21

00002072 <__udivmodsi4_ep>:
    2072:	66 1f       	adc	r22, r22
    2074:	77 1f       	adc	r23, r23
    2076:	88 1f       	adc	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	1a 94       	dec	r1
    207c:	69 f7       	brne	.-38     	; 0x2058 <__udivmodsi4_loop>
    207e:	60 95       	com	r22
    2080:	70 95       	com	r23
    2082:	80 95       	com	r24
    2084:	90 95       	com	r25
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	bd 01       	movw	r22, r26
    208c:	cf 01       	movw	r24, r30
    208e:	08 95       	ret

00002090 <__tablejump2__>:
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	88 1f       	adc	r24, r24
    2096:	8b bf       	out	0x3b, r24	; 59
    2098:	07 90       	elpm	r0, Z+
    209a:	f6 91       	elpm	r31, Z
    209c:	e0 2d       	mov	r30, r0
    209e:	19 94       	eijmp

000020a0 <malloc>:
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	82 30       	cpi	r24, 0x02	; 2
    20aa:	91 05       	cpc	r25, r1
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <malloc+0x12>
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	e0 91 d6 07 	lds	r30, 0x07D6	; 0x8007d6 <__flp>
    20b6:	f0 91 d7 07 	lds	r31, 0x07D7	; 0x8007d7 <__flp+0x1>
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	a0 e0       	ldi	r26, 0x00	; 0
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	30 97       	sbiw	r30, 0x00	; 0
    20c4:	19 f1       	breq	.+70     	; 0x210c <malloc+0x6c>
    20c6:	40 81       	ld	r20, Z
    20c8:	51 81       	ldd	r21, Z+1	; 0x01
    20ca:	02 81       	ldd	r16, Z+2	; 0x02
    20cc:	13 81       	ldd	r17, Z+3	; 0x03
    20ce:	48 17       	cp	r20, r24
    20d0:	59 07       	cpc	r21, r25
    20d2:	c8 f0       	brcs	.+50     	; 0x2106 <malloc+0x66>
    20d4:	84 17       	cp	r24, r20
    20d6:	95 07       	cpc	r25, r21
    20d8:	69 f4       	brne	.+26     	; 0x20f4 <malloc+0x54>
    20da:	10 97       	sbiw	r26, 0x00	; 0
    20dc:	31 f0       	breq	.+12     	; 0x20ea <malloc+0x4a>
    20de:	12 96       	adiw	r26, 0x02	; 2
    20e0:	0c 93       	st	X, r16
    20e2:	12 97       	sbiw	r26, 0x02	; 2
    20e4:	13 96       	adiw	r26, 0x03	; 3
    20e6:	1c 93       	st	X, r17
    20e8:	27 c0       	rjmp	.+78     	; 0x2138 <malloc+0x98>
    20ea:	00 93 d6 07 	sts	0x07D6, r16	; 0x8007d6 <__flp>
    20ee:	10 93 d7 07 	sts	0x07D7, r17	; 0x8007d7 <__flp+0x1>
    20f2:	22 c0       	rjmp	.+68     	; 0x2138 <malloc+0x98>
    20f4:	21 15       	cp	r18, r1
    20f6:	31 05       	cpc	r19, r1
    20f8:	19 f0       	breq	.+6      	; 0x2100 <malloc+0x60>
    20fa:	42 17       	cp	r20, r18
    20fc:	53 07       	cpc	r21, r19
    20fe:	18 f4       	brcc	.+6      	; 0x2106 <malloc+0x66>
    2100:	9a 01       	movw	r18, r20
    2102:	bd 01       	movw	r22, r26
    2104:	ef 01       	movw	r28, r30
    2106:	df 01       	movw	r26, r30
    2108:	f8 01       	movw	r30, r16
    210a:	db cf       	rjmp	.-74     	; 0x20c2 <malloc+0x22>
    210c:	21 15       	cp	r18, r1
    210e:	31 05       	cpc	r19, r1
    2110:	f9 f0       	breq	.+62     	; 0x2150 <malloc+0xb0>
    2112:	28 1b       	sub	r18, r24
    2114:	39 0b       	sbc	r19, r25
    2116:	24 30       	cpi	r18, 0x04	; 4
    2118:	31 05       	cpc	r19, r1
    211a:	80 f4       	brcc	.+32     	; 0x213c <malloc+0x9c>
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	61 15       	cp	r22, r1
    2122:	71 05       	cpc	r23, r1
    2124:	21 f0       	breq	.+8      	; 0x212e <malloc+0x8e>
    2126:	fb 01       	movw	r30, r22
    2128:	93 83       	std	Z+3, r25	; 0x03
    212a:	82 83       	std	Z+2, r24	; 0x02
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <malloc+0x96>
    212e:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <__flp+0x1>
    2132:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <__flp>
    2136:	fe 01       	movw	r30, r28
    2138:	32 96       	adiw	r30, 0x02	; 2
    213a:	44 c0       	rjmp	.+136    	; 0x21c4 <malloc+0x124>
    213c:	fe 01       	movw	r30, r28
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	81 93       	st	Z+, r24
    2144:	91 93       	st	Z+, r25
    2146:	22 50       	subi	r18, 0x02	; 2
    2148:	31 09       	sbc	r19, r1
    214a:	39 83       	std	Y+1, r19	; 0x01
    214c:	28 83       	st	Y, r18
    214e:	3a c0       	rjmp	.+116    	; 0x21c4 <malloc+0x124>
    2150:	20 91 d4 07 	lds	r18, 0x07D4	; 0x8007d4 <__brkval>
    2154:	30 91 d5 07 	lds	r19, 0x07D5	; 0x8007d5 <__brkval+0x1>
    2158:	23 2b       	or	r18, r19
    215a:	41 f4       	brne	.+16     	; 0x216c <malloc+0xcc>
    215c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2160:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2164:	30 93 d5 07 	sts	0x07D5, r19	; 0x8007d5 <__brkval+0x1>
    2168:	20 93 d4 07 	sts	0x07D4, r18	; 0x8007d4 <__brkval>
    216c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2170:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2174:	21 15       	cp	r18, r1
    2176:	31 05       	cpc	r19, r1
    2178:	41 f4       	brne	.+16     	; 0x218a <malloc+0xea>
    217a:	2d b7       	in	r18, 0x3d	; 61
    217c:	3e b7       	in	r19, 0x3e	; 62
    217e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2182:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2186:	24 1b       	sub	r18, r20
    2188:	35 0b       	sbc	r19, r21
    218a:	e0 91 d4 07 	lds	r30, 0x07D4	; 0x8007d4 <__brkval>
    218e:	f0 91 d5 07 	lds	r31, 0x07D5	; 0x8007d5 <__brkval+0x1>
    2192:	e2 17       	cp	r30, r18
    2194:	f3 07       	cpc	r31, r19
    2196:	a0 f4       	brcc	.+40     	; 0x21c0 <malloc+0x120>
    2198:	2e 1b       	sub	r18, r30
    219a:	3f 0b       	sbc	r19, r31
    219c:	28 17       	cp	r18, r24
    219e:	39 07       	cpc	r19, r25
    21a0:	78 f0       	brcs	.+30     	; 0x21c0 <malloc+0x120>
    21a2:	ac 01       	movw	r20, r24
    21a4:	4e 5f       	subi	r20, 0xFE	; 254
    21a6:	5f 4f       	sbci	r21, 0xFF	; 255
    21a8:	24 17       	cp	r18, r20
    21aa:	35 07       	cpc	r19, r21
    21ac:	48 f0       	brcs	.+18     	; 0x21c0 <malloc+0x120>
    21ae:	4e 0f       	add	r20, r30
    21b0:	5f 1f       	adc	r21, r31
    21b2:	50 93 d5 07 	sts	0x07D5, r21	; 0x8007d5 <__brkval+0x1>
    21b6:	40 93 d4 07 	sts	0x07D4, r20	; 0x8007d4 <__brkval>
    21ba:	81 93       	st	Z+, r24
    21bc:	91 93       	st	Z+, r25
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <malloc+0x124>
    21c0:	e0 e0       	ldi	r30, 0x00	; 0
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	cf 01       	movw	r24, r30
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <free>:
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	09 f4       	brne	.+2      	; 0x21da <free+0xa>
    21d8:	81 c0       	rjmp	.+258    	; 0x22dc <__stack+0xdd>
    21da:	fc 01       	movw	r30, r24
    21dc:	32 97       	sbiw	r30, 0x02	; 2
    21de:	13 82       	std	Z+3, r1	; 0x03
    21e0:	12 82       	std	Z+2, r1	; 0x02
    21e2:	a0 91 d6 07 	lds	r26, 0x07D6	; 0x8007d6 <__flp>
    21e6:	b0 91 d7 07 	lds	r27, 0x07D7	; 0x8007d7 <__flp+0x1>
    21ea:	10 97       	sbiw	r26, 0x00	; 0
    21ec:	81 f4       	brne	.+32     	; 0x220e <__stack+0xf>
    21ee:	20 81       	ld	r18, Z
    21f0:	31 81       	ldd	r19, Z+1	; 0x01
    21f2:	82 0f       	add	r24, r18
    21f4:	93 1f       	adc	r25, r19
    21f6:	20 91 d4 07 	lds	r18, 0x07D4	; 0x8007d4 <__brkval>
    21fa:	30 91 d5 07 	lds	r19, 0x07D5	; 0x8007d5 <__brkval+0x1>
    21fe:	28 17       	cp	r18, r24
    2200:	39 07       	cpc	r19, r25
    2202:	51 f5       	brne	.+84     	; 0x2258 <__stack+0x59>
    2204:	f0 93 d5 07 	sts	0x07D5, r31	; 0x8007d5 <__brkval+0x1>
    2208:	e0 93 d4 07 	sts	0x07D4, r30	; 0x8007d4 <__brkval>
    220c:	67 c0       	rjmp	.+206    	; 0x22dc <__stack+0xdd>
    220e:	ed 01       	movw	r28, r26
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	ce 17       	cp	r28, r30
    2216:	df 07       	cpc	r29, r31
    2218:	40 f4       	brcc	.+16     	; 0x222a <__stack+0x2b>
    221a:	4a 81       	ldd	r20, Y+2	; 0x02
    221c:	5b 81       	ldd	r21, Y+3	; 0x03
    221e:	9e 01       	movw	r18, r28
    2220:	41 15       	cp	r20, r1
    2222:	51 05       	cpc	r21, r1
    2224:	f1 f0       	breq	.+60     	; 0x2262 <__stack+0x63>
    2226:	ea 01       	movw	r28, r20
    2228:	f5 cf       	rjmp	.-22     	; 0x2214 <__stack+0x15>
    222a:	d3 83       	std	Z+3, r29	; 0x03
    222c:	c2 83       	std	Z+2, r28	; 0x02
    222e:	40 81       	ld	r20, Z
    2230:	51 81       	ldd	r21, Z+1	; 0x01
    2232:	84 0f       	add	r24, r20
    2234:	95 1f       	adc	r25, r21
    2236:	c8 17       	cp	r28, r24
    2238:	d9 07       	cpc	r29, r25
    223a:	59 f4       	brne	.+22     	; 0x2252 <__stack+0x53>
    223c:	88 81       	ld	r24, Y
    223e:	99 81       	ldd	r25, Y+1	; 0x01
    2240:	84 0f       	add	r24, r20
    2242:	95 1f       	adc	r25, r21
    2244:	02 96       	adiw	r24, 0x02	; 2
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	9b 81       	ldd	r25, Y+3	; 0x03
    224e:	93 83       	std	Z+3, r25	; 0x03
    2250:	82 83       	std	Z+2, r24	; 0x02
    2252:	21 15       	cp	r18, r1
    2254:	31 05       	cpc	r19, r1
    2256:	29 f4       	brne	.+10     	; 0x2262 <__stack+0x63>
    2258:	f0 93 d7 07 	sts	0x07D7, r31	; 0x8007d7 <__flp+0x1>
    225c:	e0 93 d6 07 	sts	0x07D6, r30	; 0x8007d6 <__flp>
    2260:	3d c0       	rjmp	.+122    	; 0x22dc <__stack+0xdd>
    2262:	e9 01       	movw	r28, r18
    2264:	fb 83       	std	Y+3, r31	; 0x03
    2266:	ea 83       	std	Y+2, r30	; 0x02
    2268:	49 91       	ld	r20, Y+
    226a:	59 91       	ld	r21, Y+
    226c:	c4 0f       	add	r28, r20
    226e:	d5 1f       	adc	r29, r21
    2270:	ec 17       	cp	r30, r28
    2272:	fd 07       	cpc	r31, r29
    2274:	61 f4       	brne	.+24     	; 0x228e <__stack+0x8f>
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	84 0f       	add	r24, r20
    227c:	95 1f       	adc	r25, r21
    227e:	02 96       	adiw	r24, 0x02	; 2
    2280:	e9 01       	movw	r28, r18
    2282:	99 83       	std	Y+1, r25	; 0x01
    2284:	88 83       	st	Y, r24
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	9b 83       	std	Y+3, r25	; 0x03
    228c:	8a 83       	std	Y+2, r24	; 0x02
    228e:	e0 e0       	ldi	r30, 0x00	; 0
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	12 96       	adiw	r26, 0x02	; 2
    2294:	8d 91       	ld	r24, X+
    2296:	9c 91       	ld	r25, X
    2298:	13 97       	sbiw	r26, 0x03	; 3
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	19 f0       	breq	.+6      	; 0x22a4 <__stack+0xa5>
    229e:	fd 01       	movw	r30, r26
    22a0:	dc 01       	movw	r26, r24
    22a2:	f7 cf       	rjmp	.-18     	; 0x2292 <__stack+0x93>
    22a4:	8d 91       	ld	r24, X+
    22a6:	9c 91       	ld	r25, X
    22a8:	11 97       	sbiw	r26, 0x01	; 1
    22aa:	9d 01       	movw	r18, r26
    22ac:	2e 5f       	subi	r18, 0xFE	; 254
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	82 0f       	add	r24, r18
    22b2:	93 1f       	adc	r25, r19
    22b4:	20 91 d4 07 	lds	r18, 0x07D4	; 0x8007d4 <__brkval>
    22b8:	30 91 d5 07 	lds	r19, 0x07D5	; 0x8007d5 <__brkval+0x1>
    22bc:	28 17       	cp	r18, r24
    22be:	39 07       	cpc	r19, r25
    22c0:	69 f4       	brne	.+26     	; 0x22dc <__stack+0xdd>
    22c2:	30 97       	sbiw	r30, 0x00	; 0
    22c4:	29 f4       	brne	.+10     	; 0x22d0 <__stack+0xd1>
    22c6:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <__flp+0x1>
    22ca:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <__flp>
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <__stack+0xd5>
    22d0:	13 82       	std	Z+3, r1	; 0x03
    22d2:	12 82       	std	Z+2, r1	; 0x02
    22d4:	b0 93 d5 07 	sts	0x07D5, r27	; 0x8007d5 <__brkval+0x1>
    22d8:	a0 93 d4 07 	sts	0x07D4, r26	; 0x8007d4 <__brkval>
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <realloc>:
    22e2:	6f 92       	push	r6
    22e4:	7f 92       	push	r7
    22e6:	8f 92       	push	r8
    22e8:	9f 92       	push	r9
    22ea:	af 92       	push	r10
    22ec:	bf 92       	push	r11
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	81 f4       	brne	.+32     	; 0x2322 <realloc+0x40>
    2302:	cb 01       	movw	r24, r22
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
    230e:	ef 90       	pop	r14
    2310:	df 90       	pop	r13
    2312:	cf 90       	pop	r12
    2314:	bf 90       	pop	r11
    2316:	af 90       	pop	r10
    2318:	9f 90       	pop	r9
    231a:	8f 90       	pop	r8
    231c:	7f 90       	pop	r7
    231e:	6f 90       	pop	r6
    2320:	bf ce       	rjmp	.-642    	; 0x20a0 <malloc>
    2322:	fc 01       	movw	r30, r24
    2324:	e6 0f       	add	r30, r22
    2326:	f7 1f       	adc	r31, r23
    2328:	9c 01       	movw	r18, r24
    232a:	22 50       	subi	r18, 0x02	; 2
    232c:	31 09       	sbc	r19, r1
    232e:	e2 17       	cp	r30, r18
    2330:	f3 07       	cpc	r31, r19
    2332:	08 f4       	brcc	.+2      	; 0x2336 <realloc+0x54>
    2334:	a5 c0       	rjmp	.+330    	; 0x2480 <realloc+0x19e>
    2336:	ec 01       	movw	r28, r24
    2338:	d9 01       	movw	r26, r18
    233a:	0d 91       	ld	r16, X+
    233c:	1c 91       	ld	r17, X
    233e:	11 97       	sbiw	r26, 0x01	; 1
    2340:	06 17       	cp	r16, r22
    2342:	17 07       	cpc	r17, r23
    2344:	a8 f0       	brcs	.+42     	; 0x2370 <realloc+0x8e>
    2346:	05 30       	cpi	r16, 0x05	; 5
    2348:	11 05       	cpc	r17, r1
    234a:	08 f4       	brcc	.+2      	; 0x234e <realloc+0x6c>
    234c:	97 c0       	rjmp	.+302    	; 0x247c <realloc+0x19a>
    234e:	c8 01       	movw	r24, r16
    2350:	04 97       	sbiw	r24, 0x04	; 4
    2352:	86 17       	cp	r24, r22
    2354:	97 07       	cpc	r25, r23
    2356:	08 f4       	brcc	.+2      	; 0x235a <realloc+0x78>
    2358:	91 c0       	rjmp	.+290    	; 0x247c <realloc+0x19a>
    235a:	02 50       	subi	r16, 0x02	; 2
    235c:	11 09       	sbc	r17, r1
    235e:	06 1b       	sub	r16, r22
    2360:	17 0b       	sbc	r17, r23
    2362:	01 93       	st	Z+, r16
    2364:	11 93       	st	Z+, r17
    2366:	6d 93       	st	X+, r22
    2368:	7c 93       	st	X, r23
    236a:	cf 01       	movw	r24, r30
    236c:	31 df       	rcall	.-414    	; 0x21d0 <free>
    236e:	86 c0       	rjmp	.+268    	; 0x247c <realloc+0x19a>
    2370:	5b 01       	movw	r10, r22
    2372:	a0 1a       	sub	r10, r16
    2374:	b1 0a       	sbc	r11, r17
    2376:	4c 01       	movw	r8, r24
    2378:	80 0e       	add	r8, r16
    237a:	91 1e       	adc	r9, r17
    237c:	a0 91 d6 07 	lds	r26, 0x07D6	; 0x8007d6 <__flp>
    2380:	b0 91 d7 07 	lds	r27, 0x07D7	; 0x8007d7 <__flp+0x1>
    2384:	61 2c       	mov	r6, r1
    2386:	71 2c       	mov	r7, r1
    2388:	e1 2c       	mov	r14, r1
    238a:	f1 2c       	mov	r15, r1
    238c:	10 97       	sbiw	r26, 0x00	; 0
    238e:	09 f4       	brne	.+2      	; 0x2392 <realloc+0xb0>
    2390:	46 c0       	rjmp	.+140    	; 0x241e <realloc+0x13c>
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	11 97       	sbiw	r26, 0x01	; 1
    2398:	a8 15       	cp	r26, r8
    239a:	b9 05       	cpc	r27, r9
    239c:	b1 f5       	brne	.+108    	; 0x240a <realloc+0x128>
    239e:	6c 01       	movw	r12, r24
    23a0:	42 e0       	ldi	r20, 0x02	; 2
    23a2:	c4 0e       	add	r12, r20
    23a4:	d1 1c       	adc	r13, r1
    23a6:	ca 14       	cp	r12, r10
    23a8:	db 04       	cpc	r13, r11
    23aa:	78 f1       	brcs	.+94     	; 0x240a <realloc+0x128>
    23ac:	4c 01       	movw	r8, r24
    23ae:	8a 18       	sub	r8, r10
    23b0:	9b 08       	sbc	r9, r11
    23b2:	64 01       	movw	r12, r8
    23b4:	42 e0       	ldi	r20, 0x02	; 2
    23b6:	c4 0e       	add	r12, r20
    23b8:	d1 1c       	adc	r13, r1
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	bc 90       	ld	r11, X
    23be:	12 97       	sbiw	r26, 0x02	; 2
    23c0:	13 96       	adiw	r26, 0x03	; 3
    23c2:	ac 91       	ld	r26, X
    23c4:	b5 e0       	ldi	r27, 0x05	; 5
    23c6:	cb 16       	cp	r12, r27
    23c8:	d1 04       	cpc	r13, r1
    23ca:	40 f0       	brcs	.+16     	; 0x23dc <realloc+0xfa>
    23cc:	b2 82       	std	Z+2, r11	; 0x02
    23ce:	a3 83       	std	Z+3, r26	; 0x03
    23d0:	91 82       	std	Z+1, r9	; 0x01
    23d2:	80 82       	st	Z, r8
    23d4:	d9 01       	movw	r26, r18
    23d6:	6d 93       	st	X+, r22
    23d8:	7c 93       	st	X, r23
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <realloc+0x10c>
    23dc:	0e 5f       	subi	r16, 0xFE	; 254
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	80 0f       	add	r24, r16
    23e2:	91 1f       	adc	r25, r17
    23e4:	f9 01       	movw	r30, r18
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	eb 2d       	mov	r30, r11
    23ec:	fa 2f       	mov	r31, r26
    23ee:	e1 14       	cp	r14, r1
    23f0:	f1 04       	cpc	r15, r1
    23f2:	31 f0       	breq	.+12     	; 0x2400 <realloc+0x11e>
    23f4:	d7 01       	movw	r26, r14
    23f6:	13 96       	adiw	r26, 0x03	; 3
    23f8:	fc 93       	st	X, r31
    23fa:	ee 93       	st	-X, r30
    23fc:	12 97       	sbiw	r26, 0x02	; 2
    23fe:	3e c0       	rjmp	.+124    	; 0x247c <realloc+0x19a>
    2400:	f0 93 d7 07 	sts	0x07D7, r31	; 0x8007d7 <__flp+0x1>
    2404:	e0 93 d6 07 	sts	0x07D6, r30	; 0x8007d6 <__flp>
    2408:	39 c0       	rjmp	.+114    	; 0x247c <realloc+0x19a>
    240a:	68 16       	cp	r6, r24
    240c:	79 06       	cpc	r7, r25
    240e:	08 f4       	brcc	.+2      	; 0x2412 <realloc+0x130>
    2410:	3c 01       	movw	r6, r24
    2412:	7d 01       	movw	r14, r26
    2414:	12 96       	adiw	r26, 0x02	; 2
    2416:	0d 90       	ld	r0, X+
    2418:	bc 91       	ld	r27, X
    241a:	a0 2d       	mov	r26, r0
    241c:	b7 cf       	rjmp	.-146    	; 0x238c <realloc+0xaa>
    241e:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <__brkval>
    2422:	90 91 d5 07 	lds	r25, 0x07D5	; 0x8007d5 <__brkval+0x1>
    2426:	88 16       	cp	r8, r24
    2428:	99 06       	cpc	r9, r25
    242a:	e1 f4       	brne	.+56     	; 0x2464 <realloc+0x182>
    242c:	66 16       	cp	r6, r22
    242e:	77 06       	cpc	r7, r23
    2430:	c8 f4       	brcc	.+50     	; 0x2464 <realloc+0x182>
    2432:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2436:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	41 f4       	brne	.+16     	; 0x244e <realloc+0x16c>
    243e:	8d b7       	in	r24, 0x3d	; 61
    2440:	9e b7       	in	r25, 0x3e	; 62
    2442:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2446:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    244a:	84 1b       	sub	r24, r20
    244c:	95 0b       	sbc	r25, r21
    244e:	e8 17       	cp	r30, r24
    2450:	f9 07       	cpc	r31, r25
    2452:	b0 f4       	brcc	.+44     	; 0x2480 <realloc+0x19e>
    2454:	f0 93 d5 07 	sts	0x07D5, r31	; 0x8007d5 <__brkval+0x1>
    2458:	e0 93 d4 07 	sts	0x07D4, r30	; 0x8007d4 <__brkval>
    245c:	f9 01       	movw	r30, r18
    245e:	71 83       	std	Z+1, r23	; 0x01
    2460:	60 83       	st	Z, r22
    2462:	0c c0       	rjmp	.+24     	; 0x247c <realloc+0x19a>
    2464:	cb 01       	movw	r24, r22
    2466:	1c de       	rcall	.-968    	; 0x20a0 <malloc>
    2468:	7c 01       	movw	r14, r24
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	49 f0       	breq	.+18     	; 0x2480 <realloc+0x19e>
    246e:	a8 01       	movw	r20, r16
    2470:	be 01       	movw	r22, r28
    2472:	17 d0       	rcall	.+46     	; 0x24a2 <memcpy>
    2474:	ce 01       	movw	r24, r28
    2476:	ac de       	rcall	.-680    	; 0x21d0 <free>
    2478:	c7 01       	movw	r24, r14
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <realloc+0x1a2>
    247c:	ce 01       	movw	r24, r28
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <realloc+0x1a2>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	bf 90       	pop	r11
    2496:	af 90       	pop	r10
    2498:	9f 90       	pop	r9
    249a:	8f 90       	pop	r8
    249c:	7f 90       	pop	r7
    249e:	6f 90       	pop	r6
    24a0:	08 95       	ret

000024a2 <memcpy>:
    24a2:	fb 01       	movw	r30, r22
    24a4:	dc 01       	movw	r26, r24
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <memcpy+0xa>
    24a8:	01 90       	ld	r0, Z+
    24aa:	0d 92       	st	X+, r0
    24ac:	41 50       	subi	r20, 0x01	; 1
    24ae:	50 40       	sbci	r21, 0x00	; 0
    24b0:	d8 f7       	brcc	.-10     	; 0x24a8 <memcpy+0x6>
    24b2:	08 95       	ret

000024b4 <strcpy>:
    24b4:	fb 01       	movw	r30, r22
    24b6:	dc 01       	movw	r26, r24
    24b8:	01 90       	ld	r0, Z+
    24ba:	0d 92       	st	X+, r0
    24bc:	00 20       	and	r0, r0
    24be:	e1 f7       	brne	.-8      	; 0x24b8 <strcpy+0x4>
    24c0:	08 95       	ret

000024c2 <__do_global_dtors>:
    24c2:	11 e0       	ldi	r17, 0x01	; 1
    24c4:	cf ef       	ldi	r28, 0xFF	; 255
    24c6:	d0 e0       	ldi	r29, 0x00	; 0
    24c8:	00 e0       	ldi	r16, 0x00	; 0
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <__do_global_dtors+0x14>
    24cc:	80 2f       	mov	r24, r16
    24ce:	fe 01       	movw	r30, r28
    24d0:	df dd       	rcall	.-1090   	; 0x2090 <__tablejump2__>
    24d2:	21 96       	adiw	r28, 0x01	; 1
    24d4:	01 1d       	adc	r16, r1
    24d6:	c0 30       	cpi	r28, 0x00	; 0
    24d8:	d1 07       	cpc	r29, r17
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	08 07       	cpc	r16, r24
    24de:	b1 f7       	brne	.-20     	; 0x24cc <__do_global_dtors+0xa>
    24e0:	f8 94       	cli

000024e2 <__stop_program>:
    24e2:	ff cf       	rjmp	.-2      	; 0x24e2 <__stop_program>
