
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000402  00800200  00006fe8  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fe  00800602  00800602  0000747e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000747e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000074b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000011a0  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00037070  00000000  00000000  00008690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008327  00000000  00000000  0003f700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b026  00000000  00000000  00047a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003f20  00000000  00000000  00052a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008e16  00000000  00000000  00056970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016afd  00000000  00000000  0005f786  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001330  00000000  00000000  00076283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c1       	rjmp	.+784    	; 0x312 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 ef 21 	jmp	0x43de	; 0x43de <__vector_1>
       8:	0c 94 1a 22 	jmp	0x4434	; 0x4434 <__vector_2>
       c:	0c 94 45 22 	jmp	0x448a	; 0x448a <__vector_3>
      10:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <__vector_4>
      14:	0c 94 9b 22 	jmp	0x4536	; 0x4536 <__vector_5>
      18:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__vector_6>
      1c:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__vector_7>
      20:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__vector_8>
      24:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_10>
      28:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_10>
      2c:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_10>
      30:	a1 c1       	rjmp	.+834    	; 0x374 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c1       	rjmp	.+830    	; 0x374 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c1       	rjmp	.+826    	; 0x374 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c1       	rjmp	.+822    	; 0x374 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c1       	rjmp	.+818    	; 0x374 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c1       	rjmp	.+814    	; 0x374 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c1       	rjmp	.+810    	; 0x374 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c1       	rjmp	.+806    	; 0x374 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c1       	rjmp	.+802    	; 0x374 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c1       	rjmp	.+798    	; 0x374 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c1       	rjmp	.+794    	; 0x374 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 47 23 	jmp	0x468e	; 0x468e <__vector_23>
      60:	89 c1       	rjmp	.+786    	; 0x374 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__vector_25>
      68:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__vector_26>
      6c:	83 c1       	rjmp	.+774    	; 0x374 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c1       	rjmp	.+770    	; 0x374 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c1       	rjmp	.+766    	; 0x374 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c1       	rjmp	.+762    	; 0x374 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c1       	rjmp	.+758    	; 0x374 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c1       	rjmp	.+754    	; 0x374 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c1       	rjmp	.+750    	; 0x374 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c1       	rjmp	.+746    	; 0x374 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c1       	rjmp	.+742    	; 0x374 <__bad_interrupt>
      8e:	00 00       	nop
      90:	71 c1       	rjmp	.+738    	; 0x374 <__bad_interrupt>
      92:	00 00       	nop
      94:	6f c1       	rjmp	.+734    	; 0x374 <__bad_interrupt>
      96:	00 00       	nop
      98:	6d c1       	rjmp	.+730    	; 0x374 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__vector_39>
      a0:	69 c1       	rjmp	.+722    	; 0x374 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c1       	rjmp	.+718    	; 0x374 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	65 c1       	rjmp	.+714    	; 0x374 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	63 c1       	rjmp	.+710    	; 0x374 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c1       	rjmp	.+706    	; 0x374 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c1       	rjmp	.+702    	; 0x374 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c1       	rjmp	.+698    	; 0x374 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c1       	rjmp	.+694    	; 0x374 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c1       	rjmp	.+690    	; 0x374 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c1       	rjmp	.+686    	; 0x374 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c1       	rjmp	.+682    	; 0x374 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c1       	rjmp	.+678    	; 0x374 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c1       	rjmp	.+674    	; 0x374 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c1       	rjmp	.+670    	; 0x374 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c1       	rjmp	.+666    	; 0x374 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c1       	rjmp	.+662    	; 0x374 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c1       	rjmp	.+658    	; 0x374 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	34 14       	cp	r3, r4
      e6:	4b 14       	cp	r4, r11
      e8:	4b 14       	cp	r4, r11
      ea:	48 14       	cp	r4, r8
      ec:	4b 14       	cp	r4, r11
      ee:	32 14       	cp	r3, r2
      f0:	4b 14       	cp	r4, r11
      f2:	4b 14       	cp	r4, r11
      f4:	4b 14       	cp	r4, r11
      f6:	26 14       	cp	r2, r6
      f8:	4b 14       	cp	r4, r11
      fa:	4b 14       	cp	r4, r11
      fc:	3b 14       	cp	r3, r11
      fe:	46 14       	cp	r4, r6
     100:	44 14       	cp	r4, r4
     102:	4b 14       	cp	r4, r11
     104:	4b 14       	cp	r4, r11
     106:	4b 14       	cp	r4, r11
     108:	42 14       	cp	r4, r2
     10a:	07 63       	ori	r16, 0x37	; 55
     10c:	42 36       	cpi	r20, 0x62	; 98
     10e:	b7 9b       	sbis	0x16, 7	; 22
     110:	d8 a7       	std	Y+40, r29	; 0x28
     112:	1a 39       	cpi	r17, 0x9A	; 154
     114:	68 56       	subi	r22, 0x68	; 104
     116:	18 ae       	std	Y+56, r1	; 0x38
     118:	ba ab       	std	Y+50, r27	; 0x32
     11a:	55 8c       	ldd	r5, Z+29	; 0x1d
     11c:	1d 3c       	cpi	r17, 0xCD	; 205
     11e:	b7 cc       	rjmp	.-1682   	; 0xfffffa8e <__eeprom_end+0xff7efa8e>
     120:	57 63       	ori	r21, 0x37	; 55
     122:	bd 6d       	ori	r27, 0xDD	; 221
     124:	ed fd       	.word	0xfded	; ????
     126:	75 3e       	cpi	r23, 0xE5	; 229
     128:	f6 17       	cp	r31, r22
     12a:	72 31       	cpi	r23, 0x12	; 18
     12c:	bf 00       	.word	0x00bf	; ????
     12e:	00 00       	nop
     130:	80 3f       	cpi	r24, 0xF0	; 240
     132:	08 00       	.word	0x0008	; ????
     134:	00 00       	nop
     136:	be 92       	st	-X, r11
     138:	24 49       	sbci	r18, 0x94	; 148
     13a:	12 3e       	cpi	r17, 0xE2	; 226
     13c:	ab aa       	std	Y+51, r10	; 0x33
     13e:	aa 2a       	or	r10, r26
     140:	be cd       	rjmp	.-1156   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>
     142:	cc cc       	rjmp	.-1640   	; 0xfffffadc <__eeprom_end+0xff7efadc>
     144:	4c 3e       	cpi	r20, 0xEC	; 236
     146:	00 00       	nop
     148:	00 80       	ld	r0, Z
     14a:	be ab       	std	Y+54, r27	; 0x36
     14c:	aa aa       	std	Y+50, r10	; 0x32
     14e:	aa 3e       	cpi	r26, 0xEA	; 234
     150:	00 00       	nop
     152:	00 00       	nop
     154:	bf 00       	.word	0x00bf	; ????
     156:	00 00       	nop
     158:	80 3f       	cpi	r24, 0xF0	; 240
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	00 08       	sbc	r0, r0
     160:	41 78       	andi	r20, 0x81	; 129
     162:	d3 bb       	out	0x13, r29	; 19
     164:	43 87       	std	Z+11, r20	; 0x0b
     166:	d1 13       	cpse	r29, r17
     168:	3d 19       	sub	r19, r13
     16a:	0e 3c       	cpi	r16, 0xCE	; 206
     16c:	c3 bd       	out	0x23, r28	; 35
     16e:	42 82       	std	Z+2, r4	; 0x02
     170:	ad 2b       	or	r26, r29
     172:	3e 68       	ori	r19, 0x8E	; 142
     174:	ec 82       	std	Y+4, r14	; 0x04
     176:	76 be       	out	0x36, r7	; 54
     178:	d9 8f       	std	Y+25, r29	; 0x19
     17a:	e1 a9       	ldd	r30, Z+49	; 0x31
     17c:	3e 4c       	sbci	r19, 0xCE	; 206
     17e:	80 ef       	ldi	r24, 0xF0	; 240
     180:	ff be       	out	0x3f, r15	; 63
     182:	01 c4       	rjmp	.+2050   	; 0x986 <_ZN9Calculate11getRainfallEm+0x1c>
     184:	ff 7f       	andi	r31, 0xFF	; 255
     186:	3f 00       	.word	0x003f	; ????
     188:	00 00       	nop
     18a:	00 00       	nop
     18c:	c9 21       	and	r28, r9
     18e:	93 21       	and	r25, r3
     190:	9b 21       	and	r25, r11
     192:	a7 21       	and	r26, r7
     194:	b4 21       	and	r27, r4
     196:	d5 21       	and	r29, r5
     198:	e2 21       	and	r30, r2
     19a:	9e 24       	eor	r9, r14
     19c:	a1 24       	eor	r10, r1
     19e:	90 24       	eor	r9, r0
     1a0:	94 24       	eor	r9, r4
     1a2:	9a 24       	eor	r9, r10
     1a4:	d8 24       	eor	r13, r8
     1a6:	a5 24       	eor	r10, r5
     1a8:	a9 24       	eor	r10, r9
     1aa:	af 24       	eor	r10, r15
     1ac:	b3 24       	eor	r11, r3
     1ae:	b7 24       	eor	r11, r7
     1b0:	bd 24       	eor	r11, r13
     1b2:	c1 24       	eor	r12, r1
     1b4:	c5 24       	eor	r12, r5
     1b6:	d8 24       	eor	r13, r8
     1b8:	cb 24       	eor	r12, r11
     1ba:	cf 24       	eor	r12, r15
     1bc:	d3 24       	eor	r13, r3

000001be <__trampolines_end>:
     1be:	44 65       	ori	r20, 0x54	; 84
     1c0:	63 20       	and	r6, r3
     1c2:	33 31       	cpi	r19, 0x13	; 19
     1c4:	20 32       	cpi	r18, 0x20	; 32
     1c6:	30 31       	cpi	r19, 0x10	; 16
     1c8:	38 00       	.word	0x0038	; ????

000001ca <_ZZN13RealTimeClock7initRTCEvE3__c_0>:
     1ca:	31 35 3a 34 31 3a 31 35 00                          15:41:15.

000001d3 <_ZL11daysInMonth>:
     1d3:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000001df <digital_pin_to_timer_PGM>:
     1df:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     20b:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000225 <digital_pin_to_bit_mask_PGM>:
     225:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     235:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     245:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     255:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     265:	04 08 10 20 40 80                                   ... @.

0000026b <digital_pin_to_port_PGM>:
     26b:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     27b:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     28b:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     29b:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2ab:	0b 0b 0b 0b 0b 0b                                   ......

000002b1 <port_to_input_PGM>:
     2b1:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2c1:	00 01 00 00 03 01 06 01 09 01                       ..........

000002cb <port_to_output_PGM>:
     2cb:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2db:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002e5 <port_to_mode_PGM>:
     2e5:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2f5:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000300 <__ctors_start>:
     300:	af 05       	cpc	r26, r15
     302:	f6 07       	cpc	r31, r22
     304:	44 09       	sbc	r20, r4
     306:	b2 19       	sub	r27, r2
     308:	21 1a       	sub	r2, r17
     30a:	9b 1f       	adc	r25, r27
     30c:	b5 27       	eor	r27, r21
     30e:	e7 2a       	or	r14, r23

00000310 <__ctors_end>:
     310:	36 08       	sbc	r3, r6

00000312 <__dtors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	d1 e2       	ldi	r29, 0x21	; 33
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60

00000322 <__do_copy_data>:
     322:	16 e0       	ldi	r17, 0x06	; 6
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b2 e0       	ldi	r27, 0x02	; 2
     328:	e8 ee       	ldi	r30, 0xE8	; 232
     32a:	ff e6       	ldi	r31, 0x6F	; 111
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	a2 30       	cpi	r26, 0x02	; 2
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	2b e0       	ldi	r18, 0x0B	; 11
     33e:	a2 e0       	ldi	r26, 0x02	; 2
     340:	b6 e0       	ldi	r27, 0x06	; 6
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a0 30       	cpi	r26, 0x00	; 0
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>

0000034c <__do_global_ctors>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	c8 e8       	ldi	r28, 0x88	; 136
     350:	d1 e0       	ldi	r29, 0x01	; 1
     352:	00 e0       	ldi	r16, 0x00	; 0
     354:	06 c0       	rjmp	.+12     	; 0x362 <__do_global_ctors+0x16>
     356:	21 97       	sbiw	r28, 0x01	; 1
     358:	01 09       	sbc	r16, r1
     35a:	80 2f       	mov	r24, r16
     35c:	fe 01       	movw	r30, r28
     35e:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <__tablejump2__>
     362:	c0 38       	cpi	r28, 0x80	; 128
     364:	d1 07       	cpc	r29, r17
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 07       	cpc	r16, r24
     36a:	a9 f7       	brne	.-22     	; 0x356 <__do_global_ctors+0xa>
     36c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <main>
     370:	0c 94 e3 37 	jmp	0x6fc6	; 0x6fc6 <__do_global_dtors>

00000374 <__bad_interrupt>:
     374:	45 ce       	rjmp	.-886    	; 0x0 <__vectors>

00000376 <_Z25binaryToVoltageConvertingi>:
#include "ADC.h"

float binaryToVoltageConverting(int val)
{
	float voltage = ((float) (val * SYSTEMVOLTAGE))/((float) RESOLUTION_ADC);
	return voltage;
     376:	25 e0       	ldi	r18, 0x05	; 5
     378:	ac 01       	movw	r20, r24
     37a:	24 9f       	mul	r18, r20
     37c:	c0 01       	movw	r24, r0
     37e:	25 9f       	mul	r18, r21
     380:	90 0d       	add	r25, r0
     382:	11 24       	eor	r1, r1
     384:	bc 01       	movw	r22, r24
     386:	99 0f       	add	r25, r25
     388:	88 0b       	sbc	r24, r24
     38a:	99 0b       	sbc	r25, r25
     38c:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__floatsisf>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 ec       	ldi	r19, 0xC0	; 192
     394:	4f e7       	ldi	r20, 0x7F	; 127
     396:	54 e4       	ldi	r21, 0x44	; 68
     398:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__divsf3>
} //voltageADC
     39c:	08 95       	ret

0000039e <_Z16getWindDirectionf>:

String getWindDirection(float voltage)
{
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
     3ac:	6a 01       	movw	r12, r20
     3ae:	7b 01       	movw	r14, r22
	String windDirection;
     3b0:	6b ef       	ldi	r22, 0xFB	; 251
     3b2:	73 e0       	ldi	r23, 0x03	; 3
     3b4:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
	
	if (0 < voltage && voltage <= 0.66)
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	a9 01       	movw	r20, r18
     3be:	c7 01       	movw	r24, r14
     3c0:	b6 01       	movw	r22, r12
     3c2:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     3c6:	18 16       	cp	r1, r24
     3c8:	6c f4       	brge	.+26     	; 0x3e4 <_Z16getWindDirectionf+0x46>
     3ca:	23 ec       	ldi	r18, 0xC3	; 195
     3cc:	35 ef       	ldi	r19, 0xF5	; 245
     3ce:	48 e2       	ldi	r20, 0x28	; 40
     3d0:	5f e3       	ldi	r21, 0x3F	; 63
     3d2:	c7 01       	movw	r24, r14
     3d4:	b6 01       	movw	r22, r12
     3d6:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     3da:	18 16       	cp	r1, r24
     3dc:	1c f0       	brlt	.+6      	; 0x3e4 <_Z16getWindDirectionf+0x46>
	{
		windDirection = "NEE";
     3de:	6f e6       	ldi	r22, 0x6F	; 111
     3e0:	72 e0       	ldi	r23, 0x02	; 2
     3e2:	58 c1       	rjmp	.+688    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (0.66 < voltage && voltage <= 0.87)
     3e4:	23 ec       	ldi	r18, 0xC3	; 195
     3e6:	35 ef       	ldi	r19, 0xF5	; 245
     3e8:	48 e2       	ldi	r20, 0x28	; 40
     3ea:	5f e3       	ldi	r21, 0x3F	; 63
     3ec:	c7 01       	movw	r24, r14
     3ee:	b6 01       	movw	r22, r12
     3f0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	6c f4       	brge	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f8:	22 e5       	ldi	r18, 0x52	; 82
     3fa:	38 eb       	ldi	r19, 0xB8	; 184
     3fc:	4e e5       	ldi	r20, 0x5E	; 94
     3fe:	5f e3       	ldi	r21, 0x3F	; 63
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     408:	18 16       	cp	r1, r24
     40a:	1c f0       	brlt	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		windDirection = "E";
     40c:	61 e7       	ldi	r22, 0x71	; 113
     40e:	72 e0       	ldi	r23, 0x02	; 2
     410:	41 c1       	rjmp	.+642    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (0.87 < voltage && voltage <= 1.05)
     412:	22 e5       	ldi	r18, 0x52	; 82
     414:	38 eb       	ldi	r19, 0xB8	; 184
     416:	4e e5       	ldi	r20, 0x5E	; 94
     418:	5f e3       	ldi	r21, 0x3F	; 63
     41a:	c7 01       	movw	r24, r14
     41c:	b6 01       	movw	r22, r12
     41e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     422:	18 16       	cp	r1, r24
     424:	6c f4       	brge	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     426:	26 e6       	ldi	r18, 0x66	; 102
     428:	36 e6       	ldi	r19, 0x66	; 102
     42a:	46 e8       	ldi	r20, 0x86	; 134
     42c:	5f e3       	ldi	r21, 0x3F	; 63
     42e:	c7 01       	movw	r24, r14
     430:	b6 01       	movw	r22, r12
     432:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     436:	18 16       	cp	r1, r24
     438:	1c f0       	brlt	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		windDirection = "SSE";
     43a:	63 e7       	ldi	r22, 0x73	; 115
     43c:	72 e0       	ldi	r23, 0x02	; 2
     43e:	2a c1       	rjmp	.+596    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (1.05 < voltage && voltage <= 1.18)
     440:	26 e6       	ldi	r18, 0x66	; 102
     442:	36 e6       	ldi	r19, 0x66	; 102
     444:	46 e8       	ldi	r20, 0x86	; 134
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	c7 01       	movw	r24, r14
     44a:	b6 01       	movw	r22, r12
     44c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     450:	18 16       	cp	r1, r24
     452:	6c f4       	brge	.+26     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     454:	2d e3       	ldi	r18, 0x3D	; 61
     456:	3a e0       	ldi	r19, 0x0A	; 10
     458:	47 e9       	ldi	r20, 0x97	; 151
     45a:	5f e3       	ldi	r21, 0x3F	; 63
     45c:	c7 01       	movw	r24, r14
     45e:	b6 01       	movw	r22, r12
     460:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     464:	18 16       	cp	r1, r24
     466:	1c f0       	brlt	.+6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{
		windDirection = "SEE";
     468:	67 e7       	ldi	r22, 0x77	; 119
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	13 c1       	rjmp	.+550    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (1.18 < voltage && voltage <= 1.34)
     46e:	2d e3       	ldi	r18, 0x3D	; 61
     470:	3a e0       	ldi	r19, 0x0A	; 10
     472:	47 e9       	ldi	r20, 0x97	; 151
     474:	5f e3       	ldi	r21, 0x3F	; 63
     476:	c7 01       	movw	r24, r14
     478:	b6 01       	movw	r22, r12
     47a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     47e:	18 16       	cp	r1, r24
     480:	6c f4       	brge	.+26     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     482:	2f e1       	ldi	r18, 0x1F	; 31
     484:	35 e8       	ldi	r19, 0x85	; 133
     486:	4b ea       	ldi	r20, 0xAB	; 171
     488:	5f e3       	ldi	r21, 0x3F	; 63
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     492:	18 16       	cp	r1, r24
     494:	1c f0       	brlt	.+6      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	{
		windDirection = "SE";
     496:	64 e7       	ldi	r22, 0x74	; 116
     498:	72 e0       	ldi	r23, 0x02	; 2
     49a:	fc c0       	rjmp	.+504    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (1.34 < voltage && voltage <= 1.57)
     49c:	2f e1       	ldi	r18, 0x1F	; 31
     49e:	35 e8       	ldi	r19, 0x85	; 133
     4a0:	4b ea       	ldi	r20, 0xAB	; 171
     4a2:	5f e3       	ldi	r21, 0x3F	; 63
     4a4:	c7 01       	movw	r24, r14
     4a6:	b6 01       	movw	r22, r12
     4a8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     4ac:	18 16       	cp	r1, r24
     4ae:	6c f4       	brge	.+26     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4b0:	23 ec       	ldi	r18, 0xC3	; 195
     4b2:	35 ef       	ldi	r19, 0xF5	; 245
     4b4:	48 ec       	ldi	r20, 0xC8	; 200
     4b6:	5f e3       	ldi	r21, 0x3F	; 63
     4b8:	c7 01       	movw	r24, r14
     4ba:	b6 01       	movw	r22, r12
     4bc:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     4c0:	18 16       	cp	r1, r24
     4c2:	1c f0       	brlt	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	{
		windDirection = "SSW";
     4c4:	6b e7       	ldi	r22, 0x7B	; 123
     4c6:	72 e0       	ldi	r23, 0x02	; 2
     4c8:	e5 c0       	rjmp	.+458    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (1.57 < voltage && voltage <= 2.03)
     4ca:	23 ec       	ldi	r18, 0xC3	; 195
     4cc:	35 ef       	ldi	r19, 0xF5	; 245
     4ce:	48 ec       	ldi	r20, 0xC8	; 200
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	6c f4       	brge	.+26     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4de:	25 e8       	ldi	r18, 0x85	; 133
     4e0:	3b ee       	ldi	r19, 0xEB	; 235
     4e2:	41 e0       	ldi	r20, 0x01	; 1
     4e4:	50 e4       	ldi	r21, 0x40	; 64
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	1c f0       	brlt	.+6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	{
		windDirection = "S";
     4f2:	6f e7       	ldi	r22, 0x7F	; 127
     4f4:	72 e0       	ldi	r23, 0x02	; 2
     4f6:	ce c0       	rjmp	.+412    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (2.03 < voltage && voltage <= 2.72)
     4f8:	25 e8       	ldi	r18, 0x85	; 133
     4fa:	3b ee       	ldi	r19, 0xEB	; 235
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	50 e4       	ldi	r21, 0x40	; 64
     500:	c7 01       	movw	r24, r14
     502:	b6 01       	movw	r22, r12
     504:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     508:	18 16       	cp	r1, r24
     50a:	6c f4       	brge	.+26     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     50c:	2b e7       	ldi	r18, 0x7B	; 123
     50e:	34 e1       	ldi	r19, 0x14	; 20
     510:	4e e2       	ldi	r20, 0x2E	; 46
     512:	50 e4       	ldi	r21, 0x40	; 64
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     51c:	18 16       	cp	r1, r24
     51e:	1c f0       	brlt	.+6      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	{
		windDirection = "NE";
     520:	60 e9       	ldi	r22, 0x90	; 144
     522:	72 e0       	ldi	r23, 0x02	; 2
     524:	b7 c0       	rjmp	.+366    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (2.72 < voltage && voltage <= 3.11)
     526:	2b e7       	ldi	r18, 0x7B	; 123
     528:	34 e1       	ldi	r19, 0x14	; 20
     52a:	4e e2       	ldi	r20, 0x2E	; 46
     52c:	50 e4       	ldi	r21, 0x40	; 64
     52e:	c7 01       	movw	r24, r14
     530:	b6 01       	movw	r22, r12
     532:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     536:	18 16       	cp	r1, r24
     538:	6c f4       	brge	.+26     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     53a:	2d e3       	ldi	r18, 0x3D	; 61
     53c:	3a e0       	ldi	r19, 0x0A	; 10
     53e:	47 e4       	ldi	r20, 0x47	; 71
     540:	50 e4       	ldi	r21, 0x40	; 64
     542:	c7 01       	movw	r24, r14
     544:	b6 01       	movw	r22, r12
     546:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     54a:	18 16       	cp	r1, r24
     54c:	1c f0       	brlt	.+6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
	{
		windDirection = "SWW";
     54e:	61 e8       	ldi	r22, 0x81	; 129
     550:	72 e0       	ldi	r23, 0x02	; 2
     552:	a0 c0       	rjmp	.+320    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (3.11 < voltage && voltage <= 3.34)
     554:	2d e3       	ldi	r18, 0x3D	; 61
     556:	3a e0       	ldi	r19, 0x0A	; 10
     558:	47 e4       	ldi	r20, 0x47	; 71
     55a:	50 e4       	ldi	r21, 0x40	; 64
     55c:	c7 01       	movw	r24, r14
     55e:	b6 01       	movw	r22, r12
     560:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     564:	18 16       	cp	r1, r24
     566:	6c f4       	brge	.+26     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     568:	2f e8       	ldi	r18, 0x8F	; 143
     56a:	32 ec       	ldi	r19, 0xC2	; 194
     56c:	45 e5       	ldi	r20, 0x55	; 85
     56e:	50 e4       	ldi	r21, 0x40	; 64
     570:	c7 01       	movw	r24, r14
     572:	b6 01       	movw	r22, r12
     574:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     578:	18 16       	cp	r1, r24
     57a:	1c f0       	brlt	.+6      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
	{
		windDirection = "SW";
     57c:	6c e7       	ldi	r22, 0x7C	; 124
     57e:	72 e0       	ldi	r23, 0x02	; 2
     580:	89 c0       	rjmp	.+274    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (3.34 < voltage && voltage <= 3.66)
     582:	2f e8       	ldi	r18, 0x8F	; 143
     584:	32 ec       	ldi	r19, 0xC2	; 194
     586:	45 e5       	ldi	r20, 0x55	; 85
     588:	50 e4       	ldi	r21, 0x40	; 64
     58a:	c7 01       	movw	r24, r14
     58c:	b6 01       	movw	r22, r12
     58e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     592:	18 16       	cp	r1, r24
     594:	6c f4       	brge	.+26     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     596:	21 e7       	ldi	r18, 0x71	; 113
     598:	3d e3       	ldi	r19, 0x3D	; 61
     59a:	4a e6       	ldi	r20, 0x6A	; 106
     59c:	50 e4       	ldi	r21, 0x40	; 64
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	1c f0       	brlt	.+6      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
	{
		windDirection = "NNW";
     5aa:	65 e8       	ldi	r22, 0x85	; 133
     5ac:	72 e0       	ldi	r23, 0x02	; 2
     5ae:	72 c0       	rjmp	.+228    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (3.66 < voltage && voltage <= 3.94)
     5b0:	21 e7       	ldi	r18, 0x71	; 113
     5b2:	3d e3       	ldi	r19, 0x3D	; 61
     5b4:	4a e6       	ldi	r20, 0x6A	; 106
     5b6:	50 e4       	ldi	r21, 0x40	; 64
     5b8:	c7 01       	movw	r24, r14
     5ba:	b6 01       	movw	r22, r12
     5bc:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     5c0:	18 16       	cp	r1, r24
     5c2:	6c f4       	brge	.+26     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5c4:	26 ef       	ldi	r18, 0xF6	; 246
     5c6:	38 e2       	ldi	r19, 0x28	; 40
     5c8:	4c e7       	ldi	r20, 0x7C	; 124
     5ca:	50 e4       	ldi	r21, 0x40	; 64
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     5d4:	18 16       	cp	r1, r24
     5d6:	1c f0       	brlt	.+6      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	{
		windDirection = "N";
     5d8:	69 e8       	ldi	r22, 0x89	; 137
     5da:	72 e0       	ldi	r23, 0x02	; 2
     5dc:	5b c0       	rjmp	.+182    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (3.94 < voltage && voltage <= 4.2)
     5de:	26 ef       	ldi	r18, 0xF6	; 246
     5e0:	38 e2       	ldi	r19, 0x28	; 40
     5e2:	4c e7       	ldi	r20, 0x7C	; 124
     5e4:	50 e4       	ldi	r21, 0x40	; 64
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	6c f4       	brge	.+26     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5f2:	26 e6       	ldi	r18, 0x66	; 102
     5f4:	36 e6       	ldi	r19, 0x66	; 102
     5f6:	46 e8       	ldi	r20, 0x86	; 134
     5f8:	50 e4       	ldi	r21, 0x40	; 64
     5fa:	c7 01       	movw	r24, r14
     5fc:	b6 01       	movw	r22, r12
     5fe:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     602:	18 16       	cp	r1, r24
     604:	1c f0       	brlt	.+6      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
	{
		windDirection = "NWW";
     606:	6b e8       	ldi	r22, 0x8B	; 139
     608:	72 e0       	ldi	r23, 0x02	; 2
     60a:	44 c0       	rjmp	.+136    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (4.2 < voltage && voltage <= 4.47)
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e8       	ldi	r20, 0x86	; 134
     612:	50 e4       	ldi	r21, 0x40	; 64
     614:	c7 01       	movw	r24, r14
     616:	b6 01       	movw	r22, r12
     618:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     61c:	18 16       	cp	r1, r24
     61e:	6c f4       	brge	.+26     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     620:	2d e3       	ldi	r18, 0x3D	; 61
     622:	3a e0       	ldi	r19, 0x0A	; 10
     624:	4f e8       	ldi	r20, 0x8F	; 143
     626:	50 e4       	ldi	r21, 0x40	; 64
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     630:	18 16       	cp	r1, r24
     632:	1c f0       	brlt	.+6      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
	{
		windDirection = "NW";
     634:	66 e8       	ldi	r22, 0x86	; 134
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	2d c0       	rjmp	.+90     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (4.47 < voltage && voltage <= 4.74)
     63a:	2d e3       	ldi	r18, 0x3D	; 61
     63c:	3a e0       	ldi	r19, 0x0A	; 10
     63e:	4f e8       	ldi	r20, 0x8F	; 143
     640:	50 e4       	ldi	r21, 0x40	; 64
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     64a:	18 16       	cp	r1, r24
     64c:	6c f4       	brge	.+26     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     64e:	24 e1       	ldi	r18, 0x14	; 20
     650:	3e ea       	ldi	r19, 0xAE	; 174
     652:	47 e9       	ldi	r20, 0x97	; 151
     654:	50 e4       	ldi	r21, 0x40	; 64
     656:	c7 01       	movw	r24, r14
     658:	b6 01       	movw	r22, r12
     65a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     65e:	18 16       	cp	r1, r24
     660:	1c f0       	brlt	.+6      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
	{
		windDirection = "W";
     662:	67 e8       	ldi	r22, 0x87	; 135
     664:	72 e0       	ldi	r23, 0x02	; 2
     666:	16 c0       	rjmp	.+44     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	}
	else if (4.74 < voltage && voltage <= 5)
     668:	24 e1       	ldi	r18, 0x14	; 20
     66a:	3e ea       	ldi	r19, 0xAE	; 174
     66c:	47 e9       	ldi	r20, 0x97	; 151
     66e:	50 e4       	ldi	r21, 0x40	; 64
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     678:	18 16       	cp	r1, r24
     67a:	7c f4       	brge	.+30     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 ea       	ldi	r20, 0xA0	; 160
     682:	50 e4       	ldi	r21, 0x40	; 64
     684:	c7 01       	movw	r24, r14
     686:	b6 01       	movw	r22, r12
     688:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     68c:	18 16       	cp	r1, r24
     68e:	2c f0       	brlt	.+10     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
	{
		windDirection = "NNE";
     690:	6f e8       	ldi	r22, 0x8F	; 143
     692:	72 e0       	ldi	r23, 0x02	; 2
     694:	ce 01       	movw	r24, r28
     696:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <_ZN6StringaSEPKc>
	}
	
	return windDirection;
     69a:	ce 01       	movw	r24, r28
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	08 95       	ret

000006aa <_ZN9CalculateC1Ev>:

float Calculate::meanValue(uint32_t val)
{
	float result = val/TIME;
	return result;
} //meanValue
     6aa:	08 95       	ret

000006ac <_ZN9CalculateD1Ev>:
     6ac:	08 95       	ret

000006ae <_ZN9Calculate12getWindSpeedEm>:

WindData Calculate::getWindSpeed(uint32_t val)
{
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <_ZN9Calculate12getWindSpeedEm+0x18>
     6c6:	1f 92       	push	r1
     6c8:	1f 92       	push	r1
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	WindData windData;
	float windspeed = (float) val / ((float) TIME) * (float) WINDSCALINGFACTOR;
     6ce:	cb 01       	movw	r24, r22
     6d0:	ba 01       	movw	r22, r20
     6d2:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__floatunsisf>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 ea       	ldi	r20, 0xA0	; 160
     6dc:	50 e4       	ldi	r21, 0x40	; 64
     6de:	0e 94 8e 1a 	call	0x351c	; 0x351c <__divsf3>
     6e2:	2a e9       	ldi	r18, 0x9A	; 154
     6e4:	39 e9       	ldi	r19, 0x99	; 153
     6e6:	49 e1       	ldi	r20, 0x19	; 25
     6e8:	50 e4       	ldi	r21, 0x40	; 64
     6ea:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__mulsf3>
     6ee:	6b 01       	movw	r12, r22
     6f0:	7c 01       	movw	r14, r24
	windData.windspeed = windspeed / 3.6;	//windspeed in m/s
     6f2:	26 e6       	ldi	r18, 0x66	; 102
     6f4:	36 e6       	ldi	r19, 0x66	; 102
     6f6:	46 e6       	ldi	r20, 0x66	; 102
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	0e 94 8e 1a 	call	0x351c	; 0x351c <__divsf3>
     6fe:	06 2f       	mov	r16, r22
     700:	97 2e       	mov	r9, r23
     702:	5c 01       	movw	r10, r24
	
	if (windspeed <= 0.2)
     704:	2d ec       	ldi	r18, 0xCD	; 205
     706:	3c ec       	ldi	r19, 0xCC	; 204
     708:	4c e4       	ldi	r20, 0x4C	; 76
     70a:	5e e3       	ldi	r21, 0x3E	; 62
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     714:	18 16       	cp	r1, r24
     716:	0c f0       	brlt	.+2      	; 0x71a <_ZN9Calculate12getWindSpeedEm+0x6c>
     718:	f1 c0       	rjmp	.+482    	; 0x8fc <_ZN9Calculate12getWindSpeedEm+0x24e>
	{
		windData.windstrength = 0;
	} 
	else if (0.2 < windspeed && windspeed <= 1.5)
     71a:	2d ec       	ldi	r18, 0xCD	; 205
     71c:	3c ec       	ldi	r19, 0xCC	; 204
     71e:	4c e4       	ldi	r20, 0x4C	; 76
     720:	5e e3       	ldi	r21, 0x3E	; 62
     722:	c7 01       	movw	r24, r14
     724:	b6 01       	movw	r22, r12
     726:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     72a:	18 16       	cp	r1, r24
     72c:	5c f4       	brge	.+22     	; 0x744 <_ZN9Calculate12getWindSpeedEm+0x96>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 ec       	ldi	r20, 0xC0	; 192
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     73e:	18 16       	cp	r1, r24
     740:	0c f0       	brlt	.+2      	; 0x744 <_ZN9Calculate12getWindSpeedEm+0x96>
     742:	de c0       	rjmp	.+444    	; 0x900 <_ZN9Calculate12getWindSpeedEm+0x252>
	{
		windData.windstrength = 1;
	}
	else if (1.5 < windspeed && windspeed <= 3.3)
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 ec       	ldi	r20, 0xC0	; 192
     74a:	5f e3       	ldi	r21, 0x3F	; 63
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     754:	18 16       	cp	r1, r24
     756:	5c f4       	brge	.+22     	; 0x76e <_ZN9Calculate12getWindSpeedEm+0xc0>
     758:	23 e3       	ldi	r18, 0x33	; 51
     75a:	33 e3       	ldi	r19, 0x33	; 51
     75c:	43 e5       	ldi	r20, 0x53	; 83
     75e:	50 e4       	ldi	r21, 0x40	; 64
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     768:	18 16       	cp	r1, r24
     76a:	0c f0       	brlt	.+2      	; 0x76e <_ZN9Calculate12getWindSpeedEm+0xc0>
     76c:	cb c0       	rjmp	.+406    	; 0x904 <_ZN9Calculate12getWindSpeedEm+0x256>
	{
		windData.windstrength = 2;
	}
	else if (3.3 < windspeed && windspeed <= 5.4)
     76e:	23 e3       	ldi	r18, 0x33	; 51
     770:	33 e3       	ldi	r19, 0x33	; 51
     772:	43 e5       	ldi	r20, 0x53	; 83
     774:	50 e4       	ldi	r21, 0x40	; 64
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     77e:	18 16       	cp	r1, r24
     780:	5c f4       	brge	.+22     	; 0x798 <_ZN9Calculate12getWindSpeedEm+0xea>
     782:	2d ec       	ldi	r18, 0xCD	; 205
     784:	3c ec       	ldi	r19, 0xCC	; 204
     786:	4c ea       	ldi	r20, 0xAC	; 172
     788:	50 e4       	ldi	r21, 0x40	; 64
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     792:	18 16       	cp	r1, r24
     794:	0c f0       	brlt	.+2      	; 0x798 <_ZN9Calculate12getWindSpeedEm+0xea>
     796:	b8 c0       	rjmp	.+368    	; 0x908 <_ZN9Calculate12getWindSpeedEm+0x25a>
	{
		windData.windstrength = 3;
	}
	else if (5.4 < windspeed && windspeed <= 7.9)
     798:	2d ec       	ldi	r18, 0xCD	; 205
     79a:	3c ec       	ldi	r19, 0xCC	; 204
     79c:	4c ea       	ldi	r20, 0xAC	; 172
     79e:	50 e4       	ldi	r21, 0x40	; 64
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	5c f4       	brge	.+22     	; 0x7c2 <_ZN9Calculate12getWindSpeedEm+0x114>
     7ac:	2d ec       	ldi	r18, 0xCD	; 205
     7ae:	3c ec       	ldi	r19, 0xCC	; 204
     7b0:	4c ef       	ldi	r20, 0xFC	; 252
     7b2:	50 e4       	ldi	r21, 0x40	; 64
     7b4:	c7 01       	movw	r24, r14
     7b6:	b6 01       	movw	r22, r12
     7b8:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     7bc:	18 16       	cp	r1, r24
     7be:	0c f0       	brlt	.+2      	; 0x7c2 <_ZN9Calculate12getWindSpeedEm+0x114>
     7c0:	a5 c0       	rjmp	.+330    	; 0x90c <_ZN9Calculate12getWindSpeedEm+0x25e>
	{
		windData.windstrength = 4;
	}	
	else if (7.9 < windspeed && windspeed <= 10.7)
     7c2:	2d ec       	ldi	r18, 0xCD	; 205
     7c4:	3c ec       	ldi	r19, 0xCC	; 204
     7c6:	4c ef       	ldi	r20, 0xFC	; 252
     7c8:	50 e4       	ldi	r21, 0x40	; 64
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	5c f4       	brge	.+22     	; 0x7ec <_ZN9Calculate12getWindSpeedEm+0x13e>
     7d6:	23 e3       	ldi	r18, 0x33	; 51
     7d8:	33 e3       	ldi	r19, 0x33	; 51
     7da:	4b e2       	ldi	r20, 0x2B	; 43
     7dc:	51 e4       	ldi	r21, 0x41	; 65
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	0c f0       	brlt	.+2      	; 0x7ec <_ZN9Calculate12getWindSpeedEm+0x13e>
     7ea:	92 c0       	rjmp	.+292    	; 0x910 <_ZN9Calculate12getWindSpeedEm+0x262>
	{
		windData.windstrength = 5;
	}
	else if (10.7 < windspeed && windspeed <= 13.8)
     7ec:	23 e3       	ldi	r18, 0x33	; 51
     7ee:	33 e3       	ldi	r19, 0x33	; 51
     7f0:	4b e2       	ldi	r20, 0x2B	; 43
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
     7f8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     7fc:	18 16       	cp	r1, r24
     7fe:	5c f4       	brge	.+22     	; 0x816 <_ZN9Calculate12getWindSpeedEm+0x168>
     800:	2d ec       	ldi	r18, 0xCD	; 205
     802:	3c ec       	ldi	r19, 0xCC	; 204
     804:	4c e5       	ldi	r20, 0x5C	; 92
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     810:	18 16       	cp	r1, r24
     812:	0c f0       	brlt	.+2      	; 0x816 <_ZN9Calculate12getWindSpeedEm+0x168>
     814:	7f c0       	rjmp	.+254    	; 0x914 <_ZN9Calculate12getWindSpeedEm+0x266>
	{
		windData.windstrength = 6;
	}	
	else if (13.8 < windspeed && windspeed <= 17.1)
     816:	2d ec       	ldi	r18, 0xCD	; 205
     818:	3c ec       	ldi	r19, 0xCC	; 204
     81a:	4c e5       	ldi	r20, 0x5C	; 92
     81c:	51 e4       	ldi	r21, 0x41	; 65
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     826:	18 16       	cp	r1, r24
     828:	5c f4       	brge	.+22     	; 0x840 <_ZN9Calculate12getWindSpeedEm+0x192>
     82a:	2d ec       	ldi	r18, 0xCD	; 205
     82c:	3c ec       	ldi	r19, 0xCC	; 204
     82e:	48 e8       	ldi	r20, 0x88	; 136
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     83a:	18 16       	cp	r1, r24
     83c:	0c f0       	brlt	.+2      	; 0x840 <_ZN9Calculate12getWindSpeedEm+0x192>
     83e:	6c c0       	rjmp	.+216    	; 0x918 <_ZN9Calculate12getWindSpeedEm+0x26a>
	{
		windData.windstrength = 7;
	}	
	else if (17.1 < windspeed && windspeed <= 20.7)
     840:	2d ec       	ldi	r18, 0xCD	; 205
     842:	3c ec       	ldi	r19, 0xCC	; 204
     844:	48 e8       	ldi	r20, 0x88	; 136
     846:	51 e4       	ldi	r21, 0x41	; 65
     848:	c7 01       	movw	r24, r14
     84a:	b6 01       	movw	r22, r12
     84c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	5c f4       	brge	.+22     	; 0x86a <_ZN9Calculate12getWindSpeedEm+0x1bc>
     854:	2a e9       	ldi	r18, 0x9A	; 154
     856:	39 e9       	ldi	r19, 0x99	; 153
     858:	45 ea       	ldi	r20, 0xA5	; 165
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	c7 01       	movw	r24, r14
     85e:	b6 01       	movw	r22, r12
     860:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     864:	18 16       	cp	r1, r24
     866:	0c f0       	brlt	.+2      	; 0x86a <_ZN9Calculate12getWindSpeedEm+0x1bc>
     868:	59 c0       	rjmp	.+178    	; 0x91c <_ZN9Calculate12getWindSpeedEm+0x26e>
	{
		windData.windstrength = 8;
	}
	else if (20.7 < windspeed && windspeed <= 24.4)
     86a:	2a e9       	ldi	r18, 0x9A	; 154
     86c:	39 e9       	ldi	r19, 0x99	; 153
     86e:	45 ea       	ldi	r20, 0xA5	; 165
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     87a:	18 16       	cp	r1, r24
     87c:	5c f4       	brge	.+22     	; 0x894 <_ZN9Calculate12getWindSpeedEm+0x1e6>
     87e:	23 e3       	ldi	r18, 0x33	; 51
     880:	33 e3       	ldi	r19, 0x33	; 51
     882:	43 ec       	ldi	r20, 0xC3	; 195
     884:	51 e4       	ldi	r21, 0x41	; 65
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     88e:	18 16       	cp	r1, r24
     890:	0c f0       	brlt	.+2      	; 0x894 <_ZN9Calculate12getWindSpeedEm+0x1e6>
     892:	46 c0       	rjmp	.+140    	; 0x920 <_ZN9Calculate12getWindSpeedEm+0x272>
	{
		windData.windstrength = 9;
	}
	else if (24.4 < windspeed && windspeed <= 28.4)
     894:	23 e3       	ldi	r18, 0x33	; 51
     896:	33 e3       	ldi	r19, 0x33	; 51
     898:	43 ec       	ldi	r20, 0xC3	; 195
     89a:	51 e4       	ldi	r21, 0x41	; 65
     89c:	c7 01       	movw	r24, r14
     89e:	b6 01       	movw	r22, r12
     8a0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	54 f4       	brge	.+20     	; 0x8bc <_ZN9Calculate12getWindSpeedEm+0x20e>
     8a8:	23 e3       	ldi	r18, 0x33	; 51
     8aa:	33 e3       	ldi	r19, 0x33	; 51
     8ac:	43 ee       	ldi	r20, 0xE3	; 227
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	c7 01       	movw	r24, r14
     8b2:	b6 01       	movw	r22, r12
     8b4:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     8b8:	18 16       	cp	r1, r24
     8ba:	a4 f5       	brge	.+104    	; 0x924 <_ZN9Calculate12getWindSpeedEm+0x276>
	{
		windData.windstrength = 10;
	}
	else if (28.4 < windspeed && windspeed <= 32.6)
     8bc:	23 e3       	ldi	r18, 0x33	; 51
     8be:	33 e3       	ldi	r19, 0x33	; 51
     8c0:	43 ee       	ldi	r20, 0xE3	; 227
     8c2:	51 e4       	ldi	r21, 0x41	; 65
     8c4:	c7 01       	movw	r24, r14
     8c6:	b6 01       	movw	r22, r12
     8c8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	54 f4       	brge	.+20     	; 0x8e4 <_ZN9Calculate12getWindSpeedEm+0x236>
     8d0:	26 e6       	ldi	r18, 0x66	; 102
     8d2:	36 e6       	ldi	r19, 0x66	; 102
     8d4:	42 e0       	ldi	r20, 0x02	; 2
     8d6:	52 e4       	ldi	r21, 0x42	; 66
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     8e0:	18 16       	cp	r1, r24
     8e2:	14 f5       	brge	.+68     	; 0x928 <_ZN9Calculate12getWindSpeedEm+0x27a>
	{
		windData.windstrength = 11;
	}
	else if (32.6 < windspeed)
     8e4:	26 e6       	ldi	r18, 0x66	; 102
     8e6:	36 e6       	ldi	r19, 0x66	; 102
     8e8:	42 e0       	ldi	r20, 0x02	; 2
     8ea:	52 e4       	ldi	r21, 0x42	; 66
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     8f4:	18 16       	cp	r1, r24
     8f6:	cc f4       	brge	.+50     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	{
		windData.windstrength = 12;
     8f8:	1c e0       	ldi	r17, 0x0C	; 12
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	float windspeed = (float) val / ((float) TIME) * (float) WINDSCALINGFACTOR;
	windData.windspeed = windspeed / 3.6;	//windspeed in m/s
	
	if (windspeed <= 0.2)
	{
		windData.windstrength = 0;
     8fc:	10 e0       	ldi	r17, 0x00	; 0
     8fe:	15 c0       	rjmp	.+42     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	} 
	else if (0.2 < windspeed && windspeed <= 1.5)
	{
		windData.windstrength = 1;
     900:	11 e0       	ldi	r17, 0x01	; 1
     902:	13 c0       	rjmp	.+38     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (1.5 < windspeed && windspeed <= 3.3)
	{
		windData.windstrength = 2;
     904:	12 e0       	ldi	r17, 0x02	; 2
     906:	11 c0       	rjmp	.+34     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (3.3 < windspeed && windspeed <= 5.4)
	{
		windData.windstrength = 3;
     908:	13 e0       	ldi	r17, 0x03	; 3
     90a:	0f c0       	rjmp	.+30     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (5.4 < windspeed && windspeed <= 7.9)
	{
		windData.windstrength = 4;
     90c:	14 e0       	ldi	r17, 0x04	; 4
     90e:	0d c0       	rjmp	.+26     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}	
	else if (7.9 < windspeed && windspeed <= 10.7)
	{
		windData.windstrength = 5;
     910:	15 e0       	ldi	r17, 0x05	; 5
     912:	0b c0       	rjmp	.+22     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (10.7 < windspeed && windspeed <= 13.8)
	{
		windData.windstrength = 6;
     914:	16 e0       	ldi	r17, 0x06	; 6
     916:	09 c0       	rjmp	.+18     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}	
	else if (13.8 < windspeed && windspeed <= 17.1)
	{
		windData.windstrength = 7;
     918:	17 e0       	ldi	r17, 0x07	; 7
     91a:	07 c0       	rjmp	.+14     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}	
	else if (17.1 < windspeed && windspeed <= 20.7)
	{
		windData.windstrength = 8;
     91c:	18 e0       	ldi	r17, 0x08	; 8
     91e:	05 c0       	rjmp	.+10     	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (20.7 < windspeed && windspeed <= 24.4)
	{
		windData.windstrength = 9;
     920:	19 e0       	ldi	r17, 0x09	; 9
     922:	03 c0       	rjmp	.+6      	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (24.4 < windspeed && windspeed <= 28.4)
	{
		windData.windstrength = 10;
     924:	1a e0       	ldi	r17, 0x0A	; 10
     926:	01 c0       	rjmp	.+2      	; 0x92a <_ZN9Calculate12getWindSpeedEm+0x27c>
	}
	else if (28.4 < windspeed && windspeed <= 32.6)
	{
		windData.windstrength = 11;
     928:	1b e0       	ldi	r17, 0x0B	; 11
	else if (32.6 < windspeed)
	{
		windData.windstrength = 12;
	}
	
	return windData;
     92a:	80 2f       	mov	r24, r16
     92c:	99 2d       	mov	r25, r9
     92e:	d5 01       	movw	r26, r10
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	ab 83       	std	Y+3, r26	; 0x03
     936:	bc 83       	std	Y+4, r27	; 0x04
     938:	20 2f       	mov	r18, r16
     93a:	3a 81       	ldd	r19, Y+2	; 0x02
     93c:	4b 81       	ldd	r20, Y+3	; 0x03
     93e:	5c 81       	ldd	r21, Y+4	; 0x04
} //getWindSpeed
     940:	61 2f       	mov	r22, r17
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	08 95       	ret

0000096a <_ZN9Calculate11getRainfallEm>:

float Calculate::getRainfall(uint32_t val)
{
	float rainfall = (float) val * (float) RESOLUTION_OMBROMETER / ((float) TIME) * (float) OMBROMETERSCALINGFACTOR;
	return rainfall;	// rainfall in liter per m^2 in a certain timespan
     96a:	cb 01       	movw	r24, r22
     96c:	ba 01       	movw	r22, r20
     96e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__floatunsisf>
     972:	2a e2       	ldi	r18, 0x2A	; 42
     974:	39 eb       	ldi	r19, 0xB9	; 185
     976:	4d eb       	ldi	r20, 0xBD	; 189
     978:	53 e4       	ldi	r21, 0x43	; 67
     97a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__mulsf3>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 ea       	ldi	r20, 0xA0	; 160
     984:	50 e4       	ldi	r21, 0x40	; 64
     986:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__divsf3>
     98a:	08 95       	ret

0000098c <_Z20countEdgesAnemometerv>:
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesOmbrometer, RISING);
} //beginOmbrometer

void countEdgesAnemometer()
{
	numberOfEdgesAnemometer++;
     98c:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <numberOfEdgesAnemometer>
     990:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <numberOfEdgesAnemometer+0x1>
     994:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <numberOfEdgesAnemometer+0x2>
     998:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <numberOfEdgesAnemometer+0x3>
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	a1 1d       	adc	r26, r1
     9a0:	b1 1d       	adc	r27, r1
     9a2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <numberOfEdgesAnemometer>
     9a6:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <numberOfEdgesAnemometer+0x1>
     9aa:	a0 93 08 06 	sts	0x0608, r26	; 0x800608 <numberOfEdgesAnemometer+0x2>
     9ae:	b0 93 09 06 	sts	0x0609, r27	; 0x800609 <numberOfEdgesAnemometer+0x3>
     9b2:	08 95       	ret

000009b4 <_Z20countEdgesOmbrometerv>:
} //countEdgesAnemometer

void countEdgesOmbrometer()
{
	numberOfEdgesOmbrometer++;
     9b4:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__data_end>
     9b8:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <__data_end+0x1>
     9bc:	a0 91 04 06 	lds	r26, 0x0604	; 0x800604 <__data_end+0x2>
     9c0:	b0 91 05 06 	lds	r27, 0x0605	; 0x800605 <__data_end+0x3>
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	a1 1d       	adc	r26, r1
     9c8:	b1 1d       	adc	r27, r1
     9ca:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__data_end>
     9ce:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <__data_end+0x1>
     9d2:	a0 93 04 06 	sts	0x0604, r26	; 0x800604 <__data_end+0x2>
     9d6:	b0 93 05 06 	sts	0x0605, r27	; 0x800605 <__data_end+0x3>
     9da:	08 95       	ret

000009dc <_Z15beginAnemometerh>:
uint32_t numberOfEdgesAnemometer = 0;
uint32_t numberOfEdgesOmbrometer = 0;

void beginAnemometer(uint8_t digitalPinNumber)
{
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesAnemometer, RISING);
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	51 f0       	breq	.+20     	; 0x9f4 <_Z15beginAnemometerh+0x18>
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	51 f0       	breq	.+20     	; 0x9f8 <_Z15beginAnemometerh+0x1c>
     9e4:	9e ee       	ldi	r25, 0xEE	; 238
     9e6:	98 0f       	add	r25, r24
     9e8:	94 30       	cpi	r25, 0x04	; 4
     9ea:	40 f4       	brcc	.+16     	; 0x9fc <_Z15beginAnemometerh+0x20>
     9ec:	97 e1       	ldi	r25, 0x17	; 23
     9ee:	98 1b       	sub	r25, r24
     9f0:	89 2f       	mov	r24, r25
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <_Z15beginAnemometerh+0x22>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	03 c0       	rjmp	.+6      	; 0x9fe <_Z15beginAnemometerh+0x22>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <_Z15beginAnemometerh+0x22>
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	43 e0       	ldi	r20, 0x03	; 3
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	66 ec       	ldi	r22, 0xC6	; 198
     a04:	74 e0       	ldi	r23, 0x04	; 4
     a06:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <attachInterrupt>

00000a0a <_Z15beginOmbrometerh>:
} //beginAnemometer

void beginOmbrometer(uint8_t digitalPinNumber)
{
	attachInterrupt(digitalPinToInterrupt(digitalPinNumber), countEdgesOmbrometer, RISING);
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	51 f0       	breq	.+20     	; 0xa22 <_Z15beginOmbrometerh+0x18>
     a0e:	83 30       	cpi	r24, 0x03	; 3
     a10:	51 f0       	breq	.+20     	; 0xa26 <_Z15beginOmbrometerh+0x1c>
     a12:	9e ee       	ldi	r25, 0xEE	; 238
     a14:	98 0f       	add	r25, r24
     a16:	94 30       	cpi	r25, 0x04	; 4
     a18:	40 f4       	brcc	.+16     	; 0xa2a <_Z15beginOmbrometerh+0x20>
     a1a:	97 e1       	ldi	r25, 0x17	; 23
     a1c:	98 1b       	sub	r25, r24
     a1e:	89 2f       	mov	r24, r25
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <_Z15beginOmbrometerh+0x22>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <_Z15beginOmbrometerh+0x22>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_Z15beginOmbrometerh+0x22>
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	43 e0       	ldi	r20, 0x03	; 3
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	6a ed       	ldi	r22, 0xDA	; 218
     a32:	74 e0       	ldi	r23, 0x04	; 4
     a34:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <attachInterrupt>

00000a38 <_Z26getNumberOfEdgesAnemometerv>:
	numberOfEdgesOmbrometer++;
} //countEdgesOmbrometer

uint32_t getNumberOfEdgesAnemometer()
{
	uint32_t buff = numberOfEdgesAnemometer;
     a38:	60 91 06 06 	lds	r22, 0x0606	; 0x800606 <numberOfEdgesAnemometer>
     a3c:	70 91 07 06 	lds	r23, 0x0607	; 0x800607 <numberOfEdgesAnemometer+0x1>
     a40:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <numberOfEdgesAnemometer+0x2>
     a44:	90 91 09 06 	lds	r25, 0x0609	; 0x800609 <numberOfEdgesAnemometer+0x3>
	numberOfEdgesAnemometer = 0;
     a48:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <numberOfEdgesAnemometer>
     a4c:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <numberOfEdgesAnemometer+0x1>
     a50:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <numberOfEdgesAnemometer+0x2>
     a54:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <numberOfEdgesAnemometer+0x3>
	return buff;
} //getNumberOfEdgesAnemometer
     a58:	08 95       	ret

00000a5a <_Z26getNumberOfEdgesOmbrometerv>:

uint32_t getNumberOfEdgesOmbrometer()
{
	uint32_t buff = numberOfEdgesOmbrometer;
     a5a:	60 91 02 06 	lds	r22, 0x0602	; 0x800602 <__data_end>
     a5e:	70 91 03 06 	lds	r23, 0x0603	; 0x800603 <__data_end+0x1>
     a62:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__data_end+0x2>
     a66:	90 91 05 06 	lds	r25, 0x0605	; 0x800605 <__data_end+0x3>
	numberOfEdgesOmbrometer = 0;
     a6a:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <__data_end>
     a6e:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <__data_end+0x1>
     a72:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__data_end+0x2>
     a76:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <__data_end+0x3>
	return buff;
} //getNumberOfEdgesOmbrometer
     a7a:	08 95       	ret

00000a7c <_ZN20LightIntensitySensorC1Ev>:
	Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" lux");
	Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" lux");
	Serial.println("------------------------------------");
	Serial.println("");
	delay(500);
}
     a7c:	08 95       	ret

00000a7e <_ZN20LightIntensitySensorD1Ev>:
     a7e:	08 95       	ret

00000a80 <_ZN20LightIntensitySensor15configureSensorEv>:
void LightIntensitySensor::configureSensor()
{
	/* You can also manually set the gain or enable auto-gain support */
	// tsl.setGain(TSL2561_GAIN_1X);      /* No gain ... use in bright light to avoid sensor saturation */
	// tsl.setGain(TSL2561_GAIN_16X);     /* 16x gain ... use in low light to boost sensitivity */
	tsl.enableAutoRange(true);            /* Auto-gain ... switches automatically between 1x and 16x */
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	8a e0       	ldi	r24, 0x0A	; 10
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN24Adafruit_TSL2561_Unified15enableAutoRangeEb>
	
	/* Changing the integration time gives you better sensor resolution (402ms = 16-bit data) */
	//tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_13MS);      /* fast but low resolution */
	// tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_101MS);  /* medium resolution and speed   */
	 tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_402MS);  /* 16-bit data but slowest conversions */
     a8a:	62 e0       	ldi	r22, 0x02	; 2
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	96 e0       	ldi	r25, 0x06	; 6
     a90:	0c 94 39 12 	jmp	0x2472	; 0x2472 <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t>

00000a94 <_ZN20LightIntensitySensor24initLightIntensitySensorEv>:
LightIntensitySensor::~LightIntensitySensor()
{
} //destructor

void LightIntensitySensor::initLightIntensitySensor()
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
	bool status = tsl.begin();
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	96 e0       	ldi	r25, 0x06	; 6
     a9e:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN24Adafruit_TSL2561_Unified5beginEv>
	if(!status)
     aa2:	81 11       	cpse	r24, r1
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <_ZN20LightIntensitySensor24initLightIntensitySensorEv+0x20>
	{
		Serial.print("Error: Couldn't find BME280, please ensure that the BME280 is powered and correctly wired!");
     aa6:	67 e1       	ldi	r22, 0x17	; 23
     aa8:	73 e0       	ldi	r23, 0x03	; 3
     aaa:	8d ef       	ldi	r24, 0xFD	; 253
     aac:	97 e0       	ldi	r25, 0x07	; 7
     aae:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     ab2:	ff cf       	rjmp	.-2      	; 0xab2 <_ZN20LightIntensitySensor24initLightIntensitySensorEv+0x1e>
		while(1);
	}
	else if(status)
	{
// 		displaySensorDetails();
		configureSensor();		
     ab4:	ce 01       	movw	r24, r28
     ab6:	e4 df       	rcall	.-56     	; 0xa80 <_ZN20LightIntensitySensor15configureSensorEv>
		Serial.println("TSL2561\tsuccessfully initialized!");
     ab8:	62 e7       	ldi	r22, 0x72	; 114
     aba:	73 e0       	ldi	r23, 0x03	; 3
     abc:	8d ef       	ldi	r24, 0xFD	; 253
     abe:	97 e0       	ldi	r25, 0x07	; 7
	}
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
	}
	else if(status)
	{
// 		displaySensorDetails();
		configureSensor();		
		Serial.println("TSL2561\tsuccessfully initialized!");
     ac4:	0c 94 2f 20 	jmp	0x405e	; 0x405e <_ZN5Print7printlnEPKc>

00000ac8 <_ZN20LightIntensitySensor7setDataEv>:
	// tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_101MS);  /* medium resolution and speed   */
	 tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_402MS);  /* 16-bit data but slowest conversions */
}

void LightIntensitySensor::setData()
{
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	a4 97       	sbiw	r28, 0x24	; 36
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	8c 01       	movw	r16, r24
	sensors_event_t event;
	tsl.getEvent(&event);
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	8a e0       	ldi	r24, 0x0A	; 10
     af2:	96 e0       	ldi	r25, 0x06	; 6
     af4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t>
 
	if (event.light)
     af8:	cd 88       	ldd	r12, Y+21	; 0x15
     afa:	de 88       	ldd	r13, Y+22	; 0x16
     afc:	ef 88       	ldd	r14, Y+23	; 0x17
     afe:	f8 8c       	ldd	r15, Y+24	; 0x18
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	a9 01       	movw	r20, r18
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
     b0e:	88 23       	and	r24, r24
     b10:	31 f0       	breq	.+12     	; 0xb1e <_ZN20LightIntensitySensor7setDataEv+0x56>
	{
		lux = event.light;
     b12:	f8 01       	movw	r30, r16
     b14:	c0 82       	st	Z, r12
     b16:	d1 82       	std	Z+1, r13	; 0x01
     b18:	e2 82       	std	Z+2, r14	; 0x02
     b1a:	f3 82       	std	Z+3, r15	; 0x03
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <_ZN20LightIntensitySensor7setDataEv+0x62>
	}
	else
	{
		Serial.println("Error: Sensor overload!");
     b1e:	64 e9       	ldi	r22, 0x94	; 148
     b20:	73 e0       	ldi	r23, 0x03	; 3
     b22:	8d ef       	ldi	r24, 0xFD	; 253
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	}	
}
     b2a:	a4 96       	adiw	r28, 0x24	; 36
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <_ZN20LightIntensitySensor7getDataEv>:

float LightIntensitySensor::getData()
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	ec 01       	movw	r28, r24
	setData();
     b4e:	bc df       	rcall	.-136    	; 0xac8 <_ZN20LightIntensitySensor7setDataEv>
	return lux;
     b50:	68 81       	ld	r22, Y
     b52:	79 81       	ldd	r23, Y+1	; 0x01
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	9b 81       	ldd	r25, Y+3	; 0x03
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <_GLOBAL__sub_I_tsl>:
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TSL2561_U.h>
#include "LightIntensitySensor.h"

Adafruit_TSL2561_Unified tsl = Adafruit_TSL2561_Unified(TSL2561_ADDR_FLOAT, 12345);
     b5e:	29 e3       	ldi	r18, 0x39	; 57
     b60:	30 e3       	ldi	r19, 0x30	; 48
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	69 e3       	ldi	r22, 0x39	; 57
     b68:	8a e0       	ldi	r24, 0x0A	; 10
     b6a:	96 e0       	ldi	r25, 0x06	; 6
     b6c:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <_ZN24Adafruit_TSL2561_UnifiedC1Ehl>

00000b70 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b70:	26 e0       	ldi	r18, 0x06	; 6
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	55 e2       	ldi	r21, 0x25	; 37
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	8d ef       	ldi	r24, 0xFD	; 253
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <_ZN14HardwareSerial5beginEmh>

void setup()
{
	Serial.begin(9600);
	while (!Serial);
	sd.initSdcardBreakout();
     b82:	85 ea       	ldi	r24, 0xA5	; 165
     b84:	96 e0       	ldi	r25, 0x06	; 6
     b86:	5f d3       	rcall	.+1726   	; 0x1246 <_ZN6Sdcard18initSdcardBreakoutEv>
	realtimeclock.initRTC();
     b88:	8f e6       	ldi	r24, 0x6F	; 111
     b8a:	96 e0       	ldi	r25, 0x06	; 6
     b8c:	a5 d2       	rcall	.+1354   	; 0x10d8 <_ZN13RealTimeClock7initRTCEv>
	thps.initTempHumidPressSensor();
     b8e:	85 e9       	ldi	r24, 0x95	; 149
     b90:	96 e0       	ldi	r25, 0x06	; 6
     b92:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>
	tsl2561.initLightIntensitySensor();
     b96:	81 e9       	ldi	r24, 0x91	; 145
     b98:	96 e0       	ldi	r25, 0x06	; 6
	beginAnemometer(PIN_ANEMOMETER);
     b9a:	7c df       	rcall	.-264    	; 0xa94 <_ZN20LightIntensitySensor24initLightIntensitySensorEv>
     b9c:	83 e0       	ldi	r24, 0x03	; 3
	beginOmbrometer(PIN_OMBROMETER);
     b9e:	1e df       	rcall	.-452    	; 0x9dc <_Z15beginAnemometerh>
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	33 df       	rcall	.-410    	; 0xa0a <_Z15beginOmbrometerh>
	Serial.println("Wetterdaten:");
     ba4:	6c ea       	ldi	r22, 0xAC	; 172
     ba6:	73 e0       	ldi	r23, 0x03	; 3
     ba8:	8d ef       	ldi	r24, 0xFD	; 253
     baa:	97 e0       	ldi	r25, 0x07	; 7
     bac:	0c 94 2f 20 	jmp	0x405e	; 0x405e <_ZN5Print7printlnEPKc>

00000bb0 <_Z14measureWeatherv>:
	measureWeather();
	printWeatherData();
} //loop

void measureWeather()
{
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	6d 97       	sbiw	r28, 0x1d	; 29
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	sensordata = thps.getData();
     bcc:	65 e9       	ldi	r22, 0x95	; 149
     bce:	76 e0       	ldi	r23, 0x06	; 6
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 96       	adiw	r24, 0x0e	; 14
     bd4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN20TempHumidPressSensor7getDataEv>
     bd8:	80 e1       	ldi	r24, 0x10	; 16
     bda:	fe 01       	movw	r30, r28
     bdc:	3e 96       	adiw	r30, 0x0e	; 14
     bde:	a1 e8       	ldi	r26, 0x81	; 129
     be0:	b6 e0       	ldi	r27, 0x06	; 6
     be2:	01 90       	ld	r0, Z+
     be4:	0d 92       	st	X+, r0
     be6:	8a 95       	dec	r24
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <_Z14measureWeatherv+0x32>
	windData = calculate.getWindSpeed(getNumberOfEdgesAnemometer());
     bea:	26 df       	rcall	.-436    	; 0xa38 <_Z26getNumberOfEdgesAnemometerv>
     bec:	ab 01       	movw	r20, r22
     bee:	bc 01       	movw	r22, r24
     bf0:	81 e6       	ldi	r24, 0x61	; 97
     bf2:	96 e0       	ldi	r25, 0x06	; 6
     bf4:	5c dd       	rcall	.-1352   	; 0x6ae <_ZN9Calculate12getWindSpeedEm>
     bf6:	20 93 7c 06 	sts	0x067C, r18	; 0x80067c <windData>
     bfa:	30 93 7d 06 	sts	0x067D, r19	; 0x80067d <windData+0x1>
     bfe:	40 93 7e 06 	sts	0x067E, r20	; 0x80067e <windData+0x2>
     c02:	50 93 7f 06 	sts	0x067F, r21	; 0x80067f <windData+0x3>
     c06:	60 93 80 06 	sts	0x0680, r22	; 0x800680 <windData+0x4>
	ts = realtimeclock.getTimeStamp();
     c0a:	6f e6       	ldi	r22, 0x6F	; 111
     c0c:	76 e0       	ldi	r23, 0x06	; 6
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	f2 d2       	rcall	.+1508   	; 0x11f8 <_ZN13RealTimeClock12getTimeStampEv>
#ifndef __REALTIMECLOCK_H__
#define __REALTIMECLOCK_H__

struct TimeStamp
     c14:	be 01       	movw	r22, r28
     c16:	6f 5f       	subi	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	82 e6       	ldi	r24, 0x62	; 98
     c1c:	96 e0       	ldi	r25, 0x06	; 6
     c1e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <_ZN6StringaSEOS_>
     c22:	82 e6       	ldi	r24, 0x62	; 98
     c24:	e8 2e       	mov	r14, r24
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	f8 2e       	mov	r15, r24
     c2a:	8f 81       	ldd	r24, Y+7	; 0x07
     c2c:	98 85       	ldd	r25, Y+8	; 0x08
     c2e:	f7 01       	movw	r30, r14
     c30:	97 83       	std	Z+7, r25	; 0x07
     c32:	86 83       	std	Z+6, r24	; 0x06
     c34:	89 85       	ldd	r24, Y+9	; 0x09
     c36:	80 87       	std	Z+8, r24	; 0x08
     c38:	8a 85       	ldd	r24, Y+10	; 0x0a
     c3a:	81 87       	std	Z+9, r24	; 0x09
     c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c3e:	82 87       	std	Z+10, r24	; 0x0a
     c40:	8c 85       	ldd	r24, Y+12	; 0x0c
     c42:	83 87       	std	Z+11, r24	; 0x0b
     c44:	8d 85       	ldd	r24, Y+13	; 0x0d
     c46:	84 87       	std	Z+12, r24	; 0x0c
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
	
	weatherStationData.temperature = sensordata.t;
     c50:	08 e1       	ldi	r16, 0x18	; 24
     c52:	16 e0       	ldi	r17, 0x06	; 6
     c54:	21 e8       	ldi	r18, 0x81	; 129
     c56:	36 e0       	ldi	r19, 0x06	; 6
     c58:	f9 01       	movw	r30, r18
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	a2 81       	ldd	r26, Z+2	; 0x02
     c60:	b3 81       	ldd	r27, Z+3	; 0x03
     c62:	f8 01       	movw	r30, r16
     c64:	80 83       	st	Z, r24
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	a2 83       	std	Z+2, r26	; 0x02
     c6a:	b3 83       	std	Z+3, r27	; 0x03
	weatherStationData.humidity = sensordata.h;
     c6c:	f9 01       	movw	r30, r18
     c6e:	84 81       	ldd	r24, Z+4	; 0x04
     c70:	95 81       	ldd	r25, Z+5	; 0x05
     c72:	a6 81       	ldd	r26, Z+6	; 0x06
     c74:	b7 81       	ldd	r27, Z+7	; 0x07
     c76:	f8 01       	movw	r30, r16
     c78:	84 83       	std	Z+4, r24	; 0x04
     c7a:	95 83       	std	Z+5, r25	; 0x05
     c7c:	a6 83       	std	Z+6, r26	; 0x06
     c7e:	b7 83       	std	Z+7, r27	; 0x07
	weatherStationData.pressure = sensordata.h;
     c80:	80 87       	std	Z+8, r24	; 0x08
     c82:	91 87       	std	Z+9, r25	; 0x09
     c84:	a2 87       	std	Z+10, r26	; 0x0a
     c86:	b3 87       	std	Z+11, r27	; 0x0b
 	weatherStationData.windspeed = windData.windspeed;
     c88:	2c e7       	ldi	r18, 0x7C	; 124
     c8a:	36 e0       	ldi	r19, 0x06	; 6
     c8c:	f9 01       	movw	r30, r18
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	a2 81       	ldd	r26, Z+2	; 0x02
     c94:	b3 81       	ldd	r27, Z+3	; 0x03
     c96:	f8 01       	movw	r30, r16
     c98:	80 8b       	std	Z+16, r24	; 0x10
     c9a:	91 8b       	std	Z+17, r25	; 0x11
     c9c:	a2 8b       	std	Z+18, r26	; 0x12
     c9e:	b3 8b       	std	Z+19, r27	; 0x13
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
     ca0:	4a e0       	ldi	r20, 0x0A	; 10
     ca2:	f9 01       	movw	r30, r18
     ca4:	64 81       	ldd	r22, Z+4	; 0x04
     ca6:	ce 01       	movw	r24, r28
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN6StringC1Ehh>
	weatherStationData.windstrength = windData.windstrength;
     cae:	be 01       	movw	r22, r28
     cb0:	6f 5f       	subi	r22, 0xFF	; 255
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	87 e3       	ldi	r24, 0x37	; 55
     cb6:	96 e0       	ldi	r25, 0x06	; 6
     cb8:	0e 94 48 26 	call	0x4c90	; 0x4c90 <_ZN6StringaSEO15StringSumHelper>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     cbc:	ce 01       	movw	r24, r28
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
	weatherStationData.winddirection = getWindDirection(binaryToVoltageConverting(analogRead(PIN_WINDDIRECTIONSENSOR)));
     cc4:	86 e3       	ldi	r24, 0x36	; 54
     cc6:	0e 94 5e 24 	call	0x48bc	; 0x48bc <analogRead>
     cca:	55 db       	rcall	.-2390   	; 0x376 <_Z25binaryToVoltageConvertingi>
     ccc:	ab 01       	movw	r20, r22
     cce:	bc 01       	movw	r22, r24
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	64 db       	rcall	.-2360   	; 0x39e <_Z16getWindDirectionf>
     cd6:	be 01       	movw	r22, r28
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	8d e3       	ldi	r24, 0x3D	; 61
     cde:	96 e0       	ldi	r25, 0x06	; 6
     ce0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <_ZN6StringaSEOS_>
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
	weatherStationData.rainfall = calculate.getRainfall(getNumberOfEdgesOmbrometer());
     cec:	b6 de       	rcall	.-660    	; 0xa5a <_Z26getNumberOfEdgesOmbrometerv>
     cee:	ab 01       	movw	r20, r22
     cf0:	bc 01       	movw	r22, r24
     cf2:	81 e6       	ldi	r24, 0x61	; 97
     cf4:	96 e0       	ldi	r25, 0x06	; 6
     cf6:	39 de       	rcall	.-910    	; 0x96a <_ZN9Calculate11getRainfallEm>
     cf8:	f8 01       	movw	r30, r16
     cfa:	64 8b       	std	Z+20, r22	; 0x14
     cfc:	75 8b       	std	Z+21, r23	; 0x15
     cfe:	86 8b       	std	Z+22, r24	; 0x16
	weatherStationData.lightintesity = tsl2561.getData();
     d00:	97 8b       	std	Z+23, r25	; 0x17
     d02:	81 e9       	ldi	r24, 0x91	; 145
     d04:	96 e0       	ldi	r25, 0x06	; 6
     d06:	20 df       	rcall	.-448    	; 0xb48 <_ZN20LightIntensitySensor7getDataEv>
     d08:	f8 01       	movw	r30, r16
     d0a:	64 87       	std	Z+12, r22	; 0x0c
     d0c:	75 87       	std	Z+13, r23	; 0x0d
     d0e:	86 87       	std	Z+14, r24	; 0x0e
     d10:	97 87       	std	Z+15, r25	; 0x0f
	
	weatherStationData.weekday = ts.dotw;
     d12:	b7 01       	movw	r22, r14
     d14:	83 e4       	ldi	r24, 0x43	; 67
     d16:	96 e0       	ldi	r25, 0x06	; 6
     d18:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZN6StringaSERKS_>
	weatherStationData.day = ts.d;
     d1c:	f7 01       	movw	r30, r14
     d1e:	81 85       	ldd	r24, Z+9	; 0x09
     d20:	f8 01       	movw	r30, r16
     d22:	80 8f       	std	Z+24, r24	; 0x18
	weatherStationData.month = ts.mo;
     d24:	f7 01       	movw	r30, r14
     d26:	80 85       	ldd	r24, Z+8	; 0x08
     d28:	f8 01       	movw	r30, r16
     d2a:	81 8f       	std	Z+25, r24	; 0x19
	weatherStationData.year = ts.y;
     d2c:	f7 01       	movw	r30, r14
     d2e:	86 81       	ldd	r24, Z+6	; 0x06
     d30:	97 81       	ldd	r25, Z+7	; 0x07
     d32:	f8 01       	movw	r30, r16
     d34:	96 8f       	std	Z+30, r25	; 0x1e
     d36:	85 8f       	std	Z+29, r24	; 0x1d
	weatherStationData.hour = ts.h;
     d38:	f7 01       	movw	r30, r14
     d3a:	82 85       	ldd	r24, Z+10	; 0x0a
     d3c:	f8 01       	movw	r30, r16
     d3e:	82 8f       	std	Z+26, r24	; 0x1a
	weatherStationData.minute = ts.mi;
     d40:	f7 01       	movw	r30, r14
     d42:	83 85       	ldd	r24, Z+11	; 0x0b
     d44:	f8 01       	movw	r30, r16
     d46:	83 8f       	std	Z+27, r24	; 0x1b
	weatherStationData.second = ts.s;
     d48:	f7 01       	movw	r30, r14
     d4a:	84 85       	ldd	r24, Z+12	; 0x0c
     d4c:	f8 01       	movw	r30, r16
     d4e:	84 8f       	std	Z+28, r24	; 0x1c
} //measureWeather
     d50:	6d 96       	adiw	r28, 0x1d	; 29
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	08 95       	ret

00000d6a <_Z16printWeatherDatav>:

void printWeatherData()
{	
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
	Serial.print(weatherStationData.weekday); Serial.print(":\t"); Serial.print(weatherStationData.hour); Serial.print(":"); 
     d6e:	63 e4       	ldi	r22, 0x43	; 67
     d70:	76 e0       	ldi	r23, 0x06	; 6
     d72:	8d ef       	ldi	r24, 0xFD	; 253
     d74:	97 e0       	ldi	r25, 0x07	; 7
     d76:	0e 94 16 20 	call	0x402c	; 0x402c <_ZN5Print5printERK6String>
     d7a:	69 ef       	ldi	r22, 0xF9	; 249
     d7c:	73 e0       	ldi	r23, 0x03	; 3
     d7e:	8d ef       	ldi	r24, 0xFD	; 253
     d80:	97 e0       	ldi	r25, 0x07	; 7
     d82:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     d86:	c8 e1       	ldi	r28, 0x18	; 24
     d88:	d6 e0       	ldi	r29, 0x06	; 6
     d8a:	4a e0       	ldi	r20, 0x0A	; 10
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d90:	8d ef       	ldi	r24, 0xFD	; 253
     d92:	97 e0       	ldi	r25, 0x07	; 7
     d94:	0e 94 93 20 	call	0x4126	; 0x4126 <_ZN5Print5printEhi>
     d98:	67 eb       	ldi	r22, 0xB7	; 183
     d9a:	73 e0       	ldi	r23, 0x03	; 3
     d9c:	8d ef       	ldi	r24, 0xFD	; 253
     d9e:	97 e0       	ldi	r25, 0x07	; 7
     da0:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
	Serial.print(weatherStationData.minute); Serial.print(":"); Serial.print(weatherStationData.second); Serial.print("\t"); 
     da4:	4a e0       	ldi	r20, 0x0A	; 10
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	6b 8d       	ldd	r22, Y+27	; 0x1b
     daa:	8d ef       	ldi	r24, 0xFD	; 253
     dac:	97 e0       	ldi	r25, 0x07	; 7
     dae:	0e 94 93 20 	call	0x4126	; 0x4126 <_ZN5Print5printEhi>
     db2:	67 eb       	ldi	r22, 0xB7	; 183
     db4:	73 e0       	ldi	r23, 0x03	; 3
     db6:	8d ef       	ldi	r24, 0xFD	; 253
     db8:	97 e0       	ldi	r25, 0x07	; 7
     dba:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     dbe:	4a e0       	ldi	r20, 0x0A	; 10
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	6c 8d       	ldd	r22, Y+28	; 0x1c
     dc4:	8d ef       	ldi	r24, 0xFD	; 253
     dc6:	97 e0       	ldi	r25, 0x07	; 7
     dc8:	0e 94 93 20 	call	0x4126	; 0x4126 <_ZN5Print5printEhi>
     dcc:	6a ef       	ldi	r22, 0xFA	; 250
     dce:	73 e0       	ldi	r23, 0x03	; 3
     dd0:	8d ef       	ldi	r24, 0xFD	; 253
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
	Serial.print(weatherStationData.day); Serial.print("."); Serial.print(weatherStationData.month); Serial.print("."); 
     dd8:	4a e0       	ldi	r20, 0x0A	; 10
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	68 8d       	ldd	r22, Y+24	; 0x18
     dde:	8d ef       	ldi	r24, 0xFD	; 253
     de0:	97 e0       	ldi	r25, 0x07	; 7
     de2:	0e 94 93 20 	call	0x4126	; 0x4126 <_ZN5Print5printEhi>
     de6:	69 eb       	ldi	r22, 0xB9	; 185
     de8:	73 e0       	ldi	r23, 0x03	; 3
     dea:	8d ef       	ldi	r24, 0xFD	; 253
     dec:	97 e0       	ldi	r25, 0x07	; 7
     dee:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     df2:	4a e0       	ldi	r20, 0x0A	; 10
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	69 8d       	ldd	r22, Y+25	; 0x19
     df8:	8d ef       	ldi	r24, 0xFD	; 253
     dfa:	97 e0       	ldi	r25, 0x07	; 7
     dfc:	0e 94 93 20 	call	0x4126	; 0x4126 <_ZN5Print5printEhi>
     e00:	69 eb       	ldi	r22, 0xB9	; 185
     e02:	73 e0       	ldi	r23, 0x03	; 3
     e04:	8d ef       	ldi	r24, 0xFD	; 253
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
	Serial.println(weatherStationData.year);
     e0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e10:	4a e0       	ldi	r20, 0x0A	; 10
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	8d ef       	ldi	r24, 0xFD	; 253
     e16:	97 e0       	ldi	r25, 0x07	; 7
     e18:	0e 94 9e 20 	call	0x413c	; 0x413c <_ZN5Print7printlnEji>
	
	Serial.print("Temperature:\t"); Serial.print(weatherStationData.temperature); Serial.print("\t"); Serial.println("Celsius");
     e1c:	6b eb       	ldi	r22, 0xBB	; 187
     e1e:	73 e0       	ldi	r23, 0x03	; 3
     e20:	8d ef       	ldi	r24, 0xFD	; 253
     e22:	97 e0       	ldi	r25, 0x07	; 7
     e24:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     e28:	48 81       	ld	r20, Y
     e2a:	59 81       	ldd	r21, Y+1	; 0x01
     e2c:	6a 81       	ldd	r22, Y+2	; 0x02
     e2e:	7b 81       	ldd	r23, Y+3	; 0x03
     e30:	22 e0       	ldi	r18, 0x02	; 2
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	8d ef       	ldi	r24, 0xFD	; 253
     e36:	97 e0       	ldi	r25, 0x07	; 7
     e38:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_ZN5Print5printEdi>
     e3c:	6a ef       	ldi	r22, 0xFA	; 250
     e3e:	73 e0       	ldi	r23, 0x03	; 3
     e40:	8d ef       	ldi	r24, 0xFD	; 253
     e42:	97 e0       	ldi	r25, 0x07	; 7
     e44:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     e48:	69 ec       	ldi	r22, 0xC9	; 201
     e4a:	73 e0       	ldi	r23, 0x03	; 3
     e4c:	8d ef       	ldi	r24, 0xFD	; 253
     e4e:	97 e0       	ldi	r25, 0x07	; 7
     e50:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Humidity:\t"); Serial.print(weatherStationData.humidity); Serial.print("\t"); Serial.println("%");
     e54:	61 ed       	ldi	r22, 0xD1	; 209
     e56:	73 e0       	ldi	r23, 0x03	; 3
     e58:	8d ef       	ldi	r24, 0xFD	; 253
     e5a:	97 e0       	ldi	r25, 0x07	; 7
     e5c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     e60:	4c 81       	ldd	r20, Y+4	; 0x04
     e62:	5d 81       	ldd	r21, Y+5	; 0x05
     e64:	6e 81       	ldd	r22, Y+6	; 0x06
     e66:	7f 81       	ldd	r23, Y+7	; 0x07
     e68:	22 e0       	ldi	r18, 0x02	; 2
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	8d ef       	ldi	r24, 0xFD	; 253
     e6e:	97 e0       	ldi	r25, 0x07	; 7
     e70:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_ZN5Print5printEdi>
     e74:	6a ef       	ldi	r22, 0xFA	; 250
     e76:	73 e0       	ldi	r23, 0x03	; 3
     e78:	8d ef       	ldi	r24, 0xFD	; 253
     e7a:	97 e0       	ldi	r25, 0x07	; 7
     e7c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     e80:	6c ed       	ldi	r22, 0xDC	; 220
     e82:	73 e0       	ldi	r23, 0x03	; 3
     e84:	8d ef       	ldi	r24, 0xFD	; 253
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Airpressure:\t"); Serial.print(weatherStationData.pressure); Serial.print("\t"); Serial.println("hPa");
     e8c:	6e ed       	ldi	r22, 0xDE	; 222
     e8e:	73 e0       	ldi	r23, 0x03	; 3
     e90:	8d ef       	ldi	r24, 0xFD	; 253
     e92:	97 e0       	ldi	r25, 0x07	; 7
     e94:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     e98:	48 85       	ldd	r20, Y+8	; 0x08
     e9a:	59 85       	ldd	r21, Y+9	; 0x09
     e9c:	6a 85       	ldd	r22, Y+10	; 0x0a
     e9e:	7b 85       	ldd	r23, Y+11	; 0x0b
     ea0:	22 e0       	ldi	r18, 0x02	; 2
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8d ef       	ldi	r24, 0xFD	; 253
     ea6:	97 e0       	ldi	r25, 0x07	; 7
     ea8:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_ZN5Print5printEdi>
     eac:	6a ef       	ldi	r22, 0xFA	; 250
     eae:	73 e0       	ldi	r23, 0x03	; 3
     eb0:	8d ef       	ldi	r24, 0xFD	; 253
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     eb8:	6c ee       	ldi	r22, 0xEC	; 236
     eba:	73 e0       	ldi	r23, 0x03	; 3
     ebc:	8d ef       	ldi	r24, 0xFD	; 253
     ebe:	97 e0       	ldi	r25, 0x07	; 7
     ec0:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Windspeed:\t"); Serial.print(weatherStationData.windspeed); Serial.print("\t"); Serial.println("m/s");
     ec4:	60 ef       	ldi	r22, 0xF0	; 240
     ec6:	73 e0       	ldi	r23, 0x03	; 3
     ec8:	8d ef       	ldi	r24, 0xFD	; 253
     eca:	97 e0       	ldi	r25, 0x07	; 7
     ecc:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     ed0:	48 89       	ldd	r20, Y+16	; 0x10
     ed2:	59 89       	ldd	r21, Y+17	; 0x11
     ed4:	6a 89       	ldd	r22, Y+18	; 0x12
     ed6:	7b 89       	ldd	r23, Y+19	; 0x13
     ed8:	22 e0       	ldi	r18, 0x02	; 2
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8d ef       	ldi	r24, 0xFD	; 253
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_ZN5Print5printEdi>
     ee4:	6a ef       	ldi	r22, 0xFA	; 250
     ee6:	73 e0       	ldi	r23, 0x03	; 3
     ee8:	8d ef       	ldi	r24, 0xFD	; 253
     eea:	97 e0       	ldi	r25, 0x07	; 7
     eec:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     ef0:	6c ef       	ldi	r22, 0xFC	; 252
     ef2:	73 e0       	ldi	r23, 0x03	; 3
     ef4:	8d ef       	ldi	r24, 0xFD	; 253
     ef6:	97 e0       	ldi	r25, 0x07	; 7
     ef8:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Windstrength:\t"); Serial.print(weatherStationData.windstrength); Serial.print("\t"); Serial.println("");
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	74 e0       	ldi	r23, 0x04	; 4
     f00:	8d ef       	ldi	r24, 0xFD	; 253
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     f08:	67 e3       	ldi	r22, 0x37	; 55
     f0a:	76 e0       	ldi	r23, 0x06	; 6
     f0c:	8d ef       	ldi	r24, 0xFD	; 253
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	0e 94 16 20 	call	0x402c	; 0x402c <_ZN5Print5printERK6String>
     f14:	6a ef       	ldi	r22, 0xFA	; 250
     f16:	73 e0       	ldi	r23, 0x03	; 3
     f18:	8d ef       	ldi	r24, 0xFD	; 253
     f1a:	97 e0       	ldi	r25, 0x07	; 7
     f1c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     f20:	6b ef       	ldi	r22, 0xFB	; 251
     f22:	73 e0       	ldi	r23, 0x03	; 3
     f24:	8d ef       	ldi	r24, 0xFD	; 253
     f26:	97 e0       	ldi	r25, 0x07	; 7
     f28:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Winddirection:\t"); Serial.print(weatherStationData.winddirection); Serial.print("\t"); Serial.println("");
     f2c:	6f e0       	ldi	r22, 0x0F	; 15
     f2e:	74 e0       	ldi	r23, 0x04	; 4
     f30:	8d ef       	ldi	r24, 0xFD	; 253
     f32:	97 e0       	ldi	r25, 0x07	; 7
     f34:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     f38:	6d e3       	ldi	r22, 0x3D	; 61
     f3a:	76 e0       	ldi	r23, 0x06	; 6
     f3c:	8d ef       	ldi	r24, 0xFD	; 253
     f3e:	97 e0       	ldi	r25, 0x07	; 7
     f40:	0e 94 16 20 	call	0x402c	; 0x402c <_ZN5Print5printERK6String>
     f44:	6a ef       	ldi	r22, 0xFA	; 250
     f46:	73 e0       	ldi	r23, 0x03	; 3
     f48:	8d ef       	ldi	r24, 0xFD	; 253
     f4a:	97 e0       	ldi	r25, 0x07	; 7
     f4c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     f50:	6b ef       	ldi	r22, 0xFB	; 251
     f52:	73 e0       	ldi	r23, 0x03	; 3
     f54:	8d ef       	ldi	r24, 0xFD	; 253
     f56:	97 e0       	ldi	r25, 0x07	; 7
     f58:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Rainfall:\t"); Serial.print(weatherStationData.rainfall); Serial.print("\t"); Serial.println("ml/m^2");
     f5c:	6f e1       	ldi	r22, 0x1F	; 31
     f5e:	74 e0       	ldi	r23, 0x04	; 4
     f60:	8d ef       	ldi	r24, 0xFD	; 253
     f62:	97 e0       	ldi	r25, 0x07	; 7
     f64:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     f68:	4c 89       	ldd	r20, Y+20	; 0x14
     f6a:	5d 89       	ldd	r21, Y+21	; 0x15
     f6c:	6e 89       	ldd	r22, Y+22	; 0x16
     f6e:	7f 89       	ldd	r23, Y+23	; 0x17
     f70:	22 e0       	ldi	r18, 0x02	; 2
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	8d ef       	ldi	r24, 0xFD	; 253
     f76:	97 e0       	ldi	r25, 0x07	; 7
     f78:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_ZN5Print5printEdi>
     f7c:	6a ef       	ldi	r22, 0xFA	; 250
     f7e:	73 e0       	ldi	r23, 0x03	; 3
     f80:	8d ef       	ldi	r24, 0xFD	; 253
     f82:	97 e0       	ldi	r25, 0x07	; 7
     f84:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     f88:	6a e2       	ldi	r22, 0x2A	; 42
     f8a:	74 e0       	ldi	r23, 0x04	; 4
     f8c:	8d ef       	ldi	r24, 0xFD	; 253
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.print("Lightintensity:\t"); Serial.print(weatherStationData.lightintesity); Serial.print("\t"); Serial.println("lux");
     f94:	61 e3       	ldi	r22, 0x31	; 49
     f96:	74 e0       	ldi	r23, 0x04	; 4
     f98:	8d ef       	ldi	r24, 0xFD	; 253
     f9a:	97 e0       	ldi	r25, 0x07	; 7
     f9c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     fa0:	4c 85       	ldd	r20, Y+12	; 0x0c
     fa2:	5d 85       	ldd	r21, Y+13	; 0x0d
     fa4:	6e 85       	ldd	r22, Y+14	; 0x0e
     fa6:	7f 85       	ldd	r23, Y+15	; 0x0f
     fa8:	22 e0       	ldi	r18, 0x02	; 2
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	8d ef       	ldi	r24, 0xFD	; 253
     fae:	97 e0       	ldi	r25, 0x07	; 7
     fb0:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_ZN5Print5printEdi>
     fb4:	6a ef       	ldi	r22, 0xFA	; 250
     fb6:	73 e0       	ldi	r23, 0x03	; 3
     fb8:	8d ef       	ldi	r24, 0xFD	; 253
     fba:	97 e0       	ldi	r25, 0x07	; 7
     fbc:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN5Print5printEPKc>
     fc0:	65 ef       	ldi	r22, 0xF5	; 245
     fc2:	72 e0       	ldi	r23, 0x02	; 2
     fc4:	8d ef       	ldi	r24, 0xFD	; 253
     fc6:	97 e0       	ldi	r25, 0x07	; 7
     fc8:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	Serial.println("");
     fcc:	6b ef       	ldi	r22, 0xFB	; 251
     fce:	73 e0       	ldi	r23, 0x03	; 3
     fd0:	8d ef       	ldi	r24, 0xFD	; 253
     fd2:	97 e0       	ldi	r25, 0x07	; 7
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
	Serial.print("Windspeed:\t"); Serial.print(weatherStationData.windspeed); Serial.print("\t"); Serial.println("m/s");
	Serial.print("Windstrength:\t"); Serial.print(weatherStationData.windstrength); Serial.print("\t"); Serial.println("");
	Serial.print("Winddirection:\t"); Serial.print(weatherStationData.winddirection); Serial.print("\t"); Serial.println("");
	Serial.print("Rainfall:\t"); Serial.print(weatherStationData.rainfall); Serial.print("\t"); Serial.println("ml/m^2");
	Serial.print("Lightintensity:\t"); Serial.print(weatherStationData.lightintesity); Serial.print("\t"); Serial.println("lux");
	Serial.println("");
     fd8:	0c 94 2f 20 	jmp	0x405e	; 0x405e <_ZN5Print7printlnEPKc>

00000fdc <loop>:
	Serial.println("Wetterdaten:");
} //setup

void loop()
{
	delay(TIME * 1000);
     fdc:	68 e8       	ldi	r22, 0x88	; 136
     fde:	73 e1       	ldi	r23, 0x13	; 19
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 c2 23 	call	0x4784	; 0x4784 <delay>
	measureWeather();
     fe8:	e3 dd       	rcall	.-1082   	; 0xbb0 <_Z14measureWeatherv>
	printWeatherData();
     fea:	bf ce       	rjmp	.-642    	; 0xd6a <_Z16printWeatherDatav>

00000fec <_GLOBAL__sub_I_sd>:
     fec:	85 ea       	ldi	r24, 0xA5	; 165
#include "Calculate.h"
#include "LightIntensitySensor.h"
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
     fee:	96 e0       	ldi	r25, 0x06	; 6
     ff0:	28 d1       	rcall	.+592    	; 0x1242 <_ZN6SdcardC1Ev>
TempHumidPressSensor thps;
     ff2:	85 e9       	ldi	r24, 0x95	; 149
     ff4:	96 e0       	ldi	r25, 0x06	; 6
     ff6:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN20TempHumidPressSensorC1Ev>
LightIntensitySensor tsl2561;
     ffa:	81 e9       	ldi	r24, 0x91	; 145
     ffc:	96 e0       	ldi	r25, 0x06	; 6
     ffe:	3e dd       	rcall	.-1412   	; 0xa7c <_ZN20LightIntensitySensorC1Ev>
BME280SensorData sensordata;
WindData windData;
RealTimeClock realtimeclock;
    1000:	8f e6       	ldi	r24, 0x6F	; 111
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	63 d0       	rcall	.+198    	; 0x10cc <_ZN13RealTimeClockC1Ev>
    1006:	6b ef       	ldi	r22, 0xFB	; 251
    1008:	73 e0       	ldi	r23, 0x03	; 3
    100a:	82 e6       	ldi	r24, 0x62	; 98
    100c:	96 e0       	ldi	r25, 0x06	; 6
    100e:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
TimeStamp ts;
Calculate calculate;
    1012:	81 e6       	ldi	r24, 0x61	; 97
    1014:	96 e0       	ldi	r25, 0x06	; 6
    1016:	49 db       	rcall	.-2414   	; 0x6aa <_ZN9CalculateC1Ev>

String logDataHour = "Hour.txt";
    1018:	62 e4       	ldi	r22, 0x42	; 66
    101a:	74 e0       	ldi	r23, 0x04	; 4
    101c:	8b e5       	ldi	r24, 0x5B	; 91
    101e:	96 e0       	ldi	r25, 0x06	; 6
    1020:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
String logDataDay = "Day.txt";
    1024:	6b e4       	ldi	r22, 0x4B	; 75
    1026:	74 e0       	ldi	r23, 0x04	; 4
    1028:	85 e5       	ldi	r24, 0x55	; 85
    102a:	96 e0       	ldi	r25, 0x06	; 6
    102c:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
String logDataWeek = "Week.txt";
    1030:	63 e5       	ldi	r22, 0x53	; 83
    1032:	74 e0       	ldi	r23, 0x04	; 4
    1034:	8f e4       	ldi	r24, 0x4F	; 79
    1036:	96 e0       	ldi	r25, 0x06	; 6
    1038:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
String logDataMonth = "Month.txt";
    103c:	6c e5       	ldi	r22, 0x5C	; 92
    103e:	74 e0       	ldi	r23, 0x04	; 4
    1040:	89 e4       	ldi	r24, 0x49	; 73
    1042:	96 e0       	ldi	r25, 0x06	; 6
    1044:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
// it would be useful if there is an option for NOW (current values maybe)!

void measureWeather();
void printWeatherData();

struct WeatherStationData
    1048:	6b ef       	ldi	r22, 0xFB	; 251
    104a:	73 e0       	ldi	r23, 0x03	; 3
    104c:	87 e3       	ldi	r24, 0x37	; 55
    104e:	96 e0       	ldi	r25, 0x06	; 6
    1050:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
    1054:	6b ef       	ldi	r22, 0xFB	; 251
    1056:	73 e0       	ldi	r23, 0x03	; 3
    1058:	8d e3       	ldi	r24, 0x3D	; 61
    105a:	96 e0       	ldi	r25, 0x06	; 6
    105c:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
    1060:	6b ef       	ldi	r22, 0xFB	; 251
    1062:	73 e0       	ldi	r23, 0x03	; 3
    1064:	83 e4       	ldi	r24, 0x43	; 67
    1066:	96 e0       	ldi	r25, 0x06	; 6
    1068:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <_ZN6StringC1EPKc>

0000106c <_GLOBAL__sub_D_sd>:
    106c:	83 e4       	ldi	r24, 0x43	; 67
    106e:	96 e0       	ldi	r25, 0x06	; 6
    1070:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
    1074:	8d e3       	ldi	r24, 0x3D	; 61
    1076:	96 e0       	ldi	r25, 0x06	; 6
    1078:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
    107c:	87 e3       	ldi	r24, 0x37	; 55
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
Calculate calculate;

String logDataHour = "Hour.txt";
String logDataDay = "Day.txt";
String logDataWeek = "Week.txt";
String logDataMonth = "Month.txt";
    1084:	89 e4       	ldi	r24, 0x49	; 73
    1086:	96 e0       	ldi	r25, 0x06	; 6
    1088:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
TimeStamp ts;
Calculate calculate;

String logDataHour = "Hour.txt";
String logDataDay = "Day.txt";
String logDataWeek = "Week.txt";
    108c:	8f e4       	ldi	r24, 0x4F	; 79
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
RealTimeClock realtimeclock;
TimeStamp ts;
Calculate calculate;

String logDataHour = "Hour.txt";
String logDataDay = "Day.txt";
    1094:	85 e5       	ldi	r24, 0x55	; 85
    1096:	96 e0       	ldi	r25, 0x06	; 6
    1098:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
WindData windData;
RealTimeClock realtimeclock;
TimeStamp ts;
Calculate calculate;

String logDataHour = "Hour.txt";
    109c:	8b e5       	ldi	r24, 0x5B	; 91
    109e:	96 e0       	ldi	r25, 0x06	; 6
    10a0:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
LightIntensitySensor tsl2561;
BME280SensorData sensordata;
WindData windData;
RealTimeClock realtimeclock;
TimeStamp ts;
Calculate calculate;
    10a4:	81 e6       	ldi	r24, 0x61	; 97
    10a6:	96 e0       	ldi	r25, 0x06	; 6
    10a8:	01 db       	rcall	.-2558   	; 0x6ac <_ZN9CalculateD1Ev>
    10aa:	82 e6       	ldi	r24, 0x62	; 98
    10ac:	96 e0       	ldi	r25, 0x06	; 6
    10ae:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>
Sdcard sd;
TempHumidPressSensor thps;
LightIntensitySensor tsl2561;
BME280SensorData sensordata;
WindData windData;
RealTimeClock realtimeclock;
    10b2:	8f e6       	ldi	r24, 0x6F	; 111
    10b4:	96 e0       	ldi	r25, 0x06	; 6
    10b6:	0e d0       	rcall	.+28     	; 0x10d4 <_ZN13RealTimeClockD1Ev>
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
TempHumidPressSensor thps;
LightIntensitySensor tsl2561;
    10b8:	81 e9       	ldi	r24, 0x91	; 145
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	e0 dc       	rcall	.-1600   	; 0xa7e <_ZN20LightIntensitySensorD1Ev>
#include "LightIntensitySensor.h"
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
TempHumidPressSensor thps;
    10be:	85 e9       	ldi	r24, 0x95	; 149
    10c0:	96 e0       	ldi	r25, 0x06	; 6
    10c2:	0e 94 b6 19 	call	0x336c	; 0x336c <_ZN20TempHumidPressSensorD1Ev>
#include "Calculate.h"
#include "LightIntensitySensor.h"
#include "ISR.h"
#include "ADC.h"

Sdcard sd;
    10c6:	85 ea       	ldi	r24, 0xA5	; 165
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	bc c0       	rjmp	.+376    	; 0x1244 <_ZN6SdcardD1Ev>

000010cc <_ZN13RealTimeClockC1Ev>:
#include "RealTimeClock.h"

RTC_DS3231 rtc;

// constructor
RealTimeClock::RealTimeClock()
    10cc:	6b ef       	ldi	r22, 0xFB	; 251
    10ce:	73 e0       	ldi	r23, 0x03	; 3
    10d0:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <_ZN6StringC1EPKc>

000010d4 <_ZN13RealTimeClockD1Ev>:
{
} //constructor

// destructor
RealTimeClock::~RealTimeClock()
    10d4:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <_ZN6StringD1Ev>

000010d8 <_ZN13RealTimeClock7initRTCEv>:
{
} //~destructor

void RealTimeClock::initRTC()
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <_ZN13RealTimeClock7initRTCEv+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <_ZN13RealTimeClock7initRTCEv+0x8>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	bool status = rtc.begin();
    10e4:	86 ea       	ldi	r24, 0xA6	; 166
    10e6:	96 e0       	ldi	r25, 0x06	; 6
    10e8:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN10RTC_DS32315beginEv>
	if (!status)
    10ec:	81 11       	cpse	r24, r1
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <_ZN13RealTimeClock7initRTCEv+0x26>
	{
		Serial.println("Error: Couldn't find RTC, please ensure that the rtc is powered!");
    10f0:	66 e6       	ldi	r22, 0x66	; 102
    10f2:	74 e0       	ldi	r23, 0x04	; 4
    10f4:	8d ef       	ldi	r24, 0xFD	; 253
    10f6:	97 e0       	ldi	r25, 0x07	; 7
    10f8:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
    10fc:	ff cf       	rjmp	.-2      	; 0x10fc <_ZN13RealTimeClock7initRTCEv+0x24>
		while (1);
	}
	else if (status)
	{
		Serial.println("RTC\tsuccessfully initialized!");
    10fe:	67 ea       	ldi	r22, 0xA7	; 167
    1100:	74 e0       	ldi	r23, 0x04	; 4
    1102:	8d ef       	ldi	r24, 0xFD	; 253
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
	}
	
	if (rtc.lostPower())
    110a:	86 ea       	ldi	r24, 0xA6	; 166
    110c:	96 e0       	ldi	r25, 0x06	; 6
    110e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN10RTC_DS32319lostPowerEv>
    1112:	88 23       	and	r24, r24
    1114:	91 f0       	breq	.+36     	; 0x113a <_ZN13RealTimeClock7initRTCEv+0x62>
	{
		Serial.println("RTC lost power, the time will be set!");
    1116:	65 ec       	ldi	r22, 0xC5	; 197
    1118:	74 e0       	ldi	r23, 0x04	; 4
    111a:	8d ef       	ldi	r24, 0xFD	; 253
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
		// following line sets the RTC to the date & time this file was compiled
		rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    1122:	4a ec       	ldi	r20, 0xCA	; 202
    1124:	51 e0       	ldi	r21, 0x01	; 1
    1126:	6e eb       	ldi	r22, 0xBE	; 190
    1128:	71 e0       	ldi	r23, 0x01	; 1
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <_ZN10RTC_DS32316adjustERK8DateTime>
	}
} //initRTC
    113a:	26 96       	adiw	r28, 0x06	; 6
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <_ZN13RealTimeClock11setDateTimeEv>:

void RealTimeClock::setDateTime()
{
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	ca 55       	subi	r28, 0x5A	; 90
    115a:	d1 09       	sbc	r29, r1
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	8c 01       	movw	r16, r24
	char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    1168:	84 e5       	ldi	r24, 0x54	; 84
    116a:	eb e1       	ldi	r30, 0x1B	; 27
    116c:	f2 e0       	ldi	r31, 0x02	; 2
    116e:	de 01       	movw	r26, r28
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	01 90       	ld	r0, Z+
    1174:	0d 92       	st	X+, r0
    1176:	8a 95       	dec	r24
    1178:	e1 f7       	brne	.-8      	; 0x1172 <_ZN13RealTimeClock11setDateTimeEv+0x26>
	DateTime now = rtc.now();
    117a:	ce 01       	movw	r24, r28
    117c:	8b 5a       	subi	r24, 0xAB	; 171
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN10RTC_DS32313nowEv>
	
	dayOfWeek = daysOfTheWeek[now.dayOfTheWeek()];
    1184:	ce 01       	movw	r24, r28
    1186:	8b 5a       	subi	r24, 0xAB	; 171
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <_ZNK8DateTime12dayOfTheWeekEv>
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	6c 0f       	add	r22, r28
    1194:	7d 1f       	adc	r23, r29
    1196:	9c e0       	ldi	r25, 0x0C	; 12
    1198:	89 9f       	mul	r24, r25
    119a:	60 0d       	add	r22, r0
    119c:	71 1d       	adc	r23, r1
    119e:	11 24       	eor	r1, r1
    11a0:	c8 01       	movw	r24, r16
    11a2:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <_ZN6StringaSEPKc>
	year = now.year();
    11a6:	66 96       	adiw	r28, 0x16	; 22
    11a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    11aa:	66 97       	sbiw	r28, 0x16	; 22
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	80 53       	subi	r24, 0x30	; 48
    11b0:	98 4f       	sbci	r25, 0xF8	; 248
    11b2:	f8 01       	movw	r30, r16
    11b4:	97 83       	std	Z+7, r25	; 0x07
    11b6:	86 83       	std	Z+6, r24	; 0x06
	month = now.month();
    11b8:	67 96       	adiw	r28, 0x17	; 23
    11ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    11bc:	67 97       	sbiw	r28, 0x17	; 23
    11be:	80 87       	std	Z+8, r24	; 0x08
	day = now.day();
    11c0:	68 96       	adiw	r28, 0x18	; 24
    11c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    11c4:	68 97       	sbiw	r28, 0x18	; 24
    11c6:	81 87       	std	Z+9, r24	; 0x09
	hour = now.hour();
    11c8:	69 96       	adiw	r28, 0x19	; 25
    11ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    11cc:	69 97       	sbiw	r28, 0x19	; 25
    11ce:	82 87       	std	Z+10, r24	; 0x0a
	minute = now.minute();
    11d0:	6a 96       	adiw	r28, 0x1a	; 26
    11d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    11d4:	6a 97       	sbiw	r28, 0x1a	; 26
    11d6:	83 87       	std	Z+11, r24	; 0x0b
	second = now.second();
    11d8:	6b 96       	adiw	r28, 0x1b	; 27
    11da:	8f ad       	ldd	r24, Y+63	; 0x3f
    11dc:	6b 97       	sbiw	r28, 0x1b	; 27
    11de:	84 87       	std	Z+12, r24	; 0x0c
} //setDateTime
    11e0:	c6 5a       	subi	r28, 0xA6	; 166
    11e2:	df 4f       	sbci	r29, 0xFF	; 255
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <_ZN13RealTimeClock12getTimeStampEv>:

TimeStamp RealTimeClock::getTimeStamp()
{
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
    1202:	8b 01       	movw	r16, r22
    1204:	6b ef       	ldi	r22, 0xFB	; 251
    1206:	73 e0       	ldi	r23, 0x03	; 3
    1208:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN6StringC1EPKc>
	TimeStamp timeStamp;
	setDateTime();
    120c:	c8 01       	movw	r24, r16
    120e:	9e df       	rcall	.-196    	; 0x114c <_ZN13RealTimeClock11setDateTimeEv>
	
	timeStamp.dotw = dayOfWeek;
    1210:	b8 01       	movw	r22, r16
    1212:	ce 01       	movw	r24, r28
    1214:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_ZN6StringaSERKS_>
	timeStamp.y = year;
    1218:	f8 01       	movw	r30, r16
    121a:	86 81       	ldd	r24, Z+6	; 0x06
    121c:	97 81       	ldd	r25, Z+7	; 0x07
    121e:	9f 83       	std	Y+7, r25	; 0x07
    1220:	8e 83       	std	Y+6, r24	; 0x06
	timeStamp.mo = month;
    1222:	80 85       	ldd	r24, Z+8	; 0x08
    1224:	88 87       	std	Y+8, r24	; 0x08
	timeStamp.d = day;
    1226:	81 85       	ldd	r24, Z+9	; 0x09
    1228:	89 87       	std	Y+9, r24	; 0x09
	timeStamp.h = hour;
    122a:	82 85       	ldd	r24, Z+10	; 0x0a
    122c:	8a 87       	std	Y+10, r24	; 0x0a
	timeStamp.mi = minute;
    122e:	83 85       	ldd	r24, Z+11	; 0x0b
    1230:	8b 87       	std	Y+11, r24	; 0x0b
	timeStamp.s = second;
    1232:	84 85       	ldd	r24, Z+12	; 0x0c
    1234:	8c 87       	std	Y+12, r24	; 0x0c
	
	return timeStamp;
    1236:	ce 01       	movw	r24, r28
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	08 95       	ret

00001242 <_ZN6SdcardC1Ev>:
	} 
	else
	{
		Serial.println(filename + " doesn't exist");
	}
    1242:	08 95       	ret

00001244 <_ZN6SdcardD1Ev>:
    1244:	08 95       	ret

00001246 <_ZN6Sdcard18initSdcardBreakoutEv>:
    1246:	65 e3       	ldi	r22, 0x35	; 53
    1248:	83 ea       	ldi	r24, 0xA3	; 163
    124a:	98 e0       	ldi	r25, 0x08	; 8
    124c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZN5SDLib7SDClass5beginEh>
    1250:	81 11       	cpse	r24, r1
    1252:	0d c0       	rjmp	.+26     	; 0x126e <_ZN6Sdcard18initSdcardBreakoutEv+0x28>
    1254:	6b ee       	ldi	r22, 0xEB	; 235
    1256:	74 e0       	ldi	r23, 0x04	; 4
    1258:	8d ef       	ldi	r24, 0xFD	; 253
    125a:	97 e0       	ldi	r25, 0x07	; 7
    125c:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
    1260:	65 e3       	ldi	r22, 0x35	; 53
    1262:	83 ea       	ldi	r24, 0xA3	; 163
    1264:	98 e0       	ldi	r25, 0x08	; 8
    1266:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZN5SDLib7SDClass5beginEh>
    126a:	88 23       	and	r24, r24
    126c:	31 f0       	breq	.+12     	; 0x127a <_ZN6Sdcard18initSdcardBreakoutEv+0x34>
    126e:	6a e0       	ldi	r22, 0x0A	; 10
    1270:	75 e0       	ldi	r23, 0x05	; 5
    1272:	8d ef       	ldi	r24, 0xFD	; 253
    1274:	97 e0       	ldi	r25, 0x07	; 7
    1276:	0c 94 2f 20 	jmp	0x405e	; 0x405e <_ZN5Print7printlnEPKc>
    127a:	64 ef       	ldi	r22, 0xF4	; 244
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 c2 23 	call	0x4784	; 0x4784 <delay>
    1286:	ec cf       	rjmp	.-40     	; 0x1260 <_ZN6Sdcard18initSdcardBreakoutEv+0x1a>

00001288 <_GLOBAL__sub_I_datalog>:
#include <SPI.h>
#include <SD.h>
#include "SystemDefinitions.h"
#include "Sdcard.h"

File datalog;
    1288:	87 ea       	ldi	r24, 0xA7	; 167
    128a:	96 e0       	ldi	r25, 0x06	; 6
    128c:	0c 94 13 27 	jmp	0x4e26	; 0x4e26 <_ZN5SDLib4FileC1Ev>

00001290 <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
    1290:	20 91 fa 0a 	lds	r18, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    1294:	22 23       	and	r18, r18
    1296:	99 f0       	breq	.+38     	; 0x12be <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1298:	4f b7       	in	r20, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	20 91 fa 0a 	lds	r18, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    12a0:	21 30       	cpi	r18, 0x01	; 1
    12a2:	59 f4       	brne	.+22     	; 0x12ba <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    12a4:	2d b3       	in	r18, 0x1d	; 29
    12a6:	20 93 f8 0a 	sts	0x0AF8, r18	; 0x800af8 <_ZN8SPIClass13interruptSaveE>
    12aa:	3d b3       	in	r19, 0x1d	; 29
    12ac:	20 91 f9 0a 	lds	r18, 0x0AF9	; 0x800af9 <_ZN8SPIClass13interruptMaskE>
    12b0:	20 95       	com	r18
    12b2:	23 23       	and	r18, r19
    12b4:	2d bb       	out	0x1d, r18	; 29
    12b6:	4f bf       	out	0x3f, r20	; 63
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    12ba:	40 93 f8 0a 	sts	0x0AF8, r20	; 0x800af8 <_ZN8SPIClass13interruptSaveE>
    12be:	8c bd       	out	0x2c, r24	; 44
    12c0:	9d bd       	out	0x2d, r25	; 45
    12c2:	08 95       	ret

000012c4 <_ZN8SPIClass14endTransactionEv>:
    12c4:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    12c8:	88 23       	and	r24, r24
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <_ZN8SPIClass14endTransactionEv+0x20>
    12cc:	9f b7       	in	r25, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	20 91 fa 0a 	lds	r18, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    12d4:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_ZN8SPIClass13interruptSaveE>
    12d8:	21 30       	cpi	r18, 0x01	; 1
    12da:	19 f4       	brne	.+6      	; 0x12e2 <_ZN8SPIClass14endTransactionEv+0x1e>
    12dc:	8d bb       	out	0x1d, r24	; 29
    12de:	9f bf       	out	0x3f, r25	; 63
    12e0:	08 95       	ret
    12e2:	8f bf       	out	0x3f, r24	; 63
    12e4:	08 95       	ret

000012e6 <_ZN15Adafruit_BME280C1Ev>:
    12e6:	fc 01       	movw	r30, r24
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	83 87       	std	Z+11, r24	; 0x0b
    12ec:	84 87       	std	Z+12, r24	; 0x0c
    12ee:	85 87       	std	Z+13, r24	; 0x0d
    12f0:	86 87       	std	Z+14, r24	; 0x0e
    12f2:	08 95       	ret

000012f4 <_ZN15Adafruit_BME2807spixferEh>:
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	fc 01       	movw	r30, r24
    1306:	26 85       	ldd	r18, Z+14	; 0x0e
    1308:	2f 3f       	cpi	r18, 0xFF	; 255
    130a:	39 f4       	brne	.+14     	; 0x131a <_ZN15Adafruit_BME2807spixferEh+0x26>
    130c:	6e bd       	out	0x2e, r22	; 46
    130e:	00 00       	nop
    1310:	0d b4       	in	r0, 0x2d	; 45
    1312:	07 fe       	sbrs	r0, 7
    1314:	fd cf       	rjmp	.-6      	; 0x1310 <_ZN15Adafruit_BME2807spixferEh+0x1c>
    1316:	8e b5       	in	r24, 0x2e	; 46
    1318:	2b c0       	rjmp	.+86     	; 0x1370 <_ZN15Adafruit_BME2807spixferEh+0x7c>
    131a:	d6 2f       	mov	r29, r22
    131c:	8c 01       	movw	r16, r24
    131e:	87 e0       	ldi	r24, 0x07	; 7
    1320:	e8 2e       	mov	r14, r24
    1322:	f1 2c       	mov	r15, r1
    1324:	c0 e0       	ldi	r28, 0x00	; 0
    1326:	cc 24       	eor	r12, r12
    1328:	c3 94       	inc	r12
    132a:	d1 2c       	mov	r13, r1
    132c:	cc 0f       	add	r28, r28
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	f8 01       	movw	r30, r16
    1332:	86 85       	ldd	r24, Z+14	; 0x0e
    1334:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1338:	b6 01       	movw	r22, r12
    133a:	0e 2c       	mov	r0, r14
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <_ZN15Adafruit_BME2807spixferEh+0x4c>
    133e:	66 0f       	add	r22, r22
    1340:	0a 94       	dec	r0
    1342:	ea f7       	brpl	.-6      	; 0x133e <_ZN15Adafruit_BME2807spixferEh+0x4a>
    1344:	6d 23       	and	r22, r29
    1346:	f8 01       	movw	r30, r16
    1348:	84 85       	ldd	r24, Z+12	; 0x0c
    134a:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	f8 01       	movw	r30, r16
    1352:	86 85       	ldd	r24, Z+14	; 0x0e
    1354:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1358:	f8 01       	movw	r30, r16
    135a:	85 85       	ldd	r24, Z+13	; 0x0d
    135c:	0e 94 43 25 	call	0x4a86	; 0x4a86 <digitalRead>
    1360:	89 2b       	or	r24, r25
    1362:	09 f0       	breq	.+2      	; 0x1366 <_ZN15Adafruit_BME2807spixferEh+0x72>
    1364:	c1 60       	ori	r28, 0x01	; 1
    1366:	f1 e0       	ldi	r31, 0x01	; 1
    1368:	ef 1a       	sub	r14, r31
    136a:	f1 08       	sbc	r15, r1
    136c:	f8 f6       	brcc	.-66     	; 0x132c <_ZN15Adafruit_BME2807spixferEh+0x38>
    136e:	8c 2f       	mov	r24, r28
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	08 95       	ret

00001382 <_ZN15Adafruit_BME2806write8Ehh>:
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	ec 01       	movw	r28, r24
    138c:	16 2f       	mov	r17, r22
    138e:	04 2f       	mov	r16, r20
    1390:	8b 85       	ldd	r24, Y+11	; 0x0b
    1392:	8f 3f       	cpi	r24, 0xFF	; 255
    1394:	09 f5       	brne	.+66     	; 0x13d8 <_ZN15Adafruit_BME2806write8Ehh+0x56>
    1396:	6a 81       	ldd	r22, Y+2	; 0x02
    1398:	88 81       	ld	r24, Y
    139a:	99 81       	ldd	r25, Y+1	; 0x01
    139c:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    13a0:	88 81       	ld	r24, Y
    13a2:	99 81       	ldd	r25, Y+1	; 0x01
    13a4:	dc 01       	movw	r26, r24
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	01 90       	ld	r0, Z+
    13ac:	f0 81       	ld	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	61 2f       	mov	r22, r17
    13b2:	19 95       	eicall
    13b4:	88 81       	ld	r24, Y
    13b6:	99 81       	ldd	r25, Y+1	; 0x01
    13b8:	dc 01       	movw	r26, r24
    13ba:	ed 91       	ld	r30, X+
    13bc:	fc 91       	ld	r31, X
    13be:	01 90       	ld	r0, Z+
    13c0:	f0 81       	ld	r31, Z
    13c2:	e0 2d       	mov	r30, r0
    13c4:	60 2f       	mov	r22, r16
    13c6:	19 95       	eicall
    13c8:	88 81       	ld	r24, Y
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    13d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <_ZN15Adafruit_BME2806write8Ehh+0x62>
    13de:	82 e5       	ldi	r24, 0x52	; 82
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	56 df       	rcall	.-340    	; 0x1290 <_ZN8SPIClass16beginTransactionE11SPISettings>
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13e8:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    13ec:	61 2f       	mov	r22, r17
    13ee:	6f 77       	andi	r22, 0x7F	; 127
    13f0:	ce 01       	movw	r24, r28
    13f2:	80 df       	rcall	.-256    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    13f4:	60 2f       	mov	r22, r16
    13f6:	ce 01       	movw	r24, r28
    13f8:	7d df       	rcall	.-262    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13fe:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1402:	8e 85       	ldd	r24, Y+14	; 0x0e
    1404:	8f 3f       	cpi	r24, 0xFF	; 255
    1406:	29 f4       	brne	.+10     	; 0x1412 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	59 cf       	rjmp	.-334    	; 0x12c4 <_ZN8SPIClass14endTransactionEv>
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
    141c:	cf 92       	push	r12
    141e:	ef 92       	push	r14
    1420:	0f 93       	push	r16
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	62 95       	swap	r22
    142a:	66 0f       	add	r22, r22
    142c:	66 0f       	add	r22, r22
    142e:	60 7c       	andi	r22, 0xC0	; 192
    1430:	47 70       	andi	r20, 0x07	; 7
    1432:	27 70       	andi	r18, 0x07	; 7
    1434:	82 2f       	mov	r24, r18
    1436:	88 0f       	add	r24, r24
    1438:	88 0f       	add	r24, r24
    143a:	88 0f       	add	r24, r24
    143c:	26 2f       	mov	r18, r22
    143e:	24 2b       	or	r18, r20
    1440:	28 2b       	or	r18, r24
    1442:	29 ab       	std	Y+49, r18	; 0x31
    1444:	90 2f       	mov	r25, r16
    1446:	92 95       	swap	r25
    1448:	99 0f       	add	r25, r25
    144a:	90 7e       	andi	r25, 0xE0	; 224
    144c:	8a a9       	ldd	r24, Y+50	; 0x32
    144e:	8f 71       	andi	r24, 0x1F	; 31
    1450:	89 2b       	or	r24, r25
    1452:	8a ab       	std	Y+50, r24	; 0x32
    1454:	8e 2d       	mov	r24, r14
    1456:	87 70       	andi	r24, 0x07	; 7
    1458:	88 0f       	add	r24, r24
    145a:	88 0f       	add	r24, r24
    145c:	88 0f       	add	r24, r24
    145e:	98 a9       	ldd	r25, Y+48	; 0x30
    1460:	29 2f       	mov	r18, r25
    1462:	20 7c       	andi	r18, 0xC0	; 192
    1464:	9c 2d       	mov	r25, r12
    1466:	97 70       	andi	r25, 0x07	; 7
    1468:	e2 2e       	mov	r14, r18
    146a:	e8 2a       	or	r14, r24
    146c:	e9 2a       	or	r14, r25
    146e:	e8 aa       	std	Y+48, r14	; 0x30
    1470:	40 2f       	mov	r20, r16
    1472:	47 70       	andi	r20, 0x07	; 7
    1474:	62 ef       	ldi	r22, 0xF2	; 242
    1476:	ce 01       	movw	r24, r28
    1478:	84 df       	rcall	.-248    	; 0x1382 <_ZN15Adafruit_BME2806write8Ehh>
    147a:	98 a9       	ldd	r25, Y+48	; 0x30
    147c:	49 2f       	mov	r20, r25
    147e:	47 70       	andi	r20, 0x07	; 7
    1480:	60 e2       	ldi	r22, 0x20	; 32
    1482:	46 9f       	mul	r20, r22
    1484:	90 01       	movw	r18, r0
    1486:	11 24       	eor	r1, r1
    1488:	89 2f       	mov	r24, r25
    148a:	86 95       	lsr	r24
    148c:	86 95       	lsr	r24
    148e:	86 95       	lsr	r24
    1490:	87 70       	andi	r24, 0x07	; 7
    1492:	68 e0       	ldi	r22, 0x08	; 8
    1494:	86 9f       	mul	r24, r22
    1496:	a0 01       	movw	r20, r0
    1498:	11 24       	eor	r1, r1
    149a:	42 2b       	or	r20, r18
    149c:	53 2b       	or	r21, r19
    149e:	97 fb       	bst	r25, 7
    14a0:	99 27       	eor	r25, r25
    14a2:	90 f9       	bld	r25, 0
    14a4:	49 2b       	or	r20, r25
    14a6:	65 ef       	ldi	r22, 0xF5	; 245
    14a8:	ce 01       	movw	r24, r28
    14aa:	6b df       	rcall	.-298    	; 0x1382 <_ZN15Adafruit_BME2806write8Ehh>
    14ac:	99 a9       	ldd	r25, Y+49	; 0x31
    14ae:	49 2f       	mov	r20, r25
    14b0:	47 70       	andi	r20, 0x07	; 7
    14b2:	80 e2       	ldi	r24, 0x20	; 32
    14b4:	48 9f       	mul	r20, r24
    14b6:	90 01       	movw	r18, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	89 2f       	mov	r24, r25
    14bc:	86 95       	lsr	r24
    14be:	86 95       	lsr	r24
    14c0:	86 95       	lsr	r24
    14c2:	87 70       	andi	r24, 0x07	; 7
    14c4:	68 e0       	ldi	r22, 0x08	; 8
    14c6:	86 9f       	mul	r24, r22
    14c8:	a0 01       	movw	r20, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	42 2b       	or	r20, r18
    14ce:	53 2b       	or	r21, r19
    14d0:	92 95       	swap	r25
    14d2:	96 95       	lsr	r25
    14d4:	96 95       	lsr	r25
    14d6:	93 70       	andi	r25, 0x03	; 3
    14d8:	49 2b       	or	r20, r25
    14da:	64 ef       	ldi	r22, 0xF4	; 244
    14dc:	ce 01       	movw	r24, r28
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	0f 91       	pop	r16
    14e4:	ef 90       	pop	r14
    14e6:	cf 90       	pop	r12
    14e8:	4c cf       	rjmp	.-360    	; 0x1382 <_ZN15Adafruit_BME2806write8Ehh>

000014ea <_ZN15Adafruit_BME2805read8Eh>:
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
    14f2:	16 2f       	mov	r17, r22
    14f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14f6:	8f 3f       	cpi	r24, 0xFF	; 255
    14f8:	21 f5       	brne	.+72     	; 0x1542 <_ZN15Adafruit_BME2805read8Eh+0x58>
    14fa:	6a 81       	ldd	r22, Y+2	; 0x02
    14fc:	88 81       	ld	r24, Y
    14fe:	99 81       	ldd	r25, Y+1	; 0x01
    1500:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    1504:	88 81       	ld	r24, Y
    1506:	99 81       	ldd	r25, Y+1	; 0x01
    1508:	dc 01       	movw	r26, r24
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	01 90       	ld	r0, Z+
    1510:	f0 81       	ld	r31, Z
    1512:	e0 2d       	mov	r30, r0
    1514:	61 2f       	mov	r22, r17
    1516:	19 95       	eicall
    1518:	88 81       	ld	r24, Y
    151a:	99 81       	ldd	r25, Y+1	; 0x01
    151c:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	6a 81       	ldd	r22, Y+2	; 0x02
    1524:	88 81       	ld	r24, Y
    1526:	99 81       	ldd	r25, Y+1	; 0x01
    1528:	0e 94 ac 19 	call	0x3358	; 0x3358 <_ZN7TwoWire11requestFromEhh>
    152c:	88 81       	ld	r24, Y
    152e:	99 81       	ldd	r25, Y+1	; 0x01
    1530:	dc 01       	movw	r26, r24
    1532:	ed 91       	ld	r30, X+
    1534:	fc 91       	ld	r31, X
    1536:	02 84       	ldd	r0, Z+10	; 0x0a
    1538:	f3 85       	ldd	r31, Z+11	; 0x0b
    153a:	e0 2d       	mov	r30, r0
    153c:	19 95       	eicall
    153e:	18 2f       	mov	r17, r24
    1540:	1a c0       	rjmp	.+52     	; 0x1576 <_ZN15Adafruit_BME2805read8Eh+0x8c>
    1542:	8e 85       	ldd	r24, Y+14	; 0x0e
    1544:	8f 3f       	cpi	r24, 0xFF	; 255
    1546:	19 f4       	brne	.+6      	; 0x154e <_ZN15Adafruit_BME2805read8Eh+0x64>
    1548:	82 e5       	ldi	r24, 0x52	; 82
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	a1 de       	rcall	.-702    	; 0x1290 <_ZN8SPIClass16beginTransactionE11SPISettings>
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	8b 85       	ldd	r24, Y+11	; 0x0b
    1552:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1556:	61 2f       	mov	r22, r17
    1558:	60 68       	ori	r22, 0x80	; 128
    155a:	ce 01       	movw	r24, r28
    155c:	cb de       	rcall	.-618    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	ce 01       	movw	r24, r28
    1562:	c8 de       	rcall	.-624    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    1564:	18 2f       	mov	r17, r24
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	8b 85       	ldd	r24, Y+11	; 0x0b
    156a:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    156e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1570:	8f 3f       	cpi	r24, 0xFF	; 255
    1572:	09 f4       	brne	.+2      	; 0x1576 <_ZN15Adafruit_BME2805read8Eh+0x8c>
    1574:	a7 de       	rcall	.-690    	; 0x12c4 <_ZN8SPIClass14endTransactionEv>
    1576:	81 2f       	mov	r24, r17
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	08 95       	ret

00001580 <_ZN15Adafruit_BME2806read16Eh>:
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	16 2f       	mov	r17, r22
    158c:	8b 85       	ldd	r24, Y+11	; 0x0b
    158e:	8f 3f       	cpi	r24, 0xFF	; 255
    1590:	99 f5       	brne	.+102    	; 0x15f8 <_ZN15Adafruit_BME2806read16Eh+0x78>
    1592:	6a 81       	ldd	r22, Y+2	; 0x02
    1594:	88 81       	ld	r24, Y
    1596:	99 81       	ldd	r25, Y+1	; 0x01
    1598:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    159c:	88 81       	ld	r24, Y
    159e:	99 81       	ldd	r25, Y+1	; 0x01
    15a0:	dc 01       	movw	r26, r24
    15a2:	ed 91       	ld	r30, X+
    15a4:	fc 91       	ld	r31, X
    15a6:	01 90       	ld	r0, Z+
    15a8:	f0 81       	ld	r31, Z
    15aa:	e0 2d       	mov	r30, r0
    15ac:	61 2f       	mov	r22, r17
    15ae:	19 95       	eicall
    15b0:	88 81       	ld	r24, Y
    15b2:	99 81       	ldd	r25, Y+1	; 0x01
    15b4:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    15b8:	42 e0       	ldi	r20, 0x02	; 2
    15ba:	6a 81       	ldd	r22, Y+2	; 0x02
    15bc:	88 81       	ld	r24, Y
    15be:	99 81       	ldd	r25, Y+1	; 0x01
    15c0:	0e 94 ac 19 	call	0x3358	; 0x3358 <_ZN7TwoWire11requestFromEhh>
    15c4:	88 81       	ld	r24, Y
    15c6:	99 81       	ldd	r25, Y+1	; 0x01
    15c8:	dc 01       	movw	r26, r24
    15ca:	ed 91       	ld	r30, X+
    15cc:	fc 91       	ld	r31, X
    15ce:	02 84       	ldd	r0, Z+10	; 0x0a
    15d0:	f3 85       	ldd	r31, Z+11	; 0x0b
    15d2:	e0 2d       	mov	r30, r0
    15d4:	19 95       	eicall
    15d6:	18 2f       	mov	r17, r24
    15d8:	88 81       	ld	r24, Y
    15da:	99 81       	ldd	r25, Y+1	; 0x01
    15dc:	dc 01       	movw	r26, r24
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	02 84       	ldd	r0, Z+10	; 0x0a
    15e4:	f3 85       	ldd	r31, Z+11	; 0x0b
    15e6:	e0 2d       	mov	r30, r0
    15e8:	19 95       	eicall
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	31 2f       	mov	r19, r17
    15f0:	89 01       	movw	r16, r18
    15f2:	08 2b       	or	r16, r24
    15f4:	19 2b       	or	r17, r25
    15f6:	23 c0       	rjmp	.+70     	; 0x163e <_ZN15Adafruit_BME2806read16Eh+0xbe>
    15f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15fa:	8f 3f       	cpi	r24, 0xFF	; 255
    15fc:	19 f4       	brne	.+6      	; 0x1604 <_ZN15Adafruit_BME2806read16Eh+0x84>
    15fe:	82 e5       	ldi	r24, 0x52	; 82
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	46 de       	rcall	.-884    	; 0x1290 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	8b 85       	ldd	r24, Y+11	; 0x0b
    1608:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    160c:	61 2f       	mov	r22, r17
    160e:	60 68       	ori	r22, 0x80	; 128
    1610:	ce 01       	movw	r24, r28
    1612:	70 de       	rcall	.-800    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	ce 01       	movw	r24, r28
    1618:	6d de       	rcall	.-806    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    161a:	08 2f       	mov	r16, r24
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	ce 01       	movw	r24, r28
    1620:	69 de       	rcall	.-814    	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    1622:	20 2f       	mov	r18, r16
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	32 2f       	mov	r19, r18
    1628:	22 27       	eor	r18, r18
    162a:	89 01       	movw	r16, r18
    162c:	08 2b       	or	r16, r24
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	8b 85       	ldd	r24, Y+11	; 0x0b
    1632:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1636:	8e 85       	ldd	r24, Y+14	; 0x0e
    1638:	8f 3f       	cpi	r24, 0xFF	; 255
    163a:	09 f4       	brne	.+2      	; 0x163e <_ZN15Adafruit_BME2806read16Eh+0xbe>
    163c:	43 de       	rcall	.-890    	; 0x12c4 <_ZN8SPIClass14endTransactionEv>
    163e:	c8 01       	movw	r24, r16
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	08 95       	ret

0000164a <_ZN15Adafruit_BME2809read16_LEEh>:
    164a:	9a df       	rcall	.-204    	; 0x1580 <_ZN15Adafruit_BME2806read16Eh>
    164c:	98 27       	eor	r25, r24
    164e:	89 27       	eor	r24, r25
    1650:	98 27       	eor	r25, r24
    1652:	08 95       	ret

00001654 <_ZN15Adafruit_BME2806read24Eh>:
    1654:	4f 92       	push	r4
    1656:	5f 92       	push	r5
    1658:	6f 92       	push	r6
    165a:	7f 92       	push	r7
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
    1674:	16 2f       	mov	r17, r22
    1676:	8b 85       	ldd	r24, Y+11	; 0x0b
    1678:	8f 3f       	cpi	r24, 0xFF	; 255
    167a:	09 f0       	breq	.+2      	; 0x167e <_ZN15Adafruit_BME2806read24Eh+0x2a>
    167c:	51 c0       	rjmp	.+162    	; 0x1720 <_ZN15Adafruit_BME2806read24Eh+0xcc>
    167e:	6a 81       	ldd	r22, Y+2	; 0x02
    1680:	88 81       	ld	r24, Y
    1682:	99 81       	ldd	r25, Y+1	; 0x01
    1684:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    1688:	88 81       	ld	r24, Y
    168a:	99 81       	ldd	r25, Y+1	; 0x01
    168c:	dc 01       	movw	r26, r24
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	01 90       	ld	r0, Z+
    1694:	f0 81       	ld	r31, Z
    1696:	e0 2d       	mov	r30, r0
    1698:	61 2f       	mov	r22, r17
    169a:	19 95       	eicall
    169c:	88 81       	ld	r24, Y
    169e:	99 81       	ldd	r25, Y+1	; 0x01
    16a0:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    16a4:	43 e0       	ldi	r20, 0x03	; 3
    16a6:	6a 81       	ldd	r22, Y+2	; 0x02
    16a8:	88 81       	ld	r24, Y
    16aa:	99 81       	ldd	r25, Y+1	; 0x01
    16ac:	0e 94 ac 19 	call	0x3358	; 0x3358 <_ZN7TwoWire11requestFromEhh>
    16b0:	88 81       	ld	r24, Y
    16b2:	99 81       	ldd	r25, Y+1	; 0x01
    16b4:	dc 01       	movw	r26, r24
    16b6:	ed 91       	ld	r30, X+
    16b8:	fc 91       	ld	r31, X
    16ba:	02 84       	ldd	r0, Z+10	; 0x0a
    16bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    16be:	e0 2d       	mov	r30, r0
    16c0:	19 95       	eicall
    16c2:	2c 01       	movw	r4, r24
    16c4:	99 0f       	add	r25, r25
    16c6:	66 08       	sbc	r6, r6
    16c8:	77 08       	sbc	r7, r7
    16ca:	76 2c       	mov	r7, r6
    16cc:	65 2c       	mov	r6, r5
    16ce:	54 2c       	mov	r5, r4
    16d0:	44 24       	eor	r4, r4
    16d2:	88 81       	ld	r24, Y
    16d4:	99 81       	ldd	r25, Y+1	; 0x01
    16d6:	dc 01       	movw	r26, r24
    16d8:	ed 91       	ld	r30, X+
    16da:	fc 91       	ld	r31, X
    16dc:	02 84       	ldd	r0, Z+10	; 0x0a
    16de:	f3 85       	ldd	r31, Z+11	; 0x0b
    16e0:	e0 2d       	mov	r30, r0
    16e2:	19 95       	eicall
    16e4:	6c 01       	movw	r12, r24
    16e6:	99 0f       	add	r25, r25
    16e8:	ee 08       	sbc	r14, r14
    16ea:	ff 08       	sbc	r15, r15
    16ec:	c4 28       	or	r12, r4
    16ee:	d5 28       	or	r13, r5
    16f0:	e6 28       	or	r14, r6
    16f2:	f7 28       	or	r15, r7
    16f4:	88 24       	eor	r8, r8
    16f6:	9c 2c       	mov	r9, r12
    16f8:	ad 2c       	mov	r10, r13
    16fa:	be 2c       	mov	r11, r14
    16fc:	88 81       	ld	r24, Y
    16fe:	99 81       	ldd	r25, Y+1	; 0x01
    1700:	dc 01       	movw	r26, r24
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	02 84       	ldd	r0, Z+10	; 0x0a
    1708:	f3 85       	ldd	r31, Z+11	; 0x0b
    170a:	e0 2d       	mov	r30, r0
    170c:	19 95       	eicall
    170e:	6c 01       	movw	r12, r24
    1710:	99 0f       	add	r25, r25
    1712:	ee 08       	sbc	r14, r14
    1714:	ff 08       	sbc	r15, r15
    1716:	c8 28       	or	r12, r8
    1718:	d9 28       	or	r13, r9
    171a:	ea 28       	or	r14, r10
    171c:	fb 28       	or	r15, r11
    171e:	2d c0       	rjmp	.+90     	; 0x177a <_ZN15Adafruit_BME2806read24Eh+0x126>
    1720:	8e 85       	ldd	r24, Y+14	; 0x0e
    1722:	8f 3f       	cpi	r24, 0xFF	; 255
    1724:	19 f4       	brne	.+6      	; 0x172c <_ZN15Adafruit_BME2806read24Eh+0xd8>
    1726:	82 e5       	ldi	r24, 0x52	; 82
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	b2 dd       	rcall	.-1180   	; 0x1290 <_ZN8SPIClass16beginTransactionE11SPISettings>
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1730:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1734:	61 2f       	mov	r22, r17
    1736:	60 68       	ori	r22, 0x80	; 128
    1738:	ce 01       	movw	r24, r28
    173a:	dc dd       	rcall	.-1096   	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	ce 01       	movw	r24, r28
    1740:	d9 dd       	rcall	.-1102   	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    1742:	c8 2e       	mov	r12, r24
    1744:	d1 2c       	mov	r13, r1
    1746:	e1 2c       	mov	r14, r1
    1748:	f1 2c       	mov	r15, r1
    174a:	fe 2c       	mov	r15, r14
    174c:	ed 2c       	mov	r14, r13
    174e:	dc 2c       	mov	r13, r12
    1750:	cc 24       	eor	r12, r12
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	ce 01       	movw	r24, r28
    1756:	ce dd       	rcall	.-1124   	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    1758:	c8 2a       	or	r12, r24
    175a:	fe 2c       	mov	r15, r14
    175c:	ed 2c       	mov	r14, r13
    175e:	dc 2c       	mov	r13, r12
    1760:	cc 24       	eor	r12, r12
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	ce 01       	movw	r24, r28
    1766:	c6 dd       	rcall	.-1140   	; 0x12f4 <_ZN15Adafruit_BME2807spixferEh>
    1768:	c8 2a       	or	r12, r24
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	8b 85       	ldd	r24, Y+11	; 0x0b
    176e:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    1772:	8e 85       	ldd	r24, Y+14	; 0x0e
    1774:	8f 3f       	cpi	r24, 0xFF	; 255
    1776:	09 f4       	brne	.+2      	; 0x177a <_ZN15Adafruit_BME2806read24Eh+0x126>
    1778:	a5 dd       	rcall	.-1206   	; 0x12c4 <_ZN8SPIClass14endTransactionEv>
    177a:	c7 01       	movw	r24, r14
    177c:	b6 01       	movw	r22, r12
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	bf 90       	pop	r11
    178e:	af 90       	pop	r10
    1790:	9f 90       	pop	r9
    1792:	8f 90       	pop	r8
    1794:	7f 90       	pop	r7
    1796:	6f 90       	pop	r6
    1798:	5f 90       	pop	r5
    179a:	4f 90       	pop	r4
    179c:	08 95       	ret

0000179e <_ZN15Adafruit_BME28016readCoefficientsEv>:
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ec 01       	movw	r28, r24
    17a6:	68 e8       	ldi	r22, 0x88	; 136
    17a8:	50 df       	rcall	.-352    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17aa:	98 8b       	std	Y+16, r25	; 0x10
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
    17ae:	6a e8       	ldi	r22, 0x8A	; 138
    17b0:	ce 01       	movw	r24, r28
    17b2:	4b df       	rcall	.-362    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17b4:	9a 8b       	std	Y+18, r25	; 0x12
    17b6:	89 8b       	std	Y+17, r24	; 0x11
    17b8:	6c e8       	ldi	r22, 0x8C	; 140
    17ba:	ce 01       	movw	r24, r28
    17bc:	46 df       	rcall	.-372    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17be:	9c 8b       	std	Y+20, r25	; 0x14
    17c0:	8b 8b       	std	Y+19, r24	; 0x13
    17c2:	6e e8       	ldi	r22, 0x8E	; 142
    17c4:	ce 01       	movw	r24, r28
    17c6:	41 df       	rcall	.-382    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17c8:	9e 8b       	std	Y+22, r25	; 0x16
    17ca:	8d 8b       	std	Y+21, r24	; 0x15
    17cc:	60 e9       	ldi	r22, 0x90	; 144
    17ce:	ce 01       	movw	r24, r28
    17d0:	3c df       	rcall	.-392    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17d2:	98 8f       	std	Y+24, r25	; 0x18
    17d4:	8f 8b       	std	Y+23, r24	; 0x17
    17d6:	62 e9       	ldi	r22, 0x92	; 146
    17d8:	ce 01       	movw	r24, r28
    17da:	37 df       	rcall	.-402    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17dc:	9a 8f       	std	Y+26, r25	; 0x1a
    17de:	89 8f       	std	Y+25, r24	; 0x19
    17e0:	64 e9       	ldi	r22, 0x94	; 148
    17e2:	ce 01       	movw	r24, r28
    17e4:	32 df       	rcall	.-412    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17e6:	9c 8f       	std	Y+28, r25	; 0x1c
    17e8:	8b 8f       	std	Y+27, r24	; 0x1b
    17ea:	66 e9       	ldi	r22, 0x96	; 150
    17ec:	ce 01       	movw	r24, r28
    17ee:	2d df       	rcall	.-422    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17f0:	9e 8f       	std	Y+30, r25	; 0x1e
    17f2:	8d 8f       	std	Y+29, r24	; 0x1d
    17f4:	68 e9       	ldi	r22, 0x98	; 152
    17f6:	ce 01       	movw	r24, r28
    17f8:	28 df       	rcall	.-432    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    17fa:	98 a3       	std	Y+32, r25	; 0x20
    17fc:	8f 8f       	std	Y+31, r24	; 0x1f
    17fe:	6a e9       	ldi	r22, 0x9A	; 154
    1800:	ce 01       	movw	r24, r28
    1802:	23 df       	rcall	.-442    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    1804:	9a a3       	std	Y+34, r25	; 0x22
    1806:	89 a3       	std	Y+33, r24	; 0x21
    1808:	6c e9       	ldi	r22, 0x9C	; 156
    180a:	ce 01       	movw	r24, r28
    180c:	1e df       	rcall	.-452    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    180e:	9c a3       	std	Y+36, r25	; 0x24
    1810:	8b a3       	std	Y+35, r24	; 0x23
    1812:	6e e9       	ldi	r22, 0x9E	; 158
    1814:	ce 01       	movw	r24, r28
    1816:	19 df       	rcall	.-462    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    1818:	9e a3       	std	Y+38, r25	; 0x26
    181a:	8d a3       	std	Y+37, r24	; 0x25
    181c:	61 ea       	ldi	r22, 0xA1	; 161
    181e:	ce 01       	movw	r24, r28
    1820:	64 de       	rcall	.-824    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    1822:	8f a3       	std	Y+39, r24	; 0x27
    1824:	61 ee       	ldi	r22, 0xE1	; 225
    1826:	ce 01       	movw	r24, r28
    1828:	10 df       	rcall	.-480    	; 0x164a <_ZN15Adafruit_BME2809read16_LEEh>
    182a:	99 a7       	std	Y+41, r25	; 0x29
    182c:	88 a7       	std	Y+40, r24	; 0x28
    182e:	63 ee       	ldi	r22, 0xE3	; 227
    1830:	ce 01       	movw	r24, r28
    1832:	5b de       	rcall	.-842    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    1834:	8a a7       	std	Y+42, r24	; 0x2a
    1836:	64 ee       	ldi	r22, 0xE4	; 228
    1838:	ce 01       	movw	r24, r28
    183a:	57 de       	rcall	.-850    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    183c:	18 2f       	mov	r17, r24
    183e:	65 ee       	ldi	r22, 0xE5	; 229
    1840:	ce 01       	movw	r24, r28
    1842:	53 de       	rcall	.-858    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    1844:	90 e1       	ldi	r25, 0x10	; 16
    1846:	19 9f       	mul	r17, r25
    1848:	90 01       	movw	r18, r0
    184a:	11 24       	eor	r1, r1
    184c:	8f 70       	andi	r24, 0x0F	; 15
    184e:	28 2b       	or	r18, r24
    1850:	3c a7       	std	Y+44, r19	; 0x2c
    1852:	2b a7       	std	Y+43, r18	; 0x2b
    1854:	66 ee       	ldi	r22, 0xE6	; 230
    1856:	ce 01       	movw	r24, r28
    1858:	48 de       	rcall	.-880    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    185a:	18 2f       	mov	r17, r24
    185c:	65 ee       	ldi	r22, 0xE5	; 229
    185e:	ce 01       	movw	r24, r28
    1860:	44 de       	rcall	.-888    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    1862:	90 e1       	ldi	r25, 0x10	; 16
    1864:	19 9f       	mul	r17, r25
    1866:	90 01       	movw	r18, r0
    1868:	11 24       	eor	r1, r1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	44 e0       	ldi	r20, 0x04	; 4
    186e:	95 95       	asr	r25
    1870:	87 95       	ror	r24
    1872:	4a 95       	dec	r20
    1874:	e1 f7       	brne	.-8      	; 0x186e <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
    1876:	82 2b       	or	r24, r18
    1878:	93 2b       	or	r25, r19
    187a:	9e a7       	std	Y+46, r25	; 0x2e
    187c:	8d a7       	std	Y+45, r24	; 0x2d
    187e:	67 ee       	ldi	r22, 0xE7	; 231
    1880:	ce 01       	movw	r24, r28
    1882:	33 de       	rcall	.-922    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    1884:	8f a7       	std	Y+47, r24	; 0x2f
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	08 95       	ret

0000188e <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    188e:	63 ef       	ldi	r22, 0xF3	; 243
    1890:	2c de       	rcall	.-936    	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	08 95       	ret

00001896 <_ZN15Adafruit_BME2804initEv>:
    1896:	cf 92       	push	r12
    1898:	ef 92       	push	r14
    189a:	0f 93       	push	r16
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
    18a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    18a4:	8f 3f       	cpi	r24, 0xFF	; 255
    18a6:	29 f4       	brne	.+10     	; 0x18b2 <_ZN15Adafruit_BME2804initEv+0x1c>
    18a8:	88 81       	ld	r24, Y
    18aa:	99 81       	ldd	r25, Y+1	; 0x01
    18ac:	0e 94 20 19 	call	0x3240	; 0x3240 <_ZN7TwoWire5beginEv>
    18b0:	18 c0       	rjmp	.+48     	; 0x18e2 <_ZN15Adafruit_BME2804initEv+0x4c>
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    18bc:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>
    18c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18c2:	8f 3f       	cpi	r24, 0xFF	; 255
    18c4:	19 f4       	brne	.+6      	; 0x18cc <_ZN15Adafruit_BME2804initEv+0x36>
    18c6:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZN8SPIClass5beginEv>
    18ca:	0b c0       	rjmp	.+22     	; 0x18e2 <_ZN15Adafruit_BME2804initEv+0x4c>
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18d6:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18de:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>
    18e2:	60 ed       	ldi	r22, 0xD0	; 208
    18e4:	ce 01       	movw	r24, r28
    18e6:	01 de       	rcall	.-1022   	; 0x14ea <_ZN15Adafruit_BME2805read8Eh>
    18e8:	80 36       	cpi	r24, 0x60	; 96
    18ea:	29 f5       	brne	.+74     	; 0x1936 <_ZN15Adafruit_BME2804initEv+0xa0>
    18ec:	46 eb       	ldi	r20, 0xB6	; 182
    18ee:	60 ee       	ldi	r22, 0xE0	; 224
    18f0:	ce 01       	movw	r24, r28
    18f2:	47 dd       	rcall	.-1394   	; 0x1382 <_ZN15Adafruit_BME2806write8Ehh>
    18f4:	6c e2       	ldi	r22, 0x2C	; 44
    18f6:	71 e0       	ldi	r23, 0x01	; 1
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 c2 23 	call	0x4784	; 0x4784 <delay>
    1900:	ce 01       	movw	r24, r28
    1902:	c5 df       	rcall	.-118    	; 0x188e <_ZN15Adafruit_BME28020isReadingCalibrationEv>
    1904:	88 23       	and	r24, r24
    1906:	29 f0       	breq	.+10     	; 0x1912 <_ZN15Adafruit_BME2804initEv+0x7c>
    1908:	64 e6       	ldi	r22, 0x64	; 100
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	f5 cf       	rjmp	.-22     	; 0x18fc <_ZN15Adafruit_BME2804initEv+0x66>
    1912:	ce 01       	movw	r24, r28
    1914:	44 df       	rcall	.-376    	; 0x179e <_ZN15Adafruit_BME28016readCoefficientsEv>
    1916:	c1 2c       	mov	r12, r1
    1918:	e1 2c       	mov	r14, r1
    191a:	05 e0       	ldi	r16, 0x05	; 5
    191c:	25 e0       	ldi	r18, 0x05	; 5
    191e:	45 e0       	ldi	r20, 0x05	; 5
    1920:	63 e0       	ldi	r22, 0x03	; 3
    1922:	ce 01       	movw	r24, r28
    1924:	7b dd       	rcall	.-1290   	; 0x141c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    1926:	64 e6       	ldi	r22, 0x64	; 100
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 c2 23 	call	0x4784	; 0x4784 <delay>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <_ZN15Adafruit_BME2804initEv+0xa2>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	0f 91       	pop	r16
    193e:	ef 90       	pop	r14
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret

00001944 <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
    1944:	27 e7       	ldi	r18, 0x77	; 119
    1946:	fc 01       	movw	r30, r24
    1948:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
    194a:	24 e7       	ldi	r18, 0x74	; 116
    194c:	37 e0       	ldi	r19, 0x07	; 7
    194e:	31 83       	std	Z+1, r19	; 0x01
    1950:	20 83       	st	Z, r18
	return init();
    1952:	a1 cf       	rjmp	.-190    	; 0x1896 <_ZN15Adafruit_BME2804initEv>

00001954 <_ZN15Adafruit_BME28015readTemperatureEv>:
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
    1954:	8f 92       	push	r8
    1956:	9f 92       	push	r9
    1958:	af 92       	push	r10
    195a:	bf 92       	push	r11
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	ec 01       	movw	r28, r24
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    196e:	6a ef       	ldi	r22, 0xFA	; 250
    1970:	71 de       	rcall	.-798    	; 0x1654 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
    1972:	61 15       	cp	r22, r1
    1974:	71 05       	cpc	r23, r1
    1976:	20 e8       	ldi	r18, 0x80	; 128
    1978:	82 07       	cpc	r24, r18
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <_ZN15Adafruit_BME28015readTemperatureEv+0x2c>
    197e:	6f c0       	rjmp	.+222    	; 0x1a5e <_ZN15Adafruit_BME28015readTemperatureEv+0x10a>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
    1980:	0f 85       	ldd	r16, Y+15	; 0x0f
    1982:	18 89       	ldd	r17, Y+16	; 0x10
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
    1988:	c7 2e       	mov	r12, r23
    198a:	d8 2e       	mov	r13, r24
    198c:	e9 2e       	mov	r14, r25
    198e:	ff 24       	eor	r15, r15
    1990:	e7 fc       	sbrc	r14, 7
    1992:	fa 94       	dec	r15
    1994:	c0 1a       	sub	r12, r16
    1996:	d1 0a       	sbc	r13, r17
    1998:	e2 0a       	sbc	r14, r18
    199a:	f3 0a       	sbc	r15, r19
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	57 e0       	ldi	r21, 0x07	; 7
    19a2:	b5 95       	asr	r27
    19a4:	a7 95       	ror	r26
    19a6:	97 95       	ror	r25
    19a8:	87 95       	ror	r24
    19aa:	5a 95       	dec	r21
    19ac:	d1 f7       	brne	.-12     	; 0x19a2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    19ae:	00 0f       	add	r16, r16
    19b0:	11 1f       	adc	r17, r17
    19b2:	22 1f       	adc	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	4c 01       	movw	r8, r24
    19b8:	5d 01       	movw	r10, r26
    19ba:	80 1a       	sub	r8, r16
    19bc:	91 0a       	sbc	r9, r17
    19be:	a2 0a       	sbc	r10, r18
    19c0:	b3 0a       	sbc	r11, r19
    19c2:	a5 01       	movw	r20, r10
    19c4:	94 01       	movw	r18, r8
    19c6:	a9 89       	ldd	r26, Y+17	; 0x11
    19c8:	ba 89       	ldd	r27, Y+18	; 0x12
    19ca:	0e 94 0b 34 	call	0x6816	; 0x6816 <__mulshisi3>
    19ce:	4b 01       	movw	r8, r22
    19d0:	5c 01       	movw	r10, r24
    19d2:	7b e0       	ldi	r23, 0x0B	; 11
    19d4:	b5 94       	asr	r11
    19d6:	a7 94       	ror	r10
    19d8:	97 94       	ror	r9
    19da:	87 94       	ror	r8
    19dc:	7a 95       	dec	r23
    19de:	d1 f7       	brne	.-12     	; 0x19d4 <_ZN15Adafruit_BME28015readTemperatureEv+0x80>
    19e0:	a7 01       	movw	r20, r14
    19e2:	96 01       	movw	r18, r12
    19e4:	c7 01       	movw	r24, r14
    19e6:	b6 01       	movw	r22, r12
    19e8:	0e 94 99 33 	call	0x6732	; 0x6732 <__mulsi3>
    19ec:	9b 01       	movw	r18, r22
    19ee:	ac 01       	movw	r20, r24
    19f0:	ec e0       	ldi	r30, 0x0C	; 12
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	37 95       	ror	r19
    19f8:	27 95       	ror	r18
    19fa:	ea 95       	dec	r30
    19fc:	d1 f7       	brne	.-12     	; 0x19f2 <_ZN15Adafruit_BME28015readTemperatureEv+0x9e>
    19fe:	ab 89       	ldd	r26, Y+19	; 0x13
    1a00:	bc 89       	ldd	r27, Y+20	; 0x14
    1a02:	0e 94 0b 34 	call	0x6816	; 0x6816 <__mulshisi3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	fe e0       	ldi	r31, 0x0E	; 14
    1a0c:	b5 95       	asr	r27
    1a0e:	a7 95       	ror	r26
    1a10:	97 95       	ror	r25
    1a12:	87 95       	ror	r24
    1a14:	fa 95       	dec	r31
    1a16:	d1 f7       	brne	.-12     	; 0x1a0c <_ZN15Adafruit_BME28015readTemperatureEv+0xb8>
    1a18:	a5 01       	movw	r20, r10
    1a1a:	94 01       	movw	r18, r8
    1a1c:	28 0f       	add	r18, r24
    1a1e:	39 1f       	adc	r19, r25
    1a20:	4a 1f       	adc	r20, r26
    1a22:	5b 1f       	adc	r21, r27
    1a24:	2f 83       	std	Y+7, r18	; 0x07
    1a26:	38 87       	std	Y+8, r19	; 0x08
    1a28:	49 87       	std	Y+9, r20	; 0x09
    1a2a:	5a 87       	std	Y+10, r21	; 0x0a

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
    1a2c:	a5 e0       	ldi	r26, 0x05	; 5
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	80 58       	subi	r24, 0x80	; 128
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	af 4f       	sbci	r26, 0xFF	; 255
    1a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a40:	69 2f       	mov	r22, r25
    1a42:	7a 2f       	mov	r23, r26
    1a44:	8b 2f       	mov	r24, r27
    1a46:	99 27       	eor	r25, r25
    1a48:	87 fd       	sbrc	r24, 7
    1a4a:	9a 95       	dec	r25
    1a4c:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__floatsisf>
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	48 ec       	ldi	r20, 0xC8	; 200
    1a56:	52 e4       	ldi	r21, 0x42	; 66
    1a58:	0e 94 8e 1a 	call	0x351c	; 0x351c <__divsf3>
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <_ZN15Adafruit_BME28015readTemperatureEv+0x112>
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	80 ec       	ldi	r24, 0xC0	; 192
    1a64:	9f e7       	ldi	r25, 0x7F	; 127

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	df 90       	pop	r13
    1a74:	cf 90       	pop	r12
    1a76:	bf 90       	pop	r11
    1a78:	af 90       	pop	r10
    1a7a:	9f 90       	pop	r9
    1a7c:	8f 90       	pop	r8
    1a7e:	08 95       	ret

00001a80 <_ZN15Adafruit_BME28012readPressureEv>:
/**************************************************************************/
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
    1a80:	2f 92       	push	r2
    1a82:	3f 92       	push	r3
    1a84:	4f 92       	push	r4
    1a86:	5f 92       	push	r5
    1a88:	6f 92       	push	r6
    1a8a:	7f 92       	push	r7
    1a8c:	8f 92       	push	r8
    1a8e:	9f 92       	push	r9
    1a90:	af 92       	push	r10
    1a92:	bf 92       	push	r11
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	6a 97       	sbiw	r28, 0x1a	; 26
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab6:	89 8f       	std	Y+25, r24	; 0x19
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
    1ab8:	4d df       	rcall	.-358    	; 0x1954 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    1aba:	67 ef       	ldi	r22, 0xF7	; 247
    1abc:	89 8d       	ldd	r24, Y+25	; 0x19
    1abe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ac0:	c9 dd       	rcall	.-1134   	; 0x1654 <_ZN15Adafruit_BME2806read24Eh>
    1ac2:	6d 87       	std	Y+13, r22	; 0x0d
    1ac4:	7e 87       	std	Y+14, r23	; 0x0e
    1ac6:	8f 87       	std	Y+15, r24	; 0x0f
    1ac8:	98 8b       	std	Y+16, r25	; 0x10
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
    1aca:	61 15       	cp	r22, r1
    1acc:	71 05       	cpc	r23, r1
    1ace:	80 48       	sbci	r24, 0x80	; 128
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <_ZN15Adafruit_BME28012readPressureEv+0x56>
    1ad4:	b3 c1       	rjmp	.+870    	; 0x1e3c <_ZN15Adafruit_BME28012readPressureEv+0x3bc>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    1ad6:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ad8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ada:	87 81       	ldd	r24, Z+7	; 0x07
    1adc:	90 85       	ldd	r25, Z+8	; 0x08
    1ade:	a1 85       	ldd	r26, Z+9	; 0x09
    1ae0:	b2 85       	ldd	r27, Z+10	; 0x0a
    1ae2:	6c 01       	movw	r12, r24
    1ae4:	7d 01       	movw	r14, r26
    1ae6:	ff 0c       	add	r15, r15
    1ae8:	cc 08       	sbc	r12, r12
    1aea:	dc 2c       	mov	r13, r12
    1aec:	76 01       	movw	r14, r12
    1aee:	9c 01       	movw	r18, r24
    1af0:	ad 01       	movw	r20, r26
    1af2:	6c 2d       	mov	r22, r12
    1af4:	7c 2d       	mov	r23, r12
    1af6:	8c 2d       	mov	r24, r12
    1af8:	9c 2d       	mov	r25, r12
    1afa:	34 5f       	subi	r19, 0xF4	; 244
    1afc:	41 40       	sbci	r20, 0x01	; 1
    1afe:	51 09       	sbc	r21, r1
    1b00:	61 09       	sbc	r22, r1
    1b02:	71 09       	sbc	r23, r1
    1b04:	81 09       	sbc	r24, r1
    1b06:	91 09       	sbc	r25, r1
    1b08:	29 83       	std	Y+1, r18	; 0x01
    1b0a:	3a 83       	std	Y+2, r19	; 0x02
    1b0c:	4b 83       	std	Y+3, r20	; 0x03
    1b0e:	5c 83       	std	Y+4, r21	; 0x04
    1b10:	6d 83       	std	Y+5, r22	; 0x05
    1b12:	7e 83       	std	Y+6, r23	; 0x06
    1b14:	8f 83       	std	Y+7, r24	; 0x07
    1b16:	98 87       	std	Y+8, r25	; 0x08
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    1b18:	59 01       	movw	r10, r18
    1b1a:	6a 01       	movw	r12, r20
    1b1c:	7b 01       	movw	r14, r22
    1b1e:	8c 01       	movw	r16, r24
    1b20:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1b24:	29 87       	std	Y+9, r18	; 0x09
    1b26:	3a 87       	std	Y+10, r19	; 0x0a
    1b28:	4b 87       	std	Y+11, r20	; 0x0b
    1b2a:	5c 87       	std	Y+12, r21	; 0x0c
    1b2c:	6d 8b       	std	Y+21, r22	; 0x15
    1b2e:	7e 8b       	std	Y+22, r23	; 0x16
    1b30:	8f 8b       	std	Y+23, r24	; 0x17
    1b32:	98 8f       	std	Y+24, r25	; 0x18
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    1b34:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b36:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b38:	58 96       	adiw	r26, 0x18	; 24
    1b3a:	3c 91       	ld	r19, X
    1b3c:	58 97       	sbiw	r26, 0x18	; 24
    1b3e:	57 96       	adiw	r26, 0x17	; 23
    1b40:	2c 91       	ld	r18, X
    1b42:	93 2f       	mov	r25, r19
    1b44:	99 0f       	add	r25, r25
    1b46:	99 0b       	sbc	r25, r25
    1b48:	49 2f       	mov	r20, r25
    1b4a:	59 2f       	mov	r21, r25
    1b4c:	69 2f       	mov	r22, r25
    1b4e:	79 2f       	mov	r23, r25
    1b50:	89 2f       	mov	r24, r25
    1b52:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1b56:	0c e0       	ldi	r16, 0x0C	; 12
    1b58:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__ashldi3>
    1b5c:	72 2e       	mov	r7, r18
    1b5e:	83 2e       	mov	r8, r19
    1b60:	94 2e       	mov	r9, r20
    1b62:	25 2e       	mov	r2, r21
    1b64:	36 2e       	mov	r3, r22
    1b66:	67 2e       	mov	r6, r23
    1b68:	58 2e       	mov	r5, r24
    1b6a:	49 2e       	mov	r4, r25
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
    1b6c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b6e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b70:	32 8d       	ldd	r19, Z+26	; 0x1a
    1b72:	21 8d       	ldd	r18, Z+25	; 0x19
    1b74:	93 2f       	mov	r25, r19
    1b76:	99 0f       	add	r25, r25
    1b78:	99 0b       	sbc	r25, r25
    1b7a:	a9 84       	ldd	r10, Y+9	; 0x09
    1b7c:	ba 84       	ldd	r11, Y+10	; 0x0a
    1b7e:	cb 84       	ldd	r12, Y+11	; 0x0b
    1b80:	dc 84       	ldd	r13, Y+12	; 0x0c
    1b82:	ed 88       	ldd	r14, Y+21	; 0x15
    1b84:	fe 88       	ldd	r15, Y+22	; 0x16
    1b86:	0f 89       	ldd	r16, Y+23	; 0x17
    1b88:	18 8d       	ldd	r17, Y+24	; 0x18
    1b8a:	49 2f       	mov	r20, r25
    1b8c:	59 2f       	mov	r21, r25
    1b8e:	69 2f       	mov	r22, r25
    1b90:	79 2f       	mov	r23, r25
    1b92:	89 2f       	mov	r24, r25
    1b94:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1b98:	08 e0       	ldi	r16, 0x08	; 8
    1b9a:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__ashrdi3>
    1b9e:	a7 2c       	mov	r10, r7
    1ba0:	b8 2c       	mov	r11, r8
    1ba2:	c9 2c       	mov	r12, r9
    1ba4:	d2 2c       	mov	r13, r2
    1ba6:	e3 2c       	mov	r14, r3
    1ba8:	f6 2c       	mov	r15, r6
    1baa:	05 2d       	mov	r16, r5
    1bac:	14 2d       	mov	r17, r4
    1bae:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <__adddi3>
    1bb2:	70 58       	subi	r23, 0x80	; 128
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bba:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bbc:	55 96       	adiw	r26, 0x15	; 21
    1bbe:	2d 90       	ld	r2, X+
    1bc0:	3c 90       	ld	r3, X
    1bc2:	56 97       	sbiw	r26, 0x16	; 22
    1bc4:	51 01       	movw	r10, r2
    1bc6:	c1 2c       	mov	r12, r1
    1bc8:	d1 2c       	mov	r13, r1
    1bca:	e1 2c       	mov	r14, r1
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	00 e0       	ldi	r16, 0x00	; 0
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1bd6:	01 e2       	ldi	r16, 0x21	; 33
    1bd8:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__ashrdi3>
    1bdc:	32 2e       	mov	r3, r18
    1bde:	23 2e       	mov	r2, r19
    1be0:	49 8b       	std	Y+17, r20	; 0x11
    1be2:	5a 8b       	std	Y+18, r21	; 0x12
    1be4:	6b 8b       	std	Y+19, r22	; 0x13
    1be6:	47 2e       	mov	r4, r23
    1be8:	58 2e       	mov	r5, r24
    1bea:	9c 8b       	std	Y+20, r25	; 0x14

    if (var1 == 0) {
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <__cmpdi2_s8>
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <_ZN15Adafruit_BME28012readPressureEv+0x176>
    1bf4:	28 c1       	rjmp	.+592    	; 0x1e46 <_ZN15Adafruit_BME28012readPressureEv+0x3c6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    1bf6:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bf8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bfa:	30 a1       	ldd	r19, Z+32	; 0x20
    1bfc:	27 8d       	ldd	r18, Z+31	; 0x1f
    1bfe:	93 2f       	mov	r25, r19
    1c00:	99 0f       	add	r25, r25
    1c02:	99 0b       	sbc	r25, r25
    1c04:	a9 84       	ldd	r10, Y+9	; 0x09
    1c06:	ba 84       	ldd	r11, Y+10	; 0x0a
    1c08:	cb 84       	ldd	r12, Y+11	; 0x0b
    1c0a:	dc 84       	ldd	r13, Y+12	; 0x0c
    1c0c:	ed 88       	ldd	r14, Y+21	; 0x15
    1c0e:	fe 88       	ldd	r15, Y+22	; 0x16
    1c10:	0f 89       	ldd	r16, Y+23	; 0x17
    1c12:	18 8d       	ldd	r17, Y+24	; 0x18
    1c14:	49 2f       	mov	r20, r25
    1c16:	59 2f       	mov	r21, r25
    1c18:	69 2f       	mov	r22, r25
    1c1a:	79 2f       	mov	r23, r25
    1c1c:	89 2f       	mov	r24, r25
    1c1e:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1c22:	29 87       	std	Y+9, r18	; 0x09
    1c24:	3a 87       	std	Y+10, r19	; 0x0a
    1c26:	4b 87       	std	Y+11, r20	; 0x0b
    1c28:	75 2e       	mov	r7, r21
    1c2a:	4b 01       	movw	r8, r22
    1c2c:	8c 87       	std	Y+12, r24	; 0x0c
    1c2e:	69 2e       	mov	r6, r25
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    1c30:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c32:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c34:	5e 96       	adiw	r26, 0x1e	; 30
    1c36:	3c 91       	ld	r19, X
    1c38:	5e 97       	sbiw	r26, 0x1e	; 30
    1c3a:	5d 96       	adiw	r26, 0x1d	; 29
    1c3c:	2c 91       	ld	r18, X
    1c3e:	93 2f       	mov	r25, r19
    1c40:	99 0f       	add	r25, r25
    1c42:	99 0b       	sbc	r25, r25
    1c44:	a9 80       	ldd	r10, Y+1	; 0x01
    1c46:	ba 80       	ldd	r11, Y+2	; 0x02
    1c48:	cb 80       	ldd	r12, Y+3	; 0x03
    1c4a:	dc 80       	ldd	r13, Y+4	; 0x04
    1c4c:	ed 80       	ldd	r14, Y+5	; 0x05
    1c4e:	fe 80       	ldd	r15, Y+6	; 0x06
    1c50:	0f 81       	ldd	r16, Y+7	; 0x07
    1c52:	18 85       	ldd	r17, Y+8	; 0x08
    1c54:	49 2f       	mov	r20, r25
    1c56:	59 2f       	mov	r21, r25
    1c58:	69 2f       	mov	r22, r25
    1c5a:	79 2f       	mov	r23, r25
    1c5c:	89 2f       	mov	r24, r25
    1c5e:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1c62:	01 e1       	ldi	r16, 0x11	; 17
    1c64:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__ashldi3>
    1c68:	a9 84       	ldd	r10, Y+9	; 0x09
    1c6a:	ba 84       	ldd	r11, Y+10	; 0x0a
    1c6c:	cb 84       	ldd	r12, Y+11	; 0x0b
    1c6e:	d7 2c       	mov	r13, r7
    1c70:	74 01       	movw	r14, r8
    1c72:	0c 85       	ldd	r16, Y+12	; 0x0c
    1c74:	16 2d       	mov	r17, r6
    1c76:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <__adddi3>
    1c7a:	59 01       	movw	r10, r18
    1c7c:	6a 01       	movw	r12, r20
    1c7e:	7b 01       	movw	r14, r22
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	19 2f       	mov	r17, r25

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    1c84:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c86:	5e 85       	ldd	r21, Y+14	; 0x0e
    1c88:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8a:	78 89       	ldd	r23, Y+16	; 0x10
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	75 95       	asr	r23
    1c90:	67 95       	ror	r22
    1c92:	57 95       	ror	r21
    1c94:	47 95       	ror	r20
    1c96:	8a 95       	dec	r24
    1c98:	d1 f7       	brne	.-12     	; 0x1c8e <_ZN15Adafruit_BME28012readPressureEv+0x20e>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e1       	ldi	r26, 0x10	; 16
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	84 1b       	sub	r24, r20
    1ca4:	95 0b       	sbc	r25, r21
    1ca6:	a6 0b       	sbc	r26, r22
    1ca8:	b7 0b       	sbc	r27, r23
    1caa:	3c 01       	movw	r6, r24
    1cac:	4d 01       	movw	r8, r26
    1cae:	99 0c       	add	r9, r9
    1cb0:	66 08       	sbc	r6, r6
    1cb2:	76 2c       	mov	r7, r6
    1cb4:	43 01       	movw	r8, r6
    1cb6:	9c 01       	movw	r18, r24
    1cb8:	ad 01       	movw	r20, r26
    1cba:	66 2d       	mov	r22, r6
    1cbc:	76 2d       	mov	r23, r6
    1cbe:	86 2d       	mov	r24, r6
    1cc0:	96 2d       	mov	r25, r6
    1cc2:	0f e1       	ldi	r16, 0x1F	; 31
    1cc4:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__ashldi3>
    1cc8:	49 01       	movw	r8, r18
    1cca:	3a 01       	movw	r6, r20
    1ccc:	b6 2f       	mov	r27, r22
    1cce:	a7 2f       	mov	r26, r23
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	9b 83       	std	Y+3, r25	; 0x03
    1cd4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1cd6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1cd8:	34 8d       	ldd	r19, Z+28	; 0x1c
    1cda:	23 8d       	ldd	r18, Z+27	; 0x1b
    1cdc:	93 2f       	mov	r25, r19
    1cde:	99 0f       	add	r25, r25
    1ce0:	99 0b       	sbc	r25, r25
    1ce2:	49 2f       	mov	r20, r25
    1ce4:	59 2f       	mov	r21, r25
    1ce6:	69 2f       	mov	r22, r25
    1ce8:	79 2f       	mov	r23, r25
    1cea:	89 2f       	mov	r24, r25
    1cec:	03 e2       	ldi	r16, 0x23	; 35
    1cee:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__ashldi3>
    1cf2:	09 81       	ldd	r16, Y+1	; 0x01
    1cf4:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <__adddi3>
    1cf8:	59 01       	movw	r10, r18
    1cfa:	6a 01       	movw	r12, r20
    1cfc:	7b 01       	movw	r14, r22
    1cfe:	8c 01       	movw	r16, r24
    1d00:	94 01       	movw	r18, r8
    1d02:	a3 01       	movw	r20, r6
    1d04:	6b 2f       	mov	r22, r27
    1d06:	7a 2f       	mov	r23, r26
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <__subdi3>
    1d10:	e5 e3       	ldi	r30, 0x35	; 53
    1d12:	ae 2e       	mov	r10, r30
    1d14:	fc e0       	ldi	r31, 0x0C	; 12
    1d16:	bf 2e       	mov	r11, r31
    1d18:	c1 2c       	mov	r12, r1
    1d1a:	d1 2c       	mov	r13, r1
    1d1c:	e1 2c       	mov	r14, r1
    1d1e:	f1 2c       	mov	r15, r1
    1d20:	00 e0       	ldi	r16, 0x00	; 0
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1d28:	a3 2c       	mov	r10, r3
    1d2a:	b2 2c       	mov	r11, r2
    1d2c:	c9 88       	ldd	r12, Y+17	; 0x11
    1d2e:	da 88       	ldd	r13, Y+18	; 0x12
    1d30:	eb 88       	ldd	r14, Y+19	; 0x13
    1d32:	f4 2c       	mov	r15, r4
    1d34:	05 2d       	mov	r16, r5
    1d36:	1c 89       	ldd	r17, Y+20	; 0x14
    1d38:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__divdi3>
    1d3c:	29 83       	std	Y+1, r18	; 0x01
    1d3e:	3a 83       	std	Y+2, r19	; 0x02
    1d40:	4b 83       	std	Y+3, r20	; 0x03
    1d42:	5c 83       	std	Y+4, r21	; 0x04
    1d44:	6d 83       	std	Y+5, r22	; 0x05
    1d46:	7e 83       	std	Y+6, r23	; 0x06
    1d48:	8f 83       	std	Y+7, r24	; 0x07
    1d4a:	98 87       	std	Y+8, r25	; 0x08
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    1d4c:	0d e0       	ldi	r16, 0x0D	; 13
    1d4e:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__ashrdi3>
    1d52:	92 2e       	mov	r9, r18
    1d54:	83 2e       	mov	r8, r19
    1d56:	74 2e       	mov	r7, r20
    1d58:	65 2e       	mov	r6, r21
    1d5a:	56 2e       	mov	r5, r22
    1d5c:	47 2e       	mov	r4, r23
    1d5e:	38 2e       	mov	r3, r24
    1d60:	29 2e       	mov	r2, r25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    1d62:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d64:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d66:	96 96       	adiw	r26, 0x26	; 38
    1d68:	3c 91       	ld	r19, X
    1d6a:	96 97       	sbiw	r26, 0x26	; 38
    1d6c:	95 96       	adiw	r26, 0x25	; 37
    1d6e:	2c 91       	ld	r18, X
    1d70:	93 2f       	mov	r25, r19
    1d72:	99 0f       	add	r25, r25
    1d74:	99 0b       	sbc	r25, r25
    1d76:	a9 2c       	mov	r10, r9
    1d78:	b8 2c       	mov	r11, r8
    1d7a:	c7 2c       	mov	r12, r7
    1d7c:	d6 2c       	mov	r13, r6
    1d7e:	e5 2c       	mov	r14, r5
    1d80:	f4 2c       	mov	r15, r4
    1d82:	03 2d       	mov	r16, r3
    1d84:	12 2d       	mov	r17, r2
    1d86:	49 2f       	mov	r20, r25
    1d88:	59 2f       	mov	r21, r25
    1d8a:	69 2f       	mov	r22, r25
    1d8c:	79 2f       	mov	r23, r25
    1d8e:	89 2f       	mov	r24, r25
    1d90:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1d94:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1d98:	09 e1       	ldi	r16, 0x19	; 25
    1d9a:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__ashrdi3>
    1d9e:	a9 80       	ldd	r10, Y+1	; 0x01
    1da0:	ba 80       	ldd	r11, Y+2	; 0x02
    1da2:	cb 80       	ldd	r12, Y+3	; 0x03
    1da4:	dc 80       	ldd	r13, Y+4	; 0x04
    1da6:	ed 80       	ldd	r14, Y+5	; 0x05
    1da8:	fe 80       	ldd	r15, Y+6	; 0x06
    1daa:	0f 81       	ldd	r16, Y+7	; 0x07
    1dac:	18 85       	ldd	r17, Y+8	; 0x08
    1dae:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <__adddi3>
    1db2:	19 01       	movw	r2, r18
    1db4:	2a 01       	movw	r4, r20
    1db6:	3b 01       	movw	r6, r22
    1db8:	4c 01       	movw	r8, r24
    1dba:	e9 8d       	ldd	r30, Y+25	; 0x19
    1dbc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dbe:	34 a1       	ldd	r19, Z+36	; 0x24
    1dc0:	23 a1       	ldd	r18, Z+35	; 0x23
    1dc2:	93 2f       	mov	r25, r19
    1dc4:	99 0f       	add	r25, r25
    1dc6:	99 0b       	sbc	r25, r25
    1dc8:	49 2f       	mov	r20, r25
    1dca:	59 2f       	mov	r21, r25
    1dcc:	69 2f       	mov	r22, r25
    1dce:	79 2f       	mov	r23, r25
    1dd0:	89 2f       	mov	r24, r25
    1dd2:	0e 94 11 34 	call	0x6822	; 0x6822 <__muldi3>
    1dd6:	03 e1       	ldi	r16, 0x13	; 19
    1dd8:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__ashrdi3>
    1ddc:	59 01       	movw	r10, r18
    1dde:	6a 01       	movw	r12, r20
    1de0:	7b 01       	movw	r14, r22
    1de2:	8c 01       	movw	r16, r24
    1de4:	91 01       	movw	r18, r2
    1de6:	a2 01       	movw	r20, r4
    1de8:	b3 01       	movw	r22, r6
    1dea:	c4 01       	movw	r24, r8
    1dec:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <__adddi3>
    1df0:	08 e0       	ldi	r16, 0x08	; 8
    1df2:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__ashrdi3>
    1df6:	59 01       	movw	r10, r18
    1df8:	6a 01       	movw	r12, r20
    1dfa:	7b 01       	movw	r14, r22
    1dfc:	e8 2f       	mov	r30, r24
    1dfe:	19 2f       	mov	r17, r25
    return (float)p/256;
    1e00:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e02:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e04:	92 96       	adiw	r26, 0x22	; 34
    1e06:	3c 91       	ld	r19, X
    1e08:	92 97       	sbiw	r26, 0x22	; 34
    1e0a:	91 96       	adiw	r26, 0x21	; 33
    1e0c:	2c 91       	ld	r18, X
    1e0e:	93 2f       	mov	r25, r19
    1e10:	99 0f       	add	r25, r25
    1e12:	99 0b       	sbc	r25, r25
    1e14:	49 2f       	mov	r20, r25
    1e16:	59 2f       	mov	r21, r25
    1e18:	69 2f       	mov	r22, r25
    1e1a:	79 2f       	mov	r23, r25
    1e1c:	89 2f       	mov	r24, r25
    1e1e:	04 e0       	ldi	r16, 0x04	; 4
    1e20:	0e 94 32 35 	call	0x6a64	; 0x6a64 <__ashldi3>
    1e24:	0e 2f       	mov	r16, r30
    1e26:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <__adddi3>
    1e2a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__floatdisf>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5b e3       	ldi	r21, 0x3B	; 59
    1e36:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__mulsf3>
    1e3a:	08 c0       	rjmp	.+16     	; 0x1e4c <_ZN15Adafruit_BME28012readPressureEv+0x3cc>

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	80 ec       	ldi	r24, 0xC0	; 192
    1e42:	9f e7       	ldi	r25, 0x7F	; 127
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <_ZN15Adafruit_BME28012readPressureEv+0x3cc>
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	cb 01       	movw	r24, r22
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
    1e4c:	6a 96       	adiw	r28, 0x1a	; 26
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	bf 90       	pop	r11
    1e6a:	af 90       	pop	r10
    1e6c:	9f 90       	pop	r9
    1e6e:	8f 90       	pop	r8
    1e70:	7f 90       	pop	r7
    1e72:	6f 90       	pop	r6
    1e74:	5f 90       	pop	r5
    1e76:	4f 90       	pop	r4
    1e78:	3f 90       	pop	r3
    1e7a:	2f 90       	pop	r2
    1e7c:	08 95       	ret

00001e7e <_ZN15Adafruit_BME28012readHumidityEv>:
/**************************************************************************/
/*!
    @brief  Returns the humidity from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
    1e7e:	4f 92       	push	r4
    1e80:	5f 92       	push	r5
    1e82:	6f 92       	push	r6
    1e84:	7f 92       	push	r7
    1e86:	8f 92       	push	r8
    1e88:	9f 92       	push	r9
    1e8a:	af 92       	push	r10
    1e8c:	bf 92       	push	r11
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	ec 01       	movw	r28, r24
    readTemperature(); // must be done first to get t_fine
    1e9c:	5b dd       	rcall	.-1354   	; 0x1954 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    1e9e:	6d ef       	ldi	r22, 0xFD	; 253
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	6e db       	rcall	.-2340   	; 0x1580 <_ZN15Adafruit_BME2806read16Eh>
    1ea4:	a0 e0       	ldi	r26, 0x00	; 0
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
    1ea8:	81 15       	cp	r24, r1
    1eaa:	20 e8       	ldi	r18, 0x80	; 128
    1eac:	92 07       	cpc	r25, r18
    1eae:	a1 05       	cpc	r26, r1
    1eb0:	b1 05       	cpc	r27, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <_ZN15Adafruit_BME28012readHumidityEv+0x38>
    1eb4:	cd c0       	rjmp	.+410    	; 0x2050 <_ZN15Adafruit_BME28012readHumidityEv+0x1d2>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
    1eb6:	8f 80       	ldd	r8, Y+7	; 0x07
    1eb8:	98 84       	ldd	r9, Y+8	; 0x08
    1eba:	a9 84       	ldd	r10, Y+9	; 0x09
    1ebc:	ba 84       	ldd	r11, Y+10	; 0x0a
    1ebe:	3c e2       	ldi	r19, 0x2C	; 44
    1ec0:	93 1a       	sub	r9, r19
    1ec2:	31 e0       	ldi	r19, 0x01	; 1
    1ec4:	a3 0a       	sbc	r10, r19
    1ec6:	b1 08       	sbc	r11, r1

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
    1ec8:	3e e0       	ldi	r19, 0x0E	; 14
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	aa 1f       	adc	r26, r26
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	3a 95       	dec	r19
    1ed4:	d1 f7       	brne	.-12     	; 0x1eca <_ZN15Adafruit_BME28012readHumidityEv+0x4c>
    1ed6:	4b a5       	ldd	r20, Y+43	; 0x2b
    1ed8:	5c a5       	ldd	r21, Y+44	; 0x2c
    1eda:	05 2e       	mov	r0, r21
    1edc:	00 0c       	add	r0, r0
    1ede:	66 0b       	sbc	r22, r22
    1ee0:	77 0b       	sbc	r23, r23
    1ee2:	e4 e1       	ldi	r30, 0x14	; 20
    1ee4:	44 0f       	add	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	66 1f       	adc	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	ea 95       	dec	r30
    1eee:	d1 f7       	brne	.-12     	; 0x1ee4 <_ZN15Adafruit_BME28012readHumidityEv+0x66>
    1ef0:	6c 01       	movw	r12, r24
    1ef2:	7d 01       	movw	r14, r26
    1ef4:	c4 1a       	sub	r12, r20
    1ef6:	d5 0a       	sbc	r13, r21
    1ef8:	e6 0a       	sbc	r14, r22
    1efa:	f7 0a       	sbc	r15, r23
    1efc:	ad a5       	ldd	r26, Y+45	; 0x2d
    1efe:	be a5       	ldd	r27, Y+46	; 0x2e
    1f00:	a5 01       	movw	r20, r10
    1f02:	94 01       	movw	r18, r8
    1f04:	0e 94 0b 34 	call	0x6816	; 0x6816 <__mulshisi3>
    1f08:	c6 1a       	sub	r12, r22
    1f0a:	d7 0a       	sbc	r13, r23
    1f0c:	e8 0a       	sbc	r14, r24
    1f0e:	f9 0a       	sbc	r15, r25
    1f10:	40 e4       	ldi	r20, 0x40	; 64
    1f12:	d4 0e       	add	r13, r20
    1f14:	e1 1c       	adc	r14, r1
    1f16:	f1 1c       	adc	r15, r1
    1f18:	ff e0       	ldi	r31, 0x0F	; 15
    1f1a:	f5 94       	asr	r15
    1f1c:	e7 94       	ror	r14
    1f1e:	d7 94       	ror	r13
    1f20:	c7 94       	ror	r12
    1f22:	fa 95       	dec	r31
    1f24:	d1 f7       	brne	.-12     	; 0x1f1a <_ZN15Adafruit_BME28012readHumidityEv+0x9c>
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
    1f26:	aa a5       	ldd	r26, Y+42	; 0x2a
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	a5 01       	movw	r20, r10
    1f2c:	94 01       	movw	r18, r8
    1f2e:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    1f32:	2b 01       	movw	r4, r22
    1f34:	3c 01       	movw	r6, r24
    1f36:	ab e0       	ldi	r26, 0x0B	; 11
    1f38:	75 94       	asr	r7
    1f3a:	67 94       	ror	r6
    1f3c:	57 94       	ror	r5
    1f3e:	47 94       	ror	r4
    1f40:	aa 95       	dec	r26
    1f42:	d1 f7       	brne	.-12     	; 0x1f38 <_ZN15Adafruit_BME28012readHumidityEv+0xba>
    1f44:	50 e8       	ldi	r21, 0x80	; 128
    1f46:	55 0e       	add	r5, r21
    1f48:	61 1c       	adc	r6, r1
    1f4a:	71 1c       	adc	r7, r1
    1f4c:	af a5       	ldd	r26, Y+47	; 0x2f
    1f4e:	0a 2e       	mov	r0, r26
    1f50:	00 0c       	add	r0, r0
    1f52:	bb 0b       	sbc	r27, r27
    1f54:	a5 01       	movw	r20, r10
    1f56:	94 01       	movw	r18, r8
    1f58:	0e 94 0b 34 	call	0x6816	; 0x6816 <__mulshisi3>
    1f5c:	ba e0       	ldi	r27, 0x0A	; 10
    1f5e:	95 95       	asr	r25
    1f60:	87 95       	ror	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	ba 95       	dec	r27
    1f68:	d1 f7       	brne	.-12     	; 0x1f5e <_ZN15Adafruit_BME28012readHumidityEv+0xe0>
    1f6a:	a3 01       	movw	r20, r6
    1f6c:	92 01       	movw	r18, r4
    1f6e:	0e 94 99 33 	call	0x6732	; 0x6732 <__mulsi3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	2a e0       	ldi	r18, 0x0A	; 10
    1f78:	b5 95       	asr	r27
    1f7a:	a7 95       	ror	r26
    1f7c:	97 95       	ror	r25
    1f7e:	87 95       	ror	r24
    1f80:	2a 95       	dec	r18
    1f82:	d1 f7       	brne	.-12     	; 0x1f78 <_ZN15Adafruit_BME28012readHumidityEv+0xfa>
    1f84:	9c 01       	movw	r18, r24
    1f86:	ad 01       	movw	r20, r26
    1f88:	40 5e       	subi	r20, 0xE0	; 224
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	a8 a5       	ldd	r26, Y+40	; 0x28
    1f8e:	b9 a5       	ldd	r27, Y+41	; 0x29
    1f90:	0e 94 0b 34 	call	0x6816	; 0x6816 <__mulshisi3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	90 5e       	subi	r25, 0xE0	; 224
    1f9a:	af 4f       	sbci	r26, 0xFF	; 255
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	3e e0       	ldi	r19, 0x0E	; 14
    1fa4:	95 95       	asr	r25
    1fa6:	87 95       	ror	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	3a 95       	dec	r19
    1fae:	d1 f7       	brne	.-12     	; 0x1fa4 <_ZN15Adafruit_BME28012readHumidityEv+0x126>
    1fb0:	a7 01       	movw	r20, r14
    1fb2:	96 01       	movw	r18, r12
    1fb4:	0e 94 99 33 	call	0x6732	; 0x6732 <__mulsi3>
    1fb8:	6b 01       	movw	r12, r22
    1fba:	7c 01       	movw	r14, r24

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
    1fbc:	4f e0       	ldi	r20, 0x0F	; 15
    1fbe:	95 95       	asr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	77 95       	ror	r23
    1fc4:	67 95       	ror	r22
    1fc6:	4a 95       	dec	r20
    1fc8:	d1 f7       	brne	.-12     	; 0x1fbe <_ZN15Adafruit_BME28012readHumidityEv+0x140>
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
    1fca:	9b 01       	movw	r18, r22
    1fcc:	ac 01       	movw	r20, r24
    1fce:	0e 94 99 33 	call	0x6732	; 0x6732 <__mulsi3>
    1fd2:	9b 01       	movw	r18, r22
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	67 e0       	ldi	r22, 0x07	; 7
    1fd8:	55 95       	asr	r21
    1fda:	47 95       	ror	r20
    1fdc:	37 95       	ror	r19
    1fde:	27 95       	ror	r18
    1fe0:	6a 95       	dec	r22
    1fe2:	d1 f7       	brne	.-12     	; 0x1fd8 <_ZN15Adafruit_BME28012readHumidityEv+0x15a>
    1fe4:	af a1       	ldd	r26, Y+39	; 0x27
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	74 e0       	ldi	r23, 0x04	; 4
    1ff2:	b5 95       	asr	r27
    1ff4:	a7 95       	ror	r26
    1ff6:	97 95       	ror	r25
    1ff8:	87 95       	ror	r24
    1ffa:	7a 95       	dec	r23
    1ffc:	d1 f7       	brne	.-12     	; 0x1ff2 <_ZN15Adafruit_BME28012readHumidityEv+0x174>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    1ffe:	a7 01       	movw	r20, r14
    2000:	96 01       	movw	r18, r12
    2002:	28 1b       	sub	r18, r24
    2004:	39 0b       	sbc	r19, r25
    2006:	4a 0b       	sbc	r20, r26
    2008:	5b 0b       	sbc	r21, r27
    200a:	da 01       	movw	r26, r20
    200c:	c9 01       	movw	r24, r18
    200e:	57 ff       	sbrs	r21, 7
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <_ZN15Adafruit_BME28012readHumidityEv+0x19a>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	dc 01       	movw	r26, r24
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	a1 05       	cpc	r26, r1
    201e:	39 e1       	ldi	r19, 0x19	; 25
    2020:	b3 07       	cpc	r27, r19
    2022:	24 f0       	brlt	.+8      	; 0x202c <_ZN15Adafruit_BME28012readHumidityEv+0x1ae>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b9 e1       	ldi	r27, 0x19	; 25
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	2c e0       	ldi	r18, 0x0C	; 12
    2032:	95 95       	asr	r25
    2034:	87 95       	ror	r24
    2036:	77 95       	ror	r23
    2038:	67 95       	ror	r22
    203a:	2a 95       	dec	r18
    203c:	d1 f7       	brne	.-12     	; 0x2032 <_ZN15Adafruit_BME28012readHumidityEv+0x1b4>
    203e:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__floatsisf>
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5a e3       	ldi	r21, 0x3A	; 58
    204a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__mulsf3>
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <_ZN15Adafruit_BME28012readHumidityEv+0x1da>
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	80 ec       	ldi	r24, 0xC0	; 192
    2056:	9f e7       	ldi	r25, 0x7F	; 127

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
    2060:	df 90       	pop	r13
    2062:	cf 90       	pop	r12
    2064:	bf 90       	pop	r11
    2066:	af 90       	pop	r10
    2068:	9f 90       	pop	r9
    206a:	8f 90       	pop	r8
    206c:	7f 90       	pop	r7
    206e:	6f 90       	pop	r6
    2070:	5f 90       	pop	r5
    2072:	4f 90       	pop	r4
    2074:	08 95       	ret

00002076 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @param  atmospheric   Atmospheric pressure in hPa
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	6a 01       	movw	r12, r20
    2080:	7b 01       	movw	r14, r22

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    2082:	fe dc       	rcall	.-1540   	; 0x1a80 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	48 ec       	ldi	r20, 0xC8	; 200
    208a:	52 e4       	ldi	r21, 0x42	; 66
    208c:	0e 94 8e 1a 	call	0x351c	; 0x351c <__divsf3>
    2090:	a7 01       	movw	r20, r14
    2092:	96 01       	movw	r18, r12
    2094:	0e 94 8e 1a 	call	0x351c	; 0x351c <__divsf3>
    2098:	21 e0       	ldi	r18, 0x01	; 1
    209a:	3e ed       	ldi	r19, 0xDE	; 222
    209c:	42 e4       	ldi	r20, 0x42	; 66
    209e:	5e e3       	ldi	r21, 0x3E	; 62
    20a0:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <pow>
    20a4:	9b 01       	movw	r18, r22
    20a6:	ac 01       	movw	r20, r24
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	80 e8       	ldi	r24, 0x80	; 128
    20ae:	9f e3       	ldi	r25, 0x3F	; 63
    20b0:	0e 94 25 1a 	call	0x344a	; 0x344a <__subsf3>
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3a e2       	ldi	r19, 0x2A	; 42
    20b8:	4d e2       	ldi	r20, 0x2D	; 45
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__mulsf3>
}
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	08 95       	ret

000020ca <_ZN24Adafruit_TSL2561_Unified15enableAutoRangeEb>:
/**************************************************************************/
boolean Adafruit_TSL2561_Unified::begin(TwoWire *theWire)
{
  _i2c = theWire;
  _i2c-> begin();
  return init();
    20ca:	fc 01       	movw	r30, r24
    20cc:	67 83       	std	Z+7, r22	; 0x07
    20ce:	08 95       	ret

000020d0 <_ZN24Adafruit_TSL2561_UnifiedD1Ev>:
    20d0:	08 95       	ret

000020d2 <_ZN24Adafruit_TSL2561_Unified9getSensorEP8sensor_t>:
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	8c 01       	movw	r16, r24
    20dc:	eb 01       	movw	r28, r22
    20de:	88 e2       	ldi	r24, 0x28	; 40
    20e0:	fb 01       	movw	r30, r22
    20e2:	11 92       	st	Z+, r1
    20e4:	8a 95       	dec	r24
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <_ZN24Adafruit_TSL2561_Unified9getSensorEP8sensor_t+0x10>
    20e8:	4b e0       	ldi	r20, 0x0B	; 11
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	69 e7       	ldi	r22, 0x79	; 121
    20ee:	75 e0       	ldi	r23, 0x05	; 5
    20f0:	ce 01       	movw	r24, r28
    20f2:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <strncpy>
    20f6:	1b 86       	std	Y+11, r1	; 0x0b
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e0       	ldi	r26, 0x00	; 0
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	8c 87       	std	Y+12, r24	; 0x0c
    2102:	9d 87       	std	Y+13, r25	; 0x0d
    2104:	ae 87       	std	Y+14, r26	; 0x0e
    2106:	bf 87       	std	Y+15, r27	; 0x0f
    2108:	f8 01       	movw	r30, r16
    210a:	82 85       	ldd	r24, Z+10	; 0x0a
    210c:	93 85       	ldd	r25, Z+11	; 0x0b
    210e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2110:	b5 85       	ldd	r27, Z+13	; 0x0d
    2112:	88 8b       	std	Y+16, r24	; 0x10
    2114:	99 8b       	std	Y+17, r25	; 0x11
    2116:	aa 8b       	std	Y+18, r26	; 0x12
    2118:	bb 8b       	std	Y+19, r27	; 0x13
    211a:	85 e0       	ldi	r24, 0x05	; 5
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	8c 8b       	std	Y+20, r24	; 0x14
    2124:	9d 8b       	std	Y+21, r25	; 0x15
    2126:	ae 8b       	std	Y+22, r26	; 0x16
    2128:	bf 8b       	std	Y+23, r27	; 0x17
    212a:	1c a2       	std	Y+36, r1	; 0x24
    212c:	1d a2       	std	Y+37, r1	; 0x25
    212e:	1e a2       	std	Y+38, r1	; 0x26
    2130:	1f a2       	std	Y+39, r1	; 0x27
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 ed       	ldi	r25, 0xD0	; 208
    2136:	a4 e8       	ldi	r26, 0x84	; 132
    2138:	b6 e4       	ldi	r27, 0x46	; 70
    213a:	88 8f       	std	Y+24, r24	; 0x18
    213c:	99 8f       	std	Y+25, r25	; 0x19
    213e:	aa 8f       	std	Y+26, r26	; 0x1a
    2140:	bb 8f       	std	Y+27, r27	; 0x1b
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 e8       	ldi	r26, 0x80	; 128
    2148:	bf e3       	ldi	r27, 0x3F	; 63
    214a:	8c 8f       	std	Y+28, r24	; 0x1c
    214c:	9d 8f       	std	Y+29, r25	; 0x1d
    214e:	ae 8f       	std	Y+30, r26	; 0x1e
    2150:	bf 8f       	std	Y+31, r27	; 0x1f
    2152:	88 a3       	std	Y+32, r24	; 0x20
    2154:	99 a3       	std	Y+33, r25	; 0x21
    2156:	aa a3       	std	Y+34, r26	; 0x22
    2158:	bb a3       	std	Y+35, r27	; 0x23
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <_ZN24Adafruit_TSL2561_UnifiedD0Ev>:
    2164:	0c 94 d5 1f 	jmp	0x3faa	; 0x3faa <_ZdlPv>

00002168 <_ZN24Adafruit_TSL2561_UnifiedC1Ehl>:
    2168:	fc 01       	movw	r30, r24
    216a:	85 e8       	ldi	r24, 0x85	; 133
    216c:	95 e0       	ldi	r25, 0x05	; 5
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
    2172:	65 83       	std	Z+5, r22	; 0x05
    2174:	16 82       	std	Z+6, r1	; 0x06
    2176:	17 82       	std	Z+7, r1	; 0x07
    2178:	10 86       	std	Z+8, r1	; 0x08
    217a:	11 86       	std	Z+9, r1	; 0x09
    217c:	22 87       	std	Z+10, r18	; 0x0a
    217e:	33 87       	std	Z+11, r19	; 0x0b
    2180:	44 87       	std	Z+12, r20	; 0x0c
    2182:	55 87       	std	Z+13, r21	; 0x0d
    2184:	08 95       	ret

00002186 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj>:
    2186:	8f 92       	push	r8
    2188:	9f 92       	push	r9
    218a:	af 92       	push	r10
    218c:	bf 92       	push	r11
    218e:	cf 92       	push	r12
    2190:	df 92       	push	r13
    2192:	ef 92       	push	r14
    2194:	ff 92       	push	r15
    2196:	dc 01       	movw	r26, r24
    2198:	fa 01       	movw	r30, r20
    219a:	18 96       	adiw	r26, 0x08	; 8
    219c:	9c 91       	ld	r25, X
    219e:	18 97       	sbiw	r26, 0x08	; 8
    21a0:	99 23       	and	r25, r25
    21a2:	41 f0       	breq	.+16     	; 0x21b4 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x2e>
    21a4:	91 30       	cpi	r25, 0x01	; 1
    21a6:	19 f4       	brne	.+6      	; 0x21ae <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x28>
    21a8:	28 e8       	ldi	r18, 0x88	; 136
    21aa:	30 e9       	ldi	r19, 0x90	; 144
    21ac:	05 c0       	rjmp	.+10     	; 0x21b8 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x32>
    21ae:	28 ee       	ldi	r18, 0xE8	; 232
    21b0:	3d ef       	ldi	r19, 0xFD	; 253
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x32>
    21b4:	24 e2       	ldi	r18, 0x24	; 36
    21b6:	33 e1       	ldi	r19, 0x13	; 19
    21b8:	26 17       	cp	r18, r22
    21ba:	37 07       	cpc	r19, r23
    21bc:	08 f4       	brcc	.+2      	; 0x21c0 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x3a>
    21be:	cb c0       	rjmp	.+406    	; 0x2356 <__stack+0x157>
    21c0:	2e 17       	cp	r18, r30
    21c2:	3f 07       	cpc	r19, r31
    21c4:	08 f4       	brcc	.+2      	; 0x21c8 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x42>
    21c6:	c7 c0       	rjmp	.+398    	; 0x2356 <__stack+0x157>
    21c8:	99 23       	and	r25, r25
    21ca:	79 f0       	breq	.+30     	; 0x21ea <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x64>
    21cc:	91 30       	cpi	r25, 0x01	; 1
    21ce:	39 f4       	brne	.+14     	; 0x21de <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x58>
    21d0:	27 ee       	ldi	r18, 0xE7	; 231
    21d2:	82 2e       	mov	r8, r18
    21d4:	2f e0       	ldi	r18, 0x0F	; 15
    21d6:	92 2e       	mov	r9, r18
    21d8:	a1 2c       	mov	r10, r1
    21da:	b1 2c       	mov	r11, r1
    21dc:	0c c0       	rjmp	.+24     	; 0x21f6 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x70>
    21de:	81 2c       	mov	r8, r1
    21e0:	94 e0       	ldi	r25, 0x04	; 4
    21e2:	99 2e       	mov	r9, r25
    21e4:	a1 2c       	mov	r10, r1
    21e6:	b1 2c       	mov	r11, r1
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj+0x70>
    21ea:	87 e1       	ldi	r24, 0x17	; 23
    21ec:	88 2e       	mov	r8, r24
    21ee:	85 e7       	ldi	r24, 0x75	; 117
    21f0:	98 2e       	mov	r9, r24
    21f2:	a1 2c       	mov	r10, r1
    21f4:	b1 2c       	mov	r11, r1
    21f6:	19 96       	adiw	r26, 0x09	; 9
    21f8:	8c 91       	ld	r24, X
    21fa:	81 11       	cpse	r24, r1
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <__stack+0xd>
    21fe:	a4 e0       	ldi	r26, 0x04	; 4
    2200:	88 0c       	add	r8, r8
    2202:	99 1c       	adc	r9, r9
    2204:	aa 1c       	adc	r10, r10
    2206:	bb 1c       	adc	r11, r11
    2208:	aa 95       	dec	r26
    220a:	d1 f7       	brne	.-12     	; 0x2200 <__stack+0x1>
    220c:	db 01       	movw	r26, r22
    220e:	a5 01       	movw	r20, r10
    2210:	94 01       	movw	r18, r8
    2212:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    2216:	6b 01       	movw	r12, r22
    2218:	7c 01       	movw	r14, r24
    221a:	6a e0       	ldi	r22, 0x0A	; 10
    221c:	f6 94       	lsr	r15
    221e:	e7 94       	ror	r14
    2220:	d7 94       	ror	r13
    2222:	c7 94       	ror	r12
    2224:	6a 95       	dec	r22
    2226:	d1 f7       	brne	.-12     	; 0x221c <__stack+0x1d>
    2228:	df 01       	movw	r26, r30
    222a:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    222e:	4b 01       	movw	r8, r22
    2230:	5c 01       	movw	r10, r24
    2232:	7a e0       	ldi	r23, 0x0A	; 10
    2234:	b6 94       	lsr	r11
    2236:	a7 94       	ror	r10
    2238:	97 94       	ror	r9
    223a:	87 94       	ror	r8
    223c:	7a 95       	dec	r23
    223e:	d1 f7       	brne	.-12     	; 0x2234 <__stack+0x35>
    2240:	c1 14       	cp	r12, r1
    2242:	d1 04       	cpc	r13, r1
    2244:	e1 04       	cpc	r14, r1
    2246:	f1 04       	cpc	r15, r1
    2248:	71 f0       	breq	.+28     	; 0x2266 <__stack+0x67>
    224a:	c5 01       	movw	r24, r10
    224c:	b4 01       	movw	r22, r8
    224e:	4a e0       	ldi	r20, 0x0A	; 10
    2250:	66 0f       	add	r22, r22
    2252:	77 1f       	adc	r23, r23
    2254:	88 1f       	adc	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	4a 95       	dec	r20
    225a:	d1 f7       	brne	.-12     	; 0x2250 <__stack+0x51>
    225c:	a7 01       	movw	r20, r14
    225e:	96 01       	movw	r18, r12
    2260:	0e 94 c8 33 	call	0x6790	; 0x6790 <__udivmodsi4>
    2264:	03 c0       	rjmp	.+6      	; 0x226c <__stack+0x6d>
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	da 01       	movw	r26, r20
    226e:	c9 01       	movw	r24, r18
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	a1 1d       	adc	r26, r1
    2274:	b1 1d       	adc	r27, r1
    2276:	b6 95       	lsr	r27
    2278:	a7 95       	ror	r26
    227a:	97 95       	ror	r25
    227c:	87 95       	ror	r24
    227e:	81 34       	cpi	r24, 0x41	; 65
    2280:	91 05       	cpc	r25, r1
    2282:	a1 05       	cpc	r26, r1
    2284:	b1 05       	cpc	r27, r1
    2286:	30 f1       	brcs	.+76     	; 0x22d4 <__stack+0xd5>
    2288:	81 38       	cpi	r24, 0x81	; 129
    228a:	91 05       	cpc	r25, r1
    228c:	a1 05       	cpc	r26, r1
    228e:	b1 05       	cpc	r27, r1
    2290:	30 f1       	brcs	.+76     	; 0x22de <__stack+0xdf>
    2292:	81 3c       	cpi	r24, 0xC1	; 193
    2294:	91 05       	cpc	r25, r1
    2296:	a1 05       	cpc	r26, r1
    2298:	b1 05       	cpc	r27, r1
    229a:	30 f1       	brcs	.+76     	; 0x22e8 <__stack+0xe9>
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	21 e0       	ldi	r18, 0x01	; 1
    22a0:	92 07       	cpc	r25, r18
    22a2:	a1 05       	cpc	r26, r1
    22a4:	b1 05       	cpc	r27, r1
    22a6:	28 f1       	brcs	.+74     	; 0x22f2 <__stack+0xf3>
    22a8:	89 33       	cpi	r24, 0x39	; 57
    22aa:	31 e0       	ldi	r19, 0x01	; 1
    22ac:	93 07       	cpc	r25, r19
    22ae:	a1 05       	cpc	r26, r1
    22b0:	b1 05       	cpc	r27, r1
    22b2:	20 f1       	brcs	.+72     	; 0x22fc <__stack+0xfd>
    22b4:	8b 39       	cpi	r24, 0x9B	; 155
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	94 07       	cpc	r25, r20
    22ba:	a1 05       	cpc	r26, r1
    22bc:	b1 05       	cpc	r27, r1
    22be:	18 f1       	brcs	.+70     	; 0x2306 <__stack+0x107>
    22c0:	8b 39       	cpi	r24, 0x9B	; 155
    22c2:	92 40       	sbci	r25, 0x02	; 2
    22c4:	a1 05       	cpc	r26, r1
    22c6:	b1 05       	cpc	r27, r1
    22c8:	18 f1       	brcs	.+70     	; 0x2310 <__stack+0x111>
    22ca:	e0 e0       	ldi	r30, 0x00	; 0
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	a0 e0       	ldi	r26, 0x00	; 0
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	22 c0       	rjmp	.+68     	; 0x2318 <__stack+0x119>
    22d4:	ee eb       	ldi	r30, 0xBE	; 190
    22d6:	f1 e0       	ldi	r31, 0x01	; 1
    22d8:	a2 ef       	ldi	r26, 0xF2	; 242
    22da:	b1 e0       	ldi	r27, 0x01	; 1
    22dc:	1d c0       	rjmp	.+58     	; 0x2318 <__stack+0x119>
    22de:	e1 ed       	ldi	r30, 0xD1	; 209
    22e0:	f2 e0       	ldi	r31, 0x02	; 2
    22e2:	a4 e1       	ldi	r26, 0x14	; 20
    22e4:	b2 e0       	ldi	r27, 0x02	; 2
    22e6:	18 c0       	rjmp	.+48     	; 0x2318 <__stack+0x119>
    22e8:	eb e7       	ldi	r30, 0x7B	; 123
    22ea:	f3 e0       	ldi	r31, 0x03	; 3
    22ec:	af e3       	ldi	r26, 0x3F	; 63
    22ee:	b2 e0       	ldi	r27, 0x02	; 2
    22f0:	13 c0       	rjmp	.+38     	; 0x2318 <__stack+0x119>
    22f2:	ee ef       	ldi	r30, 0xFE	; 254
    22f4:	f3 e0       	ldi	r31, 0x03	; 3
    22f6:	a0 e7       	ldi	r26, 0x70	; 112
    22f8:	b2 e0       	ldi	r27, 0x02	; 2
    22fa:	0e c0       	rjmp	.+28     	; 0x2318 <__stack+0x119>
    22fc:	ec ef       	ldi	r30, 0xFC	; 252
    22fe:	f1 e0       	ldi	r31, 0x01	; 1
    2300:	af e6       	ldi	r26, 0x6F	; 111
    2302:	b1 e0       	ldi	r27, 0x01	; 1
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <__stack+0x119>
    2306:	eb ef       	ldi	r30, 0xFB	; 251
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	a2 ed       	ldi	r26, 0xD2	; 210
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	04 c0       	rjmp	.+8      	; 0x2318 <__stack+0x119>
    2310:	e2 e1       	ldi	r30, 0x12	; 18
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	a8 e1       	ldi	r26, 0x18	; 24
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	a7 01       	movw	r20, r14
    231a:	96 01       	movw	r18, r12
    231c:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    2320:	6b 01       	movw	r12, r22
    2322:	7c 01       	movw	r14, r24
    2324:	20 e2       	ldi	r18, 0x20	; 32
    2326:	d2 0e       	add	r13, r18
    2328:	e1 1c       	adc	r14, r1
    232a:	f1 1c       	adc	r15, r1
    232c:	df 01       	movw	r26, r30
    232e:	a5 01       	movw	r20, r10
    2330:	94 01       	movw	r18, r8
    2332:	0e 94 01 34 	call	0x6802	; 0x6802 <__muluhisi3>
    2336:	a7 01       	movw	r20, r14
    2338:	96 01       	movw	r18, r12
    233a:	26 1b       	sub	r18, r22
    233c:	37 0b       	sbc	r19, r23
    233e:	48 0b       	sbc	r20, r24
    2340:	59 0b       	sbc	r21, r25
    2342:	ca 01       	movw	r24, r20
    2344:	b9 01       	movw	r22, r18
    2346:	2e e0       	ldi	r18, 0x0E	; 14
    2348:	96 95       	lsr	r25
    234a:	87 95       	ror	r24
    234c:	77 95       	ror	r23
    234e:	67 95       	ror	r22
    2350:	2a 95       	dec	r18
    2352:	d1 f7       	brne	.-12     	; 0x2348 <__stack+0x149>
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__stack+0x15f>
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	bf 90       	pop	r11
    2368:	af 90       	pop	r10
    236a:	9f 90       	pop	r9
    236c:	8f 90       	pop	r8
    236e:	08 95       	ret

00002370 <_ZN24Adafruit_TSL2561_Unified6write8Ehh>:
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	ec 01       	movw	r28, r24
    237a:	06 2f       	mov	r16, r22
    237c:	14 2f       	mov	r17, r20
    237e:	6d 81       	ldd	r22, Y+5	; 0x05
    2380:	06 2e       	mov	r0, r22
    2382:	00 0c       	add	r0, r0
    2384:	77 0b       	sbc	r23, r23
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	73 d7       	rcall	.+3814   	; 0x3272 <_ZN7TwoWire17beginTransmissionEi>
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	dc 01       	movw	r26, r24
    2392:	ed 91       	ld	r30, X+
    2394:	fc 91       	ld	r31, X
    2396:	01 90       	ld	r0, Z+
    2398:	f0 81       	ld	r31, Z
    239a:	e0 2d       	mov	r30, r0
    239c:	60 2f       	mov	r22, r16
    239e:	19 95       	eicall
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	dc 01       	movw	r26, r24
    23a6:	ed 91       	ld	r30, X+
    23a8:	fc 91       	ld	r31, X
    23aa:	01 90       	ld	r0, Z+
    23ac:	f0 81       	ld	r31, Z
    23ae:	e0 2d       	mov	r30, r0
    23b0:	61 2f       	mov	r22, r17
    23b2:	19 95       	eicall
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	cf c7       	rjmp	.+3998   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>

000023c2 <_ZN24Adafruit_TSL2561_Unified6enableEv>:
    23c2:	43 e0       	ldi	r20, 0x03	; 3
    23c4:	60 e8       	ldi	r22, 0x80	; 128
    23c6:	d4 cf       	rjmp	.-88     	; 0x2370 <_ZN24Adafruit_TSL2561_Unified6write8Ehh>

000023c8 <_ZN24Adafruit_TSL2561_Unified7disableEv>:
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	60 e8       	ldi	r22, 0x80	; 128
    23cc:	d1 cf       	rjmp	.-94     	; 0x2370 <_ZN24Adafruit_TSL2561_Unified6write8Ehh>

000023ce <_ZN24Adafruit_TSL2561_Unified5read8Eh>:
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	ec 01       	movw	r28, r24
    23d6:	16 2f       	mov	r17, r22
    23d8:	6d 81       	ldd	r22, Y+5	; 0x05
    23da:	06 2e       	mov	r0, r22
    23dc:	00 0c       	add	r0, r0
    23de:	77 0b       	sbc	r23, r23
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	46 d7       	rcall	.+3724   	; 0x3272 <_ZN7TwoWire17beginTransmissionEi>
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	dc 01       	movw	r26, r24
    23ec:	ed 91       	ld	r30, X+
    23ee:	fc 91       	ld	r31, X
    23f0:	01 90       	ld	r0, Z+
    23f2:	f0 81       	ld	r31, Z
    23f4:	e0 2d       	mov	r30, r0
    23f6:	61 2f       	mov	r22, r17
    23f8:	19 95       	eicall
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	b0 d7       	rcall	.+3936   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    2400:	6d 81       	ldd	r22, Y+5	; 0x05
    2402:	06 2e       	mov	r0, r22
    2404:	00 0c       	add	r0, r0
    2406:	77 0b       	sbc	r23, r23
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	a5 d7       	rcall	.+3914   	; 0x335c <_ZN7TwoWire11requestFromEii>
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	dc 01       	movw	r26, r24
    2418:	ed 91       	ld	r30, X+
    241a:	fc 91       	ld	r31, X
    241c:	02 84       	ldd	r0, Z+10	; 0x0a
    241e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2420:	e0 2d       	mov	r30, r0
    2422:	19 95       	eicall
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	08 95       	ret

0000242c <_ZN24Adafruit_TSL2561_Unified4initEv>:
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ec 01       	movw	r28, r24
    2432:	6a e0       	ldi	r22, 0x0A	; 10
    2434:	cc df       	rcall	.-104    	; 0x23ce <_ZN24Adafruit_TSL2561_Unified5read8Eh>
    2436:	80 fd       	sbrc	r24, 0
    2438:	0c c0       	rjmp	.+24     	; 0x2452 <_ZN24Adafruit_TSL2561_Unified4initEv+0x26>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	8e 83       	std	Y+6, r24	; 0x06
    243e:	68 85       	ldd	r22, Y+8	; 0x08
    2440:	ce 01       	movw	r24, r28
    2442:	17 d0       	rcall	.+46     	; 0x2472 <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t>
    2444:	69 85       	ldd	r22, Y+9	; 0x09
    2446:	ce 01       	movw	r24, r28
    2448:	2b d0       	rcall	.+86     	; 0x24a0 <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t>
    244a:	ce 01       	movw	r24, r28
    244c:	bd df       	rcall	.-134    	; 0x23c8 <_ZN24Adafruit_TSL2561_Unified7disableEv>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <_ZN24Adafruit_TSL2561_Unified4initEv+0x28>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <_ZN24Adafruit_TSL2561_Unified5beginEv>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	ec 01       	movw	r28, r24
    2460:	84 e7       	ldi	r24, 0x74	; 116
    2462:	97 e0       	ldi	r25, 0x07	; 7
    2464:	9c 83       	std	Y+4, r25	; 0x04
    2466:	8b 83       	std	Y+3, r24	; 0x03
    2468:	eb d6       	rcall	.+3542   	; 0x3240 <_ZN7TwoWire5beginEv>
    246a:	ce 01       	movw	r24, r28
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	dd cf       	rjmp	.-70     	; 0x242c <_ZN24Adafruit_TSL2561_Unified4initEv>

00002472 <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t>:
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	ec 01       	movw	r28, r24
    247a:	16 2f       	mov	r17, r22
    247c:	8e 81       	ldd	r24, Y+6	; 0x06
    247e:	81 11       	cpse	r24, r1
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <_ZN24Adafruit_TSL2561_Unified18setIntegrationTimeE24tsl2561IntegrationTime_t+0x14>
    2482:	ce 01       	movw	r24, r28
    2484:	ea df       	rcall	.-44     	; 0x245a <_ZN24Adafruit_TSL2561_Unified5beginEv>
    2486:	ce 01       	movw	r24, r28
    2488:	9c df       	rcall	.-200    	; 0x23c2 <_ZN24Adafruit_TSL2561_Unified6enableEv>
    248a:	49 85       	ldd	r20, Y+9	; 0x09
    248c:	41 2b       	or	r20, r17
    248e:	61 e8       	ldi	r22, 0x81	; 129
    2490:	ce 01       	movw	r24, r28
    2492:	6e df       	rcall	.-292    	; 0x2370 <_ZN24Adafruit_TSL2561_Unified6write8Ehh>
    2494:	18 87       	std	Y+8, r17	; 0x08
    2496:	ce 01       	movw	r24, r28
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	94 cf       	rjmp	.-216    	; 0x23c8 <_ZN24Adafruit_TSL2561_Unified7disableEv>

000024a0 <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t>:
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	ec 01       	movw	r28, r24
    24a8:	16 2f       	mov	r17, r22
    24aa:	8e 81       	ldd	r24, Y+6	; 0x06
    24ac:	81 11       	cpse	r24, r1
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t+0x14>
    24b0:	ce 01       	movw	r24, r28
    24b2:	d3 df       	rcall	.-90     	; 0x245a <_ZN24Adafruit_TSL2561_Unified5beginEv>
    24b4:	ce 01       	movw	r24, r28
    24b6:	85 df       	rcall	.-246    	; 0x23c2 <_ZN24Adafruit_TSL2561_Unified6enableEv>
    24b8:	48 85       	ldd	r20, Y+8	; 0x08
    24ba:	41 2b       	or	r20, r17
    24bc:	61 e8       	ldi	r22, 0x81	; 129
    24be:	ce 01       	movw	r24, r28
    24c0:	57 df       	rcall	.-338    	; 0x2370 <_ZN24Adafruit_TSL2561_Unified6write8Ehh>
    24c2:	19 87       	std	Y+9, r17	; 0x09
    24c4:	ce 01       	movw	r24, r28
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	7d cf       	rjmp	.-262    	; 0x23c8 <_ZN24Adafruit_TSL2561_Unified7disableEv>

000024ce <_ZN24Adafruit_TSL2561_Unified6read16Eh>:
    @param  reg I2C register to read from
    @returns 16-bit value containing 2-byte data read
*/
/**************************************************************************/
uint16_t Adafruit_TSL2561_Unified::read16(uint8_t reg)
{
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	ec 01       	movw	r28, r24
    24d8:	16 2f       	mov	r17, r22
  uint16_t x, t;

  _i2c->beginTransmission(_addr);
    24da:	6d 81       	ldd	r22, Y+5	; 0x05
    24dc:	06 2e       	mov	r0, r22
    24de:	00 0c       	add	r0, r0
    24e0:	77 0b       	sbc	r23, r23
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	c5 d6       	rcall	.+3466   	; 0x3272 <_ZN7TwoWire17beginTransmissionEi>
  _i2c->write(reg);
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	dc 01       	movw	r26, r24
    24ee:	ed 91       	ld	r30, X+
    24f0:	fc 91       	ld	r31, X
    24f2:	01 90       	ld	r0, Z+
    24f4:	f0 81       	ld	r31, Z
    24f6:	e0 2d       	mov	r30, r0
    24f8:	61 2f       	mov	r22, r17
    24fa:	19 95       	eicall
  _i2c->endTransmission();
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	2f d7       	rcall	.+3678   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>

  _i2c->requestFrom(_addr, 2);
    2502:	6d 81       	ldd	r22, Y+5	; 0x05
    2504:	06 2e       	mov	r0, r22
    2506:	00 0c       	add	r0, r0
    2508:	77 0b       	sbc	r23, r23
    250a:	42 e0       	ldi	r20, 0x02	; 2
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	24 d7       	rcall	.+3656   	; 0x335c <_ZN7TwoWire11requestFromEii>
  t = _i2c->read();
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	dc 01       	movw	r26, r24
    251a:	ed 91       	ld	r30, X+
    251c:	fc 91       	ld	r31, X
    251e:	02 84       	ldd	r0, Z+10	; 0x0a
    2520:	f3 85       	ldd	r31, Z+11	; 0x0b
    2522:	e0 2d       	mov	r30, r0
    2524:	19 95       	eicall
    2526:	8c 01       	movw	r16, r24
  x = _i2c->read();
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	dc 01       	movw	r26, r24
    252e:	ed 91       	ld	r30, X+
    2530:	fc 91       	ld	r31, X
    2532:	02 84       	ldd	r0, Z+10	; 0x0a
    2534:	f3 85       	ldd	r31, Z+11	; 0x0b
    2536:	e0 2d       	mov	r30, r0
    2538:	19 95       	eicall
  x <<= 8;
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	38 2f       	mov	r19, r24
  x |= t;
  return x;
}
    2540:	c8 01       	movw	r24, r16
    2542:	82 2b       	or	r24, r18
    2544:	93 2b       	or	r25, r19
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	08 95       	ret

00002550 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>:
/*!
    Private function to read luminosity on both channels
*/
/**************************************************************************/
void Adafruit_TSL2561_Unified::getData (uint16_t *broadband, uint16_t *ir)
{
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	ec 01       	movw	r28, r24
    255e:	7b 01       	movw	r14, r22
    2560:	8a 01       	movw	r16, r20
  /* Enable the device by setting the control bit to 0x03 */
  enable();
    2562:	2f df       	rcall	.-418    	; 0x23c2 <_ZN24Adafruit_TSL2561_Unified6enableEv>

  /* Wait x ms for ADC to complete */
  switch (_tsl2561IntegrationTime)
    2564:	88 85       	ldd	r24, Y+8	; 0x08
    2566:	88 23       	and	r24, r24
    2568:	39 f0       	breq	.+14     	; 0x2578 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x28>
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	51 f4       	brne	.+20     	; 0x2582 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x32>
  {
    case TSL2561_INTEGRATIONTIME_13MS:
      delay(TSL2561_DELAY_INTTIME_13MS);  // KTOWN: Was 14ms
      break;
    case TSL2561_INTEGRATIONTIME_101MS:
      delay(TSL2561_DELAY_INTTIME_101MS); // KTOWN: Was 102ms
    256e:	68 e7       	ldi	r22, 0x78	; 120
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	09 c0       	rjmp	.+18     	; 0x258a <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x3a>

  /* Wait x ms for ADC to complete */
  switch (_tsl2561IntegrationTime)
  {
    case TSL2561_INTEGRATIONTIME_13MS:
      delay(TSL2561_DELAY_INTTIME_13MS);  // KTOWN: Was 14ms
    2578:	6f e0       	ldi	r22, 0x0F	; 15
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	04 c0       	rjmp	.+8      	; 0x258a <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_+0x3a>
      break;
    case TSL2561_INTEGRATIONTIME_101MS:
      delay(TSL2561_DELAY_INTTIME_101MS); // KTOWN: Was 102ms
      break;
    default:
      delay(TSL2561_DELAY_INTTIME_402MS); // KTOWN: Was 403ms
    2582:	62 ec       	ldi	r22, 0xC2	; 194
    2584:	71 e0       	ldi	r23, 0x01	; 1
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 c2 23 	call	0x4784	; 0x4784 <delay>
      break;
  }

  /* Reads a two byte value from channel 0 (visible + infrared) */
  *broadband = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW);
    258e:	6c ea       	ldi	r22, 0xAC	; 172
    2590:	ce 01       	movw	r24, r28
    2592:	9d df       	rcall	.-198    	; 0x24ce <_ZN24Adafruit_TSL2561_Unified6read16Eh>
    2594:	f7 01       	movw	r30, r14
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24

  /* Reads a two byte value from channel 1 (infrared) */
  *ir = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW);
    259a:	6e ea       	ldi	r22, 0xAE	; 174
    259c:	ce 01       	movw	r24, r28
    259e:	97 df       	rcall	.-210    	; 0x24ce <_ZN24Adafruit_TSL2561_Unified6read16Eh>
    25a0:	f8 01       	movw	r30, r16
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24

  /* Turn the device off to save power */
  disable();
    25a6:	ce 01       	movw	r24, r28
}
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	ff 90       	pop	r15

  /* Reads a two byte value from channel 1 (infrared) */
  *ir = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW);

  /* Turn the device off to save power */
  disable();
    25b2:	ef 90       	pop	r14
    25b4:	09 cf       	rjmp	.-494    	; 0x23c8 <_ZN24Adafruit_TSL2561_Unified7disableEv>

000025b6 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_>:
    @param  ir Pointer to a uint16_t we will fill with a sensor the 
               IR-only light diode.
*/
/**************************************************************************/
void Adafruit_TSL2561_Unified::getLuminosity (uint16_t *broadband, uint16_t *ir)
{
    25b6:	7f 92       	push	r7
    25b8:	8f 92       	push	r8
    25ba:	9f 92       	push	r9
    25bc:	af 92       	push	r10
    25be:	bf 92       	push	r11
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x1c>
    25d2:	1f 92       	push	r1
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	8c 01       	movw	r16, r24
    25da:	6b 01       	movw	r12, r22
    25dc:	7a 01       	movw	r14, r20
  bool valid = false;

  if (!_tsl2561Initialised) begin();
    25de:	fc 01       	movw	r30, r24
    25e0:	86 81       	ldd	r24, Z+6	; 0x06
    25e2:	81 11       	cpse	r24, r1
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x34>
    25e6:	c8 01       	movw	r24, r16
    25e8:	38 df       	rcall	.-400    	; 0x245a <_ZN24Adafruit_TSL2561_Unified5beginEv>

  /* If Auto gain disabled get a single reading and continue */
  if(!_tsl2561AutoGain)
    25ea:	f8 01       	movw	r30, r16
    25ec:	87 81       	ldd	r24, Z+7	; 0x07
    25ee:	81 11       	cpse	r24, r1
    25f0:	05 c0       	rjmp	.+10     	; 0x25fc <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x46>
  {
    getData (broadband, ir);
    25f2:	a7 01       	movw	r20, r14
    25f4:	b6 01       	movw	r22, r12
    25f6:	c8 01       	movw	r24, r16
    25f8:	ab df       	rcall	.-170    	; 0x2550 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>
    return;
    25fa:	51 c0       	rjmp	.+162    	; 0x269e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xe8>
    25fc:	71 2c       	mov	r7, r1
    uint16_t _b, _ir;
    uint16_t _hi, _lo;
    tsl2561IntegrationTime_t _it = _tsl2561IntegrationTime;

    /* Get the hi/low threshold for the current integration time */
    switch(_it)
    25fe:	f8 01       	movw	r30, r16
    2600:	80 85       	ldd	r24, Z+8	; 0x08
    2602:	88 23       	and	r24, r24
    2604:	99 f0       	breq	.+38     	; 0x262c <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x76>
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	41 f4       	brne	.+16     	; 0x261a <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x64>
        _hi = TSL2561_AGC_THI_13MS;
        _lo = TSL2561_AGC_TLO_13MS;
        break;
      case TSL2561_INTEGRATIONTIME_101MS:
        _hi = TSL2561_AGC_THI_101MS;
        _lo = TSL2561_AGC_TLO_101MS;
    260a:	48 ec       	ldi	r20, 0xC8	; 200
    260c:	84 2e       	mov	r8, r20
    260e:	91 2c       	mov	r9, r1
      case TSL2561_INTEGRATIONTIME_13MS:
        _hi = TSL2561_AGC_THI_13MS;
        _lo = TSL2561_AGC_TLO_13MS;
        break;
      case TSL2561_INTEGRATIONTIME_101MS:
        _hi = TSL2561_AGC_THI_101MS;
    2610:	50 ea       	ldi	r21, 0xA0	; 160
    2612:	a5 2e       	mov	r10, r21
    2614:	5c e8       	ldi	r21, 0x8C	; 140
    2616:	b5 2e       	mov	r11, r21
    2618:	10 c0       	rjmp	.+32     	; 0x263a <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x84>
        _lo = TSL2561_AGC_TLO_101MS;
        break;
      default:
        _hi = TSL2561_AGC_THI_402MS;
        _lo = TSL2561_AGC_TLO_402MS;
    261a:	24 ef       	ldi	r18, 0xF4	; 244
    261c:	82 2e       	mov	r8, r18
    261e:	99 24       	eor	r9, r9
    2620:	93 94       	inc	r9
      case TSL2561_INTEGRATIONTIME_101MS:
        _hi = TSL2561_AGC_THI_101MS;
        _lo = TSL2561_AGC_TLO_101MS;
        break;
      default:
        _hi = TSL2561_AGC_THI_402MS;
    2622:	38 e1       	ldi	r19, 0x18	; 24
    2624:	a3 2e       	mov	r10, r19
    2626:	36 ef       	ldi	r19, 0xF6	; 246
    2628:	b3 2e       	mov	r11, r19
        _lo = TSL2561_AGC_TLO_402MS;
        break;
    262a:	07 c0       	rjmp	.+14     	; 0x263a <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x84>
    /* Get the hi/low threshold for the current integration time */
    switch(_it)
    {
      case TSL2561_INTEGRATIONTIME_13MS:
        _hi = TSL2561_AGC_THI_13MS;
        _lo = TSL2561_AGC_TLO_13MS;
    262c:	84 e6       	ldi	r24, 0x64	; 100
    262e:	88 2e       	mov	r8, r24
    2630:	91 2c       	mov	r9, r1

    /* Get the hi/low threshold for the current integration time */
    switch(_it)
    {
      case TSL2561_INTEGRATIONTIME_13MS:
        _hi = TSL2561_AGC_THI_13MS;
    2632:	92 ef       	ldi	r25, 0xF2	; 242
    2634:	a9 2e       	mov	r10, r25
    2636:	92 e1       	ldi	r25, 0x12	; 18
    2638:	b9 2e       	mov	r11, r25
        _hi = TSL2561_AGC_THI_402MS;
        _lo = TSL2561_AGC_TLO_402MS;
        break;
    }

    getData(&_b, &_ir);
    263a:	ae 01       	movw	r20, r28
    263c:	4f 5f       	subi	r20, 0xFF	; 255
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	be 01       	movw	r22, r28
    2642:	6d 5f       	subi	r22, 0xFD	; 253
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	c8 01       	movw	r24, r16
    2648:	83 df       	rcall	.-250    	; 0x2550 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04

    /* Run an auto-gain check if we haven't already done so ... */
    if (!_agcCheck)
    264e:	71 10       	cpse	r7, r1
    2650:	1e c0       	rjmp	.+60     	; 0x268e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
    {
      if ((_b < _lo) && (_tsl2561Gain == TSL2561_GAIN_1X))
    2652:	88 15       	cp	r24, r8
    2654:	99 05       	cpc	r25, r9
    2656:	30 f4       	brcc	.+12     	; 0x2664 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xae>
    2658:	f8 01       	movw	r30, r16
    265a:	21 85       	ldd	r18, Z+9	; 0x09
    265c:	21 11       	cpse	r18, r1
    265e:	17 c0       	rjmp	.+46     	; 0x268e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
      {
        /* Increase the gain and try again */
        setGain(TSL2561_GAIN_16X);
    2660:	60 e1       	ldi	r22, 0x10	; 16
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xbe>
        /* Drop the previous conversion results */
        getData(&_b, &_ir);
        /* Set a flag to indicate we've adjusted the gain */
        _agcCheck = true;
      }
      else if ((_b > _hi) && (_tsl2561Gain == TSL2561_GAIN_16X))
    2664:	a8 16       	cp	r10, r24
    2666:	b9 06       	cpc	r11, r25
    2668:	90 f4       	brcc	.+36     	; 0x268e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
    266a:	f8 01       	movw	r30, r16
    266c:	21 85       	ldd	r18, Z+9	; 0x09
    266e:	20 31       	cpi	r18, 0x10	; 16
      {
        /* Drop gain to 1x and try again */
        setGain(TSL2561_GAIN_1X);
    2670:	71 f4       	brne	.+28     	; 0x268e <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0xd8>
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	c8 01       	movw	r24, r16
    2676:	14 df       	rcall	.-472    	; 0x24a0 <_ZN24Adafruit_TSL2561_Unified7setGainE13tsl2561Gain_t>
        /* Drop the previous conversion results */
        getData(&_b, &_ir);
    2678:	ae 01       	movw	r20, r28
    267a:	4f 5f       	subi	r20, 0xFF	; 255
    267c:	5f 4f       	sbci	r21, 0xFF	; 255
    267e:	be 01       	movw	r22, r28
    2680:	6d 5f       	subi	r22, 0xFD	; 253
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	c8 01       	movw	r24, r16
    2686:	64 df       	rcall	.-312    	; 0x2550 <_ZN24Adafruit_TSL2561_Unified7getDataEPjS0_>
        /* Set a flag to indicate we've adjusted the gain */
        _agcCheck = true;
    2688:	77 24       	eor	r7, r7
    268a:	73 94       	inc	r7
    268c:	b8 cf       	rjmp	.-144    	; 0x25fe <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_+0x48>
    else
    {
      /* If we've already adjusted the gain once, just return the new results.
         This avoids endless loops where a value is at one extreme pre-gain,
         and the the other extreme post-gain */
      *broadband = _b;
    268e:	f6 01       	movw	r30, r12
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
      *ir = _ir;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	f7 01       	movw	r30, r14
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
      valid = true;
    }
  } while (!valid);
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	ff 90       	pop	r15
    26b0:	ef 90       	pop	r14
    26b2:	df 90       	pop	r13
    26b4:	cf 90       	pop	r12
    26b6:	bf 90       	pop	r11
    26b8:	af 90       	pop	r10
    26ba:	9f 90       	pop	r9
    26bc:	8f 90       	pop	r8
    26be:	7f 90       	pop	r7
    26c0:	08 95       	ret

000026c2 <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t>:
    @returns True if sensor reading is between 0 and 65535 lux, 
             false if sensor is saturated
*/
/**************************************************************************/
bool Adafruit_TSL2561_Unified::getEvent(sensors_event_t *event)
{
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t+0xe>
    26d0:	1f 92       	push	r1
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	7c 01       	movw	r14, r24
    26d8:	8b 01       	movw	r16, r22
  uint16_t broadband, ir;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    26da:	84 e2       	ldi	r24, 0x24	; 36
    26dc:	fb 01       	movw	r30, r22
    26de:	11 92       	st	Z+, r1
    26e0:	8a 95       	dec	r24
    26e2:	e9 f7       	brne	.-6      	; 0x26de <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t+0x1c>

  event->version   = sizeof(sensors_event_t);
    26e4:	84 e2       	ldi	r24, 0x24	; 36
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	fb 01       	movw	r30, r22
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _tsl2561SensorID;
    26f6:	f7 01       	movw	r30, r14
    26f8:	82 85       	ldd	r24, Z+10	; 0x0a
    26fa:	93 85       	ldd	r25, Z+11	; 0x0b
    26fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    26fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    2700:	fb 01       	movw	r30, r22
    2702:	84 83       	std	Z+4, r24	; 0x04
    2704:	95 83       	std	Z+5, r25	; 0x05
    2706:	a6 83       	std	Z+6, r26	; 0x06
    2708:	b7 83       	std	Z+7, r27	; 0x07
  event->type      = SENSOR_TYPE_LIGHT;
    270a:	85 e0       	ldi	r24, 0x05	; 5
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a0 e0       	ldi	r26, 0x00	; 0
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	80 87       	std	Z+8, r24	; 0x08
    2714:	91 87       	std	Z+9, r25	; 0x09
    2716:	a2 87       	std	Z+10, r26	; 0x0a
    2718:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    271a:	0e 94 91 23 	call	0x4722	; 0x4722 <millis>
    271e:	f8 01       	movw	r30, r16
    2720:	60 8b       	std	Z+16, r22	; 0x10
    2722:	71 8b       	std	Z+17, r23	; 0x11
    2724:	82 8b       	std	Z+18, r24	; 0x12
    2726:	93 8b       	std	Z+19, r25	; 0x13

  /* Calculate the actual lux value */
  getLuminosity(&broadband, &ir);
    2728:	ae 01       	movw	r20, r28
    272a:	4f 5f       	subi	r20, 0xFF	; 255
    272c:	5f 4f       	sbci	r21, 0xFF	; 255
    272e:	be 01       	movw	r22, r28
    2730:	6d 5f       	subi	r22, 0xFD	; 253
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	c7 01       	movw	r24, r14
    2736:	3f df       	rcall	.-386    	; 0x25b6 <_ZN24Adafruit_TSL2561_Unified13getLuminosityEPjS0_>
  event->light = calculateLux(broadband, ir);
    2738:	49 81       	ldd	r20, Y+1	; 0x01
    273a:	5a 81       	ldd	r21, Y+2	; 0x02
    273c:	6b 81       	ldd	r22, Y+3	; 0x03
    273e:	7c 81       	ldd	r23, Y+4	; 0x04
    2740:	c7 01       	movw	r24, r14
    2742:	21 dd       	rcall	.-1470   	; 0x2186 <_ZN24Adafruit_TSL2561_Unified12calculateLuxEjj>
    2744:	57 d7       	rcall	.+3758   	; 0x35f4 <__floatunsisf>
    2746:	f8 01       	movw	r30, r16
    2748:	64 8b       	std	Z+20, r22	; 0x14
    274a:	75 8b       	std	Z+21, r23	; 0x15
    274c:	86 8b       	std	Z+22, r24	; 0x16
    274e:	97 8b       	std	Z+23, r25	; 0x17
    2750:	11 e0       	ldi	r17, 0x01	; 1
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	dc d6       	rcall	.+3512   	; 0x3514 <__cmpsf2>
    275c:	81 11       	cpse	r24, r1
    275e:	01 c0       	rjmp	.+2      	; 0x2762 <_ZN24Adafruit_TSL2561_Unified8getEventEP15sensors_event_t+0xa0>
    2760:	10 e0       	ldi	r17, 0x00	; 0

  if (event->light == 65536) {
    return false;
  }
  return true;
}
    2762:	81 2f       	mov	r24, r17
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	08 95       	ret

0000277a <_ZL9date2daysjhh>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    277a:	80 3d       	cpi	r24, 0xD0	; 208
    277c:	27 e0       	ldi	r18, 0x07	; 7
    277e:	92 07       	cpc	r25, r18
    2780:	10 f0       	brcs	.+4      	; 0x2786 <_ZL9date2daysjhh+0xc>
    2782:	80 5d       	subi	r24, 0xD0	; 208
    2784:	97 40       	sbci	r25, 0x07	; 7
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	e3 ed       	ldi	r30, 0xD3	; 211
    278a:	f1 e0       	ldi	r31, 0x01	; 1
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	26 17       	cp	r18, r22
    2790:	30 f4       	brcc	.+12     	; 0x279e <_ZL9date2daysjhh+0x24>
    2792:	34 91       	lpm	r19, Z
    2794:	43 0f       	add	r20, r19
    2796:	51 1d       	adc	r21, r1
    2798:	2f 5f       	subi	r18, 0xFF	; 255
    279a:	31 96       	adiw	r30, 0x01	; 1
    279c:	f8 cf       	rjmp	.-16     	; 0x278e <_ZL9date2daysjhh+0x14>
    279e:	63 30       	cpi	r22, 0x03	; 3
    27a0:	38 f0       	brcs	.+14     	; 0x27b0 <_ZL9date2daysjhh+0x36>
    27a2:	9c 01       	movw	r18, r24
    27a4:	23 70       	andi	r18, 0x03	; 3
    27a6:	33 27       	eor	r19, r19
    27a8:	23 2b       	or	r18, r19
    27aa:	11 f4       	brne	.+4      	; 0x27b0 <_ZL9date2daysjhh+0x36>
    27ac:	4f 5f       	subi	r20, 0xFF	; 255
    27ae:	5f 4f       	sbci	r21, 0xFF	; 255
    27b0:	bc 01       	movw	r22, r24
    27b2:	6d 5f       	subi	r22, 0xFD	; 253
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	76 95       	lsr	r23
    27b8:	67 95       	ror	r22
    27ba:	76 95       	lsr	r23
    27bc:	67 95       	ror	r22
    27be:	ed e6       	ldi	r30, 0x6D	; 109
    27c0:	f1 e0       	ldi	r31, 0x01	; 1
    27c2:	8e 9f       	mul	r24, r30
    27c4:	90 01       	movw	r18, r0
    27c6:	8f 9f       	mul	r24, r31
    27c8:	30 0d       	add	r19, r0
    27ca:	9e 9f       	mul	r25, r30
    27cc:	30 0d       	add	r19, r0
    27ce:	11 24       	eor	r1, r1
    27d0:	c9 01       	movw	r24, r18
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	86 0f       	add	r24, r22
    27d6:	97 1f       	adc	r25, r23
    27d8:	84 0f       	add	r24, r20
    27da:	95 1f       	adc	r25, r21
    27dc:	08 95       	ret

000027de <_ZL6conv2dPKc>:
    27de:	fc 01       	movw	r30, r24
    27e0:	90 81       	ld	r25, Z
    27e2:	90 53       	subi	r25, 0x30	; 48
    27e4:	9a 30       	cpi	r25, 0x0A	; 10
    27e6:	08 f0       	brcs	.+2      	; 0x27ea <_ZL6conv2dPKc+0xc>
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	80 53       	subi	r24, 0x30	; 48
    27ee:	2a e0       	ldi	r18, 0x0A	; 10
    27f0:	92 9f       	mul	r25, r18
    27f2:	80 0d       	add	r24, r0
    27f4:	11 24       	eor	r1, r1
    27f6:	08 95       	ret

000027f8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	2b 97       	sbiw	r28, 0x0b	; 11
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	8c 01       	movw	r16, r24
    2816:	7a 01       	movw	r14, r20
    2818:	4b e0       	ldi	r20, 0x0B	; 11
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	ce 01       	movw	r24, r28
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	0e 94 88 37 	call	0x6f10	; 0x6f10 <memcpy_P>
    2824:	ce 01       	movw	r24, r28
    2826:	0a 96       	adiw	r24, 0x0a	; 10
    2828:	da df       	rcall	.-76     	; 0x27de <_ZL6conv2dPKc>
    282a:	f8 01       	movw	r30, r16
    282c:	80 83       	st	Z, r24
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	8e 2f       	mov	r24, r30
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	fc 01       	movw	r30, r24
    2836:	e1 54       	subi	r30, 0x41	; 65
    2838:	f1 09       	sbc	r31, r1
    283a:	e3 31       	cpi	r30, 0x13	; 19
    283c:	f1 05       	cpc	r31, r1
    283e:	58 f5       	brcc	.+86     	; 0x2896 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9e>
    2840:	88 27       	eor	r24, r24
    2842:	ee 58       	subi	r30, 0x8E	; 142
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	8f 4f       	sbci	r24, 0xFF	; 255
    2848:	0c 94 ea 33 	jmp	0x67d4	; 0x67d4 <__tablejump2__>
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	81 36       	cpi	r24, 0x61	; 97
    2850:	29 f0       	breq	.+10     	; 0x285c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	8e 36       	cpi	r24, 0x6E	; 110
    2856:	21 f0       	breq	.+8      	; 0x2860 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x68>
    2858:	87 e0       	ldi	r24, 0x07	; 7
    285a:	1b c0       	rjmp	.+54     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	19 c0       	rjmp	.+50     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2860:	86 e0       	ldi	r24, 0x06	; 6
    2862:	17 c0       	rjmp	.+46     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	15 c0       	rjmp	.+42     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	82 37       	cpi	r24, 0x72	; 114
    286c:	11 f0       	breq	.+4      	; 0x2872 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x7a>
    286e:	88 e0       	ldi	r24, 0x08	; 8
    2870:	10 c0       	rjmp	.+32     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2872:	84 e0       	ldi	r24, 0x04	; 4
    2874:	0e c0       	rjmp	.+28     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	82 37       	cpi	r24, 0x72	; 114
    287a:	11 f0       	breq	.+4      	; 0x2880 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x88>
    287c:	85 e0       	ldi	r24, 0x05	; 5
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2880:	83 e0       	ldi	r24, 0x03	; 3
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2884:	89 e0       	ldi	r24, 0x09	; 9
    2886:	05 c0       	rjmp	.+10     	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2888:	8a e0       	ldi	r24, 0x0A	; 10
    288a:	03 c0       	rjmp	.+6      	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    288c:	8b e0       	ldi	r24, 0x0B	; 11
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2890:	8c e0       	ldi	r24, 0x0C	; 12
    2892:	f8 01       	movw	r30, r16
    2894:	81 83       	std	Z+1, r24	; 0x01
    2896:	ce 01       	movw	r24, r28
    2898:	05 96       	adiw	r24, 0x05	; 5
    289a:	a1 df       	rcall	.-190    	; 0x27de <_ZL6conv2dPKc>
    289c:	f8 01       	movw	r30, r16
    289e:	82 83       	std	Z+2, r24	; 0x02
    28a0:	48 e0       	ldi	r20, 0x08	; 8
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	b7 01       	movw	r22, r14
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	0e 94 88 37 	call	0x6f10	; 0x6f10 <memcpy_P>
    28ae:	ce 01       	movw	r24, r28
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	95 df       	rcall	.-214    	; 0x27de <_ZL6conv2dPKc>
    28b4:	f8 01       	movw	r30, r16
    28b6:	83 83       	std	Z+3, r24	; 0x03
    28b8:	ce 01       	movw	r24, r28
    28ba:	04 96       	adiw	r24, 0x04	; 4
    28bc:	90 df       	rcall	.-224    	; 0x27de <_ZL6conv2dPKc>
    28be:	f8 01       	movw	r30, r16
    28c0:	84 83       	std	Z+4, r24	; 0x04
    28c2:	ce 01       	movw	r24, r28
    28c4:	07 96       	adiw	r24, 0x07	; 7
    28c6:	8b df       	rcall	.-234    	; 0x27de <_ZL6conv2dPKc>
    28c8:	f8 01       	movw	r30, r16
    28ca:	85 83       	std	Z+5, r24	; 0x05
    28cc:	2b 96       	adiw	r28, 0x0b	; 11
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	ff 90       	pop	r15
    28e2:	ef 90       	pop	r14
    28e4:	08 95       	ret

000028e6 <_ZNK8DateTime12dayOfTheWeekEv>:
    28e6:	fc 01       	movw	r30, r24
    28e8:	80 81       	ld	r24, Z
    28ea:	42 81       	ldd	r20, Z+2	; 0x02
    28ec:	61 81       	ldd	r22, Z+1	; 0x01
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	44 df       	rcall	.-376    	; 0x277a <_ZL9date2daysjhh>
    28f2:	06 96       	adiw	r24, 0x06	; 6
    28f4:	67 e0       	ldi	r22, 0x07	; 7
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	0c 94 b4 33 	jmp	0x6768	; 0x6768 <__udivmodhi4>
    28fc:	08 95       	ret

000028fe <_ZN10RTC_DS32315beginEv>:
    28fe:	84 e7       	ldi	r24, 0x74	; 116
    2900:	97 e0       	ldi	r25, 0x07	; 7
    2902:	9e d4       	rcall	.+2364   	; 0x3240 <_ZN7TwoWire5beginEv>
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	08 95       	ret

00002908 <_ZN10RTC_DS32313nowEv>:
    2908:	cf 92       	push	r12
    290a:	df 92       	push	r13
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	ec 01       	movw	r28, r24
    291a:	68 e6       	ldi	r22, 0x68	; 104
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	84 e7       	ldi	r24, 0x74	; 116
    2920:	97 e0       	ldi	r25, 0x07	; 7
    2922:	a7 d4       	rcall	.+2382   	; 0x3272 <_ZN7TwoWire17beginTransmissionEi>
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	84 e7       	ldi	r24, 0x74	; 116
    2928:	97 e0       	ldi	r25, 0x07	; 7
    292a:	4c d4       	rcall	.+2200   	; 0x31c4 <_ZN7TwoWire5writeEh>
    292c:	84 e7       	ldi	r24, 0x74	; 116
    292e:	97 e0       	ldi	r25, 0x07	; 7
    2930:	17 d5       	rcall	.+2606   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    2932:	47 e0       	ldi	r20, 0x07	; 7
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	68 e6       	ldi	r22, 0x68	; 104
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	84 e7       	ldi	r24, 0x74	; 116
    293c:	97 e0       	ldi	r25, 0x07	; 7
    293e:	0e d5       	rcall	.+2588   	; 0x335c <_ZN7TwoWire11requestFromEii>
    2940:	84 e7       	ldi	r24, 0x74	; 116
    2942:	97 e0       	ldi	r25, 0x07	; 7
    2944:	b9 d3       	rcall	.+1906   	; 0x30b8 <_ZN7TwoWire4readEv>
    2946:	8f 77       	andi	r24, 0x7F	; 127
    2948:	98 2f       	mov	r25, r24
    294a:	92 95       	swap	r25
    294c:	9f 70       	andi	r25, 0x0F	; 15
    294e:	1a ef       	ldi	r17, 0xFA	; 250
    2950:	08 2f       	mov	r16, r24
    2952:	91 9f       	mul	r25, r17
    2954:	00 0d       	add	r16, r0
    2956:	11 24       	eor	r1, r1
    2958:	84 e7       	ldi	r24, 0x74	; 116
    295a:	97 e0       	ldi	r25, 0x07	; 7
    295c:	ad d3       	rcall	.+1882   	; 0x30b8 <_ZN7TwoWire4readEv>
    295e:	9c 01       	movw	r18, r24
    2960:	33 27       	eor	r19, r19
    2962:	94 e0       	ldi	r25, 0x04	; 4
    2964:	35 95       	asr	r19
    2966:	27 95       	ror	r18
    2968:	9a 95       	dec	r25
    296a:	e1 f7       	brne	.-8      	; 0x2964 <_ZN10RTC_DS32313nowEv+0x5c>
    296c:	f8 2e       	mov	r15, r24
    296e:	12 9f       	mul	r17, r18
    2970:	f0 0c       	add	r15, r0
    2972:	11 24       	eor	r1, r1
    2974:	84 e7       	ldi	r24, 0x74	; 116
    2976:	97 e0       	ldi	r25, 0x07	; 7
    2978:	9f d3       	rcall	.+1854   	; 0x30b8 <_ZN7TwoWire4readEv>
    297a:	9c 01       	movw	r18, r24
    297c:	33 27       	eor	r19, r19
    297e:	44 e0       	ldi	r20, 0x04	; 4
    2980:	35 95       	asr	r19
    2982:	27 95       	ror	r18
    2984:	4a 95       	dec	r20
    2986:	e1 f7       	brne	.-8      	; 0x2980 <_ZN10RTC_DS32313nowEv+0x78>
    2988:	e8 2e       	mov	r14, r24
    298a:	12 9f       	mul	r17, r18
    298c:	e0 0c       	add	r14, r0
    298e:	11 24       	eor	r1, r1
    2990:	84 e7       	ldi	r24, 0x74	; 116
    2992:	97 e0       	ldi	r25, 0x07	; 7
    2994:	91 d3       	rcall	.+1826   	; 0x30b8 <_ZN7TwoWire4readEv>
    2996:	84 e7       	ldi	r24, 0x74	; 116
    2998:	97 e0       	ldi	r25, 0x07	; 7
    299a:	8e d3       	rcall	.+1820   	; 0x30b8 <_ZN7TwoWire4readEv>
    299c:	9c 01       	movw	r18, r24
    299e:	33 27       	eor	r19, r19
    29a0:	54 e0       	ldi	r21, 0x04	; 4
    29a2:	35 95       	asr	r19
    29a4:	27 95       	ror	r18
    29a6:	5a 95       	dec	r21
    29a8:	e1 f7       	brne	.-8      	; 0x29a2 <_ZN10RTC_DS32313nowEv+0x9a>
    29aa:	d8 2e       	mov	r13, r24
    29ac:	12 9f       	mul	r17, r18
    29ae:	d0 0c       	add	r13, r0
    29b0:	11 24       	eor	r1, r1
    29b2:	84 e7       	ldi	r24, 0x74	; 116
    29b4:	97 e0       	ldi	r25, 0x07	; 7
    29b6:	80 d3       	rcall	.+1792   	; 0x30b8 <_ZN7TwoWire4readEv>
    29b8:	9c 01       	movw	r18, r24
    29ba:	33 27       	eor	r19, r19
    29bc:	64 e0       	ldi	r22, 0x04	; 4
    29be:	35 95       	asr	r19
    29c0:	27 95       	ror	r18
    29c2:	6a 95       	dec	r22
    29c4:	e1 f7       	brne	.-8      	; 0x29be <_ZN10RTC_DS32313nowEv+0xb6>
    29c6:	c8 2e       	mov	r12, r24
    29c8:	12 9f       	mul	r17, r18
    29ca:	c0 0c       	add	r12, r0
    29cc:	11 24       	eor	r1, r1
    29ce:	84 e7       	ldi	r24, 0x74	; 116
    29d0:	97 e0       	ldi	r25, 0x07	; 7
    29d2:	72 d3       	rcall	.+1764   	; 0x30b8 <_ZN7TwoWire4readEv>
    29d4:	9c 01       	movw	r18, r24
    29d6:	33 27       	eor	r19, r19
    29d8:	74 e0       	ldi	r23, 0x04	; 4
    29da:	35 95       	asr	r19
    29dc:	27 95       	ror	r18
    29de:	7a 95       	dec	r23
    29e0:	e1 f7       	brne	.-8      	; 0x29da <_ZN10RTC_DS32313nowEv+0xd2>
    29e2:	12 9f       	mul	r17, r18
    29e4:	80 0d       	add	r24, r0
    29e6:	11 24       	eor	r1, r1
    29e8:	88 83       	st	Y, r24
    29ea:	c9 82       	std	Y+1, r12	; 0x01
    29ec:	da 82       	std	Y+2, r13	; 0x02
    29ee:	eb 82       	std	Y+3, r14	; 0x03
    29f0:	fc 82       	std	Y+4, r15	; 0x04
    29f2:	0d 83       	std	Y+5, r16	; 0x05
    29f4:	ce 01       	movw	r24, r28
    29f6:	df 91       	pop	r29
    29f8:	cf 91       	pop	r28
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	ff 90       	pop	r15
    2a00:	ef 90       	pop	r14
    2a02:	df 90       	pop	r13
    2a04:	cf 90       	pop	r12
    2a06:	08 95       	ret

00002a08 <_ZL17read_i2c_registerhh.constprop.7>:
    2a08:	cf 93       	push	r28
    2a0a:	c8 2f       	mov	r28, r24
    2a0c:	68 e6       	ldi	r22, 0x68	; 104
    2a0e:	84 e7       	ldi	r24, 0x74	; 116
    2a10:	97 e0       	ldi	r25, 0x07	; 7
    2a12:	25 d4       	rcall	.+2122   	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    2a14:	6c 2f       	mov	r22, r28
    2a16:	84 e7       	ldi	r24, 0x74	; 116
    2a18:	97 e0       	ldi	r25, 0x07	; 7
    2a1a:	d4 d3       	rcall	.+1960   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2a1c:	84 e7       	ldi	r24, 0x74	; 116
    2a1e:	97 e0       	ldi	r25, 0x07	; 7
    2a20:	9f d4       	rcall	.+2366   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    2a22:	41 e0       	ldi	r20, 0x01	; 1
    2a24:	68 e6       	ldi	r22, 0x68	; 104
    2a26:	84 e7       	ldi	r24, 0x74	; 116
    2a28:	97 e0       	ldi	r25, 0x07	; 7
    2a2a:	96 d4       	rcall	.+2348   	; 0x3358 <_ZN7TwoWire11requestFromEhh>
    2a2c:	84 e7       	ldi	r24, 0x74	; 116
    2a2e:	97 e0       	ldi	r25, 0x07	; 7
    2a30:	43 d3       	rcall	.+1670   	; 0x30b8 <_ZN7TwoWire4readEv>
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
    2a36:	0f 93       	push	r16
    2a38:	1f 93       	push	r17
    2a3a:	cf 93       	push	r28
    2a3c:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
    2a3e:	68 e6       	ldi	r22, 0x68	; 104
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	84 e7       	ldi	r24, 0x74	; 116
    2a44:	97 e0       	ldi	r25, 0x07	; 7
    2a46:	15 d4       	rcall	.+2090   	; 0x3272 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	84 e7       	ldi	r24, 0x74	; 116
    2a4c:	97 e0       	ldi	r25, 0x07	; 7
    2a4e:	ba d3       	rcall	.+1908   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2a50:	f8 01       	movw	r30, r16
    2a52:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    2a54:	ca e0       	ldi	r28, 0x0A	; 10
    2a56:	82 2f       	mov	r24, r18
    2a58:	6c 2f       	mov	r22, r28
    2a5a:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodqi4>
    2a5e:	68 2f       	mov	r22, r24
    2a60:	66 0f       	add	r22, r22
    2a62:	86 0f       	add	r24, r22
    2a64:	88 0f       	add	r24, r24
    2a66:	68 2f       	mov	r22, r24
    2a68:	62 0f       	add	r22, r18
    2a6a:	84 e7       	ldi	r24, 0x74	; 116
    2a6c:	97 e0       	ldi	r25, 0x07	; 7
    2a6e:	aa d3       	rcall	.+1876   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2a70:	f8 01       	movw	r30, r16
    2a72:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    2a74:	82 2f       	mov	r24, r18
    2a76:	6c 2f       	mov	r22, r28
    2a78:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodqi4>
    2a7c:	68 2f       	mov	r22, r24
    2a7e:	66 0f       	add	r22, r22
    2a80:	86 0f       	add	r24, r22
    2a82:	88 0f       	add	r24, r24
    2a84:	68 2f       	mov	r22, r24
    2a86:	62 0f       	add	r22, r18
    2a88:	84 e7       	ldi	r24, 0x74	; 116
    2a8a:	97 e0       	ldi	r25, 0x07	; 7
    2a8c:	9b d3       	rcall	.+1846   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2a8e:	f8 01       	movw	r30, r16
    2a90:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    2a92:	82 2f       	mov	r24, r18
    2a94:	6c 2f       	mov	r22, r28
    2a96:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodqi4>
    2a9a:	68 2f       	mov	r22, r24
    2a9c:	66 0f       	add	r22, r22
    2a9e:	86 0f       	add	r24, r22
    2aa0:	88 0f       	add	r24, r24
    2aa2:	68 2f       	mov	r22, r24
    2aa4:	62 0f       	add	r22, r18
    2aa6:	84 e7       	ldi	r24, 0x74	; 116
    2aa8:	97 e0       	ldi	r25, 0x07	; 7
  Wire._I2C_WRITE(bin2bcd(0));
    2aaa:	8c d3       	rcall	.+1816   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	84 e7       	ldi	r24, 0x74	; 116
    2ab0:	97 e0       	ldi	r25, 0x07	; 7
    2ab2:	88 d3       	rcall	.+1808   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    2ab8:	82 2f       	mov	r24, r18
    2aba:	6c 2f       	mov	r22, r28
    2abc:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodqi4>
    2ac0:	68 2f       	mov	r22, r24
    2ac2:	66 0f       	add	r22, r22
    2ac4:	86 0f       	add	r24, r22
    2ac6:	88 0f       	add	r24, r24
    2ac8:	68 2f       	mov	r22, r24
    2aca:	62 0f       	add	r22, r18
    2acc:	84 e7       	ldi	r24, 0x74	; 116
    2ace:	97 e0       	ldi	r25, 0x07	; 7
    2ad0:	79 d3       	rcall	.+1778   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    2ad6:	82 2f       	mov	r24, r18
    2ad8:	6c 2f       	mov	r22, r28
    2ada:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodqi4>
    2ade:	68 2f       	mov	r22, r24
    2ae0:	66 0f       	add	r22, r22
    2ae2:	86 0f       	add	r24, r22
    2ae4:	88 0f       	add	r24, r24
    2ae6:	68 2f       	mov	r22, r24
    2ae8:	62 0f       	add	r22, r18
    2aea:	84 e7       	ldi	r24, 0x74	; 116
    2aec:	97 e0       	ldi	r25, 0x07	; 7
    2aee:	6a d3       	rcall	.+1748   	; 0x31c4 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    2af0:	f8 01       	movw	r30, r16
    2af2:	20 81       	ld	r18, Z
    2af4:	82 2f       	mov	r24, r18
    2af6:	6c 2f       	mov	r22, r28
    2af8:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodqi4>
    2afc:	68 2f       	mov	r22, r24
    2afe:	66 0f       	add	r22, r22
    2b00:	86 0f       	add	r24, r22
    2b02:	88 0f       	add	r24, r24
    2b04:	68 2f       	mov	r22, r24
    2b06:	62 0f       	add	r22, r18
    2b08:	84 e7       	ldi	r24, 0x74	; 116
  Wire.endTransmission();
    2b0a:	97 e0       	ldi	r25, 0x07	; 7
    2b0c:	5b d3       	rcall	.+1718   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2b0e:	84 e7       	ldi	r24, 0x74	; 116

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    2b10:	97 e0       	ldi	r25, 0x07	; 7
    2b12:	26 d4       	rcall	.+2124   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>
    2b14:	8f e0       	ldi	r24, 0x0F	; 15
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
    2b16:	78 df       	rcall	.-272    	; 0x2a08 <_ZL17read_i2c_registerhh.constprop.7>
    2b18:	c8 2f       	mov	r28, r24
    2b1a:	68 e6       	ldi	r22, 0x68	; 104
    2b1c:	84 e7       	ldi	r24, 0x74	; 116
  Wire._I2C_WRITE((byte)reg);
    2b1e:	97 e0       	ldi	r25, 0x07	; 7
    2b20:	9e d3       	rcall	.+1852   	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    2b22:	6f e0       	ldi	r22, 0x0F	; 15
    2b24:	84 e7       	ldi	r24, 0x74	; 116
  Wire._I2C_WRITE((byte)val);
    2b26:	97 e0       	ldi	r25, 0x07	; 7
    2b28:	4d d3       	rcall	.+1690   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2b2a:	6c 2f       	mov	r22, r28
    2b2c:	6f 77       	andi	r22, 0x7F	; 127
    2b2e:	84 e7       	ldi	r24, 0x74	; 116
    2b30:	97 e0       	ldi	r25, 0x07	; 7
  Wire.endTransmission();
    2b32:	48 d3       	rcall	.+1680   	; 0x31c4 <_ZN7TwoWire5writeEh>
    2b34:	84 e7       	ldi	r24, 0x74	; 116
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
    2b36:	97 e0       	ldi	r25, 0x07	; 7
    2b38:	cf 91       	pop	r28
    2b3a:	1f 91       	pop	r17

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    2b3c:	0f 91       	pop	r16
    2b3e:	10 c4       	rjmp	.+2080   	; 0x3360 <_ZN7TwoWire15endTransmissionEv>

00002b40 <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
    2b40:	8f e0       	ldi	r24, 0x0F	; 15
    2b42:	62 df       	rcall	.-316    	; 0x2a08 <_ZL17read_i2c_registerhh.constprop.7>
    2b44:	87 fb       	bst	r24, 7
    2b46:	88 27       	eor	r24, r24
    2b48:	80 f9       	bld	r24, 0
}
    2b4a:	08 95       	ret

00002b4c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	08 95       	ret

00002b52 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2b52:	08 95       	ret

00002b54 <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    2b54:	1f 92       	push	r1
    2b56:	0f 92       	push	r0
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	0f 92       	push	r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	0b b6       	in	r0, 0x3b	; 59
    2b60:	0f 92       	push	r0
    2b62:	2f 93       	push	r18
    2b64:	3f 93       	push	r19
    2b66:	4f 93       	push	r20
    2b68:	5f 93       	push	r21
    2b6a:	6f 93       	push	r22
    2b6c:	7f 93       	push	r23
    2b6e:	8f 93       	push	r24
    2b70:	9f 93       	push	r25
    2b72:	af 93       	push	r26
    2b74:	bf 93       	push	r27
    2b76:	ef 93       	push	r30
    2b78:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    2b7a:	e0 91 04 07 	lds	r30, 0x0704	; 0x800704 <_ZN14SoftwareSerial13active_objectE>
    2b7e:	f0 91 05 07 	lds	r31, 0x0705	; 0x800705 <_ZN14SoftwareSerial13active_objectE+0x1>
    2b82:	30 97       	sbiw	r30, 0x00	; 0
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <__vector_10+0x34>
    2b86:	51 c0       	rjmp	.+162    	; 0x2c2a <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2b88:	96 8d       	ldd	r25, Z+30	; 0x1e
    2b8a:	a6 85       	ldd	r26, Z+14	; 0x0e
    2b8c:	b7 85       	ldd	r27, Z+15	; 0x0f
    2b8e:	85 85       	ldd	r24, Z+13	; 0x0d
    2b90:	91 ff       	sbrs	r25, 1
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2b94:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2b96:	89 23       	and	r24, r25
    2b98:	29 f4       	brne	.+10     	; 0x2ba4 <__vector_10+0x50>
    2b9a:	47 c0       	rjmp	.+142    	; 0x2c2a <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2b9c:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2b9e:	89 23       	and	r24, r25
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <__vector_10+0x50>
    2ba2:	43 c0       	rjmp	.+134    	; 0x2c2a <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2ba4:	a3 89       	ldd	r26, Z+19	; 0x13
    2ba6:	b4 89       	ldd	r27, Z+20	; 0x14
    2ba8:	9c 91       	ld	r25, X
    2baa:	85 89       	ldd	r24, Z+21	; 0x15
    2bac:	80 95       	com	r24
    2bae:	89 23       	and	r24, r25
    2bb0:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2bb2:	86 89       	ldd	r24, Z+22	; 0x16
    2bb4:	97 89       	ldd	r25, Z+23	; 0x17
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2bba:	60 8d       	ldd	r22, Z+24	; 0x18
    2bbc:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2bbe:	a6 85       	ldd	r26, Z+14	; 0x0e
    2bc0:	b7 85       	ldd	r27, Z+15	; 0x0f
    2bc2:	55 85       	ldd	r21, Z+13	; 0x0d
    2bc4:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	cb 01       	movw	r24, r22
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2bce:	82 2f       	mov	r24, r18
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	95 95       	asr	r25
    2bd4:	87 95       	ror	r24
    2bd6:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2bd8:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    2bda:	45 23       	and	r20, r21
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <__vector_10+0x8c>
        d |= 0x80;
    2bde:	20 68       	ori	r18, 0x80	; 128
    2be0:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    2be2:	91 f7       	brne	.-28     	; 0x2bc8 <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    2be4:	86 8d       	ldd	r24, Z+30	; 0x1e
    2be6:	81 fd       	sbrc	r24, 1
      d = ~d;
    2be8:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2bea:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	8f 73       	andi	r24, 0x3F	; 63
    2bf4:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
    2bf6:	30 91 c2 06 	lds	r19, 0x06C2	; 0x8006c2 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2bfa:	38 17       	cp	r19, r24
    2bfc:	49 f0       	breq	.+18     	; 0x2c10 <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2bfe:	a0 91 c3 06 	lds	r26, 0x06C3	; 0x8006c3 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	ac 53       	subi	r26, 0x3C	; 60
    2c06:	b9 4f       	sbci	r27, 0xF9	; 249
    2c08:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
    2c0a:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    2c10:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c12:	81 60       	ori	r24, 0x01	; 1
    2c14:	86 8f       	std	Z+30, r24	; 0x1e
    2c16:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c18:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2c1e:	a3 89       	ldd	r26, Z+19	; 0x13
    2c20:	b4 89       	ldd	r27, Z+20	; 0x14
    2c22:	9c 91       	ld	r25, X
    2c24:	85 89       	ldd	r24, Z+21	; 0x15
    2c26:	89 2b       	or	r24, r25
    2c28:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    2c2a:	ff 91       	pop	r31
    2c2c:	ef 91       	pop	r30
    2c2e:	bf 91       	pop	r27
    2c30:	af 91       	pop	r26
    2c32:	9f 91       	pop	r25
    2c34:	8f 91       	pop	r24
    2c36:	7f 91       	pop	r23
    2c38:	6f 91       	pop	r22
    2c3a:	5f 91       	pop	r21
    2c3c:	4f 91       	pop	r20
    2c3e:	3f 91       	pop	r19
    2c40:	2f 91       	pop	r18
    2c42:	0f 90       	pop	r0
    2c44:	0b be       	out	0x3b, r0	; 59
    2c46:	0f 90       	pop	r0
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	0f 90       	pop	r0
    2c4c:	1f 90       	pop	r1
    2c4e:	18 95       	reti

00002c50 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c50:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <twi_state>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <twi_sendStop>
    2c5a:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <twi_inRepStart>
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	84 e1       	ldi	r24, 0x14	; 20
    2c62:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	85 e1       	ldi	r24, 0x15	; 21
    2c6a:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    2c6e:	e9 eb       	ldi	r30, 0xB9	; 185
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8e 7f       	andi	r24, 0xFE	; 254
    2c76:	80 83       	st	Z, r24
    2c78:	80 81       	ld	r24, Z
    2c7a:	8d 7f       	andi	r24, 0xFD	; 253
    2c7c:	80 83       	st	Z, r24
    2c7e:	88 e4       	ldi	r24, 0x48	; 72
    2c80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2c84:	85 e4       	ldi	r24, 0x45	; 69
    2c86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c8a:	08 95       	ret

00002c8c <twi_readFrom>:
    2c8c:	41 32       	cpi	r20, 0x21	; 33
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <twi_readFrom+0x6>
    2c90:	43 c0       	rjmp	.+134    	; 0x2d18 <twi_readFrom+0x8c>
    2c92:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <twi_state>
    2c96:	91 11       	cpse	r25, r1
    2c98:	fc cf       	rjmp	.-8      	; 0x2c92 <twi_readFrom+0x6>
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <twi_state>
    2ca0:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <twi_sendStop>
    2ca4:	2f ef       	ldi	r18, 0xFF	; 255
    2ca6:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <twi_error>
    2caa:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_masterBufferIndex>
    2cae:	24 0f       	add	r18, r20
    2cb0:	20 93 4a 07 	sts	0x074A, r18	; 0x80074a <twi_masterBufferLength>
    2cb4:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <twi_slarw>
    2cb8:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <twi_slarw>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	89 2b       	or	r24, r25
    2cc0:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <twi_slarw>
    2cc4:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <twi_inRepStart>
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	61 f4       	brne	.+24     	; 0x2ce4 <twi_readFrom+0x58>
    2ccc:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <twi_inRepStart>
    2cd0:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <twi_slarw>
    2cd4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2cd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2cdc:	83 fd       	sbrc	r24, 3
    2cde:	f8 cf       	rjmp	.-16     	; 0x2cd0 <twi_readFrom+0x44>
    2ce0:	85 ec       	ldi	r24, 0xC5	; 197
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <twi_readFrom+0x5a>
    2ce4:	85 ee       	ldi	r24, 0xE5	; 229
    2ce6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2cea:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <twi_state>
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	e1 f3       	breq	.-8      	; 0x2cea <twi_readFrom+0x5e>
    2cf2:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2cf6:	84 17       	cp	r24, r20
    2cf8:	10 f4       	brcc	.+4      	; 0x2cfe <twi_readFrom+0x72>
    2cfa:	40 91 4b 07 	lds	r20, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2cfe:	ac e4       	ldi	r26, 0x4C	; 76
    2d00:	b7 e0       	ldi	r27, 0x07	; 7
    2d02:	96 2f       	mov	r25, r22
    2d04:	fb 01       	movw	r30, r22
    2d06:	8e 2f       	mov	r24, r30
    2d08:	89 1b       	sub	r24, r25
    2d0a:	84 17       	cp	r24, r20
    2d0c:	18 f4       	brcc	.+6      	; 0x2d14 <twi_readFrom+0x88>
    2d0e:	8d 91       	ld	r24, X+
    2d10:	81 93       	st	Z+, r24
    2d12:	f9 cf       	rjmp	.-14     	; 0x2d06 <twi_readFrom+0x7a>
    2d14:	84 2f       	mov	r24, r20
    2d16:	08 95       	ret
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	08 95       	ret

00002d1c <twi_writeTo>:
    2d1c:	0f 93       	push	r16
    2d1e:	41 32       	cpi	r20, 0x21	; 33
    2d20:	08 f0       	brcs	.+2      	; 0x2d24 <twi_writeTo+0x8>
    2d22:	4a c0       	rjmp	.+148    	; 0x2db8 <twi_writeTo+0x9c>
    2d24:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <twi_state>
    2d28:	91 11       	cpse	r25, r1
    2d2a:	fc cf       	rjmp	.-8      	; 0x2d24 <twi_writeTo+0x8>
    2d2c:	32 e0       	ldi	r19, 0x02	; 2
    2d2e:	30 93 73 07 	sts	0x0773, r19	; 0x800773 <twi_state>
    2d32:	00 93 71 07 	sts	0x0771, r16	; 0x800771 <twi_sendStop>
    2d36:	3f ef       	ldi	r19, 0xFF	; 255
    2d38:	30 93 06 07 	sts	0x0706, r19	; 0x800706 <twi_error>
    2d3c:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_masterBufferIndex>
    2d40:	40 93 4a 07 	sts	0x074A, r20	; 0x80074a <twi_masterBufferLength>
    2d44:	56 2f       	mov	r21, r22
    2d46:	ac e4       	ldi	r26, 0x4C	; 76
    2d48:	b7 e0       	ldi	r27, 0x07	; 7
    2d4a:	fb 01       	movw	r30, r22
    2d4c:	3e 2f       	mov	r19, r30
    2d4e:	35 1b       	sub	r19, r21
    2d50:	34 17       	cp	r19, r20
    2d52:	18 f4       	brcc	.+6      	; 0x2d5a <twi_writeTo+0x3e>
    2d54:	31 91       	ld	r19, Z+
    2d56:	3d 93       	st	X+, r19
    2d58:	f9 cf       	rjmp	.-14     	; 0x2d4c <twi_writeTo+0x30>
    2d5a:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <twi_slarw>
    2d5e:	30 91 72 07 	lds	r19, 0x0772	; 0x800772 <twi_slarw>
    2d62:	88 0f       	add	r24, r24
    2d64:	83 2b       	or	r24, r19
    2d66:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <twi_slarw>
    2d6a:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <twi_inRepStart>
    2d6e:	81 30       	cpi	r24, 0x01	; 1
    2d70:	61 f4       	brne	.+24     	; 0x2d8a <twi_writeTo+0x6e>
    2d72:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <twi_inRepStart>
    2d76:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <twi_slarw>
    2d7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2d7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d82:	83 fd       	sbrc	r24, 3
    2d84:	f8 cf       	rjmp	.-16     	; 0x2d76 <twi_writeTo+0x5a>
    2d86:	85 ec       	ldi	r24, 0xC5	; 197
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <twi_writeTo+0x70>
    2d8a:	85 ee       	ldi	r24, 0xE5	; 229
    2d8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2d90:	22 23       	and	r18, r18
    2d92:	21 f0       	breq	.+8      	; 0x2d9c <twi_writeTo+0x80>
    2d94:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <twi_state>
    2d98:	82 30       	cpi	r24, 0x02	; 2
    2d9a:	d1 f3       	breq	.-12     	; 0x2d90 <twi_writeTo+0x74>
    2d9c:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <twi_error>
    2da0:	8f 3f       	cpi	r24, 0xFF	; 255
    2da2:	79 f0       	breq	.+30     	; 0x2dc2 <twi_writeTo+0xa6>
    2da4:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <twi_error>
    2da8:	80 32       	cpi	r24, 0x20	; 32
    2daa:	41 f0       	breq	.+16     	; 0x2dbc <twi_writeTo+0xa0>
    2dac:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <twi_error>
    2db0:	80 33       	cpi	r24, 0x30	; 48
    2db2:	31 f0       	breq	.+12     	; 0x2dc0 <twi_writeTo+0xa4>
    2db4:	94 e0       	ldi	r25, 0x04	; 4
    2db6:	05 c0       	rjmp	.+10     	; 0x2dc2 <twi_writeTo+0xa6>
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	03 c0       	rjmp	.+6      	; 0x2dc2 <twi_writeTo+0xa6>
    2dbc:	92 e0       	ldi	r25, 0x02	; 2
    2dbe:	01 c0       	rjmp	.+2      	; 0x2dc2 <twi_writeTo+0xa6>
    2dc0:	93 e0       	ldi	r25, 0x03	; 3
    2dc2:	89 2f       	mov	r24, r25
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <twi_transmit>:
    2dc8:	40 91 28 07 	lds	r20, 0x0728	; 0x800728 <twi_txBufferLength>
    2dcc:	26 2f       	mov	r18, r22
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	24 0f       	add	r18, r20
    2dd2:	31 1d       	adc	r19, r1
    2dd4:	21 32       	cpi	r18, 0x21	; 33
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	dc f4       	brge	.+54     	; 0x2e10 <twi_transmit+0x48>
    2dda:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <twi_state>
    2dde:	24 30       	cpi	r18, 0x04	; 4
    2de0:	c9 f4       	brne	.+50     	; 0x2e14 <twi_transmit+0x4c>
    2de2:	fc 01       	movw	r30, r24
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	86 17       	cp	r24, r22
    2dea:	58 f4       	brcc	.+22     	; 0x2e02 <twi_transmit+0x3a>
    2dec:	30 91 28 07 	lds	r19, 0x0728	; 0x800728 <twi_txBufferLength>
    2df0:	21 91       	ld	r18, Z+
    2df2:	dc 01       	movw	r26, r24
    2df4:	a6 5d       	subi	r26, 0xD6	; 214
    2df6:	b8 4f       	sbci	r27, 0xF8	; 248
    2df8:	a3 0f       	add	r26, r19
    2dfa:	b1 1d       	adc	r27, r1
    2dfc:	2c 93       	st	X, r18
    2dfe:	01 96       	adiw	r24, 0x01	; 1
    2e00:	f3 cf       	rjmp	.-26     	; 0x2de8 <twi_transmit+0x20>
    2e02:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_txBufferLength>
    2e06:	68 0f       	add	r22, r24
    2e08:	60 93 28 07 	sts	0x0728, r22	; 0x800728 <twi_txBufferLength>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	08 95       	ret
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	08 95       	ret
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	08 95       	ret

00002e18 <twi_attachSlaveRxEvent>:
    2e18:	90 93 6d 07 	sts	0x076D, r25	; 0x80076d <twi_onSlaveReceive+0x1>
    2e1c:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <twi_onSlaveReceive>
    2e20:	08 95       	ret

00002e22 <twi_attachSlaveTxEvent>:
    2e22:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <twi_onSlaveTransmit+0x1>
    2e26:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <twi_onSlaveTransmit>
    2e2a:	08 95       	ret

00002e2c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2e2c:	85 ed       	ldi	r24, 0xD5	; 213
    2e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2e32:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2e36:	84 fd       	sbrc	r24, 4
    2e38:	fc cf       	rjmp	.-8      	; 0x2e32 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2e3a:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <twi_state>
    2e3e:	08 95       	ret

00002e40 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2e40:	85 ec       	ldi	r24, 0xC5	; 197
    2e42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2e46:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <twi_state>
    2e4a:	08 95       	ret

00002e4c <__vector_39>:
}

ISR(TWI_vect)
{
    2e4c:	1f 92       	push	r1
    2e4e:	0f 92       	push	r0
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	0f 92       	push	r0
    2e54:	11 24       	eor	r1, r1
    2e56:	0b b6       	in	r0, 0x3b	; 59
    2e58:	0f 92       	push	r0
    2e5a:	2f 93       	push	r18
    2e5c:	3f 93       	push	r19
    2e5e:	4f 93       	push	r20
    2e60:	5f 93       	push	r21
    2e62:	6f 93       	push	r22
    2e64:	7f 93       	push	r23
    2e66:	8f 93       	push	r24
    2e68:	9f 93       	push	r25
    2e6a:	af 93       	push	r26
    2e6c:	bf 93       	push	r27
    2e6e:	ef 93       	push	r30
    2e70:	ff 93       	push	r31
  switch(TW_STATUS){
    2e72:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2e76:	88 7f       	andi	r24, 0xF8	; 248
    2e78:	80 36       	cpi	r24, 0x60	; 96
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <__vector_39+0x32>
    2e7c:	9d c0       	rjmp	.+314    	; 0x2fb8 <__vector_39+0x16c>
    2e7e:	70 f5       	brcc	.+92     	; 0x2edc <__vector_39+0x90>
    2e80:	88 32       	cpi	r24, 0x28	; 40
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <__vector_39+0x3a>
    2e84:	5c c0       	rjmp	.+184    	; 0x2f3e <__vector_39+0xf2>
    2e86:	90 f4       	brcc	.+36     	; 0x2eac <__vector_39+0x60>
    2e88:	80 31       	cpi	r24, 0x10	; 16
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <__vector_39+0x42>
    2e8c:	55 c0       	rjmp	.+170    	; 0x2f38 <__vector_39+0xec>
    2e8e:	38 f4       	brcc	.+14     	; 0x2e9e <__vector_39+0x52>
    2e90:	88 23       	and	r24, r24
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <__vector_39+0x4a>
    2e94:	f3 c0       	rjmp	.+486    	; 0x307c <__vector_39+0x230>
    2e96:	88 30       	cpi	r24, 0x08	; 8
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <__vector_39+0x50>
    2e9a:	4e c0       	rjmp	.+156    	; 0x2f38 <__vector_39+0xec>
    2e9c:	f2 c0       	rjmp	.+484    	; 0x3082 <__vector_39+0x236>
    2e9e:	88 31       	cpi	r24, 0x18	; 24
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <__vector_39+0x58>
    2ea2:	4d c0       	rjmp	.+154    	; 0x2f3e <__vector_39+0xf2>
    2ea4:	80 32       	cpi	r24, 0x20	; 32
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <__vector_39+0x5e>
    2ea8:	5e c0       	rjmp	.+188    	; 0x2f66 <__vector_39+0x11a>
    2eaa:	eb c0       	rjmp	.+470    	; 0x3082 <__vector_39+0x236>
    2eac:	80 34       	cpi	r24, 0x40	; 64
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <__vector_39+0x66>
    2eb0:	69 c0       	rjmp	.+210    	; 0x2f84 <__vector_39+0x138>
    2eb2:	50 f4       	brcc	.+20     	; 0x2ec8 <__vector_39+0x7c>
    2eb4:	80 33       	cpi	r24, 0x30	; 48
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <__vector_39+0x6e>
    2eb8:	56 c0       	rjmp	.+172    	; 0x2f66 <__vector_39+0x11a>
    2eba:	88 33       	cpi	r24, 0x38	; 56
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <__vector_39+0x74>
    2ebe:	e1 c0       	rjmp	.+450    	; 0x3082 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2ec0:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <twi_error>
      twi_releaseBus();
    2ec4:	bd df       	rcall	.-134    	; 0x2e40 <twi_releaseBus>
      break;
    2ec6:	dd c0       	rjmp	.+442    	; 0x3082 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2ec8:	80 35       	cpi	r24, 0x50	; 80
    2eca:	09 f4       	brne	.+2      	; 0x2ece <__vector_39+0x82>
    2ecc:	4f c0       	rjmp	.+158    	; 0x2f6c <__vector_39+0x120>
    2ece:	88 35       	cpi	r24, 0x58	; 88
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <__vector_39+0x88>
    2ed2:	5d c0       	rjmp	.+186    	; 0x2f8e <__vector_39+0x142>
    2ed4:	88 34       	cpi	r24, 0x48	; 72
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <__vector_39+0x8e>
    2ed8:	d4 c0       	rjmp	.+424    	; 0x3082 <__vector_39+0x236>
    2eda:	d2 c0       	rjmp	.+420    	; 0x3080 <__vector_39+0x234>
    2edc:	88 39       	cpi	r24, 0x98	; 152
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <__vector_39+0x96>
    2ee0:	c3 c0       	rjmp	.+390    	; 0x3068 <__vector_39+0x21c>
    2ee2:	a8 f4       	brcc	.+42     	; 0x2f0e <__vector_39+0xc2>
    2ee4:	88 37       	cpi	r24, 0x78	; 120
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <__vector_39+0x9e>
    2ee8:	67 c0       	rjmp	.+206    	; 0x2fb8 <__vector_39+0x16c>
    2eea:	38 f4       	brcc	.+14     	; 0x2efa <__vector_39+0xae>
    2eec:	88 36       	cpi	r24, 0x68	; 104
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <__vector_39+0xa6>
    2ef0:	63 c0       	rjmp	.+198    	; 0x2fb8 <__vector_39+0x16c>
    2ef2:	80 37       	cpi	r24, 0x70	; 112
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <__vector_39+0xac>
    2ef6:	60 c0       	rjmp	.+192    	; 0x2fb8 <__vector_39+0x16c>
    2ef8:	c4 c0       	rjmp	.+392    	; 0x3082 <__vector_39+0x236>
    2efa:	88 38       	cpi	r24, 0x88	; 136
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <__vector_39+0xb4>
    2efe:	b4 c0       	rjmp	.+360    	; 0x3068 <__vector_39+0x21c>
    2f00:	80 39       	cpi	r24, 0x90	; 144
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <__vector_39+0xba>
    2f04:	5f c0       	rjmp	.+190    	; 0x2fc4 <__vector_39+0x178>
    2f06:	80 38       	cpi	r24, 0x80	; 128
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <__vector_39+0xc0>
    2f0a:	bb c0       	rjmp	.+374    	; 0x3082 <__vector_39+0x236>
    2f0c:	5b c0       	rjmp	.+182    	; 0x2fc4 <__vector_39+0x178>
    2f0e:	80 3b       	cpi	r24, 0xB0	; 176
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <__vector_39+0xc8>
    2f12:	82 c0       	rjmp	.+260    	; 0x3018 <__vector_39+0x1cc>
    2f14:	38 f4       	brcc	.+14     	; 0x2f24 <__vector_39+0xd8>
    2f16:	80 3a       	cpi	r24, 0xA0	; 160
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <__vector_39+0xd0>
    2f1a:	66 c0       	rjmp	.+204    	; 0x2fe8 <__vector_39+0x19c>
    2f1c:	88 3a       	cpi	r24, 0xA8	; 168
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <__vector_39+0xd6>
    2f20:	7b c0       	rjmp	.+246    	; 0x3018 <__vector_39+0x1cc>
    2f22:	af c0       	rjmp	.+350    	; 0x3082 <__vector_39+0x236>
    2f24:	80 3c       	cpi	r24, 0xC0	; 192
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <__vector_39+0xde>
    2f28:	a3 c0       	rjmp	.+326    	; 0x3070 <__vector_39+0x224>
    2f2a:	88 3c       	cpi	r24, 0xC8	; 200
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <__vector_39+0xe4>
    2f2e:	a0 c0       	rjmp	.+320    	; 0x3070 <__vector_39+0x224>
    2f30:	88 3b       	cpi	r24, 0xB8	; 184
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <__vector_39+0xea>
    2f34:	86 c0       	rjmp	.+268    	; 0x3042 <__vector_39+0x1f6>
    2f36:	a5 c0       	rjmp	.+330    	; 0x3082 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2f38:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <twi_slarw>
    2f3c:	10 c0       	rjmp	.+32     	; 0x2f5e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f3e:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2f42:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_masterBufferLength>
    2f46:	98 17       	cp	r25, r24
    2f48:	70 f5       	brcc	.+92     	; 0x2fa6 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2f4a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	8e 0f       	add	r24, r30
    2f52:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_masterBufferIndex>
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	e4 5b       	subi	r30, 0xB4	; 180
    2f5a:	f8 4f       	sbci	r31, 0xF8	; 248
    2f5c:	80 81       	ld	r24, Z
    2f5e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f62:	85 ec       	ldi	r24, 0xC5	; 197
    2f64:	82 c0       	rjmp	.+260    	; 0x306a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f66:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <twi_error>
    2f6a:	8a c0       	rjmp	.+276    	; 0x3080 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f6c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	8e 0f       	add	r24, r30
    2f74:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_masterBufferIndex>
    2f78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	e4 5b       	subi	r30, 0xB4	; 180
    2f80:	f8 4f       	sbci	r31, 0xF8	; 248
    2f82:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f84:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2f88:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_masterBufferLength>
    2f8c:	6a c0       	rjmp	.+212    	; 0x3062 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f8e:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <twi_masterBufferIndex>
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	8e 0f       	add	r24, r30
    2f96:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_masterBufferIndex>
    2f9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	e4 5b       	subi	r30, 0xB4	; 180
    2fa2:	f8 4f       	sbci	r31, 0xF8	; 248
    2fa4:	80 83       	st	Z, r24
	if (twi_sendStop)
    2fa6:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <twi_sendStop>
    2faa:	81 11       	cpse	r24, r1
    2fac:	69 c0       	rjmp	.+210    	; 0x3080 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2fb4:	84 ea       	ldi	r24, 0xA4	; 164
    2fb6:	5d c0       	rjmp	.+186    	; 0x3072 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2fb8:	83 e0       	ldi	r24, 0x03	; 3
    2fba:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2fbe:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <twi_rxBufferIndex>
    2fc2:	cf cf       	rjmp	.-98     	; 0x2f62 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2fc4:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    2fc8:	80 32       	cpi	r24, 0x20	; 32
    2fca:	08 f0       	brcs	.+2      	; 0x2fce <__vector_39+0x182>
    2fcc:	4d c0       	rjmp	.+154    	; 0x3068 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2fce:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <twi_rxBufferIndex>
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	8e 0f       	add	r24, r30
    2fd6:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <twi_rxBufferIndex>
    2fda:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	e8 5f       	subi	r30, 0xF8	; 248
    2fe2:	f8 4f       	sbci	r31, 0xF8	; 248
    2fe4:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2fe6:	bd cf       	rjmp	.-134    	; 0x2f62 <__vector_39+0x116>
    2fe8:	2b df       	rcall	.-426    	; 0x2e40 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2fea:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <twi_rxBufferIndex>
    2fee:	80 32       	cpi	r24, 0x20	; 32
    2ff0:	30 f4       	brcc	.+12     	; 0x2ffe <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2ff2:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <twi_rxBufferIndex>
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	e8 5f       	subi	r30, 0xF8	; 248
    2ffa:	f8 4f       	sbci	r31, 0xF8	; 248
    2ffc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2ffe:	60 91 07 07 	lds	r22, 0x0707	; 0x800707 <twi_rxBufferIndex>
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <twi_onSlaveReceive>
    3008:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <twi_onSlaveReceive+0x1>
    300c:	88 e0       	ldi	r24, 0x08	; 8
    300e:	97 e0       	ldi	r25, 0x07	; 7
    3010:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3012:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <twi_rxBufferIndex>
      break;
    3016:	35 c0       	rjmp	.+106    	; 0x3082 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3018:	84 e0       	ldi	r24, 0x04	; 4
    301a:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    301e:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3022:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3026:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <twi_onSlaveTransmit>
    302a:	f0 91 6f 07 	lds	r31, 0x076F	; 0x80076f <twi_onSlaveTransmit+0x1>
    302e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3030:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_txBufferLength>
    3034:	81 11       	cpse	r24, r1
    3036:	05 c0       	rjmp	.+10     	; 0x3042 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    303e:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3042:	e0 91 29 07 	lds	r30, 0x0729	; 0x800729 <twi_txBufferIndex>
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	8e 0f       	add	r24, r30
    304a:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <twi_txBufferIndex>
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	e6 5d       	subi	r30, 0xD6	; 214
    3052:	f8 4f       	sbci	r31, 0xF8	; 248
    3054:	80 81       	ld	r24, Z
    3056:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    305a:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <twi_txBufferIndex>
    305e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_txBufferLength>
    3062:	98 17       	cp	r25, r24
    3064:	08 f4       	brcc	.+2      	; 0x3068 <__vector_39+0x21c>
    3066:	7d cf       	rjmp	.-262    	; 0x2f62 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3068:	85 e8       	ldi	r24, 0x85	; 133
    306a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    306e:	09 c0       	rjmp	.+18     	; 0x3082 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3070:	85 ec       	ldi	r24, 0xC5	; 197
    3072:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3076:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <twi_state>
      break;
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    307c:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <twi_error>
      twi_stop();
    3080:	d5 de       	rcall	.-598    	; 0x2e2c <twi_stop>
      break;
  }
}
    3082:	ff 91       	pop	r31
    3084:	ef 91       	pop	r30
    3086:	bf 91       	pop	r27
    3088:	af 91       	pop	r26
    308a:	9f 91       	pop	r25
    308c:	8f 91       	pop	r24
    308e:	7f 91       	pop	r23
    3090:	6f 91       	pop	r22
    3092:	5f 91       	pop	r21
    3094:	4f 91       	pop	r20
    3096:	3f 91       	pop	r19
    3098:	2f 91       	pop	r18
    309a:	0f 90       	pop	r0
    309c:	0b be       	out	0x3b, r0	; 59
    309e:	0f 90       	pop	r0
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	0f 90       	pop	r0
    30a4:	1f 90       	pop	r1
    30a6:	18 95       	reti

000030a8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    30a8:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	20 91 a9 07 	lds	r18, 0x07A9	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    30b2:	82 1b       	sub	r24, r18
    30b4:	91 09       	sbc	r25, r1
    30b6:	08 95       	ret

000030b8 <_ZN7TwoWire4readEv>:
    30b8:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    30bc:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    30c0:	98 17       	cp	r25, r24
    30c2:	50 f4       	brcc	.+20     	; 0x30d8 <_ZN7TwoWire4readEv+0x20>
    30c4:	e9 2f       	mov	r30, r25
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	e6 55       	subi	r30, 0x56	; 86
    30ca:	f8 4f       	sbci	r31, 0xF8	; 248
    30cc:	20 81       	ld	r18, Z
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	9f 5f       	subi	r25, 0xFF	; 255
    30d2:	90 93 a9 07 	sts	0x07A9, r25	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <_ZN7TwoWire4readEv+0x24>
    30d8:	2f ef       	ldi	r18, 0xFF	; 255
    30da:	3f ef       	ldi	r19, 0xFF	; 255
    30dc:	c9 01       	movw	r24, r18
    30de:	08 95       	ret

000030e0 <_ZN7TwoWire4peekEv>:
    30e0:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    30e4:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    30e8:	e8 17       	cp	r30, r24
    30ea:	30 f4       	brcc	.+12     	; 0x30f8 <_ZN7TwoWire4peekEv+0x18>
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	e6 55       	subi	r30, 0x56	; 86
    30f0:	f8 4f       	sbci	r31, 0xF8	; 248
    30f2:	80 81       	ld	r24, Z
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	08 95       	ret
    30f8:	8f ef       	ldi	r24, 0xFF	; 255
    30fa:	9f ef       	ldi	r25, 0xFF	; 255
    30fc:	08 95       	ret

000030fe <_ZN7TwoWire5flushEv>:
    30fe:	08 95       	ret

00003100 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	ec 01       	movw	r28, r24
    3106:	e0 91 80 07 	lds	r30, 0x0780	; 0x800780 <_ZN7TwoWire14user_onReceiveE>
    310a:	f0 91 81 07 	lds	r31, 0x0781	; 0x800781 <_ZN7TwoWire14user_onReceiveE+0x1>
    310e:	30 97       	sbiw	r30, 0x00	; 0
    3110:	f1 f0       	breq	.+60     	; 0x314e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3112:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    3116:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    311a:	98 17       	cp	r25, r24
    311c:	c0 f0       	brcs	.+48     	; 0x314e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	29 2f       	mov	r18, r25
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	26 17       	cp	r18, r22
    3126:	37 07       	cpc	r19, r23
    3128:	54 f4       	brge	.+20     	; 0x313e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    312a:	de 01       	movw	r26, r28
    312c:	a2 0f       	add	r26, r18
    312e:	b3 1f       	adc	r27, r19
    3130:	4c 91       	ld	r20, X
    3132:	d9 01       	movw	r26, r18
    3134:	a6 55       	subi	r26, 0x56	; 86
    3136:	b8 4f       	sbci	r27, 0xF8	; 248
    3138:	4c 93       	st	X, r20
    313a:	9f 5f       	subi	r25, 0xFF	; 255
    313c:	f1 cf       	rjmp	.-30     	; 0x3120 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    313e:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    3142:	60 93 a8 07 	sts	0x07A8, r22	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    3146:	cb 01       	movw	r24, r22
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	19 94       	eijmp
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	08 95       	ret

00003154 <_ZN7TwoWire16onRequestServiceEv>:
    3154:	e0 91 82 07 	lds	r30, 0x0782	; 0x800782 <_ZN7TwoWire14user_onRequestE>
    3158:	f0 91 83 07 	lds	r31, 0x0783	; 0x800783 <_ZN7TwoWire14user_onRequestE+0x1>
    315c:	30 97       	sbiw	r30, 0x00	; 0
    315e:	29 f0       	breq	.+10     	; 0x316a <_ZN7TwoWire16onRequestServiceEv+0x16>
    3160:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <_ZN7TwoWire13txBufferIndexE>
    3164:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    3168:	19 94       	eijmp
    316a:	08 95       	ret

0000316c <_ZN7TwoWire5writeEPKhj>:
    316c:	cf 92       	push	r12
    316e:	df 92       	push	r13
    3170:	ef 92       	push	r14
    3172:	ff 92       	push	r15
    3174:	0f 93       	push	r16
    3176:	1f 93       	push	r17
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	7c 01       	movw	r14, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8a 01       	movw	r16, r20
    3182:	20 91 84 07 	lds	r18, 0x0784	; 0x800784 <_ZN7TwoWire12transmittingE>
    3186:	22 23       	and	r18, r18
    3188:	89 f0       	breq	.+34     	; 0x31ac <_ZN7TwoWire5writeEPKhj+0x40>
    318a:	eb 01       	movw	r28, r22
    318c:	6b 01       	movw	r12, r22
    318e:	c4 0e       	add	r12, r20
    3190:	d5 1e       	adc	r13, r21
    3192:	cc 15       	cp	r28, r12
    3194:	dd 05       	cpc	r29, r13
    3196:	61 f0       	breq	.+24     	; 0x31b0 <_ZN7TwoWire5writeEPKhj+0x44>
    3198:	69 91       	ld	r22, Y+
    319a:	d7 01       	movw	r26, r14
    319c:	ed 91       	ld	r30, X+
    319e:	fc 91       	ld	r31, X
    31a0:	01 90       	ld	r0, Z+
    31a2:	f0 81       	ld	r31, Z
    31a4:	e0 2d       	mov	r30, r0
    31a6:	c7 01       	movw	r24, r14
    31a8:	19 95       	eicall
    31aa:	f3 cf       	rjmp	.-26     	; 0x3192 <_ZN7TwoWire5writeEPKhj+0x26>
    31ac:	64 2f       	mov	r22, r20
    31ae:	0c de       	rcall	.-1000   	; 0x2dc8 <twi_transmit>
    31b0:	c8 01       	movw	r24, r16
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <_ZN7TwoWire5writeEh>:
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	1f 92       	push	r1
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	69 83       	std	Y+1, r22	; 0x01
    31d0:	20 91 84 07 	lds	r18, 0x0784	; 0x800784 <_ZN7TwoWire12transmittingE>
    31d4:	22 23       	and	r18, r18
    31d6:	d1 f0       	breq	.+52     	; 0x320c <_ZN7TwoWire5writeEh+0x48>
    31d8:	20 91 85 07 	lds	r18, 0x0785	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    31dc:	20 32       	cpi	r18, 0x20	; 32
    31de:	40 f0       	brcs	.+16     	; 0x31f0 <_ZN7TwoWire5writeEh+0x2c>
    31e0:	21 e0       	ldi	r18, 0x01	; 1
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	fc 01       	movw	r30, r24
    31e6:	33 83       	std	Z+3, r19	; 0x03
    31e8:	22 83       	std	Z+2, r18	; 0x02
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	14 c0       	rjmp	.+40     	; 0x3218 <_ZN7TwoWire5writeEh+0x54>
    31f0:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire13txBufferIndexE>
    31f4:	e8 2f       	mov	r30, r24
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	e9 57       	subi	r30, 0x79	; 121
    31fa:	f8 4f       	sbci	r31, 0xF8	; 248
    31fc:	99 81       	ldd	r25, Y+1	; 0x01
    31fe:	90 83       	st	Z, r25
    3200:	8f 5f       	subi	r24, 0xFF	; 255
    3202:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <_ZN7TwoWire13txBufferIndexE>
    3206:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    320a:	04 c0       	rjmp	.+8      	; 0x3214 <_ZN7TwoWire5writeEh+0x50>
    320c:	61 e0       	ldi	r22, 0x01	; 1
    320e:	ce 01       	movw	r24, r28
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	da dd       	rcall	.-1100   	; 0x2dc8 <twi_transmit>
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0f 90       	pop	r0
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	08 95       	ret

00003220 <_ZN7TwoWireC1Ev>:
    3220:	fc 01       	movw	r30, r24
    3222:	13 82       	std	Z+3, r1	; 0x03
    3224:	12 82       	std	Z+2, r1	; 0x02
    3226:	88 ee       	ldi	r24, 0xE8	; 232
    3228:	93 e0       	ldi	r25, 0x03	; 3
    322a:	a0 e0       	ldi	r26, 0x00	; 0
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	84 83       	std	Z+4, r24	; 0x04
    3230:	95 83       	std	Z+5, r25	; 0x05
    3232:	a6 83       	std	Z+6, r26	; 0x06
    3234:	b7 83       	std	Z+7, r27	; 0x07
    3236:	83 e9       	ldi	r24, 0x93	; 147
    3238:	95 e0       	ldi	r25, 0x05	; 5
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	80 83       	st	Z, r24
    323e:	08 95       	ret

00003240 <_ZN7TwoWire5beginEv>:
    3240:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    3244:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    3248:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <_ZN7TwoWire13txBufferIndexE>
    324c:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    3250:	ff dc       	rcall	.-1538   	; 0x2c50 <twi_init>
    3252:	8a ea       	ldi	r24, 0xAA	; 170
    3254:	98 e1       	ldi	r25, 0x18	; 24
    3256:	e5 dd       	rcall	.-1078   	; 0x2e22 <twi_attachSlaveTxEvent>
    3258:	80 e8       	ldi	r24, 0x80	; 128
    325a:	98 e1       	ldi	r25, 0x18	; 24
    325c:	dd cd       	rjmp	.-1094   	; 0x2e18 <twi_attachSlaveRxEvent>

0000325e <_ZN7TwoWire17beginTransmissionEh>:
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <_ZN7TwoWire12transmittingE>
    3264:	60 93 a7 07 	sts	0x07A7, r22	; 0x8007a7 <_ZN7TwoWire9txAddressE>
    3268:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <_ZN7TwoWire13txBufferIndexE>
    326c:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    3270:	08 95       	ret

00003272 <_ZN7TwoWire17beginTransmissionEi>:
    3272:	f5 cf       	rjmp	.-22     	; 0x325e <_ZN7TwoWire17beginTransmissionEh>

00003274 <_ZN7TwoWire15endTransmissionEh>:
    3274:	0f 93       	push	r16
    3276:	06 2f       	mov	r16, r22
    3278:	21 e0       	ldi	r18, 0x01	; 1
    327a:	40 91 85 07 	lds	r20, 0x0785	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    327e:	67 e8       	ldi	r22, 0x87	; 135
    3280:	77 e0       	ldi	r23, 0x07	; 7
    3282:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <_ZN7TwoWire9txAddressE>
    3286:	4a dd       	rcall	.-1388   	; 0x2d1c <twi_writeTo>
    3288:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <_ZN7TwoWire13txBufferIndexE>
    328c:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <_ZN7TwoWire14txBufferLengthE>
    3290:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <_ZN7TwoWire12transmittingE>
    3294:	0f 91       	pop	r16
    3296:	08 95       	ret

00003298 <_ZN7TwoWire11requestFromEhhmhh>:
    3298:	4f 92       	push	r4
    329a:	5f 92       	push	r5
    329c:	6f 92       	push	r6
    329e:	7f 92       	push	r7
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	5c 01       	movw	r10, r24
    32b4:	f6 2e       	mov	r15, r22
    32b6:	d4 2f       	mov	r29, r20
    32b8:	28 01       	movw	r4, r16
    32ba:	39 01       	movw	r6, r18
    32bc:	ee 20       	and	r14, r14
    32be:	11 f1       	breq	.+68     	; 0x3304 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    32c0:	ce df       	rcall	.-100    	; 0x325e <_ZN7TwoWire17beginTransmissionEh>
    32c2:	ce 2d       	mov	r28, r14
    32c4:	c4 30       	cpi	r28, 0x04	; 4
    32c6:	08 f0       	brcs	.+2      	; 0x32ca <_ZN7TwoWire11requestFromEhhmhh+0x32>
    32c8:	c3 e0       	ldi	r28, 0x03	; 3
    32ca:	c1 50       	subi	r28, 0x01	; 1
    32cc:	c0 f0       	brcs	.+48     	; 0x32fe <_ZN7TwoWire11requestFromEhhmhh+0x66>
    32ce:	28 e0       	ldi	r18, 0x08	; 8
    32d0:	c2 9f       	mul	r28, r18
    32d2:	c0 01       	movw	r24, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	a3 01       	movw	r20, r6
    32d8:	92 01       	movw	r18, r4
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    32dc:	56 95       	lsr	r21
    32de:	47 95       	ror	r20
    32e0:	37 95       	ror	r19
    32e2:	27 95       	ror	r18
    32e4:	8a 95       	dec	r24
    32e6:	d2 f7       	brpl	.-12     	; 0x32dc <_ZN7TwoWire11requestFromEhhmhh+0x44>
    32e8:	ca 01       	movw	r24, r20
    32ea:	b9 01       	movw	r22, r18
    32ec:	d5 01       	movw	r26, r10
    32ee:	ed 91       	ld	r30, X+
    32f0:	fc 91       	ld	r31, X
    32f2:	01 90       	ld	r0, Z+
    32f4:	f0 81       	ld	r31, Z
    32f6:	e0 2d       	mov	r30, r0
    32f8:	c5 01       	movw	r24, r10
    32fa:	19 95       	eicall
    32fc:	e6 cf       	rjmp	.-52     	; 0x32ca <_ZN7TwoWire11requestFromEhhmhh+0x32>
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	c5 01       	movw	r24, r10
    3302:	b8 df       	rcall	.-144    	; 0x3274 <_ZN7TwoWire15endTransmissionEh>
    3304:	4d 2f       	mov	r20, r29
    3306:	d1 32       	cpi	r29, 0x21	; 33
    3308:	08 f0       	brcs	.+2      	; 0x330c <_ZN7TwoWire11requestFromEhhmhh+0x74>
    330a:	40 e2       	ldi	r20, 0x20	; 32
    330c:	2c 2d       	mov	r18, r12
    330e:	6a ea       	ldi	r22, 0xAA	; 170
    3310:	77 e0       	ldi	r23, 0x07	; 7
    3312:	8f 2d       	mov	r24, r15
    3314:	bb dc       	rcall	.-1674   	; 0x2c8c <twi_readFrom>
    3316:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <_ZN7TwoWire13rxBufferIndexE>
    331a:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <_ZN7TwoWire14rxBufferLengthE>
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	cf 90       	pop	r12
    332c:	bf 90       	pop	r11
    332e:	af 90       	pop	r10
    3330:	7f 90       	pop	r7
    3332:	6f 90       	pop	r6
    3334:	5f 90       	pop	r5
    3336:	4f 90       	pop	r4
    3338:	08 95       	ret

0000333a <_ZN7TwoWire11requestFromEhhh>:
    333a:	cf 92       	push	r12
    333c:	ef 92       	push	r14
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	c2 2e       	mov	r12, r18
    3344:	e1 2c       	mov	r14, r1
    3346:	00 e0       	ldi	r16, 0x00	; 0
    3348:	10 e0       	ldi	r17, 0x00	; 0
    334a:	98 01       	movw	r18, r16
    334c:	a5 df       	rcall	.-182    	; 0x3298 <_ZN7TwoWire11requestFromEhhmhh>
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ef 90       	pop	r14
    3354:	cf 90       	pop	r12
    3356:	08 95       	ret

00003358 <_ZN7TwoWire11requestFromEhh>:
    3358:	21 e0       	ldi	r18, 0x01	; 1
    335a:	ef cf       	rjmp	.-34     	; 0x333a <_ZN7TwoWire11requestFromEhhh>

0000335c <_ZN7TwoWire11requestFromEii>:
    335c:	21 e0       	ldi	r18, 0x01	; 1
    335e:	ed cf       	rjmp	.-38     	; 0x333a <_ZN7TwoWire11requestFromEhhh>

00003360 <_ZN7TwoWire15endTransmissionEv>:
    3360:	61 e0       	ldi	r22, 0x01	; 1
    3362:	88 cf       	rjmp	.-240    	; 0x3274 <_ZN7TwoWire15endTransmissionEh>

00003364 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3364:	84 e7       	ldi	r24, 0x74	; 116
    3366:	97 e0       	ldi	r25, 0x07	; 7
    3368:	5b cf       	rjmp	.-330    	; 0x3220 <_ZN7TwoWireC1Ev>

0000336a <_ZN20TempHumidPressSensorC1Ev>:
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;

// constructor
TempHumidPressSensor::TempHumidPressSensor()
    336a:	08 95       	ret

0000336c <_ZN20TempHumidPressSensorD1Ev>:
{
} //constructor

// destructor
TempHumidPressSensor::~TempHumidPressSensor()
    336c:	08 95       	ret

0000336e <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv>:
{
} //~destructor

void TempHumidPressSensor::initTempHumidPressSensor()
{
	bool status = bme280.begin();
    336e:	8a ec       	ldi	r24, 0xCA	; 202
    3370:	97 e0       	ldi	r25, 0x07	; 7
    3372:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN15Adafruit_BME2805beginEv>
	
	if (!status)
    3376:	81 11       	cpse	r24, r1
    3378:	06 c0       	rjmp	.+12     	; 0x3386 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x18>
	{
		Serial.println("Error: Couldn't find BME280, please ensure that the BME280 is powered and correctly wired!");
    337a:	67 e1       	ldi	r22, 0x17	; 23
    337c:	73 e0       	ldi	r23, 0x03	; 3
    337e:	8d ef       	ldi	r24, 0xFD	; 253
    3380:	97 e0       	ldi	r25, 0x07	; 7
    3382:	6d d6       	rcall	.+3290   	; 0x405e <_ZN5Print7printlnEPKc>
    3384:	ff cf       	rjmp	.-2      	; 0x3384 <_ZN20TempHumidPressSensor24initTempHumidPressSensorEv+0x16>
		while (1);
	}
	else if (status)
	{
		Serial.println("BME280\tsuccessfully initialized!");
    3386:	61 ea       	ldi	r22, 0xA1	; 161
    3388:	75 e0       	ldi	r23, 0x05	; 5
    338a:	8d ef       	ldi	r24, 0xFD	; 253
    338c:	97 e0       	ldi	r25, 0x07	; 7
    338e:	67 c6       	rjmp	.+3278   	; 0x405e <_ZN5Print7printlnEPKc>

00003390 <_ZN20TempHumidPressSensor7setDataEv>:
	}
} //initTempHumidPressSensor

void TempHumidPressSensor::setData()
{
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	ec 01       	movw	r28, r24
	temperatur = bme280.readTemperature();
    3396:	8a ec       	ldi	r24, 0xCA	; 202
    3398:	97 e0       	ldi	r25, 0x07	; 7
    339a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN15Adafruit_BME28015readTemperatureEv>
    339e:	68 83       	st	Y, r22
    33a0:	79 83       	std	Y+1, r23	; 0x01
    33a2:	8a 83       	std	Y+2, r24	; 0x02
    33a4:	9b 83       	std	Y+3, r25	; 0x03
	humidity = bme280.readHumidity();
    33a6:	8a ec       	ldi	r24, 0xCA	; 202
    33a8:	97 e0       	ldi	r25, 0x07	; 7
    33aa:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN15Adafruit_BME28012readHumidityEv>
    33ae:	6c 83       	std	Y+4, r22	; 0x04
    33b0:	7d 83       	std	Y+5, r23	; 0x05
    33b2:	8e 83       	std	Y+6, r24	; 0x06
    33b4:	9f 83       	std	Y+7, r25	; 0x07
	pressure = bme280.readPressure();
    33b6:	8a ec       	ldi	r24, 0xCA	; 202
    33b8:	97 e0       	ldi	r25, 0x07	; 7
    33ba:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_ZN15Adafruit_BME28012readPressureEv>
    33be:	68 87       	std	Y+8, r22	; 0x08
    33c0:	79 87       	std	Y+9, r23	; 0x09
    33c2:	8a 87       	std	Y+10, r24	; 0x0a
    33c4:	9b 87       	std	Y+11, r25	; 0x0b
	altitude = bme280.readAltitude(SEALEVELPRESSURE_HPA);
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e5       	ldi	r21, 0x50	; 80
    33ca:	6d e7       	ldi	r22, 0x7D	; 125
    33cc:	74 e4       	ldi	r23, 0x44	; 68
    33ce:	8a ec       	ldi	r24, 0xCA	; 202
    33d0:	97 e0       	ldi	r25, 0x07	; 7
    33d2:	0e 94 3b 10 	call	0x2076	; 0x2076 <_ZN15Adafruit_BME28012readAltitudeEf>
    33d6:	6c 87       	std	Y+12, r22	; 0x0c
    33d8:	7d 87       	std	Y+13, r23	; 0x0d
    33da:	8e 87       	std	Y+14, r24	; 0x0e
    33dc:	9f 87       	std	Y+15, r25	; 0x0f
} //setData
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	08 95       	ret

000033e4 <_ZN20TempHumidPressSensor7getDataEv>:

BME280SensorData TempHumidPressSensor::getData()
{
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	ec 01       	movw	r28, r24
    33ee:	8b 01       	movw	r16, r22
	setData();
    33f0:	cb 01       	movw	r24, r22
    33f2:	ce df       	rcall	.-100    	; 0x3390 <_ZN20TempHumidPressSensor7setDataEv>
	BME280SensorData sensordata;
	
	sensordata.t = temperatur;
    33f4:	f8 01       	movw	r30, r16
    33f6:	80 81       	ld	r24, Z
    33f8:	91 81       	ldd	r25, Z+1	; 0x01
    33fa:	a2 81       	ldd	r26, Z+2	; 0x02
    33fc:	b3 81       	ldd	r27, Z+3	; 0x03
    33fe:	88 83       	st	Y, r24
    3400:	99 83       	std	Y+1, r25	; 0x01
    3402:	aa 83       	std	Y+2, r26	; 0x02
    3404:	bb 83       	std	Y+3, r27	; 0x03
	sensordata.h = humidity;
    3406:	84 81       	ldd	r24, Z+4	; 0x04
    3408:	95 81       	ldd	r25, Z+5	; 0x05
    340a:	a6 81       	ldd	r26, Z+6	; 0x06
    340c:	b7 81       	ldd	r27, Z+7	; 0x07
    340e:	8c 83       	std	Y+4, r24	; 0x04
    3410:	9d 83       	std	Y+5, r25	; 0x05
    3412:	ae 83       	std	Y+6, r26	; 0x06
    3414:	bf 83       	std	Y+7, r27	; 0x07
	sensordata.p = pressure;
    3416:	80 85       	ldd	r24, Z+8	; 0x08
    3418:	91 85       	ldd	r25, Z+9	; 0x09
    341a:	a2 85       	ldd	r26, Z+10	; 0x0a
    341c:	b3 85       	ldd	r27, Z+11	; 0x0b
    341e:	88 87       	std	Y+8, r24	; 0x08
    3420:	99 87       	std	Y+9, r25	; 0x09
    3422:	aa 87       	std	Y+10, r26	; 0x0a
    3424:	bb 87       	std	Y+11, r27	; 0x0b
	sensordata.a = altitude;
    3426:	84 85       	ldd	r24, Z+12	; 0x0c
    3428:	95 85       	ldd	r25, Z+13	; 0x0d
    342a:	a6 85       	ldd	r26, Z+14	; 0x0e
    342c:	b7 85       	ldd	r27, Z+15	; 0x0f
    342e:	8c 87       	std	Y+12, r24	; 0x0c
    3430:	9d 87       	std	Y+13, r25	; 0x0d
    3432:	ae 87       	std	Y+14, r26	; 0x0e
    3434:	bf 87       	std	Y+15, r27	; 0x0f
	
	return sensordata;
} //getData
    3436:	ce 01       	movw	r24, r28
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	08 95       	ret

00003442 <_GLOBAL__sub_I_bme280>:
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "SystemDefinitions.h"
#include "TempHumidPressSensor.h"

Adafruit_BME280 bme280;
    3442:	8a ec       	ldi	r24, 0xCA	; 202
    3444:	97 e0       	ldi	r25, 0x07	; 7
    3446:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_ZN15Adafruit_BME280C1Ev>

0000344a <__subsf3>:
    344a:	50 58       	subi	r21, 0x80	; 128

0000344c <__addsf3>:
    344c:	bb 27       	eor	r27, r27
    344e:	aa 27       	eor	r26, r26
    3450:	0e d0       	rcall	.+28     	; 0x346e <__addsf3x>
    3452:	96 c1       	rjmp	.+812    	; 0x3780 <__fp_round>
    3454:	87 d1       	rcall	.+782    	; 0x3764 <__fp_pscA>
    3456:	30 f0       	brcs	.+12     	; 0x3464 <__addsf3+0x18>
    3458:	8c d1       	rcall	.+792    	; 0x3772 <__fp_pscB>
    345a:	20 f0       	brcs	.+8      	; 0x3464 <__addsf3+0x18>
    345c:	31 f4       	brne	.+12     	; 0x346a <__addsf3+0x1e>
    345e:	9f 3f       	cpi	r25, 0xFF	; 255
    3460:	11 f4       	brne	.+4      	; 0x3466 <__addsf3+0x1a>
    3462:	1e f4       	brtc	.+6      	; 0x346a <__addsf3+0x1e>
    3464:	6c c1       	rjmp	.+728    	; 0x373e <__fp_nan>
    3466:	0e f4       	brtc	.+2      	; 0x346a <__addsf3+0x1e>
    3468:	e0 95       	com	r30
    346a:	e7 fb       	bst	r30, 7
    346c:	62 c1       	rjmp	.+708    	; 0x3732 <__fp_inf>

0000346e <__addsf3x>:
    346e:	e9 2f       	mov	r30, r25
    3470:	98 d1       	rcall	.+816    	; 0x37a2 <__fp_split3>
    3472:	80 f3       	brcs	.-32     	; 0x3454 <__addsf3+0x8>
    3474:	ba 17       	cp	r27, r26
    3476:	62 07       	cpc	r22, r18
    3478:	73 07       	cpc	r23, r19
    347a:	84 07       	cpc	r24, r20
    347c:	95 07       	cpc	r25, r21
    347e:	18 f0       	brcs	.+6      	; 0x3486 <__addsf3x+0x18>
    3480:	71 f4       	brne	.+28     	; 0x349e <__addsf3x+0x30>
    3482:	9e f5       	brtc	.+102    	; 0x34ea <__addsf3x+0x7c>
    3484:	b0 c1       	rjmp	.+864    	; 0x37e6 <__fp_zero>
    3486:	0e f4       	brtc	.+2      	; 0x348a <__addsf3x+0x1c>
    3488:	e0 95       	com	r30
    348a:	0b 2e       	mov	r0, r27
    348c:	ba 2f       	mov	r27, r26
    348e:	a0 2d       	mov	r26, r0
    3490:	0b 01       	movw	r0, r22
    3492:	b9 01       	movw	r22, r18
    3494:	90 01       	movw	r18, r0
    3496:	0c 01       	movw	r0, r24
    3498:	ca 01       	movw	r24, r20
    349a:	a0 01       	movw	r20, r0
    349c:	11 24       	eor	r1, r1
    349e:	ff 27       	eor	r31, r31
    34a0:	59 1b       	sub	r21, r25
    34a2:	99 f0       	breq	.+38     	; 0x34ca <__addsf3x+0x5c>
    34a4:	59 3f       	cpi	r21, 0xF9	; 249
    34a6:	50 f4       	brcc	.+20     	; 0x34bc <__addsf3x+0x4e>
    34a8:	50 3e       	cpi	r21, 0xE0	; 224
    34aa:	68 f1       	brcs	.+90     	; 0x3506 <__addsf3x+0x98>
    34ac:	1a 16       	cp	r1, r26
    34ae:	f0 40       	sbci	r31, 0x00	; 0
    34b0:	a2 2f       	mov	r26, r18
    34b2:	23 2f       	mov	r18, r19
    34b4:	34 2f       	mov	r19, r20
    34b6:	44 27       	eor	r20, r20
    34b8:	58 5f       	subi	r21, 0xF8	; 248
    34ba:	f3 cf       	rjmp	.-26     	; 0x34a2 <__addsf3x+0x34>
    34bc:	46 95       	lsr	r20
    34be:	37 95       	ror	r19
    34c0:	27 95       	ror	r18
    34c2:	a7 95       	ror	r26
    34c4:	f0 40       	sbci	r31, 0x00	; 0
    34c6:	53 95       	inc	r21
    34c8:	c9 f7       	brne	.-14     	; 0x34bc <__addsf3x+0x4e>
    34ca:	7e f4       	brtc	.+30     	; 0x34ea <__addsf3x+0x7c>
    34cc:	1f 16       	cp	r1, r31
    34ce:	ba 0b       	sbc	r27, r26
    34d0:	62 0b       	sbc	r22, r18
    34d2:	73 0b       	sbc	r23, r19
    34d4:	84 0b       	sbc	r24, r20
    34d6:	ba f0       	brmi	.+46     	; 0x3506 <__addsf3x+0x98>
    34d8:	91 50       	subi	r25, 0x01	; 1
    34da:	a1 f0       	breq	.+40     	; 0x3504 <__addsf3x+0x96>
    34dc:	ff 0f       	add	r31, r31
    34de:	bb 1f       	adc	r27, r27
    34e0:	66 1f       	adc	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	88 1f       	adc	r24, r24
    34e6:	c2 f7       	brpl	.-16     	; 0x34d8 <__addsf3x+0x6a>
    34e8:	0e c0       	rjmp	.+28     	; 0x3506 <__addsf3x+0x98>
    34ea:	ba 0f       	add	r27, r26
    34ec:	62 1f       	adc	r22, r18
    34ee:	73 1f       	adc	r23, r19
    34f0:	84 1f       	adc	r24, r20
    34f2:	48 f4       	brcc	.+18     	; 0x3506 <__addsf3x+0x98>
    34f4:	87 95       	ror	r24
    34f6:	77 95       	ror	r23
    34f8:	67 95       	ror	r22
    34fa:	b7 95       	ror	r27
    34fc:	f7 95       	ror	r31
    34fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3500:	08 f0       	brcs	.+2      	; 0x3504 <__addsf3x+0x96>
    3502:	b3 cf       	rjmp	.-154    	; 0x346a <__addsf3+0x1e>
    3504:	93 95       	inc	r25
    3506:	88 0f       	add	r24, r24
    3508:	08 f0       	brcs	.+2      	; 0x350c <__addsf3x+0x9e>
    350a:	99 27       	eor	r25, r25
    350c:	ee 0f       	add	r30, r30
    350e:	97 95       	ror	r25
    3510:	87 95       	ror	r24
    3512:	08 95       	ret

00003514 <__cmpsf2>:
    3514:	ea d0       	rcall	.+468    	; 0x36ea <__fp_cmp>
    3516:	08 f4       	brcc	.+2      	; 0x351a <__cmpsf2+0x6>
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	08 95       	ret

0000351c <__divsf3>:
    351c:	0c d0       	rcall	.+24     	; 0x3536 <__divsf3x>
    351e:	30 c1       	rjmp	.+608    	; 0x3780 <__fp_round>
    3520:	28 d1       	rcall	.+592    	; 0x3772 <__fp_pscB>
    3522:	40 f0       	brcs	.+16     	; 0x3534 <__divsf3+0x18>
    3524:	1f d1       	rcall	.+574    	; 0x3764 <__fp_pscA>
    3526:	30 f0       	brcs	.+12     	; 0x3534 <__divsf3+0x18>
    3528:	21 f4       	brne	.+8      	; 0x3532 <__divsf3+0x16>
    352a:	5f 3f       	cpi	r21, 0xFF	; 255
    352c:	19 f0       	breq	.+6      	; 0x3534 <__divsf3+0x18>
    352e:	01 c1       	rjmp	.+514    	; 0x3732 <__fp_inf>
    3530:	51 11       	cpse	r21, r1
    3532:	5a c1       	rjmp	.+692    	; 0x37e8 <__fp_szero>
    3534:	04 c1       	rjmp	.+520    	; 0x373e <__fp_nan>

00003536 <__divsf3x>:
    3536:	35 d1       	rcall	.+618    	; 0x37a2 <__fp_split3>
    3538:	98 f3       	brcs	.-26     	; 0x3520 <__divsf3+0x4>

0000353a <__divsf3_pse>:
    353a:	99 23       	and	r25, r25
    353c:	c9 f3       	breq	.-14     	; 0x3530 <__divsf3+0x14>
    353e:	55 23       	and	r21, r21
    3540:	b1 f3       	breq	.-20     	; 0x352e <__divsf3+0x12>
    3542:	95 1b       	sub	r25, r21
    3544:	55 0b       	sbc	r21, r21
    3546:	bb 27       	eor	r27, r27
    3548:	aa 27       	eor	r26, r26
    354a:	62 17       	cp	r22, r18
    354c:	73 07       	cpc	r23, r19
    354e:	84 07       	cpc	r24, r20
    3550:	38 f0       	brcs	.+14     	; 0x3560 <__divsf3_pse+0x26>
    3552:	9f 5f       	subi	r25, 0xFF	; 255
    3554:	5f 4f       	sbci	r21, 0xFF	; 255
    3556:	22 0f       	add	r18, r18
    3558:	33 1f       	adc	r19, r19
    355a:	44 1f       	adc	r20, r20
    355c:	aa 1f       	adc	r26, r26
    355e:	a9 f3       	breq	.-22     	; 0x354a <__divsf3_pse+0x10>
    3560:	33 d0       	rcall	.+102    	; 0x35c8 <__divsf3_pse+0x8e>
    3562:	0e 2e       	mov	r0, r30
    3564:	3a f0       	brmi	.+14     	; 0x3574 <__divsf3_pse+0x3a>
    3566:	e0 e8       	ldi	r30, 0x80	; 128
    3568:	30 d0       	rcall	.+96     	; 0x35ca <__divsf3_pse+0x90>
    356a:	91 50       	subi	r25, 0x01	; 1
    356c:	50 40       	sbci	r21, 0x00	; 0
    356e:	e6 95       	lsr	r30
    3570:	00 1c       	adc	r0, r0
    3572:	ca f7       	brpl	.-14     	; 0x3566 <__divsf3_pse+0x2c>
    3574:	29 d0       	rcall	.+82     	; 0x35c8 <__divsf3_pse+0x8e>
    3576:	fe 2f       	mov	r31, r30
    3578:	27 d0       	rcall	.+78     	; 0x35c8 <__divsf3_pse+0x8e>
    357a:	66 0f       	add	r22, r22
    357c:	77 1f       	adc	r23, r23
    357e:	88 1f       	adc	r24, r24
    3580:	bb 1f       	adc	r27, r27
    3582:	26 17       	cp	r18, r22
    3584:	37 07       	cpc	r19, r23
    3586:	48 07       	cpc	r20, r24
    3588:	ab 07       	cpc	r26, r27
    358a:	b0 e8       	ldi	r27, 0x80	; 128
    358c:	09 f0       	breq	.+2      	; 0x3590 <__divsf3_pse+0x56>
    358e:	bb 0b       	sbc	r27, r27
    3590:	80 2d       	mov	r24, r0
    3592:	bf 01       	movw	r22, r30
    3594:	ff 27       	eor	r31, r31
    3596:	93 58       	subi	r25, 0x83	; 131
    3598:	5f 4f       	sbci	r21, 0xFF	; 255
    359a:	2a f0       	brmi	.+10     	; 0x35a6 <__divsf3_pse+0x6c>
    359c:	9e 3f       	cpi	r25, 0xFE	; 254
    359e:	51 05       	cpc	r21, r1
    35a0:	68 f0       	brcs	.+26     	; 0x35bc <__divsf3_pse+0x82>
    35a2:	c7 c0       	rjmp	.+398    	; 0x3732 <__fp_inf>
    35a4:	21 c1       	rjmp	.+578    	; 0x37e8 <__fp_szero>
    35a6:	5f 3f       	cpi	r21, 0xFF	; 255
    35a8:	ec f3       	brlt	.-6      	; 0x35a4 <__divsf3_pse+0x6a>
    35aa:	98 3e       	cpi	r25, 0xE8	; 232
    35ac:	dc f3       	brlt	.-10     	; 0x35a4 <__divsf3_pse+0x6a>
    35ae:	86 95       	lsr	r24
    35b0:	77 95       	ror	r23
    35b2:	67 95       	ror	r22
    35b4:	b7 95       	ror	r27
    35b6:	f7 95       	ror	r31
    35b8:	9f 5f       	subi	r25, 0xFF	; 255
    35ba:	c9 f7       	brne	.-14     	; 0x35ae <__divsf3_pse+0x74>
    35bc:	88 0f       	add	r24, r24
    35be:	91 1d       	adc	r25, r1
    35c0:	96 95       	lsr	r25
    35c2:	87 95       	ror	r24
    35c4:	97 f9       	bld	r25, 7
    35c6:	08 95       	ret
    35c8:	e1 e0       	ldi	r30, 0x01	; 1
    35ca:	66 0f       	add	r22, r22
    35cc:	77 1f       	adc	r23, r23
    35ce:	88 1f       	adc	r24, r24
    35d0:	bb 1f       	adc	r27, r27
    35d2:	62 17       	cp	r22, r18
    35d4:	73 07       	cpc	r23, r19
    35d6:	84 07       	cpc	r24, r20
    35d8:	ba 07       	cpc	r27, r26
    35da:	20 f0       	brcs	.+8      	; 0x35e4 <__divsf3_pse+0xaa>
    35dc:	62 1b       	sub	r22, r18
    35de:	73 0b       	sbc	r23, r19
    35e0:	84 0b       	sbc	r24, r20
    35e2:	ba 0b       	sbc	r27, r26
    35e4:	ee 1f       	adc	r30, r30
    35e6:	88 f7       	brcc	.-30     	; 0x35ca <__divsf3_pse+0x90>
    35e8:	e0 95       	com	r30
    35ea:	08 95       	ret

000035ec <__floatdisf>:
    35ec:	97 fb       	bst	r25, 7
    35ee:	0e f4       	brtc	.+2      	; 0x35f2 <__floatdisf+0x6>
    35f0:	a9 d0       	rcall	.+338    	; 0x3744 <__fp_negdi>
    35f2:	3e c0       	rjmp	.+124    	; 0x3670 <__fp_di2sf>

000035f4 <__floatunsisf>:
    35f4:	e8 94       	clt
    35f6:	09 c0       	rjmp	.+18     	; 0x360a <__floatsisf+0x12>

000035f8 <__floatsisf>:
    35f8:	97 fb       	bst	r25, 7
    35fa:	3e f4       	brtc	.+14     	; 0x360a <__floatsisf+0x12>
    35fc:	90 95       	com	r25
    35fe:	80 95       	com	r24
    3600:	70 95       	com	r23
    3602:	61 95       	neg	r22
    3604:	7f 4f       	sbci	r23, 0xFF	; 255
    3606:	8f 4f       	sbci	r24, 0xFF	; 255
    3608:	9f 4f       	sbci	r25, 0xFF	; 255
    360a:	99 23       	and	r25, r25
    360c:	a9 f0       	breq	.+42     	; 0x3638 <__floatsisf+0x40>
    360e:	f9 2f       	mov	r31, r25
    3610:	96 e9       	ldi	r25, 0x96	; 150
    3612:	bb 27       	eor	r27, r27
    3614:	93 95       	inc	r25
    3616:	f6 95       	lsr	r31
    3618:	87 95       	ror	r24
    361a:	77 95       	ror	r23
    361c:	67 95       	ror	r22
    361e:	b7 95       	ror	r27
    3620:	f1 11       	cpse	r31, r1
    3622:	f8 cf       	rjmp	.-16     	; 0x3614 <__floatsisf+0x1c>
    3624:	fa f4       	brpl	.+62     	; 0x3664 <__floatsisf+0x6c>
    3626:	bb 0f       	add	r27, r27
    3628:	11 f4       	brne	.+4      	; 0x362e <__floatsisf+0x36>
    362a:	60 ff       	sbrs	r22, 0
    362c:	1b c0       	rjmp	.+54     	; 0x3664 <__floatsisf+0x6c>
    362e:	6f 5f       	subi	r22, 0xFF	; 255
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	8f 4f       	sbci	r24, 0xFF	; 255
    3634:	9f 4f       	sbci	r25, 0xFF	; 255
    3636:	16 c0       	rjmp	.+44     	; 0x3664 <__floatsisf+0x6c>
    3638:	88 23       	and	r24, r24
    363a:	11 f0       	breq	.+4      	; 0x3640 <__floatsisf+0x48>
    363c:	96 e9       	ldi	r25, 0x96	; 150
    363e:	11 c0       	rjmp	.+34     	; 0x3662 <__floatsisf+0x6a>
    3640:	77 23       	and	r23, r23
    3642:	21 f0       	breq	.+8      	; 0x364c <__floatsisf+0x54>
    3644:	9e e8       	ldi	r25, 0x8E	; 142
    3646:	87 2f       	mov	r24, r23
    3648:	76 2f       	mov	r23, r22
    364a:	05 c0       	rjmp	.+10     	; 0x3656 <__floatsisf+0x5e>
    364c:	66 23       	and	r22, r22
    364e:	71 f0       	breq	.+28     	; 0x366c <__floatsisf+0x74>
    3650:	96 e8       	ldi	r25, 0x86	; 134
    3652:	86 2f       	mov	r24, r22
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	60 e0       	ldi	r22, 0x00	; 0
    3658:	2a f0       	brmi	.+10     	; 0x3664 <__floatsisf+0x6c>
    365a:	9a 95       	dec	r25
    365c:	66 0f       	add	r22, r22
    365e:	77 1f       	adc	r23, r23
    3660:	88 1f       	adc	r24, r24
    3662:	da f7       	brpl	.-10     	; 0x365a <__floatsisf+0x62>
    3664:	88 0f       	add	r24, r24
    3666:	96 95       	lsr	r25
    3668:	87 95       	ror	r24
    366a:	97 f9       	bld	r25, 7
    366c:	08 95       	ret

0000366e <__floatundisf>:
    366e:	e8 94       	clt

00003670 <__fp_di2sf>:
    3670:	f9 2f       	mov	r31, r25
    3672:	96 eb       	ldi	r25, 0xB6	; 182
    3674:	ff 23       	and	r31, r31
    3676:	81 f0       	breq	.+32     	; 0x3698 <__fp_di2sf+0x28>
    3678:	12 16       	cp	r1, r18
    367a:	13 06       	cpc	r1, r19
    367c:	14 06       	cpc	r1, r20
    367e:	44 0b       	sbc	r20, r20
    3680:	93 95       	inc	r25
    3682:	f6 95       	lsr	r31
    3684:	87 95       	ror	r24
    3686:	77 95       	ror	r23
    3688:	67 95       	ror	r22
    368a:	57 95       	ror	r21
    368c:	40 40       	sbci	r20, 0x00	; 0
    368e:	ff 23       	and	r31, r31
    3690:	b9 f7       	brne	.-18     	; 0x3680 <__fp_di2sf+0x10>
    3692:	1b c0       	rjmp	.+54     	; 0x36ca <__fp_di2sf+0x5a>
    3694:	99 27       	eor	r25, r25
    3696:	08 95       	ret
    3698:	88 23       	and	r24, r24
    369a:	51 f4       	brne	.+20     	; 0x36b0 <__fp_di2sf+0x40>
    369c:	98 50       	subi	r25, 0x08	; 8
    369e:	d2 f7       	brpl	.-12     	; 0x3694 <__fp_di2sf+0x24>
    36a0:	87 2b       	or	r24, r23
    36a2:	76 2f       	mov	r23, r22
    36a4:	65 2f       	mov	r22, r21
    36a6:	54 2f       	mov	r21, r20
    36a8:	43 2f       	mov	r20, r19
    36aa:	32 2f       	mov	r19, r18
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	b1 f3       	breq	.-20     	; 0x369c <__fp_di2sf+0x2c>
    36b0:	12 16       	cp	r1, r18
    36b2:	13 06       	cpc	r1, r19
    36b4:	14 06       	cpc	r1, r20
    36b6:	44 0b       	sbc	r20, r20
    36b8:	88 23       	and	r24, r24
    36ba:	3a f0       	brmi	.+14     	; 0x36ca <__fp_di2sf+0x5a>
    36bc:	9a 95       	dec	r25
    36be:	44 0f       	add	r20, r20
    36c0:	55 1f       	adc	r21, r21
    36c2:	66 1f       	adc	r22, r22
    36c4:	77 1f       	adc	r23, r23
    36c6:	88 1f       	adc	r24, r24
    36c8:	ca f7       	brpl	.-14     	; 0x36bc <__fp_di2sf+0x4c>
    36ca:	55 23       	and	r21, r21
    36cc:	4a f4       	brpl	.+18     	; 0x36e0 <__fp_di2sf+0x70>
    36ce:	44 0f       	add	r20, r20
    36d0:	55 1f       	adc	r21, r21
    36d2:	11 f4       	brne	.+4      	; 0x36d8 <__fp_di2sf+0x68>
    36d4:	60 ff       	sbrs	r22, 0
    36d6:	04 c0       	rjmp	.+8      	; 0x36e0 <__fp_di2sf+0x70>
    36d8:	6f 5f       	subi	r22, 0xFF	; 255
    36da:	7f 4f       	sbci	r23, 0xFF	; 255
    36dc:	8f 4f       	sbci	r24, 0xFF	; 255
    36de:	9f 4f       	sbci	r25, 0xFF	; 255
    36e0:	88 0f       	add	r24, r24
    36e2:	96 95       	lsr	r25
    36e4:	87 95       	ror	r24
    36e6:	97 f9       	bld	r25, 7
    36e8:	08 95       	ret

000036ea <__fp_cmp>:
    36ea:	99 0f       	add	r25, r25
    36ec:	00 08       	sbc	r0, r0
    36ee:	55 0f       	add	r21, r21
    36f0:	aa 0b       	sbc	r26, r26
    36f2:	e0 e8       	ldi	r30, 0x80	; 128
    36f4:	fe ef       	ldi	r31, 0xFE	; 254
    36f6:	16 16       	cp	r1, r22
    36f8:	17 06       	cpc	r1, r23
    36fa:	e8 07       	cpc	r30, r24
    36fc:	f9 07       	cpc	r31, r25
    36fe:	c0 f0       	brcs	.+48     	; 0x3730 <__fp_cmp+0x46>
    3700:	12 16       	cp	r1, r18
    3702:	13 06       	cpc	r1, r19
    3704:	e4 07       	cpc	r30, r20
    3706:	f5 07       	cpc	r31, r21
    3708:	98 f0       	brcs	.+38     	; 0x3730 <__fp_cmp+0x46>
    370a:	62 1b       	sub	r22, r18
    370c:	73 0b       	sbc	r23, r19
    370e:	84 0b       	sbc	r24, r20
    3710:	95 0b       	sbc	r25, r21
    3712:	39 f4       	brne	.+14     	; 0x3722 <__fp_cmp+0x38>
    3714:	0a 26       	eor	r0, r26
    3716:	61 f0       	breq	.+24     	; 0x3730 <__fp_cmp+0x46>
    3718:	23 2b       	or	r18, r19
    371a:	24 2b       	or	r18, r20
    371c:	25 2b       	or	r18, r21
    371e:	21 f4       	brne	.+8      	; 0x3728 <__fp_cmp+0x3e>
    3720:	08 95       	ret
    3722:	0a 26       	eor	r0, r26
    3724:	09 f4       	brne	.+2      	; 0x3728 <__fp_cmp+0x3e>
    3726:	a1 40       	sbci	r26, 0x01	; 1
    3728:	a6 95       	lsr	r26
    372a:	8f ef       	ldi	r24, 0xFF	; 255
    372c:	81 1d       	adc	r24, r1
    372e:	81 1d       	adc	r24, r1
    3730:	08 95       	ret

00003732 <__fp_inf>:
    3732:	97 f9       	bld	r25, 7
    3734:	9f 67       	ori	r25, 0x7F	; 127
    3736:	80 e8       	ldi	r24, 0x80	; 128
    3738:	70 e0       	ldi	r23, 0x00	; 0
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	08 95       	ret

0000373e <__fp_nan>:
    373e:	9f ef       	ldi	r25, 0xFF	; 255
    3740:	80 ec       	ldi	r24, 0xC0	; 192
    3742:	08 95       	ret

00003744 <__fp_negdi>:
    3744:	90 95       	com	r25
    3746:	80 95       	com	r24
    3748:	70 95       	com	r23
    374a:	60 95       	com	r22
    374c:	50 95       	com	r21
    374e:	40 95       	com	r20
    3750:	30 95       	com	r19
    3752:	21 95       	neg	r18
    3754:	3f 4f       	sbci	r19, 0xFF	; 255
    3756:	4f 4f       	sbci	r20, 0xFF	; 255
    3758:	5f 4f       	sbci	r21, 0xFF	; 255
    375a:	6f 4f       	sbci	r22, 0xFF	; 255
    375c:	7f 4f       	sbci	r23, 0xFF	; 255
    375e:	8f 4f       	sbci	r24, 0xFF	; 255
    3760:	9f 4f       	sbci	r25, 0xFF	; 255
    3762:	08 95       	ret

00003764 <__fp_pscA>:
    3764:	00 24       	eor	r0, r0
    3766:	0a 94       	dec	r0
    3768:	16 16       	cp	r1, r22
    376a:	17 06       	cpc	r1, r23
    376c:	18 06       	cpc	r1, r24
    376e:	09 06       	cpc	r0, r25
    3770:	08 95       	ret

00003772 <__fp_pscB>:
    3772:	00 24       	eor	r0, r0
    3774:	0a 94       	dec	r0
    3776:	12 16       	cp	r1, r18
    3778:	13 06       	cpc	r1, r19
    377a:	14 06       	cpc	r1, r20
    377c:	05 06       	cpc	r0, r21
    377e:	08 95       	ret

00003780 <__fp_round>:
    3780:	09 2e       	mov	r0, r25
    3782:	03 94       	inc	r0
    3784:	00 0c       	add	r0, r0
    3786:	11 f4       	brne	.+4      	; 0x378c <__fp_round+0xc>
    3788:	88 23       	and	r24, r24
    378a:	52 f0       	brmi	.+20     	; 0x37a0 <__fp_round+0x20>
    378c:	bb 0f       	add	r27, r27
    378e:	40 f4       	brcc	.+16     	; 0x37a0 <__fp_round+0x20>
    3790:	bf 2b       	or	r27, r31
    3792:	11 f4       	brne	.+4      	; 0x3798 <__fp_round+0x18>
    3794:	60 ff       	sbrs	r22, 0
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <__fp_round+0x20>
    3798:	6f 5f       	subi	r22, 0xFF	; 255
    379a:	7f 4f       	sbci	r23, 0xFF	; 255
    379c:	8f 4f       	sbci	r24, 0xFF	; 255
    379e:	9f 4f       	sbci	r25, 0xFF	; 255
    37a0:	08 95       	ret

000037a2 <__fp_split3>:
    37a2:	57 fd       	sbrc	r21, 7
    37a4:	90 58       	subi	r25, 0x80	; 128
    37a6:	44 0f       	add	r20, r20
    37a8:	55 1f       	adc	r21, r21
    37aa:	59 f0       	breq	.+22     	; 0x37c2 <__fp_splitA+0x10>
    37ac:	5f 3f       	cpi	r21, 0xFF	; 255
    37ae:	71 f0       	breq	.+28     	; 0x37cc <__fp_splitA+0x1a>
    37b0:	47 95       	ror	r20

000037b2 <__fp_splitA>:
    37b2:	88 0f       	add	r24, r24
    37b4:	97 fb       	bst	r25, 7
    37b6:	99 1f       	adc	r25, r25
    37b8:	61 f0       	breq	.+24     	; 0x37d2 <__fp_splitA+0x20>
    37ba:	9f 3f       	cpi	r25, 0xFF	; 255
    37bc:	79 f0       	breq	.+30     	; 0x37dc <__fp_splitA+0x2a>
    37be:	87 95       	ror	r24
    37c0:	08 95       	ret
    37c2:	12 16       	cp	r1, r18
    37c4:	13 06       	cpc	r1, r19
    37c6:	14 06       	cpc	r1, r20
    37c8:	55 1f       	adc	r21, r21
    37ca:	f2 cf       	rjmp	.-28     	; 0x37b0 <__fp_split3+0xe>
    37cc:	46 95       	lsr	r20
    37ce:	f1 df       	rcall	.-30     	; 0x37b2 <__fp_splitA>
    37d0:	08 c0       	rjmp	.+16     	; 0x37e2 <__fp_splitA+0x30>
    37d2:	16 16       	cp	r1, r22
    37d4:	17 06       	cpc	r1, r23
    37d6:	18 06       	cpc	r1, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	f1 cf       	rjmp	.-30     	; 0x37be <__fp_splitA+0xc>
    37dc:	86 95       	lsr	r24
    37de:	71 05       	cpc	r23, r1
    37e0:	61 05       	cpc	r22, r1
    37e2:	08 94       	sec
    37e4:	08 95       	ret

000037e6 <__fp_zero>:
    37e6:	e8 94       	clt

000037e8 <__fp_szero>:
    37e8:	bb 27       	eor	r27, r27
    37ea:	66 27       	eor	r22, r22
    37ec:	77 27       	eor	r23, r23
    37ee:	cb 01       	movw	r24, r22
    37f0:	97 f9       	bld	r25, 7
    37f2:	08 95       	ret

000037f4 <__gesf2>:
    37f4:	7a df       	rcall	.-268    	; 0x36ea <__fp_cmp>
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <__gesf2+0x6>
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	08 95       	ret

000037fc <__mulsf3>:
    37fc:	0b d0       	rcall	.+22     	; 0x3814 <__mulsf3x>
    37fe:	c0 cf       	rjmp	.-128    	; 0x3780 <__fp_round>
    3800:	b1 df       	rcall	.-158    	; 0x3764 <__fp_pscA>
    3802:	28 f0       	brcs	.+10     	; 0x380e <__mulsf3+0x12>
    3804:	b6 df       	rcall	.-148    	; 0x3772 <__fp_pscB>
    3806:	18 f0       	brcs	.+6      	; 0x380e <__mulsf3+0x12>
    3808:	95 23       	and	r25, r21
    380a:	09 f0       	breq	.+2      	; 0x380e <__mulsf3+0x12>
    380c:	92 cf       	rjmp	.-220    	; 0x3732 <__fp_inf>
    380e:	97 cf       	rjmp	.-210    	; 0x373e <__fp_nan>
    3810:	11 24       	eor	r1, r1
    3812:	ea cf       	rjmp	.-44     	; 0x37e8 <__fp_szero>

00003814 <__mulsf3x>:
    3814:	c6 df       	rcall	.-116    	; 0x37a2 <__fp_split3>
    3816:	a0 f3       	brcs	.-24     	; 0x3800 <__mulsf3+0x4>

00003818 <__mulsf3_pse>:
    3818:	95 9f       	mul	r25, r21
    381a:	d1 f3       	breq	.-12     	; 0x3810 <__mulsf3+0x14>
    381c:	95 0f       	add	r25, r21
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	55 1f       	adc	r21, r21
    3822:	62 9f       	mul	r22, r18
    3824:	f0 01       	movw	r30, r0
    3826:	72 9f       	mul	r23, r18
    3828:	bb 27       	eor	r27, r27
    382a:	f0 0d       	add	r31, r0
    382c:	b1 1d       	adc	r27, r1
    382e:	63 9f       	mul	r22, r19
    3830:	aa 27       	eor	r26, r26
    3832:	f0 0d       	add	r31, r0
    3834:	b1 1d       	adc	r27, r1
    3836:	aa 1f       	adc	r26, r26
    3838:	64 9f       	mul	r22, r20
    383a:	66 27       	eor	r22, r22
    383c:	b0 0d       	add	r27, r0
    383e:	a1 1d       	adc	r26, r1
    3840:	66 1f       	adc	r22, r22
    3842:	82 9f       	mul	r24, r18
    3844:	22 27       	eor	r18, r18
    3846:	b0 0d       	add	r27, r0
    3848:	a1 1d       	adc	r26, r1
    384a:	62 1f       	adc	r22, r18
    384c:	73 9f       	mul	r23, r19
    384e:	b0 0d       	add	r27, r0
    3850:	a1 1d       	adc	r26, r1
    3852:	62 1f       	adc	r22, r18
    3854:	83 9f       	mul	r24, r19
    3856:	a0 0d       	add	r26, r0
    3858:	61 1d       	adc	r22, r1
    385a:	22 1f       	adc	r18, r18
    385c:	74 9f       	mul	r23, r20
    385e:	33 27       	eor	r19, r19
    3860:	a0 0d       	add	r26, r0
    3862:	61 1d       	adc	r22, r1
    3864:	23 1f       	adc	r18, r19
    3866:	84 9f       	mul	r24, r20
    3868:	60 0d       	add	r22, r0
    386a:	21 1d       	adc	r18, r1
    386c:	82 2f       	mov	r24, r18
    386e:	76 2f       	mov	r23, r22
    3870:	6a 2f       	mov	r22, r26
    3872:	11 24       	eor	r1, r1
    3874:	9f 57       	subi	r25, 0x7F	; 127
    3876:	50 40       	sbci	r21, 0x00	; 0
    3878:	8a f0       	brmi	.+34     	; 0x389c <__mulsf3_pse+0x84>
    387a:	e1 f0       	breq	.+56     	; 0x38b4 <__mulsf3_pse+0x9c>
    387c:	88 23       	and	r24, r24
    387e:	4a f0       	brmi	.+18     	; 0x3892 <__mulsf3_pse+0x7a>
    3880:	ee 0f       	add	r30, r30
    3882:	ff 1f       	adc	r31, r31
    3884:	bb 1f       	adc	r27, r27
    3886:	66 1f       	adc	r22, r22
    3888:	77 1f       	adc	r23, r23
    388a:	88 1f       	adc	r24, r24
    388c:	91 50       	subi	r25, 0x01	; 1
    388e:	50 40       	sbci	r21, 0x00	; 0
    3890:	a9 f7       	brne	.-22     	; 0x387c <__mulsf3_pse+0x64>
    3892:	9e 3f       	cpi	r25, 0xFE	; 254
    3894:	51 05       	cpc	r21, r1
    3896:	70 f0       	brcs	.+28     	; 0x38b4 <__mulsf3_pse+0x9c>
    3898:	4c cf       	rjmp	.-360    	; 0x3732 <__fp_inf>
    389a:	a6 cf       	rjmp	.-180    	; 0x37e8 <__fp_szero>
    389c:	5f 3f       	cpi	r21, 0xFF	; 255
    389e:	ec f3       	brlt	.-6      	; 0x389a <__mulsf3_pse+0x82>
    38a0:	98 3e       	cpi	r25, 0xE8	; 232
    38a2:	dc f3       	brlt	.-10     	; 0x389a <__mulsf3_pse+0x82>
    38a4:	86 95       	lsr	r24
    38a6:	77 95       	ror	r23
    38a8:	67 95       	ror	r22
    38aa:	b7 95       	ror	r27
    38ac:	f7 95       	ror	r31
    38ae:	e7 95       	ror	r30
    38b0:	9f 5f       	subi	r25, 0xFF	; 255
    38b2:	c1 f7       	brne	.-16     	; 0x38a4 <__mulsf3_pse+0x8c>
    38b4:	fe 2b       	or	r31, r30
    38b6:	88 0f       	add	r24, r24
    38b8:	91 1d       	adc	r25, r1
    38ba:	96 95       	lsr	r25
    38bc:	87 95       	ror	r24
    38be:	97 f9       	bld	r25, 7
    38c0:	08 95       	ret

000038c2 <pow>:
    38c2:	fa 01       	movw	r30, r20
    38c4:	ee 0f       	add	r30, r30
    38c6:	ff 1f       	adc	r31, r31
    38c8:	30 96       	adiw	r30, 0x00	; 0
    38ca:	21 05       	cpc	r18, r1
    38cc:	31 05       	cpc	r19, r1
    38ce:	99 f1       	breq	.+102    	; 0x3936 <pow+0x74>
    38d0:	61 15       	cp	r22, r1
    38d2:	71 05       	cpc	r23, r1
    38d4:	61 f4       	brne	.+24     	; 0x38ee <pow+0x2c>
    38d6:	80 38       	cpi	r24, 0x80	; 128
    38d8:	bf e3       	ldi	r27, 0x3F	; 63
    38da:	9b 07       	cpc	r25, r27
    38dc:	49 f1       	breq	.+82     	; 0x3930 <pow+0x6e>
    38de:	68 94       	set
    38e0:	90 38       	cpi	r25, 0x80	; 128
    38e2:	81 05       	cpc	r24, r1
    38e4:	61 f0       	breq	.+24     	; 0x38fe <pow+0x3c>
    38e6:	80 38       	cpi	r24, 0x80	; 128
    38e8:	bf ef       	ldi	r27, 0xFF	; 255
    38ea:	9b 07       	cpc	r25, r27
    38ec:	41 f0       	breq	.+16     	; 0x38fe <pow+0x3c>
    38ee:	99 23       	and	r25, r25
    38f0:	42 f5       	brpl	.+80     	; 0x3942 <pow+0x80>
    38f2:	ff 3f       	cpi	r31, 0xFF	; 255
    38f4:	e1 05       	cpc	r30, r1
    38f6:	31 05       	cpc	r19, r1
    38f8:	21 05       	cpc	r18, r1
    38fa:	11 f1       	breq	.+68     	; 0x3940 <pow+0x7e>
    38fc:	e8 94       	clt
    38fe:	08 94       	sec
    3900:	e7 95       	ror	r30
    3902:	d9 01       	movw	r26, r18
    3904:	aa 23       	and	r26, r26
    3906:	29 f4       	brne	.+10     	; 0x3912 <pow+0x50>
    3908:	ab 2f       	mov	r26, r27
    390a:	be 2f       	mov	r27, r30
    390c:	f8 5f       	subi	r31, 0xF8	; 248
    390e:	d0 f3       	brcs	.-12     	; 0x3904 <pow+0x42>
    3910:	10 c0       	rjmp	.+32     	; 0x3932 <pow+0x70>
    3912:	ff 5f       	subi	r31, 0xFF	; 255
    3914:	70 f4       	brcc	.+28     	; 0x3932 <pow+0x70>
    3916:	a6 95       	lsr	r26
    3918:	e0 f7       	brcc	.-8      	; 0x3912 <pow+0x50>
    391a:	f7 39       	cpi	r31, 0x97	; 151
    391c:	50 f0       	brcs	.+20     	; 0x3932 <pow+0x70>
    391e:	19 f0       	breq	.+6      	; 0x3926 <pow+0x64>
    3920:	ff 3a       	cpi	r31, 0xAF	; 175
    3922:	38 f4       	brcc	.+14     	; 0x3932 <pow+0x70>
    3924:	9f 77       	andi	r25, 0x7F	; 127
    3926:	9f 93       	push	r25
    3928:	0c d0       	rcall	.+24     	; 0x3942 <pow+0x80>
    392a:	0f 90       	pop	r0
    392c:	07 fc       	sbrc	r0, 7
    392e:	90 58       	subi	r25, 0x80	; 128
    3930:	08 95       	ret
    3932:	3e f0       	brts	.+14     	; 0x3942 <pow+0x80>
    3934:	04 cf       	rjmp	.-504    	; 0x373e <__fp_nan>
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	80 e8       	ldi	r24, 0x80	; 128
    393c:	9f e3       	ldi	r25, 0x3F	; 63
    393e:	08 95       	ret
    3940:	4f e7       	ldi	r20, 0x7F	; 127
    3942:	9f 77       	andi	r25, 0x7F	; 127
    3944:	5f 93       	push	r21
    3946:	4f 93       	push	r20
    3948:	3f 93       	push	r19
    394a:	2f 93       	push	r18
    394c:	9e d0       	rcall	.+316    	; 0x3a8a <log>
    394e:	2f 91       	pop	r18
    3950:	3f 91       	pop	r19
    3952:	4f 91       	pop	r20
    3954:	5f 91       	pop	r21
    3956:	52 df       	rcall	.-348    	; 0x37fc <__mulsf3>
    3958:	05 c0       	rjmp	.+10     	; 0x3964 <exp>
    395a:	19 f4       	brne	.+6      	; 0x3962 <pow+0xa0>
    395c:	0e f0       	brts	.+2      	; 0x3960 <pow+0x9e>
    395e:	e9 ce       	rjmp	.-558    	; 0x3732 <__fp_inf>
    3960:	42 cf       	rjmp	.-380    	; 0x37e6 <__fp_zero>
    3962:	ed ce       	rjmp	.-550    	; 0x373e <__fp_nan>

00003964 <exp>:
    3964:	26 df       	rcall	.-436    	; 0x37b2 <__fp_splitA>
    3966:	c8 f3       	brcs	.-14     	; 0x395a <pow+0x98>
    3968:	96 38       	cpi	r25, 0x86	; 134
    396a:	c0 f7       	brcc	.-16     	; 0x395c <pow+0x9a>
    396c:	07 f8       	bld	r0, 7
    396e:	0f 92       	push	r0
    3970:	e8 94       	clt
    3972:	2b e3       	ldi	r18, 0x3B	; 59
    3974:	3a ea       	ldi	r19, 0xAA	; 170
    3976:	48 eb       	ldi	r20, 0xB8	; 184
    3978:	5f e7       	ldi	r21, 0x7F	; 127
    397a:	4e df       	rcall	.-356    	; 0x3818 <__mulsf3_pse>
    397c:	0f 92       	push	r0
    397e:	0f 92       	push	r0
    3980:	0f 92       	push	r0
    3982:	4d b7       	in	r20, 0x3d	; 61
    3984:	5e b7       	in	r21, 0x3e	; 62
    3986:	0f 92       	push	r0
    3988:	c0 d0       	rcall	.+384    	; 0x3b0a <modf>
    398a:	ea e0       	ldi	r30, 0x0A	; 10
    398c:	f1 e0       	ldi	r31, 0x01	; 1
    398e:	16 d0       	rcall	.+44     	; 0x39bc <__fp_powser>
    3990:	4f 91       	pop	r20
    3992:	5f 91       	pop	r21
    3994:	ef 91       	pop	r30
    3996:	ff 91       	pop	r31
    3998:	e5 95       	asr	r30
    399a:	ee 1f       	adc	r30, r30
    399c:	ff 1f       	adc	r31, r31
    399e:	49 f0       	breq	.+18     	; 0x39b2 <exp+0x4e>
    39a0:	fe 57       	subi	r31, 0x7E	; 126
    39a2:	e0 68       	ori	r30, 0x80	; 128
    39a4:	44 27       	eor	r20, r20
    39a6:	ee 0f       	add	r30, r30
    39a8:	44 1f       	adc	r20, r20
    39aa:	fa 95       	dec	r31
    39ac:	e1 f7       	brne	.-8      	; 0x39a6 <exp+0x42>
    39ae:	41 95       	neg	r20
    39b0:	55 0b       	sbc	r21, r21
    39b2:	32 d0       	rcall	.+100    	; 0x3a18 <ldexp>
    39b4:	0f 90       	pop	r0
    39b6:	07 fe       	sbrs	r0, 7
    39b8:	26 c0       	rjmp	.+76     	; 0x3a06 <inverse>
    39ba:	08 95       	ret

000039bc <__fp_powser>:
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	1f 93       	push	r17
    39c2:	0f 93       	push	r16
    39c4:	ff 92       	push	r15
    39c6:	ef 92       	push	r14
    39c8:	df 92       	push	r13
    39ca:	7b 01       	movw	r14, r22
    39cc:	8c 01       	movw	r16, r24
    39ce:	68 94       	set
    39d0:	05 c0       	rjmp	.+10     	; 0x39dc <__fp_powser+0x20>
    39d2:	da 2e       	mov	r13, r26
    39d4:	ef 01       	movw	r28, r30
    39d6:	1e df       	rcall	.-452    	; 0x3814 <__mulsf3x>
    39d8:	fe 01       	movw	r30, r28
    39da:	e8 94       	clt
    39dc:	a5 91       	lpm	r26, Z+
    39de:	25 91       	lpm	r18, Z+
    39e0:	35 91       	lpm	r19, Z+
    39e2:	45 91       	lpm	r20, Z+
    39e4:	55 91       	lpm	r21, Z+
    39e6:	ae f3       	brts	.-22     	; 0x39d2 <__fp_powser+0x16>
    39e8:	ef 01       	movw	r28, r30
    39ea:	41 dd       	rcall	.-1406   	; 0x346e <__addsf3x>
    39ec:	fe 01       	movw	r30, r28
    39ee:	97 01       	movw	r18, r14
    39f0:	a8 01       	movw	r20, r16
    39f2:	da 94       	dec	r13
    39f4:	79 f7       	brne	.-34     	; 0x39d4 <__fp_powser+0x18>
    39f6:	df 90       	pop	r13
    39f8:	ef 90       	pop	r14
    39fa:	ff 90       	pop	r15
    39fc:	0f 91       	pop	r16
    39fe:	1f 91       	pop	r17
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <inverse>:
    3a06:	9b 01       	movw	r18, r22
    3a08:	ac 01       	movw	r20, r24
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	80 e8       	ldi	r24, 0x80	; 128
    3a10:	9f e3       	ldi	r25, 0x3F	; 63
    3a12:	84 cd       	rjmp	.-1272   	; 0x351c <__divsf3>
    3a14:	8e ce       	rjmp	.-740    	; 0x3732 <__fp_inf>
    3a16:	ac c0       	rjmp	.+344    	; 0x3b70 <__fp_mpack>

00003a18 <ldexp>:
    3a18:	cc de       	rcall	.-616    	; 0x37b2 <__fp_splitA>
    3a1a:	e8 f3       	brcs	.-6      	; 0x3a16 <inverse+0x10>
    3a1c:	99 23       	and	r25, r25
    3a1e:	d9 f3       	breq	.-10     	; 0x3a16 <inverse+0x10>
    3a20:	94 0f       	add	r25, r20
    3a22:	51 1d       	adc	r21, r1
    3a24:	bb f3       	brvs	.-18     	; 0x3a14 <inverse+0xe>
    3a26:	91 50       	subi	r25, 0x01	; 1
    3a28:	50 40       	sbci	r21, 0x00	; 0
    3a2a:	94 f0       	brlt	.+36     	; 0x3a50 <ldexp+0x38>
    3a2c:	59 f0       	breq	.+22     	; 0x3a44 <ldexp+0x2c>
    3a2e:	88 23       	and	r24, r24
    3a30:	32 f0       	brmi	.+12     	; 0x3a3e <ldexp+0x26>
    3a32:	66 0f       	add	r22, r22
    3a34:	77 1f       	adc	r23, r23
    3a36:	88 1f       	adc	r24, r24
    3a38:	91 50       	subi	r25, 0x01	; 1
    3a3a:	50 40       	sbci	r21, 0x00	; 0
    3a3c:	c1 f7       	brne	.-16     	; 0x3a2e <ldexp+0x16>
    3a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a40:	51 05       	cpc	r21, r1
    3a42:	44 f7       	brge	.-48     	; 0x3a14 <inverse+0xe>
    3a44:	88 0f       	add	r24, r24
    3a46:	91 1d       	adc	r25, r1
    3a48:	96 95       	lsr	r25
    3a4a:	87 95       	ror	r24
    3a4c:	97 f9       	bld	r25, 7
    3a4e:	08 95       	ret
    3a50:	5f 3f       	cpi	r21, 0xFF	; 255
    3a52:	ac f0       	brlt	.+42     	; 0x3a7e <ldexp+0x66>
    3a54:	98 3e       	cpi	r25, 0xE8	; 232
    3a56:	9c f0       	brlt	.+38     	; 0x3a7e <ldexp+0x66>
    3a58:	bb 27       	eor	r27, r27
    3a5a:	86 95       	lsr	r24
    3a5c:	77 95       	ror	r23
    3a5e:	67 95       	ror	r22
    3a60:	b7 95       	ror	r27
    3a62:	08 f4       	brcc	.+2      	; 0x3a66 <ldexp+0x4e>
    3a64:	b1 60       	ori	r27, 0x01	; 1
    3a66:	93 95       	inc	r25
    3a68:	c1 f7       	brne	.-16     	; 0x3a5a <ldexp+0x42>
    3a6a:	bb 0f       	add	r27, r27
    3a6c:	58 f7       	brcc	.-42     	; 0x3a44 <ldexp+0x2c>
    3a6e:	11 f4       	brne	.+4      	; 0x3a74 <ldexp+0x5c>
    3a70:	60 ff       	sbrs	r22, 0
    3a72:	e8 cf       	rjmp	.-48     	; 0x3a44 <ldexp+0x2c>
    3a74:	6f 5f       	subi	r22, 0xFF	; 255
    3a76:	7f 4f       	sbci	r23, 0xFF	; 255
    3a78:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7c:	e3 cf       	rjmp	.-58     	; 0x3a44 <ldexp+0x2c>
    3a7e:	b4 ce       	rjmp	.-664    	; 0x37e8 <__fp_szero>
    3a80:	0e f0       	brts	.+2      	; 0x3a84 <ldexp+0x6c>
    3a82:	76 c0       	rjmp	.+236    	; 0x3b70 <__fp_mpack>
    3a84:	5c ce       	rjmp	.-840    	; 0x373e <__fp_nan>
    3a86:	68 94       	set
    3a88:	54 ce       	rjmp	.-856    	; 0x3732 <__fp_inf>

00003a8a <log>:
    3a8a:	93 de       	rcall	.-730    	; 0x37b2 <__fp_splitA>
    3a8c:	c8 f3       	brcs	.-14     	; 0x3a80 <ldexp+0x68>
    3a8e:	99 23       	and	r25, r25
    3a90:	d1 f3       	breq	.-12     	; 0x3a86 <ldexp+0x6e>
    3a92:	c6 f3       	brts	.-16     	; 0x3a84 <ldexp+0x6c>
    3a94:	df 93       	push	r29
    3a96:	cf 93       	push	r28
    3a98:	1f 93       	push	r17
    3a9a:	0f 93       	push	r16
    3a9c:	ff 92       	push	r15
    3a9e:	c9 2f       	mov	r28, r25
    3aa0:	dd 27       	eor	r29, r29
    3aa2:	88 23       	and	r24, r24
    3aa4:	2a f0       	brmi	.+10     	; 0x3ab0 <log+0x26>
    3aa6:	21 97       	sbiw	r28, 0x01	; 1
    3aa8:	66 0f       	add	r22, r22
    3aaa:	77 1f       	adc	r23, r23
    3aac:	88 1f       	adc	r24, r24
    3aae:	da f7       	brpl	.-10     	; 0x3aa6 <log+0x1c>
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f eb       	ldi	r21, 0xBF	; 191
    3ab8:	9f e3       	ldi	r25, 0x3F	; 63
    3aba:	88 39       	cpi	r24, 0x98	; 152
    3abc:	20 f0       	brcs	.+8      	; 0x3ac6 <log+0x3c>
    3abe:	80 3e       	cpi	r24, 0xE0	; 224
    3ac0:	30 f0       	brcs	.+12     	; 0x3ace <log+0x44>
    3ac2:	21 96       	adiw	r28, 0x01	; 1
    3ac4:	8f 77       	andi	r24, 0x7F	; 127
    3ac6:	c2 dc       	rcall	.-1660   	; 0x344c <__addsf3>
    3ac8:	e2 e3       	ldi	r30, 0x32	; 50
    3aca:	f1 e0       	ldi	r31, 0x01	; 1
    3acc:	03 c0       	rjmp	.+6      	; 0x3ad4 <log+0x4a>
    3ace:	be dc       	rcall	.-1668   	; 0x344c <__addsf3>
    3ad0:	ef e5       	ldi	r30, 0x5F	; 95
    3ad2:	f1 e0       	ldi	r31, 0x01	; 1
    3ad4:	73 df       	rcall	.-282    	; 0x39bc <__fp_powser>
    3ad6:	8b 01       	movw	r16, r22
    3ad8:	be 01       	movw	r22, r28
    3ada:	ec 01       	movw	r28, r24
    3adc:	fb 2e       	mov	r15, r27
    3ade:	6f 57       	subi	r22, 0x7F	; 127
    3ae0:	71 09       	sbc	r23, r1
    3ae2:	75 95       	asr	r23
    3ae4:	77 1f       	adc	r23, r23
    3ae6:	88 0b       	sbc	r24, r24
    3ae8:	99 0b       	sbc	r25, r25
    3aea:	86 dd       	rcall	.-1268   	; 0x35f8 <__floatsisf>
    3aec:	28 e1       	ldi	r18, 0x18	; 24
    3aee:	32 e7       	ldi	r19, 0x72	; 114
    3af0:	41 e3       	ldi	r20, 0x31	; 49
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	8f de       	rcall	.-738    	; 0x3814 <__mulsf3x>
    3af6:	af 2d       	mov	r26, r15
    3af8:	98 01       	movw	r18, r16
    3afa:	ae 01       	movw	r20, r28
    3afc:	ff 90       	pop	r15
    3afe:	0f 91       	pop	r16
    3b00:	1f 91       	pop	r17
    3b02:	cf 91       	pop	r28
    3b04:	df 91       	pop	r29
    3b06:	b3 dc       	rcall	.-1690   	; 0x346e <__addsf3x>
    3b08:	3b ce       	rjmp	.-906    	; 0x3780 <__fp_round>

00003b0a <modf>:
    3b0a:	fa 01       	movw	r30, r20
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	aa 0f       	add	r26, r26
    3b10:	bb 1f       	adc	r27, r27
    3b12:	9b 01       	movw	r18, r22
    3b14:	ac 01       	movw	r20, r24
    3b16:	bf 57       	subi	r27, 0x7F	; 127
    3b18:	28 f4       	brcc	.+10     	; 0x3b24 <modf+0x1a>
    3b1a:	22 27       	eor	r18, r18
    3b1c:	33 27       	eor	r19, r19
    3b1e:	44 27       	eor	r20, r20
    3b20:	50 78       	andi	r21, 0x80	; 128
    3b22:	1f c0       	rjmp	.+62     	; 0x3b62 <modf+0x58>
    3b24:	b7 51       	subi	r27, 0x17	; 23
    3b26:	88 f4       	brcc	.+34     	; 0x3b4a <modf+0x40>
    3b28:	ab 2f       	mov	r26, r27
    3b2a:	00 24       	eor	r0, r0
    3b2c:	46 95       	lsr	r20
    3b2e:	37 95       	ror	r19
    3b30:	27 95       	ror	r18
    3b32:	01 1c       	adc	r0, r1
    3b34:	a3 95       	inc	r26
    3b36:	d2 f3       	brmi	.-12     	; 0x3b2c <modf+0x22>
    3b38:	00 20       	and	r0, r0
    3b3a:	69 f0       	breq	.+26     	; 0x3b56 <modf+0x4c>
    3b3c:	22 0f       	add	r18, r18
    3b3e:	33 1f       	adc	r19, r19
    3b40:	44 1f       	adc	r20, r20
    3b42:	b3 95       	inc	r27
    3b44:	da f3       	brmi	.-10     	; 0x3b3c <modf+0x32>
    3b46:	0d d0       	rcall	.+26     	; 0x3b62 <modf+0x58>
    3b48:	80 cc       	rjmp	.-1792   	; 0x344a <__subsf3>
    3b4a:	61 30       	cpi	r22, 0x01	; 1
    3b4c:	71 05       	cpc	r23, r1
    3b4e:	a0 e8       	ldi	r26, 0x80	; 128
    3b50:	8a 07       	cpc	r24, r26
    3b52:	b9 46       	sbci	r27, 0x69	; 105
    3b54:	30 f4       	brcc	.+12     	; 0x3b62 <modf+0x58>
    3b56:	9b 01       	movw	r18, r22
    3b58:	ac 01       	movw	r20, r24
    3b5a:	66 27       	eor	r22, r22
    3b5c:	77 27       	eor	r23, r23
    3b5e:	88 27       	eor	r24, r24
    3b60:	90 78       	andi	r25, 0x80	; 128
    3b62:	30 96       	adiw	r30, 0x00	; 0
    3b64:	21 f0       	breq	.+8      	; 0x3b6e <modf+0x64>
    3b66:	20 83       	st	Z, r18
    3b68:	31 83       	std	Z+1, r19	; 0x01
    3b6a:	42 83       	std	Z+2, r20	; 0x02
    3b6c:	53 83       	std	Z+3, r21	; 0x03
    3b6e:	08 95       	ret

00003b70 <__fp_mpack>:
    3b70:	9f 3f       	cpi	r25, 0xFF	; 255
    3b72:	31 f0       	breq	.+12     	; 0x3b80 <__fp_mpack_finite+0xc>

00003b74 <__fp_mpack_finite>:
    3b74:	91 50       	subi	r25, 0x01	; 1
    3b76:	20 f4       	brcc	.+8      	; 0x3b80 <__fp_mpack_finite+0xc>
    3b78:	87 95       	ror	r24
    3b7a:	77 95       	ror	r23
    3b7c:	67 95       	ror	r22
    3b7e:	b7 95       	ror	r27
    3b80:	88 0f       	add	r24, r24
    3b82:	91 1d       	adc	r25, r1
    3b84:	96 95       	lsr	r25
    3b86:	87 95       	ror	r24
    3b88:	97 f9       	bld	r25, 7
    3b8a:	08 95       	ret

00003b8c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3b8c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3b8e:	91 8d       	ldd	r25, Z+25	; 0x19
    3b90:	22 8d       	ldd	r18, Z+26	; 0x1a
    3b92:	89 2f       	mov	r24, r25
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	80 5c       	subi	r24, 0xC0	; 192
    3b98:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9a:	82 1b       	sub	r24, r18
    3b9c:	91 09       	sbc	r25, r1
}
    3b9e:	8f 73       	andi	r24, 0x3F	; 63
    3ba0:	99 27       	eor	r25, r25
    3ba2:	08 95       	ret

00003ba4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3ba4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3ba6:	91 8d       	ldd	r25, Z+25	; 0x19
    3ba8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3baa:	98 17       	cp	r25, r24
    3bac:	31 f0       	breq	.+12     	; 0x3bba <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3bae:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bb0:	e8 0f       	add	r30, r24
    3bb2:	f1 1d       	adc	r31, r1
    3bb4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3bba:	8f ef       	ldi	r24, 0xFF	; 255
    3bbc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3bbe:	08 95       	ret

00003bc0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3bc0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3bc2:	91 8d       	ldd	r25, Z+25	; 0x19
    3bc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bc6:	98 17       	cp	r25, r24
    3bc8:	61 f0       	breq	.+24     	; 0x3be2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3bca:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bcc:	df 01       	movw	r26, r30
    3bce:	a8 0f       	add	r26, r24
    3bd0:	b1 1d       	adc	r27, r1
    3bd2:	5d 96       	adiw	r26, 0x1d	; 29
    3bd4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3bd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bd8:	9f 5f       	subi	r25, 0xFF	; 255
    3bda:	9f 73       	andi	r25, 0x3F	; 63
    3bdc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3be2:	8f ef       	ldi	r24, 0xFF	; 255
    3be4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3be6:	08 95       	ret

00003be8 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3be8:	fc 01       	movw	r30, r24
    3bea:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3bec:	44 8d       	ldd	r20, Z+28	; 0x1c
    3bee:	25 2f       	mov	r18, r21
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	84 2f       	mov	r24, r20
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3bf6:	82 1b       	sub	r24, r18
    3bf8:	93 0b       	sbc	r25, r19
    3bfa:	54 17       	cp	r21, r20
    3bfc:	10 f0       	brcs	.+4      	; 0x3c02 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3bfe:	cf 96       	adiw	r24, 0x3f	; 63
    3c00:	08 95       	ret
  return tail - head - 1;
    3c02:	01 97       	sbiw	r24, 0x01	; 1
}
    3c04:	08 95       	ret

00003c06 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3c06:	82 e9       	ldi	r24, 0x92	; 146
    3c08:	9f e1       	ldi	r25, 0x1F	; 31
    3c0a:	89 2b       	or	r24, r25
    3c0c:	39 f0       	breq	.+14     	; 0x3c1c <_Z14serialEventRunv+0x16>
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	89 2b       	or	r24, r25
    3c14:	19 f0       	breq	.+6      	; 0x3c1c <_Z14serialEventRunv+0x16>
    3c16:	86 d1       	rcall	.+780    	; 0x3f24 <_Z17Serial0_availablev>
    3c18:	81 11       	cpse	r24, r1
    3c1a:	25 c0       	rjmp	.+74     	; 0x3c66 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	89 2b       	or	r24, r25
    3c22:	41 f0       	breq	.+16     	; 0x3c34 <_Z14serialEventRunv+0x2e>
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	89 2b       	or	r24, r25
    3c2a:	21 f0       	breq	.+8      	; 0x3c34 <_Z14serialEventRunv+0x2e>
    3c2c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c30:	81 11       	cpse	r24, r1
    3c32:	1c c0       	rjmp	.+56     	; 0x3c6c <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	89 2b       	or	r24, r25
    3c3a:	41 f0       	breq	.+16     	; 0x3c4c <_Z14serialEventRunv+0x46>
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	89 2b       	or	r24, r25
    3c42:	21 f0       	breq	.+8      	; 0x3c4c <_Z14serialEventRunv+0x46>
    3c44:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c48:	81 11       	cpse	r24, r1
    3c4a:	13 c0       	rjmp	.+38     	; 0x3c72 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	89 2b       	or	r24, r25
    3c52:	a1 f0       	breq	.+40     	; 0x3c7c <_Z14serialEventRunv+0x76>
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	89 2b       	or	r24, r25
    3c5a:	81 f0       	breq	.+32     	; 0x3c7c <_Z14serialEventRunv+0x76>
    3c5c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c60:	81 11       	cpse	r24, r1
    3c62:	0a c0       	rjmp	.+20     	; 0x3c78 <_Z14serialEventRunv+0x72>
    3c64:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3c66:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c6a:	d8 cf       	rjmp	.-80     	; 0x3c1c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3c6c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c70:	e1 cf       	rjmp	.-62     	; 0x3c34 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3c72:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3c76:	ea cf       	rjmp	.-44     	; 0x3c4c <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3c78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3c7c:	08 95       	ret

00003c7e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3c7e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3c80:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c82:	df 01       	movw	r26, r30
    3c84:	a8 0f       	add	r26, r24
    3c86:	b1 1d       	adc	r27, r1
    3c88:	a3 5a       	subi	r26, 0xA3	; 163
    3c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3c8e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	01 96       	adiw	r24, 0x01	; 1
    3c94:	8f 73       	andi	r24, 0x3F	; 63
    3c96:	99 27       	eor	r25, r25
    3c98:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3c9a:	a6 89       	ldd	r26, Z+22	; 0x16
    3c9c:	b7 89       	ldd	r27, Z+23	; 0x17
    3c9e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3ca0:	a0 89       	ldd	r26, Z+16	; 0x10
    3ca2:	b1 89       	ldd	r27, Z+17	; 0x11
    3ca4:	8c 91       	ld	r24, X
    3ca6:	83 70       	andi	r24, 0x03	; 3
    3ca8:	80 64       	ori	r24, 0x40	; 64
    3caa:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3cac:	93 8d       	ldd	r25, Z+27	; 0x1b
    3cae:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cb0:	98 13       	cpse	r25, r24
    3cb2:	06 c0       	rjmp	.+12     	; 0x3cc0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3cb4:	02 88       	ldd	r0, Z+18	; 0x12
    3cb6:	f3 89       	ldd	r31, Z+19	; 0x13
    3cb8:	e0 2d       	mov	r30, r0
    3cba:	80 81       	ld	r24, Z
    3cbc:	8f 7d       	andi	r24, 0xDF	; 223
    3cbe:	80 83       	st	Z, r24
    3cc0:	08 95       	ret

00003cc2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3cc2:	ef 92       	push	r14
    3cc4:	ff 92       	push	r15
    3cc6:	0f 93       	push	r16
    3cc8:	1f 93       	push	r17
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	ec 01       	movw	r28, r24
  _written = true;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3cd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3cd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3cd8:	98 13       	cpse	r25, r24
    3cda:	05 c0       	rjmp	.+10     	; 0x3ce6 <_ZN14HardwareSerial5writeEh+0x24>
    3cdc:	e8 89       	ldd	r30, Y+16	; 0x10
    3cde:	f9 89       	ldd	r31, Y+17	; 0x11
    3ce0:	80 81       	ld	r24, Z
    3ce2:	85 fd       	sbrc	r24, 5
    3ce4:	25 c0       	rjmp	.+74     	; 0x3d30 <_ZN14HardwareSerial5writeEh+0x6e>
    3ce6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3ce8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3cea:	10 e0       	ldi	r17, 0x00	; 0
    3cec:	0f 5f       	subi	r16, 0xFF	; 255
    3cee:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf0:	0f 73       	andi	r16, 0x3F	; 63
    3cf2:	11 27       	eor	r17, r17
    3cf4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3cf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3cf8:	e8 12       	cpse	r14, r24
    3cfa:	0b c0       	rjmp	.+22     	; 0x3d12 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	07 fc       	sbrc	r0, 7
    3d00:	fa cf       	rjmp	.-12     	; 0x3cf6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3d02:	e8 89       	ldd	r30, Y+16	; 0x10
    3d04:	f9 89       	ldd	r31, Y+17	; 0x11
    3d06:	80 81       	ld	r24, Z
    3d08:	85 ff       	sbrs	r24, 5
    3d0a:	f5 cf       	rjmp	.-22     	; 0x3cf6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	b7 df       	rcall	.-146    	; 0x3c7e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3d10:	f2 cf       	rjmp	.-28     	; 0x3cf6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d14:	fe 01       	movw	r30, r28
    3d16:	e8 0f       	add	r30, r24
    3d18:	f1 1d       	adc	r31, r1
    3d1a:	e3 5a       	subi	r30, 0xA3	; 163
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3d20:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d22:	f8 94       	cli
    _tx_buffer_head = i;
    3d24:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3d26:	ea 89       	ldd	r30, Y+18	; 0x12
    3d28:	fb 89       	ldd	r31, Y+19	; 0x13
    3d2a:	80 81       	ld	r24, Z
    3d2c:	80 62       	ori	r24, 0x20	; 32
    3d2e:	0a c0       	rjmp	.+20     	; 0x3d44 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3d30:	9f b7       	in	r25, 0x3f	; 63
    3d32:	f8 94       	cli
      *_udr = c;
    3d34:	ee 89       	ldd	r30, Y+22	; 0x16
    3d36:	ff 89       	ldd	r31, Y+23	; 0x17
    3d38:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3d3a:	e8 89       	ldd	r30, Y+16	; 0x10
    3d3c:	f9 89       	ldd	r31, Y+17	; 0x11
    3d3e:	80 81       	ld	r24, Z
    3d40:	83 70       	andi	r24, 0x03	; 3
    3d42:	80 64       	ori	r24, 0x40	; 64
    3d44:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3d46:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	ff 90       	pop	r15
    3d56:	ef 90       	pop	r14
    3d58:	08 95       	ret

00003d5a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3d60:	88 8d       	ldd	r24, Y+24	; 0x18
    3d62:	88 23       	and	r24, r24
    3d64:	c1 f0       	breq	.+48     	; 0x3d96 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3d66:	ea 89       	ldd	r30, Y+18	; 0x12
    3d68:	fb 89       	ldd	r31, Y+19	; 0x13
    3d6a:	80 81       	ld	r24, Z
    3d6c:	85 fd       	sbrc	r24, 5
    3d6e:	05 c0       	rjmp	.+10     	; 0x3d7a <_ZN14HardwareSerial5flushEv+0x20>
    3d70:	a8 89       	ldd	r26, Y+16	; 0x10
    3d72:	b9 89       	ldd	r27, Y+17	; 0x11
    3d74:	8c 91       	ld	r24, X
    3d76:	86 fd       	sbrc	r24, 6
    3d78:	0e c0       	rjmp	.+28     	; 0x3d96 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	07 fc       	sbrc	r0, 7
    3d7e:	f5 cf       	rjmp	.-22     	; 0x3d6a <_ZN14HardwareSerial5flushEv+0x10>
    3d80:	80 81       	ld	r24, Z
    3d82:	85 ff       	sbrs	r24, 5
    3d84:	f2 cf       	rjmp	.-28     	; 0x3d6a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3d86:	a8 89       	ldd	r26, Y+16	; 0x10
    3d88:	b9 89       	ldd	r27, Y+17	; 0x11
    3d8a:	8c 91       	ld	r24, X
    3d8c:	85 ff       	sbrs	r24, 5
    3d8e:	ed cf       	rjmp	.-38     	; 0x3d6a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3d90:	ce 01       	movw	r24, r28
    3d92:	75 df       	rcall	.-278    	; 0x3c7e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3d94:	e8 cf       	rjmp	.-48     	; 0x3d66 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3d96:	df 91       	pop	r29
    3d98:	cf 91       	pop	r28
    3d9a:	08 95       	ret

00003d9c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3d9c:	cf 92       	push	r12
    3d9e:	df 92       	push	r13
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	1f 93       	push	r17
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	ec 01       	movw	r28, r24
    3dac:	6a 01       	movw	r12, r20
    3dae:	7b 01       	movw	r14, r22
    3db0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3db2:	e8 89       	ldd	r30, Y+16	; 0x10
    3db4:	f9 89       	ldd	r31, Y+17	; 0x11
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3dba:	41 15       	cp	r20, r1
    3dbc:	51 4e       	sbci	r21, 0xE1	; 225
    3dbe:	61 05       	cpc	r22, r1
    3dc0:	71 05       	cpc	r23, r1
    3dc2:	b1 f0       	breq	.+44     	; 0x3df0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	79 e0       	ldi	r23, 0x09	; 9
    3dc8:	8d e3       	ldi	r24, 0x3D	; 61
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	a7 01       	movw	r20, r14
    3dce:	96 01       	movw	r18, r12
    3dd0:	0e 94 c8 33 	call	0x6790	; 0x6790 <__udivmodsi4>
    3dd4:	da 01       	movw	r26, r20
    3dd6:	c9 01       	movw	r24, r18
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	a1 09       	sbc	r26, r1
    3ddc:	b1 09       	sbc	r27, r1
    3dde:	b6 95       	lsr	r27
    3de0:	a7 95       	ror	r26
    3de2:	97 95       	ror	r25
    3de4:	87 95       	ror	r24
    3de6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3de8:	21 15       	cp	r18, r1
    3dea:	80 e1       	ldi	r24, 0x10	; 16
    3dec:	38 07       	cpc	r19, r24
    3dee:	a8 f0       	brcs	.+42     	; 0x3e1a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3df0:	e8 89       	ldd	r30, Y+16	; 0x10
    3df2:	f9 89       	ldd	r31, Y+17	; 0x11
    3df4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3df6:	60 e8       	ldi	r22, 0x80	; 128
    3df8:	74 e8       	ldi	r23, 0x84	; 132
    3dfa:	8e e1       	ldi	r24, 0x1E	; 30
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	a7 01       	movw	r20, r14
    3e00:	96 01       	movw	r18, r12
    3e02:	0e 94 c8 33 	call	0x6790	; 0x6790 <__udivmodsi4>
    3e06:	da 01       	movw	r26, r20
    3e08:	c9 01       	movw	r24, r18
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	a1 09       	sbc	r26, r1
    3e0e:	b1 09       	sbc	r27, r1
    3e10:	b6 95       	lsr	r27
    3e12:	a7 95       	ror	r26
    3e14:	97 95       	ror	r25
    3e16:	87 95       	ror	r24
    3e18:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3e1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e1c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e1e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3e20:	ee 85       	ldd	r30, Y+14	; 0x0e
    3e22:	ff 85       	ldd	r31, Y+15	; 0x0f
    3e24:	20 83       	st	Z, r18

  _written = false;
    3e26:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3e28:	ec 89       	ldd	r30, Y+20	; 0x14
    3e2a:	fd 89       	ldd	r31, Y+21	; 0x15
    3e2c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3e2e:	ea 89       	ldd	r30, Y+18	; 0x12
    3e30:	fb 89       	ldd	r31, Y+19	; 0x13
    3e32:	80 81       	ld	r24, Z
    3e34:	80 61       	ori	r24, 0x10	; 16
    3e36:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3e38:	ea 89       	ldd	r30, Y+18	; 0x12
    3e3a:	fb 89       	ldd	r31, Y+19	; 0x13
    3e3c:	80 81       	ld	r24, Z
    3e3e:	88 60       	ori	r24, 0x08	; 8
    3e40:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3e42:	ea 89       	ldd	r30, Y+18	; 0x12
    3e44:	fb 89       	ldd	r31, Y+19	; 0x13
    3e46:	80 81       	ld	r24, Z
    3e48:	80 68       	ori	r24, 0x80	; 128
    3e4a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3e4c:	ea 89       	ldd	r30, Y+18	; 0x12
    3e4e:	fb 89       	ldd	r31, Y+19	; 0x13
    3e50:	80 81       	ld	r24, Z
    3e52:	8f 7d       	andi	r24, 0xDF	; 223
    3e54:	80 83       	st	Z, r24
}
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	ff 90       	pop	r15
    3e5e:	ef 90       	pop	r14
    3e60:	df 90       	pop	r13
    3e62:	cf 90       	pop	r12
    3e64:	08 95       	ret

00003e66 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3e66:	1f 92       	push	r1
    3e68:	0f 92       	push	r0
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	0f 92       	push	r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	0b b6       	in	r0, 0x3b	; 59
    3e72:	0f 92       	push	r0
    3e74:	2f 93       	push	r18
    3e76:	8f 93       	push	r24
    3e78:	9f 93       	push	r25
    3e7a:	ef 93       	push	r30
    3e7c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3e7e:	e0 91 0d 08 	lds	r30, 0x080D	; 0x80080d <Serial+0x10>
    3e82:	f0 91 0e 08 	lds	r31, 0x080E	; 0x80080e <Serial+0x11>
    3e86:	80 81       	ld	r24, Z
    3e88:	e0 91 13 08 	lds	r30, 0x0813	; 0x800813 <Serial+0x16>
    3e8c:	f0 91 14 08 	lds	r31, 0x0814	; 0x800814 <Serial+0x17>
    3e90:	82 fd       	sbrc	r24, 2
    3e92:	12 c0       	rjmp	.+36     	; 0x3eb8 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3e94:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3e96:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <Serial+0x19>
    3e9a:	8f 5f       	subi	r24, 0xFF	; 255
    3e9c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3e9e:	20 91 17 08 	lds	r18, 0x0817	; 0x800817 <Serial+0x1a>
    3ea2:	82 17       	cp	r24, r18
    3ea4:	51 f0       	breq	.+20     	; 0x3eba <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    3ea6:	e0 91 16 08 	lds	r30, 0x0816	; 0x800816 <Serial+0x19>
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	e3 50       	subi	r30, 0x03	; 3
    3eae:	f8 4f       	sbci	r31, 0xF8	; 248
    3eb0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3eb2:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <Serial+0x19>
    3eb6:	01 c0       	rjmp	.+2      	; 0x3eba <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3eb8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3eba:	ff 91       	pop	r31
    3ebc:	ef 91       	pop	r30
    3ebe:	9f 91       	pop	r25
    3ec0:	8f 91       	pop	r24
    3ec2:	2f 91       	pop	r18
    3ec4:	0f 90       	pop	r0
    3ec6:	0b be       	out	0x3b, r0	; 59
    3ec8:	0f 90       	pop	r0
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	0f 90       	pop	r0
    3ece:	1f 90       	pop	r1
    3ed0:	18 95       	reti

00003ed2 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3ed2:	1f 92       	push	r1
    3ed4:	0f 92       	push	r0
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	0f 92       	push	r0
    3eda:	11 24       	eor	r1, r1
    3edc:	0b b6       	in	r0, 0x3b	; 59
    3ede:	0f 92       	push	r0
    3ee0:	2f 93       	push	r18
    3ee2:	3f 93       	push	r19
    3ee4:	4f 93       	push	r20
    3ee6:	5f 93       	push	r21
    3ee8:	6f 93       	push	r22
    3eea:	7f 93       	push	r23
    3eec:	8f 93       	push	r24
    3eee:	9f 93       	push	r25
    3ef0:	af 93       	push	r26
    3ef2:	bf 93       	push	r27
    3ef4:	ef 93       	push	r30
    3ef6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3ef8:	8d ef       	ldi	r24, 0xFD	; 253
    3efa:	97 e0       	ldi	r25, 0x07	; 7
    3efc:	c0 de       	rcall	.-640    	; 0x3c7e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3efe:	ff 91       	pop	r31
    3f00:	ef 91       	pop	r30
    3f02:	bf 91       	pop	r27
    3f04:	af 91       	pop	r26
    3f06:	9f 91       	pop	r25
    3f08:	8f 91       	pop	r24
    3f0a:	7f 91       	pop	r23
    3f0c:	6f 91       	pop	r22
    3f0e:	5f 91       	pop	r21
    3f10:	4f 91       	pop	r20
    3f12:	3f 91       	pop	r19
    3f14:	2f 91       	pop	r18
    3f16:	0f 90       	pop	r0
    3f18:	0b be       	out	0x3b, r0	; 59
    3f1a:	0f 90       	pop	r0
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	0f 90       	pop	r0
    3f20:	1f 90       	pop	r1
    3f22:	18 95       	reti

00003f24 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3f24:	8d ef       	ldi	r24, 0xFD	; 253
    3f26:	97 e0       	ldi	r25, 0x07	; 7
    3f28:	31 de       	rcall	.-926    	; 0x3b8c <_ZN14HardwareSerial9availableEv>
    3f2a:	21 e0       	ldi	r18, 0x01	; 1
    3f2c:	89 2b       	or	r24, r25
    3f2e:	09 f4       	brne	.+2      	; 0x3f32 <_Z17Serial0_availablev+0xe>
    3f30:	20 e0       	ldi	r18, 0x00	; 0
}
    3f32:	82 2f       	mov	r24, r18
    3f34:	08 95       	ret

00003f36 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3f36:	ed ef       	ldi	r30, 0xFD	; 253
    3f38:	f7 e0       	ldi	r31, 0x07	; 7
    3f3a:	13 82       	std	Z+3, r1	; 0x03
    3f3c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3f3e:	88 ee       	ldi	r24, 0xE8	; 232
    3f40:	93 e0       	ldi	r25, 0x03	; 3
    3f42:	a0 e0       	ldi	r26, 0x00	; 0
    3f44:	b0 e0       	ldi	r27, 0x00	; 0
    3f46:	84 83       	std	Z+4, r24	; 0x04
    3f48:	95 83       	std	Z+5, r25	; 0x05
    3f4a:	a6 83       	std	Z+6, r26	; 0x06
    3f4c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3f4e:	86 ec       	ldi	r24, 0xC6	; 198
    3f50:	95 e0       	ldi	r25, 0x05	; 5
    3f52:	91 83       	std	Z+1, r25	; 0x01
    3f54:	80 83       	st	Z, r24
    3f56:	85 ec       	ldi	r24, 0xC5	; 197
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	95 87       	std	Z+13, r25	; 0x0d
    3f5c:	84 87       	std	Z+12, r24	; 0x0c
    3f5e:	84 ec       	ldi	r24, 0xC4	; 196
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	97 87       	std	Z+15, r25	; 0x0f
    3f64:	86 87       	std	Z+14, r24	; 0x0e
    3f66:	80 ec       	ldi	r24, 0xC0	; 192
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	91 8b       	std	Z+17, r25	; 0x11
    3f6c:	80 8b       	std	Z+16, r24	; 0x10
    3f6e:	81 ec       	ldi	r24, 0xC1	; 193
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	93 8b       	std	Z+19, r25	; 0x13
    3f74:	82 8b       	std	Z+18, r24	; 0x12
    3f76:	82 ec       	ldi	r24, 0xC2	; 194
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	95 8b       	std	Z+21, r25	; 0x15
    3f7c:	84 8b       	std	Z+20, r24	; 0x14
    3f7e:	86 ec       	ldi	r24, 0xC6	; 198
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	97 8b       	std	Z+23, r25	; 0x17
    3f84:	86 8b       	std	Z+22, r24	; 0x16
    3f86:	11 8e       	std	Z+25, r1	; 0x19
    3f88:	12 8e       	std	Z+26, r1	; 0x1a
    3f8a:	13 8e       	std	Z+27, r1	; 0x1b
    3f8c:	14 8e       	std	Z+28, r1	; 0x1c
    3f8e:	08 95       	ret

00003f90 <initVariant>:
    3f90:	08 95       	ret

00003f92 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3f92:	32 d4       	rcall	.+2148   	; 0x47f8 <init>

	initVariant();
    3f94:	fd df       	rcall	.-6      	; 0x3f90 <initVariant>
    3f96:	0e 94 b8 05 	call	0xb70	; 0xb70 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3f9a:	c3 e0       	ldi	r28, 0x03	; 3
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3f9c:	de e1       	ldi	r29, 0x1E	; 30
    3f9e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    3fa2:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    3fa4:	e1 f3       	breq	.-8      	; 0x3f9e <main+0xc>
    3fa6:	2f de       	rcall	.-930    	; 0x3c06 <_Z14serialEventRunv>
    3fa8:	fa cf       	rjmp	.-12     	; 0x3f9e <main+0xc>

00003faa <_ZdlPv>:
    3faa:	0c 94 1f 36 	jmp	0x6c3e	; 0x6c3e <free>

00003fae <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3fae:	cf 92       	push	r12
    3fb0:	df 92       	push	r13
    3fb2:	ef 92       	push	r14
    3fb4:	ff 92       	push	r15
    3fb6:	0f 93       	push	r16
    3fb8:	1f 93       	push	r17
    3fba:	cf 93       	push	r28
    3fbc:	df 93       	push	r29
    3fbe:	6c 01       	movw	r12, r24
    3fc0:	7a 01       	movw	r14, r20
    3fc2:	8b 01       	movw	r16, r22
    3fc4:	c0 e0       	ldi	r28, 0x00	; 0
    3fc6:	d0 e0       	ldi	r29, 0x00	; 0
    3fc8:	ce 15       	cp	r28, r14
    3fca:	df 05       	cpc	r29, r15
    3fcc:	81 f0       	breq	.+32     	; 0x3fee <_ZN5Print5writeEPKhj+0x40>
    3fce:	d8 01       	movw	r26, r16
    3fd0:	6d 91       	ld	r22, X+
    3fd2:	8d 01       	movw	r16, r26
    3fd4:	d6 01       	movw	r26, r12
    3fd6:	ed 91       	ld	r30, X+
    3fd8:	fc 91       	ld	r31, X
    3fda:	01 90       	ld	r0, Z+
    3fdc:	f0 81       	ld	r31, Z
    3fde:	e0 2d       	mov	r30, r0
    3fe0:	c6 01       	movw	r24, r12
    3fe2:	19 95       	eicall
    3fe4:	89 2b       	or	r24, r25
    3fe6:	11 f0       	breq	.+4      	; 0x3fec <_ZN5Print5writeEPKhj+0x3e>
    3fe8:	21 96       	adiw	r28, 0x01	; 1
    3fea:	ee cf       	rjmp	.-36     	; 0x3fc8 <_ZN5Print5writeEPKhj+0x1a>
    3fec:	7e 01       	movw	r14, r28
    3fee:	c7 01       	movw	r24, r14
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	ff 90       	pop	r15
    3ffa:	ef 90       	pop	r14
    3ffc:	df 90       	pop	r13
    3ffe:	cf 90       	pop	r12
    4000:	08 95       	ret

00004002 <_ZN5Print5writeEPKc>:
    4002:	61 15       	cp	r22, r1
    4004:	71 05       	cpc	r23, r1
    4006:	79 f0       	breq	.+30     	; 0x4026 <_ZN5Print5writeEPKc+0x24>
    4008:	fb 01       	movw	r30, r22
    400a:	01 90       	ld	r0, Z+
    400c:	00 20       	and	r0, r0
    400e:	e9 f7       	brne	.-6      	; 0x400a <_ZN5Print5writeEPKc+0x8>
    4010:	31 97       	sbiw	r30, 0x01	; 1
    4012:	af 01       	movw	r20, r30
    4014:	46 1b       	sub	r20, r22
    4016:	57 0b       	sbc	r21, r23
    4018:	dc 01       	movw	r26, r24
    401a:	ed 91       	ld	r30, X+
    401c:	fc 91       	ld	r31, X
    401e:	02 80       	ldd	r0, Z+2	; 0x02
    4020:	f3 81       	ldd	r31, Z+3	; 0x03
    4022:	e0 2d       	mov	r30, r0
    4024:	19 94       	eijmp
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	08 95       	ret

0000402c <_ZN5Print5printERK6String>:
    402c:	db 01       	movw	r26, r22
    402e:	14 96       	adiw	r26, 0x04	; 4
    4030:	4d 91       	ld	r20, X+
    4032:	5c 91       	ld	r21, X
    4034:	15 97       	sbiw	r26, 0x05	; 5
    4036:	6d 91       	ld	r22, X+
    4038:	7c 91       	ld	r23, X
    403a:	dc 01       	movw	r26, r24
    403c:	ed 91       	ld	r30, X+
    403e:	fc 91       	ld	r31, X
    4040:	02 80       	ldd	r0, Z+2	; 0x02
    4042:	f3 81       	ldd	r31, Z+3	; 0x03
    4044:	e0 2d       	mov	r30, r0
    4046:	19 94       	eijmp

00004048 <_ZN5Print5printEPKc>:
    4048:	dc cf       	rjmp	.-72     	; 0x4002 <_ZN5Print5writeEPKc>

0000404a <_ZN5Print5printEc>:
    404a:	dc 01       	movw	r26, r24
    404c:	ed 91       	ld	r30, X+
    404e:	fc 91       	ld	r31, X
    4050:	01 90       	ld	r0, Z+
    4052:	f0 81       	ld	r31, Z
    4054:	e0 2d       	mov	r30, r0
    4056:	19 94       	eijmp

00004058 <_ZN5Print7printlnEv>:
    4058:	64 ed       	ldi	r22, 0xD4	; 212
    405a:	75 e0       	ldi	r23, 0x05	; 5
    405c:	d2 cf       	rjmp	.-92     	; 0x4002 <_ZN5Print5writeEPKc>

0000405e <_ZN5Print7printlnEPKc>:
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	ec 01       	movw	r28, r24
    4068:	cc df       	rcall	.-104    	; 0x4002 <_ZN5Print5writeEPKc>
    406a:	8c 01       	movw	r16, r24
    406c:	ce 01       	movw	r24, r28
    406e:	f4 df       	rcall	.-24     	; 0x4058 <_ZN5Print7printlnEv>
    4070:	80 0f       	add	r24, r16
    4072:	91 1f       	adc	r25, r17
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	08 95       	ret

0000407e <_ZN5Print11printNumberEmh>:
    407e:	8f 92       	push	r8
    4080:	9f 92       	push	r9
    4082:	af 92       	push	r10
    4084:	bf 92       	push	r11
    4086:	ef 92       	push	r14
    4088:	ff 92       	push	r15
    408a:	0f 93       	push	r16
    408c:	1f 93       	push	r17
    408e:	cf 93       	push	r28
    4090:	df 93       	push	r29
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	a1 97       	sbiw	r28, 0x21	; 33
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	7c 01       	movw	r14, r24
    40a4:	fa 01       	movw	r30, r20
    40a6:	cb 01       	movw	r24, r22
    40a8:	19 a2       	std	Y+33, r1	; 0x21
    40aa:	22 30       	cpi	r18, 0x02	; 2
    40ac:	08 f4       	brcc	.+2      	; 0x40b0 <_ZN5Print11printNumberEmh+0x32>
    40ae:	2a e0       	ldi	r18, 0x0A	; 10
    40b0:	8e 01       	movw	r16, r28
    40b2:	0f 5d       	subi	r16, 0xDF	; 223
    40b4:	1f 4f       	sbci	r17, 0xFF	; 255
    40b6:	82 2e       	mov	r8, r18
    40b8:	91 2c       	mov	r9, r1
    40ba:	a1 2c       	mov	r10, r1
    40bc:	b1 2c       	mov	r11, r1
    40be:	bf 01       	movw	r22, r30
    40c0:	a5 01       	movw	r20, r10
    40c2:	94 01       	movw	r18, r8
    40c4:	0e 94 c8 33 	call	0x6790	; 0x6790 <__udivmodsi4>
    40c8:	f9 01       	movw	r30, r18
    40ca:	ca 01       	movw	r24, r20
    40cc:	01 50       	subi	r16, 0x01	; 1
    40ce:	11 09       	sbc	r17, r1
    40d0:	6a 30       	cpi	r22, 0x0A	; 10
    40d2:	10 f4       	brcc	.+4      	; 0x40d8 <_ZN5Print11printNumberEmh+0x5a>
    40d4:	60 5d       	subi	r22, 0xD0	; 208
    40d6:	01 c0       	rjmp	.+2      	; 0x40da <_ZN5Print11printNumberEmh+0x5c>
    40d8:	69 5c       	subi	r22, 0xC9	; 201
    40da:	d8 01       	movw	r26, r16
    40dc:	6c 93       	st	X, r22
    40de:	23 2b       	or	r18, r19
    40e0:	24 2b       	or	r18, r20
    40e2:	25 2b       	or	r18, r21
    40e4:	61 f7       	brne	.-40     	; 0x40be <_ZN5Print11printNumberEmh+0x40>
    40e6:	b8 01       	movw	r22, r16
    40e8:	c7 01       	movw	r24, r14
    40ea:	8b df       	rcall	.-234    	; 0x4002 <_ZN5Print5writeEPKc>
    40ec:	a1 96       	adiw	r28, 0x21	; 33
    40ee:	0f b6       	in	r0, 0x3f	; 63
    40f0:	f8 94       	cli
    40f2:	de bf       	out	0x3e, r29	; 62
    40f4:	0f be       	out	0x3f, r0	; 63
    40f6:	cd bf       	out	0x3d, r28	; 61
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	1f 91       	pop	r17
    40fe:	0f 91       	pop	r16
    4100:	ff 90       	pop	r15
    4102:	ef 90       	pop	r14
    4104:	bf 90       	pop	r11
    4106:	af 90       	pop	r10
    4108:	9f 90       	pop	r9
    410a:	8f 90       	pop	r8
    410c:	08 95       	ret

0000410e <_ZN5Print5printEmi>:
    410e:	21 15       	cp	r18, r1
    4110:	31 05       	cpc	r19, r1
    4112:	41 f4       	brne	.+16     	; 0x4124 <_ZN5Print5printEmi+0x16>
    4114:	dc 01       	movw	r26, r24
    4116:	ed 91       	ld	r30, X+
    4118:	fc 91       	ld	r31, X
    411a:	01 90       	ld	r0, Z+
    411c:	f0 81       	ld	r31, Z
    411e:	e0 2d       	mov	r30, r0
    4120:	64 2f       	mov	r22, r20
    4122:	19 94       	eijmp
    4124:	ac cf       	rjmp	.-168    	; 0x407e <_ZN5Print11printNumberEmh>

00004126 <_ZN5Print5printEhi>:
    4126:	9a 01       	movw	r18, r20
    4128:	46 2f       	mov	r20, r22
    412a:	50 e0       	ldi	r21, 0x00	; 0
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	70 e0       	ldi	r23, 0x00	; 0
    4130:	ee cf       	rjmp	.-36     	; 0x410e <_ZN5Print5printEmi>

00004132 <_ZN5Print5printEji>:
    4132:	9a 01       	movw	r18, r20
    4134:	ab 01       	movw	r20, r22
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	e9 cf       	rjmp	.-46     	; 0x410e <_ZN5Print5printEmi>

0000413c <_ZN5Print7printlnEji>:
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	ec 01       	movw	r28, r24
    4146:	f5 df       	rcall	.-22     	; 0x4132 <_ZN5Print5printEji>
    4148:	8c 01       	movw	r16, r24
    414a:	ce 01       	movw	r24, r28
    414c:	85 df       	rcall	.-246    	; 0x4058 <_ZN5Print7printlnEv>
    414e:	80 0f       	add	r24, r16
    4150:	91 1f       	adc	r25, r17
    4152:	df 91       	pop	r29
    4154:	cf 91       	pop	r28
    4156:	1f 91       	pop	r17
    4158:	0f 91       	pop	r16
    415a:	08 95       	ret

0000415c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    415c:	7f 92       	push	r7
    415e:	8f 92       	push	r8
    4160:	9f 92       	push	r9
    4162:	af 92       	push	r10
    4164:	bf 92       	push	r11
    4166:	cf 92       	push	r12
    4168:	df 92       	push	r13
    416a:	ef 92       	push	r14
    416c:	ff 92       	push	r15
    416e:	0f 93       	push	r16
    4170:	1f 93       	push	r17
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	8c 01       	movw	r16, r24
    4178:	6a 01       	movw	r12, r20
    417a:	7b 01       	movw	r14, r22
    417c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    417e:	9a 01       	movw	r18, r20
    4180:	ab 01       	movw	r20, r22
    4182:	c7 01       	movw	r24, r14
    4184:	b6 01       	movw	r22, r12
    4186:	0e 94 94 33 	call	0x6728	; 0x6728 <__unordsf2>
    418a:	88 23       	and	r24, r24
    418c:	19 f0       	breq	.+6      	; 0x4194 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    418e:	67 ed       	ldi	r22, 0xD7	; 215
    4190:	75 e0       	ldi	r23, 0x05	; 5
    4192:	25 c0       	rjmp	.+74     	; 0x41de <_ZN5Print10printFloatEdh+0x82>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    4194:	46 01       	movw	r8, r12
    4196:	57 01       	movw	r10, r14
    4198:	e8 94       	clt
    419a:	b7 f8       	bld	r11, 7
    419c:	2f ef       	ldi	r18, 0xFF	; 255
    419e:	3f ef       	ldi	r19, 0xFF	; 255
    41a0:	4f e7       	ldi	r20, 0x7F	; 127
    41a2:	5f e7       	ldi	r21, 0x7F	; 127
    41a4:	c5 01       	movw	r24, r10
    41a6:	b4 01       	movw	r22, r8
    41a8:	0e 94 94 33 	call	0x6728	; 0x6728 <__unordsf2>
    41ac:	81 11       	cpse	r24, r1
    41ae:	0c c0       	rjmp	.+24     	; 0x41c8 <_ZN5Print10printFloatEdh+0x6c>
    41b0:	2f ef       	ldi	r18, 0xFF	; 255
    41b2:	3f ef       	ldi	r19, 0xFF	; 255
    41b4:	4f e7       	ldi	r20, 0x7F	; 127
    41b6:	5f e7       	ldi	r21, 0x7F	; 127
    41b8:	c5 01       	movw	r24, r10
    41ba:	b4 01       	movw	r22, r8
    41bc:	ab d9       	rcall	.-3242   	; 0x3514 <__cmpsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	1c f4       	brge	.+6      	; 0x41c8 <_ZN5Print10printFloatEdh+0x6c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    41c2:	6b ed       	ldi	r22, 0xDB	; 219
    41c4:	75 e0       	ldi	r23, 0x05	; 5
    41c6:	0b c0       	rjmp	.+22     	; 0x41de <_ZN5Print10printFloatEdh+0x82>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    41c8:	2f ef       	ldi	r18, 0xFF	; 255
    41ca:	3f ef       	ldi	r19, 0xFF	; 255
    41cc:	4f e7       	ldi	r20, 0x7F	; 127
    41ce:	5f e4       	ldi	r21, 0x4F	; 79
    41d0:	c7 01       	movw	r24, r14
    41d2:	b6 01       	movw	r22, r12
    41d4:	0f db       	rcall	.-2530   	; 0x37f4 <__gesf2>
    41d6:	18 16       	cp	r1, r24
    41d8:	8c f4       	brge	.+34     	; 0x41fc <_ZN5Print10printFloatEdh+0xa0>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    41da:	6f ed       	ldi	r22, 0xDF	; 223
    41dc:	75 e0       	ldi	r23, 0x05	; 5
    41de:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	ff 90       	pop	r15
    41ea:	ef 90       	pop	r14
    41ec:	df 90       	pop	r13
    41ee:	cf 90       	pop	r12
    41f0:	bf 90       	pop	r11
    41f2:	af 90       	pop	r10
    41f4:	9f 90       	pop	r9
    41f6:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    41f8:	7f 90       	pop	r7
    41fa:	03 cf       	rjmp	.-506    	; 0x4002 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    41fc:	2f ef       	ldi	r18, 0xFF	; 255
    41fe:	3f ef       	ldi	r19, 0xFF	; 255
    4200:	4f e7       	ldi	r20, 0x7F	; 127
    4202:	5f ec       	ldi	r21, 0xCF	; 207
    4204:	c7 01       	movw	r24, r14
    4206:	b6 01       	movw	r22, r12
    4208:	85 d9       	rcall	.-3318   	; 0x3514 <__cmpsf2>
    420a:	87 fd       	sbrc	r24, 7
    420c:	e6 cf       	rjmp	.-52     	; 0x41da <_ZN5Print10printFloatEdh+0x7e>
  
  // Handle negative numbers
  if (number < 0.0)
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	a9 01       	movw	r20, r18
    4214:	c7 01       	movw	r24, r14
    4216:	b6 01       	movw	r22, r12
    4218:	7d d9       	rcall	.-3334   	; 0x3514 <__cmpsf2>
    421a:	87 ff       	sbrs	r24, 7
  {
     n += print('-');
    421c:	09 c0       	rjmp	.+18     	; 0x4230 <_ZN5Print10printFloatEdh+0xd4>
    421e:	6d e2       	ldi	r22, 0x2D	; 45
    4220:	c8 01       	movw	r24, r16
    4222:	13 df       	rcall	.-474    	; 0x404a <_ZN5Print5printEc>
    4224:	ec 01       	movw	r28, r24
     number = -number;
    4226:	f7 fa       	bst	r15, 7
    4228:	f0 94       	com	r15
    422a:	f7 f8       	bld	r15, 7
    422c:	f0 94       	com	r15
    422e:	02 c0       	rjmp	.+4      	; 0x4234 <_ZN5Print10printFloatEdh+0xd8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4230:	c0 e0       	ldi	r28, 0x00	; 0
    4232:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4234:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	70 e0       	ldi	r23, 0x00	; 0
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    423e:	7b 14       	cp	r7, r11
    rounding /= 10.0;
    4240:	39 f0       	breq	.+14     	; 0x4250 <_ZN5Print10printFloatEdh+0xf4>
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e2       	ldi	r20, 0x20	; 32
    4248:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    424a:	68 d9       	rcall	.-3376   	; 0x351c <__divsf3>
    424c:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    424e:	f7 cf       	rjmp	.-18     	; 0x423e <_ZN5Print10printFloatEdh+0xe2>
    4250:	a7 01       	movw	r20, r14
    4252:	96 01       	movw	r18, r12
    4254:	fb d8       	rcall	.-3594   	; 0x344c <__addsf3>
    4256:	6b 01       	movw	r12, r22
    4258:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    425a:	0e 94 65 33 	call	0x66ca	; 0x66ca <__fixunssfsi>
    425e:	4b 01       	movw	r8, r22
    4260:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4262:	2a e0       	ldi	r18, 0x0A	; 10
    4264:	ab 01       	movw	r20, r22
    4266:	bc 01       	movw	r22, r24
    4268:	c8 01       	movw	r24, r16
    426a:	09 df       	rcall	.-494    	; 0x407e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    426c:	c8 0f       	add	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    426e:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4270:	77 20       	and	r7, r7
    4272:	81 f1       	breq	.+96     	; 0x42d4 <_ZN5Print10printFloatEdh+0x178>
    4274:	c5 01       	movw	r24, r10
    4276:	b4 01       	movw	r22, r8
    4278:	bd d9       	rcall	.-3206   	; 0x35f4 <__floatunsisf>
    427a:	9b 01       	movw	r18, r22
    427c:	ac 01       	movw	r20, r24
    427e:	c7 01       	movw	r24, r14
    4280:	b6 01       	movw	r22, r12
    4282:	e3 d8       	rcall	.-3642   	; 0x344a <__subsf3>
    4284:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    4286:	7c 01       	movw	r14, r24
    4288:	6e e2       	ldi	r22, 0x2E	; 46
    428a:	c8 01       	movw	r24, r16
    428c:	de de       	rcall	.-580    	; 0x404a <_ZN5Print5printEc>
    428e:	c8 0f       	add	r28, r24
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4290:	d9 1f       	adc	r29, r25
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e2       	ldi	r20, 0x20	; 32
    4298:	51 e4       	ldi	r21, 0x41	; 65
    429a:	c7 01       	movw	r24, r14
    429c:	b6 01       	movw	r22, r12
    429e:	ae da       	rcall	.-2724   	; 0x37fc <__mulsf3>
    42a0:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    42a2:	5c 01       	movw	r10, r24
    42a4:	0e 94 65 33 	call	0x66ca	; 0x66ca <__fixunssfsi>
    n += print(toPrint);
    42a8:	6b 01       	movw	r12, r22
    42aa:	7c 01       	movw	r14, r24
    42ac:	4a e0       	ldi	r20, 0x0A	; 10
    42ae:	50 e0       	ldi	r21, 0x00	; 0
    42b0:	c8 01       	movw	r24, r16
    42b2:	3f df       	rcall	.-386    	; 0x4132 <_ZN5Print5printEji>
    remainder -= toPrint; 
    42b4:	c8 0f       	add	r28, r24
    42b6:	d9 1f       	adc	r29, r25
    42b8:	b6 01       	movw	r22, r12
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	9a d9       	rcall	.-3276   	; 0x35f4 <__floatunsisf>
    42c0:	9b 01       	movw	r18, r22
    42c2:	ac 01       	movw	r20, r24
    42c4:	c5 01       	movw	r24, r10
    42c6:	b4 01       	movw	r22, r8
    42c8:	c0 d8       	rcall	.-3712   	; 0x344a <__subsf3>
    42ca:	6b 01       	movw	r12, r22
    42cc:	7c 01       	movw	r14, r24
    42ce:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    42d0:	71 10       	cpse	r7, r1
    42d2:	df cf       	rjmp	.-66     	; 0x4292 <_ZN5Print10printFloatEdh+0x136>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    42d4:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    42d6:	df 91       	pop	r29
    42d8:	cf 91       	pop	r28
    42da:	1f 91       	pop	r17
    42dc:	0f 91       	pop	r16
    42de:	ff 90       	pop	r15
    42e0:	ef 90       	pop	r14
    42e2:	df 90       	pop	r13
    42e4:	cf 90       	pop	r12
    42e6:	bf 90       	pop	r11
    42e8:	af 90       	pop	r10
    42ea:	9f 90       	pop	r9
    42ec:	8f 90       	pop	r8
    42ee:	7f 90       	pop	r7
    42f0:	08 95       	ret

000042f2 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    42f2:	34 cf       	rjmp	.-408    	; 0x415c <_ZN5Print10printFloatEdh>

000042f4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    42f4:	08 95       	ret

000042f6 <attachInterrupt>:
    42f6:	88 30       	cpi	r24, 0x08	; 8
    42f8:	08 f0       	brcs	.+2      	; 0x42fc <attachInterrupt+0x6>
    42fa:	70 c0       	rjmp	.+224    	; 0x43dc <attachInterrupt+0xe6>
    42fc:	a8 2f       	mov	r26, r24
    42fe:	b0 e0       	ldi	r27, 0x00	; 0
    4300:	aa 0f       	add	r26, r26
    4302:	bb 1f       	adc	r27, r27
    4304:	aa 5f       	subi	r26, 0xFA	; 250
    4306:	bd 4f       	sbci	r27, 0xFD	; 253
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	7c 93       	st	X, r23
    430c:	6e 93       	st	-X, r22
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	fc 01       	movw	r30, r24
    4312:	31 97       	sbiw	r30, 0x01	; 1
    4314:	e7 30       	cpi	r30, 0x07	; 7
    4316:	f1 05       	cpc	r31, r1
    4318:	a0 f5       	brcc	.+104    	; 0x4382 <attachInterrupt+0x8c>
    431a:	88 27       	eor	r24, r24
    431c:	ea 53       	subi	r30, 0x3A	; 58
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	8f 4f       	sbci	r24, 0xFF	; 255
    4322:	0c 94 ea 33 	jmp	0x67d4	; 0x67d4 <__tablejump2__>
    4326:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    432a:	8c 7f       	andi	r24, 0xFC	; 252
    432c:	48 2b       	or	r20, r24
    432e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4332:	e8 9a       	sbi	0x1d, 0	; 29
    4334:	08 95       	ret
    4336:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    433a:	83 7f       	andi	r24, 0xF3	; 243
    433c:	44 0f       	add	r20, r20
    433e:	55 1f       	adc	r21, r21
    4340:	44 0f       	add	r20, r20
    4342:	55 1f       	adc	r21, r21
    4344:	48 2b       	or	r20, r24
    4346:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    434a:	e9 9a       	sbi	0x1d, 1	; 29
    434c:	08 95       	ret
    434e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4352:	8f 7c       	andi	r24, 0xCF	; 207
    4354:	74 e0       	ldi	r23, 0x04	; 4
    4356:	44 0f       	add	r20, r20
    4358:	55 1f       	adc	r21, r21
    435a:	7a 95       	dec	r23
    435c:	e1 f7       	brne	.-8      	; 0x4356 <attachInterrupt+0x60>
    435e:	48 2b       	or	r20, r24
    4360:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    4364:	ea 9a       	sbi	0x1d, 2	; 29
    4366:	08 95       	ret
    4368:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    436c:	8f 73       	andi	r24, 0x3F	; 63
    436e:	66 e0       	ldi	r22, 0x06	; 6
    4370:	44 0f       	add	r20, r20
    4372:	55 1f       	adc	r21, r21
    4374:	6a 95       	dec	r22
    4376:	e1 f7       	brne	.-8      	; 0x4370 <attachInterrupt+0x7a>
    4378:	48 2b       	or	r20, r24
    437a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    437e:	eb 9a       	sbi	0x1d, 3	; 29
    4380:	08 95       	ret
    4382:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    4386:	8c 7f       	andi	r24, 0xFC	; 252
    4388:	48 2b       	or	r20, r24
    438a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    438e:	ec 9a       	sbi	0x1d, 4	; 29
    4390:	08 95       	ret
    4392:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    4396:	83 7f       	andi	r24, 0xF3	; 243
    4398:	44 0f       	add	r20, r20
    439a:	55 1f       	adc	r21, r21
    439c:	44 0f       	add	r20, r20
    439e:	55 1f       	adc	r21, r21
    43a0:	48 2b       	or	r20, r24
    43a2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43a6:	ed 9a       	sbi	0x1d, 5	; 29
    43a8:	08 95       	ret
    43aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43ae:	8f 7c       	andi	r24, 0xCF	; 207
    43b0:	24 e0       	ldi	r18, 0x04	; 4
    43b2:	44 0f       	add	r20, r20
    43b4:	55 1f       	adc	r21, r21
    43b6:	2a 95       	dec	r18
    43b8:	e1 f7       	brne	.-8      	; 0x43b2 <attachInterrupt+0xbc>
    43ba:	48 2b       	or	r20, r24
    43bc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43c0:	ee 9a       	sbi	0x1d, 6	; 29
    43c2:	08 95       	ret
    43c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43c8:	8f 73       	andi	r24, 0x3F	; 63
    43ca:	96 e0       	ldi	r25, 0x06	; 6
    43cc:	44 0f       	add	r20, r20
    43ce:	55 1f       	adc	r21, r21
    43d0:	9a 95       	dec	r25
    43d2:	e1 f7       	brne	.-8      	; 0x43cc <attachInterrupt+0xd6>
    43d4:	48 2b       	or	r20, r24
    43d6:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    43da:	ef 9a       	sbi	0x1d, 7	; 29
    43dc:	08 95       	ret

000043de <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    43de:	1f 92       	push	r1
    43e0:	0f 92       	push	r0
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	0f 92       	push	r0
    43e6:	11 24       	eor	r1, r1
    43e8:	0b b6       	in	r0, 0x3b	; 59
    43ea:	0f 92       	push	r0
    43ec:	2f 93       	push	r18
    43ee:	3f 93       	push	r19
    43f0:	4f 93       	push	r20
    43f2:	5f 93       	push	r21
    43f4:	6f 93       	push	r22
    43f6:	7f 93       	push	r23
    43f8:	8f 93       	push	r24
    43fa:	9f 93       	push	r25
    43fc:	af 93       	push	r26
    43fe:	bf 93       	push	r27
    4400:	ef 93       	push	r30
    4402:	ff 93       	push	r31
    4404:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    4408:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    440c:	19 95       	eicall
    440e:	ff 91       	pop	r31
    4410:	ef 91       	pop	r30
    4412:	bf 91       	pop	r27
    4414:	af 91       	pop	r26
    4416:	9f 91       	pop	r25
    4418:	8f 91       	pop	r24
    441a:	7f 91       	pop	r23
    441c:	6f 91       	pop	r22
    441e:	5f 91       	pop	r21
    4420:	4f 91       	pop	r20
    4422:	3f 91       	pop	r19
    4424:	2f 91       	pop	r18
    4426:	0f 90       	pop	r0
    4428:	0b be       	out	0x3b, r0	; 59
    442a:	0f 90       	pop	r0
    442c:	0f be       	out	0x3f, r0	; 63
    442e:	0f 90       	pop	r0
    4430:	1f 90       	pop	r1
    4432:	18 95       	reti

00004434 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    4434:	1f 92       	push	r1
    4436:	0f 92       	push	r0
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	0f 92       	push	r0
    443c:	11 24       	eor	r1, r1
    443e:	0b b6       	in	r0, 0x3b	; 59
    4440:	0f 92       	push	r0
    4442:	2f 93       	push	r18
    4444:	3f 93       	push	r19
    4446:	4f 93       	push	r20
    4448:	5f 93       	push	r21
    444a:	6f 93       	push	r22
    444c:	7f 93       	push	r23
    444e:	8f 93       	push	r24
    4450:	9f 93       	push	r25
    4452:	af 93       	push	r26
    4454:	bf 93       	push	r27
    4456:	ef 93       	push	r30
    4458:	ff 93       	push	r31
    445a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    445e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    4462:	19 95       	eicall
    4464:	ff 91       	pop	r31
    4466:	ef 91       	pop	r30
    4468:	bf 91       	pop	r27
    446a:	af 91       	pop	r26
    446c:	9f 91       	pop	r25
    446e:	8f 91       	pop	r24
    4470:	7f 91       	pop	r23
    4472:	6f 91       	pop	r22
    4474:	5f 91       	pop	r21
    4476:	4f 91       	pop	r20
    4478:	3f 91       	pop	r19
    447a:	2f 91       	pop	r18
    447c:	0f 90       	pop	r0
    447e:	0b be       	out	0x3b, r0	; 59
    4480:	0f 90       	pop	r0
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	0f 90       	pop	r0
    4486:	1f 90       	pop	r1
    4488:	18 95       	reti

0000448a <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    448a:	1f 92       	push	r1
    448c:	0f 92       	push	r0
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	0f 92       	push	r0
    4492:	11 24       	eor	r1, r1
    4494:	0b b6       	in	r0, 0x3b	; 59
    4496:	0f 92       	push	r0
    4498:	2f 93       	push	r18
    449a:	3f 93       	push	r19
    449c:	4f 93       	push	r20
    449e:	5f 93       	push	r21
    44a0:	6f 93       	push	r22
    44a2:	7f 93       	push	r23
    44a4:	8f 93       	push	r24
    44a6:	9f 93       	push	r25
    44a8:	af 93       	push	r26
    44aa:	bf 93       	push	r27
    44ac:	ef 93       	push	r30
    44ae:	ff 93       	push	r31
    44b0:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    44b4:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    44b8:	19 95       	eicall
    44ba:	ff 91       	pop	r31
    44bc:	ef 91       	pop	r30
    44be:	bf 91       	pop	r27
    44c0:	af 91       	pop	r26
    44c2:	9f 91       	pop	r25
    44c4:	8f 91       	pop	r24
    44c6:	7f 91       	pop	r23
    44c8:	6f 91       	pop	r22
    44ca:	5f 91       	pop	r21
    44cc:	4f 91       	pop	r20
    44ce:	3f 91       	pop	r19
    44d0:	2f 91       	pop	r18
    44d2:	0f 90       	pop	r0
    44d4:	0b be       	out	0x3b, r0	; 59
    44d6:	0f 90       	pop	r0
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	0f 90       	pop	r0
    44dc:	1f 90       	pop	r1
    44de:	18 95       	reti

000044e0 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    44e0:	1f 92       	push	r1
    44e2:	0f 92       	push	r0
    44e4:	0f b6       	in	r0, 0x3f	; 63
    44e6:	0f 92       	push	r0
    44e8:	11 24       	eor	r1, r1
    44ea:	0b b6       	in	r0, 0x3b	; 59
    44ec:	0f 92       	push	r0
    44ee:	2f 93       	push	r18
    44f0:	3f 93       	push	r19
    44f2:	4f 93       	push	r20
    44f4:	5f 93       	push	r21
    44f6:	6f 93       	push	r22
    44f8:	7f 93       	push	r23
    44fa:	8f 93       	push	r24
    44fc:	9f 93       	push	r25
    44fe:	af 93       	push	r26
    4500:	bf 93       	push	r27
    4502:	ef 93       	push	r30
    4504:	ff 93       	push	r31
    4506:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    450a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    450e:	19 95       	eicall
    4510:	ff 91       	pop	r31
    4512:	ef 91       	pop	r30
    4514:	bf 91       	pop	r27
    4516:	af 91       	pop	r26
    4518:	9f 91       	pop	r25
    451a:	8f 91       	pop	r24
    451c:	7f 91       	pop	r23
    451e:	6f 91       	pop	r22
    4520:	5f 91       	pop	r21
    4522:	4f 91       	pop	r20
    4524:	3f 91       	pop	r19
    4526:	2f 91       	pop	r18
    4528:	0f 90       	pop	r0
    452a:	0b be       	out	0x3b, r0	; 59
    452c:	0f 90       	pop	r0
    452e:	0f be       	out	0x3f, r0	; 63
    4530:	0f 90       	pop	r0
    4532:	1f 90       	pop	r1
    4534:	18 95       	reti

00004536 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    4536:	1f 92       	push	r1
    4538:	0f 92       	push	r0
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	0f 92       	push	r0
    453e:	11 24       	eor	r1, r1
    4540:	0b b6       	in	r0, 0x3b	; 59
    4542:	0f 92       	push	r0
    4544:	2f 93       	push	r18
    4546:	3f 93       	push	r19
    4548:	4f 93       	push	r20
    454a:	5f 93       	push	r21
    454c:	6f 93       	push	r22
    454e:	7f 93       	push	r23
    4550:	8f 93       	push	r24
    4552:	9f 93       	push	r25
    4554:	af 93       	push	r26
    4556:	bf 93       	push	r27
    4558:	ef 93       	push	r30
    455a:	ff 93       	push	r31
    455c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    4560:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    4564:	19 95       	eicall
    4566:	ff 91       	pop	r31
    4568:	ef 91       	pop	r30
    456a:	bf 91       	pop	r27
    456c:	af 91       	pop	r26
    456e:	9f 91       	pop	r25
    4570:	8f 91       	pop	r24
    4572:	7f 91       	pop	r23
    4574:	6f 91       	pop	r22
    4576:	5f 91       	pop	r21
    4578:	4f 91       	pop	r20
    457a:	3f 91       	pop	r19
    457c:	2f 91       	pop	r18
    457e:	0f 90       	pop	r0
    4580:	0b be       	out	0x3b, r0	; 59
    4582:	0f 90       	pop	r0
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	0f 90       	pop	r0
    4588:	1f 90       	pop	r1
    458a:	18 95       	reti

0000458c <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    458c:	1f 92       	push	r1
    458e:	0f 92       	push	r0
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	0f 92       	push	r0
    4594:	11 24       	eor	r1, r1
    4596:	0b b6       	in	r0, 0x3b	; 59
    4598:	0f 92       	push	r0
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	ef 93       	push	r30
    45b0:	ff 93       	push	r31
    45b2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    45b6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    45ba:	19 95       	eicall
    45bc:	ff 91       	pop	r31
    45be:	ef 91       	pop	r30
    45c0:	bf 91       	pop	r27
    45c2:	af 91       	pop	r26
    45c4:	9f 91       	pop	r25
    45c6:	8f 91       	pop	r24
    45c8:	7f 91       	pop	r23
    45ca:	6f 91       	pop	r22
    45cc:	5f 91       	pop	r21
    45ce:	4f 91       	pop	r20
    45d0:	3f 91       	pop	r19
    45d2:	2f 91       	pop	r18
    45d4:	0f 90       	pop	r0
    45d6:	0b be       	out	0x3b, r0	; 59
    45d8:	0f 90       	pop	r0
    45da:	0f be       	out	0x3f, r0	; 63
    45dc:	0f 90       	pop	r0
    45de:	1f 90       	pop	r1
    45e0:	18 95       	reti

000045e2 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    45e2:	1f 92       	push	r1
    45e4:	0f 92       	push	r0
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	0f 92       	push	r0
    45ea:	11 24       	eor	r1, r1
    45ec:	0b b6       	in	r0, 0x3b	; 59
    45ee:	0f 92       	push	r0
    45f0:	2f 93       	push	r18
    45f2:	3f 93       	push	r19
    45f4:	4f 93       	push	r20
    45f6:	5f 93       	push	r21
    45f8:	6f 93       	push	r22
    45fa:	7f 93       	push	r23
    45fc:	8f 93       	push	r24
    45fe:	9f 93       	push	r25
    4600:	af 93       	push	r26
    4602:	bf 93       	push	r27
    4604:	ef 93       	push	r30
    4606:	ff 93       	push	r31
    4608:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    460c:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    4610:	19 95       	eicall
    4612:	ff 91       	pop	r31
    4614:	ef 91       	pop	r30
    4616:	bf 91       	pop	r27
    4618:	af 91       	pop	r26
    461a:	9f 91       	pop	r25
    461c:	8f 91       	pop	r24
    461e:	7f 91       	pop	r23
    4620:	6f 91       	pop	r22
    4622:	5f 91       	pop	r21
    4624:	4f 91       	pop	r20
    4626:	3f 91       	pop	r19
    4628:	2f 91       	pop	r18
    462a:	0f 90       	pop	r0
    462c:	0b be       	out	0x3b, r0	; 59
    462e:	0f 90       	pop	r0
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	0f 90       	pop	r0
    4634:	1f 90       	pop	r1
    4636:	18 95       	reti

00004638 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    4638:	1f 92       	push	r1
    463a:	0f 92       	push	r0
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	0f 92       	push	r0
    4640:	11 24       	eor	r1, r1
    4642:	0b b6       	in	r0, 0x3b	; 59
    4644:	0f 92       	push	r0
    4646:	2f 93       	push	r18
    4648:	3f 93       	push	r19
    464a:	4f 93       	push	r20
    464c:	5f 93       	push	r21
    464e:	6f 93       	push	r22
    4650:	7f 93       	push	r23
    4652:	8f 93       	push	r24
    4654:	9f 93       	push	r25
    4656:	af 93       	push	r26
    4658:	bf 93       	push	r27
    465a:	ef 93       	push	r30
    465c:	ff 93       	push	r31
    465e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    4662:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    4666:	19 95       	eicall
    4668:	ff 91       	pop	r31
    466a:	ef 91       	pop	r30
    466c:	bf 91       	pop	r27
    466e:	af 91       	pop	r26
    4670:	9f 91       	pop	r25
    4672:	8f 91       	pop	r24
    4674:	7f 91       	pop	r23
    4676:	6f 91       	pop	r22
    4678:	5f 91       	pop	r21
    467a:	4f 91       	pop	r20
    467c:	3f 91       	pop	r19
    467e:	2f 91       	pop	r18
    4680:	0f 90       	pop	r0
    4682:	0b be       	out	0x3b, r0	; 59
    4684:	0f 90       	pop	r0
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	0f 90       	pop	r0
    468a:	1f 90       	pop	r1
    468c:	18 95       	reti

0000468e <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    468e:	1f 92       	push	r1
    4690:	0f 92       	push	r0
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	0f 92       	push	r0
    4696:	11 24       	eor	r1, r1
    4698:	2f 93       	push	r18
    469a:	3f 93       	push	r19
    469c:	8f 93       	push	r24
    469e:	9f 93       	push	r25
    46a0:	af 93       	push	r26
    46a2:	bf 93       	push	r27
    46a4:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <timer0_millis>
    46a8:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <timer0_millis+0x1>
    46ac:	a0 91 9d 08 	lds	r26, 0x089D	; 0x80089d <timer0_millis+0x2>
    46b0:	b0 91 9e 08 	lds	r27, 0x089E	; 0x80089e <timer0_millis+0x3>
    46b4:	30 91 9a 08 	lds	r19, 0x089A	; 0x80089a <timer0_fract>
    46b8:	23 e0       	ldi	r18, 0x03	; 3
    46ba:	23 0f       	add	r18, r19
    46bc:	2d 37       	cpi	r18, 0x7D	; 125
    46be:	20 f4       	brcc	.+8      	; 0x46c8 <__vector_23+0x3a>
    46c0:	01 96       	adiw	r24, 0x01	; 1
    46c2:	a1 1d       	adc	r26, r1
    46c4:	b1 1d       	adc	r27, r1
    46c6:	05 c0       	rjmp	.+10     	; 0x46d2 <__vector_23+0x44>
    46c8:	26 e8       	ldi	r18, 0x86	; 134
    46ca:	23 0f       	add	r18, r19
    46cc:	02 96       	adiw	r24, 0x02	; 2
    46ce:	a1 1d       	adc	r26, r1
    46d0:	b1 1d       	adc	r27, r1
    46d2:	20 93 9a 08 	sts	0x089A, r18	; 0x80089a <timer0_fract>
    46d6:	80 93 9b 08 	sts	0x089B, r24	; 0x80089b <timer0_millis>
    46da:	90 93 9c 08 	sts	0x089C, r25	; 0x80089c <timer0_millis+0x1>
    46de:	a0 93 9d 08 	sts	0x089D, r26	; 0x80089d <timer0_millis+0x2>
    46e2:	b0 93 9e 08 	sts	0x089E, r27	; 0x80089e <timer0_millis+0x3>
    46e6:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <timer0_overflow_count>
    46ea:	90 91 a0 08 	lds	r25, 0x08A0	; 0x8008a0 <timer0_overflow_count+0x1>
    46ee:	a0 91 a1 08 	lds	r26, 0x08A1	; 0x8008a1 <timer0_overflow_count+0x2>
    46f2:	b0 91 a2 08 	lds	r27, 0x08A2	; 0x8008a2 <timer0_overflow_count+0x3>
    46f6:	01 96       	adiw	r24, 0x01	; 1
    46f8:	a1 1d       	adc	r26, r1
    46fa:	b1 1d       	adc	r27, r1
    46fc:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <timer0_overflow_count>
    4700:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <timer0_overflow_count+0x1>
    4704:	a0 93 a1 08 	sts	0x08A1, r26	; 0x8008a1 <timer0_overflow_count+0x2>
    4708:	b0 93 a2 08 	sts	0x08A2, r27	; 0x8008a2 <timer0_overflow_count+0x3>
    470c:	bf 91       	pop	r27
    470e:	af 91       	pop	r26
    4710:	9f 91       	pop	r25
    4712:	8f 91       	pop	r24
    4714:	3f 91       	pop	r19
    4716:	2f 91       	pop	r18
    4718:	0f 90       	pop	r0
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	0f 90       	pop	r0
    471e:	1f 90       	pop	r1
    4720:	18 95       	reti

00004722 <millis>:
    4722:	2f b7       	in	r18, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	60 91 9b 08 	lds	r22, 0x089B	; 0x80089b <timer0_millis>
    472a:	70 91 9c 08 	lds	r23, 0x089C	; 0x80089c <timer0_millis+0x1>
    472e:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <timer0_millis+0x2>
    4732:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <timer0_millis+0x3>
    4736:	2f bf       	out	0x3f, r18	; 63
    4738:	08 95       	ret

0000473a <micros>:
    473a:	3f b7       	in	r19, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <timer0_overflow_count>
    4742:	90 91 a0 08 	lds	r25, 0x08A0	; 0x8008a0 <timer0_overflow_count+0x1>
    4746:	a0 91 a1 08 	lds	r26, 0x08A1	; 0x8008a1 <timer0_overflow_count+0x2>
    474a:	b0 91 a2 08 	lds	r27, 0x08A2	; 0x8008a2 <timer0_overflow_count+0x3>
    474e:	26 b5       	in	r18, 0x26	; 38
    4750:	a8 9b       	sbis	0x15, 0	; 21
    4752:	05 c0       	rjmp	.+10     	; 0x475e <micros+0x24>
    4754:	2f 3f       	cpi	r18, 0xFF	; 255
    4756:	19 f0       	breq	.+6      	; 0x475e <micros+0x24>
    4758:	01 96       	adiw	r24, 0x01	; 1
    475a:	a1 1d       	adc	r26, r1
    475c:	b1 1d       	adc	r27, r1
    475e:	3f bf       	out	0x3f, r19	; 63
    4760:	ba 2f       	mov	r27, r26
    4762:	a9 2f       	mov	r26, r25
    4764:	98 2f       	mov	r25, r24
    4766:	88 27       	eor	r24, r24
    4768:	82 0f       	add	r24, r18
    476a:	91 1d       	adc	r25, r1
    476c:	a1 1d       	adc	r26, r1
    476e:	b1 1d       	adc	r27, r1
    4770:	bc 01       	movw	r22, r24
    4772:	cd 01       	movw	r24, r26
    4774:	42 e0       	ldi	r20, 0x02	; 2
    4776:	66 0f       	add	r22, r22
    4778:	77 1f       	adc	r23, r23
    477a:	88 1f       	adc	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	4a 95       	dec	r20
    4780:	d1 f7       	brne	.-12     	; 0x4776 <micros+0x3c>
    4782:	08 95       	ret

00004784 <delay>:
    4784:	8f 92       	push	r8
    4786:	9f 92       	push	r9
    4788:	af 92       	push	r10
    478a:	bf 92       	push	r11
    478c:	cf 92       	push	r12
    478e:	df 92       	push	r13
    4790:	ef 92       	push	r14
    4792:	ff 92       	push	r15
    4794:	6b 01       	movw	r12, r22
    4796:	7c 01       	movw	r14, r24
    4798:	d0 df       	rcall	.-96     	; 0x473a <micros>
    479a:	4b 01       	movw	r8, r22
    479c:	5c 01       	movw	r10, r24
    479e:	c1 14       	cp	r12, r1
    47a0:	d1 04       	cpc	r13, r1
    47a2:	e1 04       	cpc	r14, r1
    47a4:	f1 04       	cpc	r15, r1
    47a6:	f9 f0       	breq	.+62     	; 0x47e6 <delay+0x62>
    47a8:	0e 94 64 33 	call	0x66c8	; 0x66c8 <yield>
    47ac:	c6 df       	rcall	.-116    	; 0x473a <micros>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	88 19       	sub	r24, r8
    47b4:	99 09       	sbc	r25, r9
    47b6:	aa 09       	sbc	r26, r10
    47b8:	bb 09       	sbc	r27, r11
    47ba:	88 3e       	cpi	r24, 0xE8	; 232
    47bc:	93 40       	sbci	r25, 0x03	; 3
    47be:	a1 05       	cpc	r26, r1
    47c0:	b1 05       	cpc	r27, r1
    47c2:	68 f3       	brcs	.-38     	; 0x479e <delay+0x1a>
    47c4:	21 e0       	ldi	r18, 0x01	; 1
    47c6:	c2 1a       	sub	r12, r18
    47c8:	d1 08       	sbc	r13, r1
    47ca:	e1 08       	sbc	r14, r1
    47cc:	f1 08       	sbc	r15, r1
    47ce:	88 ee       	ldi	r24, 0xE8	; 232
    47d0:	88 0e       	add	r8, r24
    47d2:	83 e0       	ldi	r24, 0x03	; 3
    47d4:	98 1e       	adc	r9, r24
    47d6:	a1 1c       	adc	r10, r1
    47d8:	b1 1c       	adc	r11, r1
    47da:	c1 14       	cp	r12, r1
    47dc:	d1 04       	cpc	r13, r1
    47de:	e1 04       	cpc	r14, r1
    47e0:	f1 04       	cpc	r15, r1
    47e2:	21 f7       	brne	.-56     	; 0x47ac <delay+0x28>
    47e4:	dc cf       	rjmp	.-72     	; 0x479e <delay+0x1a>
    47e6:	ff 90       	pop	r15
    47e8:	ef 90       	pop	r14
    47ea:	df 90       	pop	r13
    47ec:	cf 90       	pop	r12
    47ee:	bf 90       	pop	r11
    47f0:	af 90       	pop	r10
    47f2:	9f 90       	pop	r9
    47f4:	8f 90       	pop	r8
    47f6:	08 95       	ret

000047f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    47f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    47fa:	84 b5       	in	r24, 0x24	; 36
    47fc:	82 60       	ori	r24, 0x02	; 2
    47fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4800:	84 b5       	in	r24, 0x24	; 36
    4802:	81 60       	ori	r24, 0x01	; 1
    4804:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4806:	85 b5       	in	r24, 0x25	; 37
    4808:	82 60       	ori	r24, 0x02	; 2
    480a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    480c:	85 b5       	in	r24, 0x25	; 37
    480e:	81 60       	ori	r24, 0x01	; 1
    4810:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4812:	ee e6       	ldi	r30, 0x6E	; 110
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	80 81       	ld	r24, Z
    4818:	81 60       	ori	r24, 0x01	; 1
    481a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    481c:	e1 e8       	ldi	r30, 0x81	; 129
    481e:	f0 e0       	ldi	r31, 0x00	; 0
    4820:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4822:	80 81       	ld	r24, Z
    4824:	82 60       	ori	r24, 0x02	; 2
    4826:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4828:	80 81       	ld	r24, Z
    482a:	81 60       	ori	r24, 0x01	; 1
    482c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    482e:	e0 e8       	ldi	r30, 0x80	; 128
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	80 81       	ld	r24, Z
    4834:	81 60       	ori	r24, 0x01	; 1
    4836:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4838:	e1 eb       	ldi	r30, 0xB1	; 177
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	84 60       	ori	r24, 0x04	; 4
    4840:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4842:	e0 eb       	ldi	r30, 0xB0	; 176
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	80 81       	ld	r24, Z
    4848:	81 60       	ori	r24, 0x01	; 1
    484a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    484c:	e1 e9       	ldi	r30, 0x91	; 145
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	80 81       	ld	r24, Z
    4852:	82 60       	ori	r24, 0x02	; 2
    4854:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    4856:	80 81       	ld	r24, Z
    4858:	81 60       	ori	r24, 0x01	; 1
    485a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    485c:	e0 e9       	ldi	r30, 0x90	; 144
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	81 60       	ori	r24, 0x01	; 1
    4864:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    4866:	e1 ea       	ldi	r30, 0xA1	; 161
    4868:	f0 e0       	ldi	r31, 0x00	; 0
    486a:	80 81       	ld	r24, Z
    486c:	82 60       	ori	r24, 0x02	; 2
    486e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    4870:	80 81       	ld	r24, Z
    4872:	81 60       	ori	r24, 0x01	; 1
    4874:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    4876:	e0 ea       	ldi	r30, 0xA0	; 160
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	81 60       	ori	r24, 0x01	; 1
    487e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    4880:	e1 e2       	ldi	r30, 0x21	; 33
    4882:	f1 e0       	ldi	r31, 0x01	; 1
    4884:	80 81       	ld	r24, Z
    4886:	82 60       	ori	r24, 0x02	; 2
    4888:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    488a:	80 81       	ld	r24, Z
    488c:	81 60       	ori	r24, 0x01	; 1
    488e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    4890:	e0 e2       	ldi	r30, 0x20	; 32
    4892:	f1 e0       	ldi	r31, 0x01	; 1
    4894:	80 81       	ld	r24, Z
    4896:	81 60       	ori	r24, 0x01	; 1
    4898:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    489a:	ea e7       	ldi	r30, 0x7A	; 122
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	84 60       	ori	r24, 0x04	; 4
    48a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    48a4:	80 81       	ld	r24, Z
    48a6:	82 60       	ori	r24, 0x02	; 2
    48a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    48aa:	80 81       	ld	r24, Z
    48ac:	81 60       	ori	r24, 0x01	; 1
    48ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    48b0:	80 81       	ld	r24, Z
    48b2:	80 68       	ori	r24, 0x80	; 128
    48b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    48b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    48ba:	08 95       	ret

000048bc <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    48bc:	86 33       	cpi	r24, 0x36	; 54
    48be:	08 f0       	brcs	.+2      	; 0x48c2 <analogRead+0x6>
    48c0:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    48c2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    48c6:	28 2f       	mov	r18, r24
    48c8:	28 70       	andi	r18, 0x08	; 8
    48ca:	97 7f       	andi	r25, 0xF7	; 247
    48cc:	92 2b       	or	r25, r18
    48ce:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    48d2:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <analog_reference>
    48d6:	90 e4       	ldi	r25, 0x40	; 64
    48d8:	29 9f       	mul	r18, r25
    48da:	90 01       	movw	r18, r0
    48dc:	11 24       	eor	r1, r1
    48de:	87 70       	andi	r24, 0x07	; 7
    48e0:	82 2b       	or	r24, r18
    48e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    48e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    48ea:	80 64       	ori	r24, 0x40	; 64
    48ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    48f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    48f4:	86 fd       	sbrc	r24, 6
    48f6:	fc cf       	rjmp	.-8      	; 0x48f0 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    48f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    48fc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4900:	90 e0       	ldi	r25, 0x00	; 0
}
    4902:	92 2b       	or	r25, r18
    4904:	08 95       	ret

00004906 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	fc 01       	movw	r30, r24
    490a:	31 97       	sbiw	r30, 0x01	; 1
    490c:	e2 31       	cpi	r30, 0x12	; 18
    490e:	f1 05       	cpc	r31, r1
    4910:	08 f0       	brcs	.+2      	; 0x4914 <turnOffPWM+0xe>
    4912:	4e c0       	rjmp	.+156    	; 0x49b0 <turnOffPWM+0xaa>
    4914:	88 27       	eor	r24, r24
    4916:	e3 53       	subi	r30, 0x33	; 51
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	8f 4f       	sbci	r24, 0xFF	; 255
    491c:	0c 94 ea 33 	jmp	0x67d4	; 0x67d4 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4920:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4924:	8f 77       	andi	r24, 0x7F	; 127
    4926:	03 c0       	rjmp	.+6      	; 0x492e <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4928:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    492c:	8f 7d       	andi	r24, 0xDF	; 223
    492e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4932:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    4934:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    4938:	87 7f       	andi	r24, 0xF7	; 247
    493a:	f9 cf       	rjmp	.-14     	; 0x492e <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    493c:	84 b5       	in	r24, 0x24	; 36
    493e:	8f 77       	andi	r24, 0x7F	; 127
    4940:	02 c0       	rjmp	.+4      	; 0x4946 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4942:	84 b5       	in	r24, 0x24	; 36
    4944:	8f 7d       	andi	r24, 0xDF	; 223
    4946:	84 bd       	out	0x24, r24	; 36
    4948:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    494a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    494e:	8f 77       	andi	r24, 0x7F	; 127
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4952:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    4956:	8f 7d       	andi	r24, 0xDF	; 223
    4958:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    495c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    495e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    4962:	8f 77       	andi	r24, 0x7F	; 127
    4964:	07 c0       	rjmp	.+14     	; 0x4974 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    4966:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    496a:	8f 7d       	andi	r24, 0xDF	; 223
    496c:	03 c0       	rjmp	.+6      	; 0x4974 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    496e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    4972:	87 7f       	andi	r24, 0xF7	; 247
    4974:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    4978:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    497a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    497e:	8f 77       	andi	r24, 0x7F	; 127
    4980:	07 c0       	rjmp	.+14     	; 0x4990 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    4982:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    4986:	8f 7d       	andi	r24, 0xDF	; 223
    4988:	03 c0       	rjmp	.+6      	; 0x4990 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    498a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    498e:	87 7f       	andi	r24, 0xF7	; 247
    4990:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    4994:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    4996:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    499a:	8f 77       	andi	r24, 0x7F	; 127
    499c:	07 c0       	rjmp	.+14     	; 0x49ac <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    499e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49a2:	8f 7d       	andi	r24, 0xDF	; 223
    49a4:	03 c0       	rjmp	.+6      	; 0x49ac <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    49a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49aa:	87 7f       	andi	r24, 0xF7	; 247
    49ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    49b0:	08 95       	ret

000049b2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	fc 01       	movw	r30, r24
    49ba:	eb 5d       	subi	r30, 0xDB	; 219
    49bc:	fd 4f       	sbci	r31, 0xFD	; 253
    49be:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    49c0:	fc 01       	movw	r30, r24
    49c2:	e5 59       	subi	r30, 0x95	; 149
    49c4:	fd 4f       	sbci	r31, 0xFD	; 253
    49c6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    49c8:	88 23       	and	r24, r24
    49ca:	61 f1       	breq	.+88     	; 0x4a24 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	88 0f       	add	r24, r24
    49d0:	99 1f       	adc	r25, r25
    49d2:	fc 01       	movw	r30, r24
    49d4:	eb 51       	subi	r30, 0x1B	; 27
    49d6:	fd 4f       	sbci	r31, 0xFD	; 253
    49d8:	c5 91       	lpm	r28, Z+
    49da:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    49dc:	fc 01       	movw	r30, r24
    49de:	e5 53       	subi	r30, 0x35	; 53
    49e0:	fd 4f       	sbci	r31, 0xFD	; 253
    49e2:	a5 91       	lpm	r26, Z+
    49e4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    49e6:	61 11       	cpse	r22, r1
    49e8:	09 c0       	rjmp	.+18     	; 0x49fc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    49ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    49ec:	f8 94       	cli
		*reg &= ~bit;
    49ee:	88 81       	ld	r24, Y
    49f0:	20 95       	com	r18
    49f2:	82 23       	and	r24, r18
    49f4:	88 83       	st	Y, r24
		*out &= ~bit;
    49f6:	ec 91       	ld	r30, X
    49f8:	2e 23       	and	r18, r30
    49fa:	0b c0       	rjmp	.+22     	; 0x4a12 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    49fc:	62 30       	cpi	r22, 0x02	; 2
    49fe:	61 f4       	brne	.+24     	; 0x4a18 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4a00:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4a02:	f8 94       	cli
		*reg &= ~bit;
    4a04:	88 81       	ld	r24, Y
    4a06:	32 2f       	mov	r19, r18
    4a08:	30 95       	com	r19
    4a0a:	83 23       	and	r24, r19
    4a0c:	88 83       	st	Y, r24
		*out |= bit;
    4a0e:	ec 91       	ld	r30, X
    4a10:	2e 2b       	or	r18, r30
    4a12:	2c 93       	st	X, r18
		SREG = oldSREG;
    4a14:	9f bf       	out	0x3f, r25	; 63
    4a16:	06 c0       	rjmp	.+12     	; 0x4a24 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4a18:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4a1a:	f8 94       	cli
		*reg |= bit;
    4a1c:	e8 81       	ld	r30, Y
    4a1e:	2e 2b       	or	r18, r30
    4a20:	28 83       	st	Y, r18
		SREG = oldSREG;
    4a22:	8f bf       	out	0x3f, r24	; 63
	}
}
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	08 95       	ret

00004a2a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4a2a:	1f 93       	push	r17
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4a30:	28 2f       	mov	r18, r24
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	f9 01       	movw	r30, r18
    4a36:	e1 52       	subi	r30, 0x21	; 33
    4a38:	fe 4f       	sbci	r31, 0xFE	; 254
    4a3a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4a3c:	f9 01       	movw	r30, r18
    4a3e:	eb 5d       	subi	r30, 0xDB	; 219
    4a40:	fd 4f       	sbci	r31, 0xFD	; 253
    4a42:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4a44:	f9 01       	movw	r30, r18
    4a46:	e5 59       	subi	r30, 0x95	; 149
    4a48:	fd 4f       	sbci	r31, 0xFD	; 253
    4a4a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4a4c:	cc 23       	and	r28, r28
    4a4e:	b9 f0       	breq	.+46     	; 0x4a7e <digitalWrite+0x54>
    4a50:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4a52:	81 11       	cpse	r24, r1
    4a54:	58 df       	rcall	.-336    	; 0x4906 <turnOffPWM>

	out = portOutputRegister(port);
    4a56:	ec 2f       	mov	r30, r28
    4a58:	f0 e0       	ldi	r31, 0x00	; 0
    4a5a:	ee 0f       	add	r30, r30
    4a5c:	ff 1f       	adc	r31, r31
    4a5e:	e5 53       	subi	r30, 0x35	; 53
    4a60:	fd 4f       	sbci	r31, 0xFD	; 253
    4a62:	a5 91       	lpm	r26, Z+
    4a64:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4a66:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a68:	f8 94       	cli

	if (val == LOW) {
    4a6a:	11 11       	cpse	r17, r1
    4a6c:	04 c0       	rjmp	.+8      	; 0x4a76 <digitalWrite+0x4c>
		*out &= ~bit;
    4a6e:	8c 91       	ld	r24, X
    4a70:	d0 95       	com	r29
    4a72:	d8 23       	and	r29, r24
    4a74:	02 c0       	rjmp	.+4      	; 0x4a7a <digitalWrite+0x50>
	} else {
		*out |= bit;
    4a76:	ec 91       	ld	r30, X
    4a78:	de 2b       	or	r29, r30
    4a7a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4a7c:	9f bf       	out	0x3f, r25	; 63
}
    4a7e:	df 91       	pop	r29
    4a80:	cf 91       	pop	r28
    4a82:	1f 91       	pop	r17
    4a84:	08 95       	ret

00004a86 <digitalRead>:

int digitalRead(uint8_t pin)
{
    4a86:	cf 93       	push	r28
    4a88:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4a8a:	28 2f       	mov	r18, r24
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	f9 01       	movw	r30, r18
    4a90:	e1 52       	subi	r30, 0x21	; 33
    4a92:	fe 4f       	sbci	r31, 0xFE	; 254
    4a94:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4a96:	f9 01       	movw	r30, r18
    4a98:	eb 5d       	subi	r30, 0xDB	; 219
    4a9a:	fd 4f       	sbci	r31, 0xFD	; 253
    4a9c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4a9e:	f9 01       	movw	r30, r18
    4aa0:	e5 59       	subi	r30, 0x95	; 149
    4aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    4aa4:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4aa6:	cc 23       	and	r28, r28
    4aa8:	89 f0       	breq	.+34     	; 0x4acc <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4aaa:	81 11       	cpse	r24, r1
    4aac:	2c df       	rcall	.-424    	; 0x4906 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4aae:	ec 2f       	mov	r30, r28
    4ab0:	f0 e0       	ldi	r31, 0x00	; 0
    4ab2:	ee 0f       	add	r30, r30
    4ab4:	ff 1f       	adc	r31, r31
    4ab6:	ef 54       	subi	r30, 0x4F	; 79
    4ab8:	fd 4f       	sbci	r31, 0xFD	; 253
    4aba:	a5 91       	lpm	r26, Z+
    4abc:	b4 91       	lpm	r27, Z
    4abe:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4ac0:	ed 23       	and	r30, r29
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	21 f4       	brne	.+8      	; 0x4ad0 <digitalRead+0x4a>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	02 c0       	rjmp	.+4      	; 0x4ad0 <digitalRead+0x4a>
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	08 95       	ret

00004ad6 <_ZNK6String14StringIfHelperEv>:
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}
    4ad6:	08 95       	ret

00004ad8 <_ZN6StringD1Ev>:
    4ad8:	fc 01       	movw	r30, r24
    4ada:	80 81       	ld	r24, Z
    4adc:	91 81       	ldd	r25, Z+1	; 0x01
    4ade:	0c 94 1f 36 	jmp	0x6c3e	; 0x6c3e <free>

00004ae2 <_ZN6String10invalidateEv>:
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	ec 01       	movw	r28, r24
    4ae8:	88 81       	ld	r24, Y
    4aea:	99 81       	ldd	r25, Y+1	; 0x01
    4aec:	00 97       	sbiw	r24, 0x00	; 0
    4aee:	11 f0       	breq	.+4      	; 0x4af4 <_ZN6String10invalidateEv+0x12>
    4af0:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <free>
    4af4:	19 82       	std	Y+1, r1	; 0x01
    4af6:	18 82       	st	Y, r1
    4af8:	1d 82       	std	Y+5, r1	; 0x05
    4afa:	1c 82       	std	Y+4, r1	; 0x04
    4afc:	1b 82       	std	Y+3, r1	; 0x03
    4afe:	1a 82       	std	Y+2, r1	; 0x02
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	08 95       	ret

00004b06 <_ZN6String12changeBufferEj>:
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	ec 01       	movw	r28, r24
    4b10:	8b 01       	movw	r16, r22
    4b12:	6f 5f       	subi	r22, 0xFF	; 255
    4b14:	7f 4f       	sbci	r23, 0xFF	; 255
    4b16:	88 81       	ld	r24, Y
    4b18:	99 81       	ldd	r25, Y+1	; 0x01
    4b1a:	0e 94 a8 36 	call	0x6d50	; 0x6d50 <realloc>
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	31 f0       	breq	.+12     	; 0x4b2e <_ZN6String12changeBufferEj+0x28>
    4b22:	99 83       	std	Y+1, r25	; 0x01
    4b24:	88 83       	st	Y, r24
    4b26:	1b 83       	std	Y+3, r17	; 0x03
    4b28:	0a 83       	std	Y+2, r16	; 0x02
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	01 c0       	rjmp	.+2      	; 0x4b30 <_ZN6String12changeBufferEj+0x2a>
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	df 91       	pop	r29
    4b32:	cf 91       	pop	r28
    4b34:	1f 91       	pop	r17
    4b36:	0f 91       	pop	r16
    4b38:	08 95       	ret

00004b3a <_ZN6String7reserveEj>:
    4b3a:	cf 93       	push	r28
    4b3c:	df 93       	push	r29
    4b3e:	ec 01       	movw	r28, r24
    4b40:	88 81       	ld	r24, Y
    4b42:	99 81       	ldd	r25, Y+1	; 0x01
    4b44:	89 2b       	or	r24, r25
    4b46:	29 f0       	breq	.+10     	; 0x4b52 <_ZN6String7reserveEj+0x18>
    4b48:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b4c:	86 17       	cp	r24, r22
    4b4e:	97 07       	cpc	r25, r23
    4b50:	58 f4       	brcc	.+22     	; 0x4b68 <_ZN6String7reserveEj+0x2e>
    4b52:	ce 01       	movw	r24, r28
    4b54:	d8 df       	rcall	.-80     	; 0x4b06 <_ZN6String12changeBufferEj>
    4b56:	88 23       	and	r24, r24
    4b58:	41 f0       	breq	.+16     	; 0x4b6a <_ZN6String7reserveEj+0x30>
    4b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    4b5e:	89 2b       	or	r24, r25
    4b60:	19 f4       	brne	.+6      	; 0x4b68 <_ZN6String7reserveEj+0x2e>
    4b62:	e8 81       	ld	r30, Y
    4b64:	f9 81       	ldd	r31, Y+1	; 0x01
    4b66:	10 82       	st	Z, r1
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	df 91       	pop	r29
    4b6c:	cf 91       	pop	r28
    4b6e:	08 95       	ret

00004b70 <_ZN6String4copyEPKcj>:
    4b70:	ef 92       	push	r14
    4b72:	ff 92       	push	r15
    4b74:	0f 93       	push	r16
    4b76:	1f 93       	push	r17
    4b78:	cf 93       	push	r28
    4b7a:	df 93       	push	r29
    4b7c:	ec 01       	movw	r28, r24
    4b7e:	7b 01       	movw	r14, r22
    4b80:	8a 01       	movw	r16, r20
    4b82:	ba 01       	movw	r22, r20
    4b84:	da df       	rcall	.-76     	; 0x4b3a <_ZN6String7reserveEj>
    4b86:	81 11       	cpse	r24, r1
    4b88:	03 c0       	rjmp	.+6      	; 0x4b90 <_ZN6String4copyEPKcj+0x20>
    4b8a:	ce 01       	movw	r24, r28
    4b8c:	aa df       	rcall	.-172    	; 0x4ae2 <_ZN6String10invalidateEv>
    4b8e:	07 c0       	rjmp	.+14     	; 0x4b9e <_ZN6String4copyEPKcj+0x2e>
    4b90:	1d 83       	std	Y+5, r17	; 0x05
    4b92:	0c 83       	std	Y+4, r16	; 0x04
    4b94:	b7 01       	movw	r22, r14
    4b96:	88 81       	ld	r24, Y
    4b98:	99 81       	ldd	r25, Y+1	; 0x01
    4b9a:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <strcpy>
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	df 91       	pop	r29
    4ba2:	cf 91       	pop	r28
    4ba4:	1f 91       	pop	r17
    4ba6:	0f 91       	pop	r16
    4ba8:	ff 90       	pop	r15
    4baa:	ef 90       	pop	r14
    4bac:	08 95       	ret

00004bae <_ZN6StringC1EPKc>:
    4bae:	fc 01       	movw	r30, r24
    4bb0:	11 82       	std	Z+1, r1	; 0x01
    4bb2:	10 82       	st	Z, r1
    4bb4:	13 82       	std	Z+3, r1	; 0x03
    4bb6:	12 82       	std	Z+2, r1	; 0x02
    4bb8:	15 82       	std	Z+5, r1	; 0x05
    4bba:	14 82       	std	Z+4, r1	; 0x04
    4bbc:	61 15       	cp	r22, r1
    4bbe:	71 05       	cpc	r23, r1
    4bc0:	49 f0       	breq	.+18     	; 0x4bd4 <_ZN6StringC1EPKc+0x26>
    4bc2:	fb 01       	movw	r30, r22
    4bc4:	01 90       	ld	r0, Z+
    4bc6:	00 20       	and	r0, r0
    4bc8:	e9 f7       	brne	.-6      	; 0x4bc4 <_ZN6StringC1EPKc+0x16>
    4bca:	31 97       	sbiw	r30, 0x01	; 1
    4bcc:	af 01       	movw	r20, r30
    4bce:	46 1b       	sub	r20, r22
    4bd0:	57 0b       	sbc	r21, r23
    4bd2:	ce cf       	rjmp	.-100    	; 0x4b70 <_ZN6String4copyEPKcj>
    4bd4:	08 95       	ret

00004bd6 <_ZN6String4moveERS_>:
    4bd6:	0f 93       	push	r16
    4bd8:	1f 93       	push	r17
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	8c 01       	movw	r16, r24
    4be0:	eb 01       	movw	r28, r22
    4be2:	fc 01       	movw	r30, r24
    4be4:	80 81       	ld	r24, Z
    4be6:	91 81       	ldd	r25, Z+1	; 0x01
    4be8:	00 97       	sbiw	r24, 0x00	; 0
    4bea:	d1 f0       	breq	.+52     	; 0x4c20 <_ZN6String4moveERS_+0x4a>
    4bec:	68 81       	ld	r22, Y
    4bee:	79 81       	ldd	r23, Y+1	; 0x01
    4bf0:	61 15       	cp	r22, r1
    4bf2:	71 05       	cpc	r23, r1
    4bf4:	99 f0       	breq	.+38     	; 0x4c1c <_ZN6String4moveERS_+0x46>
    4bf6:	2b e6       	ldi	r18, 0x6B	; 107
    4bf8:	35 e2       	ldi	r19, 0x25	; 37
    4bfa:	23 2b       	or	r18, r19
    4bfc:	79 f0       	breq	.+30     	; 0x4c1c <_ZN6String4moveERS_+0x46>
    4bfe:	42 81       	ldd	r20, Z+2	; 0x02
    4c00:	53 81       	ldd	r21, Z+3	; 0x03
    4c02:	2c 81       	ldd	r18, Y+4	; 0x04
    4c04:	3d 81       	ldd	r19, Y+5	; 0x05
    4c06:	42 17       	cp	r20, r18
    4c08:	53 07       	cpc	r21, r19
    4c0a:	40 f0       	brcs	.+16     	; 0x4c1c <_ZN6String4moveERS_+0x46>
    4c0c:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <strcpy>
    4c10:	8c 81       	ldd	r24, Y+4	; 0x04
    4c12:	9d 81       	ldd	r25, Y+5	; 0x05
    4c14:	f8 01       	movw	r30, r16
    4c16:	95 83       	std	Z+5, r25	; 0x05
    4c18:	84 83       	std	Z+4, r24	; 0x04
    4c1a:	13 c0       	rjmp	.+38     	; 0x4c42 <_ZN6String4moveERS_+0x6c>
    4c1c:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <free>
    4c20:	88 81       	ld	r24, Y
    4c22:	99 81       	ldd	r25, Y+1	; 0x01
    4c24:	f8 01       	movw	r30, r16
    4c26:	91 83       	std	Z+1, r25	; 0x01
    4c28:	80 83       	st	Z, r24
    4c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2e:	93 83       	std	Z+3, r25	; 0x03
    4c30:	82 83       	std	Z+2, r24	; 0x02
    4c32:	8c 81       	ldd	r24, Y+4	; 0x04
    4c34:	9d 81       	ldd	r25, Y+5	; 0x05
    4c36:	95 83       	std	Z+5, r25	; 0x05
    4c38:	84 83       	std	Z+4, r24	; 0x04
    4c3a:	19 82       	std	Y+1, r1	; 0x01
    4c3c:	18 82       	st	Y, r1
    4c3e:	1b 82       	std	Y+3, r1	; 0x03
    4c40:	1a 82       	std	Y+2, r1	; 0x02
    4c42:	1d 82       	std	Y+5, r1	; 0x05
    4c44:	1c 82       	std	Y+4, r1	; 0x04
    4c46:	df 91       	pop	r29
    4c48:	cf 91       	pop	r28
    4c4a:	1f 91       	pop	r17
    4c4c:	0f 91       	pop	r16
    4c4e:	08 95       	ret

00004c50 <_ZN6StringaSERKS_>:
    4c50:	cf 93       	push	r28
    4c52:	df 93       	push	r29
    4c54:	ec 01       	movw	r28, r24
    4c56:	fb 01       	movw	r30, r22
    4c58:	86 17       	cp	r24, r22
    4c5a:	97 07       	cpc	r25, r23
    4c5c:	51 f0       	breq	.+20     	; 0x4c72 <_ZN6StringaSERKS_+0x22>
    4c5e:	60 81       	ld	r22, Z
    4c60:	71 81       	ldd	r23, Z+1	; 0x01
    4c62:	61 15       	cp	r22, r1
    4c64:	71 05       	cpc	r23, r1
    4c66:	21 f0       	breq	.+8      	; 0x4c70 <_ZN6StringaSERKS_+0x20>
    4c68:	44 81       	ldd	r20, Z+4	; 0x04
    4c6a:	55 81       	ldd	r21, Z+5	; 0x05
    4c6c:	81 df       	rcall	.-254    	; 0x4b70 <_ZN6String4copyEPKcj>
    4c6e:	01 c0       	rjmp	.+2      	; 0x4c72 <_ZN6StringaSERKS_+0x22>
    4c70:	38 df       	rcall	.-400    	; 0x4ae2 <_ZN6String10invalidateEv>
    4c72:	ce 01       	movw	r24, r28
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	08 95       	ret

00004c7a <_ZN6StringaSEOS_>:
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	ec 01       	movw	r28, r24
    4c80:	86 17       	cp	r24, r22
    4c82:	97 07       	cpc	r25, r23
    4c84:	09 f0       	breq	.+2      	; 0x4c88 <_ZN6StringaSEOS_+0xe>
    4c86:	a7 df       	rcall	.-178    	; 0x4bd6 <_ZN6String4moveERS_>
    4c88:	ce 01       	movw	r24, r28
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	08 95       	ret

00004c90 <_ZN6StringaSEO15StringSumHelper>:
    4c90:	cf 93       	push	r28
    4c92:	df 93       	push	r29
    4c94:	ec 01       	movw	r28, r24
    4c96:	68 17       	cp	r22, r24
    4c98:	79 07       	cpc	r23, r25
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <_ZN6StringaSEO15StringSumHelper+0xe>
    4c9c:	9c df       	rcall	.-200    	; 0x4bd6 <_ZN6String4moveERS_>
    4c9e:	ce 01       	movw	r24, r28
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	08 95       	ret

00004ca6 <_ZN6StringaSEPKc>:
    4ca6:	cf 93       	push	r28
    4ca8:	df 93       	push	r29
    4caa:	ec 01       	movw	r28, r24
    4cac:	61 15       	cp	r22, r1
    4cae:	71 05       	cpc	r23, r1
    4cb0:	51 f0       	breq	.+20     	; 0x4cc6 <_ZN6StringaSEPKc+0x20>
    4cb2:	fb 01       	movw	r30, r22
    4cb4:	01 90       	ld	r0, Z+
    4cb6:	00 20       	and	r0, r0
    4cb8:	e9 f7       	brne	.-6      	; 0x4cb4 <_ZN6StringaSEPKc+0xe>
    4cba:	31 97       	sbiw	r30, 0x01	; 1
    4cbc:	af 01       	movw	r20, r30
    4cbe:	46 1b       	sub	r20, r22
    4cc0:	57 0b       	sbc	r21, r23
    4cc2:	56 df       	rcall	.-340    	; 0x4b70 <_ZN6String4copyEPKcj>
    4cc4:	01 c0       	rjmp	.+2      	; 0x4cc8 <_ZN6StringaSEPKc+0x22>
    4cc6:	0d df       	rcall	.-486    	; 0x4ae2 <_ZN6String10invalidateEv>
    4cc8:	ce 01       	movw	r24, r28
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	08 95       	ret

00004cd0 <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
    4cd0:	0f 93       	push	r16
    4cd2:	1f 93       	push	r17
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	cd b7       	in	r28, 0x3d	; 61
    4cda:	de b7       	in	r29, 0x3e	; 62
    4cdc:	29 97       	sbiw	r28, 0x09	; 9
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	8c 01       	movw	r16, r24
    4cea:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4cec:	f8 01       	movw	r30, r16
    4cee:	11 82       	std	Z+1, r1	; 0x01
    4cf0:	10 82       	st	Z, r1
	capacity = 0;
    4cf2:	13 82       	std	Z+3, r1	; 0x03
    4cf4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4cf6:	15 82       	std	Z+5, r1	; 0x05
    4cf8:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    4cfa:	50 e0       	ldi	r21, 0x00	; 0
    4cfc:	be 01       	movw	r22, r28
    4cfe:	6f 5f       	subi	r22, 0xFF	; 255
    4d00:	7f 4f       	sbci	r23, 0xFF	; 255
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <utoa>
String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
    4d08:	be 01       	movw	r22, r28
    4d0a:	6f 5f       	subi	r22, 0xFF	; 255
    4d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d0e:	c8 01       	movw	r24, r16
    4d10:	ca df       	rcall	.-108    	; 0x4ca6 <_ZN6StringaSEPKc>
}
    4d12:	29 96       	adiw	r28, 0x09	; 9
    4d14:	0f b6       	in	r0, 0x3f	; 63
    4d16:	f8 94       	cli
    4d18:	de bf       	out	0x3e, r29	; 62
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	cd bf       	out	0x3d, r28	; 61
    4d1e:	df 91       	pop	r29
    4d20:	cf 91       	pop	r28
    4d22:	1f 91       	pop	r17
    4d24:	0f 91       	pop	r16
    4d26:	08 95       	ret

00004d28 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	1f 92       	push	r1
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	69 83       	std	Y+1, r22	; 0x01
    4d34:	dc 01       	movw	r26, r24
    4d36:	ed 91       	ld	r30, X+
    4d38:	fc 91       	ld	r31, X
    4d3a:	02 80       	ldd	r0, Z+2	; 0x02
    4d3c:	f3 81       	ldd	r31, Z+3	; 0x03
    4d3e:	e0 2d       	mov	r30, r0
    4d40:	41 e0       	ldi	r20, 0x01	; 1
    4d42:	50 e0       	ldi	r21, 0x00	; 0
    4d44:	be 01       	movw	r22, r28
    4d46:	6f 5f       	subi	r22, 0xFF	; 255
    4d48:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4a:	19 95       	eicall
    4d4c:	0f 90       	pop	r0
    4d4e:	df 91       	pop	r29
    4d50:	cf 91       	pop	r28
    4d52:	08 95       	ret

00004d54 <_ZN5SDLib4File5writeEPKhj>:
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	ec 01       	movw	r28, r24
    4d5a:	89 8d       	ldd	r24, Y+25	; 0x19
    4d5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d5e:	00 97       	sbiw	r24, 0x00	; 0
    4d60:	39 f4       	brne	.+14     	; 0x4d70 <_ZN5SDLib4File5writeEPKhj+0x1c>
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	9b 83       	std	Y+3, r25	; 0x03
    4d68:	8a 83       	std	Y+2, r24	; 0x02
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	0a c0       	rjmp	.+20     	; 0x4d84 <_ZN5SDLib4File5writeEPKhj+0x30>
    4d70:	fc 01       	movw	r30, r24
    4d72:	13 82       	std	Z+3, r1	; 0x03
    4d74:	12 82       	std	Z+2, r1	; 0x02
    4d76:	a7 d6       	rcall	.+3406   	; 0x5ac6 <_ZN6SdFile5writeEPKvj>
    4d78:	e9 8d       	ldd	r30, Y+25	; 0x19
    4d7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4d7c:	22 81       	ldd	r18, Z+2	; 0x02
    4d7e:	33 81       	ldd	r19, Z+3	; 0x03
    4d80:	23 2b       	or	r18, r19
    4d82:	79 f7       	brne	.-34     	; 0x4d62 <_ZN5SDLib4File5writeEPKhj+0xe>
    4d84:	df 91       	pop	r29
    4d86:	cf 91       	pop	r28
    4d88:	08 95       	ret

00004d8a <_ZN5SDLib4File5flushEv>:
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	81 8d       	ldd	r24, Z+25	; 0x19
    4d8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	09 f0       	breq	.+2      	; 0x4d96 <_ZN5SDLib4File5flushEv+0xc>
    4d94:	48 c6       	rjmp	.+3216   	; 0x5a26 <_ZN6SdFile4syncEv>
    4d96:	08 95       	ret

00004d98 <_ZN6SdFile4readEv>:
    4d98:	cf 93       	push	r28
    4d9a:	df 93       	push	r29
    4d9c:	1f 92       	push	r1
    4d9e:	cd b7       	in	r28, 0x3d	; 61
    4da0:	de b7       	in	r29, 0x3e	; 62
    4da2:	41 e0       	ldi	r20, 0x01	; 1
    4da4:	50 e0       	ldi	r21, 0x00	; 0
    4da6:	be 01       	movw	r22, r28
    4da8:	6f 5f       	subi	r22, 0xFF	; 255
    4daa:	7f 4f       	sbci	r23, 0xFF	; 255
    4dac:	a4 d4       	rcall	.+2376   	; 0x56f6 <_ZN6SdFile4readEPvj>
    4dae:	01 97       	sbiw	r24, 0x01	; 1
    4db0:	19 f4       	brne	.+6      	; 0x4db8 <_ZN6SdFile4readEv+0x20>
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	02 c0       	rjmp	.+4      	; 0x4dbc <_ZN6SdFile4readEv+0x24>
    4db8:	8f ef       	ldi	r24, 0xFF	; 255
    4dba:	9f ef       	ldi	r25, 0xFF	; 255
    4dbc:	0f 90       	pop	r0
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	08 95       	ret

00004dc4 <_ZN5SDLib4File4readEv>:
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	81 8d       	ldd	r24, Z+25	; 0x19
    4dc8:	92 8d       	ldd	r25, Z+26	; 0x1a
    4dca:	00 97       	sbiw	r24, 0x00	; 0
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <_ZN5SDLib4File4readEv+0xc>
    4dce:	e4 cf       	rjmp	.-56     	; 0x4d98 <_ZN6SdFile4readEv>
    4dd0:	8f ef       	ldi	r24, 0xFF	; 255
    4dd2:	9f ef       	ldi	r25, 0xFF	; 255
    4dd4:	08 95       	ret

00004dd6 <_ZN5SDLib4File4peekEv>:
    4dd6:	0f 93       	push	r16
    4dd8:	1f 93       	push	r17
    4dda:	cf 93       	push	r28
    4ddc:	df 93       	push	r29
    4dde:	fc 01       	movw	r30, r24
    4de0:	81 8d       	ldd	r24, Z+25	; 0x19
    4de2:	92 8d       	ldd	r25, Z+26	; 0x1a
    4de4:	00 97       	sbiw	r24, 0x00	; 0
    4de6:	a9 f0       	breq	.+42     	; 0x4e12 <_ZN5SDLib4File4peekEv+0x3c>
    4de8:	ef 01       	movw	r28, r30
    4dea:	d6 df       	rcall	.-84     	; 0x4d98 <_ZN6SdFile4readEv>
    4dec:	8c 01       	movw	r16, r24
    4dee:	0f 3f       	cpi	r16, 0xFF	; 255
    4df0:	8f ef       	ldi	r24, 0xFF	; 255
    4df2:	18 07       	cpc	r17, r24
    4df4:	89 f0       	breq	.+34     	; 0x4e18 <_ZN5SDLib4File4peekEv+0x42>
    4df6:	89 8d       	ldd	r24, Y+25	; 0x19
    4df8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	42 85       	ldd	r20, Z+10	; 0x0a
    4dfe:	53 85       	ldd	r21, Z+11	; 0x0b
    4e00:	64 85       	ldd	r22, Z+12	; 0x0c
    4e02:	75 85       	ldd	r23, Z+13	; 0x0d
    4e04:	41 50       	subi	r20, 0x01	; 1
    4e06:	51 09       	sbc	r21, r1
    4e08:	61 09       	sbc	r22, r1
    4e0a:	71 09       	sbc	r23, r1
    4e0c:	76 d5       	rcall	.+2796   	; 0x58fa <_ZN6SdFile7seekSetEm>
    4e0e:	c8 01       	movw	r24, r16
    4e10:	05 c0       	rjmp	.+10     	; 0x4e1c <_ZN5SDLib4File4peekEv+0x46>
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <_ZN5SDLib4File4peekEv+0x46>
    4e18:	8f ef       	ldi	r24, 0xFF	; 255
    4e1a:	9f ef       	ldi	r25, 0xFF	; 255
    4e1c:	df 91       	pop	r29
    4e1e:	cf 91       	pop	r28
    4e20:	1f 91       	pop	r17
    4e22:	0f 91       	pop	r16
    4e24:	08 95       	ret

00004e26 <_ZN5SDLib4FileC1Ev>:
    4e26:	fc 01       	movw	r30, r24
    4e28:	13 82       	std	Z+3, r1	; 0x03
    4e2a:	12 82       	std	Z+2, r1	; 0x02
    4e2c:	88 ee       	ldi	r24, 0xE8	; 232
    4e2e:	93 e0       	ldi	r25, 0x03	; 3
    4e30:	a0 e0       	ldi	r26, 0x00	; 0
    4e32:	b0 e0       	ldi	r27, 0x00	; 0
    4e34:	84 83       	std	Z+4, r24	; 0x04
    4e36:	95 83       	std	Z+5, r25	; 0x05
    4e38:	a6 83       	std	Z+6, r26	; 0x06
    4e3a:	b7 83       	std	Z+7, r27	; 0x07
    4e3c:	87 ee       	ldi	r24, 0xE7	; 231
    4e3e:	95 e0       	ldi	r25, 0x05	; 5
    4e40:	91 83       	std	Z+1, r25	; 0x01
    4e42:	80 83       	st	Z, r24
    4e44:	12 8e       	std	Z+26, r1	; 0x1a
    4e46:	11 8e       	std	Z+25, r1	; 0x19
    4e48:	14 86       	std	Z+12, r1	; 0x0c
    4e4a:	08 95       	ret

00004e4c <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	59 96       	adiw	r26, 0x19	; 25
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	5a 97       	sbiw	r26, 0x1a	; 26
    4e56:	30 97       	sbiw	r30, 0x00	; 0
    4e58:	29 f0       	breq	.+10     	; 0x4e64 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    4e5a:	62 85       	ldd	r22, Z+10	; 0x0a
    4e5c:	73 85       	ldd	r23, Z+11	; 0x0b
    4e5e:	84 85       	ldd	r24, Z+12	; 0x0c
    4e60:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    4e62:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    4e64:	6f ef       	ldi	r22, 0xFF	; 255
    4e66:	7f ef       	ldi	r23, 0xFF	; 255
    4e68:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    4e6a:	08 95       	ret

00004e6c <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	59 96       	adiw	r26, 0x19	; 25
    4e70:	ed 91       	ld	r30, X+
    4e72:	fc 91       	ld	r31, X
    4e74:	5a 97       	sbiw	r26, 0x1a	; 26
    4e76:	30 97       	sbiw	r30, 0x00	; 0
    4e78:	29 f0       	breq	.+10     	; 0x4e84 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    4e7a:	63 89       	ldd	r22, Z+19	; 0x13
    4e7c:	74 89       	ldd	r23, Z+20	; 0x14
    4e7e:	85 89       	ldd	r24, Z+21	; 0x15
    4e80:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    4e82:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    4e84:	60 e0       	ldi	r22, 0x00	; 0
    4e86:	70 e0       	ldi	r23, 0x00	; 0
    4e88:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    4e8a:	08 95       	ret

00004e8c <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    4e8c:	cf 92       	push	r12
    4e8e:	df 92       	push	r13
    4e90:	ef 92       	push	r14
    4e92:	ff 92       	push	r15
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
  if (! _file) return 0;
    4e98:	fc 01       	movw	r30, r24
    4e9a:	21 8d       	ldd	r18, Z+25	; 0x19
    4e9c:	32 8d       	ldd	r19, Z+26	; 0x1a
    4e9e:	23 2b       	or	r18, r19
    4ea0:	c9 f0       	breq	.+50     	; 0x4ed4 <_ZN5SDLib4File9availableEv+0x48>
    4ea2:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    4ea4:	e3 df       	rcall	.-58     	; 0x4e6c <_ZN5SDLib4File4sizeEv>
    4ea6:	6b 01       	movw	r12, r22
    4ea8:	7c 01       	movw	r14, r24
    4eaa:	ce 01       	movw	r24, r28
    4eac:	cf df       	rcall	.-98     	; 0x4e4c <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    4eae:	a7 01       	movw	r20, r14
    4eb0:	96 01       	movw	r18, r12
    4eb2:	26 1b       	sub	r18, r22
    4eb4:	37 0b       	sbc	r19, r23
    4eb6:	48 0b       	sbc	r20, r24
    4eb8:	59 0b       	sbc	r21, r25
    4eba:	da 01       	movw	r26, r20
    4ebc:	c9 01       	movw	r24, r18
    4ebe:	81 15       	cp	r24, r1
    4ec0:	30 e8       	ldi	r19, 0x80	; 128
    4ec2:	93 07       	cpc	r25, r19
    4ec4:	a1 05       	cpc	r26, r1
    4ec6:	b1 05       	cpc	r27, r1
    4ec8:	38 f0       	brcs	.+14     	; 0x4ed8 <_ZN5SDLib4File9availableEv+0x4c>
    4eca:	8f ef       	ldi	r24, 0xFF	; 255
    4ecc:	9f e7       	ldi	r25, 0x7F	; 127
    4ece:	a0 e0       	ldi	r26, 0x00	; 0
    4ed0:	b0 e0       	ldi	r27, 0x00	; 0
    4ed2:	02 c0       	rjmp	.+4      	; 0x4ed8 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	ff 90       	pop	r15
    4ede:	ef 90       	pop	r14
    4ee0:	df 90       	pop	r13
    4ee2:	cf 90       	pop	r12
    4ee4:	08 95       	ret

00004ee6 <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	cf 93       	push	r28
    4eec:	df 93       	push	r29
    4eee:	ec 01       	movw	r28, r24
    4ef0:	8b 01       	movw	r16, r22
    4ef2:	41 e0       	ldi	r20, 0x01	; 1
    4ef4:	0e 94 1a 32 	call	0x6434	; 0x6434 <_ZN8SdVolume4initEP7Sd2Cardh>
    4ef8:	81 11       	cpse	r24, r1
    4efa:	09 c0       	rjmp	.+18     	; 0x4f0e <_ZN8SdVolume4initEP7Sd2Card+0x28>
    4efc:	40 e0       	ldi	r20, 0x00	; 0
    4efe:	b8 01       	movw	r22, r16
    4f00:	ce 01       	movw	r24, r28
    4f02:	df 91       	pop	r29
    4f04:	cf 91       	pop	r28
    4f06:	1f 91       	pop	r17
    4f08:	0f 91       	pop	r16
    4f0a:	0c 94 1a 32 	jmp	0x6434	; 0x6434 <_ZN8SdVolume4initEP7Sd2Cardh>
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	08 95       	ret

00004f1a <_ZN5SDLib7SDClass5beginEh>:
    4f1a:	0f 93       	push	r16
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	ec 01       	movw	r28, r24
    4f24:	16 2f       	mov	r17, r22
    4f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f28:	88 23       	and	r24, r24
    4f2a:	19 f0       	breq	.+6      	; 0x4f32 <_ZN5SDLib7SDClass5beginEh+0x18>
    4f2c:	ce 01       	movw	r24, r28
    4f2e:	8a 96       	adiw	r24, 0x2a	; 42
    4f30:	bf d5       	rcall	.+2942   	; 0x5ab0 <_ZN6SdFile5closeEv>
    4f32:	41 2f       	mov	r20, r17
    4f34:	61 e0       	ldi	r22, 0x01	; 1
    4f36:	ce 01       	movw	r24, r28
    4f38:	60 d1       	rcall	.+704    	; 0x51fa <_ZN7Sd2Card4initEhh>
    4f3a:	88 23       	and	r24, r24
    4f3c:	79 f0       	breq	.+30     	; 0x4f5c <_ZN5SDLib7SDClass5beginEh+0x42>
    4f3e:	8e 01       	movw	r16, r28
    4f40:	04 5f       	subi	r16, 0xF4	; 244
    4f42:	1f 4f       	sbci	r17, 0xFF	; 255
    4f44:	be 01       	movw	r22, r28
    4f46:	c8 01       	movw	r24, r16
    4f48:	ce df       	rcall	.-100    	; 0x4ee6 <_ZN8SdVolume4initEP7Sd2Card>
    4f4a:	88 23       	and	r24, r24
    4f4c:	39 f0       	breq	.+14     	; 0x4f5c <_ZN5SDLib7SDClass5beginEh+0x42>
    4f4e:	b8 01       	movw	r22, r16
    4f50:	ce 01       	movw	r24, r28
    4f52:	8a 96       	adiw	r24, 0x2a	; 42
    4f54:	80 d3       	rcall	.+1792   	; 0x5656 <_ZN6SdFile8openRootEP8SdVolume>
    4f56:	91 e0       	ldi	r25, 0x01	; 1
    4f58:	81 11       	cpse	r24, r1
    4f5a:	01 c0       	rjmp	.+2      	; 0x4f5e <_ZN5SDLib7SDClass5beginEh+0x44>
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	89 2f       	mov	r24, r25
    4f60:	df 91       	pop	r29
    4f62:	cf 91       	pop	r28
    4f64:	1f 91       	pop	r17
    4f66:	0f 91       	pop	r16
    4f68:	08 95       	ret

00004f6a <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    4f6a:	e3 ea       	ldi	r30, 0xA3	; 163
    4f6c:	f8 e0       	ldi	r31, 0x08	; 8
    4f6e:	15 82       	std	Z+5, r1	; 0x05
    4f70:	16 82       	std	Z+6, r1	; 0x06
    4f72:	11 86       	std	Z+9, r1	; 0x09
    4f74:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    4f76:	82 e0       	ldi	r24, 0x02	; 2
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	a0 e0       	ldi	r26, 0x00	; 0
    4f7c:	b0 e0       	ldi	r27, 0x00	; 0
    4f7e:	84 87       	std	Z+12, r24	; 0x0c
    4f80:	95 87       	std	Z+13, r25	; 0x0d
    4f82:	a6 87       	std	Z+14, r26	; 0x0e
    4f84:	b7 87       	std	Z+15, r27	; 0x0f
    4f86:	13 a2       	std	Z+35, r1	; 0x23
    4f88:	15 a6       	std	Z+45, r1	; 0x2d
    4f8a:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4f8c:	89 ef       	ldi	r24, 0xF9	; 249
    4f8e:	95 e0       	ldi	r25, 0x05	; 5
    4f90:	93 a7       	std	Z+43, r25	; 0x2b
    4f92:	82 a7       	std	Z+42, r24	; 0x2a
    4f94:	17 a6       	std	Z+47, r1	; 0x2f
    4f96:	08 95       	ret

00004f98 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    4f98:	9f b7       	in	r25, 0x3f	; 63
    4f9a:	f8 94       	cli
    4f9c:	20 91 fa 0a 	lds	r18, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    4fa0:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_ZN8SPIClass13interruptSaveE>
    4fa4:	21 30       	cpi	r18, 0x01	; 1
    4fa6:	19 f4       	brne	.+6      	; 0x4fae <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    4fa8:	8d bb       	out	0x1d, r24	; 29
    4faa:	9f bf       	out	0x3f, r25	; 63
    4fac:	08 95       	ret
    4fae:	8f bf       	out	0x3f, r24	; 63
    4fb0:	08 95       	ret

00004fb2 <_ZN11SPISettingsC1Emhh>:
    4fb2:	0f 93       	push	r16
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	92 e1       	ldi	r25, 0x12	; 18
    4fba:	aa e7       	ldi	r26, 0x7A	; 122
    4fbc:	b0 e0       	ldi	r27, 0x00	; 0
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	48 17       	cp	r20, r24
    4fc2:	59 07       	cpc	r21, r25
    4fc4:	6a 07       	cpc	r22, r26
    4fc6:	7b 07       	cpc	r23, r27
    4fc8:	40 f4       	brcc	.+16     	; 0x4fda <_ZN11SPISettingsC1Emhh+0x28>
    4fca:	b6 95       	lsr	r27
    4fcc:	a7 95       	ror	r26
    4fce:	97 95       	ror	r25
    4fd0:	87 95       	ror	r24
    4fd2:	3f 5f       	subi	r19, 0xFF	; 255
    4fd4:	36 30       	cpi	r19, 0x06	; 6
    4fd6:	a1 f7       	brne	.-24     	; 0x4fc0 <_ZN11SPISettingsC1Emhh+0xe>
    4fd8:	37 e0       	ldi	r19, 0x07	; 7
    4fda:	91 e0       	ldi	r25, 0x01	; 1
    4fdc:	93 27       	eor	r25, r19
    4fde:	22 23       	and	r18, r18
    4fe0:	11 f0       	breq	.+4      	; 0x4fe6 <_ZN11SPISettingsC1Emhh+0x34>
    4fe2:	20 e5       	ldi	r18, 0x50	; 80
    4fe4:	01 c0       	rjmp	.+2      	; 0x4fe8 <_ZN11SPISettingsC1Emhh+0x36>
    4fe6:	20 e7       	ldi	r18, 0x70	; 112
    4fe8:	0c 70       	andi	r16, 0x0C	; 12
    4fea:	89 2f       	mov	r24, r25
    4fec:	86 95       	lsr	r24
    4fee:	08 2b       	or	r16, r24
    4ff0:	02 2b       	or	r16, r18
    4ff2:	00 83       	st	Z, r16
    4ff4:	91 70       	andi	r25, 0x01	; 1
    4ff6:	91 83       	std	Z+1, r25	; 0x01
    4ff8:	0f 91       	pop	r16
    4ffa:	08 95       	ret

00004ffc <_ZN8SPIClass8transferEh>:
    4ffc:	8e bd       	out	0x2e, r24	; 46
    4ffe:	00 00       	nop
    5000:	0d b4       	in	r0, 0x2d	; 45
    5002:	07 fe       	sbrs	r0, 7
    5004:	fd cf       	rjmp	.-6      	; 0x5000 <_ZN8SPIClass8transferEh+0x4>
    5006:	8e b5       	in	r24, 0x2e	; 46
    5008:	08 95       	ret

0000500a <_ZL6spiRecv>:
    500a:	8f ef       	ldi	r24, 0xFF	; 255
    500c:	f7 cf       	rjmp	.-18     	; 0x4ffc <_ZN8SPIClass8transferEh>

0000500e <_ZN7Sd2Card14chipSelectHighEv>:
    500e:	61 e0       	ldi	r22, 0x01	; 1
    5010:	fc 01       	movw	r30, r24
    5012:	84 81       	ldd	r24, Z+4	; 0x04
    5014:	0a dd       	rcall	.-1516   	; 0x4a2a <digitalWrite>
    5016:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <_ZL20chip_select_asserted>
    501a:	88 23       	and	r24, r24
    501c:	31 f0       	breq	.+12     	; 0x502a <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    501e:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <_ZL20chip_select_asserted>
    5022:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    5026:	81 11       	cpse	r24, r1
    5028:	b7 cf       	rjmp	.-146    	; 0x4f98 <_ZN8SPIClass14endTransactionEv.part.3>
    502a:	08 95       	ret

0000502c <_ZN7Sd2Card13chipSelectLowEv>:
    502c:	cf 93       	push	r28
    502e:	df 93       	push	r29
    5030:	ec 01       	movw	r28, r24
    5032:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <_ZL20chip_select_asserted>
    5036:	81 11       	cpse	r24, r1
    5038:	09 c0       	rjmp	.+18     	; 0x504c <_ZN7Sd2Card13chipSelectLowEv+0x20>
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <_ZL20chip_select_asserted>
    5040:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <_ZL8settings>
    5044:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <_ZL8settings+0x1>
    5048:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN8SPIClass16beginTransactionE11SPISettings>
    504c:	60 e0       	ldi	r22, 0x00	; 0
    504e:	8c 81       	ldd	r24, Y+4	; 0x04
    5050:	df 91       	pop	r29
    5052:	cf 91       	pop	r28
    5054:	ea cc       	rjmp	.-1580   	; 0x4a2a <digitalWrite>

00005056 <_ZN7Sd2Card7readEndEv>:
    5056:	cf 93       	push	r28
    5058:	df 93       	push	r29
    505a:	ec 01       	movw	r28, r24
    505c:	8e 81       	ldd	r24, Y+6	; 0x06
    505e:	88 23       	and	r24, r24
    5060:	79 f0       	breq	.+30     	; 0x5080 <_ZN7Sd2Card7readEndEv+0x2a>
    5062:	8f 81       	ldd	r24, Y+7	; 0x07
    5064:	98 85       	ldd	r25, Y+8	; 0x08
    5066:	9c 01       	movw	r18, r24
    5068:	2f 5f       	subi	r18, 0xFF	; 255
    506a:	3f 4f       	sbci	r19, 0xFF	; 255
    506c:	38 87       	std	Y+8, r19	; 0x08
    506e:	2f 83       	std	Y+7, r18	; 0x07
    5070:	82 30       	cpi	r24, 0x02	; 2
    5072:	92 40       	sbci	r25, 0x02	; 2
    5074:	10 f4       	brcc	.+4      	; 0x507a <_ZN7Sd2Card7readEndEv+0x24>
    5076:	c9 df       	rcall	.-110    	; 0x500a <_ZL6spiRecv>
    5078:	f4 cf       	rjmp	.-24     	; 0x5062 <_ZN7Sd2Card7readEndEv+0xc>
    507a:	ce 01       	movw	r24, r28
    507c:	c8 df       	rcall	.-112    	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    507e:	1e 82       	std	Y+6, r1	; 0x06
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	08 95       	ret

00005086 <_ZN7Sd2Card10setSckRateEh>:
    5086:	0f 93       	push	r16
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	1f 92       	push	r1
    508e:	1f 92       	push	r1
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	67 30       	cpi	r22, 0x07	; 7
    5096:	28 f0       	brcs	.+10     	; 0x50a2 <_ZN7Sd2Card10setSckRateEh+0x1c>
    5098:	26 e1       	ldi	r18, 0x16	; 22
    509a:	fc 01       	movw	r30, r24
    509c:	25 83       	std	Z+5, r18	; 0x05
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	46 c0       	rjmp	.+140    	; 0x512e <_ZN7Sd2Card10setSckRateEh+0xa8>
    50a2:	62 30       	cpi	r22, 0x02	; 2
    50a4:	f9 f0       	breq	.+62     	; 0x50e4 <_ZN7Sd2Card10setSckRateEh+0x5e>
    50a6:	58 f4       	brcc	.+22     	; 0x50be <_ZN7Sd2Card10setSckRateEh+0x38>
    50a8:	66 23       	and	r22, r22
    50aa:	a9 f0       	breq	.+42     	; 0x50d6 <_ZN7Sd2Card10setSckRateEh+0x50>
    50ac:	61 30       	cpi	r22, 0x01	; 1
    50ae:	79 f5       	brne	.+94     	; 0x510e <_ZN7Sd2Card10setSckRateEh+0x88>
    50b0:	00 e0       	ldi	r16, 0x00	; 0
    50b2:	21 e0       	ldi	r18, 0x01	; 1
    50b4:	40 e0       	ldi	r20, 0x00	; 0
    50b6:	59 e0       	ldi	r21, 0x09	; 9
    50b8:	6d e3       	ldi	r22, 0x3D	; 61
    50ba:	70 e0       	ldi	r23, 0x00	; 0
    50bc:	2e c0       	rjmp	.+92     	; 0x511a <_ZN7Sd2Card10setSckRateEh+0x94>
    50be:	64 30       	cpi	r22, 0x04	; 4
    50c0:	f9 f0       	breq	.+62     	; 0x5100 <_ZN7Sd2Card10setSckRateEh+0x7a>
    50c2:	b8 f0       	brcs	.+46     	; 0x50f2 <_ZN7Sd2Card10setSckRateEh+0x6c>
    50c4:	65 30       	cpi	r22, 0x05	; 5
    50c6:	19 f5       	brne	.+70     	; 0x510e <_ZN7Sd2Card10setSckRateEh+0x88>
    50c8:	00 e0       	ldi	r16, 0x00	; 0
    50ca:	21 e0       	ldi	r18, 0x01	; 1
    50cc:	40 e9       	ldi	r20, 0x90	; 144
    50ce:	50 ed       	ldi	r21, 0xD0	; 208
    50d0:	63 e0       	ldi	r22, 0x03	; 3
    50d2:	70 e0       	ldi	r23, 0x00	; 0
    50d4:	22 c0       	rjmp	.+68     	; 0x511a <_ZN7Sd2Card10setSckRateEh+0x94>
    50d6:	00 e0       	ldi	r16, 0x00	; 0
    50d8:	21 e0       	ldi	r18, 0x01	; 1
    50da:	40 e4       	ldi	r20, 0x40	; 64
    50dc:	58 e7       	ldi	r21, 0x78	; 120
    50de:	6d e7       	ldi	r22, 0x7D	; 125
    50e0:	71 e0       	ldi	r23, 0x01	; 1
    50e2:	1b c0       	rjmp	.+54     	; 0x511a <_ZN7Sd2Card10setSckRateEh+0x94>
    50e4:	00 e0       	ldi	r16, 0x00	; 0
    50e6:	21 e0       	ldi	r18, 0x01	; 1
    50e8:	40 e8       	ldi	r20, 0x80	; 128
    50ea:	54 e8       	ldi	r21, 0x84	; 132
    50ec:	6e e1       	ldi	r22, 0x1E	; 30
    50ee:	70 e0       	ldi	r23, 0x00	; 0
    50f0:	14 c0       	rjmp	.+40     	; 0x511a <_ZN7Sd2Card10setSckRateEh+0x94>
    50f2:	00 e0       	ldi	r16, 0x00	; 0
    50f4:	21 e0       	ldi	r18, 0x01	; 1
    50f6:	40 e4       	ldi	r20, 0x40	; 64
    50f8:	52 e4       	ldi	r21, 0x42	; 66
    50fa:	6f e0       	ldi	r22, 0x0F	; 15
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	0d c0       	rjmp	.+26     	; 0x511a <_ZN7Sd2Card10setSckRateEh+0x94>
    5100:	00 e0       	ldi	r16, 0x00	; 0
    5102:	21 e0       	ldi	r18, 0x01	; 1
    5104:	40 e2       	ldi	r20, 0x20	; 32
    5106:	51 ea       	ldi	r21, 0xA1	; 161
    5108:	67 e0       	ldi	r22, 0x07	; 7
    510a:	70 e0       	ldi	r23, 0x00	; 0
    510c:	06 c0       	rjmp	.+12     	; 0x511a <_ZN7Sd2Card10setSckRateEh+0x94>
    510e:	00 e0       	ldi	r16, 0x00	; 0
    5110:	21 e0       	ldi	r18, 0x01	; 1
    5112:	48 e4       	ldi	r20, 0x48	; 72
    5114:	58 ee       	ldi	r21, 0xE8	; 232
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	70 e0       	ldi	r23, 0x00	; 0
    511a:	ce 01       	movw	r24, r28
    511c:	01 96       	adiw	r24, 0x01	; 1
    511e:	49 df       	rcall	.-366    	; 0x4fb2 <_ZN11SPISettingsC1Emhh>
    5120:	89 81       	ldd	r24, Y+1	; 0x01
    5122:	9a 81       	ldd	r25, Y+2	; 0x02
    5124:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <_ZL8settings+0x1>
    5128:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <_ZL8settings>
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	0f 90       	pop	r0
    5130:	0f 90       	pop	r0
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	0f 91       	pop	r16
    5138:	08 95       	ret

0000513a <_ZN7Sd2Card11waitNotBusyEj>:
    513a:	0f 93       	push	r16
    513c:	1f 93       	push	r17
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	eb 01       	movw	r28, r22
    5144:	ee da       	rcall	.-2596   	; 0x4722 <millis>
    5146:	8b 01       	movw	r16, r22
    5148:	60 df       	rcall	.-320    	; 0x500a <_ZL6spiRecv>
    514a:	8f 3f       	cpi	r24, 0xFF	; 255
    514c:	41 f0       	breq	.+16     	; 0x515e <_ZN7Sd2Card11waitNotBusyEj+0x24>
    514e:	e9 da       	rcall	.-2606   	; 0x4722 <millis>
    5150:	60 1b       	sub	r22, r16
    5152:	71 0b       	sbc	r23, r17
    5154:	6c 17       	cp	r22, r28
    5156:	7d 07       	cpc	r23, r29
    5158:	b8 f3       	brcs	.-18     	; 0x5148 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	01 c0       	rjmp	.+2      	; 0x5160 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	1f 91       	pop	r17
    5166:	0f 91       	pop	r16
    5168:	08 95       	ret

0000516a <_ZN7Sd2Card11cardCommandEhm>:
    516a:	8f 92       	push	r8
    516c:	9f 92       	push	r9
    516e:	af 92       	push	r10
    5170:	bf 92       	push	r11
    5172:	ff 92       	push	r15
    5174:	0f 93       	push	r16
    5176:	1f 93       	push	r17
    5178:	cf 93       	push	r28
    517a:	df 93       	push	r29
    517c:	ec 01       	movw	r28, r24
    517e:	f6 2e       	mov	r15, r22
    5180:	49 01       	movw	r8, r18
    5182:	5a 01       	movw	r10, r20
    5184:	68 df       	rcall	.-304    	; 0x5056 <_ZN7Sd2Card7readEndEv>
    5186:	ce 01       	movw	r24, r28
    5188:	51 df       	rcall	.-350    	; 0x502c <_ZN7Sd2Card13chipSelectLowEv>
    518a:	6c e2       	ldi	r22, 0x2C	; 44
    518c:	71 e0       	ldi	r23, 0x01	; 1
    518e:	ce 01       	movw	r24, r28
    5190:	d4 df       	rcall	.-88     	; 0x513a <_ZN7Sd2Card11waitNotBusyEj>
    5192:	8f 2d       	mov	r24, r15
    5194:	80 64       	ori	r24, 0x40	; 64
    5196:	32 df       	rcall	.-412    	; 0x4ffc <_ZN8SPIClass8transferEh>
    5198:	08 e1       	ldi	r16, 0x18	; 24
    519a:	10 e0       	ldi	r17, 0x00	; 0
    519c:	d5 01       	movw	r26, r10
    519e:	c4 01       	movw	r24, r8
    51a0:	00 2e       	mov	r0, r16
    51a2:	04 c0       	rjmp	.+8      	; 0x51ac <_ZN7Sd2Card11cardCommandEhm+0x42>
    51a4:	b6 95       	lsr	r27
    51a6:	a7 95       	ror	r26
    51a8:	97 95       	ror	r25
    51aa:	87 95       	ror	r24
    51ac:	0a 94       	dec	r0
    51ae:	d2 f7       	brpl	.-12     	; 0x51a4 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    51b0:	25 df       	rcall	.-438    	; 0x4ffc <_ZN8SPIClass8transferEh>
    51b2:	08 50       	subi	r16, 0x08	; 8
    51b4:	11 09       	sbc	r17, r1
    51b6:	08 3f       	cpi	r16, 0xF8	; 248
    51b8:	8f ef       	ldi	r24, 0xFF	; 255
    51ba:	18 07       	cpc	r17, r24
    51bc:	79 f7       	brne	.-34     	; 0x519c <_ZN7Sd2Card11cardCommandEhm+0x32>
    51be:	ff 20       	and	r15, r15
    51c0:	29 f0       	breq	.+10     	; 0x51cc <_ZN7Sd2Card11cardCommandEhm+0x62>
    51c2:	88 e0       	ldi	r24, 0x08	; 8
    51c4:	f8 12       	cpse	r15, r24
    51c6:	04 c0       	rjmp	.+8      	; 0x51d0 <_ZN7Sd2Card11cardCommandEhm+0x66>
    51c8:	87 e8       	ldi	r24, 0x87	; 135
    51ca:	03 c0       	rjmp	.+6      	; 0x51d2 <_ZN7Sd2Card11cardCommandEhm+0x68>
    51cc:	85 e9       	ldi	r24, 0x95	; 149
    51ce:	01 c0       	rjmp	.+2      	; 0x51d2 <_ZN7Sd2Card11cardCommandEhm+0x68>
    51d0:	8f ef       	ldi	r24, 0xFF	; 255
    51d2:	14 df       	rcall	.-472    	; 0x4ffc <_ZN8SPIClass8transferEh>
    51d4:	10 e0       	ldi	r17, 0x00	; 0
    51d6:	19 df       	rcall	.-462    	; 0x500a <_ZL6spiRecv>
    51d8:	8a 87       	std	Y+10, r24	; 0x0a
    51da:	87 ff       	sbrs	r24, 7
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    51de:	1f 3f       	cpi	r17, 0xFF	; 255
    51e0:	11 f0       	breq	.+4      	; 0x51e6 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    51e2:	1f 5f       	subi	r17, 0xFF	; 255
    51e4:	f8 cf       	rjmp	.-16     	; 0x51d6 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	1f 91       	pop	r17
    51ec:	0f 91       	pop	r16
    51ee:	ff 90       	pop	r15
    51f0:	bf 90       	pop	r11
    51f2:	af 90       	pop	r10
    51f4:	9f 90       	pop	r9
    51f6:	8f 90       	pop	r8
    51f8:	08 95       	ret

000051fa <_ZN7Sd2Card4initEhh>:
    51fa:	7f 92       	push	r7
    51fc:	8f 92       	push	r8
    51fe:	9f 92       	push	r9
    5200:	af 92       	push	r10
    5202:	bf 92       	push	r11
    5204:	cf 92       	push	r12
    5206:	df 92       	push	r13
    5208:	ef 92       	push	r14
    520a:	ff 92       	push	r15
    520c:	0f 93       	push	r16
    520e:	1f 93       	push	r17
    5210:	cf 93       	push	r28
    5212:	df 93       	push	r29
    5214:	1f 92       	push	r1
    5216:	1f 92       	push	r1
    5218:	cd b7       	in	r28, 0x3d	; 61
    521a:	de b7       	in	r29, 0x3e	; 62
    521c:	7c 01       	movw	r14, r24
    521e:	76 2e       	mov	r7, r22
    5220:	fc 01       	movw	r30, r24
    5222:	13 86       	std	Z+11, r1	; 0x0b
    5224:	11 86       	std	Z+9, r1	; 0x09
    5226:	16 82       	std	Z+6, r1	; 0x06
    5228:	15 82       	std	Z+5, r1	; 0x05
    522a:	44 83       	std	Z+4, r20	; 0x04
    522c:	7a da       	rcall	.-2828   	; 0x4722 <millis>
    522e:	6b 01       	movw	r12, r22
    5230:	61 e0       	ldi	r22, 0x01	; 1
    5232:	f7 01       	movw	r30, r14
    5234:	84 81       	ldd	r24, Z+4	; 0x04
    5236:	bd db       	rcall	.-2182   	; 0x49b2 <pinMode>
    5238:	61 e0       	ldi	r22, 0x01	; 1
    523a:	f7 01       	movw	r30, r14
    523c:	84 81       	ldd	r24, Z+4	; 0x04
    523e:	f5 db       	rcall	.-2070   	; 0x4a2a <digitalWrite>
    5240:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZN8SPIClass5beginEv>
    5244:	00 e0       	ldi	r16, 0x00	; 0
    5246:	21 e0       	ldi	r18, 0x01	; 1
    5248:	40 e9       	ldi	r20, 0x90	; 144
    524a:	50 ed       	ldi	r21, 0xD0	; 208
    524c:	63 e0       	ldi	r22, 0x03	; 3
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	ce 01       	movw	r24, r28
    5252:	01 96       	adiw	r24, 0x01	; 1
    5254:	ae de       	rcall	.-676    	; 0x4fb2 <_ZN11SPISettingsC1Emhh>
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	9a 81       	ldd	r25, Y+2	; 0x02
    525a:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <_ZL8settings+0x1>
    525e:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <_ZL8settings>
    5262:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5266:	1a e0       	ldi	r17, 0x0A	; 10
    5268:	8f ef       	ldi	r24, 0xFF	; 255
    526a:	c8 de       	rcall	.-624    	; 0x4ffc <_ZN8SPIClass8transferEh>
    526c:	11 50       	subi	r17, 0x01	; 1
    526e:	e1 f7       	brne	.-8      	; 0x5268 <_ZN7Sd2Card4initEhh+0x6e>
    5270:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <_ZN8SPIClass13interruptModeE>
    5274:	81 11       	cpse	r24, r1
    5276:	90 de       	rcall	.-736    	; 0x4f98 <_ZN8SPIClass14endTransactionEv.part.3>
    5278:	c7 01       	movw	r24, r14
    527a:	d8 de       	rcall	.-592    	; 0x502c <_ZN7Sd2Card13chipSelectLowEv>
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	a9 01       	movw	r20, r18
    5282:	60 e0       	ldi	r22, 0x00	; 0
    5284:	c7 01       	movw	r24, r14
    5286:	71 df       	rcall	.-286    	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    5288:	08 2f       	mov	r16, r24
    528a:	f7 01       	movw	r30, r14
    528c:	82 87       	std	Z+10, r24	; 0x0a
    528e:	81 30       	cpi	r24, 0x01	; 1
    5290:	41 f0       	breq	.+16     	; 0x52a2 <_ZN7Sd2Card4initEhh+0xa8>
    5292:	47 da       	rcall	.-2930   	; 0x4722 <millis>
    5294:	6c 19       	sub	r22, r12
    5296:	7d 09       	sbc	r23, r13
    5298:	61 3d       	cpi	r22, 0xD1	; 209
    529a:	77 40       	sbci	r23, 0x07	; 7
    529c:	78 f3       	brcs	.-34     	; 0x527c <_ZN7Sd2Card4initEhh+0x82>
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	4a c0       	rjmp	.+148    	; 0x5336 <_ZN7Sd2Card4initEhh+0x13c>
    52a2:	2a ea       	ldi	r18, 0xAA	; 170
    52a4:	31 e0       	ldi	r19, 0x01	; 1
    52a6:	40 e0       	ldi	r20, 0x00	; 0
    52a8:	50 e0       	ldi	r21, 0x00	; 0
    52aa:	68 e0       	ldi	r22, 0x08	; 8
    52ac:	c7 01       	movw	r24, r14
    52ae:	5d df       	rcall	.-326    	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    52b0:	82 ff       	sbrs	r24, 2
    52b2:	03 c0       	rjmp	.+6      	; 0x52ba <_ZN7Sd2Card4initEhh+0xc0>
    52b4:	f7 01       	movw	r30, r14
    52b6:	03 87       	std	Z+11, r16	; 0x0b
    52b8:	0d c0       	rjmp	.+26     	; 0x52d4 <_ZN7Sd2Card4initEhh+0xda>
    52ba:	04 e0       	ldi	r16, 0x04	; 4
    52bc:	a6 de       	rcall	.-692    	; 0x500a <_ZL6spiRecv>
    52be:	f7 01       	movw	r30, r14
    52c0:	82 87       	std	Z+10, r24	; 0x0a
    52c2:	01 50       	subi	r16, 0x01	; 1
    52c4:	d9 f7       	brne	.-10     	; 0x52bc <_ZN7Sd2Card4initEhh+0xc2>
    52c6:	8a 3a       	cpi	r24, 0xAA	; 170
    52c8:	11 f0       	breq	.+4      	; 0x52ce <_ZN7Sd2Card4initEhh+0xd4>
    52ca:	82 e0       	ldi	r24, 0x02	; 2
    52cc:	35 c0       	rjmp	.+106    	; 0x5338 <_ZN7Sd2Card4initEhh+0x13e>
    52ce:	82 e0       	ldi	r24, 0x02	; 2
    52d0:	f7 01       	movw	r30, r14
    52d2:	83 87       	std	Z+11, r24	; 0x0b
    52d4:	f7 01       	movw	r30, r14
    52d6:	83 85       	ldd	r24, Z+11	; 0x0b
    52d8:	82 30       	cpi	r24, 0x02	; 2
    52da:	21 f0       	breq	.+8      	; 0x52e4 <_ZN7Sd2Card4initEhh+0xea>
    52dc:	81 2c       	mov	r8, r1
    52de:	91 2c       	mov	r9, r1
    52e0:	54 01       	movw	r10, r8
    52e2:	05 c0       	rjmp	.+10     	; 0x52ee <_ZN7Sd2Card4initEhh+0xf4>
    52e4:	81 2c       	mov	r8, r1
    52e6:	91 2c       	mov	r9, r1
    52e8:	a1 2c       	mov	r10, r1
    52ea:	80 e4       	ldi	r24, 0x40	; 64
    52ec:	b8 2e       	mov	r11, r24
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	a9 01       	movw	r20, r18
    52f4:	67 e3       	ldi	r22, 0x37	; 55
    52f6:	c7 01       	movw	r24, r14
    52f8:	38 df       	rcall	.-400    	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    52fa:	a5 01       	movw	r20, r10
    52fc:	94 01       	movw	r18, r8
    52fe:	69 e2       	ldi	r22, 0x29	; 41
    5300:	c7 01       	movw	r24, r14
    5302:	33 df       	rcall	.-410    	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    5304:	f7 01       	movw	r30, r14
    5306:	82 87       	std	Z+10, r24	; 0x0a
    5308:	88 23       	and	r24, r24
    530a:	41 f0       	breq	.+16     	; 0x531c <_ZN7Sd2Card4initEhh+0x122>
    530c:	0a da       	rcall	.-3052   	; 0x4722 <millis>
    530e:	6c 19       	sub	r22, r12
    5310:	7d 09       	sbc	r23, r13
    5312:	61 3d       	cpi	r22, 0xD1	; 209
    5314:	77 40       	sbci	r23, 0x07	; 7
    5316:	58 f3       	brcs	.-42     	; 0x52ee <_ZN7Sd2Card4initEhh+0xf4>
    5318:	88 e0       	ldi	r24, 0x08	; 8
    531a:	0d c0       	rjmp	.+26     	; 0x5336 <_ZN7Sd2Card4initEhh+0x13c>
    531c:	f7 01       	movw	r30, r14
    531e:	83 85       	ldd	r24, Z+11	; 0x0b
    5320:	82 30       	cpi	r24, 0x02	; 2
    5322:	c1 f4       	brne	.+48     	; 0x5354 <_ZN7Sd2Card4initEhh+0x15a>
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	a9 01       	movw	r20, r18
    532a:	6a e3       	ldi	r22, 0x3A	; 58
    532c:	c7 01       	movw	r24, r14
    532e:	1d df       	rcall	.-454    	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    5330:	88 23       	and	r24, r24
    5332:	31 f0       	breq	.+12     	; 0x5340 <_ZN7Sd2Card4initEhh+0x146>
    5334:	86 e0       	ldi	r24, 0x06	; 6
    5336:	f7 01       	movw	r30, r14
    5338:	85 83       	std	Z+5, r24	; 0x05
    533a:	c7 01       	movw	r24, r14
    533c:	68 de       	rcall	.-816    	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    533e:	10 c0       	rjmp	.+32     	; 0x5360 <_ZN7Sd2Card4initEhh+0x166>
    5340:	64 de       	rcall	.-824    	; 0x500a <_ZL6spiRecv>
    5342:	80 7c       	andi	r24, 0xC0	; 192
    5344:	80 3c       	cpi	r24, 0xC0	; 192
    5346:	19 f4       	brne	.+6      	; 0x534e <_ZN7Sd2Card4initEhh+0x154>
    5348:	83 e0       	ldi	r24, 0x03	; 3
    534a:	f7 01       	movw	r30, r14
    534c:	83 87       	std	Z+11, r24	; 0x0b
    534e:	5d de       	rcall	.-838    	; 0x500a <_ZL6spiRecv>
    5350:	5c de       	rcall	.-840    	; 0x500a <_ZL6spiRecv>
    5352:	5b de       	rcall	.-842    	; 0x500a <_ZL6spiRecv>
    5354:	c7 01       	movw	r24, r14
    5356:	5b de       	rcall	.-842    	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    5358:	67 2d       	mov	r22, r7
    535a:	c7 01       	movw	r24, r14
    535c:	94 de       	rcall	.-728    	; 0x5086 <_ZN7Sd2Card10setSckRateEh>
    535e:	18 2f       	mov	r17, r24
    5360:	81 2f       	mov	r24, r17
    5362:	0f 90       	pop	r0
    5364:	0f 90       	pop	r0
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	1f 91       	pop	r17
    536c:	0f 91       	pop	r16
    536e:	ff 90       	pop	r15
    5370:	ef 90       	pop	r14
    5372:	df 90       	pop	r13
    5374:	cf 90       	pop	r12
    5376:	bf 90       	pop	r11
    5378:	af 90       	pop	r10
    537a:	9f 90       	pop	r9
    537c:	8f 90       	pop	r8
    537e:	7f 90       	pop	r7
    5380:	08 95       	ret

00005382 <_ZN7Sd2Card14waitStartBlockEv>:
    5382:	0f 93       	push	r16
    5384:	1f 93       	push	r17
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29
    538a:	ec 01       	movw	r28, r24
    538c:	ca d9       	rcall	.-3180   	; 0x4722 <millis>
    538e:	8b 01       	movw	r16, r22
    5390:	3c de       	rcall	.-904    	; 0x500a <_ZL6spiRecv>
    5392:	8a 87       	std	Y+10, r24	; 0x0a
    5394:	8f 3f       	cpi	r24, 0xFF	; 255
    5396:	41 f4       	brne	.+16     	; 0x53a8 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    5398:	c4 d9       	rcall	.-3192   	; 0x4722 <millis>
    539a:	60 1b       	sub	r22, r16
    539c:	71 0b       	sbc	r23, r17
    539e:	6d 32       	cpi	r22, 0x2D	; 45
    53a0:	71 40       	sbci	r23, 0x01	; 1
    53a2:	b0 f3       	brcs	.-20     	; 0x5390 <_ZN7Sd2Card14waitStartBlockEv+0xe>
    53a4:	8f e0       	ldi	r24, 0x0F	; 15
    53a6:	03 c0       	rjmp	.+6      	; 0x53ae <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    53a8:	8e 3f       	cpi	r24, 0xFE	; 254
    53aa:	31 f0       	breq	.+12     	; 0x53b8 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    53ac:	8d e0       	ldi	r24, 0x0D	; 13
    53ae:	8d 83       	std	Y+5, r24	; 0x05
    53b0:	ce 01       	movw	r24, r28
    53b2:	2d de       	rcall	.-934    	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	01 c0       	rjmp	.+2      	; 0x53ba <_ZN7Sd2Card14waitStartBlockEv+0x38>
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	1f 91       	pop	r17
    53c0:	0f 91       	pop	r16
    53c2:	08 95       	ret

000053c4 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    53c4:	cf 92       	push	r12
    53c6:	df 92       	push	r13
    53c8:	ef 92       	push	r14
    53ca:	ff 92       	push	r15
    53cc:	0f 93       	push	r16
    53ce:	1f 93       	push	r17
    53d0:	cf 93       	push	r28
    53d2:	df 93       	push	r29
    53d4:	ec 01       	movw	r28, r24
    53d6:	69 01       	movw	r12, r18
    53d8:	c8 01       	movw	r24, r16
    53da:	82 0f       	add	r24, r18
    53dc:	93 1f       	adc	r25, r19
    53de:	81 30       	cpi	r24, 0x01	; 1
    53e0:	92 40       	sbci	r25, 0x02	; 2
    53e2:	08 f0       	brcs	.+2      	; 0x53e6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    53e4:	57 c0       	rjmp	.+174    	; 0x5494 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    53e6:	8e 81       	ldd	r24, Y+6	; 0x06
    53e8:	88 23       	and	r24, r24
    53ea:	71 f0       	breq	.+28     	; 0x5408 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    53ec:	88 81       	ld	r24, Y
    53ee:	99 81       	ldd	r25, Y+1	; 0x01
    53f0:	aa 81       	ldd	r26, Y+2	; 0x02
    53f2:	bb 81       	ldd	r27, Y+3	; 0x03
    53f4:	84 17       	cp	r24, r20
    53f6:	95 07       	cpc	r25, r21
    53f8:	a6 07       	cpc	r26, r22
    53fa:	b7 07       	cpc	r27, r23
    53fc:	29 f4       	brne	.+10     	; 0x5408 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    53fe:	8f 81       	ldd	r24, Y+7	; 0x07
    5400:	98 85       	ldd	r25, Y+8	; 0x08
    5402:	c8 16       	cp	r12, r24
    5404:	d9 06       	cpc	r13, r25
    5406:	00 f5       	brcc	.+64     	; 0x5448 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    5408:	48 83       	st	Y, r20
    540a:	59 83       	std	Y+1, r21	; 0x01
    540c:	6a 83       	std	Y+2, r22	; 0x02
    540e:	7b 83       	std	Y+3, r23	; 0x03
    5410:	8b 85       	ldd	r24, Y+11	; 0x0b
    5412:	83 30       	cpi	r24, 0x03	; 3
    5414:	39 f0       	breq	.+14     	; 0x5424 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    5416:	89 e0       	ldi	r24, 0x09	; 9
    5418:	44 0f       	add	r20, r20
    541a:	55 1f       	adc	r21, r21
    541c:	66 1f       	adc	r22, r22
    541e:	77 1f       	adc	r23, r23
    5420:	8a 95       	dec	r24
    5422:	d1 f7       	brne	.-12     	; 0x5418 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    5424:	9a 01       	movw	r18, r20
    5426:	ab 01       	movw	r20, r22
    5428:	61 e1       	ldi	r22, 0x11	; 17
    542a:	ce 01       	movw	r24, r28
    542c:	9e de       	rcall	.-708    	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    542e:	88 23       	and	r24, r24
    5430:	19 f0       	breq	.+6      	; 0x5438 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    5432:	83 e0       	ldi	r24, 0x03	; 3
    5434:	8d 83       	std	Y+5, r24	; 0x05
    5436:	2e c0       	rjmp	.+92     	; 0x5494 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    5438:	ce 01       	movw	r24, r28
    543a:	a3 df       	rcall	.-186    	; 0x5382 <_ZN7Sd2Card14waitStartBlockEv>
    543c:	88 23       	and	r24, r24
    543e:	51 f1       	breq	.+84     	; 0x5494 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    5440:	18 86       	std	Y+8, r1	; 0x08
    5442:	1f 82       	std	Y+7, r1	; 0x07
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	8e 83       	std	Y+6, r24	; 0x06
    5448:	8f 81       	ldd	r24, Y+7	; 0x07
    544a:	98 85       	ldd	r25, Y+8	; 0x08
    544c:	8c 15       	cp	r24, r12
    544e:	9d 05       	cpc	r25, r13
    5450:	38 f4       	brcc	.+14     	; 0x5460 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    5452:	db dd       	rcall	.-1098   	; 0x500a <_ZL6spiRecv>
    5454:	8f 81       	ldd	r24, Y+7	; 0x07
    5456:	98 85       	ldd	r25, Y+8	; 0x08
    5458:	01 96       	adiw	r24, 0x01	; 1
    545a:	98 87       	std	Y+8, r25	; 0x08
    545c:	8f 83       	std	Y+7, r24	; 0x07
    545e:	f4 cf       	rjmp	.-24     	; 0x5448 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    5460:	67 01       	movw	r12, r14
    5462:	e0 0e       	add	r14, r16
    5464:	f1 1e       	adc	r15, r17
    5466:	ce 14       	cp	r12, r14
    5468:	df 04       	cpc	r13, r15
    546a:	29 f0       	breq	.+10     	; 0x5476 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    546c:	ce dd       	rcall	.-1124   	; 0x500a <_ZL6spiRecv>
    546e:	f6 01       	movw	r30, r12
    5470:	81 93       	st	Z+, r24
    5472:	6f 01       	movw	r12, r30
    5474:	f8 cf       	rjmp	.-16     	; 0x5466 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    5476:	8f 81       	ldd	r24, Y+7	; 0x07
    5478:	98 85       	ldd	r25, Y+8	; 0x08
    547a:	08 0f       	add	r16, r24
    547c:	19 1f       	adc	r17, r25
    547e:	18 87       	std	Y+8, r17	; 0x08
    5480:	0f 83       	std	Y+7, r16	; 0x07
    5482:	89 85       	ldd	r24, Y+9	; 0x09
    5484:	88 23       	and	r24, r24
    5486:	19 f0       	breq	.+6      	; 0x548e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    5488:	01 15       	cp	r16, r1
    548a:	12 40       	sbci	r17, 0x02	; 2
    548c:	38 f0       	brcs	.+14     	; 0x549c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    548e:	ce 01       	movw	r24, r28
    5490:	e2 dd       	rcall	.-1084   	; 0x5056 <_ZN7Sd2Card7readEndEv>
    5492:	04 c0       	rjmp	.+8      	; 0x549c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    5494:	ce 01       	movw	r24, r28
    5496:	bb dd       	rcall	.-1162   	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	01 c0       	rjmp	.+2      	; 0x549e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	df 91       	pop	r29
    54a0:	cf 91       	pop	r28
    54a2:	1f 91       	pop	r17
    54a4:	0f 91       	pop	r16
    54a6:	ff 90       	pop	r15
    54a8:	ef 90       	pop	r14
    54aa:	df 90       	pop	r13
    54ac:	cf 90       	pop	r12
    54ae:	08 95       	ret

000054b0 <_ZN7Sd2Card8readDataEmjjPh>:
    54b0:	ef 92       	push	r14
    54b2:	ff 92       	push	r15
    54b4:	0f 93       	push	r16
    54b6:	1f 93       	push	r17
    54b8:	01 15       	cp	r16, r1
    54ba:	11 05       	cpc	r17, r1
    54bc:	11 f0       	breq	.+4      	; 0x54c2 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    54be:	82 df       	rcall	.-252    	; 0x53c4 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    54c0:	01 c0       	rjmp	.+2      	; 0x54c4 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	1f 91       	pop	r17
    54c6:	0f 91       	pop	r16
    54c8:	ff 90       	pop	r15
    54ca:	ef 90       	pop	r14
    54cc:	08 95       	ret

000054ce <_ZN7Sd2Card9readBlockEmPh>:
    54ce:	ef 92       	push	r14
    54d0:	ff 92       	push	r15
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	79 01       	movw	r14, r18
    54d8:	00 e0       	ldi	r16, 0x00	; 0
    54da:	12 e0       	ldi	r17, 0x02	; 2
    54dc:	20 e0       	ldi	r18, 0x00	; 0
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	71 df       	rcall	.-286    	; 0x53c4 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    54e2:	1f 91       	pop	r17
    54e4:	0f 91       	pop	r16
    54e6:	ff 90       	pop	r15
    54e8:	ef 90       	pop	r14
    54ea:	08 95       	ret

000054ec <_ZN7Sd2Card9writeDataEhPKh>:
    54ec:	ef 92       	push	r14
    54ee:	ff 92       	push	r15
    54f0:	0f 93       	push	r16
    54f2:	1f 93       	push	r17
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	8c 01       	movw	r16, r24
    54fa:	86 2f       	mov	r24, r22
    54fc:	7a 01       	movw	r14, r20
    54fe:	7e dd       	rcall	.-1284   	; 0x4ffc <_ZN8SPIClass8transferEh>
    5500:	e7 01       	movw	r28, r14
    5502:	8e ef       	ldi	r24, 0xFE	; 254
    5504:	f8 1a       	sub	r15, r24
    5506:	89 91       	ld	r24, Y+
    5508:	79 dd       	rcall	.-1294   	; 0x4ffc <_ZN8SPIClass8transferEh>
    550a:	ce 15       	cp	r28, r14
    550c:	df 05       	cpc	r29, r15
    550e:	d9 f7       	brne	.-10     	; 0x5506 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    5510:	8f ef       	ldi	r24, 0xFF	; 255
    5512:	74 dd       	rcall	.-1304   	; 0x4ffc <_ZN8SPIClass8transferEh>
    5514:	8f ef       	ldi	r24, 0xFF	; 255
    5516:	72 dd       	rcall	.-1308   	; 0x4ffc <_ZN8SPIClass8transferEh>
    5518:	78 dd       	rcall	.-1296   	; 0x500a <_ZL6spiRecv>
    551a:	f8 01       	movw	r30, r16
    551c:	82 87       	std	Z+10, r24	; 0x0a
    551e:	8f 71       	andi	r24, 0x1F	; 31
    5520:	85 30       	cpi	r24, 0x05	; 5
    5522:	31 f0       	breq	.+12     	; 0x5530 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    5524:	81 e1       	ldi	r24, 0x11	; 17
    5526:	85 83       	std	Z+5, r24	; 0x05
    5528:	c8 01       	movw	r24, r16
    552a:	71 dd       	rcall	.-1310   	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    552c:	80 e0       	ldi	r24, 0x00	; 0
    552e:	01 c0       	rjmp	.+2      	; 0x5532 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	df 91       	pop	r29
    5534:	cf 91       	pop	r28
    5536:	1f 91       	pop	r17
    5538:	0f 91       	pop	r16
    553a:	ff 90       	pop	r15
    553c:	ef 90       	pop	r14
    553e:	08 95       	ret

00005540 <_ZN7Sd2Card10writeBlockEmPKh>:
    5540:	0f 93       	push	r16
    5542:	1f 93       	push	r17
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	ec 01       	movw	r28, r24
    554a:	89 01       	movw	r16, r18
    554c:	41 15       	cp	r20, r1
    554e:	51 05       	cpc	r21, r1
    5550:	61 05       	cpc	r22, r1
    5552:	71 05       	cpc	r23, r1
    5554:	11 f4       	brne	.+4      	; 0x555a <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    5556:	82 e1       	ldi	r24, 0x12	; 18
    5558:	2d c0       	rjmp	.+90     	; 0x55b4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    555a:	8b 85       	ldd	r24, Y+11	; 0x0b
    555c:	83 30       	cpi	r24, 0x03	; 3
    555e:	39 f0       	breq	.+14     	; 0x556e <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    5560:	89 e0       	ldi	r24, 0x09	; 9
    5562:	44 0f       	add	r20, r20
    5564:	55 1f       	adc	r21, r21
    5566:	66 1f       	adc	r22, r22
    5568:	77 1f       	adc	r23, r23
    556a:	8a 95       	dec	r24
    556c:	d1 f7       	brne	.-12     	; 0x5562 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    556e:	9a 01       	movw	r18, r20
    5570:	ab 01       	movw	r20, r22
    5572:	68 e1       	ldi	r22, 0x18	; 24
    5574:	ce 01       	movw	r24, r28
    5576:	f9 dd       	rcall	.-1038   	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    5578:	88 23       	and	r24, r24
    557a:	11 f0       	breq	.+4      	; 0x5580 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    557c:	84 e0       	ldi	r24, 0x04	; 4
    557e:	1a c0       	rjmp	.+52     	; 0x55b4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    5580:	a8 01       	movw	r20, r16
    5582:	6e ef       	ldi	r22, 0xFE	; 254
    5584:	ce 01       	movw	r24, r28
    5586:	b2 df       	rcall	.-156    	; 0x54ec <_ZN7Sd2Card9writeDataEhPKh>
    5588:	88 23       	and	r24, r24
    558a:	a9 f0       	breq	.+42     	; 0x55b6 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    558c:	68 e5       	ldi	r22, 0x58	; 88
    558e:	72 e0       	ldi	r23, 0x02	; 2
    5590:	ce 01       	movw	r24, r28
    5592:	d3 dd       	rcall	.-1114   	; 0x513a <_ZN7Sd2Card11waitNotBusyEj>
    5594:	81 11       	cpse	r24, r1
    5596:	02 c0       	rjmp	.+4      	; 0x559c <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    5598:	85 e1       	ldi	r24, 0x15	; 21
    559a:	0c c0       	rjmp	.+24     	; 0x55b4 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	a9 01       	movw	r20, r18
    55a2:	6d e0       	ldi	r22, 0x0D	; 13
    55a4:	ce 01       	movw	r24, r28
    55a6:	e1 dd       	rcall	.-1086   	; 0x516a <_ZN7Sd2Card11cardCommandEhm>
    55a8:	81 11       	cpse	r24, r1
    55aa:	03 c0       	rjmp	.+6      	; 0x55b2 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    55ac:	2e dd       	rcall	.-1444   	; 0x500a <_ZL6spiRecv>
    55ae:	88 23       	and	r24, r24
    55b0:	31 f0       	breq	.+12     	; 0x55be <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    55b2:	84 e1       	ldi	r24, 0x14	; 20
    55b4:	8d 83       	std	Y+5, r24	; 0x05
    55b6:	ce 01       	movw	r24, r28
    55b8:	2a dd       	rcall	.-1452   	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    55ba:	80 e0       	ldi	r24, 0x00	; 0
    55bc:	03 c0       	rjmp	.+6      	; 0x55c4 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    55be:	ce 01       	movw	r24, r28
    55c0:	26 dd       	rcall	.-1460   	; 0x500e <_ZN7Sd2Card14chipSelectHighEv>
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	1f 91       	pop	r17
    55ca:	0f 91       	pop	r16
    55cc:	08 95       	ret

000055ce <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    55ce:	ed ee       	ldi	r30, 0xED	; 237
    55d0:	f8 e0       	ldi	r31, 0x08	; 8
    55d2:	80 e5       	ldi	r24, 0x50	; 80
    55d4:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    55d6:	11 82       	std	Z+1, r1	; 0x01
    55d8:	08 95       	ret

000055da <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	ec 01       	movw	r28, r24
    55e0:	9c 01       	movw	r18, r24
    55e2:	2a 5f       	subi	r18, 0xFA	; 250
    55e4:	3f 4f       	sbci	r19, 0xFF	; 255
    55e6:	41 e0       	ldi	r20, 0x01	; 1
    55e8:	50 e0       	ldi	r21, 0x00	; 0
    55ea:	60 e0       	ldi	r22, 0x00	; 0
    55ec:	70 e0       	ldi	r23, 0x00	; 0
    55ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55f2:	0f d6       	rcall	.+3102   	; 0x6212 <_ZN8SdVolume15allocContiguousEmPm>
    55f4:	88 23       	and	r24, r24
    55f6:	a1 f0       	breq	.+40     	; 0x5620 <_ZN6SdFile10addClusterEv+0x46>
    55f8:	8f 89       	ldd	r24, Y+23	; 0x17
    55fa:	98 8d       	ldd	r25, Y+24	; 0x18
    55fc:	a9 8d       	ldd	r26, Y+25	; 0x19
    55fe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5600:	89 2b       	or	r24, r25
    5602:	8a 2b       	or	r24, r26
    5604:	8b 2b       	or	r24, r27
    5606:	59 f4       	brne	.+22     	; 0x561e <_ZN6SdFile10addClusterEv+0x44>
    5608:	8e 81       	ldd	r24, Y+6	; 0x06
    560a:	9f 81       	ldd	r25, Y+7	; 0x07
    560c:	a8 85       	ldd	r26, Y+8	; 0x08
    560e:	b9 85       	ldd	r27, Y+9	; 0x09
    5610:	8f 8b       	std	Y+23, r24	; 0x17
    5612:	98 8f       	std	Y+24, r25	; 0x18
    5614:	a9 8f       	std	Y+25, r26	; 0x19
    5616:	ba 8f       	std	Y+26, r27	; 0x1a
    5618:	8c 81       	ldd	r24, Y+4	; 0x04
    561a:	80 68       	ori	r24, 0x80	; 128
    561c:	8c 83       	std	Y+4, r24	; 0x04
    561e:	81 e0       	ldi	r24, 0x01	; 1
    5620:	df 91       	pop	r29
    5622:	cf 91       	pop	r28
    5624:	08 95       	ret

00005626 <_ZN6SdFile13cacheDirEntryEh>:
    5626:	cf 93       	push	r28
    5628:	df 93       	push	r29
    562a:	ec 01       	movw	r28, r24
    562c:	46 2f       	mov	r20, r22
    562e:	6e 85       	ldd	r22, Y+14	; 0x0e
    5630:	7f 85       	ldd	r23, Y+15	; 0x0f
    5632:	88 89       	ldd	r24, Y+16	; 0x10
    5634:	99 89       	ldd	r25, Y+17	; 0x11
    5636:	2a d4       	rcall	.+2132   	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    5638:	88 23       	and	r24, r24
    563a:	41 f0       	breq	.+16     	; 0x564c <_ZN6SdFile13cacheDirEntryEh+0x26>
    563c:	8a 89       	ldd	r24, Y+18	; 0x12
    563e:	20 e2       	ldi	r18, 0x20	; 32
    5640:	82 9f       	mul	r24, r18
    5642:	c0 01       	movw	r24, r0
    5644:	11 24       	eor	r1, r1
    5646:	88 50       	subi	r24, 0x08	; 8
    5648:	97 4f       	sbci	r25, 0xF7	; 247
    564a:	02 c0       	rjmp	.+4      	; 0x5650 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	df 91       	pop	r29
    5652:	cf 91       	pop	r28
    5654:	08 95       	ret

00005656 <_ZN6SdFile8openRootEP8SdVolume>:
    5656:	0f 93       	push	r16
    5658:	1f 93       	push	r17
    565a:	cf 93       	push	r28
    565c:	df 93       	push	r29
    565e:	fc 01       	movw	r30, r24
    5660:	25 81       	ldd	r18, Z+5	; 0x05
    5662:	22 23       	and	r18, r18
    5664:	11 f0       	breq	.+4      	; 0x566a <_ZN6SdFile8openRootEP8SdVolume+0x14>
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	41 c0       	rjmp	.+130    	; 0x56ec <_ZN6SdFile8openRootEP8SdVolume+0x96>
    566a:	8b 01       	movw	r16, r22
    566c:	ec 01       	movw	r28, r24
    566e:	fb 01       	movw	r30, r22
    5670:	87 89       	ldd	r24, Z+23	; 0x17
    5672:	80 31       	cpi	r24, 0x10	; 16
    5674:	b1 f4       	brne	.+44     	; 0x56a2 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    5676:	82 e0       	ldi	r24, 0x02	; 2
    5678:	8d 83       	std	Y+5, r24	; 0x05
    567a:	1f 8a       	std	Y+23, r1	; 0x17
    567c:	18 8e       	std	Y+24, r1	; 0x18
    567e:	19 8e       	std	Y+25, r1	; 0x19
    5680:	1a 8e       	std	Y+26, r1	; 0x1a
    5682:	80 8d       	ldd	r24, Z+24	; 0x18
    5684:	91 8d       	ldd	r25, Z+25	; 0x19
    5686:	a0 e0       	ldi	r26, 0x00	; 0
    5688:	b0 e0       	ldi	r27, 0x00	; 0
    568a:	25 e0       	ldi	r18, 0x05	; 5
    568c:	88 0f       	add	r24, r24
    568e:	99 1f       	adc	r25, r25
    5690:	aa 1f       	adc	r26, r26
    5692:	bb 1f       	adc	r27, r27
    5694:	2a 95       	dec	r18
    5696:	d1 f7       	brne	.-12     	; 0x568c <_ZN6SdFile8openRootEP8SdVolume+0x36>
    5698:	8b 8b       	std	Y+19, r24	; 0x13
    569a:	9c 8b       	std	Y+20, r25	; 0x14
    569c:	ad 8b       	std	Y+21, r26	; 0x15
    569e:	be 8b       	std	Y+22, r27	; 0x16
    56a0:	14 c0       	rjmp	.+40     	; 0x56ca <_ZN6SdFile8openRootEP8SdVolume+0x74>
    56a2:	80 32       	cpi	r24, 0x20	; 32
    56a4:	01 f7       	brne	.-64     	; 0x5666 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    56a6:	83 e0       	ldi	r24, 0x03	; 3
    56a8:	8d 83       	std	Y+5, r24	; 0x05
    56aa:	fb 01       	movw	r30, r22
    56ac:	42 8d       	ldd	r20, Z+26	; 0x1a
    56ae:	53 8d       	ldd	r21, Z+27	; 0x1b
    56b0:	64 8d       	ldd	r22, Z+28	; 0x1c
    56b2:	75 8d       	ldd	r23, Z+29	; 0x1d
    56b4:	4f 8b       	std	Y+23, r20	; 0x17
    56b6:	58 8f       	std	Y+24, r21	; 0x18
    56b8:	69 8f       	std	Y+25, r22	; 0x19
    56ba:	7a 8f       	std	Y+26, r23	; 0x1a
    56bc:	9e 01       	movw	r18, r28
    56be:	2d 5e       	subi	r18, 0xED	; 237
    56c0:	3f 4f       	sbci	r19, 0xFF	; 255
    56c2:	c8 01       	movw	r24, r16
    56c4:	9e d4       	rcall	.+2364   	; 0x6002 <_ZNK8SdVolume9chainSizeEmPm>
    56c6:	88 23       	and	r24, r24
    56c8:	71 f2       	breq	.-100    	; 0x5666 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    56ca:	1c 8f       	std	Y+28, r17	; 0x1c
    56cc:	0b 8f       	std	Y+27, r16	; 0x1b
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	8c 83       	std	Y+4, r24	; 0x04
    56d2:	1e 82       	std	Y+6, r1	; 0x06
    56d4:	1f 82       	std	Y+7, r1	; 0x07
    56d6:	18 86       	std	Y+8, r1	; 0x08
    56d8:	19 86       	std	Y+9, r1	; 0x09
    56da:	1a 86       	std	Y+10, r1	; 0x0a
    56dc:	1b 86       	std	Y+11, r1	; 0x0b
    56de:	1c 86       	std	Y+12, r1	; 0x0c
    56e0:	1d 86       	std	Y+13, r1	; 0x0d
    56e2:	1e 86       	std	Y+14, r1	; 0x0e
    56e4:	1f 86       	std	Y+15, r1	; 0x0f
    56e6:	18 8a       	std	Y+16, r1	; 0x10
    56e8:	19 8a       	std	Y+17, r1	; 0x11
    56ea:	1a 8a       	std	Y+18, r1	; 0x12
    56ec:	df 91       	pop	r29
    56ee:	cf 91       	pop	r28
    56f0:	1f 91       	pop	r17
    56f2:	0f 91       	pop	r16
    56f4:	08 95       	ret

000056f6 <_ZN6SdFile4readEPvj>:
    56f6:	2f 92       	push	r2
    56f8:	3f 92       	push	r3
    56fa:	4f 92       	push	r4
    56fc:	5f 92       	push	r5
    56fe:	6f 92       	push	r6
    5700:	7f 92       	push	r7
    5702:	8f 92       	push	r8
    5704:	9f 92       	push	r9
    5706:	af 92       	push	r10
    5708:	bf 92       	push	r11
    570a:	cf 92       	push	r12
    570c:	df 92       	push	r13
    570e:	ef 92       	push	r14
    5710:	ff 92       	push	r15
    5712:	0f 93       	push	r16
    5714:	1f 93       	push	r17
    5716:	cf 93       	push	r28
    5718:	df 93       	push	r29
    571a:	ec 01       	movw	r28, r24
    571c:	5b 01       	movw	r10, r22
    571e:	4a 01       	movw	r8, r20
    5720:	8d 81       	ldd	r24, Y+5	; 0x05
    5722:	81 11       	cpse	r24, r1
    5724:	03 c0       	rjmp	.+6      	; 0x572c <_ZN6SdFile4readEPvj+0x36>
    5726:	8f ef       	ldi	r24, 0xFF	; 255
    5728:	9f ef       	ldi	r25, 0xFF	; 255
    572a:	d4 c0       	rjmp	.+424    	; 0x58d4 <_ZN6SdFile4readEPvj+0x1de>
    572c:	8c 81       	ldd	r24, Y+4	; 0x04
    572e:	80 ff       	sbrs	r24, 0
    5730:	fa cf       	rjmp	.-12     	; 0x5726 <_ZN6SdFile4readEPvj+0x30>
    5732:	4b 88       	ldd	r4, Y+19	; 0x13
    5734:	5c 88       	ldd	r5, Y+20	; 0x14
    5736:	6d 88       	ldd	r6, Y+21	; 0x15
    5738:	7e 88       	ldd	r7, Y+22	; 0x16
    573a:	4a 85       	ldd	r20, Y+10	; 0x0a
    573c:	5b 85       	ldd	r21, Y+11	; 0x0b
    573e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5740:	7d 85       	ldd	r23, Y+13	; 0x0d
    5742:	c4 01       	movw	r24, r8
    5744:	a0 e0       	ldi	r26, 0x00	; 0
    5746:	b0 e0       	ldi	r27, 0x00	; 0
    5748:	93 01       	movw	r18, r6
    574a:	82 01       	movw	r16, r4
    574c:	04 1b       	sub	r16, r20
    574e:	15 0b       	sbc	r17, r21
    5750:	26 0b       	sbc	r18, r22
    5752:	37 0b       	sbc	r19, r23
    5754:	08 17       	cp	r16, r24
    5756:	19 07       	cpc	r17, r25
    5758:	2a 07       	cpc	r18, r26
    575a:	3b 07       	cpc	r19, r27
    575c:	18 f4       	brcc	.+6      	; 0x5764 <_ZN6SdFile4readEPvj+0x6e>
    575e:	42 01       	movw	r8, r4
    5760:	84 1a       	sub	r8, r20
    5762:	95 0a       	sbc	r9, r21
    5764:	24 01       	movw	r4, r8
    5766:	1e 01       	movw	r2, r28
    5768:	26 e0       	ldi	r18, 0x06	; 6
    576a:	22 0e       	add	r2, r18
    576c:	31 1c       	adc	r3, r1
    576e:	41 14       	cp	r4, r1
    5770:	51 04       	cpc	r5, r1
    5772:	09 f4       	brne	.+2      	; 0x5776 <_ZN6SdFile4readEPvj+0x80>
    5774:	7d c0       	rjmp	.+250    	; 0x5870 <_ZN6SdFile4readEPvj+0x17a>
    5776:	4a 85       	ldd	r20, Y+10	; 0x0a
    5778:	5b 85       	ldd	r21, Y+11	; 0x0b
    577a:	6c 85       	ldd	r22, Y+12	; 0x0c
    577c:	7d 85       	ldd	r23, Y+13	; 0x0d
    577e:	6a 01       	movw	r12, r20
    5780:	81 e0       	ldi	r24, 0x01	; 1
    5782:	d8 22       	and	r13, r24
    5784:	ed 81       	ldd	r30, Y+5	; 0x05
    5786:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5788:	9c 8d       	ldd	r25, Y+28	; 0x1c
    578a:	8a 01       	movw	r16, r20
    578c:	9b 01       	movw	r18, r22
    578e:	f9 e0       	ldi	r31, 0x09	; 9
    5790:	36 95       	lsr	r19
    5792:	27 95       	ror	r18
    5794:	17 95       	ror	r17
    5796:	07 95       	ror	r16
    5798:	fa 95       	dec	r31
    579a:	d1 f7       	brne	.-12     	; 0x5790 <_ZN6SdFile4readEPvj+0x9a>
    579c:	e2 30       	cpi	r30, 0x02	; 2
    579e:	61 f4       	brne	.+24     	; 0x57b8 <_ZN6SdFile4readEPvj+0xc2>
    57a0:	fc 01       	movw	r30, r24
    57a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    57a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    57a6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    57a8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    57aa:	bc 01       	movw	r22, r24
    57ac:	cd 01       	movw	r24, r26
    57ae:	60 0f       	add	r22, r16
    57b0:	71 1f       	adc	r23, r17
    57b2:	82 1f       	adc	r24, r18
    57b4:	93 1f       	adc	r25, r19
    57b6:	3e c0       	rjmp	.+124    	; 0x5834 <_ZN6SdFile4readEPvj+0x13e>
    57b8:	fc 01       	movw	r30, r24
    57ba:	74 80       	ldd	r7, Z+4	; 0x04
    57bc:	7a 94       	dec	r7
    57be:	70 22       	and	r7, r16
    57c0:	c1 14       	cp	r12, r1
    57c2:	d1 04       	cpc	r13, r1
    57c4:	c1 f4       	brne	.+48     	; 0x57f6 <_ZN6SdFile4readEPvj+0x100>
    57c6:	71 10       	cpse	r7, r1
    57c8:	16 c0       	rjmp	.+44     	; 0x57f6 <_ZN6SdFile4readEPvj+0x100>
    57ca:	45 2b       	or	r20, r21
    57cc:	46 2b       	or	r20, r22
    57ce:	47 2b       	or	r20, r23
    57d0:	49 f4       	brne	.+18     	; 0x57e4 <_ZN6SdFile4readEPvj+0xee>
    57d2:	8f 89       	ldd	r24, Y+23	; 0x17
    57d4:	98 8d       	ldd	r25, Y+24	; 0x18
    57d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    57d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    57da:	8e 83       	std	Y+6, r24	; 0x06
    57dc:	9f 83       	std	Y+7, r25	; 0x07
    57de:	a8 87       	std	Y+8, r26	; 0x08
    57e0:	b9 87       	std	Y+9, r27	; 0x09
    57e2:	09 c0       	rjmp	.+18     	; 0x57f6 <_ZN6SdFile4readEPvj+0x100>
    57e4:	4e 81       	ldd	r20, Y+6	; 0x06
    57e6:	5f 81       	ldd	r21, Y+7	; 0x07
    57e8:	68 85       	ldd	r22, Y+8	; 0x08
    57ea:	79 85       	ldd	r23, Y+9	; 0x09
    57ec:	91 01       	movw	r18, r2
    57ee:	87 d3       	rcall	.+1806   	; 0x5efe <_ZNK8SdVolume6fatGetEmPm>
    57f0:	88 23       	and	r24, r24
    57f2:	09 f4       	brne	.+2      	; 0x57f6 <_ZN6SdFile4readEPvj+0x100>
    57f4:	98 cf       	rjmp	.-208    	; 0x5726 <_ZN6SdFile4readEPvj+0x30>
    57f6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    57f8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    57fa:	8e 81       	ldd	r24, Y+6	; 0x06
    57fc:	9f 81       	ldd	r25, Y+7	; 0x07
    57fe:	a8 85       	ldd	r26, Y+8	; 0x08
    5800:	b9 85       	ldd	r27, Y+9	; 0x09
    5802:	02 97       	sbiw	r24, 0x02	; 2
    5804:	a1 09       	sbc	r26, r1
    5806:	b1 09       	sbc	r27, r1
    5808:	05 84       	ldd	r0, Z+13	; 0x0d
    580a:	04 c0       	rjmp	.+8      	; 0x5814 <_ZN6SdFile4readEPvj+0x11e>
    580c:	88 0f       	add	r24, r24
    580e:	99 1f       	adc	r25, r25
    5810:	aa 1f       	adc	r26, r26
    5812:	bb 1f       	adc	r27, r27
    5814:	0a 94       	dec	r0
    5816:	d2 f7       	brpl	.-12     	; 0x580c <_ZN6SdFile4readEPvj+0x116>
    5818:	46 85       	ldd	r20, Z+14	; 0x0e
    581a:	57 85       	ldd	r21, Z+15	; 0x0f
    581c:	60 89       	ldd	r22, Z+16	; 0x10
    581e:	71 89       	ldd	r23, Z+17	; 0x11
    5820:	84 0f       	add	r24, r20
    5822:	95 1f       	adc	r25, r21
    5824:	a6 1f       	adc	r26, r22
    5826:	b7 1f       	adc	r27, r23
    5828:	bc 01       	movw	r22, r24
    582a:	cd 01       	movw	r24, r26
    582c:	67 0d       	add	r22, r7
    582e:	71 1d       	adc	r23, r1
    5830:	81 1d       	adc	r24, r1
    5832:	91 1d       	adc	r25, r1
    5834:	20 e0       	ldi	r18, 0x00	; 0
    5836:	32 e0       	ldi	r19, 0x02	; 2
    5838:	2c 19       	sub	r18, r12
    583a:	3d 09       	sbc	r19, r13
    583c:	32 01       	movw	r6, r4
    583e:	24 15       	cp	r18, r4
    5840:	35 05       	cpc	r19, r5
    5842:	08 f4       	brcc	.+2      	; 0x5846 <_ZN6SdFile4readEPvj+0x150>
    5844:	39 01       	movw	r6, r18
    5846:	2c 81       	ldd	r18, Y+4	; 0x04
    5848:	26 fd       	sbrc	r18, 6
    584a:	04 c0       	rjmp	.+8      	; 0x5854 <_ZN6SdFile4readEPvj+0x15e>
    584c:	61 14       	cp	r6, r1
    584e:	f2 e0       	ldi	r31, 0x02	; 2
    5850:	7f 06       	cpc	r7, r31
    5852:	71 f5       	brne	.+92     	; 0x58b0 <_ZN6SdFile4readEPvj+0x1ba>
    5854:	00 91 17 02 	lds	r16, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5858:	10 91 18 02 	lds	r17, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    585c:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5860:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5864:	60 17       	cp	r22, r16
    5866:	71 07       	cpc	r23, r17
    5868:	82 07       	cpc	r24, r18
    586a:	93 07       	cpc	r25, r19
    586c:	19 f4       	brne	.+6      	; 0x5874 <_ZN6SdFile4readEPvj+0x17e>
    586e:	20 c0       	rjmp	.+64     	; 0x58b0 <_ZN6SdFile4readEPvj+0x1ba>
    5870:	c4 01       	movw	r24, r8
    5872:	30 c0       	rjmp	.+96     	; 0x58d4 <_ZN6SdFile4readEPvj+0x1de>
    5874:	75 01       	movw	r14, r10
    5876:	83 01       	movw	r16, r6
    5878:	96 01       	movw	r18, r12
    587a:	ab 01       	movw	r20, r22
    587c:	bc 01       	movw	r22, r24
    587e:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <_ZN8SdVolume7sdCard_E>
    5882:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <_ZN8SdVolume7sdCard_E+0x1>
    5886:	14 de       	rcall	.-984    	; 0x54b0 <_ZN7Sd2Card8readDataEmjjPh>
    5888:	88 23       	and	r24, r24
    588a:	09 f4       	brne	.+2      	; 0x588e <_ZN6SdFile4readEPvj+0x198>
    588c:	4c cf       	rjmp	.-360    	; 0x5726 <_ZN6SdFile4readEPvj+0x30>
    588e:	a6 0c       	add	r10, r6
    5890:	b7 1c       	adc	r11, r7
    5892:	8a 85       	ldd	r24, Y+10	; 0x0a
    5894:	9b 85       	ldd	r25, Y+11	; 0x0b
    5896:	ac 85       	ldd	r26, Y+12	; 0x0c
    5898:	bd 85       	ldd	r27, Y+13	; 0x0d
    589a:	86 0d       	add	r24, r6
    589c:	97 1d       	adc	r25, r7
    589e:	a1 1d       	adc	r26, r1
    58a0:	b1 1d       	adc	r27, r1
    58a2:	8a 87       	std	Y+10, r24	; 0x0a
    58a4:	9b 87       	std	Y+11, r25	; 0x0b
    58a6:	ac 87       	std	Y+12, r26	; 0x0c
    58a8:	bd 87       	std	Y+13, r27	; 0x0d
    58aa:	46 18       	sub	r4, r6
    58ac:	57 08       	sbc	r5, r7
    58ae:	5f cf       	rjmp	.-322    	; 0x576e <_ZN6SdFile4readEPvj+0x78>
    58b0:	40 e0       	ldi	r20, 0x00	; 0
    58b2:	ec d2       	rcall	.+1496   	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    58b4:	88 23       	and	r24, r24
    58b6:	09 f4       	brne	.+2      	; 0x58ba <_ZN6SdFile4readEPvj+0x1c4>
    58b8:	36 cf       	rjmp	.-404    	; 0x5726 <_ZN6SdFile4readEPvj+0x30>
    58ba:	f6 01       	movw	r30, r12
    58bc:	e8 50       	subi	r30, 0x08	; 8
    58be:	f7 4f       	sbci	r31, 0xF7	; 247
    58c0:	d5 01       	movw	r26, r10
    58c2:	cf 01       	movw	r24, r30
    58c4:	86 0d       	add	r24, r6
    58c6:	97 1d       	adc	r25, r7
    58c8:	8e 17       	cp	r24, r30
    58ca:	9f 07       	cpc	r25, r31
    58cc:	01 f3       	breq	.-64     	; 0x588e <_ZN6SdFile4readEPvj+0x198>
    58ce:	21 91       	ld	r18, Z+
    58d0:	2d 93       	st	X+, r18
    58d2:	fa cf       	rjmp	.-12     	; 0x58c8 <_ZN6SdFile4readEPvj+0x1d2>
    58d4:	df 91       	pop	r29
    58d6:	cf 91       	pop	r28
    58d8:	1f 91       	pop	r17
    58da:	0f 91       	pop	r16
    58dc:	ff 90       	pop	r15
    58de:	ef 90       	pop	r14
    58e0:	df 90       	pop	r13
    58e2:	cf 90       	pop	r12
    58e4:	bf 90       	pop	r11
    58e6:	af 90       	pop	r10
    58e8:	9f 90       	pop	r9
    58ea:	8f 90       	pop	r8
    58ec:	7f 90       	pop	r7
    58ee:	6f 90       	pop	r6
    58f0:	5f 90       	pop	r5
    58f2:	4f 90       	pop	r4
    58f4:	3f 90       	pop	r3
    58f6:	2f 90       	pop	r2
    58f8:	08 95       	ret

000058fa <_ZN6SdFile7seekSetEm>:
    58fa:	8f 92       	push	r8
    58fc:	9f 92       	push	r9
    58fe:	af 92       	push	r10
    5900:	bf 92       	push	r11
    5902:	cf 92       	push	r12
    5904:	df 92       	push	r13
    5906:	ef 92       	push	r14
    5908:	ff 92       	push	r15
    590a:	0f 93       	push	r16
    590c:	1f 93       	push	r17
    590e:	cf 93       	push	r28
    5910:	df 93       	push	r29
    5912:	ec 01       	movw	r28, r24
    5914:	8d 81       	ldd	r24, Y+5	; 0x05
    5916:	81 11       	cpse	r24, r1
    5918:	02 c0       	rjmp	.+4      	; 0x591e <_ZN6SdFile7seekSetEm+0x24>
    591a:	80 e0       	ldi	r24, 0x00	; 0
    591c:	77 c0       	rjmp	.+238    	; 0x5a0c <_ZN6SdFile7seekSetEm+0x112>
    591e:	0b 89       	ldd	r16, Y+19	; 0x13
    5920:	1c 89       	ldd	r17, Y+20	; 0x14
    5922:	2d 89       	ldd	r18, Y+21	; 0x15
    5924:	3e 89       	ldd	r19, Y+22	; 0x16
    5926:	04 17       	cp	r16, r20
    5928:	15 07       	cpc	r17, r21
    592a:	26 07       	cpc	r18, r22
    592c:	37 07       	cpc	r19, r23
    592e:	a8 f3       	brcs	.-22     	; 0x591a <_ZN6SdFile7seekSetEm+0x20>
    5930:	6a 01       	movw	r12, r20
    5932:	7b 01       	movw	r14, r22
    5934:	82 30       	cpi	r24, 0x02	; 2
    5936:	29 f4       	brne	.+10     	; 0x5942 <_ZN6SdFile7seekSetEm+0x48>
    5938:	ca 86       	std	Y+10, r12	; 0x0a
    593a:	db 86       	std	Y+11, r13	; 0x0b
    593c:	ec 86       	std	Y+12, r14	; 0x0c
    593e:	fd 86       	std	Y+13, r15	; 0x0d
    5940:	0d c0       	rjmp	.+26     	; 0x595c <_ZN6SdFile7seekSetEm+0x62>
    5942:	c1 14       	cp	r12, r1
    5944:	d1 04       	cpc	r13, r1
    5946:	e1 04       	cpc	r14, r1
    5948:	f1 04       	cpc	r15, r1
    594a:	51 f4       	brne	.+20     	; 0x5960 <_ZN6SdFile7seekSetEm+0x66>
    594c:	1e 82       	std	Y+6, r1	; 0x06
    594e:	1f 82       	std	Y+7, r1	; 0x07
    5950:	18 86       	std	Y+8, r1	; 0x08
    5952:	19 86       	std	Y+9, r1	; 0x09
    5954:	1a 86       	std	Y+10, r1	; 0x0a
    5956:	1b 86       	std	Y+11, r1	; 0x0b
    5958:	1c 86       	std	Y+12, r1	; 0x0c
    595a:	1d 86       	std	Y+13, r1	; 0x0d
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	56 c0       	rjmp	.+172    	; 0x5a0c <_ZN6SdFile7seekSetEm+0x112>
    5960:	8a 84       	ldd	r8, Y+10	; 0x0a
    5962:	9b 84       	ldd	r9, Y+11	; 0x0b
    5964:	ac 84       	ldd	r10, Y+12	; 0x0c
    5966:	bd 84       	ldd	r11, Y+13	; 0x0d
    5968:	eb 8d       	ldd	r30, Y+27	; 0x1b
    596a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    596c:	25 85       	ldd	r18, Z+13	; 0x0d
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	27 5f       	subi	r18, 0xF7	; 247
    5972:	3f 4f       	sbci	r19, 0xFF	; 255
    5974:	b5 01       	movw	r22, r10
    5976:	a4 01       	movw	r20, r8
    5978:	41 50       	subi	r20, 0x01	; 1
    597a:	51 09       	sbc	r21, r1
    597c:	61 09       	sbc	r22, r1
    597e:	71 09       	sbc	r23, r1
    5980:	02 2e       	mov	r0, r18
    5982:	04 c0       	rjmp	.+8      	; 0x598c <_ZN6SdFile7seekSetEm+0x92>
    5984:	76 95       	lsr	r23
    5986:	67 95       	ror	r22
    5988:	57 95       	ror	r21
    598a:	47 95       	ror	r20
    598c:	0a 94       	dec	r0
    598e:	d2 f7       	brpl	.-12     	; 0x5984 <_ZN6SdFile7seekSetEm+0x8a>
    5990:	d7 01       	movw	r26, r14
    5992:	c6 01       	movw	r24, r12
    5994:	01 97       	sbiw	r24, 0x01	; 1
    5996:	a1 09       	sbc	r26, r1
    5998:	b1 09       	sbc	r27, r1
    599a:	04 c0       	rjmp	.+8      	; 0x59a4 <_ZN6SdFile7seekSetEm+0xaa>
    599c:	b6 95       	lsr	r27
    599e:	a7 95       	ror	r26
    59a0:	97 95       	ror	r25
    59a2:	87 95       	ror	r24
    59a4:	2a 95       	dec	r18
    59a6:	d2 f7       	brpl	.-12     	; 0x599c <_ZN6SdFile7seekSetEm+0xa2>
    59a8:	84 17       	cp	r24, r20
    59aa:	95 07       	cpc	r25, r21
    59ac:	a6 07       	cpc	r26, r22
    59ae:	b7 07       	cpc	r27, r23
    59b0:	20 f0       	brcs	.+8      	; 0x59ba <_ZN6SdFile7seekSetEm+0xc0>
    59b2:	89 28       	or	r8, r9
    59b4:	8a 28       	or	r8, r10
    59b6:	8b 28       	or	r8, r11
    59b8:	71 f4       	brne	.+28     	; 0x59d6 <_ZN6SdFile7seekSetEm+0xdc>
    59ba:	4f 89       	ldd	r20, Y+23	; 0x17
    59bc:	58 8d       	ldd	r21, Y+24	; 0x18
    59be:	69 8d       	ldd	r22, Y+25	; 0x19
    59c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59c2:	4e 83       	std	Y+6, r20	; 0x06
    59c4:	5f 83       	std	Y+7, r21	; 0x07
    59c6:	68 87       	std	Y+8, r22	; 0x08
    59c8:	79 87       	std	Y+9, r23	; 0x09
    59ca:	4c 01       	movw	r8, r24
    59cc:	5d 01       	movw	r10, r26
    59ce:	8e 01       	movw	r16, r28
    59d0:	0a 5f       	subi	r16, 0xFA	; 250
    59d2:	1f 4f       	sbci	r17, 0xFF	; 255
    59d4:	15 c0       	rjmp	.+42     	; 0x5a00 <_ZN6SdFile7seekSetEm+0x106>
    59d6:	84 1b       	sub	r24, r20
    59d8:	95 0b       	sbc	r25, r21
    59da:	a6 0b       	sbc	r26, r22
    59dc:	b7 0b       	sbc	r27, r23
    59de:	f5 cf       	rjmp	.-22     	; 0x59ca <_ZN6SdFile7seekSetEm+0xd0>
    59e0:	4e 81       	ldd	r20, Y+6	; 0x06
    59e2:	5f 81       	ldd	r21, Y+7	; 0x07
    59e4:	68 85       	ldd	r22, Y+8	; 0x08
    59e6:	79 85       	ldd	r23, Y+9	; 0x09
    59e8:	98 01       	movw	r18, r16
    59ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59ee:	87 d2       	rcall	.+1294   	; 0x5efe <_ZNK8SdVolume6fatGetEmPm>
    59f0:	91 e0       	ldi	r25, 0x01	; 1
    59f2:	89 1a       	sub	r8, r25
    59f4:	91 08       	sbc	r9, r1
    59f6:	a1 08       	sbc	r10, r1
    59f8:	b1 08       	sbc	r11, r1
    59fa:	88 23       	and	r24, r24
    59fc:	09 f4       	brne	.+2      	; 0x5a00 <_ZN6SdFile7seekSetEm+0x106>
    59fe:	8d cf       	rjmp	.-230    	; 0x591a <_ZN6SdFile7seekSetEm+0x20>
    5a00:	81 14       	cp	r8, r1
    5a02:	91 04       	cpc	r9, r1
    5a04:	a1 04       	cpc	r10, r1
    5a06:	b1 04       	cpc	r11, r1
    5a08:	59 f7       	brne	.-42     	; 0x59e0 <_ZN6SdFile7seekSetEm+0xe6>
    5a0a:	96 cf       	rjmp	.-212    	; 0x5938 <_ZN6SdFile7seekSetEm+0x3e>
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	1f 91       	pop	r17
    5a12:	0f 91       	pop	r16
    5a14:	ff 90       	pop	r15
    5a16:	ef 90       	pop	r14
    5a18:	df 90       	pop	r13
    5a1a:	cf 90       	pop	r12
    5a1c:	bf 90       	pop	r11
    5a1e:	af 90       	pop	r10
    5a20:	9f 90       	pop	r9
    5a22:	8f 90       	pop	r8
    5a24:	08 95       	ret

00005a26 <_ZN6SdFile4syncEv>:
    5a26:	0f 93       	push	r16
    5a28:	1f 93       	push	r17
    5a2a:	cf 93       	push	r28
    5a2c:	df 93       	push	r29
    5a2e:	ec 01       	movw	r28, r24
    5a30:	8d 81       	ldd	r24, Y+5	; 0x05
    5a32:	88 23       	and	r24, r24
    5a34:	b9 f1       	breq	.+110    	; 0x5aa4 <_ZN6SdFile4syncEv+0x7e>
    5a36:	8c 81       	ldd	r24, Y+4	; 0x04
    5a38:	87 ff       	sbrs	r24, 7
    5a3a:	2f c0       	rjmp	.+94     	; 0x5a9a <_ZN6SdFile4syncEv+0x74>
    5a3c:	61 e0       	ldi	r22, 0x01	; 1
    5a3e:	ce 01       	movw	r24, r28
    5a40:	f2 dd       	rcall	.-1052   	; 0x5626 <_ZN6SdFile13cacheDirEntryEh>
    5a42:	8c 01       	movw	r16, r24
    5a44:	89 2b       	or	r24, r25
    5a46:	71 f1       	breq	.+92     	; 0x5aa4 <_ZN6SdFile4syncEv+0x7e>
    5a48:	8d 81       	ldd	r24, Y+5	; 0x05
    5a4a:	82 30       	cpi	r24, 0x02	; 2
    5a4c:	48 f4       	brcc	.+18     	; 0x5a60 <_ZN6SdFile4syncEv+0x3a>
    5a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a50:	9c 89       	ldd	r25, Y+20	; 0x14
    5a52:	ad 89       	ldd	r26, Y+21	; 0x15
    5a54:	be 89       	ldd	r27, Y+22	; 0x16
    5a56:	f8 01       	movw	r30, r16
    5a58:	84 8f       	std	Z+28, r24	; 0x1c
    5a5a:	95 8f       	std	Z+29, r25	; 0x1d
    5a5c:	a6 8f       	std	Z+30, r26	; 0x1e
    5a5e:	b7 8f       	std	Z+31, r27	; 0x1f
    5a60:	8f 89       	ldd	r24, Y+23	; 0x17
    5a62:	98 8d       	ldd	r25, Y+24	; 0x18
    5a64:	a9 8d       	ldd	r26, Y+25	; 0x19
    5a66:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5a68:	f8 01       	movw	r30, r16
    5a6a:	93 8f       	std	Z+27, r25	; 0x1b
    5a6c:	82 8f       	std	Z+26, r24	; 0x1a
    5a6e:	b5 8b       	std	Z+21, r27	; 0x15
    5a70:	a4 8b       	std	Z+20, r26	; 0x14
    5a72:	e0 91 ef 08 	lds	r30, 0x08EF	; 0x8008ef <_ZN6SdFile9dateTime_E>
    5a76:	f0 91 f0 08 	lds	r31, 0x08F0	; 0x8008f0 <_ZN6SdFile9dateTime_E+0x1>
    5a7a:	30 97       	sbiw	r30, 0x00	; 0
    5a7c:	59 f0       	breq	.+22     	; 0x5a94 <_ZN6SdFile4syncEv+0x6e>
    5a7e:	b8 01       	movw	r22, r16
    5a80:	6a 5e       	subi	r22, 0xEA	; 234
    5a82:	7f 4f       	sbci	r23, 0xFF	; 255
    5a84:	c8 01       	movw	r24, r16
    5a86:	48 96       	adiw	r24, 0x18	; 24
    5a88:	19 95       	eicall
    5a8a:	f8 01       	movw	r30, r16
    5a8c:	80 8d       	ldd	r24, Z+24	; 0x18
    5a8e:	91 8d       	ldd	r25, Z+25	; 0x19
    5a90:	93 8b       	std	Z+19, r25	; 0x13
    5a92:	82 8b       	std	Z+18, r24	; 0x12
    5a94:	8c 81       	ldd	r24, Y+4	; 0x04
    5a96:	8f 77       	andi	r24, 0x7F	; 127
    5a98:	8c 83       	std	Y+4, r24	; 0x04
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	1f 91       	pop	r17
    5aa0:	0f 91       	pop	r16
    5aa2:	bb c1       	rjmp	.+886    	; 0x5e1a <_ZN8SdVolume10cacheFlushEv>
    5aa4:	80 e0       	ldi	r24, 0x00	; 0
    5aa6:	df 91       	pop	r29
    5aa8:	cf 91       	pop	r28
    5aaa:	1f 91       	pop	r17
    5aac:	0f 91       	pop	r16
    5aae:	08 95       	ret

00005ab0 <_ZN6SdFile5closeEv>:
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29
    5ab4:	ec 01       	movw	r28, r24
    5ab6:	b7 df       	rcall	.-146    	; 0x5a26 <_ZN6SdFile4syncEv>
    5ab8:	88 23       	and	r24, r24
    5aba:	11 f0       	breq	.+4      	; 0x5ac0 <_ZN6SdFile5closeEv+0x10>
    5abc:	1d 82       	std	Y+5, r1	; 0x05
    5abe:	81 e0       	ldi	r24, 0x01	; 1
    5ac0:	df 91       	pop	r29
    5ac2:	cf 91       	pop	r28
    5ac4:	08 95       	ret

00005ac6 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    5ac6:	2f 92       	push	r2
    5ac8:	3f 92       	push	r3
    5aca:	4f 92       	push	r4
    5acc:	5f 92       	push	r5
    5ace:	6f 92       	push	r6
    5ad0:	7f 92       	push	r7
    5ad2:	8f 92       	push	r8
    5ad4:	9f 92       	push	r9
    5ad6:	af 92       	push	r10
    5ad8:	bf 92       	push	r11
    5ada:	cf 92       	push	r12
    5adc:	df 92       	push	r13
    5ade:	ef 92       	push	r14
    5ae0:	ff 92       	push	r15
    5ae2:	0f 93       	push	r16
    5ae4:	1f 93       	push	r17
    5ae6:	cf 93       	push	r28
    5ae8:	df 93       	push	r29
    5aea:	00 d0       	rcall	.+0      	; 0x5aec <_ZN6SdFile5writeEPKvj+0x26>
    5aec:	1f 92       	push	r1
    5aee:	cd b7       	in	r28, 0x3d	; 61
    5af0:	de b7       	in	r29, 0x3e	; 62
    5af2:	8c 01       	movw	r16, r24
    5af4:	6b 01       	movw	r12, r22
    5af6:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    5af8:	dc 01       	movw	r26, r24
    5afa:	15 96       	adiw	r26, 0x05	; 5
    5afc:	8c 91       	ld	r24, X
    5afe:	15 97       	sbiw	r26, 0x05	; 5
    5b00:	81 30       	cpi	r24, 0x01	; 1
    5b02:	c1 f4       	brne	.+48     	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>
    5b04:	14 96       	adiw	r26, 0x04	; 4
    5b06:	8c 91       	ld	r24, X
    5b08:	81 ff       	sbrs	r24, 1
    5b0a:	14 c0       	rjmp	.+40     	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    5b0c:	82 ff       	sbrs	r24, 2
    5b0e:	1c c0       	rjmp	.+56     	; 0x5b48 <_ZN6SdFile5writeEPKvj+0x82>
    5b10:	f8 01       	movw	r30, r16
    5b12:	43 89       	ldd	r20, Z+19	; 0x13
    5b14:	54 89       	ldd	r21, Z+20	; 0x14
    5b16:	65 89       	ldd	r22, Z+21	; 0x15
    5b18:	76 89       	ldd	r23, Z+22	; 0x16
    5b1a:	82 85       	ldd	r24, Z+10	; 0x0a
    5b1c:	93 85       	ldd	r25, Z+11	; 0x0b
    5b1e:	a4 85       	ldd	r26, Z+12	; 0x0c
    5b20:	b5 85       	ldd	r27, Z+13	; 0x0d
    5b22:	84 17       	cp	r24, r20
    5b24:	95 07       	cpc	r25, r21
    5b26:	a6 07       	cpc	r26, r22
    5b28:	b7 07       	cpc	r27, r23
    5b2a:	71 f0       	breq	.+28     	; 0x5b48 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    5b2c:	c8 01       	movw	r24, r16
    5b2e:	e5 de       	rcall	.-566    	; 0x58fa <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    5b30:	81 11       	cpse	r24, r1
    5b32:	0a c0       	rjmp	.+20     	; 0x5b48 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	d8 01       	movw	r26, r16
    5b3a:	13 96       	adiw	r26, 0x03	; 3
    5b3c:	9c 93       	st	X, r25
    5b3e:	8e 93       	st	-X, r24
    5b40:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    5b42:	80 e0       	ldi	r24, 0x00	; 0
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	42 c1       	rjmp	.+644    	; 0x5dcc <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    5b48:	41 01       	movw	r8, r2
    5b4a:	82 c0       	rjmp	.+260    	; 0x5c50 <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    5b4c:	5b 96       	adiw	r26, 0x1b	; 27
    5b4e:	8d 91       	ld	r24, X+
    5b50:	9c 91       	ld	r25, X
    5b52:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    5b54:	fc 01       	movw	r30, r24
    5b56:	74 80       	ldd	r7, Z+4	; 0x04
    5b58:	2f ef       	ldi	r18, 0xFF	; 255
    5b5a:	27 0d       	add	r18, r7
    5b5c:	2a 01       	movw	r4, r20
    5b5e:	3b 01       	movw	r6, r22
    5b60:	39 e0       	ldi	r19, 0x09	; 9
    5b62:	76 94       	lsr	r7
    5b64:	67 94       	ror	r6
    5b66:	57 94       	ror	r5
    5b68:	47 94       	ror	r4
    5b6a:	3a 95       	dec	r19
    5b6c:	d1 f7       	brne	.-12     	; 0x5b62 <_ZN6SdFile5writeEPKvj+0x9c>
    5b6e:	72 2e       	mov	r7, r18
    5b70:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    5b72:	7a 01       	movw	r14, r20
    5b74:	f1 e0       	ldi	r31, 0x01	; 1
    5b76:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    5b78:	77 20       	and	r7, r7
    5b7a:	09 f4       	brne	.+2      	; 0x5b7e <_ZN6SdFile5writeEPKvj+0xb8>
    5b7c:	75 c0       	rjmp	.+234    	; 0x5c68 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    5b7e:	80 e0       	ldi	r24, 0x00	; 0
    5b80:	92 e0       	ldi	r25, 0x02	; 2
    5b82:	8e 19       	sub	r24, r14
    5b84:	9f 09       	sbc	r25, r15
    5b86:	54 01       	movw	r10, r8
    5b88:	88 15       	cp	r24, r8
    5b8a:	99 05       	cpc	r25, r9
    5b8c:	08 f4       	brcc	.+2      	; 0x5b90 <_ZN6SdFile5writeEPKvj+0xca>
    5b8e:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    5b90:	d8 01       	movw	r26, r16
    5b92:	5b 96       	adiw	r26, 0x1b	; 27
    5b94:	2d 91       	ld	r18, X+
    5b96:	3c 91       	ld	r19, X
    5b98:	5c 97       	sbiw	r26, 0x1c	; 28
    5b9a:	16 96       	adiw	r26, 0x06	; 6
    5b9c:	8d 91       	ld	r24, X+
    5b9e:	9d 91       	ld	r25, X+
    5ba0:	0d 90       	ld	r0, X+
    5ba2:	bc 91       	ld	r27, X
    5ba4:	a0 2d       	mov	r26, r0
    5ba6:	02 97       	sbiw	r24, 0x02	; 2
    5ba8:	a1 09       	sbc	r26, r1
    5baa:	b1 09       	sbc	r27, r1
    5bac:	f9 01       	movw	r30, r18
    5bae:	05 84       	ldd	r0, Z+13	; 0x0d
    5bb0:	04 c0       	rjmp	.+8      	; 0x5bba <_ZN6SdFile5writeEPKvj+0xf4>
    5bb2:	88 0f       	add	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	aa 1f       	adc	r26, r26
    5bb8:	bb 1f       	adc	r27, r27
    5bba:	0a 94       	dec	r0
    5bbc:	d2 f7       	brpl	.-12     	; 0x5bb2 <_ZN6SdFile5writeEPKvj+0xec>
    5bbe:	46 85       	ldd	r20, Z+14	; 0x0e
    5bc0:	57 85       	ldd	r21, Z+15	; 0x0f
    5bc2:	60 89       	ldd	r22, Z+16	; 0x10
    5bc4:	71 89       	ldd	r23, Z+17	; 0x11
    5bc6:	84 0f       	add	r24, r20
    5bc8:	95 1f       	adc	r25, r21
    5bca:	a6 1f       	adc	r26, r22
    5bcc:	b7 1f       	adc	r27, r23
    5bce:	9c 01       	movw	r18, r24
    5bd0:	ad 01       	movw	r20, r26
    5bd2:	27 0d       	add	r18, r7
    5bd4:	31 1d       	adc	r19, r1
    5bd6:	41 1d       	adc	r20, r1
    5bd8:	51 1d       	adc	r21, r1
    5bda:	29 01       	movw	r4, r18
    5bdc:	3a 01       	movw	r6, r20
    if (n == 512) {
    5bde:	a1 14       	cp	r10, r1
    5be0:	32 e0       	ldi	r19, 0x02	; 2
    5be2:	b3 06       	cpc	r11, r19
    5be4:	09 f0       	breq	.+2      	; 0x5be8 <_ZN6SdFile5writeEPKvj+0x122>
    5be6:	85 c0       	rjmp	.+266    	; 0x5cf2 <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    5be8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5bec:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5bf0:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5bf4:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5bf8:	48 16       	cp	r4, r24
    5bfa:	59 06       	cpc	r5, r25
    5bfc:	6a 06       	cpc	r6, r26
    5bfe:	7b 06       	cpc	r7, r27
    5c00:	59 f4       	brne	.+22     	; 0x5c18 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    5c02:	8f ef       	ldi	r24, 0xFF	; 255
    5c04:	9f ef       	ldi	r25, 0xFF	; 255
    5c06:	dc 01       	movw	r26, r24
    5c08:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5c0c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5c10:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5c14:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    5c18:	96 01       	movw	r18, r12
    5c1a:	b3 01       	movw	r22, r6
    5c1c:	a2 01       	movw	r20, r4
    5c1e:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <_ZN8SdVolume7sdCard_E>
    5c22:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <_ZN8SdVolume7sdCard_E+0x1>
    5c26:	8c dc       	rcall	.-1768   	; 0x5540 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    5c28:	88 23       	and	r24, r24
    5c2a:	09 f4       	brne	.+2      	; 0x5c2e <_ZN6SdFile5writeEPKvj+0x168>
    5c2c:	83 cf       	rjmp	.-250    	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    5c2e:	9e ef       	ldi	r25, 0xFE	; 254
    5c30:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    5c32:	8a 18       	sub	r8, r10
    5c34:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    5c36:	f8 01       	movw	r30, r16
    5c38:	82 85       	ldd	r24, Z+10	; 0x0a
    5c3a:	93 85       	ldd	r25, Z+11	; 0x0b
    5c3c:	a4 85       	ldd	r26, Z+12	; 0x0c
    5c3e:	b5 85       	ldd	r27, Z+13	; 0x0d
    5c40:	8a 0d       	add	r24, r10
    5c42:	9b 1d       	adc	r25, r11
    5c44:	a1 1d       	adc	r26, r1
    5c46:	b1 1d       	adc	r27, r1
    5c48:	82 87       	std	Z+10, r24	; 0x0a
    5c4a:	93 87       	std	Z+11, r25	; 0x0b
    5c4c:	a4 87       	std	Z+12, r26	; 0x0c
    5c4e:	b5 87       	std	Z+13, r27	; 0x0d
    5c50:	d8 01       	movw	r26, r16
    5c52:	1a 96       	adiw	r26, 0x0a	; 10
    5c54:	4d 91       	ld	r20, X+
    5c56:	5d 91       	ld	r21, X+
    5c58:	6d 91       	ld	r22, X+
    5c5a:	7c 91       	ld	r23, X
    5c5c:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    5c5e:	81 14       	cp	r8, r1
    5c60:	91 04       	cpc	r9, r1
    5c62:	09 f0       	breq	.+2      	; 0x5c66 <_ZN6SdFile5writeEPKvj+0x1a0>
    5c64:	73 cf       	rjmp	.-282    	; 0x5b4c <_ZN6SdFile5writeEPKvj+0x86>
    5c66:	83 c0       	rjmp	.+262    	; 0x5d6e <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    5c68:	e1 14       	cp	r14, r1
    5c6a:	f1 04       	cpc	r15, r1
    5c6c:	09 f0       	breq	.+2      	; 0x5c70 <_ZN6SdFile5writeEPKvj+0x1aa>
    5c6e:	87 cf       	rjmp	.-242    	; 0x5b7e <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    5c70:	16 96       	adiw	r26, 0x06	; 6
    5c72:	4d 91       	ld	r20, X+
    5c74:	5d 91       	ld	r21, X+
    5c76:	6d 91       	ld	r22, X+
    5c78:	7c 91       	ld	r23, X
    5c7a:	19 97       	sbiw	r26, 0x09	; 9
    5c7c:	41 15       	cp	r20, r1
    5c7e:	51 05       	cpc	r21, r1
    5c80:	61 05       	cpc	r22, r1
    5c82:	71 05       	cpc	r23, r1
    5c84:	59 f4       	brne	.+22     	; 0x5c9c <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    5c86:	57 96       	adiw	r26, 0x17	; 23
    5c88:	8d 91       	ld	r24, X+
    5c8a:	9d 91       	ld	r25, X+
    5c8c:	0d 90       	ld	r0, X+
    5c8e:	bc 91       	ld	r27, X
    5c90:	a0 2d       	mov	r26, r0
    5c92:	00 97       	sbiw	r24, 0x00	; 0
    5c94:	a1 05       	cpc	r26, r1
    5c96:	b1 05       	cpc	r27, r1
    5c98:	31 f5       	brne	.+76     	; 0x5ce6 <_ZN6SdFile5writeEPKvj+0x220>
    5c9a:	20 c0       	rjmp	.+64     	; 0x5cdc <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    5c9c:	9e 01       	movw	r18, r28
    5c9e:	2f 5f       	subi	r18, 0xFF	; 255
    5ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca2:	2d d1       	rcall	.+602    	; 0x5efe <_ZNK8SdVolume6fatGetEmPm>
    5ca4:	88 23       	and	r24, r24
    5ca6:	09 f4       	brne	.+2      	; 0x5caa <_ZN6SdFile5writeEPKvj+0x1e4>
    5ca8:	4d cf       	rjmp	.-358    	; 0x5b44 <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	9a 81       	ldd	r25, Y+2	; 0x02
    5cae:	ab 81       	ldd	r26, Y+3	; 0x03
    5cb0:	bc 81       	ldd	r27, Y+4	; 0x04
    5cb2:	f8 01       	movw	r30, r16
    5cb4:	23 8d       	ldd	r18, Z+27	; 0x1b
    5cb6:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    5cb8:	f9 01       	movw	r30, r18
    5cba:	27 89       	ldd	r18, Z+23	; 0x17
    5cbc:	20 31       	cpi	r18, 0x10	; 16
    5cbe:	29 f0       	breq	.+10     	; 0x5cca <_ZN6SdFile5writeEPKvj+0x204>
    5cc0:	48 ef       	ldi	r20, 0xF8	; 248
    5cc2:	5f ef       	ldi	r21, 0xFF	; 255
    5cc4:	6f ef       	ldi	r22, 0xFF	; 255
    5cc6:	7f e0       	ldi	r23, 0x0F	; 15
    5cc8:	04 c0       	rjmp	.+8      	; 0x5cd2 <_ZN6SdFile5writeEPKvj+0x20c>
    5cca:	48 ef       	ldi	r20, 0xF8	; 248
    5ccc:	5f ef       	ldi	r21, 0xFF	; 255
    5cce:	60 e0       	ldi	r22, 0x00	; 0
    5cd0:	70 e0       	ldi	r23, 0x00	; 0
    5cd2:	84 17       	cp	r24, r20
    5cd4:	95 07       	cpc	r25, r21
    5cd6:	a6 07       	cpc	r26, r22
    5cd8:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    5cda:	28 f0       	brcs	.+10     	; 0x5ce6 <_ZN6SdFile5writeEPKvj+0x220>
    5cdc:	c8 01       	movw	r24, r16
    5cde:	7d dc       	rcall	.-1798   	; 0x55da <_ZN6SdFile10addClusterEv>
    5ce0:	81 11       	cpse	r24, r1
    5ce2:	4d cf       	rjmp	.-358    	; 0x5b7e <_ZN6SdFile5writeEPKvj+0xb8>
    5ce4:	27 cf       	rjmp	.-434    	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    5ce6:	f8 01       	movw	r30, r16
    5ce8:	86 83       	std	Z+6, r24	; 0x06
    5cea:	97 83       	std	Z+7, r25	; 0x07
    5cec:	a0 87       	std	Z+8, r26	; 0x08
    5cee:	b1 87       	std	Z+9, r27	; 0x09
    5cf0:	46 cf       	rjmp	.-372    	; 0x5b7e <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    5cf2:	e1 14       	cp	r14, r1
    5cf4:	f1 04       	cpc	r15, r1
    5cf6:	21 f5       	brne	.+72     	; 0x5d40 <_ZN6SdFile5writeEPKvj+0x27a>
    5cf8:	d8 01       	movw	r26, r16
    5cfa:	1a 96       	adiw	r26, 0x0a	; 10
    5cfc:	4d 91       	ld	r20, X+
    5cfe:	5d 91       	ld	r21, X+
    5d00:	6d 91       	ld	r22, X+
    5d02:	7c 91       	ld	r23, X
    5d04:	1d 97       	sbiw	r26, 0x0d	; 13
    5d06:	53 96       	adiw	r26, 0x13	; 19
    5d08:	8d 91       	ld	r24, X+
    5d0a:	9d 91       	ld	r25, X+
    5d0c:	0d 90       	ld	r0, X+
    5d0e:	bc 91       	ld	r27, X
    5d10:	a0 2d       	mov	r26, r0
    5d12:	48 17       	cp	r20, r24
    5d14:	59 07       	cpc	r21, r25
    5d16:	6a 07       	cpc	r22, r26
    5d18:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    5d1a:	90 f0       	brcs	.+36     	; 0x5d40 <_ZN6SdFile5writeEPKvj+0x27a>
    5d1c:	7e d0       	rcall	.+252    	; 0x5e1a <_ZN8SdVolume10cacheFlushEv>
    5d1e:	88 23       	and	r24, r24
    5d20:	09 f4       	brne	.+2      	; 0x5d24 <_ZN6SdFile5writeEPKvj+0x25e>
    5d22:	08 cf       	rjmp	.-496    	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    5d24:	40 92 17 02 	sts	0x0217, r4	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5d28:	50 92 18 02 	sts	0x0218, r5	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5d2c:	60 92 19 02 	sts	0x0219, r6	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5d30:	70 92 1a 02 	sts	0x021A, r7	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    5d34:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    5d38:	81 60       	ori	r24, 0x01	; 1
    5d3a:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    5d3e:	07 c0       	rjmp	.+14     	; 0x5d4e <_ZN6SdFile5writeEPKvj+0x288>
    5d40:	41 e0       	ldi	r20, 0x01	; 1
    5d42:	c3 01       	movw	r24, r6
    5d44:	b2 01       	movw	r22, r4
    5d46:	a2 d0       	rcall	.+324    	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    5d48:	88 23       	and	r24, r24
    5d4a:	09 f4       	brne	.+2      	; 0x5d4e <_ZN6SdFile5writeEPKvj+0x288>
    5d4c:	f3 ce       	rjmp	.-538    	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>
    5d4e:	d6 01       	movw	r26, r12
    5d50:	f7 01       	movw	r30, r14
    5d52:	e8 50       	subi	r30, 0x08	; 8
    5d54:	f7 4f       	sbci	r31, 0xF7	; 247
    5d56:	9f 01       	movw	r18, r30
    5d58:	2a 0d       	add	r18, r10
    5d5a:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    5d5c:	2e 17       	cp	r18, r30
    5d5e:	3f 07       	cpc	r19, r31
    5d60:	19 f0       	breq	.+6      	; 0x5d68 <_ZN6SdFile5writeEPKvj+0x2a2>
    5d62:	8d 91       	ld	r24, X+
    5d64:	81 93       	st	Z+, r24
    5d66:	fa cf       	rjmp	.-12     	; 0x5d5c <_ZN6SdFile5writeEPKvj+0x296>
    5d68:	ca 0c       	add	r12, r10
    5d6a:	db 1c       	adc	r13, r11
    5d6c:	62 cf       	rjmp	.-316    	; 0x5c32 <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    5d6e:	d8 01       	movw	r26, r16
    5d70:	53 96       	adiw	r26, 0x13	; 19
    5d72:	cd 90       	ld	r12, X+
    5d74:	dd 90       	ld	r13, X+
    5d76:	ed 90       	ld	r14, X+
    5d78:	fc 90       	ld	r15, X
    5d7a:	56 97       	sbiw	r26, 0x16	; 22
    5d7c:	14 96       	adiw	r26, 0x04	; 4
    5d7e:	8c 91       	ld	r24, X
    5d80:	c4 16       	cp	r12, r20
    5d82:	d5 06       	cpc	r13, r21
    5d84:	e6 06       	cpc	r14, r22
    5d86:	f7 06       	cpc	r15, r23
    5d88:	40 f4       	brcc	.+16     	; 0x5d9a <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    5d8a:	f8 01       	movw	r30, r16
    5d8c:	43 8b       	std	Z+19, r20	; 0x13
    5d8e:	54 8b       	std	Z+20, r21	; 0x14
    5d90:	65 8b       	std	Z+21, r22	; 0x15
    5d92:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    5d94:	80 68       	ori	r24, 0x80	; 128
    5d96:	84 83       	std	Z+4, r24	; 0x04
    5d98:	0d c0       	rjmp	.+26     	; 0x5db4 <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    5d9a:	20 91 ef 08 	lds	r18, 0x08EF	; 0x8008ef <_ZN6SdFile9dateTime_E>
    5d9e:	30 91 f0 08 	lds	r19, 0x08F0	; 0x8008f0 <_ZN6SdFile9dateTime_E+0x1>
    5da2:	23 2b       	or	r18, r19
    5da4:	39 f0       	breq	.+14     	; 0x5db4 <_ZN6SdFile5writeEPKvj+0x2ee>
    5da6:	21 14       	cp	r2, r1
    5da8:	31 04       	cpc	r3, r1
    5daa:	21 f0       	breq	.+8      	; 0x5db4 <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    5dac:	80 68       	ori	r24, 0x80	; 128
    5dae:	d8 01       	movw	r26, r16
    5db0:	14 96       	adiw	r26, 0x04	; 4
    5db2:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    5db4:	f8 01       	movw	r30, r16
    5db6:	84 81       	ldd	r24, Z+4	; 0x04
    5db8:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    5dba:	02 c0       	rjmp	.+4      	; 0x5dc0 <_ZN6SdFile5writeEPKvj+0x2fa>
    5dbc:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    5dbe:	06 c0       	rjmp	.+12     	; 0x5dcc <_ZN6SdFile5writeEPKvj+0x306>
    5dc0:	c8 01       	movw	r24, r16
    5dc2:	31 de       	rcall	.-926    	; 0x5a26 <_ZN6SdFile4syncEv>
    5dc4:	88 23       	and	r24, r24
    5dc6:	09 f4       	brne	.+2      	; 0x5dca <_ZN6SdFile5writeEPKvj+0x304>
    5dc8:	b5 ce       	rjmp	.-662    	; 0x5b34 <_ZN6SdFile5writeEPKvj+0x6e>
    5dca:	f8 cf       	rjmp	.-16     	; 0x5dbc <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    5dcc:	0f 90       	pop	r0
    5dce:	0f 90       	pop	r0
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	df 91       	pop	r29
    5dd6:	cf 91       	pop	r28
    5dd8:	1f 91       	pop	r17
    5dda:	0f 91       	pop	r16
    5ddc:	ff 90       	pop	r15
    5dde:	ef 90       	pop	r14
    5de0:	df 90       	pop	r13
    5de2:	cf 90       	pop	r12
    5de4:	bf 90       	pop	r11
    5de6:	af 90       	pop	r10
    5de8:	9f 90       	pop	r9
    5dea:	8f 90       	pop	r8
    5dec:	7f 90       	pop	r7
    5dee:	6f 90       	pop	r6
    5df0:	5f 90       	pop	r5
    5df2:	4f 90       	pop	r4
    5df4:	3f 90       	pop	r3
    5df6:	2f 90       	pop	r2
    5df8:	08 95       	ret

00005dfa <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	1f 92       	push	r1
    5e00:	cd b7       	in	r28, 0x3d	; 61
    5e02:	de b7       	in	r29, 0x3e	; 62
    5e04:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    5e06:	41 e0       	ldi	r20, 0x01	; 1
    5e08:	50 e0       	ldi	r21, 0x00	; 0
    5e0a:	be 01       	movw	r22, r28
    5e0c:	6f 5f       	subi	r22, 0xFF	; 255
    5e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e10:	5a de       	rcall	.-844    	; 0x5ac6 <_ZN6SdFile5writeEPKvj>
}
    5e12:	0f 90       	pop	r0
    5e14:	df 91       	pop	r29
    5e16:	cf 91       	pop	r28
    5e18:	08 95       	ret

00005e1a <_ZN8SdVolume10cacheFlushEv>:

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    5e1a:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    5e1e:	88 23       	and	r24, r24
    5e20:	99 f1       	breq	.+102    	; 0x5e88 <_ZN8SdVolume10cacheFlushEv+0x6e>
    5e22:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5e26:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5e2a:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5e2e:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5e32:	28 ef       	ldi	r18, 0xF8	; 248
    5e34:	38 e0       	ldi	r19, 0x08	; 8
    5e36:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <_ZN8SdVolume7sdCard_E>
    5e3a:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <_ZN8SdVolume7sdCard_E+0x1>
    5e3e:	80 db       	rcall	.-2304   	; 0x5540 <_ZN7Sd2Card10writeBlockEmPKh>
    5e40:	81 11       	cpse	r24, r1
    5e42:	02 c0       	rjmp	.+4      	; 0x5e48 <_ZN8SdVolume10cacheFlushEv+0x2e>
    5e44:	80 e0       	ldi	r24, 0x00	; 0
    5e46:	08 95       	ret
    5e48:	40 91 f1 08 	lds	r20, 0x08F1	; 0x8008f1 <_ZN8SdVolume17cacheMirrorBlock_E>
    5e4c:	50 91 f2 08 	lds	r21, 0x08F2	; 0x8008f2 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    5e50:	60 91 f3 08 	lds	r22, 0x08F3	; 0x8008f3 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    5e54:	70 91 f4 08 	lds	r23, 0x08F4	; 0x8008f4 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    5e58:	41 15       	cp	r20, r1
    5e5a:	51 05       	cpc	r21, r1
    5e5c:	61 05       	cpc	r22, r1
    5e5e:	71 05       	cpc	r23, r1
    5e60:	89 f0       	breq	.+34     	; 0x5e84 <_ZN8SdVolume10cacheFlushEv+0x6a>
    5e62:	28 ef       	ldi	r18, 0xF8	; 248
    5e64:	38 e0       	ldi	r19, 0x08	; 8
    5e66:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <_ZN8SdVolume7sdCard_E>
    5e6a:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <_ZN8SdVolume7sdCard_E+0x1>
    5e6e:	68 db       	rcall	.-2352   	; 0x5540 <_ZN7Sd2Card10writeBlockEmPKh>
    5e70:	88 23       	and	r24, r24
    5e72:	41 f3       	breq	.-48     	; 0x5e44 <_ZN8SdVolume10cacheFlushEv+0x2a>
    5e74:	10 92 f1 08 	sts	0x08F1, r1	; 0x8008f1 <_ZN8SdVolume17cacheMirrorBlock_E>
    5e78:	10 92 f2 08 	sts	0x08F2, r1	; 0x8008f2 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    5e7c:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    5e80:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    5e84:	10 92 f5 08 	sts	0x08F5, r1	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    5e88:	81 e0       	ldi	r24, 0x01	; 1
    5e8a:	08 95       	ret

00005e8c <_ZN8SdVolume13cacheRawBlockEmh>:
    5e8c:	cf 92       	push	r12
    5e8e:	df 92       	push	r13
    5e90:	ef 92       	push	r14
    5e92:	ff 92       	push	r15
    5e94:	cf 93       	push	r28
    5e96:	6b 01       	movw	r12, r22
    5e98:	7c 01       	movw	r14, r24
    5e9a:	c4 2f       	mov	r28, r20
    5e9c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5ea0:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5ea4:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5ea8:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5eac:	8c 15       	cp	r24, r12
    5eae:	9d 05       	cpc	r25, r13
    5eb0:	ae 05       	cpc	r26, r14
    5eb2:	bf 05       	cpc	r27, r15
    5eb4:	c1 f0       	breq	.+48     	; 0x5ee6 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    5eb6:	b1 df       	rcall	.-158    	; 0x5e1a <_ZN8SdVolume10cacheFlushEv>
    5eb8:	81 11       	cpse	r24, r1
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    5ebc:	80 e0       	ldi	r24, 0x00	; 0
    5ebe:	19 c0       	rjmp	.+50     	; 0x5ef2 <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    5ec0:	28 ef       	ldi	r18, 0xF8	; 248
    5ec2:	38 e0       	ldi	r19, 0x08	; 8
    5ec4:	b7 01       	movw	r22, r14
    5ec6:	a6 01       	movw	r20, r12
    5ec8:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <_ZN8SdVolume7sdCard_E>
    5ecc:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <_ZN8SdVolume7sdCard_E+0x1>
    5ed0:	fe da       	rcall	.-2564   	; 0x54ce <_ZN7Sd2Card9readBlockEmPh>
    5ed2:	88 23       	and	r24, r24
    5ed4:	99 f3       	breq	.-26     	; 0x5ebc <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    5ed6:	c0 92 17 02 	sts	0x0217, r12	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5eda:	d0 92 18 02 	sts	0x0218, r13	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5ede:	e0 92 19 02 	sts	0x0219, r14	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5ee2:	f0 92 1a 02 	sts	0x021A, r15	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5ee6:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    5eea:	c8 2b       	or	r28, r24
    5eec:	c0 93 f5 08 	sts	0x08F5, r28	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    5ef0:	81 e0       	ldi	r24, 0x01	; 1
    5ef2:	cf 91       	pop	r28
    5ef4:	ff 90       	pop	r15
    5ef6:	ef 90       	pop	r14
    5ef8:	df 90       	pop	r13
    5efa:	cf 90       	pop	r12
    5efc:	08 95       	ret

00005efe <_ZNK8SdVolume6fatGetEmPm>:
    5efe:	8f 92       	push	r8
    5f00:	9f 92       	push	r9
    5f02:	af 92       	push	r10
    5f04:	bf 92       	push	r11
    5f06:	cf 92       	push	r12
    5f08:	df 92       	push	r13
    5f0a:	ef 92       	push	r14
    5f0c:	ff 92       	push	r15
    5f0e:	0f 93       	push	r16
    5f10:	1f 93       	push	r17
    5f12:	cf 93       	push	r28
    5f14:	df 93       	push	r29
    5f16:	fc 01       	movw	r30, r24
    5f18:	81 85       	ldd	r24, Z+9	; 0x09
    5f1a:	92 85       	ldd	r25, Z+10	; 0x0a
    5f1c:	a3 85       	ldd	r26, Z+11	; 0x0b
    5f1e:	b4 85       	ldd	r27, Z+12	; 0x0c
    5f20:	01 96       	adiw	r24, 0x01	; 1
    5f22:	a1 1d       	adc	r26, r1
    5f24:	b1 1d       	adc	r27, r1
    5f26:	84 17       	cp	r24, r20
    5f28:	95 07       	cpc	r25, r21
    5f2a:	a6 07       	cpc	r26, r22
    5f2c:	b7 07       	cpc	r27, r23
    5f2e:	10 f4       	brcc	.+4      	; 0x5f34 <_ZNK8SdVolume6fatGetEmPm+0x36>
    5f30:	80 e0       	ldi	r24, 0x00	; 0
    5f32:	5a c0       	rjmp	.+180    	; 0x5fe8 <_ZNK8SdVolume6fatGetEmPm+0xea>
    5f34:	83 88       	ldd	r8, Z+19	; 0x13
    5f36:	94 88       	ldd	r9, Z+20	; 0x14
    5f38:	a5 88       	ldd	r10, Z+21	; 0x15
    5f3a:	b6 88       	ldd	r11, Z+22	; 0x16
    5f3c:	87 89       	ldd	r24, Z+23	; 0x17
    5f3e:	80 31       	cpi	r24, 0x10	; 16
    5f40:	29 f4       	brne	.+10     	; 0x5f4c <_ZNK8SdVolume6fatGetEmPm+0x4e>
    5f42:	bb 27       	eor	r27, r27
    5f44:	a7 2f       	mov	r26, r23
    5f46:	96 2f       	mov	r25, r22
    5f48:	85 2f       	mov	r24, r21
    5f4a:	09 c0       	rjmp	.+18     	; 0x5f5e <_ZNK8SdVolume6fatGetEmPm+0x60>
    5f4c:	db 01       	movw	r26, r22
    5f4e:	ca 01       	movw	r24, r20
    5f50:	c7 e0       	ldi	r28, 0x07	; 7
    5f52:	b6 95       	lsr	r27
    5f54:	a7 95       	ror	r26
    5f56:	97 95       	ror	r25
    5f58:	87 95       	ror	r24
    5f5a:	ca 95       	dec	r28
    5f5c:	d1 f7       	brne	.-12     	; 0x5f52 <_ZNK8SdVolume6fatGetEmPm+0x54>
    5f5e:	e9 01       	movw	r28, r18
    5f60:	6a 01       	movw	r12, r20
    5f62:	7b 01       	movw	r14, r22
    5f64:	8f 01       	movw	r16, r30
    5f66:	bc 01       	movw	r22, r24
    5f68:	cd 01       	movw	r24, r26
    5f6a:	68 0d       	add	r22, r8
    5f6c:	79 1d       	adc	r23, r9
    5f6e:	8a 1d       	adc	r24, r10
    5f70:	9b 1d       	adc	r25, r11
    5f72:	80 90 17 02 	lds	r8, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    5f76:	90 90 18 02 	lds	r9, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    5f7a:	a0 90 19 02 	lds	r10, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    5f7e:	b0 90 1a 02 	lds	r11, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    5f82:	68 15       	cp	r22, r8
    5f84:	79 05       	cpc	r23, r9
    5f86:	8a 05       	cpc	r24, r10
    5f88:	9b 05       	cpc	r25, r11
    5f8a:	91 f4       	brne	.+36     	; 0x5fb0 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    5f8c:	f8 01       	movw	r30, r16
    5f8e:	87 89       	ldd	r24, Z+23	; 0x17
    5f90:	80 31       	cpi	r24, 0x10	; 16
    5f92:	99 f4       	brne	.+38     	; 0x5fba <_ZNK8SdVolume6fatGetEmPm+0xbc>
    5f94:	dd 24       	eor	r13, r13
    5f96:	ee 24       	eor	r14, r14
    5f98:	ff 24       	eor	r15, r15
    5f9a:	c6 01       	movw	r24, r12
    5f9c:	88 0f       	add	r24, r24
    5f9e:	99 1f       	adc	r25, r25
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	e8 50       	subi	r30, 0x08	; 8
    5fa4:	f7 4f       	sbci	r31, 0xF7	; 247
    5fa6:	80 81       	ld	r24, Z
    5fa8:	91 81       	ldd	r25, Z+1	; 0x01
    5faa:	a0 e0       	ldi	r26, 0x00	; 0
    5fac:	b0 e0       	ldi	r27, 0x00	; 0
    5fae:	17 c0       	rjmp	.+46     	; 0x5fde <_ZNK8SdVolume6fatGetEmPm+0xe0>
    5fb0:	40 e0       	ldi	r20, 0x00	; 0
    5fb2:	6c df       	rcall	.-296    	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    5fb4:	81 11       	cpse	r24, r1
    5fb6:	ea cf       	rjmp	.-44     	; 0x5f8c <_ZNK8SdVolume6fatGetEmPm+0x8e>
    5fb8:	bb cf       	rjmp	.-138    	; 0x5f30 <_ZNK8SdVolume6fatGetEmPm+0x32>
    5fba:	e8 94       	clt
    5fbc:	c7 f8       	bld	r12, 7
    5fbe:	dd 24       	eor	r13, r13
    5fc0:	ee 24       	eor	r14, r14
    5fc2:	ff 24       	eor	r15, r15
    5fc4:	c6 01       	movw	r24, r12
    5fc6:	88 0f       	add	r24, r24
    5fc8:	99 1f       	adc	r25, r25
    5fca:	88 0f       	add	r24, r24
    5fcc:	99 1f       	adc	r25, r25
    5fce:	fc 01       	movw	r30, r24
    5fd0:	e8 50       	subi	r30, 0x08	; 8
    5fd2:	f7 4f       	sbci	r31, 0xF7	; 247
    5fd4:	80 81       	ld	r24, Z
    5fd6:	91 81       	ldd	r25, Z+1	; 0x01
    5fd8:	a2 81       	ldd	r26, Z+2	; 0x02
    5fda:	b3 81       	ldd	r27, Z+3	; 0x03
    5fdc:	bf 70       	andi	r27, 0x0F	; 15
    5fde:	88 83       	st	Y, r24
    5fe0:	99 83       	std	Y+1, r25	; 0x01
    5fe2:	aa 83       	std	Y+2, r26	; 0x02
    5fe4:	bb 83       	std	Y+3, r27	; 0x03
    5fe6:	81 e0       	ldi	r24, 0x01	; 1
    5fe8:	df 91       	pop	r29
    5fea:	cf 91       	pop	r28
    5fec:	1f 91       	pop	r17
    5fee:	0f 91       	pop	r16
    5ff0:	ff 90       	pop	r15
    5ff2:	ef 90       	pop	r14
    5ff4:	df 90       	pop	r13
    5ff6:	cf 90       	pop	r12
    5ff8:	bf 90       	pop	r11
    5ffa:	af 90       	pop	r10
    5ffc:	9f 90       	pop	r9
    5ffe:	8f 90       	pop	r8
    6000:	08 95       	ret

00006002 <_ZNK8SdVolume9chainSizeEmPm>:
    6002:	4f 92       	push	r4
    6004:	5f 92       	push	r5
    6006:	6f 92       	push	r6
    6008:	7f 92       	push	r7
    600a:	af 92       	push	r10
    600c:	bf 92       	push	r11
    600e:	cf 92       	push	r12
    6010:	df 92       	push	r13
    6012:	ef 92       	push	r14
    6014:	ff 92       	push	r15
    6016:	0f 93       	push	r16
    6018:	1f 93       	push	r17
    601a:	cf 93       	push	r28
    601c:	df 93       	push	r29
    601e:	00 d0       	rcall	.+0      	; 0x6020 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    6020:	1f 92       	push	r1
    6022:	cd b7       	in	r28, 0x3d	; 61
    6024:	de b7       	in	r29, 0x3e	; 62
    6026:	8c 01       	movw	r16, r24
    6028:	49 83       	std	Y+1, r20	; 0x01
    602a:	5a 83       	std	Y+2, r21	; 0x02
    602c:	6b 83       	std	Y+3, r22	; 0x03
    602e:	7c 83       	std	Y+4, r23	; 0x04
    6030:	59 01       	movw	r10, r18
    6032:	c1 2c       	mov	r12, r1
    6034:	d1 2c       	mov	r13, r1
    6036:	76 01       	movw	r14, r12
    6038:	41 2c       	mov	r4, r1
    603a:	82 e0       	ldi	r24, 0x02	; 2
    603c:	58 2e       	mov	r5, r24
    603e:	61 2c       	mov	r6, r1
    6040:	71 2c       	mov	r7, r1
    6042:	49 81       	ldd	r20, Y+1	; 0x01
    6044:	5a 81       	ldd	r21, Y+2	; 0x02
    6046:	6b 81       	ldd	r22, Y+3	; 0x03
    6048:	7c 81       	ldd	r23, Y+4	; 0x04
    604a:	9e 01       	movw	r18, r28
    604c:	2f 5f       	subi	r18, 0xFF	; 255
    604e:	3f 4f       	sbci	r19, 0xFF	; 255
    6050:	c8 01       	movw	r24, r16
    6052:	55 df       	rcall	.-342    	; 0x5efe <_ZNK8SdVolume6fatGetEmPm>
    6054:	88 23       	and	r24, r24
    6056:	51 f1       	breq	.+84     	; 0x60ac <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    6058:	d3 01       	movw	r26, r6
    605a:	c2 01       	movw	r24, r4
    605c:	f8 01       	movw	r30, r16
    605e:	05 84       	ldd	r0, Z+13	; 0x0d
    6060:	04 c0       	rjmp	.+8      	; 0x606a <_ZNK8SdVolume9chainSizeEmPm+0x68>
    6062:	88 0f       	add	r24, r24
    6064:	99 1f       	adc	r25, r25
    6066:	aa 1f       	adc	r26, r26
    6068:	bb 1f       	adc	r27, r27
    606a:	0a 94       	dec	r0
    606c:	d2 f7       	brpl	.-12     	; 0x6062 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    606e:	c8 0e       	add	r12, r24
    6070:	d9 1e       	adc	r13, r25
    6072:	ea 1e       	adc	r14, r26
    6074:	fb 1e       	adc	r15, r27
    6076:	49 81       	ldd	r20, Y+1	; 0x01
    6078:	5a 81       	ldd	r21, Y+2	; 0x02
    607a:	6b 81       	ldd	r22, Y+3	; 0x03
    607c:	7c 81       	ldd	r23, Y+4	; 0x04
    607e:	87 89       	ldd	r24, Z+23	; 0x17
    6080:	80 31       	cpi	r24, 0x10	; 16
    6082:	29 f0       	breq	.+10     	; 0x608e <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    6084:	88 ef       	ldi	r24, 0xF8	; 248
    6086:	9f ef       	ldi	r25, 0xFF	; 255
    6088:	af ef       	ldi	r26, 0xFF	; 255
    608a:	bf e0       	ldi	r27, 0x0F	; 15
    608c:	04 c0       	rjmp	.+8      	; 0x6096 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    608e:	88 ef       	ldi	r24, 0xF8	; 248
    6090:	9f ef       	ldi	r25, 0xFF	; 255
    6092:	a0 e0       	ldi	r26, 0x00	; 0
    6094:	b0 e0       	ldi	r27, 0x00	; 0
    6096:	48 17       	cp	r20, r24
    6098:	59 07       	cpc	r21, r25
    609a:	6a 07       	cpc	r22, r26
    609c:	7b 07       	cpc	r23, r27
    609e:	88 f2       	brcs	.-94     	; 0x6042 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    60a0:	f5 01       	movw	r30, r10
    60a2:	c0 82       	st	Z, r12
    60a4:	d1 82       	std	Z+1, r13	; 0x01
    60a6:	e2 82       	std	Z+2, r14	; 0x02
    60a8:	f3 82       	std	Z+3, r15	; 0x03
    60aa:	81 e0       	ldi	r24, 0x01	; 1
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	0f 90       	pop	r0
    60b2:	0f 90       	pop	r0
    60b4:	df 91       	pop	r29
    60b6:	cf 91       	pop	r28
    60b8:	1f 91       	pop	r17
    60ba:	0f 91       	pop	r16
    60bc:	ff 90       	pop	r15
    60be:	ef 90       	pop	r14
    60c0:	df 90       	pop	r13
    60c2:	cf 90       	pop	r12
    60c4:	bf 90       	pop	r11
    60c6:	af 90       	pop	r10
    60c8:	7f 90       	pop	r7
    60ca:	6f 90       	pop	r6
    60cc:	5f 90       	pop	r5
    60ce:	4f 90       	pop	r4
    60d0:	08 95       	ret

000060d2 <_ZN8SdVolume6fatPutEmm>:
    60d2:	4f 92       	push	r4
    60d4:	5f 92       	push	r5
    60d6:	6f 92       	push	r6
    60d8:	7f 92       	push	r7
    60da:	8f 92       	push	r8
    60dc:	9f 92       	push	r9
    60de:	af 92       	push	r10
    60e0:	bf 92       	push	r11
    60e2:	cf 92       	push	r12
    60e4:	df 92       	push	r13
    60e6:	ef 92       	push	r14
    60e8:	ff 92       	push	r15
    60ea:	0f 93       	push	r16
    60ec:	1f 93       	push	r17
    60ee:	cf 93       	push	r28
    60f0:	df 93       	push	r29
    60f2:	ec 01       	movw	r28, r24
    60f4:	42 30       	cpi	r20, 0x02	; 2
    60f6:	51 05       	cpc	r21, r1
    60f8:	61 05       	cpc	r22, r1
    60fa:	71 05       	cpc	r23, r1
    60fc:	10 f4       	brcc	.+4      	; 0x6102 <_ZN8SdVolume6fatPutEmm+0x30>
    60fe:	80 e0       	ldi	r24, 0x00	; 0
    6100:	77 c0       	rjmp	.+238    	; 0x61f0 <_ZN8SdVolume6fatPutEmm+0x11e>
    6102:	89 85       	ldd	r24, Y+9	; 0x09
    6104:	9a 85       	ldd	r25, Y+10	; 0x0a
    6106:	ab 85       	ldd	r26, Y+11	; 0x0b
    6108:	bc 85       	ldd	r27, Y+12	; 0x0c
    610a:	01 96       	adiw	r24, 0x01	; 1
    610c:	a1 1d       	adc	r26, r1
    610e:	b1 1d       	adc	r27, r1
    6110:	84 17       	cp	r24, r20
    6112:	95 07       	cpc	r25, r21
    6114:	a6 07       	cpc	r26, r22
    6116:	b7 07       	cpc	r27, r23
    6118:	90 f3       	brcs	.-28     	; 0x60fe <_ZN8SdVolume6fatPutEmm+0x2c>
    611a:	cb 88       	ldd	r12, Y+19	; 0x13
    611c:	dc 88       	ldd	r13, Y+20	; 0x14
    611e:	ed 88       	ldd	r14, Y+21	; 0x15
    6120:	fe 88       	ldd	r15, Y+22	; 0x16
    6122:	8f 89       	ldd	r24, Y+23	; 0x17
    6124:	80 31       	cpi	r24, 0x10	; 16
    6126:	29 f4       	brne	.+10     	; 0x6132 <_ZN8SdVolume6fatPutEmm+0x60>
    6128:	bb 27       	eor	r27, r27
    612a:	a7 2f       	mov	r26, r23
    612c:	96 2f       	mov	r25, r22
    612e:	85 2f       	mov	r24, r21
    6130:	09 c0       	rjmp	.+18     	; 0x6144 <_ZN8SdVolume6fatPutEmm+0x72>
    6132:	db 01       	movw	r26, r22
    6134:	ca 01       	movw	r24, r20
    6136:	e7 e0       	ldi	r30, 0x07	; 7
    6138:	b6 95       	lsr	r27
    613a:	a7 95       	ror	r26
    613c:	97 95       	ror	r25
    613e:	87 95       	ror	r24
    6140:	ea 95       	dec	r30
    6142:	d1 f7       	brne	.-12     	; 0x6138 <_ZN8SdVolume6fatPutEmm+0x66>
    6144:	48 01       	movw	r8, r16
    6146:	59 01       	movw	r10, r18
    6148:	2a 01       	movw	r4, r20
    614a:	3b 01       	movw	r6, r22
    614c:	c8 0e       	add	r12, r24
    614e:	d9 1e       	adc	r13, r25
    6150:	ea 1e       	adc	r14, r26
    6152:	fb 1e       	adc	r15, r27
    6154:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E>
    6158:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    615c:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    6160:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    6164:	c8 16       	cp	r12, r24
    6166:	d9 06       	cpc	r13, r25
    6168:	ea 06       	cpc	r14, r26
    616a:	fb 06       	cpc	r15, r27
    616c:	81 f4       	brne	.+32     	; 0x618e <_ZN8SdVolume6fatPutEmm+0xbc>
    616e:	8f 89       	ldd	r24, Y+23	; 0x17
    6170:	80 31       	cpi	r24, 0x10	; 16
    6172:	a1 f4       	brne	.+40     	; 0x619c <_ZN8SdVolume6fatPutEmm+0xca>
    6174:	b3 01       	movw	r22, r6
    6176:	a2 01       	movw	r20, r4
    6178:	55 27       	eor	r21, r21
    617a:	66 27       	eor	r22, r22
    617c:	77 27       	eor	r23, r23
    617e:	44 0f       	add	r20, r20
    6180:	55 1f       	adc	r21, r21
    6182:	fa 01       	movw	r30, r20
    6184:	e8 50       	subi	r30, 0x08	; 8
    6186:	f7 4f       	sbci	r31, 0xF7	; 247
    6188:	91 82       	std	Z+1, r9	; 0x01
    618a:	80 82       	st	Z, r8
    618c:	18 c0       	rjmp	.+48     	; 0x61be <_ZN8SdVolume6fatPutEmm+0xec>
    618e:	40 e0       	ldi	r20, 0x00	; 0
    6190:	c7 01       	movw	r24, r14
    6192:	b6 01       	movw	r22, r12
    6194:	7b de       	rcall	.-778    	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    6196:	81 11       	cpse	r24, r1
    6198:	ea cf       	rjmp	.-44     	; 0x616e <_ZN8SdVolume6fatPutEmm+0x9c>
    619a:	b1 cf       	rjmp	.-158    	; 0x60fe <_ZN8SdVolume6fatPutEmm+0x2c>
    619c:	b3 01       	movw	r22, r6
    619e:	a2 01       	movw	r20, r4
    61a0:	4f 77       	andi	r20, 0x7F	; 127
    61a2:	55 27       	eor	r21, r21
    61a4:	66 27       	eor	r22, r22
    61a6:	77 27       	eor	r23, r23
    61a8:	44 0f       	add	r20, r20
    61aa:	55 1f       	adc	r21, r21
    61ac:	44 0f       	add	r20, r20
    61ae:	55 1f       	adc	r21, r21
    61b0:	fa 01       	movw	r30, r20
    61b2:	e8 50       	subi	r30, 0x08	; 8
    61b4:	f7 4f       	sbci	r31, 0xF7	; 247
    61b6:	80 82       	st	Z, r8
    61b8:	91 82       	std	Z+1, r9	; 0x01
    61ba:	a2 82       	std	Z+2, r10	; 0x02
    61bc:	b3 82       	std	Z+3, r11	; 0x03
    61be:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    61c2:	81 60       	ori	r24, 0x01	; 1
    61c4:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <_ZN8SdVolume11cacheDirty_E>
    61c8:	8a 89       	ldd	r24, Y+18	; 0x12
    61ca:	82 30       	cpi	r24, 0x02	; 2
    61cc:	80 f0       	brcs	.+32     	; 0x61ee <_ZN8SdVolume6fatPutEmm+0x11c>
    61ce:	8d 81       	ldd	r24, Y+5	; 0x05
    61d0:	9e 81       	ldd	r25, Y+6	; 0x06
    61d2:	af 81       	ldd	r26, Y+7	; 0x07
    61d4:	b8 85       	ldd	r27, Y+8	; 0x08
    61d6:	c8 0e       	add	r12, r24
    61d8:	d9 1e       	adc	r13, r25
    61da:	ea 1e       	adc	r14, r26
    61dc:	fb 1e       	adc	r15, r27
    61de:	c0 92 f1 08 	sts	0x08F1, r12	; 0x8008f1 <_ZN8SdVolume17cacheMirrorBlock_E>
    61e2:	d0 92 f2 08 	sts	0x08F2, r13	; 0x8008f2 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    61e6:	e0 92 f3 08 	sts	0x08F3, r14	; 0x8008f3 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    61ea:	f0 92 f4 08 	sts	0x08F4, r15	; 0x8008f4 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    61ee:	81 e0       	ldi	r24, 0x01	; 1
    61f0:	df 91       	pop	r29
    61f2:	cf 91       	pop	r28
    61f4:	1f 91       	pop	r17
    61f6:	0f 91       	pop	r16
    61f8:	ff 90       	pop	r15
    61fa:	ef 90       	pop	r14
    61fc:	df 90       	pop	r13
    61fe:	cf 90       	pop	r12
    6200:	bf 90       	pop	r11
    6202:	af 90       	pop	r10
    6204:	9f 90       	pop	r9
    6206:	8f 90       	pop	r8
    6208:	7f 90       	pop	r7
    620a:	6f 90       	pop	r6
    620c:	5f 90       	pop	r5
    620e:	4f 90       	pop	r4
    6210:	08 95       	ret

00006212 <_ZN8SdVolume15allocContiguousEmPm>:
    6212:	2f 92       	push	r2
    6214:	3f 92       	push	r3
    6216:	4f 92       	push	r4
    6218:	5f 92       	push	r5
    621a:	6f 92       	push	r6
    621c:	7f 92       	push	r7
    621e:	9f 92       	push	r9
    6220:	af 92       	push	r10
    6222:	bf 92       	push	r11
    6224:	cf 92       	push	r12
    6226:	df 92       	push	r13
    6228:	ef 92       	push	r14
    622a:	ff 92       	push	r15
    622c:	0f 93       	push	r16
    622e:	1f 93       	push	r17
    6230:	cf 93       	push	r28
    6232:	df 93       	push	r29
    6234:	cd b7       	in	r28, 0x3d	; 61
    6236:	de b7       	in	r29, 0x3e	; 62
    6238:	60 97       	sbiw	r28, 0x10	; 16
    623a:	0f b6       	in	r0, 0x3f	; 63
    623c:	f8 94       	cli
    623e:	de bf       	out	0x3e, r29	; 62
    6240:	0f be       	out	0x3f, r0	; 63
    6242:	cd bf       	out	0x3d, r28	; 61
    6244:	5c 01       	movw	r10, r24
    6246:	49 87       	std	Y+9, r20	; 0x09
    6248:	5a 87       	std	Y+10, r21	; 0x0a
    624a:	6b 87       	std	Y+11, r22	; 0x0b
    624c:	7c 87       	std	Y+12, r23	; 0x0c
    624e:	19 01       	movw	r2, r18
    6250:	d9 01       	movw	r26, r18
    6252:	cd 90       	ld	r12, X+
    6254:	dd 90       	ld	r13, X+
    6256:	ed 90       	ld	r14, X+
    6258:	fc 90       	ld	r15, X
    625a:	c1 14       	cp	r12, r1
    625c:	d1 04       	cpc	r13, r1
    625e:	e1 04       	cpc	r14, r1
    6260:	f1 04       	cpc	r15, r1
    6262:	31 f0       	breq	.+12     	; 0x6270 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    6264:	bf ef       	ldi	r27, 0xFF	; 255
    6266:	cb 1a       	sub	r12, r27
    6268:	db 0a       	sbc	r13, r27
    626a:	eb 0a       	sbc	r14, r27
    626c:	fb 0a       	sbc	r15, r27
    626e:	10 c0       	rjmp	.+32     	; 0x6290 <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    6270:	fc 01       	movw	r30, r24
    6272:	c0 80       	ld	r12, Z
    6274:	d1 80       	ldd	r13, Z+1	; 0x01
    6276:	e2 80       	ldd	r14, Z+2	; 0x02
    6278:	f3 80       	ldd	r15, Z+3	; 0x03
    627a:	99 24       	eor	r9, r9
    627c:	93 94       	inc	r9
    627e:	09 85       	ldd	r16, Y+9	; 0x09
    6280:	1a 85       	ldd	r17, Y+10	; 0x0a
    6282:	2b 85       	ldd	r18, Y+11	; 0x0b
    6284:	3c 85       	ldd	r19, Y+12	; 0x0c
    6286:	01 30       	cpi	r16, 0x01	; 1
    6288:	11 05       	cpc	r17, r1
    628a:	21 05       	cpc	r18, r1
    628c:	31 05       	cpc	r19, r1
    628e:	09 f0       	breq	.+2      	; 0x6292 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    6290:	91 2c       	mov	r9, r1
    6292:	f5 01       	movw	r30, r10
    6294:	81 85       	ldd	r24, Z+9	; 0x09
    6296:	92 85       	ldd	r25, Z+10	; 0x0a
    6298:	a3 85       	ldd	r26, Z+11	; 0x0b
    629a:	b4 85       	ldd	r27, Z+12	; 0x0c
    629c:	8c 01       	movw	r16, r24
    629e:	9d 01       	movw	r18, r26
    62a0:	0f 5f       	subi	r16, 0xFF	; 255
    62a2:	1f 4f       	sbci	r17, 0xFF	; 255
    62a4:	2f 4f       	sbci	r18, 0xFF	; 255
    62a6:	3f 4f       	sbci	r19, 0xFF	; 255
    62a8:	0d 87       	std	Y+13, r16	; 0x0d
    62aa:	1e 87       	std	Y+14, r17	; 0x0e
    62ac:	2f 87       	std	Y+15, r18	; 0x0f
    62ae:	38 8b       	std	Y+16, r19	; 0x10
    62b0:	26 01       	movw	r4, r12
    62b2:	37 01       	movw	r6, r14
    62b4:	1d 82       	std	Y+5, r1	; 0x05
    62b6:	1e 82       	std	Y+6, r1	; 0x06
    62b8:	1f 82       	std	Y+7, r1	; 0x07
    62ba:	18 86       	std	Y+8, r1	; 0x08
    62bc:	f5 01       	movw	r30, r10
    62be:	81 85       	ldd	r24, Z+9	; 0x09
    62c0:	92 85       	ldd	r25, Z+10	; 0x0a
    62c2:	a3 85       	ldd	r26, Z+11	; 0x0b
    62c4:	b4 85       	ldd	r27, Z+12	; 0x0c
    62c6:	0d 81       	ldd	r16, Y+5	; 0x05
    62c8:	1e 81       	ldd	r17, Y+6	; 0x06
    62ca:	2f 81       	ldd	r18, Y+7	; 0x07
    62cc:	38 85       	ldd	r19, Y+8	; 0x08
    62ce:	08 17       	cp	r16, r24
    62d0:	19 07       	cpc	r17, r25
    62d2:	2a 07       	cpc	r18, r26
    62d4:	3b 07       	cpc	r19, r27
    62d6:	08 f0       	brcs	.+2      	; 0x62da <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    62d8:	54 c0       	rjmp	.+168    	; 0x6382 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    62da:	2d 85       	ldd	r18, Y+13	; 0x0d
    62dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    62de:	4f 85       	ldd	r20, Y+15	; 0x0f
    62e0:	58 89       	ldd	r21, Y+16	; 0x10
    62e2:	24 15       	cp	r18, r4
    62e4:	35 05       	cpc	r19, r5
    62e6:	46 05       	cpc	r20, r6
    62e8:	57 05       	cpc	r21, r7
    62ea:	50 f4       	brcc	.+20     	; 0x6300 <_ZN8SdVolume15allocContiguousEmPm+0xee>
    62ec:	82 e0       	ldi	r24, 0x02	; 2
    62ee:	48 2e       	mov	r4, r24
    62f0:	51 2c       	mov	r5, r1
    62f2:	61 2c       	mov	r6, r1
    62f4:	71 2c       	mov	r7, r1
    62f6:	92 e0       	ldi	r25, 0x02	; 2
    62f8:	c9 2e       	mov	r12, r25
    62fa:	d1 2c       	mov	r13, r1
    62fc:	e1 2c       	mov	r14, r1
    62fe:	f1 2c       	mov	r15, r1
    6300:	9e 01       	movw	r18, r28
    6302:	2f 5f       	subi	r18, 0xFF	; 255
    6304:	3f 4f       	sbci	r19, 0xFF	; 255
    6306:	b3 01       	movw	r22, r6
    6308:	a2 01       	movw	r20, r4
    630a:	c5 01       	movw	r24, r10
    630c:	f8 dd       	rcall	.-1040   	; 0x5efe <_ZNK8SdVolume6fatGetEmPm>
    630e:	88 23       	and	r24, r24
    6310:	c1 f1       	breq	.+112    	; 0x6382 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    6312:	49 81       	ldd	r20, Y+1	; 0x01
    6314:	5a 81       	ldd	r21, Y+2	; 0x02
    6316:	6b 81       	ldd	r22, Y+3	; 0x03
    6318:	7c 81       	ldd	r23, Y+4	; 0x04
    631a:	d3 01       	movw	r26, r6
    631c:	c2 01       	movw	r24, r4
    631e:	01 96       	adiw	r24, 0x01	; 1
    6320:	a1 1d       	adc	r26, r1
    6322:	b1 1d       	adc	r27, r1
    6324:	45 2b       	or	r20, r21
    6326:	46 2b       	or	r20, r22
    6328:	47 2b       	or	r20, r23
    632a:	19 f0       	breq	.+6      	; 0x6332 <_ZN8SdVolume15allocContiguousEmPm+0x120>
    632c:	6c 01       	movw	r12, r24
    632e:	7d 01       	movw	r14, r26
    6330:	0f c0       	rjmp	.+30     	; 0x6350 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    6332:	ac 01       	movw	r20, r24
    6334:	bd 01       	movw	r22, r26
    6336:	4c 19       	sub	r20, r12
    6338:	5d 09       	sbc	r21, r13
    633a:	6e 09       	sbc	r22, r14
    633c:	7f 09       	sbc	r23, r15
    633e:	09 85       	ldd	r16, Y+9	; 0x09
    6340:	1a 85       	ldd	r17, Y+10	; 0x0a
    6342:	2b 85       	ldd	r18, Y+11	; 0x0b
    6344:	3c 85       	ldd	r19, Y+12	; 0x0c
    6346:	04 17       	cp	r16, r20
    6348:	15 07       	cpc	r17, r21
    634a:	26 07       	cpc	r18, r22
    634c:	37 07       	cpc	r19, r23
    634e:	79 f0       	breq	.+30     	; 0x636e <_ZN8SdVolume15allocContiguousEmPm+0x15c>
    6350:	2d 81       	ldd	r18, Y+5	; 0x05
    6352:	3e 81       	ldd	r19, Y+6	; 0x06
    6354:	4f 81       	ldd	r20, Y+7	; 0x07
    6356:	58 85       	ldd	r21, Y+8	; 0x08
    6358:	2f 5f       	subi	r18, 0xFF	; 255
    635a:	3f 4f       	sbci	r19, 0xFF	; 255
    635c:	4f 4f       	sbci	r20, 0xFF	; 255
    635e:	5f 4f       	sbci	r21, 0xFF	; 255
    6360:	2d 83       	std	Y+5, r18	; 0x05
    6362:	3e 83       	std	Y+6, r19	; 0x06
    6364:	4f 83       	std	Y+7, r20	; 0x07
    6366:	58 87       	std	Y+8, r21	; 0x08
    6368:	2c 01       	movw	r4, r24
    636a:	3d 01       	movw	r6, r26
    636c:	a7 cf       	rjmp	.-178    	; 0x62bc <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    636e:	0f ef       	ldi	r16, 0xFF	; 255
    6370:	1f ef       	ldi	r17, 0xFF	; 255
    6372:	2f ef       	ldi	r18, 0xFF	; 255
    6374:	3f e0       	ldi	r19, 0x0F	; 15
    6376:	b3 01       	movw	r22, r6
    6378:	a2 01       	movw	r20, r4
    637a:	c5 01       	movw	r24, r10
    637c:	aa de       	rcall	.-684    	; 0x60d2 <_ZN8SdVolume6fatPutEmm>
    637e:	81 11       	cpse	r24, r1
    6380:	17 c0       	rjmp	.+46     	; 0x63b0 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	3f c0       	rjmp	.+126    	; 0x6404 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    6386:	d3 01       	movw	r26, r6
    6388:	c2 01       	movw	r24, r4
    638a:	01 97       	sbiw	r24, 0x01	; 1
    638c:	a1 09       	sbc	r26, r1
    638e:	b1 09       	sbc	r27, r1
    6390:	8d 83       	std	Y+5, r24	; 0x05
    6392:	9e 83       	std	Y+6, r25	; 0x06
    6394:	af 83       	std	Y+7, r26	; 0x07
    6396:	b8 87       	std	Y+8, r27	; 0x08
    6398:	93 01       	movw	r18, r6
    639a:	82 01       	movw	r16, r4
    639c:	ac 01       	movw	r20, r24
    639e:	bd 01       	movw	r22, r26
    63a0:	c5 01       	movw	r24, r10
    63a2:	97 de       	rcall	.-722    	; 0x60d2 <_ZN8SdVolume6fatPutEmm>
    63a4:	88 23       	and	r24, r24
    63a6:	69 f3       	breq	.-38     	; 0x6382 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    63a8:	4d 80       	ldd	r4, Y+5	; 0x05
    63aa:	5e 80       	ldd	r5, Y+6	; 0x06
    63ac:	6f 80       	ldd	r6, Y+7	; 0x07
    63ae:	78 84       	ldd	r7, Y+8	; 0x08
    63b0:	c4 14       	cp	r12, r4
    63b2:	d5 04       	cpc	r13, r5
    63b4:	e6 04       	cpc	r14, r6
    63b6:	f7 04       	cpc	r15, r7
    63b8:	30 f3       	brcs	.-52     	; 0x6386 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    63ba:	d1 01       	movw	r26, r2
    63bc:	4d 91       	ld	r20, X+
    63be:	5d 91       	ld	r21, X+
    63c0:	6d 91       	ld	r22, X+
    63c2:	7c 91       	ld	r23, X
    63c4:	41 15       	cp	r20, r1
    63c6:	51 05       	cpc	r21, r1
    63c8:	61 05       	cpc	r22, r1
    63ca:	71 05       	cpc	r23, r1
    63cc:	99 f4       	brne	.+38     	; 0x63f4 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    63ce:	f1 01       	movw	r30, r2
    63d0:	c0 82       	st	Z, r12
    63d2:	d1 82       	std	Z+1, r13	; 0x01
    63d4:	e2 82       	std	Z+2, r14	; 0x02
    63d6:	f3 82       	std	Z+3, r15	; 0x03
    63d8:	99 20       	and	r9, r9
    63da:	99 f0       	breq	.+38     	; 0x6402 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    63dc:	ff ef       	ldi	r31, 0xFF	; 255
    63de:	cf 1a       	sub	r12, r31
    63e0:	df 0a       	sbc	r13, r31
    63e2:	ef 0a       	sbc	r14, r31
    63e4:	ff 0a       	sbc	r15, r31
    63e6:	d5 01       	movw	r26, r10
    63e8:	cd 92       	st	X+, r12
    63ea:	dd 92       	st	X+, r13
    63ec:	ed 92       	st	X+, r14
    63ee:	fc 92       	st	X, r15
    63f0:	13 97       	sbiw	r26, 0x03	; 3
    63f2:	07 c0       	rjmp	.+14     	; 0x6402 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    63f4:	97 01       	movw	r18, r14
    63f6:	86 01       	movw	r16, r12
    63f8:	c5 01       	movw	r24, r10
    63fa:	6b de       	rcall	.-810    	; 0x60d2 <_ZN8SdVolume6fatPutEmm>
    63fc:	81 11       	cpse	r24, r1
    63fe:	e7 cf       	rjmp	.-50     	; 0x63ce <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    6400:	c0 cf       	rjmp	.-128    	; 0x6382 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	60 96       	adiw	r28, 0x10	; 16
    6406:	0f b6       	in	r0, 0x3f	; 63
    6408:	f8 94       	cli
    640a:	de bf       	out	0x3e, r29	; 62
    640c:	0f be       	out	0x3f, r0	; 63
    640e:	cd bf       	out	0x3d, r28	; 61
    6410:	df 91       	pop	r29
    6412:	cf 91       	pop	r28
    6414:	1f 91       	pop	r17
    6416:	0f 91       	pop	r16
    6418:	ff 90       	pop	r15
    641a:	ef 90       	pop	r14
    641c:	df 90       	pop	r13
    641e:	cf 90       	pop	r12
    6420:	bf 90       	pop	r11
    6422:	af 90       	pop	r10
    6424:	9f 90       	pop	r9
    6426:	7f 90       	pop	r7
    6428:	6f 90       	pop	r6
    642a:	5f 90       	pop	r5
    642c:	4f 90       	pop	r4
    642e:	3f 90       	pop	r3
    6430:	2f 90       	pop	r2
    6432:	08 95       	ret

00006434 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    6434:	8f 92       	push	r8
    6436:	9f 92       	push	r9
    6438:	af 92       	push	r10
    643a:	bf 92       	push	r11
    643c:	cf 92       	push	r12
    643e:	df 92       	push	r13
    6440:	ef 92       	push	r14
    6442:	ff 92       	push	r15
    6444:	0f 93       	push	r16
    6446:	1f 93       	push	r17
    6448:	cf 93       	push	r28
    644a:	df 93       	push	r29
    644c:	ec 01       	movw	r28, r24
    644e:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    6450:	70 93 f7 08 	sts	0x08F7, r23	; 0x8008f7 <_ZN8SdVolume7sdCard_E+0x1>
    6454:	60 93 f6 08 	sts	0x08F6, r22	; 0x8008f6 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6458:	44 23       	and	r20, r20
    645a:	61 f1       	breq	.+88     	; 0x64b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    645c:	45 30       	cpi	r20, 0x05	; 5
    645e:	10 f0       	brcs	.+4      	; 0x6464 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    6460:	80 e0       	ldi	r24, 0x00	; 0
    6462:	ef c0       	rjmp	.+478    	; 0x6642 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    6464:	40 e0       	ldi	r20, 0x00	; 0
    6466:	60 e0       	ldi	r22, 0x00	; 0
    6468:	70 e0       	ldi	r23, 0x00	; 0
    646a:	cb 01       	movw	r24, r22
    646c:	0f dd       	rcall	.-1506   	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    646e:	88 23       	and	r24, r24
    6470:	b9 f3       	breq	.-18     	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    6472:	20 e1       	ldi	r18, 0x10	; 16
    6474:	12 9f       	mul	r17, r18
    6476:	a0 01       	movw	r20, r0
    6478:	11 24       	eor	r1, r1
    647a:	48 51       	subi	r20, 0x18	; 24
    647c:	57 4f       	sbci	r21, 0xF7	; 247
    647e:	fa 01       	movw	r30, r20
    6480:	e2 54       	subi	r30, 0x42	; 66
    6482:	fe 4f       	sbci	r31, 0xFE	; 254
    6484:	80 81       	ld	r24, Z
    6486:	8f 77       	andi	r24, 0x7F	; 127
    6488:	59 f7       	brne	.-42     	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    648a:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    648c:	80 81       	ld	r24, Z
    648e:	91 81       	ldd	r25, Z+1	; 0x01
    6490:	a2 81       	ldd	r26, Z+2	; 0x02
    6492:	b3 81       	ldd	r27, Z+3	; 0x03
    6494:	84 36       	cpi	r24, 0x64	; 100
    6496:	91 05       	cpc	r25, r1
    6498:	a1 05       	cpc	r26, r1
    649a:	b1 05       	cpc	r27, r1
    649c:	08 f3       	brcs	.-62     	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    649e:	34 97       	sbiw	r30, 0x04	; 4
    64a0:	c0 80       	ld	r12, Z
    64a2:	d1 80       	ldd	r13, Z+1	; 0x01
    64a4:	e2 80       	ldd	r14, Z+2	; 0x02
    64a6:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    64a8:	c1 14       	cp	r12, r1
    64aa:	d1 04       	cpc	r13, r1
    64ac:	e1 04       	cpc	r14, r1
    64ae:	f1 04       	cpc	r15, r1
    64b0:	21 f4       	brne	.+8      	; 0x64ba <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    64b2:	d6 cf       	rjmp	.-84     	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    64b4:	c1 2c       	mov	r12, r1
    64b6:	d1 2c       	mov	r13, r1
    64b8:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    64ba:	40 e0       	ldi	r20, 0x00	; 0
    64bc:	c7 01       	movw	r24, r14
    64be:	b6 01       	movw	r22, r12
    64c0:	e5 dc       	rcall	.-1590   	; 0x5e8c <_ZN8SdVolume13cacheRawBlockEmh>
    64c2:	88 23       	and	r24, r24
    64c4:	69 f2       	breq	.-102    	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    64c6:	80 91 03 09 	lds	r24, 0x0903	; 0x800903 <_ZN8SdVolume12cacheBuffer_E+0xb>
    64ca:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <_ZN8SdVolume12cacheBuffer_E+0xc>
    64ce:	81 15       	cp	r24, r1
    64d0:	92 40       	sbci	r25, 0x02	; 2
    64d2:	31 f6       	brne	.-116    	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    64d4:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    64d8:	99 23       	and	r25, r25
    64da:	09 f4       	brne	.+2      	; 0x64de <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    64dc:	c1 cf       	rjmp	.-126    	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    64de:	20 91 06 09 	lds	r18, 0x0906	; 0x800906 <_ZN8SdVolume12cacheBuffer_E+0xe>
    64e2:	30 91 07 09 	lds	r19, 0x0907	; 0x800907 <_ZN8SdVolume12cacheBuffer_E+0xf>
    64e6:	23 2b       	or	r18, r19
    64e8:	09 f4       	brne	.+2      	; 0x64ec <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    64ea:	ba cf       	rjmp	.-140    	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    64ec:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    64f0:	88 23       	and	r24, r24
    64f2:	09 f4       	brne	.+2      	; 0x64f6 <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    64f4:	b5 cf       	rjmp	.-150    	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    64f6:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    64f8:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    64fa:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	41 e0       	ldi	r20, 0x01	; 1
    6500:	50 e0       	ldi	r21, 0x00	; 0
    6502:	2d 85       	ldd	r18, Y+13	; 0x0d
    6504:	e2 2f       	mov	r30, r18
    6506:	ba 01       	movw	r22, r20
    6508:	02 2e       	mov	r0, r18
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    650c:	66 0f       	add	r22, r22
    650e:	77 1f       	adc	r23, r23
    6510:	0a 94       	dec	r0
    6512:	e2 f7       	brpl	.-8      	; 0x650c <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    6514:	86 17       	cp	r24, r22
    6516:	97 07       	cpc	r25, r23
    6518:	31 f0       	breq	.+12     	; 0x6526 <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    651a:	31 e0       	ldi	r19, 0x01	; 1
    651c:	32 0f       	add	r19, r18
    651e:	3d 87       	std	Y+13, r19	; 0x0d
    6520:	28 30       	cpi	r18, 0x08	; 8
    6522:	78 f3       	brcs	.-34     	; 0x6502 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    6524:	9d cf       	rjmp	.-198    	; 0x6460 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    6526:	20 91 0e 09 	lds	r18, 0x090E	; 0x80090e <_ZN8SdVolume12cacheBuffer_E+0x16>
    652a:	30 91 0f 09 	lds	r19, 0x090F	; 0x80090f <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    652e:	21 15       	cp	r18, r1
    6530:	31 05       	cpc	r19, r1
    6532:	19 f0       	breq	.+6      	; 0x653a <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    6534:	40 e0       	ldi	r20, 0x00	; 0
    6536:	50 e0       	ldi	r21, 0x00	; 0
    6538:	08 c0       	rjmp	.+16     	; 0x654a <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    653a:	20 91 1c 09 	lds	r18, 0x091C	; 0x80091c <_ZN8SdVolume12cacheBuffer_E+0x24>
    653e:	30 91 1d 09 	lds	r19, 0x091D	; 0x80091d <_ZN8SdVolume12cacheBuffer_E+0x25>
    6542:	40 91 1e 09 	lds	r20, 0x091E	; 0x80091e <_ZN8SdVolume12cacheBuffer_E+0x26>
    6546:	50 91 1f 09 	lds	r21, 0x091F	; 0x80091f <_ZN8SdVolume12cacheBuffer_E+0x27>
    654a:	2d 83       	std	Y+5, r18	; 0x05
    654c:	3e 83       	std	Y+6, r19	; 0x06
    654e:	4f 83       	std	Y+7, r20	; 0x07
    6550:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    6552:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <_ZN8SdVolume12cacheBuffer_E+0xe>
    6556:	90 91 07 09 	lds	r25, 0x0907	; 0x800907 <_ZN8SdVolume12cacheBuffer_E+0xf>
    655a:	46 01       	movw	r8, r12
    655c:	57 01       	movw	r10, r14
    655e:	88 0e       	add	r8, r24
    6560:	99 1e       	adc	r9, r25
    6562:	a1 1c       	adc	r10, r1
    6564:	b1 1c       	adc	r11, r1
    6566:	8b 8a       	std	Y+19, r8	; 0x13
    6568:	9c 8a       	std	Y+20, r9	; 0x14
    656a:	ad 8a       	std	Y+21, r10	; 0x15
    656c:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    656e:	00 91 09 09 	lds	r16, 0x0909	; 0x800909 <_ZN8SdVolume12cacheBuffer_E+0x11>
    6572:	10 91 0a 09 	lds	r17, 0x090A	; 0x80090a <_ZN8SdVolume12cacheBuffer_E+0x12>
    6576:	19 8f       	std	Y+25, r17	; 0x19
    6578:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    657a:	a0 91 08 09 	lds	r26, 0x0908	; 0x800908 <_ZN8SdVolume12cacheBuffer_E+0x10>
    657e:	b0 e0       	ldi	r27, 0x00	; 0
    6580:	40 d1       	rcall	.+640    	; 0x6802 <__muluhisi3>
    6582:	86 0e       	add	r8, r22
    6584:	97 1e       	adc	r9, r23
    6586:	a8 1e       	adc	r10, r24
    6588:	b9 1e       	adc	r11, r25
    658a:	8a 8e       	std	Y+26, r8	; 0x1a
    658c:	9b 8e       	std	Y+27, r9	; 0x1b
    658e:	ac 8e       	std	Y+28, r10	; 0x1c
    6590:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    6592:	85 e0       	ldi	r24, 0x05	; 5
    6594:	00 0f       	add	r16, r16
    6596:	11 1f       	adc	r17, r17
    6598:	8a 95       	dec	r24
    659a:	e1 f7       	brne	.-8      	; 0x6594 <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    659c:	01 50       	subi	r16, 0x01	; 1
    659e:	1e 4f       	sbci	r17, 0xFE	; 254
    65a0:	01 2f       	mov	r16, r17
    65a2:	11 27       	eor	r17, r17
    65a4:	06 95       	lsr	r16
    65a6:	80 0e       	add	r8, r16
    65a8:	91 1e       	adc	r9, r17
    65aa:	a1 1c       	adc	r10, r1
    65ac:	b1 1c       	adc	r11, r1
    65ae:	8e 86       	std	Y+14, r8	; 0x0e
    65b0:	9f 86       	std	Y+15, r9	; 0x0f
    65b2:	a8 8a       	std	Y+16, r10	; 0x10
    65b4:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    65b6:	20 91 0b 09 	lds	r18, 0x090B	; 0x80090b <_ZN8SdVolume12cacheBuffer_E+0x13>
    65ba:	30 91 0c 09 	lds	r19, 0x090C	; 0x80090c <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    65be:	21 15       	cp	r18, r1
    65c0:	31 05       	cpc	r19, r1
    65c2:	21 f0       	breq	.+8      	; 0x65cc <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    65c4:	a9 01       	movw	r20, r18
    65c6:	60 e0       	ldi	r22, 0x00	; 0
    65c8:	70 e0       	ldi	r23, 0x00	; 0
    65ca:	08 c0       	rjmp	.+16     	; 0x65dc <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    65cc:	40 91 18 09 	lds	r20, 0x0918	; 0x800918 <_ZN8SdVolume12cacheBuffer_E+0x20>
    65d0:	50 91 19 09 	lds	r21, 0x0919	; 0x800919 <_ZN8SdVolume12cacheBuffer_E+0x21>
    65d4:	60 91 1a 09 	lds	r22, 0x091A	; 0x80091a <_ZN8SdVolume12cacheBuffer_E+0x22>
    65d8:	70 91 1b 09 	lds	r23, 0x091B	; 0x80091b <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    65dc:	d7 01       	movw	r26, r14
    65de:	c6 01       	movw	r24, r12
    65e0:	88 19       	sub	r24, r8
    65e2:	99 09       	sbc	r25, r9
    65e4:	aa 09       	sbc	r26, r10
    65e6:	bb 09       	sbc	r27, r11
    65e8:	84 0f       	add	r24, r20
    65ea:	95 1f       	adc	r25, r21
    65ec:	a6 1f       	adc	r26, r22
    65ee:	b7 1f       	adc	r27, r23
    65f0:	04 c0       	rjmp	.+8      	; 0x65fa <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    65f2:	b6 95       	lsr	r27
    65f4:	a7 95       	ror	r26
    65f6:	97 95       	ror	r25
    65f8:	87 95       	ror	r24
    65fa:	ea 95       	dec	r30
    65fc:	d2 f7       	brpl	.-12     	; 0x65f2 <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    65fe:	89 87       	std	Y+9, r24	; 0x09
    6600:	9a 87       	std	Y+10, r25	; 0x0a
    6602:	ab 87       	std	Y+11, r26	; 0x0b
    6604:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    6606:	85 3f       	cpi	r24, 0xF5	; 245
    6608:	2f e0       	ldi	r18, 0x0F	; 15
    660a:	92 07       	cpc	r25, r18
    660c:	a1 05       	cpc	r26, r1
    660e:	b1 05       	cpc	r27, r1
    6610:	10 f4       	brcc	.+4      	; 0x6616 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    6612:	8c e0       	ldi	r24, 0x0C	; 12
    6614:	14 c0       	rjmp	.+40     	; 0x663e <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    6616:	85 3f       	cpi	r24, 0xF5	; 245
    6618:	9f 4f       	sbci	r25, 0xFF	; 255
    661a:	a1 05       	cpc	r26, r1
    661c:	b1 05       	cpc	r27, r1
    661e:	10 f4       	brcc	.+4      	; 0x6624 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    6620:	80 e1       	ldi	r24, 0x10	; 16
    6622:	0d c0       	rjmp	.+26     	; 0x663e <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    6624:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    6628:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    662c:	a0 91 26 09 	lds	r26, 0x0926	; 0x800926 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    6630:	b0 91 27 09 	lds	r27, 0x0927	; 0x800927 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    6634:	8a 8f       	std	Y+26, r24	; 0x1a
    6636:	9b 8f       	std	Y+27, r25	; 0x1b
    6638:	ac 8f       	std	Y+28, r26	; 0x1c
    663a:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    663c:	80 e2       	ldi	r24, 0x20	; 32
    663e:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    6640:	81 e0       	ldi	r24, 0x01	; 1
}
    6642:	df 91       	pop	r29
    6644:	cf 91       	pop	r28
    6646:	1f 91       	pop	r17
    6648:	0f 91       	pop	r16
    664a:	ff 90       	pop	r15
    664c:	ef 90       	pop	r14
    664e:	df 90       	pop	r13
    6650:	cf 90       	pop	r12
    6652:	bf 90       	pop	r11
    6654:	af 90       	pop	r10
    6656:	9f 90       	pop	r9
    6658:	8f 90       	pop	r8
    665a:	08 95       	ret

0000665c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    665c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    665e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6660:	f8 94       	cli
  if (!initialized) {
    6662:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <_ZN8SPIClass11initializedE>
    6666:	81 11       	cpse	r24, r1
    6668:	27 c0       	rjmp	.+78     	; 0x66b8 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    666a:	e0 ea       	ldi	r30, 0xA0	; 160
    666c:	f2 e0       	ldi	r31, 0x02	; 2
    666e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6670:	ea e5       	ldi	r30, 0x5A	; 90
    6672:	f2 e0       	ldi	r31, 0x02	; 2
    6674:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    6676:	e8 2f       	mov	r30, r24
    6678:	f0 e0       	ldi	r31, 0x00	; 0
    667a:	ee 0f       	add	r30, r30
    667c:	ff 1f       	adc	r31, r31
    667e:	eb 51       	subi	r30, 0x1B	; 27
    6680:	fd 4f       	sbci	r31, 0xFD	; 253
    6682:	a5 91       	lpm	r26, Z+
    6684:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6686:	ec 91       	ld	r30, X
    6688:	e9 23       	and	r30, r25
    668a:	21 f4       	brne	.+8      	; 0x6694 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    668c:	61 e0       	ldi	r22, 0x01	; 1
    668e:	85 e3       	ldi	r24, 0x35	; 53
    6690:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6694:	61 e0       	ldi	r22, 0x01	; 1
    6696:	85 e3       	ldi	r24, 0x35	; 53
    6698:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    669c:	8c b5       	in	r24, 0x2c	; 44
    669e:	80 61       	ori	r24, 0x10	; 16
    66a0:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    66a2:	8c b5       	in	r24, 0x2c	; 44
    66a4:	80 64       	ori	r24, 0x40	; 64
    66a6:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    66a8:	61 e0       	ldi	r22, 0x01	; 1
    66aa:	84 e3       	ldi	r24, 0x34	; 52
    66ac:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>
    pinMode(MOSI, OUTPUT);
    66b0:	61 e0       	ldi	r22, 0x01	; 1
    66b2:	83 e3       	ldi	r24, 0x33	; 51
    66b4:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <pinMode>
  }
  initialized++; // reference count
    66b8:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <_ZN8SPIClass11initializedE>
    66bc:	8f 5f       	subi	r24, 0xFF	; 255
    66be:	80 93 fb 0a 	sts	0x0AFB, r24	; 0x800afb <_ZN8SPIClass11initializedE>
  SREG = sreg;
    66c2:	cf bf       	out	0x3f, r28	; 63
}
    66c4:	cf 91       	pop	r28
    66c6:	08 95       	ret

000066c8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    66c8:	08 95       	ret

000066ca <__fixunssfsi>:
    66ca:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fp_splitA>
    66ce:	88 f0       	brcs	.+34     	; 0x66f2 <__fixunssfsi+0x28>
    66d0:	9f 57       	subi	r25, 0x7F	; 127
    66d2:	98 f0       	brcs	.+38     	; 0x66fa <__fixunssfsi+0x30>
    66d4:	b9 2f       	mov	r27, r25
    66d6:	99 27       	eor	r25, r25
    66d8:	b7 51       	subi	r27, 0x17	; 23
    66da:	b0 f0       	brcs	.+44     	; 0x6708 <__fixunssfsi+0x3e>
    66dc:	e1 f0       	breq	.+56     	; 0x6716 <__fixunssfsi+0x4c>
    66de:	66 0f       	add	r22, r22
    66e0:	77 1f       	adc	r23, r23
    66e2:	88 1f       	adc	r24, r24
    66e4:	99 1f       	adc	r25, r25
    66e6:	1a f0       	brmi	.+6      	; 0x66ee <__fixunssfsi+0x24>
    66e8:	ba 95       	dec	r27
    66ea:	c9 f7       	brne	.-14     	; 0x66de <__fixunssfsi+0x14>
    66ec:	14 c0       	rjmp	.+40     	; 0x6716 <__fixunssfsi+0x4c>
    66ee:	b1 30       	cpi	r27, 0x01	; 1
    66f0:	91 f0       	breq	.+36     	; 0x6716 <__fixunssfsi+0x4c>
    66f2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__fp_zero>
    66f6:	b1 e0       	ldi	r27, 0x01	; 1
    66f8:	08 95       	ret
    66fa:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <__fp_zero>
    66fe:	67 2f       	mov	r22, r23
    6700:	78 2f       	mov	r23, r24
    6702:	88 27       	eor	r24, r24
    6704:	b8 5f       	subi	r27, 0xF8	; 248
    6706:	39 f0       	breq	.+14     	; 0x6716 <__fixunssfsi+0x4c>
    6708:	b9 3f       	cpi	r27, 0xF9	; 249
    670a:	cc f3       	brlt	.-14     	; 0x66fe <__fixunssfsi+0x34>
    670c:	86 95       	lsr	r24
    670e:	77 95       	ror	r23
    6710:	67 95       	ror	r22
    6712:	b3 95       	inc	r27
    6714:	d9 f7       	brne	.-10     	; 0x670c <__fixunssfsi+0x42>
    6716:	3e f4       	brtc	.+14     	; 0x6726 <__fixunssfsi+0x5c>
    6718:	90 95       	com	r25
    671a:	80 95       	com	r24
    671c:	70 95       	com	r23
    671e:	61 95       	neg	r22
    6720:	7f 4f       	sbci	r23, 0xFF	; 255
    6722:	8f 4f       	sbci	r24, 0xFF	; 255
    6724:	9f 4f       	sbci	r25, 0xFF	; 255
    6726:	08 95       	ret

00006728 <__unordsf2>:
    6728:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fp_cmp>
    672c:	88 0b       	sbc	r24, r24
    672e:	99 0b       	sbc	r25, r25
    6730:	08 95       	ret

00006732 <__mulsi3>:
    6732:	db 01       	movw	r26, r22
    6734:	8f 93       	push	r24
    6736:	9f 93       	push	r25
    6738:	64 d0       	rcall	.+200    	; 0x6802 <__muluhisi3>
    673a:	bf 91       	pop	r27
    673c:	af 91       	pop	r26
    673e:	a2 9f       	mul	r26, r18
    6740:	80 0d       	add	r24, r0
    6742:	91 1d       	adc	r25, r1
    6744:	a3 9f       	mul	r26, r19
    6746:	90 0d       	add	r25, r0
    6748:	b2 9f       	mul	r27, r18
    674a:	90 0d       	add	r25, r0
    674c:	11 24       	eor	r1, r1
    674e:	08 95       	ret

00006750 <__udivmodqi4>:
    6750:	99 1b       	sub	r25, r25
    6752:	79 e0       	ldi	r23, 0x09	; 9
    6754:	04 c0       	rjmp	.+8      	; 0x675e <__udivmodqi4_ep>

00006756 <__udivmodqi4_loop>:
    6756:	99 1f       	adc	r25, r25
    6758:	96 17       	cp	r25, r22
    675a:	08 f0       	brcs	.+2      	; 0x675e <__udivmodqi4_ep>
    675c:	96 1b       	sub	r25, r22

0000675e <__udivmodqi4_ep>:
    675e:	88 1f       	adc	r24, r24
    6760:	7a 95       	dec	r23
    6762:	c9 f7       	brne	.-14     	; 0x6756 <__udivmodqi4_loop>
    6764:	80 95       	com	r24
    6766:	08 95       	ret

00006768 <__udivmodhi4>:
    6768:	aa 1b       	sub	r26, r26
    676a:	bb 1b       	sub	r27, r27
    676c:	51 e1       	ldi	r21, 0x11	; 17
    676e:	07 c0       	rjmp	.+14     	; 0x677e <__udivmodhi4_ep>

00006770 <__udivmodhi4_loop>:
    6770:	aa 1f       	adc	r26, r26
    6772:	bb 1f       	adc	r27, r27
    6774:	a6 17       	cp	r26, r22
    6776:	b7 07       	cpc	r27, r23
    6778:	10 f0       	brcs	.+4      	; 0x677e <__udivmodhi4_ep>
    677a:	a6 1b       	sub	r26, r22
    677c:	b7 0b       	sbc	r27, r23

0000677e <__udivmodhi4_ep>:
    677e:	88 1f       	adc	r24, r24
    6780:	99 1f       	adc	r25, r25
    6782:	5a 95       	dec	r21
    6784:	a9 f7       	brne	.-22     	; 0x6770 <__udivmodhi4_loop>
    6786:	80 95       	com	r24
    6788:	90 95       	com	r25
    678a:	bc 01       	movw	r22, r24
    678c:	cd 01       	movw	r24, r26
    678e:	08 95       	ret

00006790 <__udivmodsi4>:
    6790:	a1 e2       	ldi	r26, 0x21	; 33
    6792:	1a 2e       	mov	r1, r26
    6794:	aa 1b       	sub	r26, r26
    6796:	bb 1b       	sub	r27, r27
    6798:	fd 01       	movw	r30, r26
    679a:	0d c0       	rjmp	.+26     	; 0x67b6 <__udivmodsi4_ep>

0000679c <__udivmodsi4_loop>:
    679c:	aa 1f       	adc	r26, r26
    679e:	bb 1f       	adc	r27, r27
    67a0:	ee 1f       	adc	r30, r30
    67a2:	ff 1f       	adc	r31, r31
    67a4:	a2 17       	cp	r26, r18
    67a6:	b3 07       	cpc	r27, r19
    67a8:	e4 07       	cpc	r30, r20
    67aa:	f5 07       	cpc	r31, r21
    67ac:	20 f0       	brcs	.+8      	; 0x67b6 <__udivmodsi4_ep>
    67ae:	a2 1b       	sub	r26, r18
    67b0:	b3 0b       	sbc	r27, r19
    67b2:	e4 0b       	sbc	r30, r20
    67b4:	f5 0b       	sbc	r31, r21

000067b6 <__udivmodsi4_ep>:
    67b6:	66 1f       	adc	r22, r22
    67b8:	77 1f       	adc	r23, r23
    67ba:	88 1f       	adc	r24, r24
    67bc:	99 1f       	adc	r25, r25
    67be:	1a 94       	dec	r1
    67c0:	69 f7       	brne	.-38     	; 0x679c <__udivmodsi4_loop>
    67c2:	60 95       	com	r22
    67c4:	70 95       	com	r23
    67c6:	80 95       	com	r24
    67c8:	90 95       	com	r25
    67ca:	9b 01       	movw	r18, r22
    67cc:	ac 01       	movw	r20, r24
    67ce:	bd 01       	movw	r22, r26
    67d0:	cf 01       	movw	r24, r30
    67d2:	08 95       	ret

000067d4 <__tablejump2__>:
    67d4:	ee 0f       	add	r30, r30
    67d6:	ff 1f       	adc	r31, r31
    67d8:	88 1f       	adc	r24, r24
    67da:	8b bf       	out	0x3b, r24	; 59
    67dc:	07 90       	elpm	r0, Z+
    67de:	f6 91       	elpm	r31, Z
    67e0:	e0 2d       	mov	r30, r0
    67e2:	19 94       	eijmp

000067e4 <__umulhisi3>:
    67e4:	a2 9f       	mul	r26, r18
    67e6:	b0 01       	movw	r22, r0
    67e8:	b3 9f       	mul	r27, r19
    67ea:	c0 01       	movw	r24, r0
    67ec:	a3 9f       	mul	r26, r19
    67ee:	70 0d       	add	r23, r0
    67f0:	81 1d       	adc	r24, r1
    67f2:	11 24       	eor	r1, r1
    67f4:	91 1d       	adc	r25, r1
    67f6:	b2 9f       	mul	r27, r18
    67f8:	70 0d       	add	r23, r0
    67fa:	81 1d       	adc	r24, r1
    67fc:	11 24       	eor	r1, r1
    67fe:	91 1d       	adc	r25, r1
    6800:	08 95       	ret

00006802 <__muluhisi3>:
    6802:	f0 df       	rcall	.-32     	; 0x67e4 <__umulhisi3>
    6804:	a5 9f       	mul	r26, r21
    6806:	90 0d       	add	r25, r0
    6808:	b4 9f       	mul	r27, r20
    680a:	90 0d       	add	r25, r0
    680c:	a4 9f       	mul	r26, r20
    680e:	80 0d       	add	r24, r0
    6810:	91 1d       	adc	r25, r1
    6812:	11 24       	eor	r1, r1
    6814:	08 95       	ret

00006816 <__mulshisi3>:
    6816:	b7 ff       	sbrs	r27, 7
    6818:	f4 cf       	rjmp	.-24     	; 0x6802 <__muluhisi3>

0000681a <__mulohisi3>:
    681a:	f3 df       	rcall	.-26     	; 0x6802 <__muluhisi3>
    681c:	82 1b       	sub	r24, r18
    681e:	93 0b       	sbc	r25, r19
    6820:	08 95       	ret

00006822 <__muldi3>:
    6822:	df 93       	push	r29
    6824:	cf 93       	push	r28
    6826:	1f 93       	push	r17
    6828:	0f 93       	push	r16
    682a:	9a 9d       	mul	r25, r10
    682c:	f0 2d       	mov	r31, r0
    682e:	21 9f       	mul	r18, r17
    6830:	f0 0d       	add	r31, r0
    6832:	8b 9d       	mul	r24, r11
    6834:	f0 0d       	add	r31, r0
    6836:	8a 9d       	mul	r24, r10
    6838:	e0 2d       	mov	r30, r0
    683a:	f1 0d       	add	r31, r1
    683c:	03 9f       	mul	r16, r19
    683e:	f0 0d       	add	r31, r0
    6840:	02 9f       	mul	r16, r18
    6842:	e0 0d       	add	r30, r0
    6844:	f1 1d       	adc	r31, r1
    6846:	4e 9d       	mul	r20, r14
    6848:	e0 0d       	add	r30, r0
    684a:	f1 1d       	adc	r31, r1
    684c:	5e 9d       	mul	r21, r14
    684e:	f0 0d       	add	r31, r0
    6850:	4f 9d       	mul	r20, r15
    6852:	f0 0d       	add	r31, r0
    6854:	7f 93       	push	r23
    6856:	6f 93       	push	r22
    6858:	bf 92       	push	r11
    685a:	af 92       	push	r10
    685c:	5f 93       	push	r21
    685e:	4f 93       	push	r20
    6860:	d5 01       	movw	r26, r10
    6862:	c0 df       	rcall	.-128    	; 0x67e4 <__umulhisi3>
    6864:	8b 01       	movw	r16, r22
    6866:	ac 01       	movw	r20, r24
    6868:	d7 01       	movw	r26, r14
    686a:	bc df       	rcall	.-136    	; 0x67e4 <__umulhisi3>
    686c:	eb 01       	movw	r28, r22
    686e:	e8 0f       	add	r30, r24
    6870:	f9 1f       	adc	r31, r25
    6872:	d6 01       	movw	r26, r12
    6874:	1f d0       	rcall	.+62     	; 0x68b4 <__muldi3_6>
    6876:	2f 91       	pop	r18
    6878:	3f 91       	pop	r19
    687a:	d6 01       	movw	r26, r12
    687c:	b3 df       	rcall	.-154    	; 0x67e4 <__umulhisi3>
    687e:	c6 0f       	add	r28, r22
    6880:	d7 1f       	adc	r29, r23
    6882:	e8 1f       	adc	r30, r24
    6884:	f9 1f       	adc	r31, r25
    6886:	af 91       	pop	r26
    6888:	bf 91       	pop	r27
    688a:	14 d0       	rcall	.+40     	; 0x68b4 <__muldi3_6>
    688c:	2f 91       	pop	r18
    688e:	3f 91       	pop	r19
    6890:	a9 df       	rcall	.-174    	; 0x67e4 <__umulhisi3>
    6892:	c6 0f       	add	r28, r22
    6894:	d7 1f       	adc	r29, r23
    6896:	e8 1f       	adc	r30, r24
    6898:	f9 1f       	adc	r31, r25
    689a:	d6 01       	movw	r26, r12
    689c:	a3 df       	rcall	.-186    	; 0x67e4 <__umulhisi3>
    689e:	e6 0f       	add	r30, r22
    68a0:	f7 1f       	adc	r31, r23
    68a2:	98 01       	movw	r18, r16
    68a4:	be 01       	movw	r22, r28
    68a6:	cf 01       	movw	r24, r30
    68a8:	11 24       	eor	r1, r1
    68aa:	0f 91       	pop	r16
    68ac:	1f 91       	pop	r17
    68ae:	cf 91       	pop	r28
    68b0:	df 91       	pop	r29
    68b2:	08 95       	ret

000068b4 <__muldi3_6>:
    68b4:	97 df       	rcall	.-210    	; 0x67e4 <__umulhisi3>
    68b6:	46 0f       	add	r20, r22
    68b8:	57 1f       	adc	r21, r23
    68ba:	c8 1f       	adc	r28, r24
    68bc:	d9 1f       	adc	r29, r25
    68be:	08 f4       	brcc	.+2      	; 0x68c2 <__muldi3_6+0xe>
    68c0:	31 96       	adiw	r30, 0x01	; 1
    68c2:	08 95       	ret

000068c4 <__moddi3>:
    68c4:	68 94       	set
    68c6:	01 c0       	rjmp	.+2      	; 0x68ca <__divdi3_moddi3>

000068c8 <__divdi3>:
    68c8:	e8 94       	clt

000068ca <__divdi3_moddi3>:
    68ca:	f9 2f       	mov	r31, r25
    68cc:	f1 2b       	or	r31, r17
    68ce:	0a f0       	brmi	.+2      	; 0x68d2 <__divdi3_moddi3+0x8>
    68d0:	27 c0       	rjmp	.+78     	; 0x6920 <__udivdi3_umoddi3>
    68d2:	a0 e0       	ldi	r26, 0x00	; 0
    68d4:	b0 e0       	ldi	r27, 0x00	; 0
    68d6:	ee e6       	ldi	r30, 0x6E	; 110
    68d8:	f4 e3       	ldi	r31, 0x34	; 52
    68da:	93 c0       	rjmp	.+294    	; 0x6a02 <__prologue_saves__+0xc>
    68dc:	09 2e       	mov	r0, r25
    68de:	05 94       	asr	r0
    68e0:	1a f4       	brpl	.+6      	; 0x68e8 <__divdi3_moddi3+0x1e>
    68e2:	79 d0       	rcall	.+242    	; 0x69d6 <__negdi2>
    68e4:	11 23       	and	r17, r17
    68e6:	92 f4       	brpl	.+36     	; 0x690c <__divdi3_moddi3+0x42>
    68e8:	f0 e8       	ldi	r31, 0x80	; 128
    68ea:	0f 26       	eor	r0, r31
    68ec:	ff ef       	ldi	r31, 0xFF	; 255
    68ee:	e0 94       	com	r14
    68f0:	f0 94       	com	r15
    68f2:	00 95       	com	r16
    68f4:	10 95       	com	r17
    68f6:	b0 94       	com	r11
    68f8:	c0 94       	com	r12
    68fa:	d0 94       	com	r13
    68fc:	a1 94       	neg	r10
    68fe:	bf 0a       	sbc	r11, r31
    6900:	cf 0a       	sbc	r12, r31
    6902:	df 0a       	sbc	r13, r31
    6904:	ef 0a       	sbc	r14, r31
    6906:	ff 0a       	sbc	r15, r31
    6908:	0f 0b       	sbc	r16, r31
    690a:	1f 0b       	sbc	r17, r31
    690c:	13 d0       	rcall	.+38     	; 0x6934 <__udivmod64>
    690e:	07 fc       	sbrc	r0, 7
    6910:	62 d0       	rcall	.+196    	; 0x69d6 <__negdi2>
    6912:	cd b7       	in	r28, 0x3d	; 61
    6914:	de b7       	in	r29, 0x3e	; 62
    6916:	ec e0       	ldi	r30, 0x0C	; 12
    6918:	90 c0       	rjmp	.+288    	; 0x6a3a <__epilogue_restores__+0xc>

0000691a <__umoddi3>:
    691a:	68 94       	set
    691c:	01 c0       	rjmp	.+2      	; 0x6920 <__udivdi3_umoddi3>

0000691e <__udivdi3>:
    691e:	e8 94       	clt

00006920 <__udivdi3_umoddi3>:
    6920:	8f 92       	push	r8
    6922:	9f 92       	push	r9
    6924:	cf 93       	push	r28
    6926:	df 93       	push	r29
    6928:	05 d0       	rcall	.+10     	; 0x6934 <__udivmod64>
    692a:	df 91       	pop	r29
    692c:	cf 91       	pop	r28
    692e:	9f 90       	pop	r9
    6930:	8f 90       	pop	r8
    6932:	08 95       	ret

00006934 <__udivmod64>:
    6934:	88 24       	eor	r8, r8
    6936:	99 24       	eor	r9, r9
    6938:	f4 01       	movw	r30, r8
    693a:	e4 01       	movw	r28, r8
    693c:	b0 e4       	ldi	r27, 0x40	; 64
    693e:	9f 93       	push	r25
    6940:	aa 27       	eor	r26, r26
    6942:	9a 15       	cp	r25, r10
    6944:	8b 04       	cpc	r8, r11
    6946:	9c 04       	cpc	r9, r12
    6948:	ed 05       	cpc	r30, r13
    694a:	fe 05       	cpc	r31, r14
    694c:	cf 05       	cpc	r28, r15
    694e:	d0 07       	cpc	r29, r16
    6950:	a1 07       	cpc	r26, r17
    6952:	98 f4       	brcc	.+38     	; 0x697a <__udivmod64+0x46>
    6954:	ad 2f       	mov	r26, r29
    6956:	dc 2f       	mov	r29, r28
    6958:	cf 2f       	mov	r28, r31
    695a:	fe 2f       	mov	r31, r30
    695c:	e9 2d       	mov	r30, r9
    695e:	98 2c       	mov	r9, r8
    6960:	89 2e       	mov	r8, r25
    6962:	98 2f       	mov	r25, r24
    6964:	87 2f       	mov	r24, r23
    6966:	76 2f       	mov	r23, r22
    6968:	65 2f       	mov	r22, r21
    696a:	54 2f       	mov	r21, r20
    696c:	43 2f       	mov	r20, r19
    696e:	32 2f       	mov	r19, r18
    6970:	22 27       	eor	r18, r18
    6972:	b8 50       	subi	r27, 0x08	; 8
    6974:	31 f7       	brne	.-52     	; 0x6942 <__udivmod64+0xe>
    6976:	bf 91       	pop	r27
    6978:	27 c0       	rjmp	.+78     	; 0x69c8 <__udivmod64+0x94>
    697a:	1b 2e       	mov	r1, r27
    697c:	bf 91       	pop	r27
    697e:	bb 27       	eor	r27, r27
    6980:	22 0f       	add	r18, r18
    6982:	33 1f       	adc	r19, r19
    6984:	44 1f       	adc	r20, r20
    6986:	55 1f       	adc	r21, r21
    6988:	66 1f       	adc	r22, r22
    698a:	77 1f       	adc	r23, r23
    698c:	88 1f       	adc	r24, r24
    698e:	99 1f       	adc	r25, r25
    6990:	88 1c       	adc	r8, r8
    6992:	99 1c       	adc	r9, r9
    6994:	ee 1f       	adc	r30, r30
    6996:	ff 1f       	adc	r31, r31
    6998:	cc 1f       	adc	r28, r28
    699a:	dd 1f       	adc	r29, r29
    699c:	aa 1f       	adc	r26, r26
    699e:	bb 1f       	adc	r27, r27
    69a0:	8a 14       	cp	r8, r10
    69a2:	9b 04       	cpc	r9, r11
    69a4:	ec 05       	cpc	r30, r12
    69a6:	fd 05       	cpc	r31, r13
    69a8:	ce 05       	cpc	r28, r14
    69aa:	df 05       	cpc	r29, r15
    69ac:	a0 07       	cpc	r26, r16
    69ae:	b1 07       	cpc	r27, r17
    69b0:	48 f0       	brcs	.+18     	; 0x69c4 <__udivmod64+0x90>
    69b2:	8a 18       	sub	r8, r10
    69b4:	9b 08       	sbc	r9, r11
    69b6:	ec 09       	sbc	r30, r12
    69b8:	fd 09       	sbc	r31, r13
    69ba:	ce 09       	sbc	r28, r14
    69bc:	df 09       	sbc	r29, r15
    69be:	a0 0b       	sbc	r26, r16
    69c0:	b1 0b       	sbc	r27, r17
    69c2:	21 60       	ori	r18, 0x01	; 1
    69c4:	1a 94       	dec	r1
    69c6:	e1 f6       	brne	.-72     	; 0x6980 <__udivmod64+0x4c>
    69c8:	2e f4       	brtc	.+10     	; 0x69d4 <__udivmod64+0xa0>
    69ca:	94 01       	movw	r18, r8
    69cc:	af 01       	movw	r20, r30
    69ce:	be 01       	movw	r22, r28
    69d0:	cd 01       	movw	r24, r26
    69d2:	00 0c       	add	r0, r0
    69d4:	08 95       	ret

000069d6 <__negdi2>:
    69d6:	60 95       	com	r22
    69d8:	70 95       	com	r23
    69da:	80 95       	com	r24
    69dc:	90 95       	com	r25
    69de:	30 95       	com	r19
    69e0:	40 95       	com	r20
    69e2:	50 95       	com	r21
    69e4:	21 95       	neg	r18
    69e6:	3f 4f       	sbci	r19, 0xFF	; 255
    69e8:	4f 4f       	sbci	r20, 0xFF	; 255
    69ea:	5f 4f       	sbci	r21, 0xFF	; 255
    69ec:	6f 4f       	sbci	r22, 0xFF	; 255
    69ee:	7f 4f       	sbci	r23, 0xFF	; 255
    69f0:	8f 4f       	sbci	r24, 0xFF	; 255
    69f2:	9f 4f       	sbci	r25, 0xFF	; 255
    69f4:	08 95       	ret

000069f6 <__prologue_saves__>:
    69f6:	2f 92       	push	r2
    69f8:	3f 92       	push	r3
    69fa:	4f 92       	push	r4
    69fc:	5f 92       	push	r5
    69fe:	6f 92       	push	r6
    6a00:	7f 92       	push	r7
    6a02:	8f 92       	push	r8
    6a04:	9f 92       	push	r9
    6a06:	af 92       	push	r10
    6a08:	bf 92       	push	r11
    6a0a:	cf 92       	push	r12
    6a0c:	df 92       	push	r13
    6a0e:	ef 92       	push	r14
    6a10:	ff 92       	push	r15
    6a12:	0f 93       	push	r16
    6a14:	1f 93       	push	r17
    6a16:	cf 93       	push	r28
    6a18:	df 93       	push	r29
    6a1a:	cd b7       	in	r28, 0x3d	; 61
    6a1c:	de b7       	in	r29, 0x3e	; 62
    6a1e:	ca 1b       	sub	r28, r26
    6a20:	db 0b       	sbc	r29, r27
    6a22:	0f b6       	in	r0, 0x3f	; 63
    6a24:	f8 94       	cli
    6a26:	de bf       	out	0x3e, r29	; 62
    6a28:	0f be       	out	0x3f, r0	; 63
    6a2a:	cd bf       	out	0x3d, r28	; 61
    6a2c:	19 94       	eijmp

00006a2e <__epilogue_restores__>:
    6a2e:	2a 88       	ldd	r2, Y+18	; 0x12
    6a30:	39 88       	ldd	r3, Y+17	; 0x11
    6a32:	48 88       	ldd	r4, Y+16	; 0x10
    6a34:	5f 84       	ldd	r5, Y+15	; 0x0f
    6a36:	6e 84       	ldd	r6, Y+14	; 0x0e
    6a38:	7d 84       	ldd	r7, Y+13	; 0x0d
    6a3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6a3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6a3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6a40:	b9 84       	ldd	r11, Y+9	; 0x09
    6a42:	c8 84       	ldd	r12, Y+8	; 0x08
    6a44:	df 80       	ldd	r13, Y+7	; 0x07
    6a46:	ee 80       	ldd	r14, Y+6	; 0x06
    6a48:	fd 80       	ldd	r15, Y+5	; 0x05
    6a4a:	0c 81       	ldd	r16, Y+4	; 0x04
    6a4c:	1b 81       	ldd	r17, Y+3	; 0x03
    6a4e:	aa 81       	ldd	r26, Y+2	; 0x02
    6a50:	b9 81       	ldd	r27, Y+1	; 0x01
    6a52:	ce 0f       	add	r28, r30
    6a54:	d1 1d       	adc	r29, r1
    6a56:	0f b6       	in	r0, 0x3f	; 63
    6a58:	f8 94       	cli
    6a5a:	de bf       	out	0x3e, r29	; 62
    6a5c:	0f be       	out	0x3f, r0	; 63
    6a5e:	cd bf       	out	0x3d, r28	; 61
    6a60:	ed 01       	movw	r28, r26
    6a62:	08 95       	ret

00006a64 <__ashldi3>:
    6a64:	0f 93       	push	r16
    6a66:	08 30       	cpi	r16, 0x08	; 8
    6a68:	90 f0       	brcs	.+36     	; 0x6a8e <__ashldi3+0x2a>
    6a6a:	98 2f       	mov	r25, r24
    6a6c:	87 2f       	mov	r24, r23
    6a6e:	76 2f       	mov	r23, r22
    6a70:	65 2f       	mov	r22, r21
    6a72:	54 2f       	mov	r21, r20
    6a74:	43 2f       	mov	r20, r19
    6a76:	32 2f       	mov	r19, r18
    6a78:	22 27       	eor	r18, r18
    6a7a:	08 50       	subi	r16, 0x08	; 8
    6a7c:	f4 cf       	rjmp	.-24     	; 0x6a66 <__ashldi3+0x2>
    6a7e:	22 0f       	add	r18, r18
    6a80:	33 1f       	adc	r19, r19
    6a82:	44 1f       	adc	r20, r20
    6a84:	55 1f       	adc	r21, r21
    6a86:	66 1f       	adc	r22, r22
    6a88:	77 1f       	adc	r23, r23
    6a8a:	88 1f       	adc	r24, r24
    6a8c:	99 1f       	adc	r25, r25
    6a8e:	0a 95       	dec	r16
    6a90:	b2 f7       	brpl	.-20     	; 0x6a7e <__ashldi3+0x1a>
    6a92:	0f 91       	pop	r16
    6a94:	08 95       	ret

00006a96 <__ashrdi3>:
    6a96:	97 fb       	bst	r25, 7
    6a98:	10 f8       	bld	r1, 0

00006a9a <__lshrdi3>:
    6a9a:	16 94       	lsr	r1
    6a9c:	00 08       	sbc	r0, r0
    6a9e:	0f 93       	push	r16
    6aa0:	08 30       	cpi	r16, 0x08	; 8
    6aa2:	98 f0       	brcs	.+38     	; 0x6aca <__lshrdi3+0x30>
    6aa4:	08 50       	subi	r16, 0x08	; 8
    6aa6:	23 2f       	mov	r18, r19
    6aa8:	34 2f       	mov	r19, r20
    6aaa:	45 2f       	mov	r20, r21
    6aac:	56 2f       	mov	r21, r22
    6aae:	67 2f       	mov	r22, r23
    6ab0:	78 2f       	mov	r23, r24
    6ab2:	89 2f       	mov	r24, r25
    6ab4:	90 2d       	mov	r25, r0
    6ab6:	f4 cf       	rjmp	.-24     	; 0x6aa0 <__lshrdi3+0x6>
    6ab8:	05 94       	asr	r0
    6aba:	97 95       	ror	r25
    6abc:	87 95       	ror	r24
    6abe:	77 95       	ror	r23
    6ac0:	67 95       	ror	r22
    6ac2:	57 95       	ror	r21
    6ac4:	47 95       	ror	r20
    6ac6:	37 95       	ror	r19
    6ac8:	27 95       	ror	r18
    6aca:	0a 95       	dec	r16
    6acc:	aa f7       	brpl	.-22     	; 0x6ab8 <__lshrdi3+0x1e>
    6ace:	0f 91       	pop	r16
    6ad0:	08 95       	ret

00006ad2 <__adddi3>:
    6ad2:	2a 0d       	add	r18, r10
    6ad4:	3b 1d       	adc	r19, r11
    6ad6:	4c 1d       	adc	r20, r12
    6ad8:	5d 1d       	adc	r21, r13
    6ada:	6e 1d       	adc	r22, r14
    6adc:	7f 1d       	adc	r23, r15
    6ade:	80 1f       	adc	r24, r16
    6ae0:	91 1f       	adc	r25, r17
    6ae2:	08 95       	ret

00006ae4 <__subdi3>:
    6ae4:	2a 19       	sub	r18, r10
    6ae6:	3b 09       	sbc	r19, r11
    6ae8:	4c 09       	sbc	r20, r12
    6aea:	5d 09       	sbc	r21, r13
    6aec:	6e 09       	sbc	r22, r14
    6aee:	7f 09       	sbc	r23, r15
    6af0:	80 0b       	sbc	r24, r16
    6af2:	91 0b       	sbc	r25, r17
    6af4:	08 95       	ret

00006af6 <__cmpdi2_s8>:
    6af6:	00 24       	eor	r0, r0
    6af8:	a7 fd       	sbrc	r26, 7
    6afa:	00 94       	com	r0
    6afc:	2a 17       	cp	r18, r26
    6afe:	30 05       	cpc	r19, r0
    6b00:	40 05       	cpc	r20, r0
    6b02:	50 05       	cpc	r21, r0
    6b04:	60 05       	cpc	r22, r0
    6b06:	70 05       	cpc	r23, r0
    6b08:	80 05       	cpc	r24, r0
    6b0a:	90 05       	cpc	r25, r0
    6b0c:	08 95       	ret

00006b0e <malloc>:
    6b0e:	0f 93       	push	r16
    6b10:	1f 93       	push	r17
    6b12:	cf 93       	push	r28
    6b14:	df 93       	push	r29
    6b16:	82 30       	cpi	r24, 0x02	; 2
    6b18:	91 05       	cpc	r25, r1
    6b1a:	10 f4       	brcc	.+4      	; 0x6b20 <malloc+0x12>
    6b1c:	82 e0       	ldi	r24, 0x02	; 2
    6b1e:	90 e0       	ldi	r25, 0x00	; 0
    6b20:	e0 91 fe 0a 	lds	r30, 0x0AFE	; 0x800afe <__flp>
    6b24:	f0 91 ff 0a 	lds	r31, 0x0AFF	; 0x800aff <__flp+0x1>
    6b28:	20 e0       	ldi	r18, 0x00	; 0
    6b2a:	30 e0       	ldi	r19, 0x00	; 0
    6b2c:	a0 e0       	ldi	r26, 0x00	; 0
    6b2e:	b0 e0       	ldi	r27, 0x00	; 0
    6b30:	30 97       	sbiw	r30, 0x00	; 0
    6b32:	19 f1       	breq	.+70     	; 0x6b7a <malloc+0x6c>
    6b34:	40 81       	ld	r20, Z
    6b36:	51 81       	ldd	r21, Z+1	; 0x01
    6b38:	02 81       	ldd	r16, Z+2	; 0x02
    6b3a:	13 81       	ldd	r17, Z+3	; 0x03
    6b3c:	48 17       	cp	r20, r24
    6b3e:	59 07       	cpc	r21, r25
    6b40:	c8 f0       	brcs	.+50     	; 0x6b74 <malloc+0x66>
    6b42:	84 17       	cp	r24, r20
    6b44:	95 07       	cpc	r25, r21
    6b46:	69 f4       	brne	.+26     	; 0x6b62 <malloc+0x54>
    6b48:	10 97       	sbiw	r26, 0x00	; 0
    6b4a:	31 f0       	breq	.+12     	; 0x6b58 <malloc+0x4a>
    6b4c:	12 96       	adiw	r26, 0x02	; 2
    6b4e:	0c 93       	st	X, r16
    6b50:	12 97       	sbiw	r26, 0x02	; 2
    6b52:	13 96       	adiw	r26, 0x03	; 3
    6b54:	1c 93       	st	X, r17
    6b56:	27 c0       	rjmp	.+78     	; 0x6ba6 <malloc+0x98>
    6b58:	00 93 fe 0a 	sts	0x0AFE, r16	; 0x800afe <__flp>
    6b5c:	10 93 ff 0a 	sts	0x0AFF, r17	; 0x800aff <__flp+0x1>
    6b60:	22 c0       	rjmp	.+68     	; 0x6ba6 <malloc+0x98>
    6b62:	21 15       	cp	r18, r1
    6b64:	31 05       	cpc	r19, r1
    6b66:	19 f0       	breq	.+6      	; 0x6b6e <malloc+0x60>
    6b68:	42 17       	cp	r20, r18
    6b6a:	53 07       	cpc	r21, r19
    6b6c:	18 f4       	brcc	.+6      	; 0x6b74 <malloc+0x66>
    6b6e:	9a 01       	movw	r18, r20
    6b70:	bd 01       	movw	r22, r26
    6b72:	ef 01       	movw	r28, r30
    6b74:	df 01       	movw	r26, r30
    6b76:	f8 01       	movw	r30, r16
    6b78:	db cf       	rjmp	.-74     	; 0x6b30 <malloc+0x22>
    6b7a:	21 15       	cp	r18, r1
    6b7c:	31 05       	cpc	r19, r1
    6b7e:	f9 f0       	breq	.+62     	; 0x6bbe <malloc+0xb0>
    6b80:	28 1b       	sub	r18, r24
    6b82:	39 0b       	sbc	r19, r25
    6b84:	24 30       	cpi	r18, 0x04	; 4
    6b86:	31 05       	cpc	r19, r1
    6b88:	80 f4       	brcc	.+32     	; 0x6baa <malloc+0x9c>
    6b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b8e:	61 15       	cp	r22, r1
    6b90:	71 05       	cpc	r23, r1
    6b92:	21 f0       	breq	.+8      	; 0x6b9c <malloc+0x8e>
    6b94:	fb 01       	movw	r30, r22
    6b96:	93 83       	std	Z+3, r25	; 0x03
    6b98:	82 83       	std	Z+2, r24	; 0x02
    6b9a:	04 c0       	rjmp	.+8      	; 0x6ba4 <malloc+0x96>
    6b9c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__flp+0x1>
    6ba0:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__flp>
    6ba4:	fe 01       	movw	r30, r28
    6ba6:	32 96       	adiw	r30, 0x02	; 2
    6ba8:	44 c0       	rjmp	.+136    	; 0x6c32 <malloc+0x124>
    6baa:	fe 01       	movw	r30, r28
    6bac:	e2 0f       	add	r30, r18
    6bae:	f3 1f       	adc	r31, r19
    6bb0:	81 93       	st	Z+, r24
    6bb2:	91 93       	st	Z+, r25
    6bb4:	22 50       	subi	r18, 0x02	; 2
    6bb6:	31 09       	sbc	r19, r1
    6bb8:	39 83       	std	Y+1, r19	; 0x01
    6bba:	28 83       	st	Y, r18
    6bbc:	3a c0       	rjmp	.+116    	; 0x6c32 <malloc+0x124>
    6bbe:	20 91 fc 0a 	lds	r18, 0x0AFC	; 0x800afc <__brkval>
    6bc2:	30 91 fd 0a 	lds	r19, 0x0AFD	; 0x800afd <__brkval+0x1>
    6bc6:	23 2b       	or	r18, r19
    6bc8:	41 f4       	brne	.+16     	; 0x6bda <malloc+0xcc>
    6bca:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6bce:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6bd2:	30 93 fd 0a 	sts	0x0AFD, r19	; 0x800afd <__brkval+0x1>
    6bd6:	20 93 fc 0a 	sts	0x0AFC, r18	; 0x800afc <__brkval>
    6bda:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6bde:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6be2:	21 15       	cp	r18, r1
    6be4:	31 05       	cpc	r19, r1
    6be6:	41 f4       	brne	.+16     	; 0x6bf8 <malloc+0xea>
    6be8:	2d b7       	in	r18, 0x3d	; 61
    6bea:	3e b7       	in	r19, 0x3e	; 62
    6bec:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6bf0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6bf4:	24 1b       	sub	r18, r20
    6bf6:	35 0b       	sbc	r19, r21
    6bf8:	e0 91 fc 0a 	lds	r30, 0x0AFC	; 0x800afc <__brkval>
    6bfc:	f0 91 fd 0a 	lds	r31, 0x0AFD	; 0x800afd <__brkval+0x1>
    6c00:	e2 17       	cp	r30, r18
    6c02:	f3 07       	cpc	r31, r19
    6c04:	a0 f4       	brcc	.+40     	; 0x6c2e <malloc+0x120>
    6c06:	2e 1b       	sub	r18, r30
    6c08:	3f 0b       	sbc	r19, r31
    6c0a:	28 17       	cp	r18, r24
    6c0c:	39 07       	cpc	r19, r25
    6c0e:	78 f0       	brcs	.+30     	; 0x6c2e <malloc+0x120>
    6c10:	ac 01       	movw	r20, r24
    6c12:	4e 5f       	subi	r20, 0xFE	; 254
    6c14:	5f 4f       	sbci	r21, 0xFF	; 255
    6c16:	24 17       	cp	r18, r20
    6c18:	35 07       	cpc	r19, r21
    6c1a:	48 f0       	brcs	.+18     	; 0x6c2e <malloc+0x120>
    6c1c:	4e 0f       	add	r20, r30
    6c1e:	5f 1f       	adc	r21, r31
    6c20:	50 93 fd 0a 	sts	0x0AFD, r21	; 0x800afd <__brkval+0x1>
    6c24:	40 93 fc 0a 	sts	0x0AFC, r20	; 0x800afc <__brkval>
    6c28:	81 93       	st	Z+, r24
    6c2a:	91 93       	st	Z+, r25
    6c2c:	02 c0       	rjmp	.+4      	; 0x6c32 <malloc+0x124>
    6c2e:	e0 e0       	ldi	r30, 0x00	; 0
    6c30:	f0 e0       	ldi	r31, 0x00	; 0
    6c32:	cf 01       	movw	r24, r30
    6c34:	df 91       	pop	r29
    6c36:	cf 91       	pop	r28
    6c38:	1f 91       	pop	r17
    6c3a:	0f 91       	pop	r16
    6c3c:	08 95       	ret

00006c3e <free>:
    6c3e:	cf 93       	push	r28
    6c40:	df 93       	push	r29
    6c42:	00 97       	sbiw	r24, 0x00	; 0
    6c44:	09 f4       	brne	.+2      	; 0x6c48 <free+0xa>
    6c46:	81 c0       	rjmp	.+258    	; 0x6d4a <free+0x10c>
    6c48:	fc 01       	movw	r30, r24
    6c4a:	32 97       	sbiw	r30, 0x02	; 2
    6c4c:	13 82       	std	Z+3, r1	; 0x03
    6c4e:	12 82       	std	Z+2, r1	; 0x02
    6c50:	a0 91 fe 0a 	lds	r26, 0x0AFE	; 0x800afe <__flp>
    6c54:	b0 91 ff 0a 	lds	r27, 0x0AFF	; 0x800aff <__flp+0x1>
    6c58:	10 97       	sbiw	r26, 0x00	; 0
    6c5a:	81 f4       	brne	.+32     	; 0x6c7c <free+0x3e>
    6c5c:	20 81       	ld	r18, Z
    6c5e:	31 81       	ldd	r19, Z+1	; 0x01
    6c60:	82 0f       	add	r24, r18
    6c62:	93 1f       	adc	r25, r19
    6c64:	20 91 fc 0a 	lds	r18, 0x0AFC	; 0x800afc <__brkval>
    6c68:	30 91 fd 0a 	lds	r19, 0x0AFD	; 0x800afd <__brkval+0x1>
    6c6c:	28 17       	cp	r18, r24
    6c6e:	39 07       	cpc	r19, r25
    6c70:	51 f5       	brne	.+84     	; 0x6cc6 <free+0x88>
    6c72:	f0 93 fd 0a 	sts	0x0AFD, r31	; 0x800afd <__brkval+0x1>
    6c76:	e0 93 fc 0a 	sts	0x0AFC, r30	; 0x800afc <__brkval>
    6c7a:	67 c0       	rjmp	.+206    	; 0x6d4a <free+0x10c>
    6c7c:	ed 01       	movw	r28, r26
    6c7e:	20 e0       	ldi	r18, 0x00	; 0
    6c80:	30 e0       	ldi	r19, 0x00	; 0
    6c82:	ce 17       	cp	r28, r30
    6c84:	df 07       	cpc	r29, r31
    6c86:	40 f4       	brcc	.+16     	; 0x6c98 <free+0x5a>
    6c88:	4a 81       	ldd	r20, Y+2	; 0x02
    6c8a:	5b 81       	ldd	r21, Y+3	; 0x03
    6c8c:	9e 01       	movw	r18, r28
    6c8e:	41 15       	cp	r20, r1
    6c90:	51 05       	cpc	r21, r1
    6c92:	f1 f0       	breq	.+60     	; 0x6cd0 <free+0x92>
    6c94:	ea 01       	movw	r28, r20
    6c96:	f5 cf       	rjmp	.-22     	; 0x6c82 <free+0x44>
    6c98:	d3 83       	std	Z+3, r29	; 0x03
    6c9a:	c2 83       	std	Z+2, r28	; 0x02
    6c9c:	40 81       	ld	r20, Z
    6c9e:	51 81       	ldd	r21, Z+1	; 0x01
    6ca0:	84 0f       	add	r24, r20
    6ca2:	95 1f       	adc	r25, r21
    6ca4:	c8 17       	cp	r28, r24
    6ca6:	d9 07       	cpc	r29, r25
    6ca8:	59 f4       	brne	.+22     	; 0x6cc0 <free+0x82>
    6caa:	88 81       	ld	r24, Y
    6cac:	99 81       	ldd	r25, Y+1	; 0x01
    6cae:	84 0f       	add	r24, r20
    6cb0:	95 1f       	adc	r25, r21
    6cb2:	02 96       	adiw	r24, 0x02	; 2
    6cb4:	91 83       	std	Z+1, r25	; 0x01
    6cb6:	80 83       	st	Z, r24
    6cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    6cba:	9b 81       	ldd	r25, Y+3	; 0x03
    6cbc:	93 83       	std	Z+3, r25	; 0x03
    6cbe:	82 83       	std	Z+2, r24	; 0x02
    6cc0:	21 15       	cp	r18, r1
    6cc2:	31 05       	cpc	r19, r1
    6cc4:	29 f4       	brne	.+10     	; 0x6cd0 <free+0x92>
    6cc6:	f0 93 ff 0a 	sts	0x0AFF, r31	; 0x800aff <__flp+0x1>
    6cca:	e0 93 fe 0a 	sts	0x0AFE, r30	; 0x800afe <__flp>
    6cce:	3d c0       	rjmp	.+122    	; 0x6d4a <free+0x10c>
    6cd0:	e9 01       	movw	r28, r18
    6cd2:	fb 83       	std	Y+3, r31	; 0x03
    6cd4:	ea 83       	std	Y+2, r30	; 0x02
    6cd6:	49 91       	ld	r20, Y+
    6cd8:	59 91       	ld	r21, Y+
    6cda:	c4 0f       	add	r28, r20
    6cdc:	d5 1f       	adc	r29, r21
    6cde:	ec 17       	cp	r30, r28
    6ce0:	fd 07       	cpc	r31, r29
    6ce2:	61 f4       	brne	.+24     	; 0x6cfc <free+0xbe>
    6ce4:	80 81       	ld	r24, Z
    6ce6:	91 81       	ldd	r25, Z+1	; 0x01
    6ce8:	84 0f       	add	r24, r20
    6cea:	95 1f       	adc	r25, r21
    6cec:	02 96       	adiw	r24, 0x02	; 2
    6cee:	e9 01       	movw	r28, r18
    6cf0:	99 83       	std	Y+1, r25	; 0x01
    6cf2:	88 83       	st	Y, r24
    6cf4:	82 81       	ldd	r24, Z+2	; 0x02
    6cf6:	93 81       	ldd	r25, Z+3	; 0x03
    6cf8:	9b 83       	std	Y+3, r25	; 0x03
    6cfa:	8a 83       	std	Y+2, r24	; 0x02
    6cfc:	e0 e0       	ldi	r30, 0x00	; 0
    6cfe:	f0 e0       	ldi	r31, 0x00	; 0
    6d00:	12 96       	adiw	r26, 0x02	; 2
    6d02:	8d 91       	ld	r24, X+
    6d04:	9c 91       	ld	r25, X
    6d06:	13 97       	sbiw	r26, 0x03	; 3
    6d08:	00 97       	sbiw	r24, 0x00	; 0
    6d0a:	19 f0       	breq	.+6      	; 0x6d12 <free+0xd4>
    6d0c:	fd 01       	movw	r30, r26
    6d0e:	dc 01       	movw	r26, r24
    6d10:	f7 cf       	rjmp	.-18     	; 0x6d00 <free+0xc2>
    6d12:	8d 91       	ld	r24, X+
    6d14:	9c 91       	ld	r25, X
    6d16:	11 97       	sbiw	r26, 0x01	; 1
    6d18:	9d 01       	movw	r18, r26
    6d1a:	2e 5f       	subi	r18, 0xFE	; 254
    6d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1e:	82 0f       	add	r24, r18
    6d20:	93 1f       	adc	r25, r19
    6d22:	20 91 fc 0a 	lds	r18, 0x0AFC	; 0x800afc <__brkval>
    6d26:	30 91 fd 0a 	lds	r19, 0x0AFD	; 0x800afd <__brkval+0x1>
    6d2a:	28 17       	cp	r18, r24
    6d2c:	39 07       	cpc	r19, r25
    6d2e:	69 f4       	brne	.+26     	; 0x6d4a <free+0x10c>
    6d30:	30 97       	sbiw	r30, 0x00	; 0
    6d32:	29 f4       	brne	.+10     	; 0x6d3e <free+0x100>
    6d34:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__flp+0x1>
    6d38:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__flp>
    6d3c:	02 c0       	rjmp	.+4      	; 0x6d42 <free+0x104>
    6d3e:	13 82       	std	Z+3, r1	; 0x03
    6d40:	12 82       	std	Z+2, r1	; 0x02
    6d42:	b0 93 fd 0a 	sts	0x0AFD, r27	; 0x800afd <__brkval+0x1>
    6d46:	a0 93 fc 0a 	sts	0x0AFC, r26	; 0x800afc <__brkval>
    6d4a:	df 91       	pop	r29
    6d4c:	cf 91       	pop	r28
    6d4e:	08 95       	ret

00006d50 <realloc>:
    6d50:	6f 92       	push	r6
    6d52:	7f 92       	push	r7
    6d54:	8f 92       	push	r8
    6d56:	9f 92       	push	r9
    6d58:	af 92       	push	r10
    6d5a:	bf 92       	push	r11
    6d5c:	cf 92       	push	r12
    6d5e:	df 92       	push	r13
    6d60:	ef 92       	push	r14
    6d62:	ff 92       	push	r15
    6d64:	0f 93       	push	r16
    6d66:	1f 93       	push	r17
    6d68:	cf 93       	push	r28
    6d6a:	df 93       	push	r29
    6d6c:	00 97       	sbiw	r24, 0x00	; 0
    6d6e:	81 f4       	brne	.+32     	; 0x6d90 <realloc+0x40>
    6d70:	cb 01       	movw	r24, r22
    6d72:	df 91       	pop	r29
    6d74:	cf 91       	pop	r28
    6d76:	1f 91       	pop	r17
    6d78:	0f 91       	pop	r16
    6d7a:	ff 90       	pop	r15
    6d7c:	ef 90       	pop	r14
    6d7e:	df 90       	pop	r13
    6d80:	cf 90       	pop	r12
    6d82:	bf 90       	pop	r11
    6d84:	af 90       	pop	r10
    6d86:	9f 90       	pop	r9
    6d88:	8f 90       	pop	r8
    6d8a:	7f 90       	pop	r7
    6d8c:	6f 90       	pop	r6
    6d8e:	bf ce       	rjmp	.-642    	; 0x6b0e <malloc>
    6d90:	fc 01       	movw	r30, r24
    6d92:	e6 0f       	add	r30, r22
    6d94:	f7 1f       	adc	r31, r23
    6d96:	9c 01       	movw	r18, r24
    6d98:	22 50       	subi	r18, 0x02	; 2
    6d9a:	31 09       	sbc	r19, r1
    6d9c:	e2 17       	cp	r30, r18
    6d9e:	f3 07       	cpc	r31, r19
    6da0:	08 f4       	brcc	.+2      	; 0x6da4 <realloc+0x54>
    6da2:	a5 c0       	rjmp	.+330    	; 0x6eee <realloc+0x19e>
    6da4:	ec 01       	movw	r28, r24
    6da6:	d9 01       	movw	r26, r18
    6da8:	0d 91       	ld	r16, X+
    6daa:	1c 91       	ld	r17, X
    6dac:	11 97       	sbiw	r26, 0x01	; 1
    6dae:	06 17       	cp	r16, r22
    6db0:	17 07       	cpc	r17, r23
    6db2:	a8 f0       	brcs	.+42     	; 0x6dde <realloc+0x8e>
    6db4:	05 30       	cpi	r16, 0x05	; 5
    6db6:	11 05       	cpc	r17, r1
    6db8:	08 f4       	brcc	.+2      	; 0x6dbc <realloc+0x6c>
    6dba:	97 c0       	rjmp	.+302    	; 0x6eea <realloc+0x19a>
    6dbc:	c8 01       	movw	r24, r16
    6dbe:	04 97       	sbiw	r24, 0x04	; 4
    6dc0:	86 17       	cp	r24, r22
    6dc2:	97 07       	cpc	r25, r23
    6dc4:	08 f4       	brcc	.+2      	; 0x6dc8 <realloc+0x78>
    6dc6:	91 c0       	rjmp	.+290    	; 0x6eea <realloc+0x19a>
    6dc8:	02 50       	subi	r16, 0x02	; 2
    6dca:	11 09       	sbc	r17, r1
    6dcc:	06 1b       	sub	r16, r22
    6dce:	17 0b       	sbc	r17, r23
    6dd0:	01 93       	st	Z+, r16
    6dd2:	11 93       	st	Z+, r17
    6dd4:	6d 93       	st	X+, r22
    6dd6:	7c 93       	st	X, r23
    6dd8:	cf 01       	movw	r24, r30
    6dda:	31 df       	rcall	.-414    	; 0x6c3e <free>
    6ddc:	86 c0       	rjmp	.+268    	; 0x6eea <realloc+0x19a>
    6dde:	5b 01       	movw	r10, r22
    6de0:	a0 1a       	sub	r10, r16
    6de2:	b1 0a       	sbc	r11, r17
    6de4:	4c 01       	movw	r8, r24
    6de6:	80 0e       	add	r8, r16
    6de8:	91 1e       	adc	r9, r17
    6dea:	a0 91 fe 0a 	lds	r26, 0x0AFE	; 0x800afe <__flp>
    6dee:	b0 91 ff 0a 	lds	r27, 0x0AFF	; 0x800aff <__flp+0x1>
    6df2:	61 2c       	mov	r6, r1
    6df4:	71 2c       	mov	r7, r1
    6df6:	e1 2c       	mov	r14, r1
    6df8:	f1 2c       	mov	r15, r1
    6dfa:	10 97       	sbiw	r26, 0x00	; 0
    6dfc:	09 f4       	brne	.+2      	; 0x6e00 <realloc+0xb0>
    6dfe:	46 c0       	rjmp	.+140    	; 0x6e8c <realloc+0x13c>
    6e00:	8d 91       	ld	r24, X+
    6e02:	9c 91       	ld	r25, X
    6e04:	11 97       	sbiw	r26, 0x01	; 1
    6e06:	a8 15       	cp	r26, r8
    6e08:	b9 05       	cpc	r27, r9
    6e0a:	b1 f5       	brne	.+108    	; 0x6e78 <realloc+0x128>
    6e0c:	6c 01       	movw	r12, r24
    6e0e:	42 e0       	ldi	r20, 0x02	; 2
    6e10:	c4 0e       	add	r12, r20
    6e12:	d1 1c       	adc	r13, r1
    6e14:	ca 14       	cp	r12, r10
    6e16:	db 04       	cpc	r13, r11
    6e18:	78 f1       	brcs	.+94     	; 0x6e78 <realloc+0x128>
    6e1a:	4c 01       	movw	r8, r24
    6e1c:	8a 18       	sub	r8, r10
    6e1e:	9b 08       	sbc	r9, r11
    6e20:	64 01       	movw	r12, r8
    6e22:	42 e0       	ldi	r20, 0x02	; 2
    6e24:	c4 0e       	add	r12, r20
    6e26:	d1 1c       	adc	r13, r1
    6e28:	12 96       	adiw	r26, 0x02	; 2
    6e2a:	bc 90       	ld	r11, X
    6e2c:	12 97       	sbiw	r26, 0x02	; 2
    6e2e:	13 96       	adiw	r26, 0x03	; 3
    6e30:	ac 91       	ld	r26, X
    6e32:	b5 e0       	ldi	r27, 0x05	; 5
    6e34:	cb 16       	cp	r12, r27
    6e36:	d1 04       	cpc	r13, r1
    6e38:	40 f0       	brcs	.+16     	; 0x6e4a <realloc+0xfa>
    6e3a:	b2 82       	std	Z+2, r11	; 0x02
    6e3c:	a3 83       	std	Z+3, r26	; 0x03
    6e3e:	91 82       	std	Z+1, r9	; 0x01
    6e40:	80 82       	st	Z, r8
    6e42:	d9 01       	movw	r26, r18
    6e44:	6d 93       	st	X+, r22
    6e46:	7c 93       	st	X, r23
    6e48:	09 c0       	rjmp	.+18     	; 0x6e5c <realloc+0x10c>
    6e4a:	0e 5f       	subi	r16, 0xFE	; 254
    6e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e4e:	80 0f       	add	r24, r16
    6e50:	91 1f       	adc	r25, r17
    6e52:	f9 01       	movw	r30, r18
    6e54:	91 83       	std	Z+1, r25	; 0x01
    6e56:	80 83       	st	Z, r24
    6e58:	eb 2d       	mov	r30, r11
    6e5a:	fa 2f       	mov	r31, r26
    6e5c:	e1 14       	cp	r14, r1
    6e5e:	f1 04       	cpc	r15, r1
    6e60:	31 f0       	breq	.+12     	; 0x6e6e <realloc+0x11e>
    6e62:	d7 01       	movw	r26, r14
    6e64:	13 96       	adiw	r26, 0x03	; 3
    6e66:	fc 93       	st	X, r31
    6e68:	ee 93       	st	-X, r30
    6e6a:	12 97       	sbiw	r26, 0x02	; 2
    6e6c:	3e c0       	rjmp	.+124    	; 0x6eea <realloc+0x19a>
    6e6e:	f0 93 ff 0a 	sts	0x0AFF, r31	; 0x800aff <__flp+0x1>
    6e72:	e0 93 fe 0a 	sts	0x0AFE, r30	; 0x800afe <__flp>
    6e76:	39 c0       	rjmp	.+114    	; 0x6eea <realloc+0x19a>
    6e78:	68 16       	cp	r6, r24
    6e7a:	79 06       	cpc	r7, r25
    6e7c:	08 f4       	brcc	.+2      	; 0x6e80 <realloc+0x130>
    6e7e:	3c 01       	movw	r6, r24
    6e80:	7d 01       	movw	r14, r26
    6e82:	12 96       	adiw	r26, 0x02	; 2
    6e84:	0d 90       	ld	r0, X+
    6e86:	bc 91       	ld	r27, X
    6e88:	a0 2d       	mov	r26, r0
    6e8a:	b7 cf       	rjmp	.-146    	; 0x6dfa <realloc+0xaa>
    6e8c:	80 91 fc 0a 	lds	r24, 0x0AFC	; 0x800afc <__brkval>
    6e90:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <__brkval+0x1>
    6e94:	88 16       	cp	r8, r24
    6e96:	99 06       	cpc	r9, r25
    6e98:	e1 f4       	brne	.+56     	; 0x6ed2 <realloc+0x182>
    6e9a:	66 16       	cp	r6, r22
    6e9c:	77 06       	cpc	r7, r23
    6e9e:	c8 f4       	brcc	.+50     	; 0x6ed2 <realloc+0x182>
    6ea0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    6ea4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    6ea8:	00 97       	sbiw	r24, 0x00	; 0
    6eaa:	41 f4       	brne	.+16     	; 0x6ebc <realloc+0x16c>
    6eac:	8d b7       	in	r24, 0x3d	; 61
    6eae:	9e b7       	in	r25, 0x3e	; 62
    6eb0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6eb4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6eb8:	84 1b       	sub	r24, r20
    6eba:	95 0b       	sbc	r25, r21
    6ebc:	e8 17       	cp	r30, r24
    6ebe:	f9 07       	cpc	r31, r25
    6ec0:	b0 f4       	brcc	.+44     	; 0x6eee <realloc+0x19e>
    6ec2:	f0 93 fd 0a 	sts	0x0AFD, r31	; 0x800afd <__brkval+0x1>
    6ec6:	e0 93 fc 0a 	sts	0x0AFC, r30	; 0x800afc <__brkval>
    6eca:	f9 01       	movw	r30, r18
    6ecc:	71 83       	std	Z+1, r23	; 0x01
    6ece:	60 83       	st	Z, r22
    6ed0:	0c c0       	rjmp	.+24     	; 0x6eea <realloc+0x19a>
    6ed2:	cb 01       	movw	r24, r22
    6ed4:	1c de       	rcall	.-968    	; 0x6b0e <malloc>
    6ed6:	7c 01       	movw	r14, r24
    6ed8:	00 97       	sbiw	r24, 0x00	; 0
    6eda:	49 f0       	breq	.+18     	; 0x6eee <realloc+0x19e>
    6edc:	a8 01       	movw	r20, r16
    6ede:	be 01       	movw	r22, r28
    6ee0:	20 d0       	rcall	.+64     	; 0x6f22 <memcpy>
    6ee2:	ce 01       	movw	r24, r28
    6ee4:	ac de       	rcall	.-680    	; 0x6c3e <free>
    6ee6:	c7 01       	movw	r24, r14
    6ee8:	04 c0       	rjmp	.+8      	; 0x6ef2 <realloc+0x1a2>
    6eea:	ce 01       	movw	r24, r28
    6eec:	02 c0       	rjmp	.+4      	; 0x6ef2 <realloc+0x1a2>
    6eee:	80 e0       	ldi	r24, 0x00	; 0
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	df 91       	pop	r29
    6ef4:	cf 91       	pop	r28
    6ef6:	1f 91       	pop	r17
    6ef8:	0f 91       	pop	r16
    6efa:	ff 90       	pop	r15
    6efc:	ef 90       	pop	r14
    6efe:	df 90       	pop	r13
    6f00:	cf 90       	pop	r12
    6f02:	bf 90       	pop	r11
    6f04:	af 90       	pop	r10
    6f06:	9f 90       	pop	r9
    6f08:	8f 90       	pop	r8
    6f0a:	7f 90       	pop	r7
    6f0c:	6f 90       	pop	r6
    6f0e:	08 95       	ret

00006f10 <memcpy_P>:
    6f10:	fb 01       	movw	r30, r22
    6f12:	dc 01       	movw	r26, r24
    6f14:	02 c0       	rjmp	.+4      	; 0x6f1a <memcpy_P+0xa>
    6f16:	05 90       	lpm	r0, Z+
    6f18:	0d 92       	st	X+, r0
    6f1a:	41 50       	subi	r20, 0x01	; 1
    6f1c:	50 40       	sbci	r21, 0x00	; 0
    6f1e:	d8 f7       	brcc	.-10     	; 0x6f16 <memcpy_P+0x6>
    6f20:	08 95       	ret

00006f22 <memcpy>:
    6f22:	fb 01       	movw	r30, r22
    6f24:	dc 01       	movw	r26, r24
    6f26:	02 c0       	rjmp	.+4      	; 0x6f2c <memcpy+0xa>
    6f28:	01 90       	ld	r0, Z+
    6f2a:	0d 92       	st	X+, r0
    6f2c:	41 50       	subi	r20, 0x01	; 1
    6f2e:	50 40       	sbci	r21, 0x00	; 0
    6f30:	d8 f7       	brcc	.-10     	; 0x6f28 <memcpy+0x6>
    6f32:	08 95       	ret

00006f34 <strcpy>:
    6f34:	fb 01       	movw	r30, r22
    6f36:	dc 01       	movw	r26, r24
    6f38:	01 90       	ld	r0, Z+
    6f3a:	0d 92       	st	X+, r0
    6f3c:	00 20       	and	r0, r0
    6f3e:	e1 f7       	brne	.-8      	; 0x6f38 <strcpy+0x4>
    6f40:	08 95       	ret

00006f42 <strncpy>:
    6f42:	fb 01       	movw	r30, r22
    6f44:	dc 01       	movw	r26, r24
    6f46:	41 50       	subi	r20, 0x01	; 1
    6f48:	50 40       	sbci	r21, 0x00	; 0
    6f4a:	48 f0       	brcs	.+18     	; 0x6f5e <strncpy+0x1c>
    6f4c:	01 90       	ld	r0, Z+
    6f4e:	0d 92       	st	X+, r0
    6f50:	00 20       	and	r0, r0
    6f52:	c9 f7       	brne	.-14     	; 0x6f46 <strncpy+0x4>
    6f54:	01 c0       	rjmp	.+2      	; 0x6f58 <strncpy+0x16>
    6f56:	1d 92       	st	X+, r1
    6f58:	41 50       	subi	r20, 0x01	; 1
    6f5a:	50 40       	sbci	r21, 0x00	; 0
    6f5c:	e0 f7       	brcc	.-8      	; 0x6f56 <strncpy+0x14>
    6f5e:	08 95       	ret

00006f60 <utoa>:
    6f60:	45 32       	cpi	r20, 0x25	; 37
    6f62:	51 05       	cpc	r21, r1
    6f64:	18 f4       	brcc	.+6      	; 0x6f6c <utoa+0xc>
    6f66:	42 30       	cpi	r20, 0x02	; 2
    6f68:	08 f0       	brcs	.+2      	; 0x6f6c <utoa+0xc>
    6f6a:	04 c0       	rjmp	.+8      	; 0x6f74 <__utoa_ncheck>
    6f6c:	fb 01       	movw	r30, r22
    6f6e:	10 82       	st	Z, r1
    6f70:	cb 01       	movw	r24, r22
    6f72:	08 95       	ret

00006f74 <__utoa_ncheck>:
    6f74:	bb 27       	eor	r27, r27

00006f76 <__utoa_common>:
    6f76:	fb 01       	movw	r30, r22
    6f78:	55 27       	eor	r21, r21
    6f7a:	aa 27       	eor	r26, r26
    6f7c:	88 0f       	add	r24, r24
    6f7e:	99 1f       	adc	r25, r25
    6f80:	aa 1f       	adc	r26, r26
    6f82:	a4 17       	cp	r26, r20
    6f84:	10 f0       	brcs	.+4      	; 0x6f8a <__utoa_common+0x14>
    6f86:	a4 1b       	sub	r26, r20
    6f88:	83 95       	inc	r24
    6f8a:	50 51       	subi	r21, 0x10	; 16
    6f8c:	b9 f7       	brne	.-18     	; 0x6f7c <__utoa_common+0x6>
    6f8e:	a0 5d       	subi	r26, 0xD0	; 208
    6f90:	aa 33       	cpi	r26, 0x3A	; 58
    6f92:	08 f0       	brcs	.+2      	; 0x6f96 <__utoa_common+0x20>
    6f94:	a9 5d       	subi	r26, 0xD9	; 217
    6f96:	a1 93       	st	Z+, r26
    6f98:	00 97       	sbiw	r24, 0x00	; 0
    6f9a:	79 f7       	brne	.-34     	; 0x6f7a <__utoa_common+0x4>
    6f9c:	b1 11       	cpse	r27, r1
    6f9e:	b1 93       	st	Z+, r27
    6fa0:	11 92       	st	Z+, r1
    6fa2:	cb 01       	movw	r24, r22
    6fa4:	00 c0       	rjmp	.+0      	; 0x6fa6 <strrev>

00006fa6 <strrev>:
    6fa6:	dc 01       	movw	r26, r24
    6fa8:	fc 01       	movw	r30, r24
    6faa:	67 2f       	mov	r22, r23
    6fac:	71 91       	ld	r23, Z+
    6fae:	77 23       	and	r23, r23
    6fb0:	e1 f7       	brne	.-8      	; 0x6faa <strrev+0x4>
    6fb2:	32 97       	sbiw	r30, 0x02	; 2
    6fb4:	04 c0       	rjmp	.+8      	; 0x6fbe <strrev+0x18>
    6fb6:	7c 91       	ld	r23, X
    6fb8:	6d 93       	st	X+, r22
    6fba:	70 83       	st	Z, r23
    6fbc:	62 91       	ld	r22, -Z
    6fbe:	ae 17       	cp	r26, r30
    6fc0:	bf 07       	cpc	r27, r31
    6fc2:	c8 f3       	brcs	.-14     	; 0x6fb6 <strrev+0x10>
    6fc4:	08 95       	ret

00006fc6 <__do_global_dtors>:
    6fc6:	11 e0       	ldi	r17, 0x01	; 1
    6fc8:	c8 e8       	ldi	r28, 0x88	; 136
    6fca:	d1 e0       	ldi	r29, 0x01	; 1
    6fcc:	00 e0       	ldi	r16, 0x00	; 0
    6fce:	05 c0       	rjmp	.+10     	; 0x6fda <__do_global_dtors+0x14>
    6fd0:	80 2f       	mov	r24, r16
    6fd2:	fe 01       	movw	r30, r28
    6fd4:	ff db       	rcall	.-2050   	; 0x67d4 <__tablejump2__>
    6fd6:	21 96       	adiw	r28, 0x01	; 1
    6fd8:	01 1d       	adc	r16, r1
    6fda:	c9 38       	cpi	r28, 0x89	; 137
    6fdc:	d1 07       	cpc	r29, r17
    6fde:	80 e0       	ldi	r24, 0x00	; 0
    6fe0:	08 07       	cpc	r16, r24
    6fe2:	b1 f7       	brne	.-20     	; 0x6fd0 <__do_global_dtors+0xa>
    6fe4:	f8 94       	cli

00006fe6 <__stop_program>:
    6fe6:	ff cf       	rjmp	.-2      	; 0x6fe6 <__stop_program>
