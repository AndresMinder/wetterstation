
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b0  00800200  00004b5a  00004bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047c  008004b0  008004b0  00004e9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004e9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d18  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002c56f  00000000  00000000  00005c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006229  00000000  00000000  00032197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000821e  00000000  00000000  000383c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003190  00000000  00000000  000405e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b76  00000000  00000000  00043770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012ba1  00000000  00000000  0004a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f00  00000000  00000000  0005ce87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5d c1       	rjmp	.+698    	; 0x2bc <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__vector_1>
       8:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_2>
       c:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__vector_3>
      10:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__vector_4>
      14:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__vector_5>
      18:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__vector_6>
      1c:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_7>
      20:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_8>
      24:	7c c1       	rjmp	.+760    	; 0x31e <__bad_interrupt>
      26:	00 00       	nop
      28:	7a c1       	rjmp	.+756    	; 0x31e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	78 c1       	rjmp	.+752    	; 0x31e <__bad_interrupt>
      2e:	00 00       	nop
      30:	76 c1       	rjmp	.+748    	; 0x31e <__bad_interrupt>
      32:	00 00       	nop
      34:	74 c1       	rjmp	.+744    	; 0x31e <__bad_interrupt>
      36:	00 00       	nop
      38:	72 c1       	rjmp	.+740    	; 0x31e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	70 c1       	rjmp	.+736    	; 0x31e <__bad_interrupt>
      3e:	00 00       	nop
      40:	6e c1       	rjmp	.+732    	; 0x31e <__bad_interrupt>
      42:	00 00       	nop
      44:	6c c1       	rjmp	.+728    	; 0x31e <__bad_interrupt>
      46:	00 00       	nop
      48:	6a c1       	rjmp	.+724    	; 0x31e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	68 c1       	rjmp	.+720    	; 0x31e <__bad_interrupt>
      4e:	00 00       	nop
      50:	66 c1       	rjmp	.+716    	; 0x31e <__bad_interrupt>
      52:	00 00       	nop
      54:	64 c1       	rjmp	.+712    	; 0x31e <__bad_interrupt>
      56:	00 00       	nop
      58:	62 c1       	rjmp	.+708    	; 0x31e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__vector_23>
      60:	5e c1       	rjmp	.+700    	; 0x31e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__vector_25>
      68:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__vector_26>
      6c:	58 c1       	rjmp	.+688    	; 0x31e <__bad_interrupt>
      6e:	00 00       	nop
      70:	56 c1       	rjmp	.+684    	; 0x31e <__bad_interrupt>
      72:	00 00       	nop
      74:	54 c1       	rjmp	.+680    	; 0x31e <__bad_interrupt>
      76:	00 00       	nop
      78:	52 c1       	rjmp	.+676    	; 0x31e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	50 c1       	rjmp	.+672    	; 0x31e <__bad_interrupt>
      7e:	00 00       	nop
      80:	4e c1       	rjmp	.+668    	; 0x31e <__bad_interrupt>
      82:	00 00       	nop
      84:	4c c1       	rjmp	.+664    	; 0x31e <__bad_interrupt>
      86:	00 00       	nop
      88:	4a c1       	rjmp	.+660    	; 0x31e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	48 c1       	rjmp	.+656    	; 0x31e <__bad_interrupt>
      8e:	00 00       	nop
      90:	46 c1       	rjmp	.+652    	; 0x31e <__bad_interrupt>
      92:	00 00       	nop
      94:	44 c1       	rjmp	.+648    	; 0x31e <__bad_interrupt>
      96:	00 00       	nop
      98:	42 c1       	rjmp	.+644    	; 0x31e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_39>
      a0:	3e c1       	rjmp	.+636    	; 0x31e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3c c1       	rjmp	.+632    	; 0x31e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3a c1       	rjmp	.+628    	; 0x31e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	38 c1       	rjmp	.+624    	; 0x31e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	36 c1       	rjmp	.+620    	; 0x31e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	34 c1       	rjmp	.+616    	; 0x31e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	32 c1       	rjmp	.+612    	; 0x31e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	30 c1       	rjmp	.+608    	; 0x31e <__bad_interrupt>
      be:	00 00       	nop
      c0:	2e c1       	rjmp	.+604    	; 0x31e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2c c1       	rjmp	.+600    	; 0x31e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2a c1       	rjmp	.+596    	; 0x31e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	28 c1       	rjmp	.+592    	; 0x31e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	26 c1       	rjmp	.+588    	; 0x31e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	24 c1       	rjmp	.+584    	; 0x31e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	22 c1       	rjmp	.+580    	; 0x31e <__bad_interrupt>
      da:	00 00       	nop
      dc:	20 c1       	rjmp	.+576    	; 0x31e <__bad_interrupt>
      de:	00 00       	nop
      e0:	1e c1       	rjmp	.+572    	; 0x31e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_ZN15Adafruit_BME2806read24Eh+0x10c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	9d 16       	cp	r9, r29
     168:	a0 16       	cp	r10, r16
     16a:	8f 16       	cp	r8, r31
     16c:	93 16       	cp	r9, r19
     16e:	99 16       	cp	r9, r25
     170:	d7 16       	cp	r13, r23
     172:	a4 16       	cp	r10, r20
     174:	a8 16       	cp	r10, r24
     176:	ae 16       	cp	r10, r30
     178:	b2 16       	cp	r11, r18
     17a:	b6 16       	cp	r11, r22
     17c:	bc 16       	cp	r11, r28
     17e:	c0 16       	cp	r12, r16
     180:	c4 16       	cp	r12, r20
     182:	d7 16       	cp	r13, r23
     184:	ca 16       	cp	r12, r26
     186:	ce 16       	cp	r12, r30
     188:	d2 16       	cp	r13, r18

0000018a <__trampolines_end>:
     18a:	00 00       	nop
     18c:	0a 0b       	sbc	r16, r26
     18e:	02 09       	sbc	r16, r2
     190:	0c 0d       	add	r16, r12
     192:	0e 08       	sbc	r0, r14
     194:	07 03       	mulsu	r16, r23
     196:	04 01       	movw	r0, r8
	...
     1b4:	00 00       	nop
     1b6:	12 11       	cpse	r17, r2
     1b8:	10 00       	.word	0x0010	; ????
	...

000001d0 <digital_pin_to_bit_mask_PGM>:
     1d0:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1e0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1f0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     200:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     210:	04 08 10 20 40 80                                   ... @.

00000216 <digital_pin_to_port_PGM>:
     216:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     226:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     236:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     246:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     256:	0b 0b 0b 0b 0b 0b                                   ......

0000025c <port_to_input_PGM>:
     25c:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     26c:	00 01 00 00 03 01 06 01 09 01                       ..........

00000276 <port_to_output_PGM>:
     276:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     286:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000290 <port_to_mode_PGM>:
     290:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2a0:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002aa <__ctors_start>:
     2aa:	90 01       	movw	r18, r0
     2ac:	34 02       	muls	r19, r20
     2ae:	e4 0c       	add	r14, r4
     2b0:	ec 0c       	add	r14, r12
     2b2:	55 12       	cpse	r5, r21
     2b4:	c8 18       	sub	r12, r8
     2b6:	b7 1a       	sub	r11, r23

000002b8 <__ctors_end>:
     2b8:	ae 01       	movw	r20, r28
     2ba:	43 02       	muls	r20, r19

000002bc <__dtors_end>:
     2bc:	11 24       	eor	r1, r1
     2be:	1f be       	out	0x3f, r1	; 63
     2c0:	cf ef       	ldi	r28, 0xFF	; 255
     2c2:	d1 e2       	ldi	r29, 0x21	; 33
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	00 e0       	ldi	r16, 0x00	; 0
     2ca:	0c bf       	out	0x3c, r16	; 60

000002cc <__do_copy_data>:
     2cc:	14 e0       	ldi	r17, 0x04	; 4
     2ce:	a0 e0       	ldi	r26, 0x00	; 0
     2d0:	b2 e0       	ldi	r27, 0x02	; 2
     2d2:	ea e5       	ldi	r30, 0x5A	; 90
     2d4:	fb e4       	ldi	r31, 0x4B	; 75
     2d6:	00 e0       	ldi	r16, 0x00	; 0
     2d8:	0b bf       	out	0x3b, r16	; 59
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__do_copy_data+0x14>
     2dc:	07 90       	elpm	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	a0 3b       	cpi	r26, 0xB0	; 176
     2e2:	b1 07       	cpc	r27, r17
     2e4:	d9 f7       	brne	.-10     	; 0x2dc <__do_copy_data+0x10>

000002e6 <__do_clear_bss>:
     2e6:	29 e0       	ldi	r18, 0x09	; 9
     2e8:	a0 eb       	ldi	r26, 0xB0	; 176
     2ea:	b4 e0       	ldi	r27, 0x04	; 4
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <.do_clear_bss_start>

000002ee <.do_clear_bss_loop>:
     2ee:	1d 92       	st	X+, r1

000002f0 <.do_clear_bss_start>:
     2f0:	ac 32       	cpi	r26, 0x2C	; 44
     2f2:	b2 07       	cpc	r27, r18
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <.do_clear_bss_loop>

000002f6 <__do_global_ctors>:
     2f6:	11 e0       	ldi	r17, 0x01	; 1
     2f8:	cc e5       	ldi	r28, 0x5C	; 92
     2fa:	d1 e0       	ldi	r29, 0x01	; 1
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <__do_global_ctors+0x16>
     300:	21 97       	sbiw	r28, 0x01	; 1
     302:	01 09       	sbc	r16, r1
     304:	80 2f       	mov	r24, r16
     306:	fe 01       	movw	r30, r28
     308:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__tablejump2__>
     30c:	c5 35       	cpi	r28, 0x55	; 85
     30e:	d1 07       	cpc	r29, r17
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	08 07       	cpc	r16, r24
     314:	a9 f7       	brne	.-22     	; 0x300 <__do_global_ctors+0xa>
     316:	0e 94 83 12 	call	0x2506	; 0x2506 <main>
     31a:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__do_global_dtors>

0000031e <__bad_interrupt>:
     31e:	70 ce       	rjmp	.-800    	; 0x0 <__vectors>

00000320 <_GLOBAL__sub_I_command_help>:
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     320:	6a e1       	ldi	r22, 0x1A	; 26
     322:	72 e0       	ldi	r23, 0x02	; 2
     324:	88 ec       	ldi	r24, 0xC8	; 200
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	0e 94 d5 17 	call	0x2faa	; 0x2faa <_ZN6StringC1EPKc>
String command_config = "config\r";
     32c:	60 e2       	ldi	r22, 0x20	; 32
     32e:	72 e0       	ldi	r23, 0x02	; 2
     330:	82 ec       	ldi	r24, 0xC2	; 194
     332:	94 e0       	ldi	r25, 0x04	; 4
     334:	0e 94 d5 17 	call	0x2faa	; 0x2faa <_ZN6StringC1EPKc>
String command_exit = "exit\r";
     338:	68 e2       	ldi	r22, 0x28	; 40
     33a:	72 e0       	ldi	r23, 0x02	; 2
     33c:	8c eb       	ldi	r24, 0xBC	; 188
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	0e 94 d5 17 	call	0x2faa	; 0x2faa <_ZN6StringC1EPKc>
String command_show = "show\r";
     344:	6e e2       	ldi	r22, 0x2E	; 46
     346:	72 e0       	ldi	r23, 0x02	; 2
     348:	86 eb       	ldi	r24, 0xB6	; 182
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <_ZN6StringC1EPKc>
String show_sdCardInfo = "sd card informations\r";
     350:	64 e3       	ldi	r22, 0x34	; 52
     352:	72 e0       	ldi	r23, 0x02	; 2
     354:	80 eb       	ldi	r24, 0xB0	; 176
     356:	94 e0       	ldi	r25, 0x04	; 4
     358:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <_ZN6StringC1EPKc>

0000035c <_GLOBAL__sub_D_command_help>:
     35c:	80 eb       	ldi	r24, 0xB0	; 176
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN6StringD1Ev>
#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
String command_show = "show\r";
     364:	86 eb       	ldi	r24, 0xB6	; 182
     366:	94 e0       	ldi	r25, 0x04	; 4
     368:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN6StringD1Ev>

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
     36c:	8c eb       	ldi	r24, 0xBC	; 188
     36e:	94 e0       	ldi	r25, 0x04	; 4
     370:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN6StringD1Ev>
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
     374:	82 ec       	ldi	r24, 0xC2	; 194
     376:	94 e0       	ldi	r25, 0x04	; 4
     378:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN6StringD1Ev>
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     37c:	88 ec       	ldi	r24, 0xC8	; 200
     37e:	94 e0       	ldi	r25, 0x04	; 4
     380:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <_ZN6StringD1Ev>

00000384 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     384:	26 e0       	ldi	r18, 0x06	; 6
     386:	40 e8       	ldi	r20, 0x80	; 128
     388:	55 e2       	ldi	r21, 0x25	; 37
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	89 e2       	ldi	r24, 0x29	; 41
     390:	96 e0       	ldi	r25, 0x06	; 6
     392:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZN14HardwareSerial5beginEmh>
SDCard mySD(53);

void setup()
{	
	Serial.begin(9600);	
	bool status = bme.begin();
     396:	80 ed       	ldi	r24, 0xD0	; 208
     398:	94 e0       	ldi	r25, 0x04	; 4
     39a:	d3 c3       	rjmp	.+1958   	; 0xb42 <_ZN15Adafruit_BME2805beginEv>

0000039c <loop>:
}

void loop()
{
	Serial.print("Temperatur: ");
     39c:	6d e1       	ldi	r22, 0x1D	; 29
     39e:	74 e0       	ldi	r23, 0x04	; 4
     3a0:	89 e2       	ldi	r24, 0x29	; 41
     3a2:	96 e0       	ldi	r25, 0x06	; 6
     3a4:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5Print5printEPKc>
	Serial.print(bme.readTemperature());
     3a8:	80 ed       	ldi	r24, 0xD0	; 208
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	d2 d3       	rcall	.+1956   	; 0xb52 <_ZN15Adafruit_BME28015readTemperatureEv>
     3ae:	ab 01       	movw	r20, r22
     3b0:	bc 01       	movw	r22, r24
     3b2:	22 e0       	ldi	r18, 0x02	; 2
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	89 e2       	ldi	r24, 0x29	; 41
     3b8:	96 e0       	ldi	r25, 0x06	; 6
     3ba:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN5Print5printEdi>
	Serial.println(" C");
     3be:	6a e2       	ldi	r22, 0x2A	; 42
     3c0:	74 e0       	ldi	r23, 0x04	; 4
     3c2:	89 e2       	ldi	r24, 0x29	; 41
     3c4:	96 e0       	ldi	r25, 0x06	; 6
     3c6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN5Print7printlnEPKc>
	Serial.print("rel. Luftfeuchte: ");
     3ca:	6d e2       	ldi	r22, 0x2D	; 45
     3cc:	74 e0       	ldi	r23, 0x04	; 4
     3ce:	89 e2       	ldi	r24, 0x29	; 41
     3d0:	96 e0       	ldi	r25, 0x06	; 6
     3d2:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5Print5printEPKc>
	Serial.print(bme.readHumidity());
     3d6:	80 ed       	ldi	r24, 0xD0	; 208
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	4c d6       	rcall	.+3224   	; 0x1074 <_ZN15Adafruit_BME28012readHumidityEv>
     3dc:	ab 01       	movw	r20, r22
     3de:	bc 01       	movw	r22, r24
     3e0:	22 e0       	ldi	r18, 0x02	; 2
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	89 e2       	ldi	r24, 0x29	; 41
     3e6:	96 e0       	ldi	r25, 0x06	; 6
     3e8:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN5Print5printEdi>
	Serial.println(" %");
     3ec:	60 e4       	ldi	r22, 0x40	; 64
     3ee:	74 e0       	ldi	r23, 0x04	; 4
     3f0:	89 e2       	ldi	r24, 0x29	; 41
     3f2:	96 e0       	ldi	r25, 0x06	; 6
     3f4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN5Print7printlnEPKc>
	Serial.print("Luftdruck: ");
     3f8:	63 e4       	ldi	r22, 0x43	; 67
     3fa:	74 e0       	ldi	r23, 0x04	; 4
     3fc:	89 e2       	ldi	r24, 0x29	; 41
     3fe:	96 e0       	ldi	r25, 0x06	; 6
     400:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5Print5printEPKc>
	Serial.print(bme.readPressure());
     404:	80 ed       	ldi	r24, 0xD0	; 208
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	38 d4       	rcall	.+2160   	; 0xc7a <_ZN15Adafruit_BME28012readPressureEv>
     40a:	ab 01       	movw	r20, r22
     40c:	bc 01       	movw	r22, r24
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	89 e2       	ldi	r24, 0x29	; 41
     414:	96 e0       	ldi	r25, 0x06	; 6
     416:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN5Print5printEdi>
	Serial.println(" hPa");
     41a:	6f e4       	ldi	r22, 0x4F	; 79
     41c:	74 e0       	ldi	r23, 0x04	; 4
     41e:	89 e2       	ldi	r24, 0x29	; 41
     420:	96 e0       	ldi	r25, 0x06	; 6
     422:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN5Print7printlnEPKc>
	Serial.print("Höhe: ");
     426:	64 e5       	ldi	r22, 0x54	; 84
     428:	74 e0       	ldi	r23, 0x04	; 4
     42a:	89 e2       	ldi	r24, 0x29	; 41
     42c:	96 e0       	ldi	r25, 0x06	; 6
     42e:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5Print5printEPKc>
	Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e5       	ldi	r21, 0x50	; 80
     436:	6d e7       	ldi	r22, 0x7D	; 125
     438:	74 e4       	ldi	r23, 0x44	; 68
     43a:	80 ed       	ldi	r24, 0xD0	; 208
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	14 d7       	rcall	.+3624   	; 0x1268 <_ZN15Adafruit_BME28012readAltitudeEf>
     440:	ab 01       	movw	r20, r22
     442:	bc 01       	movw	r22, r24
     444:	22 e0       	ldi	r18, 0x02	; 2
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	89 e2       	ldi	r24, 0x29	; 41
     44a:	96 e0       	ldi	r25, 0x06	; 6
     44c:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN5Print5printEdi>
	Serial.println(" m");
     450:	6c e5       	ldi	r22, 0x5C	; 92
     452:	74 e0       	ldi	r23, 0x04	; 4
     454:	89 e2       	ldi	r24, 0x29	; 41
     456:	96 e0       	ldi	r25, 0x06	; 6
     458:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN5Print7printlnEPKc>
	delay(2000);
     45c:	60 ed       	ldi	r22, 0xD0	; 208
     45e:	77 e0       	ldi	r23, 0x07	; 7
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <delay>

00000468 <_GLOBAL__sub_I_bme>:
     468:	0f 93       	push	r16
#define BME_MISO 50
#define BME_MOSI 51
#define BME_CS 48
#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK);
     46a:	04 e3       	ldi	r16, 0x34	; 52
     46c:	22 e3       	ldi	r18, 0x32	; 50
     46e:	43 e3       	ldi	r20, 0x33	; 51
     470:	60 e3       	ldi	r22, 0x30	; 48
     472:	80 ed       	ldi	r24, 0xD0	; 208
     474:	94 e0       	ldi	r25, 0x04	; 4
     476:	36 d0       	rcall	.+108    	; 0x4e4 <_ZN15Adafruit_BME280C1Eaaaa>
SDCard mySD(53);
     478:	65 e3       	ldi	r22, 0x35	; 53
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8e ec       	ldi	r24, 0xCE	; 206
     47e:	94 e0       	ldi	r25, 0x04	; 4
	Serial.println(" hPa");
	Serial.print("Höhe: ");
	Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
	Serial.println(" m");
	delay(2000);
     480:	0f 91       	pop	r16
#define BME_MOSI 51
#define BME_CS 48
#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK);
SDCard mySD(53);
     482:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <_ZN6SDCardC1Ej>

00000486 <_GLOBAL__sub_D_bme>:
     486:	8e ec       	ldi	r24, 0xCE	; 206
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <_ZN6SDCardD1Ev>

0000048e <_ZN8SPIClass16beginTransactionE11SPISettings>:

bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
     48e:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <_ZN8SPIClass13interruptModeE>
     492:	22 23       	and	r18, r18
     494:	99 f0       	breq	.+38     	; 0x4bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     496:	4f b7       	in	r20, 0x3f	; 63
     498:	f8 94       	cli
     49a:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <_ZN8SPIClass13interruptModeE>
     49e:	21 30       	cpi	r18, 0x01	; 1
     4a0:	59 f4       	brne	.+22     	; 0x4b8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     4a2:	2d b3       	in	r18, 0x1d	; 29
     4a4:	20 93 24 09 	sts	0x0924, r18	; 0x800924 <_ZN8SPIClass13interruptSaveE>
     4a8:	3d b3       	in	r19, 0x1d	; 29
     4aa:	20 91 25 09 	lds	r18, 0x0925	; 0x800925 <_ZN8SPIClass13interruptMaskE>
     4ae:	20 95       	com	r18
     4b0:	23 23       	and	r18, r19
     4b2:	2d bb       	out	0x1d, r18	; 29
     4b4:	4f bf       	out	0x3f, r20	; 63
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     4b8:	40 93 24 09 	sts	0x0924, r20	; 0x800924 <_ZN8SPIClass13interruptSaveE>
     4bc:	8c bd       	out	0x2c, r24	; 44
     4be:	9d bd       	out	0x2d, r25	; 45
     4c0:	08 95       	ret

000004c2 <_ZN8SPIClass14endTransactionEv>:
     4c2:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_ZN8SPIClass13interruptModeE>
     4c6:	88 23       	and	r24, r24
     4c8:	61 f0       	breq	.+24     	; 0x4e2 <_ZN8SPIClass14endTransactionEv+0x20>
     4ca:	9f b7       	in	r25, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <_ZN8SPIClass13interruptModeE>
     4d2:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <_ZN8SPIClass13interruptSaveE>
     4d6:	21 30       	cpi	r18, 0x01	; 1
     4d8:	19 f4       	brne	.+6      	; 0x4e0 <_ZN8SPIClass14endTransactionEv+0x1e>
     4da:	8d bb       	out	0x1d, r24	; 29
     4dc:	9f bf       	out	0x3f, r25	; 63
     4de:	08 95       	ret
     4e0:	8f bf       	out	0x3f, r24	; 63
     4e2:	08 95       	ret

000004e4 <_ZN15Adafruit_BME280C1Eaaaa>:
     4e4:	0f 93       	push	r16
     4e6:	fc 01       	movw	r30, r24
     4e8:	63 87       	std	Z+11, r22	; 0x0b
     4ea:	44 87       	std	Z+12, r20	; 0x0c
     4ec:	25 87       	std	Z+13, r18	; 0x0d
     4ee:	06 87       	std	Z+14, r16	; 0x0e
     4f0:	0f 91       	pop	r16
     4f2:	08 95       	ret

000004f4 <_ZN15Adafruit_BME2807spixferEh>:
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	fc 01       	movw	r30, r24
     506:	26 85       	ldd	r18, Z+14	; 0x0e
     508:	2f 3f       	cpi	r18, 0xFF	; 255
     50a:	39 f4       	brne	.+14     	; 0x51a <_ZN15Adafruit_BME2807spixferEh+0x26>
     50c:	6e bd       	out	0x2e, r22	; 46
     50e:	00 00       	nop
     510:	0d b4       	in	r0, 0x2d	; 45
     512:	07 fe       	sbrs	r0, 7
     514:	fd cf       	rjmp	.-6      	; 0x510 <_ZN15Adafruit_BME2807spixferEh+0x1c>
     516:	8e b5       	in	r24, 0x2e	; 46
     518:	2b c0       	rjmp	.+86     	; 0x570 <_ZN15Adafruit_BME2807spixferEh+0x7c>
     51a:	d6 2f       	mov	r29, r22
     51c:	8c 01       	movw	r16, r24
     51e:	87 e0       	ldi	r24, 0x07	; 7
     520:	e8 2e       	mov	r14, r24
     522:	f1 2c       	mov	r15, r1
     524:	c0 e0       	ldi	r28, 0x00	; 0
     526:	cc 24       	eor	r12, r12
     528:	c3 94       	inc	r12
     52a:	d1 2c       	mov	r13, r1
     52c:	cc 0f       	add	r28, r28
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	f8 01       	movw	r30, r16
     532:	86 85       	ldd	r24, Z+14	; 0x0e
     534:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     538:	b6 01       	movw	r22, r12
     53a:	0e 2c       	mov	r0, r14
     53c:	01 c0       	rjmp	.+2      	; 0x540 <_ZN15Adafruit_BME2807spixferEh+0x4c>
     53e:	66 0f       	add	r22, r22
     540:	0a 94       	dec	r0
     542:	ea f7       	brpl	.-6      	; 0x53e <_ZN15Adafruit_BME2807spixferEh+0x4a>
     544:	6d 23       	and	r22, r29
     546:	f8 01       	movw	r30, r16
     548:	84 85       	ldd	r24, Z+12	; 0x0c
     54a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	f8 01       	movw	r30, r16
     552:	86 85       	ldd	r24, Z+14	; 0x0e
     554:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     558:	f8 01       	movw	r30, r16
     55a:	85 85       	ldd	r24, Z+13	; 0x0d
     55c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <digitalRead>
     560:	89 2b       	or	r24, r25
     562:	09 f0       	breq	.+2      	; 0x566 <_ZN15Adafruit_BME2807spixferEh+0x72>
     564:	c1 60       	ori	r28, 0x01	; 1
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	ef 1a       	sub	r14, r31
     56a:	f1 08       	sbc	r15, r1
     56c:	f8 f6       	brcc	.-66     	; 0x52c <_ZN15Adafruit_BME2807spixferEh+0x38>
     56e:	8c 2f       	mov	r24, r28
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	08 95       	ret

00000582 <_ZN15Adafruit_BME2806write8Ehh>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
     58c:	16 2f       	mov	r17, r22
     58e:	04 2f       	mov	r16, r20
     590:	8b 85       	ldd	r24, Y+11	; 0x0b
     592:	8f 3f       	cpi	r24, 0xFF	; 255
     594:	09 f5       	brne	.+66     	; 0x5d8 <_ZN15Adafruit_BME2806write8Ehh+0x56>
     596:	6a 81       	ldd	r22, Y+2	; 0x02
     598:	88 81       	ld	r24, Y
     59a:	99 81       	ldd	r25, Y+1	; 0x01
     59c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7TwoWire17beginTransmissionEh>
     5a0:	88 81       	ld	r24, Y
     5a2:	99 81       	ldd	r25, Y+1	; 0x01
     5a4:	dc 01       	movw	r26, r24
     5a6:	ed 91       	ld	r30, X+
     5a8:	fc 91       	ld	r31, X
     5aa:	01 90       	ld	r0, Z+
     5ac:	f0 81       	ld	r31, Z
     5ae:	e0 2d       	mov	r30, r0
     5b0:	61 2f       	mov	r22, r17
     5b2:	19 95       	eicall
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	dc 01       	movw	r26, r24
     5ba:	ed 91       	ld	r30, X+
     5bc:	fc 91       	ld	r31, X
     5be:	01 90       	ld	r0, Z+
     5c0:	f0 81       	ld	r31, Z
     5c2:	e0 2d       	mov	r30, r0
     5c4:	60 2f       	mov	r22, r16
     5c6:	19 95       	eicall
     5c8:	88 81       	ld	r24, Y
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <_ZN7TwoWire15endTransmissionEv>
     5d8:	8e 85       	ldd	r24, Y+14	; 0x0e
     5da:	8f 3f       	cpi	r24, 0xFF	; 255
     5dc:	19 f4       	brne	.+6      	; 0x5e4 <_ZN15Adafruit_BME2806write8Ehh+0x62>
     5de:	82 e5       	ldi	r24, 0x52	; 82
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	55 df       	rcall	.-342    	; 0x48e <_ZN8SPIClass16beginTransactionE11SPISettings>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     5ec:	61 2f       	mov	r22, r17
     5ee:	6f 77       	andi	r22, 0x7F	; 127
     5f0:	ce 01       	movw	r24, r28
     5f2:	80 df       	rcall	.-256    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     5f4:	60 2f       	mov	r22, r16
     5f6:	ce 01       	movw	r24, r28
     5f8:	7d df       	rcall	.-262    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5fe:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     602:	8e 85       	ldd	r24, Y+14	; 0x0e
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	29 f4       	brne	.+10     	; 0x612 <_ZN15Adafruit_BME2806write8Ehh+0x90>
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	58 cf       	rjmp	.-336    	; 0x4c2 <_ZN8SPIClass14endTransactionEv>
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
     61c:	cf 92       	push	r12
     61e:	ef 92       	push	r14
     620:	0f 93       	push	r16
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
     628:	62 95       	swap	r22
     62a:	66 0f       	add	r22, r22
     62c:	66 0f       	add	r22, r22
     62e:	60 7c       	andi	r22, 0xC0	; 192
     630:	47 70       	andi	r20, 0x07	; 7
     632:	27 70       	andi	r18, 0x07	; 7
     634:	82 2f       	mov	r24, r18
     636:	88 0f       	add	r24, r24
     638:	88 0f       	add	r24, r24
     63a:	88 0f       	add	r24, r24
     63c:	26 2f       	mov	r18, r22
     63e:	24 2b       	or	r18, r20
     640:	28 2b       	or	r18, r24
     642:	29 ab       	std	Y+49, r18	; 0x31
     644:	90 2f       	mov	r25, r16
     646:	92 95       	swap	r25
     648:	99 0f       	add	r25, r25
     64a:	90 7e       	andi	r25, 0xE0	; 224
     64c:	8a a9       	ldd	r24, Y+50	; 0x32
     64e:	8f 71       	andi	r24, 0x1F	; 31
     650:	89 2b       	or	r24, r25
     652:	8a ab       	std	Y+50, r24	; 0x32
     654:	8e 2d       	mov	r24, r14
     656:	87 70       	andi	r24, 0x07	; 7
     658:	88 0f       	add	r24, r24
     65a:	88 0f       	add	r24, r24
     65c:	88 0f       	add	r24, r24
     65e:	98 a9       	ldd	r25, Y+48	; 0x30
     660:	29 2f       	mov	r18, r25
     662:	20 7c       	andi	r18, 0xC0	; 192
     664:	9c 2d       	mov	r25, r12
     666:	97 70       	andi	r25, 0x07	; 7
     668:	e2 2e       	mov	r14, r18
     66a:	e8 2a       	or	r14, r24
     66c:	e9 2a       	or	r14, r25
     66e:	e8 aa       	std	Y+48, r14	; 0x30
     670:	40 2f       	mov	r20, r16
     672:	47 70       	andi	r20, 0x07	; 7
     674:	62 ef       	ldi	r22, 0xF2	; 242
     676:	ce 01       	movw	r24, r28
     678:	84 df       	rcall	.-248    	; 0x582 <_ZN15Adafruit_BME2806write8Ehh>
     67a:	98 a9       	ldd	r25, Y+48	; 0x30
     67c:	49 2f       	mov	r20, r25
     67e:	47 70       	andi	r20, 0x07	; 7
     680:	60 e2       	ldi	r22, 0x20	; 32
     682:	46 9f       	mul	r20, r22
     684:	90 01       	movw	r18, r0
     686:	11 24       	eor	r1, r1
     688:	89 2f       	mov	r24, r25
     68a:	86 95       	lsr	r24
     68c:	86 95       	lsr	r24
     68e:	86 95       	lsr	r24
     690:	87 70       	andi	r24, 0x07	; 7
     692:	68 e0       	ldi	r22, 0x08	; 8
     694:	86 9f       	mul	r24, r22
     696:	a0 01       	movw	r20, r0
     698:	11 24       	eor	r1, r1
     69a:	42 2b       	or	r20, r18
     69c:	53 2b       	or	r21, r19
     69e:	97 fb       	bst	r25, 7
     6a0:	99 27       	eor	r25, r25
     6a2:	90 f9       	bld	r25, 0
     6a4:	49 2b       	or	r20, r25
     6a6:	65 ef       	ldi	r22, 0xF5	; 245
     6a8:	ce 01       	movw	r24, r28
     6aa:	6b df       	rcall	.-298    	; 0x582 <_ZN15Adafruit_BME2806write8Ehh>
     6ac:	99 a9       	ldd	r25, Y+49	; 0x31
     6ae:	49 2f       	mov	r20, r25
     6b0:	47 70       	andi	r20, 0x07	; 7
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	48 9f       	mul	r20, r24
     6b6:	90 01       	movw	r18, r0
     6b8:	11 24       	eor	r1, r1
     6ba:	89 2f       	mov	r24, r25
     6bc:	86 95       	lsr	r24
     6be:	86 95       	lsr	r24
     6c0:	86 95       	lsr	r24
     6c2:	87 70       	andi	r24, 0x07	; 7
     6c4:	68 e0       	ldi	r22, 0x08	; 8
     6c6:	86 9f       	mul	r24, r22
     6c8:	a0 01       	movw	r20, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	42 2b       	or	r20, r18
     6ce:	53 2b       	or	r21, r19
     6d0:	92 95       	swap	r25
     6d2:	96 95       	lsr	r25
     6d4:	96 95       	lsr	r25
     6d6:	93 70       	andi	r25, 0x03	; 3
     6d8:	49 2b       	or	r20, r25
     6da:	64 ef       	ldi	r22, 0xF4	; 244
     6dc:	ce 01       	movw	r24, r28
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	0f 91       	pop	r16
     6e4:	ef 90       	pop	r14
     6e6:	cf 90       	pop	r12
     6e8:	4c cf       	rjmp	.-360    	; 0x582 <_ZN15Adafruit_BME2806write8Ehh>

000006ea <_ZN15Adafruit_BME2805read8Eh>:
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	16 2f       	mov	r17, r22
     6f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f6:	8f 3f       	cpi	r24, 0xFF	; 255
     6f8:	21 f5       	brne	.+72     	; 0x742 <_ZN15Adafruit_BME2805read8Eh+0x58>
     6fa:	6a 81       	ldd	r22, Y+2	; 0x02
     6fc:	88 81       	ld	r24, Y
     6fe:	99 81       	ldd	r25, Y+1	; 0x01
     700:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7TwoWire17beginTransmissionEh>
     704:	88 81       	ld	r24, Y
     706:	99 81       	ldd	r25, Y+1	; 0x01
     708:	dc 01       	movw	r26, r24
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	01 90       	ld	r0, Z+
     710:	f0 81       	ld	r31, Z
     712:	e0 2d       	mov	r30, r0
     714:	61 2f       	mov	r22, r17
     716:	19 95       	eicall
     718:	88 81       	ld	r24, Y
     71a:	99 81       	ldd	r25, Y+1	; 0x01
     71c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN7TwoWire15endTransmissionEv>
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	6a 81       	ldd	r22, Y+2	; 0x02
     724:	88 81       	ld	r24, Y
     726:	99 81       	ldd	r25, Y+1	; 0x01
     728:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN7TwoWire11requestFromEhh>
     72c:	88 81       	ld	r24, Y
     72e:	99 81       	ldd	r25, Y+1	; 0x01
     730:	dc 01       	movw	r26, r24
     732:	ed 91       	ld	r30, X+
     734:	fc 91       	ld	r31, X
     736:	02 84       	ldd	r0, Z+10	; 0x0a
     738:	f3 85       	ldd	r31, Z+11	; 0x0b
     73a:	e0 2d       	mov	r30, r0
     73c:	19 95       	eicall
     73e:	18 2f       	mov	r17, r24
     740:	1a c0       	rjmp	.+52     	; 0x776 <_ZN15Adafruit_BME2805read8Eh+0x8c>
     742:	8e 85       	ldd	r24, Y+14	; 0x0e
     744:	8f 3f       	cpi	r24, 0xFF	; 255
     746:	19 f4       	brne	.+6      	; 0x74e <_ZN15Adafruit_BME2805read8Eh+0x64>
     748:	82 e5       	ldi	r24, 0x52	; 82
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	a0 de       	rcall	.-704    	; 0x48e <_ZN8SPIClass16beginTransactionE11SPISettings>
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	8b 85       	ldd	r24, Y+11	; 0x0b
     752:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     756:	61 2f       	mov	r22, r17
     758:	60 68       	ori	r22, 0x80	; 128
     75a:	ce 01       	movw	r24, r28
     75c:	cb de       	rcall	.-618    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	ce 01       	movw	r24, r28
     762:	c8 de       	rcall	.-624    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     764:	18 2f       	mov	r17, r24
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	8b 85       	ldd	r24, Y+11	; 0x0b
     76a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     76e:	8e 85       	ldd	r24, Y+14	; 0x0e
     770:	8f 3f       	cpi	r24, 0xFF	; 255
     772:	09 f4       	brne	.+2      	; 0x776 <_ZN15Adafruit_BME2805read8Eh+0x8c>
     774:	a6 de       	rcall	.-692    	; 0x4c2 <_ZN8SPIClass14endTransactionEv>
     776:	81 2f       	mov	r24, r17
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret

00000780 <_ZN15Adafruit_BME2806read16Eh>:
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
     78a:	16 2f       	mov	r17, r22
     78c:	8b 85       	ldd	r24, Y+11	; 0x0b
     78e:	8f 3f       	cpi	r24, 0xFF	; 255
     790:	99 f5       	brne	.+102    	; 0x7f8 <_ZN15Adafruit_BME2806read16Eh+0x78>
     792:	6a 81       	ldd	r22, Y+2	; 0x02
     794:	88 81       	ld	r24, Y
     796:	99 81       	ldd	r25, Y+1	; 0x01
     798:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7TwoWire17beginTransmissionEh>
     79c:	88 81       	ld	r24, Y
     79e:	99 81       	ldd	r25, Y+1	; 0x01
     7a0:	dc 01       	movw	r26, r24
     7a2:	ed 91       	ld	r30, X+
     7a4:	fc 91       	ld	r31, X
     7a6:	01 90       	ld	r0, Z+
     7a8:	f0 81       	ld	r31, Z
     7aa:	e0 2d       	mov	r30, r0
     7ac:	61 2f       	mov	r22, r17
     7ae:	19 95       	eicall
     7b0:	88 81       	ld	r24, Y
     7b2:	99 81       	ldd	r25, Y+1	; 0x01
     7b4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN7TwoWire15endTransmissionEv>
     7b8:	42 e0       	ldi	r20, 0x02	; 2
     7ba:	6a 81       	ldd	r22, Y+2	; 0x02
     7bc:	88 81       	ld	r24, Y
     7be:	99 81       	ldd	r25, Y+1	; 0x01
     7c0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN7TwoWire11requestFromEhh>
     7c4:	88 81       	ld	r24, Y
     7c6:	99 81       	ldd	r25, Y+1	; 0x01
     7c8:	dc 01       	movw	r26, r24
     7ca:	ed 91       	ld	r30, X+
     7cc:	fc 91       	ld	r31, X
     7ce:	02 84       	ldd	r0, Z+10	; 0x0a
     7d0:	f3 85       	ldd	r31, Z+11	; 0x0b
     7d2:	e0 2d       	mov	r30, r0
     7d4:	19 95       	eicall
     7d6:	18 2f       	mov	r17, r24
     7d8:	88 81       	ld	r24, Y
     7da:	99 81       	ldd	r25, Y+1	; 0x01
     7dc:	dc 01       	movw	r26, r24
     7de:	ed 91       	ld	r30, X+
     7e0:	fc 91       	ld	r31, X
     7e2:	02 84       	ldd	r0, Z+10	; 0x0a
     7e4:	f3 85       	ldd	r31, Z+11	; 0x0b
     7e6:	e0 2d       	mov	r30, r0
     7e8:	19 95       	eicall
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	31 2f       	mov	r19, r17
     7f0:	89 01       	movw	r16, r18
     7f2:	08 2b       	or	r16, r24
     7f4:	19 2b       	or	r17, r25
     7f6:	23 c0       	rjmp	.+70     	; 0x83e <_ZN15Adafruit_BME2806read16Eh+0xbe>
     7f8:	8e 85       	ldd	r24, Y+14	; 0x0e
     7fa:	8f 3f       	cpi	r24, 0xFF	; 255
     7fc:	19 f4       	brne	.+6      	; 0x804 <_ZN15Adafruit_BME2806read16Eh+0x84>
     7fe:	82 e5       	ldi	r24, 0x52	; 82
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	45 de       	rcall	.-886    	; 0x48e <_ZN8SPIClass16beginTransactionE11SPISettings>
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	8b 85       	ldd	r24, Y+11	; 0x0b
     808:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     80c:	61 2f       	mov	r22, r17
     80e:	60 68       	ori	r22, 0x80	; 128
     810:	ce 01       	movw	r24, r28
     812:	70 de       	rcall	.-800    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	ce 01       	movw	r24, r28
     818:	6d de       	rcall	.-806    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     81a:	08 2f       	mov	r16, r24
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	ce 01       	movw	r24, r28
     820:	69 de       	rcall	.-814    	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     822:	20 2f       	mov	r18, r16
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	32 2f       	mov	r19, r18
     828:	22 27       	eor	r18, r18
     82a:	89 01       	movw	r16, r18
     82c:	08 2b       	or	r16, r24
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	8b 85       	ldd	r24, Y+11	; 0x0b
     832:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     836:	8e 85       	ldd	r24, Y+14	; 0x0e
     838:	8f 3f       	cpi	r24, 0xFF	; 255
     83a:	09 f4       	brne	.+2      	; 0x83e <_ZN15Adafruit_BME2806read16Eh+0xbe>
     83c:	42 de       	rcall	.-892    	; 0x4c2 <_ZN8SPIClass14endTransactionEv>
     83e:	c8 01       	movw	r24, r16
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <_ZN15Adafruit_BME2809read16_LEEh>:
     84a:	9a df       	rcall	.-204    	; 0x780 <_ZN15Adafruit_BME2806read16Eh>
     84c:	98 27       	eor	r25, r24
     84e:	89 27       	eor	r24, r25
     850:	98 27       	eor	r25, r24
     852:	08 95       	ret

00000854 <_ZN15Adafruit_BME2806read24Eh>:
     854:	4f 92       	push	r4
     856:	5f 92       	push	r5
     858:	6f 92       	push	r6
     85a:	7f 92       	push	r7
     85c:	8f 92       	push	r8
     85e:	9f 92       	push	r9
     860:	af 92       	push	r10
     862:	bf 92       	push	r11
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	16 2f       	mov	r17, r22
     876:	8b 85       	ldd	r24, Y+11	; 0x0b
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	09 f0       	breq	.+2      	; 0x87e <_ZN15Adafruit_BME2806read24Eh+0x2a>
     87c:	51 c0       	rjmp	.+162    	; 0x920 <_ZN15Adafruit_BME2806read24Eh+0xcc>
     87e:	6a 81       	ldd	r22, Y+2	; 0x02
     880:	88 81       	ld	r24, Y
     882:	99 81       	ldd	r25, Y+1	; 0x01
     884:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7TwoWire17beginTransmissionEh>
     888:	88 81       	ld	r24, Y
     88a:	99 81       	ldd	r25, Y+1	; 0x01
     88c:	dc 01       	movw	r26, r24
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	01 90       	ld	r0, Z+
     894:	f0 81       	ld	r31, Z
     896:	e0 2d       	mov	r30, r0
     898:	61 2f       	mov	r22, r17
     89a:	19 95       	eicall
     89c:	88 81       	ld	r24, Y
     89e:	99 81       	ldd	r25, Y+1	; 0x01
     8a0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN7TwoWire15endTransmissionEv>
     8a4:	43 e0       	ldi	r20, 0x03	; 3
     8a6:	6a 81       	ldd	r22, Y+2	; 0x02
     8a8:	88 81       	ld	r24, Y
     8aa:	99 81       	ldd	r25, Y+1	; 0x01
     8ac:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN7TwoWire11requestFromEhh>
     8b0:	88 81       	ld	r24, Y
     8b2:	99 81       	ldd	r25, Y+1	; 0x01
     8b4:	dc 01       	movw	r26, r24
     8b6:	ed 91       	ld	r30, X+
     8b8:	fc 91       	ld	r31, X
     8ba:	02 84       	ldd	r0, Z+10	; 0x0a
     8bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     8be:	e0 2d       	mov	r30, r0
     8c0:	19 95       	eicall
     8c2:	2c 01       	movw	r4, r24
     8c4:	99 0f       	add	r25, r25
     8c6:	66 08       	sbc	r6, r6
     8c8:	77 08       	sbc	r7, r7
     8ca:	76 2c       	mov	r7, r6
     8cc:	65 2c       	mov	r6, r5
     8ce:	54 2c       	mov	r5, r4
     8d0:	44 24       	eor	r4, r4
     8d2:	88 81       	ld	r24, Y
     8d4:	99 81       	ldd	r25, Y+1	; 0x01
     8d6:	dc 01       	movw	r26, r24
     8d8:	ed 91       	ld	r30, X+
     8da:	fc 91       	ld	r31, X
     8dc:	02 84       	ldd	r0, Z+10	; 0x0a
     8de:	f3 85       	ldd	r31, Z+11	; 0x0b
     8e0:	e0 2d       	mov	r30, r0
     8e2:	19 95       	eicall
     8e4:	6c 01       	movw	r12, r24
     8e6:	99 0f       	add	r25, r25
     8e8:	ee 08       	sbc	r14, r14
     8ea:	ff 08       	sbc	r15, r15
     8ec:	c4 28       	or	r12, r4
     8ee:	d5 28       	or	r13, r5
     8f0:	e6 28       	or	r14, r6
     8f2:	f7 28       	or	r15, r7
     8f4:	88 24       	eor	r8, r8
     8f6:	9c 2c       	mov	r9, r12
     8f8:	ad 2c       	mov	r10, r13
     8fa:	be 2c       	mov	r11, r14
     8fc:	88 81       	ld	r24, Y
     8fe:	99 81       	ldd	r25, Y+1	; 0x01
     900:	dc 01       	movw	r26, r24
     902:	ed 91       	ld	r30, X+
     904:	fc 91       	ld	r31, X
     906:	02 84       	ldd	r0, Z+10	; 0x0a
     908:	f3 85       	ldd	r31, Z+11	; 0x0b
     90a:	e0 2d       	mov	r30, r0
     90c:	19 95       	eicall
     90e:	6c 01       	movw	r12, r24
     910:	99 0f       	add	r25, r25
     912:	ee 08       	sbc	r14, r14
     914:	ff 08       	sbc	r15, r15
     916:	c8 28       	or	r12, r8
     918:	d9 28       	or	r13, r9
     91a:	ea 28       	or	r14, r10
     91c:	fb 28       	or	r15, r11
     91e:	2d c0       	rjmp	.+90     	; 0x97a <_ZN15Adafruit_BME2806read24Eh+0x126>
     920:	8e 85       	ldd	r24, Y+14	; 0x0e
     922:	8f 3f       	cpi	r24, 0xFF	; 255
     924:	19 f4       	brne	.+6      	; 0x92c <_ZN15Adafruit_BME2806read24Eh+0xd8>
     926:	82 e5       	ldi	r24, 0x52	; 82
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	b1 dd       	rcall	.-1182   	; 0x48e <_ZN8SPIClass16beginTransactionE11SPISettings>
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	8b 85       	ldd	r24, Y+11	; 0x0b
     930:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     934:	61 2f       	mov	r22, r17
     936:	60 68       	ori	r22, 0x80	; 128
     938:	ce 01       	movw	r24, r28
     93a:	dc dd       	rcall	.-1096   	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	ce 01       	movw	r24, r28
     940:	d9 dd       	rcall	.-1102   	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     942:	c8 2e       	mov	r12, r24
     944:	d1 2c       	mov	r13, r1
     946:	e1 2c       	mov	r14, r1
     948:	f1 2c       	mov	r15, r1
     94a:	fe 2c       	mov	r15, r14
     94c:	ed 2c       	mov	r14, r13
     94e:	dc 2c       	mov	r13, r12
     950:	cc 24       	eor	r12, r12
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	ce 01       	movw	r24, r28
     956:	ce dd       	rcall	.-1124   	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     958:	c8 2a       	or	r12, r24
     95a:	fe 2c       	mov	r15, r14
     95c:	ed 2c       	mov	r14, r13
     95e:	dc 2c       	mov	r13, r12
     960:	cc 24       	eor	r12, r12
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	ce 01       	movw	r24, r28
     966:	c6 dd       	rcall	.-1140   	; 0x4f4 <_ZN15Adafruit_BME2807spixferEh>
     968:	c8 2a       	or	r12, r24
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	8b 85       	ldd	r24, Y+11	; 0x0b
     96e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     972:	8e 85       	ldd	r24, Y+14	; 0x0e
     974:	8f 3f       	cpi	r24, 0xFF	; 255
     976:	09 f4       	brne	.+2      	; 0x97a <_ZN15Adafruit_BME2806read24Eh+0x126>
     978:	a4 dd       	rcall	.-1208   	; 0x4c2 <_ZN8SPIClass14endTransactionEv>
     97a:	c7 01       	movw	r24, r14
     97c:	b6 01       	movw	r22, r12
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	08 95       	ret

0000099e <_ZN15Adafruit_BME28016readCoefficientsEv>:
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	68 e8       	ldi	r22, 0x88	; 136
     9a8:	50 df       	rcall	.-352    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9aa:	98 8b       	std	Y+16, r25	; 0x10
     9ac:	8f 87       	std	Y+15, r24	; 0x0f
     9ae:	6a e8       	ldi	r22, 0x8A	; 138
     9b0:	ce 01       	movw	r24, r28
     9b2:	4b df       	rcall	.-362    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9b4:	9a 8b       	std	Y+18, r25	; 0x12
     9b6:	89 8b       	std	Y+17, r24	; 0x11
     9b8:	6c e8       	ldi	r22, 0x8C	; 140
     9ba:	ce 01       	movw	r24, r28
     9bc:	46 df       	rcall	.-372    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9be:	9c 8b       	std	Y+20, r25	; 0x14
     9c0:	8b 8b       	std	Y+19, r24	; 0x13
     9c2:	6e e8       	ldi	r22, 0x8E	; 142
     9c4:	ce 01       	movw	r24, r28
     9c6:	41 df       	rcall	.-382    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9c8:	9e 8b       	std	Y+22, r25	; 0x16
     9ca:	8d 8b       	std	Y+21, r24	; 0x15
     9cc:	60 e9       	ldi	r22, 0x90	; 144
     9ce:	ce 01       	movw	r24, r28
     9d0:	3c df       	rcall	.-392    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9d2:	98 8f       	std	Y+24, r25	; 0x18
     9d4:	8f 8b       	std	Y+23, r24	; 0x17
     9d6:	62 e9       	ldi	r22, 0x92	; 146
     9d8:	ce 01       	movw	r24, r28
     9da:	37 df       	rcall	.-402    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9dc:	9a 8f       	std	Y+26, r25	; 0x1a
     9de:	89 8f       	std	Y+25, r24	; 0x19
     9e0:	64 e9       	ldi	r22, 0x94	; 148
     9e2:	ce 01       	movw	r24, r28
     9e4:	32 df       	rcall	.-412    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9e6:	9c 8f       	std	Y+28, r25	; 0x1c
     9e8:	8b 8f       	std	Y+27, r24	; 0x1b
     9ea:	66 e9       	ldi	r22, 0x96	; 150
     9ec:	ce 01       	movw	r24, r28
     9ee:	2d df       	rcall	.-422    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9f0:	9e 8f       	std	Y+30, r25	; 0x1e
     9f2:	8d 8f       	std	Y+29, r24	; 0x1d
     9f4:	68 e9       	ldi	r22, 0x98	; 152
     9f6:	ce 01       	movw	r24, r28
     9f8:	28 df       	rcall	.-432    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     9fa:	98 a3       	std	Y+32, r25	; 0x20
     9fc:	8f 8f       	std	Y+31, r24	; 0x1f
     9fe:	6a e9       	ldi	r22, 0x9A	; 154
     a00:	ce 01       	movw	r24, r28
     a02:	23 df       	rcall	.-442    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     a04:	9a a3       	std	Y+34, r25	; 0x22
     a06:	89 a3       	std	Y+33, r24	; 0x21
     a08:	6c e9       	ldi	r22, 0x9C	; 156
     a0a:	ce 01       	movw	r24, r28
     a0c:	1e df       	rcall	.-452    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     a0e:	9c a3       	std	Y+36, r25	; 0x24
     a10:	8b a3       	std	Y+35, r24	; 0x23
     a12:	6e e9       	ldi	r22, 0x9E	; 158
     a14:	ce 01       	movw	r24, r28
     a16:	19 df       	rcall	.-462    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     a18:	9e a3       	std	Y+38, r25	; 0x26
     a1a:	8d a3       	std	Y+37, r24	; 0x25
     a1c:	61 ea       	ldi	r22, 0xA1	; 161
     a1e:	ce 01       	movw	r24, r28
     a20:	64 de       	rcall	.-824    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a22:	8f a3       	std	Y+39, r24	; 0x27
     a24:	61 ee       	ldi	r22, 0xE1	; 225
     a26:	ce 01       	movw	r24, r28
     a28:	10 df       	rcall	.-480    	; 0x84a <_ZN15Adafruit_BME2809read16_LEEh>
     a2a:	99 a7       	std	Y+41, r25	; 0x29
     a2c:	88 a7       	std	Y+40, r24	; 0x28
     a2e:	63 ee       	ldi	r22, 0xE3	; 227
     a30:	ce 01       	movw	r24, r28
     a32:	5b de       	rcall	.-842    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a34:	8a a7       	std	Y+42, r24	; 0x2a
     a36:	64 ee       	ldi	r22, 0xE4	; 228
     a38:	ce 01       	movw	r24, r28
     a3a:	57 de       	rcall	.-850    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a3c:	18 2f       	mov	r17, r24
     a3e:	65 ee       	ldi	r22, 0xE5	; 229
     a40:	ce 01       	movw	r24, r28
     a42:	53 de       	rcall	.-858    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a44:	90 e1       	ldi	r25, 0x10	; 16
     a46:	19 9f       	mul	r17, r25
     a48:	90 01       	movw	r18, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	8f 70       	andi	r24, 0x0F	; 15
     a4e:	28 2b       	or	r18, r24
     a50:	3c a7       	std	Y+44, r19	; 0x2c
     a52:	2b a7       	std	Y+43, r18	; 0x2b
     a54:	66 ee       	ldi	r22, 0xE6	; 230
     a56:	ce 01       	movw	r24, r28
     a58:	48 de       	rcall	.-880    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a5a:	18 2f       	mov	r17, r24
     a5c:	65 ee       	ldi	r22, 0xE5	; 229
     a5e:	ce 01       	movw	r24, r28
     a60:	44 de       	rcall	.-888    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a62:	90 e1       	ldi	r25, 0x10	; 16
     a64:	19 9f       	mul	r17, r25
     a66:	90 01       	movw	r18, r0
     a68:	11 24       	eor	r1, r1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	44 e0       	ldi	r20, 0x04	; 4
     a6e:	95 95       	asr	r25
     a70:	87 95       	ror	r24
     a72:	4a 95       	dec	r20
     a74:	e1 f7       	brne	.-8      	; 0xa6e <_ZN15Adafruit_BME28016readCoefficientsEv+0xd0>
     a76:	82 2b       	or	r24, r18
     a78:	93 2b       	or	r25, r19
     a7a:	9e a7       	std	Y+46, r25	; 0x2e
     a7c:	8d a7       	std	Y+45, r24	; 0x2d
     a7e:	67 ee       	ldi	r22, 0xE7	; 231
     a80:	ce 01       	movw	r24, r28
     a82:	33 de       	rcall	.-922    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a84:	8f a7       	std	Y+47, r24	; 0x2f
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	08 95       	ret

00000a8e <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
     a8e:	63 ef       	ldi	r22, 0xF3	; 243
     a90:	2c de       	rcall	.-936    	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     a92:	81 70       	andi	r24, 0x01	; 1
     a94:	08 95       	ret

00000a96 <_ZN15Adafruit_BME2804initEv>:
     a96:	cf 92       	push	r12
     a98:	ef 92       	push	r14
     a9a:	0f 93       	push	r16
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa4:	8f 3f       	cpi	r24, 0xFF	; 255
     aa6:	21 f4       	brne	.+8      	; 0xab0 <_ZN15Adafruit_BME2804initEv+0x1a>
     aa8:	88 81       	ld	r24, Y
     aaa:	99 81       	ldd	r25, Y+1	; 0x01
     aac:	fe d6       	rcall	.+3580   	; 0x18aa <_ZN7TwoWire5beginEv>
     aae:	18 c0       	rjmp	.+48     	; 0xae0 <_ZN15Adafruit_BME2804initEv+0x4a>
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	8b 85       	ldd	r24, Y+11	; 0x0b
     aba:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>
     abe:	8e 85       	ldd	r24, Y+14	; 0x0e
     ac0:	8f 3f       	cpi	r24, 0xFF	; 255
     ac2:	19 f4       	brne	.+6      	; 0xaca <_ZN15Adafruit_BME2804initEv+0x34>
     ac4:	0e 94 27 21 	call	0x424e	; 0x424e <_ZN8SPIClass5beginEv>
     ac8:	0b c0       	rjmp	.+22     	; 0xae0 <_ZN15Adafruit_BME2804initEv+0x4a>
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ad4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	8d 85       	ldd	r24, Y+13	; 0x0d
     adc:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>
     ae0:	60 ed       	ldi	r22, 0xD0	; 208
     ae2:	ce 01       	movw	r24, r28
     ae4:	02 de       	rcall	.-1020   	; 0x6ea <_ZN15Adafruit_BME2805read8Eh>
     ae6:	80 36       	cpi	r24, 0x60	; 96
     ae8:	29 f5       	brne	.+74     	; 0xb34 <_ZN15Adafruit_BME2804initEv+0x9e>
     aea:	46 eb       	ldi	r20, 0xB6	; 182
     aec:	60 ee       	ldi	r22, 0xE0	; 224
     aee:	ce 01       	movw	r24, r28
     af0:	48 dd       	rcall	.-1392   	; 0x582 <_ZN15Adafruit_BME2806write8Ehh>
     af2:	6c e2       	ldi	r22, 0x2C	; 44
     af4:	71 e0       	ldi	r23, 0x01	; 1
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <delay>
     afe:	ce 01       	movw	r24, r28
     b00:	c6 df       	rcall	.-116    	; 0xa8e <_ZN15Adafruit_BME28020isReadingCalibrationEv>
     b02:	88 23       	and	r24, r24
     b04:	29 f0       	breq	.+10     	; 0xb10 <_ZN15Adafruit_BME2804initEv+0x7a>
     b06:	64 e6       	ldi	r22, 0x64	; 100
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	f5 cf       	rjmp	.-22     	; 0xafa <_ZN15Adafruit_BME2804initEv+0x64>
     b10:	ce 01       	movw	r24, r28
     b12:	45 df       	rcall	.-374    	; 0x99e <_ZN15Adafruit_BME28016readCoefficientsEv>
     b14:	c1 2c       	mov	r12, r1
     b16:	e1 2c       	mov	r14, r1
     b18:	05 e0       	ldi	r16, 0x05	; 5
     b1a:	25 e0       	ldi	r18, 0x05	; 5
     b1c:	45 e0       	ldi	r20, 0x05	; 5
     b1e:	63 e0       	ldi	r22, 0x03	; 3
     b20:	ce 01       	movw	r24, r28
     b22:	7c dd       	rcall	.-1288   	; 0x61c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
     b24:	64 e6       	ldi	r22, 0x64	; 100
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <delay>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <_ZN15Adafruit_BME2804initEv+0xa0>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	0f 91       	pop	r16
     b3c:	ef 90       	pop	r14
     b3e:	cf 90       	pop	r12
     b40:	08 95       	ret

00000b42 <_ZN15Adafruit_BME2805beginEv>:
}

bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
     b42:	27 e7       	ldi	r18, 0x77	; 119
     b44:	fc 01       	movw	r30, r24
     b46:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
     b48:	21 e7       	ldi	r18, 0x71	; 113
     b4a:	35 e0       	ldi	r19, 0x05	; 5
     b4c:	31 83       	std	Z+1, r19	; 0x01
     b4e:	20 83       	st	Z, r18
	return init();
     b50:	a2 cf       	rjmp	.-188    	; 0xa96 <_ZN15Adafruit_BME2804initEv>

00000b52 <_ZN15Adafruit_BME28015readTemperatureEv>:
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	ec 01       	movw	r28, r24
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
     b6c:	6a ef       	ldi	r22, 0xFA	; 250
     b6e:	72 de       	rcall	.-796    	; 0x854 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
     b70:	61 15       	cp	r22, r1
     b72:	71 05       	cpc	r23, r1
     b74:	20 e8       	ldi	r18, 0x80	; 128
     b76:	82 07       	cpc	r24, r18
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <_ZN15Adafruit_BME28015readTemperatureEv+0x2c>
     b7c:	6d c0       	rjmp	.+218    	; 0xc58 <_ZN15Adafruit_BME28015readTemperatureEv+0x106>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
     b7e:	0f 85       	ldd	r16, Y+15	; 0x0f
     b80:	18 89       	ldd	r17, Y+16	; 0x10
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
     b86:	c7 2e       	mov	r12, r23
     b88:	d8 2e       	mov	r13, r24
     b8a:	e9 2e       	mov	r14, r25
     b8c:	ff 24       	eor	r15, r15
     b8e:	e7 fc       	sbrc	r14, 7
     b90:	fa 94       	dec	r15
     b92:	c0 1a       	sub	r12, r16
     b94:	d1 0a       	sbc	r13, r17
     b96:	e2 0a       	sbc	r14, r18
     b98:	f3 0a       	sbc	r15, r19
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	57 e0       	ldi	r21, 0x07	; 7
     ba0:	b5 95       	asr	r27
     ba2:	a7 95       	ror	r26
     ba4:	97 95       	ror	r25
     ba6:	87 95       	ror	r24
     ba8:	5a 95       	dec	r21
     baa:	d1 f7       	brne	.-12     	; 0xba0 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
     bac:	00 0f       	add	r16, r16
     bae:	11 1f       	adc	r17, r17
     bb0:	22 1f       	adc	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	4c 01       	movw	r8, r24
     bb6:	5d 01       	movw	r10, r26
     bb8:	80 1a       	sub	r8, r16
     bba:	91 0a       	sbc	r9, r17
     bbc:	a2 0a       	sbc	r10, r18
     bbe:	b3 0a       	sbc	r11, r19
     bc0:	a5 01       	movw	r20, r10
     bc2:	94 01       	movw	r18, r8
     bc4:	a9 89       	ldd	r26, Y+17	; 0x11
     bc6:	ba 89       	ldd	r27, Y+18	; 0x12
     bc8:	0e 94 0f 22 	call	0x441e	; 0x441e <__mulshisi3>
     bcc:	4b 01       	movw	r8, r22
     bce:	5c 01       	movw	r10, r24
     bd0:	7b e0       	ldi	r23, 0x0B	; 11
     bd2:	b5 94       	asr	r11
     bd4:	a7 94       	ror	r10
     bd6:	97 94       	ror	r9
     bd8:	87 94       	ror	r8
     bda:	7a 95       	dec	r23
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <_ZN15Adafruit_BME28015readTemperatureEv+0x80>
     bde:	a7 01       	movw	r20, r14
     be0:	96 01       	movw	r18, r12
     be2:	c7 01       	movw	r24, r14
     be4:	b6 01       	movw	r22, r12
     be6:	0e 94 bd 21 	call	0x437a	; 0x437a <__mulsi3>
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	ec e0       	ldi	r30, 0x0C	; 12
     bf0:	55 95       	asr	r21
     bf2:	47 95       	ror	r20
     bf4:	37 95       	ror	r19
     bf6:	27 95       	ror	r18
     bf8:	ea 95       	dec	r30
     bfa:	d1 f7       	brne	.-12     	; 0xbf0 <_ZN15Adafruit_BME28015readTemperatureEv+0x9e>
     bfc:	ab 89       	ldd	r26, Y+19	; 0x13
     bfe:	bc 89       	ldd	r27, Y+20	; 0x14
     c00:	0e 94 0f 22 	call	0x441e	; 0x441e <__mulshisi3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	fe e0       	ldi	r31, 0x0E	; 14
     c0a:	b5 95       	asr	r27
     c0c:	a7 95       	ror	r26
     c0e:	97 95       	ror	r25
     c10:	87 95       	ror	r24
     c12:	fa 95       	dec	r31
     c14:	d1 f7       	brne	.-12     	; 0xc0a <_ZN15Adafruit_BME28015readTemperatureEv+0xb8>
     c16:	a5 01       	movw	r20, r10
     c18:	94 01       	movw	r18, r8
     c1a:	28 0f       	add	r18, r24
     c1c:	39 1f       	adc	r19, r25
     c1e:	4a 1f       	adc	r20, r26
     c20:	5b 1f       	adc	r21, r27
     c22:	2f 83       	std	Y+7, r18	; 0x07
     c24:	38 87       	std	Y+8, r19	; 0x08
     c26:	49 87       	std	Y+9, r20	; 0x09
     c28:	5a 87       	std	Y+10, r21	; 0x0a

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
     c2a:	a5 e0       	ldi	r26, 0x05	; 5
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	0e 94 05 22 	call	0x440a	; 0x440a <__muluhisi3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	80 58       	subi	r24, 0x80	; 128
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	af 4f       	sbci	r26, 0xFF	; 255
     c3c:	bf 4f       	sbci	r27, 0xFF	; 255
     c3e:	69 2f       	mov	r22, r25
     c40:	7a 2f       	mov	r23, r26
     c42:	8b 2f       	mov	r24, r27
     c44:	99 27       	eor	r25, r25
     c46:	87 fd       	sbrc	r24, 7
     c48:	9a 95       	dec	r25
     c4a:	b8 d7       	rcall	.+3952   	; 0x1bbc <__floatsisf>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	48 ec       	ldi	r20, 0xC8	; 200
     c52:	52 e4       	ldi	r21, 0x42	; 66
     c54:	45 d7       	rcall	.+3722   	; 0x1ae0 <__divsf3>
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <_ZN15Adafruit_BME28015readTemperatureEv+0x10e>
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 ec       	ldi	r24, 0xC0	; 192
     c5e:	9f e7       	ldi	r25, 0x7F	; 127

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	08 95       	ret

00000c7a <_ZN15Adafruit_BME28012readPressureEv>:
/**************************************************************************/
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
     c7a:	2f 92       	push	r2
     c7c:	3f 92       	push	r3
     c7e:	4f 92       	push	r4
     c80:	5f 92       	push	r5
     c82:	6f 92       	push	r6
     c84:	7f 92       	push	r7
     c86:	8f 92       	push	r8
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	6a 97       	sbiw	r28, 0x1a	; 26
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	9a 8f       	std	Y+26, r25	; 0x1a
     cb0:	89 8f       	std	Y+25, r24	; 0x19
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
     cb2:	4f df       	rcall	.-354    	; 0xb52 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
     cb4:	67 ef       	ldi	r22, 0xF7	; 247
     cb6:	89 8d       	ldd	r24, Y+25	; 0x19
     cb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cba:	cc dd       	rcall	.-1128   	; 0x854 <_ZN15Adafruit_BME2806read24Eh>
     cbc:	6d 87       	std	Y+13, r22	; 0x0d
     cbe:	7e 87       	std	Y+14, r23	; 0x0e
     cc0:	8f 87       	std	Y+15, r24	; 0x0f
     cc2:	98 8b       	std	Y+16, r25	; 0x10
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	80 48       	sbci	r24, 0x80	; 128
     cca:	91 05       	cpc	r25, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <_ZN15Adafruit_BME28012readPressureEv+0x56>
     cce:	b1 c1       	rjmp	.+866    	; 0x1032 <_ZN15Adafruit_BME28012readPressureEv+0x3b8>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
     cd0:	e9 8d       	ldd	r30, Y+25	; 0x19
     cd2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     cd4:	87 81       	ldd	r24, Z+7	; 0x07
     cd6:	90 85       	ldd	r25, Z+8	; 0x08
     cd8:	a1 85       	ldd	r26, Z+9	; 0x09
     cda:	b2 85       	ldd	r27, Z+10	; 0x0a
     cdc:	6c 01       	movw	r12, r24
     cde:	7d 01       	movw	r14, r26
     ce0:	ff 0c       	add	r15, r15
     ce2:	cc 08       	sbc	r12, r12
     ce4:	dc 2c       	mov	r13, r12
     ce6:	76 01       	movw	r14, r12
     ce8:	9c 01       	movw	r18, r24
     cea:	ad 01       	movw	r20, r26
     cec:	6c 2d       	mov	r22, r12
     cee:	7c 2d       	mov	r23, r12
     cf0:	8c 2d       	mov	r24, r12
     cf2:	9c 2d       	mov	r25, r12
     cf4:	34 5f       	subi	r19, 0xF4	; 244
     cf6:	41 40       	sbci	r20, 0x01	; 1
     cf8:	51 09       	sbc	r21, r1
     cfa:	61 09       	sbc	r22, r1
     cfc:	71 09       	sbc	r23, r1
     cfe:	81 09       	sbc	r24, r1
     d00:	91 09       	sbc	r25, r1
     d02:	29 83       	std	Y+1, r18	; 0x01
     d04:	3a 83       	std	Y+2, r19	; 0x02
     d06:	4b 83       	std	Y+3, r20	; 0x03
     d08:	5c 83       	std	Y+4, r21	; 0x04
     d0a:	6d 83       	std	Y+5, r22	; 0x05
     d0c:	7e 83       	std	Y+6, r23	; 0x06
     d0e:	8f 83       	std	Y+7, r24	; 0x07
     d10:	98 87       	std	Y+8, r25	; 0x08
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
     d12:	59 01       	movw	r10, r18
     d14:	6a 01       	movw	r12, r20
     d16:	7b 01       	movw	r14, r22
     d18:	8c 01       	movw	r16, r24
     d1a:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     d1e:	29 87       	std	Y+9, r18	; 0x09
     d20:	3a 87       	std	Y+10, r19	; 0x0a
     d22:	4b 87       	std	Y+11, r20	; 0x0b
     d24:	5c 87       	std	Y+12, r21	; 0x0c
     d26:	6d 8b       	std	Y+21, r22	; 0x15
     d28:	7e 8b       	std	Y+22, r23	; 0x16
     d2a:	8f 8b       	std	Y+23, r24	; 0x17
     d2c:	98 8f       	std	Y+24, r25	; 0x18
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
     d2e:	a9 8d       	ldd	r26, Y+25	; 0x19
     d30:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d32:	58 96       	adiw	r26, 0x18	; 24
     d34:	3c 91       	ld	r19, X
     d36:	58 97       	sbiw	r26, 0x18	; 24
     d38:	57 96       	adiw	r26, 0x17	; 23
     d3a:	2c 91       	ld	r18, X
     d3c:	93 2f       	mov	r25, r19
     d3e:	99 0f       	add	r25, r25
     d40:	99 0b       	sbc	r25, r25
     d42:	49 2f       	mov	r20, r25
     d44:	59 2f       	mov	r21, r25
     d46:	69 2f       	mov	r22, r25
     d48:	79 2f       	mov	r23, r25
     d4a:	89 2f       	mov	r24, r25
     d4c:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     d50:	0c e0       	ldi	r16, 0x0C	; 12
     d52:	0e 94 36 23 	call	0x466c	; 0x466c <__ashldi3>
     d56:	72 2e       	mov	r7, r18
     d58:	83 2e       	mov	r8, r19
     d5a:	94 2e       	mov	r9, r20
     d5c:	25 2e       	mov	r2, r21
     d5e:	36 2e       	mov	r3, r22
     d60:	67 2e       	mov	r6, r23
     d62:	58 2e       	mov	r5, r24
     d64:	49 2e       	mov	r4, r25
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
     d66:	e9 8d       	ldd	r30, Y+25	; 0x19
     d68:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d6a:	32 8d       	ldd	r19, Z+26	; 0x1a
     d6c:	21 8d       	ldd	r18, Z+25	; 0x19
     d6e:	93 2f       	mov	r25, r19
     d70:	99 0f       	add	r25, r25
     d72:	99 0b       	sbc	r25, r25
     d74:	a9 84       	ldd	r10, Y+9	; 0x09
     d76:	ba 84       	ldd	r11, Y+10	; 0x0a
     d78:	cb 84       	ldd	r12, Y+11	; 0x0b
     d7a:	dc 84       	ldd	r13, Y+12	; 0x0c
     d7c:	ed 88       	ldd	r14, Y+21	; 0x15
     d7e:	fe 88       	ldd	r15, Y+22	; 0x16
     d80:	0f 89       	ldd	r16, Y+23	; 0x17
     d82:	18 8d       	ldd	r17, Y+24	; 0x18
     d84:	49 2f       	mov	r20, r25
     d86:	59 2f       	mov	r21, r25
     d88:	69 2f       	mov	r22, r25
     d8a:	79 2f       	mov	r23, r25
     d8c:	89 2f       	mov	r24, r25
     d8e:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     d92:	08 e0       	ldi	r16, 0x08	; 8
     d94:	0e 94 4f 23 	call	0x469e	; 0x469e <__ashrdi3>
     d98:	a7 2c       	mov	r10, r7
     d9a:	b8 2c       	mov	r11, r8
     d9c:	c9 2c       	mov	r12, r9
     d9e:	d2 2c       	mov	r13, r2
     da0:	e3 2c       	mov	r14, r3
     da2:	f6 2c       	mov	r15, r6
     da4:	05 2d       	mov	r16, r5
     da6:	14 2d       	mov	r17, r4
     da8:	0e 94 6d 23 	call	0x46da	; 0x46da <__adddi3>
     dac:	70 58       	subi	r23, 0x80	; 128
     dae:	8f 4f       	sbci	r24, 0xFF	; 255
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	a9 8d       	ldd	r26, Y+25	; 0x19
     db4:	ba 8d       	ldd	r27, Y+26	; 0x1a
     db6:	55 96       	adiw	r26, 0x15	; 21
     db8:	2d 90       	ld	r2, X+
     dba:	3c 90       	ld	r3, X
     dbc:	56 97       	sbiw	r26, 0x16	; 22
     dbe:	51 01       	movw	r10, r2
     dc0:	c1 2c       	mov	r12, r1
     dc2:	d1 2c       	mov	r13, r1
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	00 e0       	ldi	r16, 0x00	; 0
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     dd0:	01 e2       	ldi	r16, 0x21	; 33
     dd2:	0e 94 4f 23 	call	0x469e	; 0x469e <__ashrdi3>
     dd6:	32 2e       	mov	r3, r18
     dd8:	23 2e       	mov	r2, r19
     dda:	49 8b       	std	Y+17, r20	; 0x11
     ddc:	5a 8b       	std	Y+18, r21	; 0x12
     dde:	6b 8b       	std	Y+19, r22	; 0x13
     de0:	47 2e       	mov	r4, r23
     de2:	58 2e       	mov	r5, r24
     de4:	9c 8b       	std	Y+20, r25	; 0x14

    if (var1 == 0) {
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	0e 94 7f 23 	call	0x46fe	; 0x46fe <__cmpdi2_s8>
     dec:	09 f4       	brne	.+2      	; 0xdf0 <_ZN15Adafruit_BME28012readPressureEv+0x176>
     dee:	26 c1       	rjmp	.+588    	; 0x103c <_ZN15Adafruit_BME28012readPressureEv+0x3c2>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
     df0:	e9 8d       	ldd	r30, Y+25	; 0x19
     df2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     df4:	30 a1       	ldd	r19, Z+32	; 0x20
     df6:	27 8d       	ldd	r18, Z+31	; 0x1f
     df8:	93 2f       	mov	r25, r19
     dfa:	99 0f       	add	r25, r25
     dfc:	99 0b       	sbc	r25, r25
     dfe:	a9 84       	ldd	r10, Y+9	; 0x09
     e00:	ba 84       	ldd	r11, Y+10	; 0x0a
     e02:	cb 84       	ldd	r12, Y+11	; 0x0b
     e04:	dc 84       	ldd	r13, Y+12	; 0x0c
     e06:	ed 88       	ldd	r14, Y+21	; 0x15
     e08:	fe 88       	ldd	r15, Y+22	; 0x16
     e0a:	0f 89       	ldd	r16, Y+23	; 0x17
     e0c:	18 8d       	ldd	r17, Y+24	; 0x18
     e0e:	49 2f       	mov	r20, r25
     e10:	59 2f       	mov	r21, r25
     e12:	69 2f       	mov	r22, r25
     e14:	79 2f       	mov	r23, r25
     e16:	89 2f       	mov	r24, r25
     e18:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     e1c:	29 87       	std	Y+9, r18	; 0x09
     e1e:	3a 87       	std	Y+10, r19	; 0x0a
     e20:	4b 87       	std	Y+11, r20	; 0x0b
     e22:	75 2e       	mov	r7, r21
     e24:	4b 01       	movw	r8, r22
     e26:	8c 87       	std	Y+12, r24	; 0x0c
     e28:	69 2e       	mov	r6, r25
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
     e2a:	a9 8d       	ldd	r26, Y+25	; 0x19
     e2c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     e2e:	5e 96       	adiw	r26, 0x1e	; 30
     e30:	3c 91       	ld	r19, X
     e32:	5e 97       	sbiw	r26, 0x1e	; 30
     e34:	5d 96       	adiw	r26, 0x1d	; 29
     e36:	2c 91       	ld	r18, X
     e38:	93 2f       	mov	r25, r19
     e3a:	99 0f       	add	r25, r25
     e3c:	99 0b       	sbc	r25, r25
     e3e:	a9 80       	ldd	r10, Y+1	; 0x01
     e40:	ba 80       	ldd	r11, Y+2	; 0x02
     e42:	cb 80       	ldd	r12, Y+3	; 0x03
     e44:	dc 80       	ldd	r13, Y+4	; 0x04
     e46:	ed 80       	ldd	r14, Y+5	; 0x05
     e48:	fe 80       	ldd	r15, Y+6	; 0x06
     e4a:	0f 81       	ldd	r16, Y+7	; 0x07
     e4c:	18 85       	ldd	r17, Y+8	; 0x08
     e4e:	49 2f       	mov	r20, r25
     e50:	59 2f       	mov	r21, r25
     e52:	69 2f       	mov	r22, r25
     e54:	79 2f       	mov	r23, r25
     e56:	89 2f       	mov	r24, r25
     e58:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     e5c:	01 e1       	ldi	r16, 0x11	; 17
     e5e:	0e 94 36 23 	call	0x466c	; 0x466c <__ashldi3>
     e62:	a9 84       	ldd	r10, Y+9	; 0x09
     e64:	ba 84       	ldd	r11, Y+10	; 0x0a
     e66:	cb 84       	ldd	r12, Y+11	; 0x0b
     e68:	d7 2c       	mov	r13, r7
     e6a:	74 01       	movw	r14, r8
     e6c:	0c 85       	ldd	r16, Y+12	; 0x0c
     e6e:	16 2d       	mov	r17, r6
     e70:	0e 94 6d 23 	call	0x46da	; 0x46da <__adddi3>
     e74:	59 01       	movw	r10, r18
     e76:	6a 01       	movw	r12, r20
     e78:	7b 01       	movw	r14, r22
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	19 2f       	mov	r17, r25

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
     e7e:	4d 85       	ldd	r20, Y+13	; 0x0d
     e80:	5e 85       	ldd	r21, Y+14	; 0x0e
     e82:	6f 85       	ldd	r22, Y+15	; 0x0f
     e84:	78 89       	ldd	r23, Y+16	; 0x10
     e86:	84 e0       	ldi	r24, 0x04	; 4
     e88:	75 95       	asr	r23
     e8a:	67 95       	ror	r22
     e8c:	57 95       	ror	r21
     e8e:	47 95       	ror	r20
     e90:	8a 95       	dec	r24
     e92:	d1 f7       	brne	.-12     	; 0xe88 <_ZN15Adafruit_BME28012readPressureEv+0x20e>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a0 e1       	ldi	r26, 0x10	; 16
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	84 1b       	sub	r24, r20
     e9e:	95 0b       	sbc	r25, r21
     ea0:	a6 0b       	sbc	r26, r22
     ea2:	b7 0b       	sbc	r27, r23
     ea4:	3c 01       	movw	r6, r24
     ea6:	4d 01       	movw	r8, r26
     ea8:	99 0c       	add	r9, r9
     eaa:	66 08       	sbc	r6, r6
     eac:	76 2c       	mov	r7, r6
     eae:	43 01       	movw	r8, r6
     eb0:	9c 01       	movw	r18, r24
     eb2:	ad 01       	movw	r20, r26
     eb4:	66 2d       	mov	r22, r6
     eb6:	76 2d       	mov	r23, r6
     eb8:	86 2d       	mov	r24, r6
     eba:	96 2d       	mov	r25, r6
     ebc:	0f e1       	ldi	r16, 0x1F	; 31
     ebe:	0e 94 36 23 	call	0x466c	; 0x466c <__ashldi3>
     ec2:	49 01       	movw	r8, r18
     ec4:	3a 01       	movw	r6, r20
     ec6:	b6 2f       	mov	r27, r22
     ec8:	a7 2f       	mov	r26, r23
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	e9 8d       	ldd	r30, Y+25	; 0x19
     ed0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ed2:	34 8d       	ldd	r19, Z+28	; 0x1c
     ed4:	23 8d       	ldd	r18, Z+27	; 0x1b
     ed6:	93 2f       	mov	r25, r19
     ed8:	99 0f       	add	r25, r25
     eda:	99 0b       	sbc	r25, r25
     edc:	49 2f       	mov	r20, r25
     ede:	59 2f       	mov	r21, r25
     ee0:	69 2f       	mov	r22, r25
     ee2:	79 2f       	mov	r23, r25
     ee4:	89 2f       	mov	r24, r25
     ee6:	03 e2       	ldi	r16, 0x23	; 35
     ee8:	0e 94 36 23 	call	0x466c	; 0x466c <__ashldi3>
     eec:	09 81       	ldd	r16, Y+1	; 0x01
     eee:	0e 94 6d 23 	call	0x46da	; 0x46da <__adddi3>
     ef2:	59 01       	movw	r10, r18
     ef4:	6a 01       	movw	r12, r20
     ef6:	7b 01       	movw	r14, r22
     ef8:	8c 01       	movw	r16, r24
     efa:	94 01       	movw	r18, r8
     efc:	a3 01       	movw	r20, r6
     efe:	6b 2f       	mov	r22, r27
     f00:	7a 2f       	mov	r23, r26
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	0e 94 76 23 	call	0x46ec	; 0x46ec <__subdi3>
     f0a:	e5 e3       	ldi	r30, 0x35	; 53
     f0c:	ae 2e       	mov	r10, r30
     f0e:	fc e0       	ldi	r31, 0x0C	; 12
     f10:	bf 2e       	mov	r11, r31
     f12:	c1 2c       	mov	r12, r1
     f14:	d1 2c       	mov	r13, r1
     f16:	e1 2c       	mov	r14, r1
     f18:	f1 2c       	mov	r15, r1
     f1a:	00 e0       	ldi	r16, 0x00	; 0
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     f22:	a3 2c       	mov	r10, r3
     f24:	b2 2c       	mov	r11, r2
     f26:	c9 88       	ldd	r12, Y+17	; 0x11
     f28:	da 88       	ldd	r13, Y+18	; 0x12
     f2a:	eb 88       	ldd	r14, Y+19	; 0x13
     f2c:	f4 2c       	mov	r15, r4
     f2e:	05 2d       	mov	r16, r5
     f30:	1c 89       	ldd	r17, Y+20	; 0x14
     f32:	0e 94 68 22 	call	0x44d0	; 0x44d0 <__divdi3>
     f36:	29 83       	std	Y+1, r18	; 0x01
     f38:	3a 83       	std	Y+2, r19	; 0x02
     f3a:	4b 83       	std	Y+3, r20	; 0x03
     f3c:	5c 83       	std	Y+4, r21	; 0x04
     f3e:	6d 83       	std	Y+5, r22	; 0x05
     f40:	7e 83       	std	Y+6, r23	; 0x06
     f42:	8f 83       	std	Y+7, r24	; 0x07
     f44:	98 87       	std	Y+8, r25	; 0x08
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
     f46:	0d e0       	ldi	r16, 0x0D	; 13
     f48:	0e 94 4f 23 	call	0x469e	; 0x469e <__ashrdi3>
     f4c:	92 2e       	mov	r9, r18
     f4e:	83 2e       	mov	r8, r19
     f50:	74 2e       	mov	r7, r20
     f52:	65 2e       	mov	r6, r21
     f54:	56 2e       	mov	r5, r22
     f56:	47 2e       	mov	r4, r23
     f58:	38 2e       	mov	r3, r24
     f5a:	29 2e       	mov	r2, r25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
     f5c:	a9 8d       	ldd	r26, Y+25	; 0x19
     f5e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f60:	96 96       	adiw	r26, 0x26	; 38
     f62:	3c 91       	ld	r19, X
     f64:	96 97       	sbiw	r26, 0x26	; 38
     f66:	95 96       	adiw	r26, 0x25	; 37
     f68:	2c 91       	ld	r18, X
     f6a:	93 2f       	mov	r25, r19
     f6c:	99 0f       	add	r25, r25
     f6e:	99 0b       	sbc	r25, r25
     f70:	a9 2c       	mov	r10, r9
     f72:	b8 2c       	mov	r11, r8
     f74:	c7 2c       	mov	r12, r7
     f76:	d6 2c       	mov	r13, r6
     f78:	e5 2c       	mov	r14, r5
     f7a:	f4 2c       	mov	r15, r4
     f7c:	03 2d       	mov	r16, r3
     f7e:	12 2d       	mov	r17, r2
     f80:	49 2f       	mov	r20, r25
     f82:	59 2f       	mov	r21, r25
     f84:	69 2f       	mov	r22, r25
     f86:	79 2f       	mov	r23, r25
     f88:	89 2f       	mov	r24, r25
     f8a:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     f8e:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     f92:	09 e1       	ldi	r16, 0x19	; 25
     f94:	0e 94 4f 23 	call	0x469e	; 0x469e <__ashrdi3>
     f98:	a9 80       	ldd	r10, Y+1	; 0x01
     f9a:	ba 80       	ldd	r11, Y+2	; 0x02
     f9c:	cb 80       	ldd	r12, Y+3	; 0x03
     f9e:	dc 80       	ldd	r13, Y+4	; 0x04
     fa0:	ed 80       	ldd	r14, Y+5	; 0x05
     fa2:	fe 80       	ldd	r15, Y+6	; 0x06
     fa4:	0f 81       	ldd	r16, Y+7	; 0x07
     fa6:	18 85       	ldd	r17, Y+8	; 0x08
     fa8:	0e 94 6d 23 	call	0x46da	; 0x46da <__adddi3>
     fac:	19 01       	movw	r2, r18
     fae:	2a 01       	movw	r4, r20
     fb0:	3b 01       	movw	r6, r22
     fb2:	4c 01       	movw	r8, r24
     fb4:	e9 8d       	ldd	r30, Y+25	; 0x19
     fb6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     fb8:	34 a1       	ldd	r19, Z+36	; 0x24
     fba:	23 a1       	ldd	r18, Z+35	; 0x23
     fbc:	93 2f       	mov	r25, r19
     fbe:	99 0f       	add	r25, r25
     fc0:	99 0b       	sbc	r25, r25
     fc2:	49 2f       	mov	r20, r25
     fc4:	59 2f       	mov	r21, r25
     fc6:	69 2f       	mov	r22, r25
     fc8:	79 2f       	mov	r23, r25
     fca:	89 2f       	mov	r24, r25
     fcc:	0e 94 15 22 	call	0x442a	; 0x442a <__muldi3>
     fd0:	03 e1       	ldi	r16, 0x13	; 19
     fd2:	0e 94 4f 23 	call	0x469e	; 0x469e <__ashrdi3>
     fd6:	59 01       	movw	r10, r18
     fd8:	6a 01       	movw	r12, r20
     fda:	7b 01       	movw	r14, r22
     fdc:	8c 01       	movw	r16, r24
     fde:	91 01       	movw	r18, r2
     fe0:	a2 01       	movw	r20, r4
     fe2:	b3 01       	movw	r22, r6
     fe4:	c4 01       	movw	r24, r8
     fe6:	0e 94 6d 23 	call	0x46da	; 0x46da <__adddi3>
     fea:	08 e0       	ldi	r16, 0x08	; 8
     fec:	0e 94 4f 23 	call	0x469e	; 0x469e <__ashrdi3>
     ff0:	59 01       	movw	r10, r18
     ff2:	6a 01       	movw	r12, r20
     ff4:	7b 01       	movw	r14, r22
     ff6:	e8 2f       	mov	r30, r24
     ff8:	19 2f       	mov	r17, r25
    return (float)p/256;
     ffa:	a9 8d       	ldd	r26, Y+25	; 0x19
     ffc:	ba 8d       	ldd	r27, Y+26	; 0x1a
     ffe:	92 96       	adiw	r26, 0x22	; 34
    1000:	3c 91       	ld	r19, X
    1002:	92 97       	sbiw	r26, 0x22	; 34
    1004:	91 96       	adiw	r26, 0x21	; 33
    1006:	2c 91       	ld	r18, X
    1008:	93 2f       	mov	r25, r19
    100a:	99 0f       	add	r25, r25
    100c:	99 0b       	sbc	r25, r25
    100e:	49 2f       	mov	r20, r25
    1010:	59 2f       	mov	r21, r25
    1012:	69 2f       	mov	r22, r25
    1014:	79 2f       	mov	r23, r25
    1016:	89 2f       	mov	r24, r25
    1018:	04 e0       	ldi	r16, 0x04	; 4
    101a:	0e 94 36 23 	call	0x466c	; 0x466c <__ashldi3>
    101e:	0e 2f       	mov	r16, r30
    1020:	0e 94 6d 23 	call	0x46da	; 0x46da <__adddi3>
    1024:	c5 d5       	rcall	.+2954   	; 0x1bb0 <__floatdisf>
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5b e3       	ldi	r21, 0x3B	; 59
    102e:	a0 d6       	rcall	.+3392   	; 0x1d70 <__mulsf3>
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <_ZN15Adafruit_BME28012readPressureEv+0x3c8>

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	80 ec       	ldi	r24, 0xC0	; 192
    1038:	9f e7       	ldi	r25, 0x7F	; 127
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <_ZN15Adafruit_BME28012readPressureEv+0x3c8>
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	cb 01       	movw	r24, r22
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
    1042:	6a 96       	adiw	r28, 0x1a	; 26
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	bf 90       	pop	r11
    1060:	af 90       	pop	r10
    1062:	9f 90       	pop	r9
    1064:	8f 90       	pop	r8
    1066:	7f 90       	pop	r7
    1068:	6f 90       	pop	r6
    106a:	5f 90       	pop	r5
    106c:	4f 90       	pop	r4
    106e:	3f 90       	pop	r3
    1070:	2f 90       	pop	r2
    1072:	08 95       	ret

00001074 <_ZN15Adafruit_BME28012readHumidityEv>:
/**************************************************************************/
/*!
    @brief  Returns the humidity from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
    1074:	4f 92       	push	r4
    1076:	5f 92       	push	r5
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
    readTemperature(); // must be done first to get t_fine
    1092:	5f dd       	rcall	.-1346   	; 0xb52 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    1094:	6d ef       	ldi	r22, 0xFD	; 253
    1096:	ce 01       	movw	r24, r28
    1098:	73 db       	rcall	.-2330   	; 0x780 <_ZN15Adafruit_BME2806read16Eh>
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
    109e:	81 15       	cp	r24, r1
    10a0:	20 e8       	ldi	r18, 0x80	; 128
    10a2:	92 07       	cpc	r25, r18
    10a4:	a1 05       	cpc	r26, r1
    10a6:	b1 05       	cpc	r27, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <_ZN15Adafruit_BME28012readHumidityEv+0x38>
    10aa:	cb c0       	rjmp	.+406    	; 0x1242 <_ZN15Adafruit_BME28012readHumidityEv+0x1ce>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
    10ac:	8f 80       	ldd	r8, Y+7	; 0x07
    10ae:	98 84       	ldd	r9, Y+8	; 0x08
    10b0:	a9 84       	ldd	r10, Y+9	; 0x09
    10b2:	ba 84       	ldd	r11, Y+10	; 0x0a
    10b4:	3c e2       	ldi	r19, 0x2C	; 44
    10b6:	93 1a       	sub	r9, r19
    10b8:	31 e0       	ldi	r19, 0x01	; 1
    10ba:	a3 0a       	sbc	r10, r19
    10bc:	b1 08       	sbc	r11, r1

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
    10be:	3e e0       	ldi	r19, 0x0E	; 14
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	3a 95       	dec	r19
    10ca:	d1 f7       	brne	.-12     	; 0x10c0 <_ZN15Adafruit_BME28012readHumidityEv+0x4c>
    10cc:	4b a5       	ldd	r20, Y+43	; 0x2b
    10ce:	5c a5       	ldd	r21, Y+44	; 0x2c
    10d0:	05 2e       	mov	r0, r21
    10d2:	00 0c       	add	r0, r0
    10d4:	66 0b       	sbc	r22, r22
    10d6:	77 0b       	sbc	r23, r23
    10d8:	e4 e1       	ldi	r30, 0x14	; 20
    10da:	44 0f       	add	r20, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	ea 95       	dec	r30
    10e4:	d1 f7       	brne	.-12     	; 0x10da <_ZN15Adafruit_BME28012readHumidityEv+0x66>
    10e6:	6c 01       	movw	r12, r24
    10e8:	7d 01       	movw	r14, r26
    10ea:	c4 1a       	sub	r12, r20
    10ec:	d5 0a       	sbc	r13, r21
    10ee:	e6 0a       	sbc	r14, r22
    10f0:	f7 0a       	sbc	r15, r23
    10f2:	ad a5       	ldd	r26, Y+45	; 0x2d
    10f4:	be a5       	ldd	r27, Y+46	; 0x2e
    10f6:	a5 01       	movw	r20, r10
    10f8:	94 01       	movw	r18, r8
    10fa:	0e 94 0f 22 	call	0x441e	; 0x441e <__mulshisi3>
    10fe:	c6 1a       	sub	r12, r22
    1100:	d7 0a       	sbc	r13, r23
    1102:	e8 0a       	sbc	r14, r24
    1104:	f9 0a       	sbc	r15, r25
    1106:	40 e4       	ldi	r20, 0x40	; 64
    1108:	d4 0e       	add	r13, r20
    110a:	e1 1c       	adc	r14, r1
    110c:	f1 1c       	adc	r15, r1
    110e:	ff e0       	ldi	r31, 0x0F	; 15
    1110:	f5 94       	asr	r15
    1112:	e7 94       	ror	r14
    1114:	d7 94       	ror	r13
    1116:	c7 94       	ror	r12
    1118:	fa 95       	dec	r31
    111a:	d1 f7       	brne	.-12     	; 0x1110 <_ZN15Adafruit_BME28012readHumidityEv+0x9c>
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
    111c:	aa a5       	ldd	r26, Y+42	; 0x2a
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	a5 01       	movw	r20, r10
    1122:	94 01       	movw	r18, r8
    1124:	0e 94 05 22 	call	0x440a	; 0x440a <__muluhisi3>
    1128:	2b 01       	movw	r4, r22
    112a:	3c 01       	movw	r6, r24
    112c:	ab e0       	ldi	r26, 0x0B	; 11
    112e:	75 94       	asr	r7
    1130:	67 94       	ror	r6
    1132:	57 94       	ror	r5
    1134:	47 94       	ror	r4
    1136:	aa 95       	dec	r26
    1138:	d1 f7       	brne	.-12     	; 0x112e <_ZN15Adafruit_BME28012readHumidityEv+0xba>
    113a:	50 e8       	ldi	r21, 0x80	; 128
    113c:	55 0e       	add	r5, r21
    113e:	61 1c       	adc	r6, r1
    1140:	71 1c       	adc	r7, r1
    1142:	af a5       	ldd	r26, Y+47	; 0x2f
    1144:	0a 2e       	mov	r0, r26
    1146:	00 0c       	add	r0, r0
    1148:	bb 0b       	sbc	r27, r27
    114a:	a5 01       	movw	r20, r10
    114c:	94 01       	movw	r18, r8
    114e:	0e 94 0f 22 	call	0x441e	; 0x441e <__mulshisi3>
    1152:	ba e0       	ldi	r27, 0x0A	; 10
    1154:	95 95       	asr	r25
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	ba 95       	dec	r27
    115e:	d1 f7       	brne	.-12     	; 0x1154 <_ZN15Adafruit_BME28012readHumidityEv+0xe0>
    1160:	a3 01       	movw	r20, r6
    1162:	92 01       	movw	r18, r4
    1164:	0e 94 bd 21 	call	0x437a	; 0x437a <__mulsi3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	b5 95       	asr	r27
    1170:	a7 95       	ror	r26
    1172:	97 95       	ror	r25
    1174:	87 95       	ror	r24
    1176:	2a 95       	dec	r18
    1178:	d1 f7       	brne	.-12     	; 0x116e <_ZN15Adafruit_BME28012readHumidityEv+0xfa>
    117a:	9c 01       	movw	r18, r24
    117c:	ad 01       	movw	r20, r26
    117e:	40 5e       	subi	r20, 0xE0	; 224
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	a8 a5       	ldd	r26, Y+40	; 0x28
    1184:	b9 a5       	ldd	r27, Y+41	; 0x29
    1186:	0e 94 0f 22 	call	0x441e	; 0x441e <__mulshisi3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	90 5e       	subi	r25, 0xE0	; 224
    1190:	af 4f       	sbci	r26, 0xFF	; 255
    1192:	bf 4f       	sbci	r27, 0xFF	; 255
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	3e e0       	ldi	r19, 0x0E	; 14
    119a:	95 95       	asr	r25
    119c:	87 95       	ror	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	3a 95       	dec	r19
    11a4:	d1 f7       	brne	.-12     	; 0x119a <_ZN15Adafruit_BME28012readHumidityEv+0x126>
    11a6:	a7 01       	movw	r20, r14
    11a8:	96 01       	movw	r18, r12
    11aa:	0e 94 bd 21 	call	0x437a	; 0x437a <__mulsi3>
    11ae:	6b 01       	movw	r12, r22
    11b0:	7c 01       	movw	r14, r24

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
    11b2:	4f e0       	ldi	r20, 0x0F	; 15
    11b4:	95 95       	asr	r25
    11b6:	87 95       	ror	r24
    11b8:	77 95       	ror	r23
    11ba:	67 95       	ror	r22
    11bc:	4a 95       	dec	r20
    11be:	d1 f7       	brne	.-12     	; 0x11b4 <_ZN15Adafruit_BME28012readHumidityEv+0x140>
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	0e 94 bd 21 	call	0x437a	; 0x437a <__mulsi3>
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	67 e0       	ldi	r22, 0x07	; 7
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	37 95       	ror	r19
    11d4:	27 95       	ror	r18
    11d6:	6a 95       	dec	r22
    11d8:	d1 f7       	brne	.-12     	; 0x11ce <_ZN15Adafruit_BME28012readHumidityEv+0x15a>
    11da:	af a1       	ldd	r26, Y+39	; 0x27
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	0e 94 05 22 	call	0x440a	; 0x440a <__muluhisi3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	74 e0       	ldi	r23, 0x04	; 4
    11e8:	b5 95       	asr	r27
    11ea:	a7 95       	ror	r26
    11ec:	97 95       	ror	r25
    11ee:	87 95       	ror	r24
    11f0:	7a 95       	dec	r23
    11f2:	d1 f7       	brne	.-12     	; 0x11e8 <_ZN15Adafruit_BME28012readHumidityEv+0x174>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    11f4:	a7 01       	movw	r20, r14
    11f6:	96 01       	movw	r18, r12
    11f8:	28 1b       	sub	r18, r24
    11fa:	39 0b       	sbc	r19, r25
    11fc:	4a 0b       	sbc	r20, r26
    11fe:	5b 0b       	sbc	r21, r27
    1200:	da 01       	movw	r26, r20
    1202:	c9 01       	movw	r24, r18
    1204:	57 ff       	sbrs	r21, 7
    1206:	03 c0       	rjmp	.+6      	; 0x120e <_ZN15Adafruit_BME28012readHumidityEv+0x19a>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	dc 01       	movw	r26, r24
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	a1 05       	cpc	r26, r1
    1214:	39 e1       	ldi	r19, 0x19	; 25
    1216:	b3 07       	cpc	r27, r19
    1218:	24 f0       	brlt	.+8      	; 0x1222 <_ZN15Adafruit_BME28012readHumidityEv+0x1ae>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b9 e1       	ldi	r27, 0x19	; 25
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	2c e0       	ldi	r18, 0x0C	; 12
    1228:	95 95       	asr	r25
    122a:	87 95       	ror	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	2a 95       	dec	r18
    1232:	d1 f7       	brne	.-12     	; 0x1228 <_ZN15Adafruit_BME28012readHumidityEv+0x1b4>
    1234:	c3 d4       	rcall	.+2438   	; 0x1bbc <__floatsisf>
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5a e3       	ldi	r21, 0x3A	; 58
    123e:	98 d5       	rcall	.+2864   	; 0x1d70 <__mulsf3>
    1240:	04 c0       	rjmp	.+8      	; 0x124a <_ZN15Adafruit_BME28012readHumidityEv+0x1d6>
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 ec       	ldi	r24, 0xC0	; 192
    1248:	9f e7       	ldi	r25, 0x7F	; 127

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	6f 90       	pop	r6
    1262:	5f 90       	pop	r5
    1264:	4f 90       	pop	r4
    1266:	08 95       	ret

00001268 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @param  atmospheric   Atmospheric pressure in hPa
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	6a 01       	movw	r12, r20
    1272:	7b 01       	movw	r14, r22

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
    1274:	02 dd       	rcall	.-1532   	; 0xc7a <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	48 ec       	ldi	r20, 0xC8	; 200
    127c:	52 e4       	ldi	r21, 0x42	; 66
    127e:	30 d4       	rcall	.+2144   	; 0x1ae0 <__divsf3>
    1280:	a7 01       	movw	r20, r14
    1282:	96 01       	movw	r18, r12
    1284:	2d d4       	rcall	.+2138   	; 0x1ae0 <__divsf3>
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	3e ed       	ldi	r19, 0xDE	; 222
    128a:	42 e4       	ldi	r20, 0x42	; 66
    128c:	5e e3       	ldi	r21, 0x3E	; 62
    128e:	d3 d5       	rcall	.+2982   	; 0x1e36 <pow>
    1290:	9b 01       	movw	r18, r22
    1292:	ac 01       	movw	r20, r24
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	9f e3       	ldi	r25, 0x3F	; 63
    129c:	bc d3       	rcall	.+1912   	; 0x1a16 <__subsf3>
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3a e2       	ldi	r19, 0x2A	; 42
    12a2:	4d e2       	ldi	r20, 0x2D	; 45
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	64 d5       	rcall	.+2760   	; 0x1d70 <__mulsf3>
}
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	08 95       	ret

000012b2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    12b2:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <twi_state>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <twi_sendStop>
    12bc:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_inRepStart>
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	84 e1       	ldi	r24, 0x14	; 20
    12c4:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	85 e1       	ldi	r24, 0x15	; 21
    12cc:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
    12d0:	e9 eb       	ldi	r30, 0xB9	; 185
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	80 83       	st	Z, r24
    12da:	80 81       	ld	r24, Z
    12dc:	8d 7f       	andi	r24, 0xFD	; 253
    12de:	80 83       	st	Z, r24
    12e0:	88 e4       	ldi	r24, 0x48	; 72
    12e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    12e6:	85 e4       	ldi	r24, 0x45	; 69
    12e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    12ec:	08 95       	ret

000012ee <twi_readFrom>:
    12ee:	41 32       	cpi	r20, 0x21	; 33
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <twi_readFrom+0x6>
    12f2:	43 c0       	rjmp	.+134    	; 0x137a <twi_readFrom+0x8c>
    12f4:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_state>
    12f8:	91 11       	cpse	r25, r1
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <twi_readFrom+0x6>
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <twi_state>
    1302:	20 93 6e 05 	sts	0x056E, r18	; 0x80056e <twi_sendStop>
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <twi_error>
    130c:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <twi_masterBufferIndex>
    1310:	24 0f       	add	r18, r20
    1312:	20 93 47 05 	sts	0x0547, r18	; 0x800547 <twi_masterBufferLength>
    1316:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <twi_slarw>
    131a:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <twi_slarw>
    131e:	88 0f       	add	r24, r24
    1320:	89 2b       	or	r24, r25
    1322:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <twi_slarw>
    1326:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_inRepStart>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	61 f4       	brne	.+24     	; 0x1346 <twi_readFrom+0x58>
    132e:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_inRepStart>
    1332:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_slarw>
    1336:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    133a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    133e:	83 fd       	sbrc	r24, 3
    1340:	f8 cf       	rjmp	.-16     	; 0x1332 <twi_readFrom+0x44>
    1342:	85 ec       	ldi	r24, 0xC5	; 197
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <twi_readFrom+0x5a>
    1346:	85 ee       	ldi	r24, 0xE5	; 229
    1348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    134c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_state>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	e1 f3       	breq	.-8      	; 0x134c <twi_readFrom+0x5e>
    1354:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_masterBufferIndex>
    1358:	84 17       	cp	r24, r20
    135a:	10 f4       	brcc	.+4      	; 0x1360 <twi_readFrom+0x72>
    135c:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <twi_masterBufferIndex>
    1360:	a9 e4       	ldi	r26, 0x49	; 73
    1362:	b5 e0       	ldi	r27, 0x05	; 5
    1364:	96 2f       	mov	r25, r22
    1366:	fb 01       	movw	r30, r22
    1368:	8e 2f       	mov	r24, r30
    136a:	89 1b       	sub	r24, r25
    136c:	84 17       	cp	r24, r20
    136e:	18 f4       	brcc	.+6      	; 0x1376 <twi_readFrom+0x88>
    1370:	8d 91       	ld	r24, X+
    1372:	81 93       	st	Z+, r24
    1374:	f9 cf       	rjmp	.-14     	; 0x1368 <twi_readFrom+0x7a>
    1376:	84 2f       	mov	r24, r20
    1378:	08 95       	ret
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	08 95       	ret

0000137e <twi_writeTo>:
    137e:	0f 93       	push	r16
    1380:	41 32       	cpi	r20, 0x21	; 33
    1382:	08 f0       	brcs	.+2      	; 0x1386 <twi_writeTo+0x8>
    1384:	4a c0       	rjmp	.+148    	; 0x141a <twi_writeTo+0x9c>
    1386:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_state>
    138a:	91 11       	cpse	r25, r1
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <twi_writeTo+0x8>
    138e:	32 e0       	ldi	r19, 0x02	; 2
    1390:	30 93 70 05 	sts	0x0570, r19	; 0x800570 <twi_state>
    1394:	00 93 6e 05 	sts	0x056E, r16	; 0x80056e <twi_sendStop>
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	30 93 03 05 	sts	0x0503, r19	; 0x800503 <twi_error>
    139e:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <twi_masterBufferIndex>
    13a2:	40 93 47 05 	sts	0x0547, r20	; 0x800547 <twi_masterBufferLength>
    13a6:	56 2f       	mov	r21, r22
    13a8:	a9 e4       	ldi	r26, 0x49	; 73
    13aa:	b5 e0       	ldi	r27, 0x05	; 5
    13ac:	fb 01       	movw	r30, r22
    13ae:	3e 2f       	mov	r19, r30
    13b0:	35 1b       	sub	r19, r21
    13b2:	34 17       	cp	r19, r20
    13b4:	18 f4       	brcc	.+6      	; 0x13bc <twi_writeTo+0x3e>
    13b6:	31 91       	ld	r19, Z+
    13b8:	3d 93       	st	X+, r19
    13ba:	f9 cf       	rjmp	.-14     	; 0x13ae <twi_writeTo+0x30>
    13bc:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <twi_slarw>
    13c0:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <twi_slarw>
    13c4:	88 0f       	add	r24, r24
    13c6:	83 2b       	or	r24, r19
    13c8:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <twi_slarw>
    13cc:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_inRepStart>
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	61 f4       	brne	.+24     	; 0x13ec <twi_writeTo+0x6e>
    13d4:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_inRepStart>
    13d8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_slarw>
    13dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    13e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    13e4:	83 fd       	sbrc	r24, 3
    13e6:	f8 cf       	rjmp	.-16     	; 0x13d8 <twi_writeTo+0x5a>
    13e8:	85 ec       	ldi	r24, 0xC5	; 197
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <twi_writeTo+0x70>
    13ec:	85 ee       	ldi	r24, 0xE5	; 229
    13ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    13f2:	22 23       	and	r18, r18
    13f4:	21 f0       	breq	.+8      	; 0x13fe <twi_writeTo+0x80>
    13f6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <twi_state>
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	d1 f3       	breq	.-12     	; 0x13f2 <twi_writeTo+0x74>
    13fe:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_error>
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	79 f0       	breq	.+30     	; 0x1424 <twi_writeTo+0xa6>
    1406:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_error>
    140a:	80 32       	cpi	r24, 0x20	; 32
    140c:	41 f0       	breq	.+16     	; 0x141e <twi_writeTo+0xa0>
    140e:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_error>
    1412:	80 33       	cpi	r24, 0x30	; 48
    1414:	31 f0       	breq	.+12     	; 0x1422 <twi_writeTo+0xa4>
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	05 c0       	rjmp	.+10     	; 0x1424 <twi_writeTo+0xa6>
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <twi_writeTo+0xa6>
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <twi_writeTo+0xa6>
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	89 2f       	mov	r24, r25
    1426:	0f 91       	pop	r16
    1428:	08 95       	ret

0000142a <twi_transmit>:
    142a:	40 91 25 05 	lds	r20, 0x0525	; 0x800525 <twi_txBufferLength>
    142e:	26 2f       	mov	r18, r22
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	24 0f       	add	r18, r20
    1434:	31 1d       	adc	r19, r1
    1436:	21 32       	cpi	r18, 0x21	; 33
    1438:	31 05       	cpc	r19, r1
    143a:	dc f4       	brge	.+54     	; 0x1472 <twi_transmit+0x48>
    143c:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <twi_state>
    1440:	24 30       	cpi	r18, 0x04	; 4
    1442:	c9 f4       	brne	.+50     	; 0x1476 <twi_transmit+0x4c>
    1444:	fc 01       	movw	r30, r24
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	86 17       	cp	r24, r22
    144c:	58 f4       	brcc	.+22     	; 0x1464 <twi_transmit+0x3a>
    144e:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <twi_txBufferLength>
    1452:	21 91       	ld	r18, Z+
    1454:	dc 01       	movw	r26, r24
    1456:	a9 5d       	subi	r26, 0xD9	; 217
    1458:	ba 4f       	sbci	r27, 0xFA	; 250
    145a:	a3 0f       	add	r26, r19
    145c:	b1 1d       	adc	r27, r1
    145e:	2c 93       	st	X, r18
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	f3 cf       	rjmp	.-26     	; 0x144a <twi_transmit+0x20>
    1464:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_txBufferLength>
    1468:	68 0f       	add	r22, r24
    146a:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <twi_txBufferLength>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	08 95       	ret
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	08 95       	ret
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	08 95       	ret

0000147a <twi_attachSlaveRxEvent>:
    147a:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi_onSlaveReceive+0x1>
    147e:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_onSlaveReceive>
    1482:	08 95       	ret

00001484 <twi_attachSlaveTxEvent>:
    1484:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <twi_onSlaveTransmit+0x1>
    1488:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi_onSlaveTransmit>
    148c:	08 95       	ret

0000148e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    148e:	85 ed       	ldi	r24, 0xD5	; 213
    1490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1494:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1498:	84 fd       	sbrc	r24, 4
    149a:	fc cf       	rjmp	.-8      	; 0x1494 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    149c:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <twi_state>
    14a0:	08 95       	ret

000014a2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    14a2:	85 ec       	ldi	r24, 0xC5	; 197
    14a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    14a8:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <twi_state>
    14ac:	08 95       	ret

000014ae <__vector_39>:
}

ISR(TWI_vect)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	0b b6       	in	r0, 0x3b	; 59
    14ba:	0f 92       	push	r0
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
  switch(TW_STATUS){
    14d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    14d8:	88 7f       	andi	r24, 0xF8	; 248
    14da:	80 36       	cpi	r24, 0x60	; 96
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <__vector_39+0x32>
    14de:	9d c0       	rjmp	.+314    	; 0x161a <__vector_39+0x16c>
    14e0:	70 f5       	brcc	.+92     	; 0x153e <__vector_39+0x90>
    14e2:	88 32       	cpi	r24, 0x28	; 40
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__vector_39+0x3a>
    14e6:	5c c0       	rjmp	.+184    	; 0x15a0 <__vector_39+0xf2>
    14e8:	90 f4       	brcc	.+36     	; 0x150e <__vector_39+0x60>
    14ea:	80 31       	cpi	r24, 0x10	; 16
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <__vector_39+0x42>
    14ee:	55 c0       	rjmp	.+170    	; 0x159a <__vector_39+0xec>
    14f0:	38 f4       	brcc	.+14     	; 0x1500 <__vector_39+0x52>
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <__vector_39+0x4a>
    14f6:	f3 c0       	rjmp	.+486    	; 0x16de <__vector_39+0x230>
    14f8:	88 30       	cpi	r24, 0x08	; 8
    14fa:	09 f4       	brne	.+2      	; 0x14fe <__vector_39+0x50>
    14fc:	4e c0       	rjmp	.+156    	; 0x159a <__vector_39+0xec>
    14fe:	f2 c0       	rjmp	.+484    	; 0x16e4 <__vector_39+0x236>
    1500:	88 31       	cpi	r24, 0x18	; 24
    1502:	09 f4       	brne	.+2      	; 0x1506 <__vector_39+0x58>
    1504:	4d c0       	rjmp	.+154    	; 0x15a0 <__vector_39+0xf2>
    1506:	80 32       	cpi	r24, 0x20	; 32
    1508:	09 f4       	brne	.+2      	; 0x150c <__vector_39+0x5e>
    150a:	5e c0       	rjmp	.+188    	; 0x15c8 <__vector_39+0x11a>
    150c:	eb c0       	rjmp	.+470    	; 0x16e4 <__vector_39+0x236>
    150e:	80 34       	cpi	r24, 0x40	; 64
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_39+0x66>
    1512:	69 c0       	rjmp	.+210    	; 0x15e6 <__vector_39+0x138>
    1514:	50 f4       	brcc	.+20     	; 0x152a <__vector_39+0x7c>
    1516:	80 33       	cpi	r24, 0x30	; 48
    1518:	09 f4       	brne	.+2      	; 0x151c <__vector_39+0x6e>
    151a:	56 c0       	rjmp	.+172    	; 0x15c8 <__vector_39+0x11a>
    151c:	88 33       	cpi	r24, 0x38	; 56
    151e:	09 f0       	breq	.+2      	; 0x1522 <__vector_39+0x74>
    1520:	e1 c0       	rjmp	.+450    	; 0x16e4 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1522:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <twi_error>
      twi_releaseBus();
    1526:	bd df       	rcall	.-134    	; 0x14a2 <twi_releaseBus>
      break;
    1528:	dd c0       	rjmp	.+442    	; 0x16e4 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    152a:	80 35       	cpi	r24, 0x50	; 80
    152c:	09 f4       	brne	.+2      	; 0x1530 <__vector_39+0x82>
    152e:	4f c0       	rjmp	.+158    	; 0x15ce <__vector_39+0x120>
    1530:	88 35       	cpi	r24, 0x58	; 88
    1532:	09 f4       	brne	.+2      	; 0x1536 <__vector_39+0x88>
    1534:	5d c0       	rjmp	.+186    	; 0x15f0 <__vector_39+0x142>
    1536:	88 34       	cpi	r24, 0x48	; 72
    1538:	09 f0       	breq	.+2      	; 0x153c <__vector_39+0x8e>
    153a:	d4 c0       	rjmp	.+424    	; 0x16e4 <__vector_39+0x236>
    153c:	d2 c0       	rjmp	.+420    	; 0x16e2 <__vector_39+0x234>
    153e:	88 39       	cpi	r24, 0x98	; 152
    1540:	09 f4       	brne	.+2      	; 0x1544 <__vector_39+0x96>
    1542:	c3 c0       	rjmp	.+390    	; 0x16ca <__vector_39+0x21c>
    1544:	a8 f4       	brcc	.+42     	; 0x1570 <__vector_39+0xc2>
    1546:	88 37       	cpi	r24, 0x78	; 120
    1548:	09 f4       	brne	.+2      	; 0x154c <__vector_39+0x9e>
    154a:	67 c0       	rjmp	.+206    	; 0x161a <__vector_39+0x16c>
    154c:	38 f4       	brcc	.+14     	; 0x155c <__vector_39+0xae>
    154e:	88 36       	cpi	r24, 0x68	; 104
    1550:	09 f4       	brne	.+2      	; 0x1554 <__vector_39+0xa6>
    1552:	63 c0       	rjmp	.+198    	; 0x161a <__vector_39+0x16c>
    1554:	80 37       	cpi	r24, 0x70	; 112
    1556:	09 f4       	brne	.+2      	; 0x155a <__vector_39+0xac>
    1558:	60 c0       	rjmp	.+192    	; 0x161a <__vector_39+0x16c>
    155a:	c4 c0       	rjmp	.+392    	; 0x16e4 <__vector_39+0x236>
    155c:	88 38       	cpi	r24, 0x88	; 136
    155e:	09 f4       	brne	.+2      	; 0x1562 <__vector_39+0xb4>
    1560:	b4 c0       	rjmp	.+360    	; 0x16ca <__vector_39+0x21c>
    1562:	80 39       	cpi	r24, 0x90	; 144
    1564:	09 f4       	brne	.+2      	; 0x1568 <__vector_39+0xba>
    1566:	5f c0       	rjmp	.+190    	; 0x1626 <__vector_39+0x178>
    1568:	80 38       	cpi	r24, 0x80	; 128
    156a:	09 f0       	breq	.+2      	; 0x156e <__vector_39+0xc0>
    156c:	bb c0       	rjmp	.+374    	; 0x16e4 <__vector_39+0x236>
    156e:	5b c0       	rjmp	.+182    	; 0x1626 <__vector_39+0x178>
    1570:	80 3b       	cpi	r24, 0xB0	; 176
    1572:	09 f4       	brne	.+2      	; 0x1576 <__vector_39+0xc8>
    1574:	82 c0       	rjmp	.+260    	; 0x167a <__vector_39+0x1cc>
    1576:	38 f4       	brcc	.+14     	; 0x1586 <__vector_39+0xd8>
    1578:	80 3a       	cpi	r24, 0xA0	; 160
    157a:	09 f4       	brne	.+2      	; 0x157e <__vector_39+0xd0>
    157c:	66 c0       	rjmp	.+204    	; 0x164a <__vector_39+0x19c>
    157e:	88 3a       	cpi	r24, 0xA8	; 168
    1580:	09 f4       	brne	.+2      	; 0x1584 <__vector_39+0xd6>
    1582:	7b c0       	rjmp	.+246    	; 0x167a <__vector_39+0x1cc>
    1584:	af c0       	rjmp	.+350    	; 0x16e4 <__vector_39+0x236>
    1586:	80 3c       	cpi	r24, 0xC0	; 192
    1588:	09 f4       	brne	.+2      	; 0x158c <__vector_39+0xde>
    158a:	a3 c0       	rjmp	.+326    	; 0x16d2 <__vector_39+0x224>
    158c:	88 3c       	cpi	r24, 0xC8	; 200
    158e:	09 f4       	brne	.+2      	; 0x1592 <__vector_39+0xe4>
    1590:	a0 c0       	rjmp	.+320    	; 0x16d2 <__vector_39+0x224>
    1592:	88 3b       	cpi	r24, 0xB8	; 184
    1594:	09 f4       	brne	.+2      	; 0x1598 <__vector_39+0xea>
    1596:	86 c0       	rjmp	.+268    	; 0x16a4 <__vector_39+0x1f6>
    1598:	a5 c0       	rjmp	.+330    	; 0x16e4 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    159a:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_slarw>
    159e:	10 c0       	rjmp	.+32     	; 0x15c0 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    15a0:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <twi_masterBufferIndex>
    15a4:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <twi_masterBufferLength>
    15a8:	98 17       	cp	r25, r24
    15aa:	70 f5       	brcc	.+92     	; 0x1608 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    15ac:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_masterBufferIndex>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	8e 0f       	add	r24, r30
    15b4:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_masterBufferIndex>
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	e7 5b       	subi	r30, 0xB7	; 183
    15bc:	fa 4f       	sbci	r31, 0xFA	; 250
    15be:	80 81       	ld	r24, Z
    15c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15c4:	85 ec       	ldi	r24, 0xC5	; 197
    15c6:	82 c0       	rjmp	.+260    	; 0x16cc <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    15c8:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <twi_error>
    15cc:	8a c0       	rjmp	.+276    	; 0x16e2 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15ce:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_masterBufferIndex>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	8e 0f       	add	r24, r30
    15d6:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_masterBufferIndex>
    15da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	e7 5b       	subi	r30, 0xB7	; 183
    15e2:	fa 4f       	sbci	r31, 0xFA	; 250
    15e4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    15e6:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <twi_masterBufferIndex>
    15ea:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <twi_masterBufferLength>
    15ee:	6a c0       	rjmp	.+212    	; 0x16c4 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15f0:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_masterBufferIndex>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8e 0f       	add	r24, r30
    15f8:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_masterBufferIndex>
    15fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	e7 5b       	subi	r30, 0xB7	; 183
    1604:	fa 4f       	sbci	r31, 0xFA	; 250
    1606:	80 83       	st	Z, r24
	if (twi_sendStop)
    1608:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <twi_sendStop>
    160c:	81 11       	cpse	r24, r1
    160e:	69 c0       	rjmp	.+210    	; 0x16e2 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1616:	84 ea       	ldi	r24, 0xA4	; 164
    1618:	5d c0       	rjmp	.+186    	; 0x16d4 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1620:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_rxBufferIndex>
    1624:	cf cf       	rjmp	.-98     	; 0x15c4 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1626:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_rxBufferIndex>
    162a:	80 32       	cpi	r24, 0x20	; 32
    162c:	08 f0       	brcs	.+2      	; 0x1630 <__vector_39+0x182>
    162e:	4d c0       	rjmp	.+154    	; 0x16ca <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1630:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <twi_rxBufferIndex>
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	8e 0f       	add	r24, r30
    1638:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_rxBufferIndex>
    163c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	eb 5f       	subi	r30, 0xFB	; 251
    1644:	fa 4f       	sbci	r31, 0xFA	; 250
    1646:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1648:	bd cf       	rjmp	.-134    	; 0x15c4 <__vector_39+0x116>
    164a:	2b df       	rcall	.-426    	; 0x14a2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    164c:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_rxBufferIndex>
    1650:	80 32       	cpi	r24, 0x20	; 32
    1652:	30 f4       	brcc	.+12     	; 0x1660 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1654:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <twi_rxBufferIndex>
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	eb 5f       	subi	r30, 0xFB	; 251
    165c:	fa 4f       	sbci	r31, 0xFA	; 250
    165e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1660:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <twi_rxBufferIndex>
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_onSlaveReceive>
    166a:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <twi_onSlaveReceive+0x1>
    166e:	85 e0       	ldi	r24, 0x05	; 5
    1670:	95 e0       	ldi	r25, 0x05	; 5
    1672:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1674:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_rxBufferIndex>
      break;
    1678:	35 c0       	rjmp	.+106    	; 0x16e4 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1680:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1684:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1688:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <twi_onSlaveTransmit>
    168c:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <twi_onSlaveTransmit+0x1>
    1690:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1692:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_txBufferLength>
    1696:	81 11       	cpse	r24, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    16a0:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    16a4:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <twi_txBufferIndex>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	8e 0f       	add	r24, r30
    16ac:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <twi_txBufferIndex>
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	e9 5d       	subi	r30, 0xD9	; 217
    16b4:	fa 4f       	sbci	r31, 0xFA	; 250
    16b6:	80 81       	ld	r24, Z
    16b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    16bc:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <twi_txBufferIndex>
    16c0:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_txBufferLength>
    16c4:	98 17       	cp	r25, r24
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <__vector_39+0x21c>
    16c8:	7d cf       	rjmp	.-262    	; 0x15c4 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16ca:	85 e8       	ldi	r24, 0x85	; 133
    16cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16d2:	85 ec       	ldi	r24, 0xC5	; 197
    16d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    16d8:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <twi_state>
      break;
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    16de:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <twi_error>
      twi_stop();
    16e2:	d5 de       	rcall	.-598    	; 0x148e <twi_stop>
      break;
  }
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0b be       	out	0x3b, r0	; 59
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	08 95       	ret

00001710 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1710:	08 95       	ret

00001712 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1712:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    171c:	82 1b       	sub	r24, r18
    171e:	91 09       	sbc	r25, r1
    1720:	08 95       	ret

00001722 <_ZN7TwoWire4readEv>:
    1722:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    1726:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    172a:	98 17       	cp	r25, r24
    172c:	50 f4       	brcc	.+20     	; 0x1742 <_ZN7TwoWire4readEv+0x20>
    172e:	e9 2f       	mov	r30, r25
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	e9 55       	subi	r30, 0x59	; 89
    1734:	fa 4f       	sbci	r31, 0xFA	; 250
    1736:	20 81       	ld	r18, Z
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	9f 5f       	subi	r25, 0xFF	; 255
    173c:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <_ZN7TwoWire4readEv+0x24>
    1742:	2f ef       	ldi	r18, 0xFF	; 255
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    1746:	c9 01       	movw	r24, r18
    1748:	08 95       	ret

0000174a <_ZN7TwoWire4peekEv>:
    174a:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    174e:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    1752:	e8 17       	cp	r30, r24
    1754:	30 f4       	brcc	.+12     	; 0x1762 <_ZN7TwoWire4peekEv+0x18>
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	e9 55       	subi	r30, 0x59	; 89
    175a:	fa 4f       	sbci	r31, 0xFA	; 250
    175c:	80 81       	ld	r24, Z
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	08 95       	ret
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	08 95       	ret

00001768 <_ZN7TwoWire5flushEv>:
    1768:	08 95       	ret

0000176a <_ZN7TwoWire16onReceiveServiceEPhi>:
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	ec 01       	movw	r28, r24
    1770:	e0 91 7d 05 	lds	r30, 0x057D	; 0x80057d <_ZN7TwoWire14user_onReceiveE>
    1774:	f0 91 7e 05 	lds	r31, 0x057E	; 0x80057e <_ZN7TwoWire14user_onReceiveE+0x1>
    1778:	30 97       	sbiw	r30, 0x00	; 0
    177a:	f1 f0       	breq	.+60     	; 0x17b8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    177c:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    1780:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    1784:	98 17       	cp	r25, r24
    1786:	c0 f0       	brcs	.+48     	; 0x17b8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	29 2f       	mov	r18, r25
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	26 17       	cp	r18, r22
    1790:	37 07       	cpc	r19, r23
    1792:	54 f4       	brge	.+20     	; 0x17a8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1794:	de 01       	movw	r26, r28
    1796:	a2 0f       	add	r26, r18
    1798:	b3 1f       	adc	r27, r19
    179a:	4c 91       	ld	r20, X
    179c:	d9 01       	movw	r26, r18
    179e:	a9 55       	subi	r26, 0x59	; 89
    17a0:	ba 4f       	sbci	r27, 0xFA	; 250
    17a2:	4c 93       	st	X, r20
    17a4:	9f 5f       	subi	r25, 0xFF	; 255
    17a6:	f1 cf       	rjmp	.-30     	; 0x178a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    17a8:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    17ac:	60 93 a5 05 	sts	0x05A5, r22	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    17b0:	cb 01       	movw	r24, r22
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	19 94       	eijmp
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <_ZN7TwoWire16onRequestServiceEv>:
    17be:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <_ZN7TwoWire14user_onRequestE>
    17c2:	f0 91 80 05 	lds	r31, 0x0580	; 0x800580 <_ZN7TwoWire14user_onRequestE+0x1>
    17c6:	30 97       	sbiw	r30, 0x00	; 0
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    17ca:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire13txBufferIndexE>
    17ce:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    17d2:	19 94       	eijmp
    17d4:	08 95       	ret

000017d6 <_ZN7TwoWire5writeEPKhj>:
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	7c 01       	movw	r14, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8a 01       	movw	r16, r20
    17ec:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <_ZN7TwoWire12transmittingE>
    17f0:	22 23       	and	r18, r18
    17f2:	89 f0       	breq	.+34     	; 0x1816 <_ZN7TwoWire5writeEPKhj+0x40>
    17f4:	eb 01       	movw	r28, r22
    17f6:	6b 01       	movw	r12, r22
    17f8:	c4 0e       	add	r12, r20
    17fa:	d5 1e       	adc	r13, r21
    17fc:	cc 15       	cp	r28, r12
    17fe:	dd 05       	cpc	r29, r13
    1800:	61 f0       	breq	.+24     	; 0x181a <_ZN7TwoWire5writeEPKhj+0x44>
    1802:	69 91       	ld	r22, Y+
    1804:	d7 01       	movw	r26, r14
    1806:	ed 91       	ld	r30, X+
    1808:	fc 91       	ld	r31, X
    180a:	01 90       	ld	r0, Z+
    180c:	f0 81       	ld	r31, Z
    180e:	e0 2d       	mov	r30, r0
    1810:	c7 01       	movw	r24, r14
    1812:	19 95       	eicall
    1814:	f3 cf       	rjmp	.-26     	; 0x17fc <_ZN7TwoWire5writeEPKhj+0x26>
    1816:	64 2f       	mov	r22, r20
    1818:	08 de       	rcall	.-1008   	; 0x142a <twi_transmit>
    181a:	c8 01       	movw	r24, r16
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	08 95       	ret

0000182e <_ZN7TwoWire5writeEh>:
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	1f 92       	push	r1
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	69 83       	std	Y+1, r22	; 0x01
    183a:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <_ZN7TwoWire12transmittingE>
    183e:	22 23       	and	r18, r18
    1840:	d1 f0       	breq	.+52     	; 0x1876 <_ZN7TwoWire5writeEh+0x48>
    1842:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    1846:	20 32       	cpi	r18, 0x20	; 32
    1848:	40 f0       	brcs	.+16     	; 0x185a <_ZN7TwoWire5writeEh+0x2c>
    184a:	21 e0       	ldi	r18, 0x01	; 1
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	33 83       	std	Z+3, r19	; 0x03
    1852:	22 83       	std	Z+2, r18	; 0x02
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	14 c0       	rjmp	.+40     	; 0x1882 <_ZN7TwoWire5writeEh+0x54>
    185a:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <_ZN7TwoWire13txBufferIndexE>
    185e:	e8 2f       	mov	r30, r24
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	ec 57       	subi	r30, 0x7C	; 124
    1864:	fa 4f       	sbci	r31, 0xFA	; 250
    1866:	99 81       	ldd	r25, Y+1	; 0x01
    1868:	90 83       	st	Z, r25
    186a:	8f 5f       	subi	r24, 0xFF	; 255
    186c:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <_ZN7TwoWire13txBufferIndexE>
    1870:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    1874:	04 c0       	rjmp	.+8      	; 0x187e <_ZN7TwoWire5writeEh+0x50>
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	d6 dd       	rcall	.-1108   	; 0x142a <twi_transmit>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0f 90       	pop	r0
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <_ZN7TwoWireC1Ev>:
    188a:	fc 01       	movw	r30, r24
    188c:	13 82       	std	Z+3, r1	; 0x03
    188e:	12 82       	std	Z+2, r1	; 0x02
    1890:	88 ee       	ldi	r24, 0xE8	; 232
    1892:	93 e0       	ldi	r25, 0x03	; 3
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	84 83       	std	Z+4, r24	; 0x04
    189a:	95 83       	std	Z+5, r25	; 0x05
    189c:	a6 83       	std	Z+6, r26	; 0x06
    189e:	b7 83       	std	Z+7, r27	; 0x07
    18a0:	83 e6       	ldi	r24, 0x63	; 99
    18a2:	94 e0       	ldi	r25, 0x04	; 4
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	08 95       	ret

000018aa <_ZN7TwoWire5beginEv>:
    18aa:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    18ae:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    18b2:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire13txBufferIndexE>
    18b6:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    18ba:	fb dc       	rcall	.-1546   	; 0x12b2 <twi_init>
    18bc:	8f ed       	ldi	r24, 0xDF	; 223
    18be:	9b e0       	ldi	r25, 0x0B	; 11
    18c0:	e1 dd       	rcall	.-1086   	; 0x1484 <twi_attachSlaveTxEvent>
    18c2:	85 eb       	ldi	r24, 0xB5	; 181
    18c4:	9b e0       	ldi	r25, 0x0B	; 11
    18c6:	d9 cd       	rjmp	.-1102   	; 0x147a <twi_attachSlaveRxEvent>

000018c8 <_ZN7TwoWire17beginTransmissionEh>:
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <_ZN7TwoWire12transmittingE>
    18ce:	60 93 a4 05 	sts	0x05A4, r22	; 0x8005a4 <_ZN7TwoWire9txAddressE>
    18d2:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire13txBufferIndexE>
    18d6:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    18da:	08 95       	ret

000018dc <_ZN7TwoWire15endTransmissionEh>:
    18dc:	0f 93       	push	r16
    18de:	06 2f       	mov	r16, r22
    18e0:	21 e0       	ldi	r18, 0x01	; 1
    18e2:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    18e6:	64 e8       	ldi	r22, 0x84	; 132
    18e8:	75 e0       	ldi	r23, 0x05	; 5
    18ea:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <_ZN7TwoWire9txAddressE>
    18ee:	47 dd       	rcall	.-1394   	; 0x137e <twi_writeTo>
    18f0:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZN7TwoWire13txBufferIndexE>
    18f4:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZN7TwoWire14txBufferLengthE>
    18f8:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <_ZN7TwoWire12transmittingE>
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <_ZN7TwoWire11requestFromEhhmhh>:
    1900:	4f 92       	push	r4
    1902:	5f 92       	push	r5
    1904:	6f 92       	push	r6
    1906:	7f 92       	push	r7
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	5c 01       	movw	r10, r24
    191c:	f6 2e       	mov	r15, r22
    191e:	d4 2f       	mov	r29, r20
    1920:	28 01       	movw	r4, r16
    1922:	39 01       	movw	r6, r18
    1924:	ee 20       	and	r14, r14
    1926:	11 f1       	breq	.+68     	; 0x196c <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    1928:	cf df       	rcall	.-98     	; 0x18c8 <_ZN7TwoWire17beginTransmissionEh>
    192a:	ce 2d       	mov	r28, r14
    192c:	c4 30       	cpi	r28, 0x04	; 4
    192e:	08 f0       	brcs	.+2      	; 0x1932 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1930:	c3 e0       	ldi	r28, 0x03	; 3
    1932:	c1 50       	subi	r28, 0x01	; 1
    1934:	c0 f0       	brcs	.+48     	; 0x1966 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    1936:	28 e0       	ldi	r18, 0x08	; 8
    1938:	c2 9f       	mul	r28, r18
    193a:	c0 01       	movw	r24, r0
    193c:	11 24       	eor	r1, r1
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	04 c0       	rjmp	.+8      	; 0x194c <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    1944:	56 95       	lsr	r21
    1946:	47 95       	ror	r20
    1948:	37 95       	ror	r19
    194a:	27 95       	ror	r18
    194c:	8a 95       	dec	r24
    194e:	d2 f7       	brpl	.-12     	; 0x1944 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    1950:	ca 01       	movw	r24, r20
    1952:	b9 01       	movw	r22, r18
    1954:	d5 01       	movw	r26, r10
    1956:	ed 91       	ld	r30, X+
    1958:	fc 91       	ld	r31, X
    195a:	01 90       	ld	r0, Z+
    195c:	f0 81       	ld	r31, Z
    195e:	e0 2d       	mov	r30, r0
    1960:	c5 01       	movw	r24, r10
    1962:	19 95       	eicall
    1964:	e6 cf       	rjmp	.-52     	; 0x1932 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	c5 01       	movw	r24, r10
    196a:	b8 df       	rcall	.-144    	; 0x18dc <_ZN7TwoWire15endTransmissionEh>
    196c:	4d 2f       	mov	r20, r29
    196e:	d1 32       	cpi	r29, 0x21	; 33
    1970:	08 f0       	brcs	.+2      	; 0x1974 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	2c 2d       	mov	r18, r12
    1976:	67 ea       	ldi	r22, 0xA7	; 167
    1978:	75 e0       	ldi	r23, 0x05	; 5
    197a:	8f 2d       	mov	r24, r15
    197c:	b8 dc       	rcall	.-1680   	; 0x12ee <twi_readFrom>
    197e:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZN7TwoWire13rxBufferIndexE>
    1982:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZN7TwoWire14rxBufferLengthE>
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	7f 90       	pop	r7
    199a:	6f 90       	pop	r6
    199c:	5f 90       	pop	r5
    199e:	4f 90       	pop	r4
    19a0:	08 95       	ret

000019a2 <_ZN7TwoWire11requestFromEhhh>:
    19a2:	cf 92       	push	r12
    19a4:	ef 92       	push	r14
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	c2 2e       	mov	r12, r18
    19ac:	e1 2c       	mov	r14, r1
    19ae:	00 e0       	ldi	r16, 0x00	; 0
    19b0:	10 e0       	ldi	r17, 0x00	; 0
    19b2:	98 01       	movw	r18, r16
    19b4:	a5 df       	rcall	.-182    	; 0x1900 <_ZN7TwoWire11requestFromEhhmhh>
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ef 90       	pop	r14
    19bc:	cf 90       	pop	r12
    19be:	08 95       	ret

000019c0 <_ZN7TwoWire11requestFromEhh>:
    19c0:	21 e0       	ldi	r18, 0x01	; 1
    19c2:	ef cf       	rjmp	.-34     	; 0x19a2 <_ZN7TwoWire11requestFromEhhh>

000019c4 <_ZN7TwoWire15endTransmissionEv>:
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	8a cf       	rjmp	.-236    	; 0x18dc <_ZN7TwoWire15endTransmissionEh>

000019c8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    19c8:	81 e7       	ldi	r24, 0x71	; 113
    19ca:	95 e0       	ldi	r25, 0x05	; 5
    19cc:	5e cf       	rjmp	.-324    	; 0x188a <_ZN7TwoWireC1Ev>

000019ce <_ZN6SDCardC1Ej>:
	{
		SD.remove(filename);
	}
	else
	{
		Serial.println("File doesn't exist!");
    19ce:	fc 01       	movw	r30, r24
    19d0:	71 83       	std	Z+1, r23	; 0x01
    19d2:	60 83       	st	Z, r22
    19d4:	08 95       	ret

000019d6 <_ZN6SDCardD1Ev>:
    19d6:	08 95       	ret

000019d8 <_GLOBAL__sub_I_myFile>:
#include <SPI.h>
#include <stdlib.h>
#include "SDCard.h"

// const int chipSelect = 53;
File myFile;
    19d8:	8e e0       	ldi	r24, 0x0E	; 14
    19da:	96 e0       	ldi	r25, 0x06	; 6
    19dc:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN5SDLib4FileC1Ev>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    19e0:	e2 e0       	ldi	r30, 0x02	; 2
    19e2:	f6 e0       	ldi	r31, 0x06	; 6
    19e4:	15 82       	std	Z+5, r1	; 0x05
    19e6:	16 82       	std	Z+6, r1	; 0x06
    19e8:	11 86       	std	Z+9, r1	; 0x09
    19ea:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    19ec:	e4 ee       	ldi	r30, 0xE4	; 228
    19ee:	f5 e0       	ldi	r31, 0x05	; 5
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	80 83       	st	Z, r24
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	a2 83       	std	Z+2, r26	; 0x02
    19fe:	b3 83       	std	Z+3, r27	; 0x03
    1a00:	17 8a       	std	Z+23, r1	; 0x17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1a02:	e7 ec       	ldi	r30, 0xC7	; 199
    1a04:	f5 e0       	ldi	r31, 0x05	; 5
    1a06:	13 82       	std	Z+3, r1	; 0x03
    1a08:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1a0a:	88 ea       	ldi	r24, 0xA8	; 168
    1a0c:	94 e0       	ldi	r25, 0x04	; 4
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	15 82       	std	Z+5, r1	; 0x05
    1a14:	08 95       	ret

00001a16 <__subsf3>:
    1a16:	50 58       	subi	r21, 0x80	; 128

00001a18 <__addsf3>:
    1a18:	bb 27       	eor	r27, r27
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	0e d0       	rcall	.+28     	; 0x1a3a <__addsf3x>
    1a1e:	6e c1       	rjmp	.+732    	; 0x1cfc <__fp_round>
    1a20:	5f d1       	rcall	.+702    	; 0x1ce0 <__fp_pscA>
    1a22:	30 f0       	brcs	.+12     	; 0x1a30 <__addsf3+0x18>
    1a24:	64 d1       	rcall	.+712    	; 0x1cee <__fp_pscB>
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__addsf3+0x18>
    1a28:	31 f4       	brne	.+12     	; 0x1a36 <__addsf3+0x1e>
    1a2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <__addsf3+0x1a>
    1a2e:	1e f4       	brtc	.+6      	; 0x1a36 <__addsf3+0x1e>
    1a30:	44 c1       	rjmp	.+648    	; 0x1cba <__fp_nan>
    1a32:	0e f4       	brtc	.+2      	; 0x1a36 <__addsf3+0x1e>
    1a34:	e0 95       	com	r30
    1a36:	e7 fb       	bst	r30, 7
    1a38:	3a c1       	rjmp	.+628    	; 0x1cae <__fp_inf>

00001a3a <__addsf3x>:
    1a3a:	e9 2f       	mov	r30, r25
    1a3c:	70 d1       	rcall	.+736    	; 0x1d1e <__fp_split3>
    1a3e:	80 f3       	brcs	.-32     	; 0x1a20 <__addsf3+0x8>
    1a40:	ba 17       	cp	r27, r26
    1a42:	62 07       	cpc	r22, r18
    1a44:	73 07       	cpc	r23, r19
    1a46:	84 07       	cpc	r24, r20
    1a48:	95 07       	cpc	r25, r21
    1a4a:	18 f0       	brcs	.+6      	; 0x1a52 <__addsf3x+0x18>
    1a4c:	71 f4       	brne	.+28     	; 0x1a6a <__addsf3x+0x30>
    1a4e:	9e f5       	brtc	.+102    	; 0x1ab6 <__addsf3x+0x7c>
    1a50:	88 c1       	rjmp	.+784    	; 0x1d62 <__fp_zero>
    1a52:	0e f4       	brtc	.+2      	; 0x1a56 <__addsf3x+0x1c>
    1a54:	e0 95       	com	r30
    1a56:	0b 2e       	mov	r0, r27
    1a58:	ba 2f       	mov	r27, r26
    1a5a:	a0 2d       	mov	r26, r0
    1a5c:	0b 01       	movw	r0, r22
    1a5e:	b9 01       	movw	r22, r18
    1a60:	90 01       	movw	r18, r0
    1a62:	0c 01       	movw	r0, r24
    1a64:	ca 01       	movw	r24, r20
    1a66:	a0 01       	movw	r20, r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	ff 27       	eor	r31, r31
    1a6c:	59 1b       	sub	r21, r25
    1a6e:	99 f0       	breq	.+38     	; 0x1a96 <__addsf3x+0x5c>
    1a70:	59 3f       	cpi	r21, 0xF9	; 249
    1a72:	50 f4       	brcc	.+20     	; 0x1a88 <__addsf3x+0x4e>
    1a74:	50 3e       	cpi	r21, 0xE0	; 224
    1a76:	68 f1       	brcs	.+90     	; 0x1ad2 <__addsf3x+0x98>
    1a78:	1a 16       	cp	r1, r26
    1a7a:	f0 40       	sbci	r31, 0x00	; 0
    1a7c:	a2 2f       	mov	r26, r18
    1a7e:	23 2f       	mov	r18, r19
    1a80:	34 2f       	mov	r19, r20
    1a82:	44 27       	eor	r20, r20
    1a84:	58 5f       	subi	r21, 0xF8	; 248
    1a86:	f3 cf       	rjmp	.-26     	; 0x1a6e <__addsf3x+0x34>
    1a88:	46 95       	lsr	r20
    1a8a:	37 95       	ror	r19
    1a8c:	27 95       	ror	r18
    1a8e:	a7 95       	ror	r26
    1a90:	f0 40       	sbci	r31, 0x00	; 0
    1a92:	53 95       	inc	r21
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__addsf3x+0x4e>
    1a96:	7e f4       	brtc	.+30     	; 0x1ab6 <__addsf3x+0x7c>
    1a98:	1f 16       	cp	r1, r31
    1a9a:	ba 0b       	sbc	r27, r26
    1a9c:	62 0b       	sbc	r22, r18
    1a9e:	73 0b       	sbc	r23, r19
    1aa0:	84 0b       	sbc	r24, r20
    1aa2:	ba f0       	brmi	.+46     	; 0x1ad2 <__addsf3x+0x98>
    1aa4:	91 50       	subi	r25, 0x01	; 1
    1aa6:	a1 f0       	breq	.+40     	; 0x1ad0 <__addsf3x+0x96>
    1aa8:	ff 0f       	add	r31, r31
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	66 1f       	adc	r22, r22
    1aae:	77 1f       	adc	r23, r23
    1ab0:	88 1f       	adc	r24, r24
    1ab2:	c2 f7       	brpl	.-16     	; 0x1aa4 <__addsf3x+0x6a>
    1ab4:	0e c0       	rjmp	.+28     	; 0x1ad2 <__addsf3x+0x98>
    1ab6:	ba 0f       	add	r27, r26
    1ab8:	62 1f       	adc	r22, r18
    1aba:	73 1f       	adc	r23, r19
    1abc:	84 1f       	adc	r24, r20
    1abe:	48 f4       	brcc	.+18     	; 0x1ad2 <__addsf3x+0x98>
    1ac0:	87 95       	ror	r24
    1ac2:	77 95       	ror	r23
    1ac4:	67 95       	ror	r22
    1ac6:	b7 95       	ror	r27
    1ac8:	f7 95       	ror	r31
    1aca:	9e 3f       	cpi	r25, 0xFE	; 254
    1acc:	08 f0       	brcs	.+2      	; 0x1ad0 <__addsf3x+0x96>
    1ace:	b3 cf       	rjmp	.-154    	; 0x1a36 <__addsf3+0x1e>
    1ad0:	93 95       	inc	r25
    1ad2:	88 0f       	add	r24, r24
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <__addsf3x+0x9e>
    1ad6:	99 27       	eor	r25, r25
    1ad8:	ee 0f       	add	r30, r30
    1ada:	97 95       	ror	r25
    1adc:	87 95       	ror	r24
    1ade:	08 95       	ret

00001ae0 <__divsf3>:
    1ae0:	0c d0       	rcall	.+24     	; 0x1afa <__divsf3x>
    1ae2:	0c c1       	rjmp	.+536    	; 0x1cfc <__fp_round>
    1ae4:	04 d1       	rcall	.+520    	; 0x1cee <__fp_pscB>
    1ae6:	40 f0       	brcs	.+16     	; 0x1af8 <__divsf3+0x18>
    1ae8:	fb d0       	rcall	.+502    	; 0x1ce0 <__fp_pscA>
    1aea:	30 f0       	brcs	.+12     	; 0x1af8 <__divsf3+0x18>
    1aec:	21 f4       	brne	.+8      	; 0x1af6 <__divsf3+0x16>
    1aee:	5f 3f       	cpi	r21, 0xFF	; 255
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <__divsf3+0x18>
    1af2:	dd c0       	rjmp	.+442    	; 0x1cae <__fp_inf>
    1af4:	51 11       	cpse	r21, r1
    1af6:	36 c1       	rjmp	.+620    	; 0x1d64 <__fp_szero>
    1af8:	e0 c0       	rjmp	.+448    	; 0x1cba <__fp_nan>

00001afa <__divsf3x>:
    1afa:	11 d1       	rcall	.+546    	; 0x1d1e <__fp_split3>
    1afc:	98 f3       	brcs	.-26     	; 0x1ae4 <__divsf3+0x4>

00001afe <__divsf3_pse>:
    1afe:	99 23       	and	r25, r25
    1b00:	c9 f3       	breq	.-14     	; 0x1af4 <__divsf3+0x14>
    1b02:	55 23       	and	r21, r21
    1b04:	b1 f3       	breq	.-20     	; 0x1af2 <__divsf3+0x12>
    1b06:	95 1b       	sub	r25, r21
    1b08:	55 0b       	sbc	r21, r21
    1b0a:	bb 27       	eor	r27, r27
    1b0c:	aa 27       	eor	r26, r26
    1b0e:	62 17       	cp	r22, r18
    1b10:	73 07       	cpc	r23, r19
    1b12:	84 07       	cpc	r24, r20
    1b14:	38 f0       	brcs	.+14     	; 0x1b24 <__divsf3_pse+0x26>
    1b16:	9f 5f       	subi	r25, 0xFF	; 255
    1b18:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	44 1f       	adc	r20, r20
    1b20:	aa 1f       	adc	r26, r26
    1b22:	a9 f3       	breq	.-22     	; 0x1b0e <__divsf3_pse+0x10>
    1b24:	33 d0       	rcall	.+102    	; 0x1b8c <__divsf3_pse+0x8e>
    1b26:	0e 2e       	mov	r0, r30
    1b28:	3a f0       	brmi	.+14     	; 0x1b38 <__divsf3_pse+0x3a>
    1b2a:	e0 e8       	ldi	r30, 0x80	; 128
    1b2c:	30 d0       	rcall	.+96     	; 0x1b8e <__divsf3_pse+0x90>
    1b2e:	91 50       	subi	r25, 0x01	; 1
    1b30:	50 40       	sbci	r21, 0x00	; 0
    1b32:	e6 95       	lsr	r30
    1b34:	00 1c       	adc	r0, r0
    1b36:	ca f7       	brpl	.-14     	; 0x1b2a <__divsf3_pse+0x2c>
    1b38:	29 d0       	rcall	.+82     	; 0x1b8c <__divsf3_pse+0x8e>
    1b3a:	fe 2f       	mov	r31, r30
    1b3c:	27 d0       	rcall	.+78     	; 0x1b8c <__divsf3_pse+0x8e>
    1b3e:	66 0f       	add	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	bb 1f       	adc	r27, r27
    1b46:	26 17       	cp	r18, r22
    1b48:	37 07       	cpc	r19, r23
    1b4a:	48 07       	cpc	r20, r24
    1b4c:	ab 07       	cpc	r26, r27
    1b4e:	b0 e8       	ldi	r27, 0x80	; 128
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <__divsf3_pse+0x56>
    1b52:	bb 0b       	sbc	r27, r27
    1b54:	80 2d       	mov	r24, r0
    1b56:	bf 01       	movw	r22, r30
    1b58:	ff 27       	eor	r31, r31
    1b5a:	93 58       	subi	r25, 0x83	; 131
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	2a f0       	brmi	.+10     	; 0x1b6a <__divsf3_pse+0x6c>
    1b60:	9e 3f       	cpi	r25, 0xFE	; 254
    1b62:	51 05       	cpc	r21, r1
    1b64:	68 f0       	brcs	.+26     	; 0x1b80 <__divsf3_pse+0x82>
    1b66:	a3 c0       	rjmp	.+326    	; 0x1cae <__fp_inf>
    1b68:	fd c0       	rjmp	.+506    	; 0x1d64 <__fp_szero>
    1b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6c:	ec f3       	brlt	.-6      	; 0x1b68 <__divsf3_pse+0x6a>
    1b6e:	98 3e       	cpi	r25, 0xE8	; 232
    1b70:	dc f3       	brlt	.-10     	; 0x1b68 <__divsf3_pse+0x6a>
    1b72:	86 95       	lsr	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	b7 95       	ror	r27
    1b7a:	f7 95       	ror	r31
    1b7c:	9f 5f       	subi	r25, 0xFF	; 255
    1b7e:	c9 f7       	brne	.-14     	; 0x1b72 <__divsf3_pse+0x74>
    1b80:	88 0f       	add	r24, r24
    1b82:	91 1d       	adc	r25, r1
    1b84:	96 95       	lsr	r25
    1b86:	87 95       	ror	r24
    1b88:	97 f9       	bld	r25, 7
    1b8a:	08 95       	ret
    1b8c:	e1 e0       	ldi	r30, 0x01	; 1
    1b8e:	66 0f       	add	r22, r22
    1b90:	77 1f       	adc	r23, r23
    1b92:	88 1f       	adc	r24, r24
    1b94:	bb 1f       	adc	r27, r27
    1b96:	62 17       	cp	r22, r18
    1b98:	73 07       	cpc	r23, r19
    1b9a:	84 07       	cpc	r24, r20
    1b9c:	ba 07       	cpc	r27, r26
    1b9e:	20 f0       	brcs	.+8      	; 0x1ba8 <__divsf3_pse+0xaa>
    1ba0:	62 1b       	sub	r22, r18
    1ba2:	73 0b       	sbc	r23, r19
    1ba4:	84 0b       	sbc	r24, r20
    1ba6:	ba 0b       	sbc	r27, r26
    1ba8:	ee 1f       	adc	r30, r30
    1baa:	88 f7       	brcc	.-30     	; 0x1b8e <__divsf3_pse+0x90>
    1bac:	e0 95       	com	r30
    1bae:	08 95       	ret

00001bb0 <__floatdisf>:
    1bb0:	97 fb       	bst	r25, 7
    1bb2:	0e f4       	brtc	.+2      	; 0x1bb6 <__floatdisf+0x6>
    1bb4:	85 d0       	rcall	.+266    	; 0x1cc0 <__fp_negdi>
    1bb6:	3e c0       	rjmp	.+124    	; 0x1c34 <__fp_di2sf>

00001bb8 <__floatunsisf>:
    1bb8:	e8 94       	clt
    1bba:	09 c0       	rjmp	.+18     	; 0x1bce <__floatsisf+0x12>

00001bbc <__floatsisf>:
    1bbc:	97 fb       	bst	r25, 7
    1bbe:	3e f4       	brtc	.+14     	; 0x1bce <__floatsisf+0x12>
    1bc0:	90 95       	com	r25
    1bc2:	80 95       	com	r24
    1bc4:	70 95       	com	r23
    1bc6:	61 95       	neg	r22
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	99 23       	and	r25, r25
    1bd0:	a9 f0       	breq	.+42     	; 0x1bfc <__floatsisf+0x40>
    1bd2:	f9 2f       	mov	r31, r25
    1bd4:	96 e9       	ldi	r25, 0x96	; 150
    1bd6:	bb 27       	eor	r27, r27
    1bd8:	93 95       	inc	r25
    1bda:	f6 95       	lsr	r31
    1bdc:	87 95       	ror	r24
    1bde:	77 95       	ror	r23
    1be0:	67 95       	ror	r22
    1be2:	b7 95       	ror	r27
    1be4:	f1 11       	cpse	r31, r1
    1be6:	f8 cf       	rjmp	.-16     	; 0x1bd8 <__floatsisf+0x1c>
    1be8:	fa f4       	brpl	.+62     	; 0x1c28 <__floatsisf+0x6c>
    1bea:	bb 0f       	add	r27, r27
    1bec:	11 f4       	brne	.+4      	; 0x1bf2 <__floatsisf+0x36>
    1bee:	60 ff       	sbrs	r22, 0
    1bf0:	1b c0       	rjmp	.+54     	; 0x1c28 <__floatsisf+0x6c>
    1bf2:	6f 5f       	subi	r22, 0xFF	; 255
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfa:	16 c0       	rjmp	.+44     	; 0x1c28 <__floatsisf+0x6c>
    1bfc:	88 23       	and	r24, r24
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <__floatsisf+0x48>
    1c00:	96 e9       	ldi	r25, 0x96	; 150
    1c02:	11 c0       	rjmp	.+34     	; 0x1c26 <__floatsisf+0x6a>
    1c04:	77 23       	and	r23, r23
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <__floatsisf+0x54>
    1c08:	9e e8       	ldi	r25, 0x8E	; 142
    1c0a:	87 2f       	mov	r24, r23
    1c0c:	76 2f       	mov	r23, r22
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <__floatsisf+0x5e>
    1c10:	66 23       	and	r22, r22
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <__floatsisf+0x74>
    1c14:	96 e8       	ldi	r25, 0x86	; 134
    1c16:	86 2f       	mov	r24, r22
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	2a f0       	brmi	.+10     	; 0x1c28 <__floatsisf+0x6c>
    1c1e:	9a 95       	dec	r25
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	da f7       	brpl	.-10     	; 0x1c1e <__floatsisf+0x62>
    1c28:	88 0f       	add	r24, r24
    1c2a:	96 95       	lsr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	97 f9       	bld	r25, 7
    1c30:	08 95       	ret

00001c32 <__floatundisf>:
    1c32:	e8 94       	clt

00001c34 <__fp_di2sf>:
    1c34:	f9 2f       	mov	r31, r25
    1c36:	96 eb       	ldi	r25, 0xB6	; 182
    1c38:	ff 23       	and	r31, r31
    1c3a:	81 f0       	breq	.+32     	; 0x1c5c <__fp_di2sf+0x28>
    1c3c:	12 16       	cp	r1, r18
    1c3e:	13 06       	cpc	r1, r19
    1c40:	14 06       	cpc	r1, r20
    1c42:	44 0b       	sbc	r20, r20
    1c44:	93 95       	inc	r25
    1c46:	f6 95       	lsr	r31
    1c48:	87 95       	ror	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	57 95       	ror	r21
    1c50:	40 40       	sbci	r20, 0x00	; 0
    1c52:	ff 23       	and	r31, r31
    1c54:	b9 f7       	brne	.-18     	; 0x1c44 <__fp_di2sf+0x10>
    1c56:	1b c0       	rjmp	.+54     	; 0x1c8e <__fp_di2sf+0x5a>
    1c58:	99 27       	eor	r25, r25
    1c5a:	08 95       	ret
    1c5c:	88 23       	and	r24, r24
    1c5e:	51 f4       	brne	.+20     	; 0x1c74 <__fp_di2sf+0x40>
    1c60:	98 50       	subi	r25, 0x08	; 8
    1c62:	d2 f7       	brpl	.-12     	; 0x1c58 <__fp_di2sf+0x24>
    1c64:	87 2b       	or	r24, r23
    1c66:	76 2f       	mov	r23, r22
    1c68:	65 2f       	mov	r22, r21
    1c6a:	54 2f       	mov	r21, r20
    1c6c:	43 2f       	mov	r20, r19
    1c6e:	32 2f       	mov	r19, r18
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	b1 f3       	breq	.-20     	; 0x1c60 <__fp_di2sf+0x2c>
    1c74:	12 16       	cp	r1, r18
    1c76:	13 06       	cpc	r1, r19
    1c78:	14 06       	cpc	r1, r20
    1c7a:	44 0b       	sbc	r20, r20
    1c7c:	88 23       	and	r24, r24
    1c7e:	3a f0       	brmi	.+14     	; 0x1c8e <__fp_di2sf+0x5a>
    1c80:	9a 95       	dec	r25
    1c82:	44 0f       	add	r20, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	66 1f       	adc	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	ca f7       	brpl	.-14     	; 0x1c80 <__fp_di2sf+0x4c>
    1c8e:	55 23       	and	r21, r21
    1c90:	4a f4       	brpl	.+18     	; 0x1ca4 <__fp_di2sf+0x70>
    1c92:	44 0f       	add	r20, r20
    1c94:	55 1f       	adc	r21, r21
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <__fp_di2sf+0x68>
    1c98:	60 ff       	sbrs	r22, 0
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <__fp_di2sf+0x70>
    1c9c:	6f 5f       	subi	r22, 0xFF	; 255
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	88 0f       	add	r24, r24
    1ca6:	96 95       	lsr	r25
    1ca8:	87 95       	ror	r24
    1caa:	97 f9       	bld	r25, 7
    1cac:	08 95       	ret

00001cae <__fp_inf>:
    1cae:	97 f9       	bld	r25, 7
    1cb0:	9f 67       	ori	r25, 0x7F	; 127
    1cb2:	80 e8       	ldi	r24, 0x80	; 128
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	08 95       	ret

00001cba <__fp_nan>:
    1cba:	9f ef       	ldi	r25, 0xFF	; 255
    1cbc:	80 ec       	ldi	r24, 0xC0	; 192
    1cbe:	08 95       	ret

00001cc0 <__fp_negdi>:
    1cc0:	90 95       	com	r25
    1cc2:	80 95       	com	r24
    1cc4:	70 95       	com	r23
    1cc6:	60 95       	com	r22
    1cc8:	50 95       	com	r21
    1cca:	40 95       	com	r20
    1ccc:	30 95       	com	r19
    1cce:	21 95       	neg	r18
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd6:	6f 4f       	sbci	r22, 0xFF	; 255
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	08 95       	ret

00001ce0 <__fp_pscA>:
    1ce0:	00 24       	eor	r0, r0
    1ce2:	0a 94       	dec	r0
    1ce4:	16 16       	cp	r1, r22
    1ce6:	17 06       	cpc	r1, r23
    1ce8:	18 06       	cpc	r1, r24
    1cea:	09 06       	cpc	r0, r25
    1cec:	08 95       	ret

00001cee <__fp_pscB>:
    1cee:	00 24       	eor	r0, r0
    1cf0:	0a 94       	dec	r0
    1cf2:	12 16       	cp	r1, r18
    1cf4:	13 06       	cpc	r1, r19
    1cf6:	14 06       	cpc	r1, r20
    1cf8:	05 06       	cpc	r0, r21
    1cfa:	08 95       	ret

00001cfc <__fp_round>:
    1cfc:	09 2e       	mov	r0, r25
    1cfe:	03 94       	inc	r0
    1d00:	00 0c       	add	r0, r0
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <__fp_round+0xc>
    1d04:	88 23       	and	r24, r24
    1d06:	52 f0       	brmi	.+20     	; 0x1d1c <__fp_round+0x20>
    1d08:	bb 0f       	add	r27, r27
    1d0a:	40 f4       	brcc	.+16     	; 0x1d1c <__fp_round+0x20>
    1d0c:	bf 2b       	or	r27, r31
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <__fp_round+0x18>
    1d10:	60 ff       	sbrs	r22, 0
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <__fp_round+0x20>
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1c:	08 95       	ret

00001d1e <__fp_split3>:
    1d1e:	57 fd       	sbrc	r21, 7
    1d20:	90 58       	subi	r25, 0x80	; 128
    1d22:	44 0f       	add	r20, r20
    1d24:	55 1f       	adc	r21, r21
    1d26:	59 f0       	breq	.+22     	; 0x1d3e <__fp_splitA+0x10>
    1d28:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <__fp_splitA+0x1a>
    1d2c:	47 95       	ror	r20

00001d2e <__fp_splitA>:
    1d2e:	88 0f       	add	r24, r24
    1d30:	97 fb       	bst	r25, 7
    1d32:	99 1f       	adc	r25, r25
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <__fp_splitA+0x20>
    1d36:	9f 3f       	cpi	r25, 0xFF	; 255
    1d38:	79 f0       	breq	.+30     	; 0x1d58 <__fp_splitA+0x2a>
    1d3a:	87 95       	ror	r24
    1d3c:	08 95       	ret
    1d3e:	12 16       	cp	r1, r18
    1d40:	13 06       	cpc	r1, r19
    1d42:	14 06       	cpc	r1, r20
    1d44:	55 1f       	adc	r21, r21
    1d46:	f2 cf       	rjmp	.-28     	; 0x1d2c <__fp_split3+0xe>
    1d48:	46 95       	lsr	r20
    1d4a:	f1 df       	rcall	.-30     	; 0x1d2e <__fp_splitA>
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <__fp_splitA+0x30>
    1d4e:	16 16       	cp	r1, r22
    1d50:	17 06       	cpc	r1, r23
    1d52:	18 06       	cpc	r1, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	f1 cf       	rjmp	.-30     	; 0x1d3a <__fp_splitA+0xc>
    1d58:	86 95       	lsr	r24
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	61 05       	cpc	r22, r1
    1d5e:	08 94       	sec
    1d60:	08 95       	ret

00001d62 <__fp_zero>:
    1d62:	e8 94       	clt

00001d64 <__fp_szero>:
    1d64:	bb 27       	eor	r27, r27
    1d66:	66 27       	eor	r22, r22
    1d68:	77 27       	eor	r23, r23
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	97 f9       	bld	r25, 7
    1d6e:	08 95       	ret

00001d70 <__mulsf3>:
    1d70:	0b d0       	rcall	.+22     	; 0x1d88 <__mulsf3x>
    1d72:	c4 cf       	rjmp	.-120    	; 0x1cfc <__fp_round>
    1d74:	b5 df       	rcall	.-150    	; 0x1ce0 <__fp_pscA>
    1d76:	28 f0       	brcs	.+10     	; 0x1d82 <__mulsf3+0x12>
    1d78:	ba df       	rcall	.-140    	; 0x1cee <__fp_pscB>
    1d7a:	18 f0       	brcs	.+6      	; 0x1d82 <__mulsf3+0x12>
    1d7c:	95 23       	and	r25, r21
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <__mulsf3+0x12>
    1d80:	96 cf       	rjmp	.-212    	; 0x1cae <__fp_inf>
    1d82:	9b cf       	rjmp	.-202    	; 0x1cba <__fp_nan>
    1d84:	11 24       	eor	r1, r1
    1d86:	ee cf       	rjmp	.-36     	; 0x1d64 <__fp_szero>

00001d88 <__mulsf3x>:
    1d88:	ca df       	rcall	.-108    	; 0x1d1e <__fp_split3>
    1d8a:	a0 f3       	brcs	.-24     	; 0x1d74 <__mulsf3+0x4>

00001d8c <__mulsf3_pse>:
    1d8c:	95 9f       	mul	r25, r21
    1d8e:	d1 f3       	breq	.-12     	; 0x1d84 <__mulsf3+0x14>
    1d90:	95 0f       	add	r25, r21
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	55 1f       	adc	r21, r21
    1d96:	62 9f       	mul	r22, r18
    1d98:	f0 01       	movw	r30, r0
    1d9a:	72 9f       	mul	r23, r18
    1d9c:	bb 27       	eor	r27, r27
    1d9e:	f0 0d       	add	r31, r0
    1da0:	b1 1d       	adc	r27, r1
    1da2:	63 9f       	mul	r22, r19
    1da4:	aa 27       	eor	r26, r26
    1da6:	f0 0d       	add	r31, r0
    1da8:	b1 1d       	adc	r27, r1
    1daa:	aa 1f       	adc	r26, r26
    1dac:	64 9f       	mul	r22, r20
    1dae:	66 27       	eor	r22, r22
    1db0:	b0 0d       	add	r27, r0
    1db2:	a1 1d       	adc	r26, r1
    1db4:	66 1f       	adc	r22, r22
    1db6:	82 9f       	mul	r24, r18
    1db8:	22 27       	eor	r18, r18
    1dba:	b0 0d       	add	r27, r0
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	62 1f       	adc	r22, r18
    1dc0:	73 9f       	mul	r23, r19
    1dc2:	b0 0d       	add	r27, r0
    1dc4:	a1 1d       	adc	r26, r1
    1dc6:	62 1f       	adc	r22, r18
    1dc8:	83 9f       	mul	r24, r19
    1dca:	a0 0d       	add	r26, r0
    1dcc:	61 1d       	adc	r22, r1
    1dce:	22 1f       	adc	r18, r18
    1dd0:	74 9f       	mul	r23, r20
    1dd2:	33 27       	eor	r19, r19
    1dd4:	a0 0d       	add	r26, r0
    1dd6:	61 1d       	adc	r22, r1
    1dd8:	23 1f       	adc	r18, r19
    1dda:	84 9f       	mul	r24, r20
    1ddc:	60 0d       	add	r22, r0
    1dde:	21 1d       	adc	r18, r1
    1de0:	82 2f       	mov	r24, r18
    1de2:	76 2f       	mov	r23, r22
    1de4:	6a 2f       	mov	r22, r26
    1de6:	11 24       	eor	r1, r1
    1de8:	9f 57       	subi	r25, 0x7F	; 127
    1dea:	50 40       	sbci	r21, 0x00	; 0
    1dec:	8a f0       	brmi	.+34     	; 0x1e10 <__mulsf3_pse+0x84>
    1dee:	e1 f0       	breq	.+56     	; 0x1e28 <__mulsf3_pse+0x9c>
    1df0:	88 23       	and	r24, r24
    1df2:	4a f0       	brmi	.+18     	; 0x1e06 <__mulsf3_pse+0x7a>
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	66 1f       	adc	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	88 1f       	adc	r24, r24
    1e00:	91 50       	subi	r25, 0x01	; 1
    1e02:	50 40       	sbci	r21, 0x00	; 0
    1e04:	a9 f7       	brne	.-22     	; 0x1df0 <__mulsf3_pse+0x64>
    1e06:	9e 3f       	cpi	r25, 0xFE	; 254
    1e08:	51 05       	cpc	r21, r1
    1e0a:	70 f0       	brcs	.+28     	; 0x1e28 <__mulsf3_pse+0x9c>
    1e0c:	50 cf       	rjmp	.-352    	; 0x1cae <__fp_inf>
    1e0e:	aa cf       	rjmp	.-172    	; 0x1d64 <__fp_szero>
    1e10:	5f 3f       	cpi	r21, 0xFF	; 255
    1e12:	ec f3       	brlt	.-6      	; 0x1e0e <__mulsf3_pse+0x82>
    1e14:	98 3e       	cpi	r25, 0xE8	; 232
    1e16:	dc f3       	brlt	.-10     	; 0x1e0e <__mulsf3_pse+0x82>
    1e18:	86 95       	lsr	r24
    1e1a:	77 95       	ror	r23
    1e1c:	67 95       	ror	r22
    1e1e:	b7 95       	ror	r27
    1e20:	f7 95       	ror	r31
    1e22:	e7 95       	ror	r30
    1e24:	9f 5f       	subi	r25, 0xFF	; 255
    1e26:	c1 f7       	brne	.-16     	; 0x1e18 <__mulsf3_pse+0x8c>
    1e28:	fe 2b       	or	r31, r30
    1e2a:	88 0f       	add	r24, r24
    1e2c:	91 1d       	adc	r25, r1
    1e2e:	96 95       	lsr	r25
    1e30:	87 95       	ror	r24
    1e32:	97 f9       	bld	r25, 7
    1e34:	08 95       	ret

00001e36 <pow>:
    1e36:	fa 01       	movw	r30, r20
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	30 96       	adiw	r30, 0x00	; 0
    1e3e:	21 05       	cpc	r18, r1
    1e40:	31 05       	cpc	r19, r1
    1e42:	99 f1       	breq	.+102    	; 0x1eaa <pow+0x74>
    1e44:	61 15       	cp	r22, r1
    1e46:	71 05       	cpc	r23, r1
    1e48:	61 f4       	brne	.+24     	; 0x1e62 <pow+0x2c>
    1e4a:	80 38       	cpi	r24, 0x80	; 128
    1e4c:	bf e3       	ldi	r27, 0x3F	; 63
    1e4e:	9b 07       	cpc	r25, r27
    1e50:	49 f1       	breq	.+82     	; 0x1ea4 <pow+0x6e>
    1e52:	68 94       	set
    1e54:	90 38       	cpi	r25, 0x80	; 128
    1e56:	81 05       	cpc	r24, r1
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <pow+0x3c>
    1e5a:	80 38       	cpi	r24, 0x80	; 128
    1e5c:	bf ef       	ldi	r27, 0xFF	; 255
    1e5e:	9b 07       	cpc	r25, r27
    1e60:	41 f0       	breq	.+16     	; 0x1e72 <pow+0x3c>
    1e62:	99 23       	and	r25, r25
    1e64:	42 f5       	brpl	.+80     	; 0x1eb6 <pow+0x80>
    1e66:	ff 3f       	cpi	r31, 0xFF	; 255
    1e68:	e1 05       	cpc	r30, r1
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	21 05       	cpc	r18, r1
    1e6e:	11 f1       	breq	.+68     	; 0x1eb4 <pow+0x7e>
    1e70:	e8 94       	clt
    1e72:	08 94       	sec
    1e74:	e7 95       	ror	r30
    1e76:	d9 01       	movw	r26, r18
    1e78:	aa 23       	and	r26, r26
    1e7a:	29 f4       	brne	.+10     	; 0x1e86 <pow+0x50>
    1e7c:	ab 2f       	mov	r26, r27
    1e7e:	be 2f       	mov	r27, r30
    1e80:	f8 5f       	subi	r31, 0xF8	; 248
    1e82:	d0 f3       	brcs	.-12     	; 0x1e78 <pow+0x42>
    1e84:	10 c0       	rjmp	.+32     	; 0x1ea6 <pow+0x70>
    1e86:	ff 5f       	subi	r31, 0xFF	; 255
    1e88:	70 f4       	brcc	.+28     	; 0x1ea6 <pow+0x70>
    1e8a:	a6 95       	lsr	r26
    1e8c:	e0 f7       	brcc	.-8      	; 0x1e86 <pow+0x50>
    1e8e:	f7 39       	cpi	r31, 0x97	; 151
    1e90:	50 f0       	brcs	.+20     	; 0x1ea6 <pow+0x70>
    1e92:	19 f0       	breq	.+6      	; 0x1e9a <pow+0x64>
    1e94:	ff 3a       	cpi	r31, 0xAF	; 175
    1e96:	38 f4       	brcc	.+14     	; 0x1ea6 <pow+0x70>
    1e98:	9f 77       	andi	r25, 0x7F	; 127
    1e9a:	9f 93       	push	r25
    1e9c:	0c d0       	rcall	.+24     	; 0x1eb6 <pow+0x80>
    1e9e:	0f 90       	pop	r0
    1ea0:	07 fc       	sbrc	r0, 7
    1ea2:	90 58       	subi	r25, 0x80	; 128
    1ea4:	08 95       	ret
    1ea6:	3e f0       	brts	.+14     	; 0x1eb6 <pow+0x80>
    1ea8:	08 cf       	rjmp	.-496    	; 0x1cba <__fp_nan>
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	80 e8       	ldi	r24, 0x80	; 128
    1eb0:	9f e3       	ldi	r25, 0x3F	; 63
    1eb2:	08 95       	ret
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	9f 77       	andi	r25, 0x7F	; 127
    1eb8:	5f 93       	push	r21
    1eba:	4f 93       	push	r20
    1ebc:	3f 93       	push	r19
    1ebe:	2f 93       	push	r18
    1ec0:	9e d0       	rcall	.+316    	; 0x1ffe <log>
    1ec2:	2f 91       	pop	r18
    1ec4:	3f 91       	pop	r19
    1ec6:	4f 91       	pop	r20
    1ec8:	5f 91       	pop	r21
    1eca:	52 df       	rcall	.-348    	; 0x1d70 <__mulsf3>
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <exp>
    1ece:	19 f4       	brne	.+6      	; 0x1ed6 <pow+0xa0>
    1ed0:	0e f0       	brts	.+2      	; 0x1ed4 <pow+0x9e>
    1ed2:	ed ce       	rjmp	.-550    	; 0x1cae <__fp_inf>
    1ed4:	46 cf       	rjmp	.-372    	; 0x1d62 <__fp_zero>
    1ed6:	f1 ce       	rjmp	.-542    	; 0x1cba <__fp_nan>

00001ed8 <exp>:
    1ed8:	2a df       	rcall	.-428    	; 0x1d2e <__fp_splitA>
    1eda:	c8 f3       	brcs	.-14     	; 0x1ece <pow+0x98>
    1edc:	96 38       	cpi	r25, 0x86	; 134
    1ede:	c0 f7       	brcc	.-16     	; 0x1ed0 <pow+0x9a>
    1ee0:	07 f8       	bld	r0, 7
    1ee2:	0f 92       	push	r0
    1ee4:	e8 94       	clt
    1ee6:	2b e3       	ldi	r18, 0x3B	; 59
    1ee8:	3a ea       	ldi	r19, 0xAA	; 170
    1eea:	48 eb       	ldi	r20, 0xB8	; 184
    1eec:	5f e7       	ldi	r21, 0x7F	; 127
    1eee:	4e df       	rcall	.-356    	; 0x1d8c <__mulsf3_pse>
    1ef0:	0f 92       	push	r0
    1ef2:	0f 92       	push	r0
    1ef4:	0f 92       	push	r0
    1ef6:	4d b7       	in	r20, 0x3d	; 61
    1ef8:	5e b7       	in	r21, 0x3e	; 62
    1efa:	0f 92       	push	r0
    1efc:	c0 d0       	rcall	.+384    	; 0x207e <modf>
    1efe:	e4 ee       	ldi	r30, 0xE4	; 228
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	16 d0       	rcall	.+44     	; 0x1f30 <__fp_powser>
    1f04:	4f 91       	pop	r20
    1f06:	5f 91       	pop	r21
    1f08:	ef 91       	pop	r30
    1f0a:	ff 91       	pop	r31
    1f0c:	e5 95       	asr	r30
    1f0e:	ee 1f       	adc	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	49 f0       	breq	.+18     	; 0x1f26 <exp+0x4e>
    1f14:	fe 57       	subi	r31, 0x7E	; 126
    1f16:	e0 68       	ori	r30, 0x80	; 128
    1f18:	44 27       	eor	r20, r20
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	44 1f       	adc	r20, r20
    1f1e:	fa 95       	dec	r31
    1f20:	e1 f7       	brne	.-8      	; 0x1f1a <exp+0x42>
    1f22:	41 95       	neg	r20
    1f24:	55 0b       	sbc	r21, r21
    1f26:	32 d0       	rcall	.+100    	; 0x1f8c <ldexp>
    1f28:	0f 90       	pop	r0
    1f2a:	07 fe       	sbrs	r0, 7
    1f2c:	26 c0       	rjmp	.+76     	; 0x1f7a <inverse>
    1f2e:	08 95       	ret

00001f30 <__fp_powser>:
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	1f 93       	push	r17
    1f36:	0f 93       	push	r16
    1f38:	ff 92       	push	r15
    1f3a:	ef 92       	push	r14
    1f3c:	df 92       	push	r13
    1f3e:	7b 01       	movw	r14, r22
    1f40:	8c 01       	movw	r16, r24
    1f42:	68 94       	set
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <__fp_powser+0x20>
    1f46:	da 2e       	mov	r13, r26
    1f48:	ef 01       	movw	r28, r30
    1f4a:	1e df       	rcall	.-452    	; 0x1d88 <__mulsf3x>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e8 94       	clt
    1f50:	a5 91       	lpm	r26, Z+
    1f52:	25 91       	lpm	r18, Z+
    1f54:	35 91       	lpm	r19, Z+
    1f56:	45 91       	lpm	r20, Z+
    1f58:	55 91       	lpm	r21, Z+
    1f5a:	ae f3       	brts	.-22     	; 0x1f46 <__fp_powser+0x16>
    1f5c:	ef 01       	movw	r28, r30
    1f5e:	6d dd       	rcall	.-1318   	; 0x1a3a <__addsf3x>
    1f60:	fe 01       	movw	r30, r28
    1f62:	97 01       	movw	r18, r14
    1f64:	a8 01       	movw	r20, r16
    1f66:	da 94       	dec	r13
    1f68:	79 f7       	brne	.-34     	; 0x1f48 <__fp_powser+0x18>
    1f6a:	df 90       	pop	r13
    1f6c:	ef 90       	pop	r14
    1f6e:	ff 90       	pop	r15
    1f70:	0f 91       	pop	r16
    1f72:	1f 91       	pop	r17
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <inverse>:
    1f7a:	9b 01       	movw	r18, r22
    1f7c:	ac 01       	movw	r20, r24
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e8       	ldi	r24, 0x80	; 128
    1f84:	9f e3       	ldi	r25, 0x3F	; 63
    1f86:	ac cd       	rjmp	.-1192   	; 0x1ae0 <__divsf3>
    1f88:	92 ce       	rjmp	.-732    	; 0x1cae <__fp_inf>
    1f8a:	ac c0       	rjmp	.+344    	; 0x20e4 <__fp_mpack>

00001f8c <ldexp>:
    1f8c:	d0 de       	rcall	.-608    	; 0x1d2e <__fp_splitA>
    1f8e:	e8 f3       	brcs	.-6      	; 0x1f8a <inverse+0x10>
    1f90:	99 23       	and	r25, r25
    1f92:	d9 f3       	breq	.-10     	; 0x1f8a <inverse+0x10>
    1f94:	94 0f       	add	r25, r20
    1f96:	51 1d       	adc	r21, r1
    1f98:	bb f3       	brvs	.-18     	; 0x1f88 <inverse+0xe>
    1f9a:	91 50       	subi	r25, 0x01	; 1
    1f9c:	50 40       	sbci	r21, 0x00	; 0
    1f9e:	94 f0       	brlt	.+36     	; 0x1fc4 <ldexp+0x38>
    1fa0:	59 f0       	breq	.+22     	; 0x1fb8 <ldexp+0x2c>
    1fa2:	88 23       	and	r24, r24
    1fa4:	32 f0       	brmi	.+12     	; 0x1fb2 <ldexp+0x26>
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	88 1f       	adc	r24, r24
    1fac:	91 50       	subi	r25, 0x01	; 1
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	c1 f7       	brne	.-16     	; 0x1fa2 <ldexp+0x16>
    1fb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb4:	51 05       	cpc	r21, r1
    1fb6:	44 f7       	brge	.-48     	; 0x1f88 <inverse+0xe>
    1fb8:	88 0f       	add	r24, r24
    1fba:	91 1d       	adc	r25, r1
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret
    1fc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc6:	ac f0       	brlt	.+42     	; 0x1ff2 <ldexp+0x66>
    1fc8:	98 3e       	cpi	r25, 0xE8	; 232
    1fca:	9c f0       	brlt	.+38     	; 0x1ff2 <ldexp+0x66>
    1fcc:	bb 27       	eor	r27, r27
    1fce:	86 95       	lsr	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	b7 95       	ror	r27
    1fd6:	08 f4       	brcc	.+2      	; 0x1fda <ldexp+0x4e>
    1fd8:	b1 60       	ori	r27, 0x01	; 1
    1fda:	93 95       	inc	r25
    1fdc:	c1 f7       	brne	.-16     	; 0x1fce <ldexp+0x42>
    1fde:	bb 0f       	add	r27, r27
    1fe0:	58 f7       	brcc	.-42     	; 0x1fb8 <ldexp+0x2c>
    1fe2:	11 f4       	brne	.+4      	; 0x1fe8 <ldexp+0x5c>
    1fe4:	60 ff       	sbrs	r22, 0
    1fe6:	e8 cf       	rjmp	.-48     	; 0x1fb8 <ldexp+0x2c>
    1fe8:	6f 5f       	subi	r22, 0xFF	; 255
    1fea:	7f 4f       	sbci	r23, 0xFF	; 255
    1fec:	8f 4f       	sbci	r24, 0xFF	; 255
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	e3 cf       	rjmp	.-58     	; 0x1fb8 <ldexp+0x2c>
    1ff2:	b8 ce       	rjmp	.-656    	; 0x1d64 <__fp_szero>
    1ff4:	0e f0       	brts	.+2      	; 0x1ff8 <ldexp+0x6c>
    1ff6:	76 c0       	rjmp	.+236    	; 0x20e4 <__fp_mpack>
    1ff8:	60 ce       	rjmp	.-832    	; 0x1cba <__fp_nan>
    1ffa:	68 94       	set
    1ffc:	58 ce       	rjmp	.-848    	; 0x1cae <__fp_inf>

00001ffe <log>:
    1ffe:	97 de       	rcall	.-722    	; 0x1d2e <__fp_splitA>
    2000:	c8 f3       	brcs	.-14     	; 0x1ff4 <ldexp+0x68>
    2002:	99 23       	and	r25, r25
    2004:	d1 f3       	breq	.-12     	; 0x1ffa <ldexp+0x6e>
    2006:	c6 f3       	brts	.-16     	; 0x1ff8 <ldexp+0x6c>
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	1f 93       	push	r17
    200e:	0f 93       	push	r16
    2010:	ff 92       	push	r15
    2012:	c9 2f       	mov	r28, r25
    2014:	dd 27       	eor	r29, r29
    2016:	88 23       	and	r24, r24
    2018:	2a f0       	brmi	.+10     	; 0x2024 <log+0x26>
    201a:	21 97       	sbiw	r28, 0x01	; 1
    201c:	66 0f       	add	r22, r22
    201e:	77 1f       	adc	r23, r23
    2020:	88 1f       	adc	r24, r24
    2022:	da f7       	brpl	.-10     	; 0x201a <log+0x1c>
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f eb       	ldi	r21, 0xBF	; 191
    202c:	9f e3       	ldi	r25, 0x3F	; 63
    202e:	88 39       	cpi	r24, 0x98	; 152
    2030:	20 f0       	brcs	.+8      	; 0x203a <log+0x3c>
    2032:	80 3e       	cpi	r24, 0xE0	; 224
    2034:	30 f0       	brcs	.+12     	; 0x2042 <log+0x44>
    2036:	21 96       	adiw	r28, 0x01	; 1
    2038:	8f 77       	andi	r24, 0x7F	; 127
    203a:	ee dc       	rcall	.-1572   	; 0x1a18 <__addsf3>
    203c:	ec e0       	ldi	r30, 0x0C	; 12
    203e:	f1 e0       	ldi	r31, 0x01	; 1
    2040:	03 c0       	rjmp	.+6      	; 0x2048 <log+0x4a>
    2042:	ea dc       	rcall	.-1580   	; 0x1a18 <__addsf3>
    2044:	e9 e3       	ldi	r30, 0x39	; 57
    2046:	f1 e0       	ldi	r31, 0x01	; 1
    2048:	73 df       	rcall	.-282    	; 0x1f30 <__fp_powser>
    204a:	8b 01       	movw	r16, r22
    204c:	be 01       	movw	r22, r28
    204e:	ec 01       	movw	r28, r24
    2050:	fb 2e       	mov	r15, r27
    2052:	6f 57       	subi	r22, 0x7F	; 127
    2054:	71 09       	sbc	r23, r1
    2056:	75 95       	asr	r23
    2058:	77 1f       	adc	r23, r23
    205a:	88 0b       	sbc	r24, r24
    205c:	99 0b       	sbc	r25, r25
    205e:	ae dd       	rcall	.-1188   	; 0x1bbc <__floatsisf>
    2060:	28 e1       	ldi	r18, 0x18	; 24
    2062:	32 e7       	ldi	r19, 0x72	; 114
    2064:	41 e3       	ldi	r20, 0x31	; 49
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	8f de       	rcall	.-738    	; 0x1d88 <__mulsf3x>
    206a:	af 2d       	mov	r26, r15
    206c:	98 01       	movw	r18, r16
    206e:	ae 01       	movw	r20, r28
    2070:	ff 90       	pop	r15
    2072:	0f 91       	pop	r16
    2074:	1f 91       	pop	r17
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	df dc       	rcall	.-1602   	; 0x1a3a <__addsf3x>
    207c:	3f ce       	rjmp	.-898    	; 0x1cfc <__fp_round>

0000207e <modf>:
    207e:	fa 01       	movw	r30, r20
    2080:	dc 01       	movw	r26, r24
    2082:	aa 0f       	add	r26, r26
    2084:	bb 1f       	adc	r27, r27
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	bf 57       	subi	r27, 0x7F	; 127
    208c:	28 f4       	brcc	.+10     	; 0x2098 <modf+0x1a>
    208e:	22 27       	eor	r18, r18
    2090:	33 27       	eor	r19, r19
    2092:	44 27       	eor	r20, r20
    2094:	50 78       	andi	r21, 0x80	; 128
    2096:	1f c0       	rjmp	.+62     	; 0x20d6 <modf+0x58>
    2098:	b7 51       	subi	r27, 0x17	; 23
    209a:	88 f4       	brcc	.+34     	; 0x20be <modf+0x40>
    209c:	ab 2f       	mov	r26, r27
    209e:	00 24       	eor	r0, r0
    20a0:	46 95       	lsr	r20
    20a2:	37 95       	ror	r19
    20a4:	27 95       	ror	r18
    20a6:	01 1c       	adc	r0, r1
    20a8:	a3 95       	inc	r26
    20aa:	d2 f3       	brmi	.-12     	; 0x20a0 <modf+0x22>
    20ac:	00 20       	and	r0, r0
    20ae:	69 f0       	breq	.+26     	; 0x20ca <modf+0x4c>
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	44 1f       	adc	r20, r20
    20b6:	b3 95       	inc	r27
    20b8:	da f3       	brmi	.-10     	; 0x20b0 <modf+0x32>
    20ba:	0d d0       	rcall	.+26     	; 0x20d6 <modf+0x58>
    20bc:	ac cc       	rjmp	.-1704   	; 0x1a16 <__subsf3>
    20be:	61 30       	cpi	r22, 0x01	; 1
    20c0:	71 05       	cpc	r23, r1
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	8a 07       	cpc	r24, r26
    20c6:	b9 46       	sbci	r27, 0x69	; 105
    20c8:	30 f4       	brcc	.+12     	; 0x20d6 <modf+0x58>
    20ca:	9b 01       	movw	r18, r22
    20cc:	ac 01       	movw	r20, r24
    20ce:	66 27       	eor	r22, r22
    20d0:	77 27       	eor	r23, r23
    20d2:	88 27       	eor	r24, r24
    20d4:	90 78       	andi	r25, 0x80	; 128
    20d6:	30 96       	adiw	r30, 0x00	; 0
    20d8:	21 f0       	breq	.+8      	; 0x20e2 <modf+0x64>
    20da:	20 83       	st	Z, r18
    20dc:	31 83       	std	Z+1, r19	; 0x01
    20de:	42 83       	std	Z+2, r20	; 0x02
    20e0:	53 83       	std	Z+3, r21	; 0x03
    20e2:	08 95       	ret

000020e4 <__fp_mpack>:
    20e4:	9f 3f       	cpi	r25, 0xFF	; 255
    20e6:	31 f0       	breq	.+12     	; 0x20f4 <__fp_mpack_finite+0xc>

000020e8 <__fp_mpack_finite>:
    20e8:	91 50       	subi	r25, 0x01	; 1
    20ea:	20 f4       	brcc	.+8      	; 0x20f4 <__fp_mpack_finite+0xc>
    20ec:	87 95       	ror	r24
    20ee:	77 95       	ror	r23
    20f0:	67 95       	ror	r22
    20f2:	b7 95       	ror	r27
    20f4:	88 0f       	add	r24, r24
    20f6:	91 1d       	adc	r25, r1
    20f8:	96 95       	lsr	r25
    20fa:	87 95       	ror	r24
    20fc:	97 f9       	bld	r25, 7
    20fe:	08 95       	ret

00002100 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2100:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2102:	91 8d       	ldd	r25, Z+25	; 0x19
    2104:	22 8d       	ldd	r18, Z+26	; 0x1a
    2106:	89 2f       	mov	r24, r25
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	80 5c       	subi	r24, 0xC0	; 192
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	82 1b       	sub	r24, r18
    2110:	91 09       	sbc	r25, r1
}
    2112:	8f 73       	andi	r24, 0x3F	; 63
    2114:	99 27       	eor	r25, r25
    2116:	08 95       	ret

00002118 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2118:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    211a:	91 8d       	ldd	r25, Z+25	; 0x19
    211c:	82 8d       	ldd	r24, Z+26	; 0x1a
    211e:	98 17       	cp	r25, r24
    2120:	31 f0       	breq	.+12     	; 0x212e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2122:	82 8d       	ldd	r24, Z+26	; 0x1a
    2124:	e8 0f       	add	r30, r24
    2126:	f1 1d       	adc	r31, r1
    2128:	85 8d       	ldd	r24, Z+29	; 0x1d
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2132:	08 95       	ret

00002134 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2134:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2136:	91 8d       	ldd	r25, Z+25	; 0x19
    2138:	82 8d       	ldd	r24, Z+26	; 0x1a
    213a:	98 17       	cp	r25, r24
    213c:	61 f0       	breq	.+24     	; 0x2156 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    213e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2140:	df 01       	movw	r26, r30
    2142:	a8 0f       	add	r26, r24
    2144:	b1 1d       	adc	r27, r1
    2146:	5d 96       	adiw	r26, 0x1d	; 29
    2148:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    214a:	92 8d       	ldd	r25, Z+26	; 0x1a
    214c:	9f 5f       	subi	r25, 0xFF	; 255
    214e:	9f 73       	andi	r25, 0x3F	; 63
    2150:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    215a:	08 95       	ret

0000215c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    215c:	fc 01       	movw	r30, r24
    215e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2160:	44 8d       	ldd	r20, Z+28	; 0x1c
    2162:	25 2f       	mov	r18, r21
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	84 2f       	mov	r24, r20
    2168:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    216a:	82 1b       	sub	r24, r18
    216c:	93 0b       	sbc	r25, r19
    216e:	54 17       	cp	r21, r20
    2170:	10 f0       	brcs	.+4      	; 0x2176 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2172:	cf 96       	adiw	r24, 0x3f	; 63
    2174:	08 95       	ret
  return tail - head - 1;
    2176:	01 97       	sbiw	r24, 0x01	; 1
}
    2178:	08 95       	ret

0000217a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    217a:	8c e4       	ldi	r24, 0x4C	; 76
    217c:	92 e1       	ldi	r25, 0x12	; 18
    217e:	89 2b       	or	r24, r25
    2180:	39 f0       	breq	.+14     	; 0x2190 <_Z14serialEventRunv+0x16>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	89 2b       	or	r24, r25
    2188:	19 f0       	breq	.+6      	; 0x2190 <_Z14serialEventRunv+0x16>
    218a:	86 d1       	rcall	.+780    	; 0x2498 <_Z17Serial0_availablev>
    218c:	81 11       	cpse	r24, r1
    218e:	25 c0       	rjmp	.+74     	; 0x21da <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	89 2b       	or	r24, r25
    2196:	41 f0       	breq	.+16     	; 0x21a8 <_Z14serialEventRunv+0x2e>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	89 2b       	or	r24, r25
    219e:	21 f0       	breq	.+8      	; 0x21a8 <_Z14serialEventRunv+0x2e>
    21a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21a4:	81 11       	cpse	r24, r1
    21a6:	1c c0       	rjmp	.+56     	; 0x21e0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	89 2b       	or	r24, r25
    21ae:	41 f0       	breq	.+16     	; 0x21c0 <_Z14serialEventRunv+0x46>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	89 2b       	or	r24, r25
    21b6:	21 f0       	breq	.+8      	; 0x21c0 <_Z14serialEventRunv+0x46>
    21b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21bc:	81 11       	cpse	r24, r1
    21be:	13 c0       	rjmp	.+38     	; 0x21e6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	89 2b       	or	r24, r25
    21c6:	a1 f0       	breq	.+40     	; 0x21f0 <_Z14serialEventRunv+0x76>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	89 2b       	or	r24, r25
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <_Z14serialEventRunv+0x76>
    21d0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21d4:	81 11       	cpse	r24, r1
    21d6:	0a c0       	rjmp	.+20     	; 0x21ec <_Z14serialEventRunv+0x72>
    21d8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    21da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21de:	d8 cf       	rjmp	.-80     	; 0x2190 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    21e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21e4:	e1 cf       	rjmp	.-62     	; 0x21a8 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    21e6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21ea:	ea cf       	rjmp	.-44     	; 0x21c0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    21ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    21f0:	08 95       	ret

000021f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    21f2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    21f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    21f6:	df 01       	movw	r26, r30
    21f8:	a8 0f       	add	r26, r24
    21fa:	b1 1d       	adc	r27, r1
    21fc:	a3 5a       	subi	r26, 0xA3	; 163
    21fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2200:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2202:	84 8d       	ldd	r24, Z+28	; 0x1c
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	8f 73       	andi	r24, 0x3F	; 63
    220a:	99 27       	eor	r25, r25
    220c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    220e:	a6 89       	ldd	r26, Z+22	; 0x16
    2210:	b7 89       	ldd	r27, Z+23	; 0x17
    2212:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2214:	a0 89       	ldd	r26, Z+16	; 0x10
    2216:	b1 89       	ldd	r27, Z+17	; 0x11
    2218:	8c 91       	ld	r24, X
    221a:	83 70       	andi	r24, 0x03	; 3
    221c:	80 64       	ori	r24, 0x40	; 64
    221e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2220:	93 8d       	ldd	r25, Z+27	; 0x1b
    2222:	84 8d       	ldd	r24, Z+28	; 0x1c
    2224:	98 13       	cpse	r25, r24
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <__stack+0x35>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2228:	02 88       	ldd	r0, Z+18	; 0x12
    222a:	f3 89       	ldd	r31, Z+19	; 0x13
    222c:	e0 2d       	mov	r30, r0
    222e:	80 81       	ld	r24, Z
    2230:	8f 7d       	andi	r24, 0xDF	; 223
    2232:	80 83       	st	Z, r24
    2234:	08 95       	ret

00002236 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
  _written = true;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2248:	9b 8d       	ldd	r25, Y+27	; 0x1b
    224a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224c:	98 13       	cpse	r25, r24
    224e:	05 c0       	rjmp	.+10     	; 0x225a <_ZN14HardwareSerial5writeEh+0x24>
    2250:	e8 89       	ldd	r30, Y+16	; 0x10
    2252:	f9 89       	ldd	r31, Y+17	; 0x11
    2254:	80 81       	ld	r24, Z
    2256:	85 fd       	sbrc	r24, 5
    2258:	25 c0       	rjmp	.+74     	; 0x22a4 <_ZN14HardwareSerial5writeEh+0x6e>
    225a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    225c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	0f 5f       	subi	r16, 0xFF	; 255
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	0f 73       	andi	r16, 0x3F	; 63
    2266:	11 27       	eor	r17, r17
    2268:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    226a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    226c:	e8 12       	cpse	r14, r24
    226e:	0b c0       	rjmp	.+22     	; 0x2286 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	07 fc       	sbrc	r0, 7
    2274:	fa cf       	rjmp	.-12     	; 0x226a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2276:	e8 89       	ldd	r30, Y+16	; 0x10
    2278:	f9 89       	ldd	r31, Y+17	; 0x11
    227a:	80 81       	ld	r24, Z
    227c:	85 ff       	sbrs	r24, 5
    227e:	f5 cf       	rjmp	.-22     	; 0x226a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2280:	ce 01       	movw	r24, r28
    2282:	b7 df       	rcall	.-146    	; 0x21f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2284:	f2 cf       	rjmp	.-28     	; 0x226a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2288:	fe 01       	movw	r30, r28
    228a:	e8 0f       	add	r30, r24
    228c:	f1 1d       	adc	r31, r1
    228e:	e3 5a       	subi	r30, 0xA3	; 163
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2294:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2296:	f8 94       	cli
    _tx_buffer_head = i;
    2298:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    229a:	ea 89       	ldd	r30, Y+18	; 0x12
    229c:	fb 89       	ldd	r31, Y+19	; 0x13
    229e:	80 81       	ld	r24, Z
    22a0:	80 62       	ori	r24, 0x20	; 32
    22a2:	0a c0       	rjmp	.+20     	; 0x22b8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    22a4:	9f b7       	in	r25, 0x3f	; 63
    22a6:	f8 94       	cli
      *_udr = c;
    22a8:	ee 89       	ldd	r30, Y+22	; 0x16
    22aa:	ff 89       	ldd	r31, Y+23	; 0x17
    22ac:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    22ae:	e8 89       	ldd	r30, Y+16	; 0x10
    22b0:	f9 89       	ldd	r31, Y+17	; 0x11
    22b2:	80 81       	ld	r24, Z
    22b4:	83 70       	andi	r24, 0x03	; 3
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    22ba:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	ef 90       	pop	r14
    22cc:	08 95       	ret

000022ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    22d4:	88 8d       	ldd	r24, Y+24	; 0x18
    22d6:	88 23       	and	r24, r24
    22d8:	c1 f0       	breq	.+48     	; 0x230a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    22da:	ea 89       	ldd	r30, Y+18	; 0x12
    22dc:	fb 89       	ldd	r31, Y+19	; 0x13
    22de:	80 81       	ld	r24, Z
    22e0:	85 fd       	sbrc	r24, 5
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <_ZN14HardwareSerial5flushEv+0x20>
    22e4:	a8 89       	ldd	r26, Y+16	; 0x10
    22e6:	b9 89       	ldd	r27, Y+17	; 0x11
    22e8:	8c 91       	ld	r24, X
    22ea:	86 fd       	sbrc	r24, 6
    22ec:	0e c0       	rjmp	.+28     	; 0x230a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	07 fc       	sbrc	r0, 7
    22f2:	f5 cf       	rjmp	.-22     	; 0x22de <_ZN14HardwareSerial5flushEv+0x10>
    22f4:	80 81       	ld	r24, Z
    22f6:	85 ff       	sbrs	r24, 5
    22f8:	f2 cf       	rjmp	.-28     	; 0x22de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    22fa:	a8 89       	ldd	r26, Y+16	; 0x10
    22fc:	b9 89       	ldd	r27, Y+17	; 0x11
    22fe:	8c 91       	ld	r24, X
    2300:	85 ff       	sbrs	r24, 5
    2302:	ed cf       	rjmp	.-38     	; 0x22de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2304:	ce 01       	movw	r24, r28
    2306:	75 df       	rcall	.-278    	; 0x21f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2308:	e8 cf       	rjmp	.-48     	; 0x22da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2310:	cf 92       	push	r12
    2312:	df 92       	push	r13
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	ec 01       	movw	r28, r24
    2320:	6a 01       	movw	r12, r20
    2322:	7b 01       	movw	r14, r22
    2324:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2326:	e8 89       	ldd	r30, Y+16	; 0x10
    2328:	f9 89       	ldd	r31, Y+17	; 0x11
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    232e:	41 15       	cp	r20, r1
    2330:	51 4e       	sbci	r21, 0xE1	; 225
    2332:	61 05       	cpc	r22, r1
    2334:	71 05       	cpc	r23, r1
    2336:	b1 f0       	breq	.+44     	; 0x2364 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	79 e0       	ldi	r23, 0x09	; 9
    233c:	8d e3       	ldi	r24, 0x3D	; 61
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a7 01       	movw	r20, r14
    2342:	96 01       	movw	r18, r12
    2344:	0e 94 cc 21 	call	0x4398	; 0x4398 <__udivmodsi4>
    2348:	da 01       	movw	r26, r20
    234a:	c9 01       	movw	r24, r18
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	a1 09       	sbc	r26, r1
    2350:	b1 09       	sbc	r27, r1
    2352:	b6 95       	lsr	r27
    2354:	a7 95       	ror	r26
    2356:	97 95       	ror	r25
    2358:	87 95       	ror	r24
    235a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    235c:	21 15       	cp	r18, r1
    235e:	80 e1       	ldi	r24, 0x10	; 16
    2360:	38 07       	cpc	r19, r24
    2362:	a8 f0       	brcs	.+42     	; 0x238e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2364:	e8 89       	ldd	r30, Y+16	; 0x10
    2366:	f9 89       	ldd	r31, Y+17	; 0x11
    2368:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    236a:	60 e8       	ldi	r22, 0x80	; 128
    236c:	74 e8       	ldi	r23, 0x84	; 132
    236e:	8e e1       	ldi	r24, 0x1E	; 30
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a7 01       	movw	r20, r14
    2374:	96 01       	movw	r18, r12
    2376:	0e 94 cc 21 	call	0x4398	; 0x4398 <__udivmodsi4>
    237a:	da 01       	movw	r26, r20
    237c:	c9 01       	movw	r24, r18
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	a1 09       	sbc	r26, r1
    2382:	b1 09       	sbc	r27, r1
    2384:	b6 95       	lsr	r27
    2386:	a7 95       	ror	r26
    2388:	97 95       	ror	r25
    238a:	87 95       	ror	r24
    238c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    238e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2390:	fd 85       	ldd	r31, Y+13	; 0x0d
    2392:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2394:	ee 85       	ldd	r30, Y+14	; 0x0e
    2396:	ff 85       	ldd	r31, Y+15	; 0x0f
    2398:	20 83       	st	Z, r18

  _written = false;
    239a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    239c:	ec 89       	ldd	r30, Y+20	; 0x14
    239e:	fd 89       	ldd	r31, Y+21	; 0x15
    23a0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    23a2:	ea 89       	ldd	r30, Y+18	; 0x12
    23a4:	fb 89       	ldd	r31, Y+19	; 0x13
    23a6:	80 81       	ld	r24, Z
    23a8:	80 61       	ori	r24, 0x10	; 16
    23aa:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    23ac:	ea 89       	ldd	r30, Y+18	; 0x12
    23ae:	fb 89       	ldd	r31, Y+19	; 0x13
    23b0:	80 81       	ld	r24, Z
    23b2:	88 60       	ori	r24, 0x08	; 8
    23b4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    23b6:	ea 89       	ldd	r30, Y+18	; 0x12
    23b8:	fb 89       	ldd	r31, Y+19	; 0x13
    23ba:	80 81       	ld	r24, Z
    23bc:	80 68       	ori	r24, 0x80	; 128
    23be:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    23c0:	ea 89       	ldd	r30, Y+18	; 0x12
    23c2:	fb 89       	ldd	r31, Y+19	; 0x13
    23c4:	80 81       	ld	r24, Z
    23c6:	8f 7d       	andi	r24, 0xDF	; 223
    23c8:	80 83       	st	Z, r24
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	08 95       	ret

000023da <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    23da:	1f 92       	push	r1
    23dc:	0f 92       	push	r0
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	0f 92       	push	r0
    23e2:	11 24       	eor	r1, r1
    23e4:	0b b6       	in	r0, 0x3b	; 59
    23e6:	0f 92       	push	r0
    23e8:	2f 93       	push	r18
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    23f2:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <Serial+0x10>
    23f6:	f0 91 3a 06 	lds	r31, 0x063A	; 0x80063a <Serial+0x11>
    23fa:	80 81       	ld	r24, Z
    23fc:	e0 91 3f 06 	lds	r30, 0x063F	; 0x80063f <Serial+0x16>
    2400:	f0 91 40 06 	lds	r31, 0x0640	; 0x800640 <Serial+0x17>
    2404:	82 fd       	sbrc	r24, 2
    2406:	12 c0       	rjmp	.+36     	; 0x242c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2408:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    240a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <Serial+0x19>
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2412:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <Serial+0x1a>
    2416:	82 17       	cp	r24, r18
    2418:	51 f0       	breq	.+20     	; 0x242e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    241a:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <Serial+0x19>
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	e7 5d       	subi	r30, 0xD7	; 215
    2422:	f9 4f       	sbci	r31, 0xF9	; 249
    2424:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2426:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <Serial+0x19>
    242a:	01 c0       	rjmp	.+2      	; 0x242e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    242c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	9f 91       	pop	r25
    2434:	8f 91       	pop	r24
    2436:	2f 91       	pop	r18
    2438:	0f 90       	pop	r0
    243a:	0b be       	out	0x3b, r0	; 59
    243c:	0f 90       	pop	r0
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	0f 90       	pop	r0
    2442:	1f 90       	pop	r1
    2444:	18 95       	reti

00002446 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2446:	1f 92       	push	r1
    2448:	0f 92       	push	r0
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	0f 92       	push	r0
    244e:	11 24       	eor	r1, r1
    2450:	0b b6       	in	r0, 0x3b	; 59
    2452:	0f 92       	push	r0
    2454:	2f 93       	push	r18
    2456:	3f 93       	push	r19
    2458:	4f 93       	push	r20
    245a:	5f 93       	push	r21
    245c:	6f 93       	push	r22
    245e:	7f 93       	push	r23
    2460:	8f 93       	push	r24
    2462:	9f 93       	push	r25
    2464:	af 93       	push	r26
    2466:	bf 93       	push	r27
    2468:	ef 93       	push	r30
    246a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    246c:	89 e2       	ldi	r24, 0x29	; 41
    246e:	96 e0       	ldi	r25, 0x06	; 6
    2470:	c0 de       	rcall	.-640    	; 0x21f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2472:	ff 91       	pop	r31
    2474:	ef 91       	pop	r30
    2476:	bf 91       	pop	r27
    2478:	af 91       	pop	r26
    247a:	9f 91       	pop	r25
    247c:	8f 91       	pop	r24
    247e:	7f 91       	pop	r23
    2480:	6f 91       	pop	r22
    2482:	5f 91       	pop	r21
    2484:	4f 91       	pop	r20
    2486:	3f 91       	pop	r19
    2488:	2f 91       	pop	r18
    248a:	0f 90       	pop	r0
    248c:	0b be       	out	0x3b, r0	; 59
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti

00002498 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2498:	89 e2       	ldi	r24, 0x29	; 41
    249a:	96 e0       	ldi	r25, 0x06	; 6
    249c:	31 de       	rcall	.-926    	; 0x2100 <_ZN14HardwareSerial9availableEv>
    249e:	21 e0       	ldi	r18, 0x01	; 1
    24a0:	89 2b       	or	r24, r25
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <_Z17Serial0_availablev+0xe>
    24a4:	20 e0       	ldi	r18, 0x00	; 0
}
    24a6:	82 2f       	mov	r24, r18
    24a8:	08 95       	ret

000024aa <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    24aa:	e9 e2       	ldi	r30, 0x29	; 41
    24ac:	f6 e0       	ldi	r31, 0x06	; 6
    24ae:	13 82       	std	Z+3, r1	; 0x03
    24b0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    24b2:	88 ee       	ldi	r24, 0xE8	; 232
    24b4:	93 e0       	ldi	r25, 0x03	; 3
    24b6:	a0 e0       	ldi	r26, 0x00	; 0
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	84 83       	std	Z+4, r24	; 0x04
    24bc:	95 83       	std	Z+5, r25	; 0x05
    24be:	a6 83       	std	Z+6, r26	; 0x06
    24c0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    24c2:	85 e7       	ldi	r24, 0x75	; 117
    24c4:	94 e0       	ldi	r25, 0x04	; 4
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
    24ca:	85 ec       	ldi	r24, 0xC5	; 197
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	95 87       	std	Z+13, r25	; 0x0d
    24d0:	84 87       	std	Z+12, r24	; 0x0c
    24d2:	84 ec       	ldi	r24, 0xC4	; 196
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	97 87       	std	Z+15, r25	; 0x0f
    24d8:	86 87       	std	Z+14, r24	; 0x0e
    24da:	80 ec       	ldi	r24, 0xC0	; 192
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	91 8b       	std	Z+17, r25	; 0x11
    24e0:	80 8b       	std	Z+16, r24	; 0x10
    24e2:	81 ec       	ldi	r24, 0xC1	; 193
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	93 8b       	std	Z+19, r25	; 0x13
    24e8:	82 8b       	std	Z+18, r24	; 0x12
    24ea:	82 ec       	ldi	r24, 0xC2	; 194
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	95 8b       	std	Z+21, r25	; 0x15
    24f0:	84 8b       	std	Z+20, r24	; 0x14
    24f2:	86 ec       	ldi	r24, 0xC6	; 198
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	97 8b       	std	Z+23, r25	; 0x17
    24f8:	86 8b       	std	Z+22, r24	; 0x16
    24fa:	11 8e       	std	Z+25, r1	; 0x19
    24fc:	12 8e       	std	Z+26, r1	; 0x1a
    24fe:	13 8e       	std	Z+27, r1	; 0x1b
    2500:	14 8e       	std	Z+28, r1	; 0x1c
    2502:	08 95       	ret

00002504 <initVariant>:
    2504:	08 95       	ret

00002506 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2506:	9c d3       	rcall	.+1848   	; 0x2c40 <init>

	initVariant();
    2508:	fd df       	rcall	.-6      	; 0x2504 <initVariant>
    250a:	0e 94 c2 01 	call	0x384	; 0x384 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    250e:	cd eb       	ldi	r28, 0xBD	; 189
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2510:	d0 e1       	ldi	r29, 0x10	; 16
    2512:	0e 94 ce 01 	call	0x39c	; 0x39c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    2516:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    2518:	e1 f3       	breq	.-8      	; 0x2512 <main+0xc>
    251a:	2f de       	rcall	.-930    	; 0x217a <_Z14serialEventRunv>
    251c:	fa cf       	rjmp	.-12     	; 0x2512 <main+0xc>

0000251e <_ZN5Print5writeEPKhj>:
    251e:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2520:	df 92       	push	r13
    2522:	ef 92       	push	r14
    2524:	ff 92       	push	r15
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	6c 01       	movw	r12, r24
    2530:	7a 01       	movw	r14, r20
    2532:	8b 01       	movw	r16, r22
    2534:	c0 e0       	ldi	r28, 0x00	; 0
    2536:	d0 e0       	ldi	r29, 0x00	; 0
    2538:	ce 15       	cp	r28, r14
    253a:	df 05       	cpc	r29, r15
    253c:	81 f0       	breq	.+32     	; 0x255e <_ZN5Print5writeEPKhj+0x40>
    253e:	d8 01       	movw	r26, r16
    2540:	6d 91       	ld	r22, X+
    2542:	8d 01       	movw	r16, r26
    2544:	d6 01       	movw	r26, r12
    2546:	ed 91       	ld	r30, X+
    2548:	fc 91       	ld	r31, X
    254a:	01 90       	ld	r0, Z+
    254c:	f0 81       	ld	r31, Z
    254e:	e0 2d       	mov	r30, r0
    2550:	c6 01       	movw	r24, r12
    2552:	19 95       	eicall
    2554:	89 2b       	or	r24, r25
    2556:	11 f0       	breq	.+4      	; 0x255c <_ZN5Print5writeEPKhj+0x3e>
    2558:	21 96       	adiw	r28, 0x01	; 1
    255a:	ee cf       	rjmp	.-36     	; 0x2538 <_ZN5Print5writeEPKhj+0x1a>
    255c:	7e 01       	movw	r14, r28
    255e:	c7 01       	movw	r24, r14
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	cf 90       	pop	r12
    2570:	08 95       	ret

00002572 <_ZN5Print5writeEPKc>:
    2572:	61 15       	cp	r22, r1
    2574:	71 05       	cpc	r23, r1
    2576:	79 f0       	breq	.+30     	; 0x2596 <_ZN5Print5writeEPKc+0x24>
    2578:	fb 01       	movw	r30, r22
    257a:	01 90       	ld	r0, Z+
    257c:	00 20       	and	r0, r0
    257e:	e9 f7       	brne	.-6      	; 0x257a <_ZN5Print5writeEPKc+0x8>
    2580:	31 97       	sbiw	r30, 0x01	; 1
    2582:	af 01       	movw	r20, r30
    2584:	46 1b       	sub	r20, r22
    2586:	57 0b       	sbc	r21, r23
    2588:	dc 01       	movw	r26, r24
    258a:	ed 91       	ld	r30, X+
    258c:	fc 91       	ld	r31, X
    258e:	02 80       	ldd	r0, Z+2	; 0x02
    2590:	f3 81       	ldd	r31, Z+3	; 0x03
    2592:	e0 2d       	mov	r30, r0
    2594:	19 94       	eijmp
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	08 95       	ret

0000259c <_ZN5Print5printEPKc>:
    259c:	ea cf       	rjmp	.-44     	; 0x2572 <_ZN5Print5writeEPKc>

0000259e <_ZN5Print5printEc>:
    259e:	dc 01       	movw	r26, r24
    25a0:	ed 91       	ld	r30, X+
    25a2:	fc 91       	ld	r31, X
    25a4:	01 90       	ld	r0, Z+
    25a6:	f0 81       	ld	r31, Z
    25a8:	e0 2d       	mov	r30, r0
    25aa:	19 94       	eijmp

000025ac <_ZN5Print7printlnEv>:
    25ac:	63 e8       	ldi	r22, 0x83	; 131
    25ae:	74 e0       	ldi	r23, 0x04	; 4
    25b0:	e0 cf       	rjmp	.-64     	; 0x2572 <_ZN5Print5writeEPKc>

000025b2 <_ZN5Print7printlnEPKc>:
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	ec 01       	movw	r28, r24
    25bc:	da df       	rcall	.-76     	; 0x2572 <_ZN5Print5writeEPKc>
    25be:	8c 01       	movw	r16, r24
    25c0:	ce 01       	movw	r24, r28
    25c2:	f4 df       	rcall	.-24     	; 0x25ac <_ZN5Print7printlnEv>
    25c4:	80 0f       	add	r24, r16
    25c6:	91 1f       	adc	r25, r17
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <_ZN5Print11printNumberEmh>:
    25d2:	8f 92       	push	r8
    25d4:	9f 92       	push	r9
    25d6:	af 92       	push	r10
    25d8:	bf 92       	push	r11
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	a1 97       	sbiw	r28, 0x21	; 33
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	7c 01       	movw	r14, r24
    25f8:	fa 01       	movw	r30, r20
    25fa:	cb 01       	movw	r24, r22
    25fc:	19 a2       	std	Y+33, r1	; 0x21
    25fe:	22 30       	cpi	r18, 0x02	; 2
    2600:	08 f4       	brcc	.+2      	; 0x2604 <_ZN5Print11printNumberEmh+0x32>
    2602:	2a e0       	ldi	r18, 0x0A	; 10
    2604:	8e 01       	movw	r16, r28
    2606:	0f 5d       	subi	r16, 0xDF	; 223
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	82 2e       	mov	r8, r18
    260c:	91 2c       	mov	r9, r1
    260e:	a1 2c       	mov	r10, r1
    2610:	b1 2c       	mov	r11, r1
    2612:	bf 01       	movw	r22, r30
    2614:	a5 01       	movw	r20, r10
    2616:	94 01       	movw	r18, r8
    2618:	0e 94 cc 21 	call	0x4398	; 0x4398 <__udivmodsi4>
    261c:	f9 01       	movw	r30, r18
    261e:	ca 01       	movw	r24, r20
    2620:	01 50       	subi	r16, 0x01	; 1
    2622:	11 09       	sbc	r17, r1
    2624:	6a 30       	cpi	r22, 0x0A	; 10
    2626:	10 f4       	brcc	.+4      	; 0x262c <_ZN5Print11printNumberEmh+0x5a>
    2628:	60 5d       	subi	r22, 0xD0	; 208
    262a:	01 c0       	rjmp	.+2      	; 0x262e <_ZN5Print11printNumberEmh+0x5c>
    262c:	69 5c       	subi	r22, 0xC9	; 201
    262e:	d8 01       	movw	r26, r16
    2630:	6c 93       	st	X, r22
    2632:	23 2b       	or	r18, r19
    2634:	24 2b       	or	r18, r20
    2636:	25 2b       	or	r18, r21
    2638:	61 f7       	brne	.-40     	; 0x2612 <_ZN5Print11printNumberEmh+0x40>
    263a:	b8 01       	movw	r22, r16
    263c:	c7 01       	movw	r24, r14
    263e:	99 df       	rcall	.-206    	; 0x2572 <_ZN5Print5writeEPKc>
    2640:	a1 96       	adiw	r28, 0x21	; 33
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	bf 90       	pop	r11
    265a:	af 90       	pop	r10
    265c:	9f 90       	pop	r9
    265e:	8f 90       	pop	r8
    2660:	08 95       	ret

00002662 <_ZN5Print5printEmi>:
    2662:	21 15       	cp	r18, r1
    2664:	31 05       	cpc	r19, r1
    2666:	41 f4       	brne	.+16     	; 0x2678 <_ZN5Print5printEmi+0x16>
    2668:	dc 01       	movw	r26, r24
    266a:	ed 91       	ld	r30, X+
    266c:	fc 91       	ld	r31, X
    266e:	01 90       	ld	r0, Z+
    2670:	f0 81       	ld	r31, Z
    2672:	e0 2d       	mov	r30, r0
    2674:	64 2f       	mov	r22, r20
    2676:	19 94       	eijmp
    2678:	ac cf       	rjmp	.-168    	; 0x25d2 <_ZN5Print11printNumberEmh>

0000267a <_ZN5Print5printEji>:
    267a:	9a 01       	movw	r18, r20
    267c:	ab 01       	movw	r20, r22
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	ef cf       	rjmp	.-34     	; 0x2662 <_ZN5Print5printEmi>

00002684 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2684:	7f 92       	push	r7
    2686:	8f 92       	push	r8
    2688:	9f 92       	push	r9
    268a:	af 92       	push	r10
    268c:	bf 92       	push	r11
    268e:	cf 92       	push	r12
    2690:	df 92       	push	r13
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	8c 01       	movw	r16, r24
    26a0:	6a 01       	movw	r12, r20
    26a2:	7b 01       	movw	r14, r22
    26a4:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    26a6:	9a 01       	movw	r18, r20
    26a8:	ab 01       	movw	r20, r22
    26aa:	c7 01       	movw	r24, r14
    26ac:	b6 01       	movw	r22, r12
    26ae:	0e 94 b9 21 	call	0x4372	; 0x4372 <__unordsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	19 f0       	breq	.+6      	; 0x26bc <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    26b6:	66 e8       	ldi	r22, 0x86	; 134
    26b8:	74 e0       	ldi	r23, 0x04	; 4
    26ba:	27 c0       	rjmp	.+78     	; 0x270a <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    26bc:	46 01       	movw	r8, r12
    26be:	57 01       	movw	r10, r14
    26c0:	e8 94       	clt
    26c2:	b7 f8       	bld	r11, 7
    26c4:	2f ef       	ldi	r18, 0xFF	; 255
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	5f e7       	ldi	r21, 0x7F	; 127
    26cc:	c5 01       	movw	r24, r10
    26ce:	b4 01       	movw	r22, r8
    26d0:	0e 94 b9 21 	call	0x4372	; 0x4372 <__unordsf2>
    26d4:	81 11       	cpse	r24, r1
    26d6:	0d c0       	rjmp	.+26     	; 0x26f2 <_ZN5Print10printFloatEdh+0x6e>
    26d8:	2f ef       	ldi	r18, 0xFF	; 255
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	5f e7       	ldi	r21, 0x7F	; 127
    26e0:	c5 01       	movw	r24, r10
    26e2:	b4 01       	movw	r22, r8
    26e4:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__cmpsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	1c f4       	brge	.+6      	; 0x26f2 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    26ec:	6a e8       	ldi	r22, 0x8A	; 138
    26ee:	74 e0       	ldi	r23, 0x04	; 4
    26f0:	0c c0       	rjmp	.+24     	; 0x270a <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    26f2:	2f ef       	ldi	r18, 0xFF	; 255
    26f4:	3f ef       	ldi	r19, 0xFF	; 255
    26f6:	4f e7       	ldi	r20, 0x7F	; 127
    26f8:	5f e4       	ldi	r21, 0x4F	; 79
    26fa:	c7 01       	movw	r24, r14
    26fc:	b6 01       	movw	r22, r12
    26fe:	0e 94 b5 21 	call	0x436a	; 0x436a <__gesf2>
    2702:	18 16       	cp	r1, r24
    2704:	8c f4       	brge	.+34     	; 0x2728 <_ZN5Print10printFloatEdh+0xa4>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2706:	6e e8       	ldi	r22, 0x8E	; 142
    2708:	74 e0       	ldi	r23, 0x04	; 4
    270a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2726:	25 cf       	rjmp	.-438    	; 0x2572 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2728:	2f ef       	ldi	r18, 0xFF	; 255
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	5f ec       	ldi	r21, 0xCF	; 207
    2730:	c7 01       	movw	r24, r14
    2732:	b6 01       	movw	r22, r12
    2734:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__cmpsf2>
    2738:	87 fd       	sbrc	r24, 7
    273a:	e5 cf       	rjmp	.-54     	; 0x2706 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	a9 01       	movw	r20, r18
    2742:	c7 01       	movw	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__cmpsf2>
    274a:	87 ff       	sbrs	r24, 7
    274c:	09 c0       	rjmp	.+18     	; 0x2760 <_ZN5Print10printFloatEdh+0xdc>
  {
     n += print('-');
    274e:	6d e2       	ldi	r22, 0x2D	; 45
    2750:	c8 01       	movw	r24, r16
    2752:	25 df       	rcall	.-438    	; 0x259e <_ZN5Print5printEc>
    2754:	ec 01       	movw	r28, r24
     number = -number;
    2756:	f7 fa       	bst	r15, 7
    2758:	f0 94       	com	r15
    275a:	f7 f8       	bld	r15, 7
    275c:	f0 94       	com	r15
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <_ZN5Print10printFloatEdh+0xe0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2760:	c0 e0       	ldi	r28, 0x00	; 0
    2762:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2764:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    276e:	7b 14       	cp	r7, r11
    2770:	39 f0       	breq	.+14     	; 0x2780 <_ZN5Print10printFloatEdh+0xfc>
    rounding /= 10.0;
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	b2 d9       	rcall	.-3228   	; 0x1ae0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    277c:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    277e:	f7 cf       	rjmp	.-18     	; 0x276e <_ZN5Print10printFloatEdh+0xea>
    2780:	a7 01       	movw	r20, r14
    2782:	96 01       	movw	r18, r12
    2784:	49 d9       	rcall	.-3438   	; 0x1a18 <__addsf3>
    2786:	6b 01       	movw	r12, r22
    2788:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    278a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    278e:	4b 01       	movw	r8, r22
    2790:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2792:	2a e0       	ldi	r18, 0x0A	; 10
    2794:	ab 01       	movw	r20, r22
    2796:	bc 01       	movw	r22, r24
    2798:	c8 01       	movw	r24, r16
    279a:	1b df       	rcall	.-458    	; 0x25d2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    279c:	c8 0f       	add	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    279e:	d9 1f       	adc	r29, r25
    27a0:	77 20       	and	r7, r7
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    27a2:	81 f1       	breq	.+96     	; 0x2804 <_ZN5Print10printFloatEdh+0x180>
    27a4:	c5 01       	movw	r24, r10
    27a6:	b4 01       	movw	r22, r8
    27a8:	07 da       	rcall	.-3058   	; 0x1bb8 <__floatunsisf>
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	c7 01       	movw	r24, r14
    27b0:	b6 01       	movw	r22, r12
    27b2:	31 d9       	rcall	.-3486   	; 0x1a16 <__subsf3>
    27b4:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    27b6:	7c 01       	movw	r14, r24
    27b8:	6e e2       	ldi	r22, 0x2E	; 46
    27ba:	c8 01       	movw	r24, r16
    27bc:	f0 de       	rcall	.-544    	; 0x259e <_ZN5Print5printEc>
    27be:	c8 0f       	add	r28, r24
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    27c0:	d9 1f       	adc	r29, r25
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	c7 01       	movw	r24, r14
    27cc:	b6 01       	movw	r22, r12
    27ce:	d0 da       	rcall	.-2656   	; 0x1d70 <__mulsf3>
    27d0:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    27d2:	5c 01       	movw	r10, r24
    27d4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    27d8:	6b 01       	movw	r12, r22
    n += print(toPrint);
    27da:	7c 01       	movw	r14, r24
    27dc:	4a e0       	ldi	r20, 0x0A	; 10
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	c8 01       	movw	r24, r16
    27e2:	4b df       	rcall	.-362    	; 0x267a <_ZN5Print5printEji>
    remainder -= toPrint; 
    27e4:	c8 0f       	add	r28, r24
    27e6:	d9 1f       	adc	r29, r25
    27e8:	b6 01       	movw	r22, r12
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	e4 d9       	rcall	.-3128   	; 0x1bb8 <__floatunsisf>
    27f0:	9b 01       	movw	r18, r22
    27f2:	ac 01       	movw	r20, r24
    27f4:	c5 01       	movw	r24, r10
    27f6:	b4 01       	movw	r22, r8
    27f8:	0e d9       	rcall	.-3556   	; 0x1a16 <__subsf3>
    27fa:	6b 01       	movw	r12, r22
    27fc:	7c 01       	movw	r14, r24
    27fe:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2800:	71 10       	cpse	r7, r1
    2802:	df cf       	rjmp	.-66     	; 0x27c2 <_ZN5Print10printFloatEdh+0x13e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2804:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	ff 90       	pop	r15
    2810:	ef 90       	pop	r14
    2812:	df 90       	pop	r13
    2814:	cf 90       	pop	r12
    2816:	bf 90       	pop	r11
    2818:	af 90       	pop	r10
    281a:	9f 90       	pop	r9
    281c:	8f 90       	pop	r8
    281e:	7f 90       	pop	r7
    2820:	08 95       	ret

00002822 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2822:	30 cf       	rjmp	.-416    	; 0x2684 <_ZN5Print10printFloatEdh>

00002824 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2824:	08 95       	ret

00002826 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    2826:	1f 92       	push	r1
    2828:	0f 92       	push	r0
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	0b b6       	in	r0, 0x3b	; 59
    2832:	0f 92       	push	r0
    2834:	2f 93       	push	r18
    2836:	3f 93       	push	r19
    2838:	4f 93       	push	r20
    283a:	5f 93       	push	r21
    283c:	6f 93       	push	r22
    283e:	7f 93       	push	r23
    2840:	8f 93       	push	r24
    2842:	9f 93       	push	r25
    2844:	af 93       	push	r26
    2846:	bf 93       	push	r27
    2848:	ef 93       	push	r30
    284a:	ff 93       	push	r31
    284c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    2850:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    2854:	19 95       	eicall
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	0b b6       	in	r0, 0x3b	; 59
    2888:	0f 92       	push	r0
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
    28a2:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    28a6:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    28aa:	19 95       	eicall
    28ac:	ff 91       	pop	r31
    28ae:	ef 91       	pop	r30
    28b0:	bf 91       	pop	r27
    28b2:	af 91       	pop	r26
    28b4:	9f 91       	pop	r25
    28b6:	8f 91       	pop	r24
    28b8:	7f 91       	pop	r23
    28ba:	6f 91       	pop	r22
    28bc:	5f 91       	pop	r21
    28be:	4f 91       	pop	r20
    28c0:	3f 91       	pop	r19
    28c2:	2f 91       	pop	r18
    28c4:	0f 90       	pop	r0
    28c6:	0b be       	out	0x3b, r0	; 59
    28c8:	0f 90       	pop	r0
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	0f 90       	pop	r0
    28ce:	1f 90       	pop	r1
    28d0:	18 95       	reti

000028d2 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    28d2:	1f 92       	push	r1
    28d4:	0f 92       	push	r0
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	0f 92       	push	r0
    28da:	11 24       	eor	r1, r1
    28dc:	0b b6       	in	r0, 0x3b	; 59
    28de:	0f 92       	push	r0
    28e0:	2f 93       	push	r18
    28e2:	3f 93       	push	r19
    28e4:	4f 93       	push	r20
    28e6:	5f 93       	push	r21
    28e8:	6f 93       	push	r22
    28ea:	7f 93       	push	r23
    28ec:	8f 93       	push	r24
    28ee:	9f 93       	push	r25
    28f0:	af 93       	push	r26
    28f2:	bf 93       	push	r27
    28f4:	ef 93       	push	r30
    28f6:	ff 93       	push	r31
    28f8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    28fc:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    2900:	19 95       	eicall
    2902:	ff 91       	pop	r31
    2904:	ef 91       	pop	r30
    2906:	bf 91       	pop	r27
    2908:	af 91       	pop	r26
    290a:	9f 91       	pop	r25
    290c:	8f 91       	pop	r24
    290e:	7f 91       	pop	r23
    2910:	6f 91       	pop	r22
    2912:	5f 91       	pop	r21
    2914:	4f 91       	pop	r20
    2916:	3f 91       	pop	r19
    2918:	2f 91       	pop	r18
    291a:	0f 90       	pop	r0
    291c:	0b be       	out	0x3b, r0	; 59
    291e:	0f 90       	pop	r0
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	0f 90       	pop	r0
    2924:	1f 90       	pop	r1
    2926:	18 95       	reti

00002928 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    2928:	1f 92       	push	r1
    292a:	0f 92       	push	r0
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	0f 92       	push	r0
    2930:	11 24       	eor	r1, r1
    2932:	0b b6       	in	r0, 0x3b	; 59
    2934:	0f 92       	push	r0
    2936:	2f 93       	push	r18
    2938:	3f 93       	push	r19
    293a:	4f 93       	push	r20
    293c:	5f 93       	push	r21
    293e:	6f 93       	push	r22
    2940:	7f 93       	push	r23
    2942:	8f 93       	push	r24
    2944:	9f 93       	push	r25
    2946:	af 93       	push	r26
    2948:	bf 93       	push	r27
    294a:	ef 93       	push	r30
    294c:	ff 93       	push	r31
    294e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    2952:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    2956:	19 95       	eicall
    2958:	ff 91       	pop	r31
    295a:	ef 91       	pop	r30
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	9f 91       	pop	r25
    2962:	8f 91       	pop	r24
    2964:	7f 91       	pop	r23
    2966:	6f 91       	pop	r22
    2968:	5f 91       	pop	r21
    296a:	4f 91       	pop	r20
    296c:	3f 91       	pop	r19
    296e:	2f 91       	pop	r18
    2970:	0f 90       	pop	r0
    2972:	0b be       	out	0x3b, r0	; 59
    2974:	0f 90       	pop	r0
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	0f 90       	pop	r0
    297a:	1f 90       	pop	r1
    297c:	18 95       	reti

0000297e <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    297e:	1f 92       	push	r1
    2980:	0f 92       	push	r0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	0f 92       	push	r0
    2986:	11 24       	eor	r1, r1
    2988:	0b b6       	in	r0, 0x3b	; 59
    298a:	0f 92       	push	r0
    298c:	2f 93       	push	r18
    298e:	3f 93       	push	r19
    2990:	4f 93       	push	r20
    2992:	5f 93       	push	r21
    2994:	6f 93       	push	r22
    2996:	7f 93       	push	r23
    2998:	8f 93       	push	r24
    299a:	9f 93       	push	r25
    299c:	af 93       	push	r26
    299e:	bf 93       	push	r27
    29a0:	ef 93       	push	r30
    29a2:	ff 93       	push	r31
    29a4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    29a8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    29ac:	19 95       	eicall
    29ae:	ff 91       	pop	r31
    29b0:	ef 91       	pop	r30
    29b2:	bf 91       	pop	r27
    29b4:	af 91       	pop	r26
    29b6:	9f 91       	pop	r25
    29b8:	8f 91       	pop	r24
    29ba:	7f 91       	pop	r23
    29bc:	6f 91       	pop	r22
    29be:	5f 91       	pop	r21
    29c0:	4f 91       	pop	r20
    29c2:	3f 91       	pop	r19
    29c4:	2f 91       	pop	r18
    29c6:	0f 90       	pop	r0
    29c8:	0b be       	out	0x3b, r0	; 59
    29ca:	0f 90       	pop	r0
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	0f 90       	pop	r0
    29d0:	1f 90       	pop	r1
    29d2:	18 95       	reti

000029d4 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    29d4:	1f 92       	push	r1
    29d6:	0f 92       	push	r0
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	0f 92       	push	r0
    29dc:	11 24       	eor	r1, r1
    29de:	0b b6       	in	r0, 0x3b	; 59
    29e0:	0f 92       	push	r0
    29e2:	2f 93       	push	r18
    29e4:	3f 93       	push	r19
    29e6:	4f 93       	push	r20
    29e8:	5f 93       	push	r21
    29ea:	6f 93       	push	r22
    29ec:	7f 93       	push	r23
    29ee:	8f 93       	push	r24
    29f0:	9f 93       	push	r25
    29f2:	af 93       	push	r26
    29f4:	bf 93       	push	r27
    29f6:	ef 93       	push	r30
    29f8:	ff 93       	push	r31
    29fa:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    29fe:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    2a02:	19 95       	eicall
    2a04:	ff 91       	pop	r31
    2a06:	ef 91       	pop	r30
    2a08:	bf 91       	pop	r27
    2a0a:	af 91       	pop	r26
    2a0c:	9f 91       	pop	r25
    2a0e:	8f 91       	pop	r24
    2a10:	7f 91       	pop	r23
    2a12:	6f 91       	pop	r22
    2a14:	5f 91       	pop	r21
    2a16:	4f 91       	pop	r20
    2a18:	3f 91       	pop	r19
    2a1a:	2f 91       	pop	r18
    2a1c:	0f 90       	pop	r0
    2a1e:	0b be       	out	0x3b, r0	; 59
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	0f 90       	pop	r0
    2a26:	1f 90       	pop	r1
    2a28:	18 95       	reti

00002a2a <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	0b b6       	in	r0, 0x3b	; 59
    2a36:	0f 92       	push	r0
    2a38:	2f 93       	push	r18
    2a3a:	3f 93       	push	r19
    2a3c:	4f 93       	push	r20
    2a3e:	5f 93       	push	r21
    2a40:	6f 93       	push	r22
    2a42:	7f 93       	push	r23
    2a44:	8f 93       	push	r24
    2a46:	9f 93       	push	r25
    2a48:	af 93       	push	r26
    2a4a:	bf 93       	push	r27
    2a4c:	ef 93       	push	r30
    2a4e:	ff 93       	push	r31
    2a50:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    2a54:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    2a58:	19 95       	eicall
    2a5a:	ff 91       	pop	r31
    2a5c:	ef 91       	pop	r30
    2a5e:	bf 91       	pop	r27
    2a60:	af 91       	pop	r26
    2a62:	9f 91       	pop	r25
    2a64:	8f 91       	pop	r24
    2a66:	7f 91       	pop	r23
    2a68:	6f 91       	pop	r22
    2a6a:	5f 91       	pop	r21
    2a6c:	4f 91       	pop	r20
    2a6e:	3f 91       	pop	r19
    2a70:	2f 91       	pop	r18
    2a72:	0f 90       	pop	r0
    2a74:	0b be       	out	0x3b, r0	; 59
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	0b b6       	in	r0, 0x3b	; 59
    2a8c:	0f 92       	push	r0
    2a8e:	2f 93       	push	r18
    2a90:	3f 93       	push	r19
    2a92:	4f 93       	push	r20
    2a94:	5f 93       	push	r21
    2a96:	6f 93       	push	r22
    2a98:	7f 93       	push	r23
    2a9a:	8f 93       	push	r24
    2a9c:	9f 93       	push	r25
    2a9e:	af 93       	push	r26
    2aa0:	bf 93       	push	r27
    2aa2:	ef 93       	push	r30
    2aa4:	ff 93       	push	r31
    2aa6:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    2aaa:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    2aae:	19 95       	eicall
    2ab0:	ff 91       	pop	r31
    2ab2:	ef 91       	pop	r30
    2ab4:	bf 91       	pop	r27
    2ab6:	af 91       	pop	r26
    2ab8:	9f 91       	pop	r25
    2aba:	8f 91       	pop	r24
    2abc:	7f 91       	pop	r23
    2abe:	6f 91       	pop	r22
    2ac0:	5f 91       	pop	r21
    2ac2:	4f 91       	pop	r20
    2ac4:	3f 91       	pop	r19
    2ac6:	2f 91       	pop	r18
    2ac8:	0f 90       	pop	r0
    2aca:	0b be       	out	0x3b, r0	; 59
    2acc:	0f 90       	pop	r0
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	0f 90       	pop	r0
    2ad2:	1f 90       	pop	r1
    2ad4:	18 95       	reti

00002ad6 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2ad6:	1f 92       	push	r1
    2ad8:	0f 92       	push	r0
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	0f 92       	push	r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	2f 93       	push	r18
    2ae2:	3f 93       	push	r19
    2ae4:	8f 93       	push	r24
    2ae6:	9f 93       	push	r25
    2ae8:	af 93       	push	r26
    2aea:	bf 93       	push	r27
    2aec:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <timer0_millis>
    2af0:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <timer0_millis+0x1>
    2af4:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <timer0_millis+0x2>
    2af8:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <timer0_millis+0x3>
    2afc:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <timer0_fract>
    2b00:	23 e0       	ldi	r18, 0x03	; 3
    2b02:	23 0f       	add	r18, r19
    2b04:	2d 37       	cpi	r18, 0x7D	; 125
    2b06:	20 f4       	brcc	.+8      	; 0x2b10 <__vector_23+0x3a>
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	a1 1d       	adc	r26, r1
    2b0c:	b1 1d       	adc	r27, r1
    2b0e:	05 c0       	rjmp	.+10     	; 0x2b1a <__vector_23+0x44>
    2b10:	26 e8       	ldi	r18, 0x86	; 134
    2b12:	23 0f       	add	r18, r19
    2b14:	02 96       	adiw	r24, 0x02	; 2
    2b16:	a1 1d       	adc	r26, r1
    2b18:	b1 1d       	adc	r27, r1
    2b1a:	20 93 c6 06 	sts	0x06C6, r18	; 0x8006c6 <timer0_fract>
    2b1e:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <timer0_millis>
    2b22:	90 93 c8 06 	sts	0x06C8, r25	; 0x8006c8 <timer0_millis+0x1>
    2b26:	a0 93 c9 06 	sts	0x06C9, r26	; 0x8006c9 <timer0_millis+0x2>
    2b2a:	b0 93 ca 06 	sts	0x06CA, r27	; 0x8006ca <timer0_millis+0x3>
    2b2e:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <timer0_overflow_count>
    2b32:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <timer0_overflow_count+0x1>
    2b36:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <timer0_overflow_count+0x2>
    2b3a:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <timer0_overflow_count+0x3>
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	a1 1d       	adc	r26, r1
    2b42:	b1 1d       	adc	r27, r1
    2b44:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <timer0_overflow_count>
    2b48:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <timer0_overflow_count+0x1>
    2b4c:	a0 93 cd 06 	sts	0x06CD, r26	; 0x8006cd <timer0_overflow_count+0x2>
    2b50:	b0 93 ce 06 	sts	0x06CE, r27	; 0x8006ce <timer0_overflow_count+0x3>
    2b54:	bf 91       	pop	r27
    2b56:	af 91       	pop	r26
    2b58:	9f 91       	pop	r25
    2b5a:	8f 91       	pop	r24
    2b5c:	3f 91       	pop	r19
    2b5e:	2f 91       	pop	r18
    2b60:	0f 90       	pop	r0
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	0f 90       	pop	r0
    2b66:	1f 90       	pop	r1
    2b68:	18 95       	reti

00002b6a <millis>:
    2b6a:	2f b7       	in	r18, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	60 91 c7 06 	lds	r22, 0x06C7	; 0x8006c7 <timer0_millis>
    2b72:	70 91 c8 06 	lds	r23, 0x06C8	; 0x8006c8 <timer0_millis+0x1>
    2b76:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <timer0_millis+0x2>
    2b7a:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <timer0_millis+0x3>
    2b7e:	2f bf       	out	0x3f, r18	; 63
    2b80:	08 95       	ret

00002b82 <micros>:
    2b82:	3f b7       	in	r19, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <timer0_overflow_count>
    2b8a:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <timer0_overflow_count+0x1>
    2b8e:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <timer0_overflow_count+0x2>
    2b92:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <timer0_overflow_count+0x3>
    2b96:	26 b5       	in	r18, 0x26	; 38
    2b98:	a8 9b       	sbis	0x15, 0	; 21
    2b9a:	05 c0       	rjmp	.+10     	; 0x2ba6 <micros+0x24>
    2b9c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b9e:	19 f0       	breq	.+6      	; 0x2ba6 <micros+0x24>
    2ba0:	01 96       	adiw	r24, 0x01	; 1
    2ba2:	a1 1d       	adc	r26, r1
    2ba4:	b1 1d       	adc	r27, r1
    2ba6:	3f bf       	out	0x3f, r19	; 63
    2ba8:	ba 2f       	mov	r27, r26
    2baa:	a9 2f       	mov	r26, r25
    2bac:	98 2f       	mov	r25, r24
    2bae:	88 27       	eor	r24, r24
    2bb0:	82 0f       	add	r24, r18
    2bb2:	91 1d       	adc	r25, r1
    2bb4:	a1 1d       	adc	r26, r1
    2bb6:	b1 1d       	adc	r27, r1
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	42 e0       	ldi	r20, 0x02	; 2
    2bbe:	66 0f       	add	r22, r22
    2bc0:	77 1f       	adc	r23, r23
    2bc2:	88 1f       	adc	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	4a 95       	dec	r20
    2bc8:	d1 f7       	brne	.-12     	; 0x2bbe <micros+0x3c>
    2bca:	08 95       	ret

00002bcc <delay>:
    2bcc:	8f 92       	push	r8
    2bce:	9f 92       	push	r9
    2bd0:	af 92       	push	r10
    2bd2:	bf 92       	push	r11
    2bd4:	cf 92       	push	r12
    2bd6:	df 92       	push	r13
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	6b 01       	movw	r12, r22
    2bde:	7c 01       	movw	r14, r24
    2be0:	d0 df       	rcall	.-96     	; 0x2b82 <micros>
    2be2:	4b 01       	movw	r8, r22
    2be4:	5c 01       	movw	r10, r24
    2be6:	c1 14       	cp	r12, r1
    2be8:	d1 04       	cpc	r13, r1
    2bea:	e1 04       	cpc	r14, r1
    2bec:	f1 04       	cpc	r15, r1
    2bee:	f9 f0       	breq	.+62     	; 0x2c2e <delay+0x62>
    2bf0:	0e 94 5d 21 	call	0x42ba	; 0x42ba <yield>
    2bf4:	c6 df       	rcall	.-116    	; 0x2b82 <micros>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	88 19       	sub	r24, r8
    2bfc:	99 09       	sbc	r25, r9
    2bfe:	aa 09       	sbc	r26, r10
    2c00:	bb 09       	sbc	r27, r11
    2c02:	88 3e       	cpi	r24, 0xE8	; 232
    2c04:	93 40       	sbci	r25, 0x03	; 3
    2c06:	a1 05       	cpc	r26, r1
    2c08:	b1 05       	cpc	r27, r1
    2c0a:	68 f3       	brcs	.-38     	; 0x2be6 <delay+0x1a>
    2c0c:	21 e0       	ldi	r18, 0x01	; 1
    2c0e:	c2 1a       	sub	r12, r18
    2c10:	d1 08       	sbc	r13, r1
    2c12:	e1 08       	sbc	r14, r1
    2c14:	f1 08       	sbc	r15, r1
    2c16:	88 ee       	ldi	r24, 0xE8	; 232
    2c18:	88 0e       	add	r8, r24
    2c1a:	83 e0       	ldi	r24, 0x03	; 3
    2c1c:	98 1e       	adc	r9, r24
    2c1e:	a1 1c       	adc	r10, r1
    2c20:	b1 1c       	adc	r11, r1
    2c22:	c1 14       	cp	r12, r1
    2c24:	d1 04       	cpc	r13, r1
    2c26:	e1 04       	cpc	r14, r1
    2c28:	f1 04       	cpc	r15, r1
    2c2a:	21 f7       	brne	.-56     	; 0x2bf4 <delay+0x28>
    2c2c:	dc cf       	rjmp	.-72     	; 0x2be6 <delay+0x1a>
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	df 90       	pop	r13
    2c34:	cf 90       	pop	r12
    2c36:	bf 90       	pop	r11
    2c38:	af 90       	pop	r10
    2c3a:	9f 90       	pop	r9
    2c3c:	8f 90       	pop	r8
    2c3e:	08 95       	ret

00002c40 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c40:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c42:	84 b5       	in	r24, 0x24	; 36
    2c44:	82 60       	ori	r24, 0x02	; 2
    2c46:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c48:	84 b5       	in	r24, 0x24	; 36
    2c4a:	81 60       	ori	r24, 0x01	; 1
    2c4c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2c4e:	85 b5       	in	r24, 0x25	; 37
    2c50:	82 60       	ori	r24, 0x02	; 2
    2c52:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2c54:	85 b5       	in	r24, 0x25	; 37
    2c56:	81 60       	ori	r24, 0x01	; 1
    2c58:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2c5a:	ee e6       	ldi	r30, 0x6E	; 110
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	81 60       	ori	r24, 0x01	; 1
    2c62:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2c64:	e1 e8       	ldi	r30, 0x81	; 129
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2c6a:	80 81       	ld	r24, Z
    2c6c:	82 60       	ori	r24, 0x02	; 2
    2c6e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2c70:	80 81       	ld	r24, Z
    2c72:	81 60       	ori	r24, 0x01	; 1
    2c74:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2c76:	e0 e8       	ldi	r30, 0x80	; 128
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	81 60       	ori	r24, 0x01	; 1
    2c7e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2c80:	e1 eb       	ldi	r30, 0xB1	; 177
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	84 60       	ori	r24, 0x04	; 4
    2c88:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2c8a:	e0 eb       	ldi	r30, 0xB0	; 176
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	81 60       	ori	r24, 0x01	; 1
    2c92:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2c94:	e1 e9       	ldi	r30, 0x91	; 145
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	82 60       	ori	r24, 0x02	; 2
    2c9c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2c9e:	80 81       	ld	r24, Z
    2ca0:	81 60       	ori	r24, 0x01	; 1
    2ca2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2ca4:	e0 e9       	ldi	r30, 0x90	; 144
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	81 60       	ori	r24, 0x01	; 1
    2cac:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2cae:	e1 ea       	ldi	r30, 0xA1	; 161
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2cb8:	80 81       	ld	r24, Z
    2cba:	81 60       	ori	r24, 0x01	; 1
    2cbc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2cbe:	e0 ea       	ldi	r30, 0xA0	; 160
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	81 60       	ori	r24, 0x01	; 1
    2cc6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2cc8:	e1 e2       	ldi	r30, 0x21	; 33
    2cca:	f1 e0       	ldi	r31, 0x01	; 1
    2ccc:	80 81       	ld	r24, Z
    2cce:	82 60       	ori	r24, 0x02	; 2
    2cd0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2cd2:	80 81       	ld	r24, Z
    2cd4:	81 60       	ori	r24, 0x01	; 1
    2cd6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2cd8:	e0 e2       	ldi	r30, 0x20	; 32
    2cda:	f1 e0       	ldi	r31, 0x01	; 1
    2cdc:	80 81       	ld	r24, Z
    2cde:	81 60       	ori	r24, 0x01	; 1
    2ce0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2ce2:	ea e7       	ldi	r30, 0x7A	; 122
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	84 60       	ori	r24, 0x04	; 4
    2cea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2cec:	80 81       	ld	r24, Z
    2cee:	82 60       	ori	r24, 0x02	; 2
    2cf0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2cf2:	80 81       	ld	r24, Z
    2cf4:	81 60       	ori	r24, 0x01	; 1
    2cf6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 68       	ori	r24, 0x80	; 128
    2cfc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2cfe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2d02:	08 95       	ret

00002d04 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	fc 01       	movw	r30, r24
    2d08:	31 97       	sbiw	r30, 0x01	; 1
    2d0a:	e2 31       	cpi	r30, 0x12	; 18
    2d0c:	f1 05       	cpc	r31, r1
    2d0e:	08 f0       	brcs	.+2      	; 0x2d12 <turnOffPWM+0xe>
    2d10:	4e c0       	rjmp	.+156    	; 0x2dae <turnOffPWM+0xaa>
    2d12:	88 27       	eor	r24, r24
    2d14:	ed 54       	subi	r30, 0x4D	; 77
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	8f 4f       	sbci	r24, 0xFF	; 255
    2d1a:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d1e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2d22:	8f 77       	andi	r24, 0x7F	; 127
    2d24:	03 c0       	rjmp	.+6      	; 0x2d2c <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d26:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2d2a:	8f 7d       	andi	r24, 0xDF	; 223
    2d2c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2d30:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2d32:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2d36:	87 7f       	andi	r24, 0xF7	; 247
    2d38:	f9 cf       	rjmp	.-14     	; 0x2d2c <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d3a:	84 b5       	in	r24, 0x24	; 36
    2d3c:	8f 77       	andi	r24, 0x7F	; 127
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d40:	84 b5       	in	r24, 0x24	; 36
    2d42:	8f 7d       	andi	r24, 0xDF	; 223
    2d44:	84 bd       	out	0x24, r24	; 36
    2d46:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2d4c:	8f 77       	andi	r24, 0x7F	; 127
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d50:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2d54:	8f 7d       	andi	r24, 0xDF	; 223
    2d56:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2d5a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2d5c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2d60:	8f 77       	andi	r24, 0x7F	; 127
    2d62:	07 c0       	rjmp	.+14     	; 0x2d72 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2d64:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2d68:	8f 7d       	andi	r24, 0xDF	; 223
    2d6a:	03 c0       	rjmp	.+6      	; 0x2d72 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2d6c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2d70:	87 7f       	andi	r24, 0xF7	; 247
    2d72:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2d76:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2d78:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2d7c:	8f 77       	andi	r24, 0x7F	; 127
    2d7e:	07 c0       	rjmp	.+14     	; 0x2d8e <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2d80:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2d84:	8f 7d       	andi	r24, 0xDF	; 223
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2d88:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2d8c:	87 7f       	andi	r24, 0xF7	; 247
    2d8e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2d92:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2d94:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2d98:	8f 77       	andi	r24, 0x7F	; 127
    2d9a:	07 c0       	rjmp	.+14     	; 0x2daa <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2d9c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2da0:	8f 7d       	andi	r24, 0xDF	; 223
    2da2:	03 c0       	rjmp	.+6      	; 0x2daa <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2da4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2da8:	87 7f       	andi	r24, 0xF7	; 247
    2daa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2dae:	08 95       	ret

00002db0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	fc 01       	movw	r30, r24
    2db8:	e0 53       	subi	r30, 0x30	; 48
    2dba:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ea 5e       	subi	r30, 0xEA	; 234
    2dc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2dc6:	88 23       	and	r24, r24
    2dc8:	61 f1       	breq	.+88     	; 0x2e22 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e0 57       	subi	r30, 0x70	; 112
    2dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd6:	c5 91       	lpm	r28, Z+
    2dd8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2dda:	fc 01       	movw	r30, r24
    2ddc:	ea 58       	subi	r30, 0x8A	; 138
    2dde:	fd 4f       	sbci	r31, 0xFD	; 253
    2de0:	a5 91       	lpm	r26, Z+
    2de2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2de4:	61 11       	cpse	r22, r1
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2de8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2dea:	f8 94       	cli
		*reg &= ~bit;
    2dec:	88 81       	ld	r24, Y
    2dee:	20 95       	com	r18
    2df0:	82 23       	and	r24, r18
    2df2:	88 83       	st	Y, r24
		*out &= ~bit;
    2df4:	ec 91       	ld	r30, X
    2df6:	2e 23       	and	r18, r30
    2df8:	0b c0       	rjmp	.+22     	; 0x2e10 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2dfa:	62 30       	cpi	r22, 0x02	; 2
    2dfc:	61 f4       	brne	.+24     	; 0x2e16 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2dfe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2e00:	f8 94       	cli
		*reg &= ~bit;
    2e02:	88 81       	ld	r24, Y
    2e04:	32 2f       	mov	r19, r18
    2e06:	30 95       	com	r19
    2e08:	83 23       	and	r24, r19
    2e0a:	88 83       	st	Y, r24
		*out |= bit;
    2e0c:	ec 91       	ld	r30, X
    2e0e:	2e 2b       	or	r18, r30
    2e10:	2c 93       	st	X, r18
		SREG = oldSREG;
    2e12:	9f bf       	out	0x3f, r25	; 63
    2e14:	06 c0       	rjmp	.+12     	; 0x2e22 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2e16:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2e18:	f8 94       	cli
		*reg |= bit;
    2e1a:	e8 81       	ld	r30, Y
    2e1c:	2e 2b       	or	r18, r30
    2e1e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2e20:	8f bf       	out	0x3f, r24	; 63
	}
}
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	08 95       	ret

00002e28 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	f9 01       	movw	r30, r18
    2e34:	e6 57       	subi	r30, 0x76	; 118
    2e36:	fe 4f       	sbci	r31, 0xFE	; 254
    2e38:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2e3a:	f9 01       	movw	r30, r18
    2e3c:	e0 53       	subi	r30, 0x30	; 48
    2e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e40:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2e42:	f9 01       	movw	r30, r18
    2e44:	ea 5e       	subi	r30, 0xEA	; 234
    2e46:	fd 4f       	sbci	r31, 0xFD	; 253
    2e48:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2e4a:	cc 23       	and	r28, r28
    2e4c:	b9 f0       	breq	.+46     	; 0x2e7c <digitalWrite+0x54>
    2e4e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e50:	81 11       	cpse	r24, r1
    2e52:	58 df       	rcall	.-336    	; 0x2d04 <turnOffPWM>

	out = portOutputRegister(port);
    2e54:	ec 2f       	mov	r30, r28
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	ee 0f       	add	r30, r30
    2e5a:	ff 1f       	adc	r31, r31
    2e5c:	ea 58       	subi	r30, 0x8A	; 138
    2e5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e60:	a5 91       	lpm	r26, Z+
    2e62:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2e64:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2e66:	f8 94       	cli

	if (val == LOW) {
    2e68:	11 11       	cpse	r17, r1
    2e6a:	04 c0       	rjmp	.+8      	; 0x2e74 <digitalWrite+0x4c>
		*out &= ~bit;
    2e6c:	8c 91       	ld	r24, X
    2e6e:	d0 95       	com	r29
    2e70:	d8 23       	and	r29, r24
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <digitalWrite+0x50>
	} else {
		*out |= bit;
    2e74:	ec 91       	ld	r30, X
    2e76:	de 2b       	or	r29, r30
    2e78:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2e7a:	9f bf       	out	0x3f, r25	; 63
}
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	08 95       	ret

00002e84 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	f9 01       	movw	r30, r18
    2e8e:	e6 57       	subi	r30, 0x76	; 118
    2e90:	fe 4f       	sbci	r31, 0xFE	; 254
    2e92:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2e94:	f9 01       	movw	r30, r18
    2e96:	e0 53       	subi	r30, 0x30	; 48
    2e98:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2e9c:	f9 01       	movw	r30, r18
    2e9e:	ea 5e       	subi	r30, 0xEA	; 234
    2ea0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2ea4:	cc 23       	and	r28, r28
    2ea6:	89 f0       	breq	.+34     	; 0x2eca <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2ea8:	81 11       	cpse	r24, r1
    2eaa:	2c df       	rcall	.-424    	; 0x2d04 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2eac:	ec 2f       	mov	r30, r28
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	ee 0f       	add	r30, r30
    2eb2:	ff 1f       	adc	r31, r31
    2eb4:	e4 5a       	subi	r30, 0xA4	; 164
    2eb6:	fd 4f       	sbci	r31, 0xFD	; 253
    2eb8:	a5 91       	lpm	r26, Z+
    2eba:	b4 91       	lpm	r27, Z
    2ebc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2ebe:	ed 23       	and	r30, r29
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	21 f4       	brne	.+8      	; 0x2ece <digitalRead+0x4a>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <digitalRead+0x4a>
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	0c 94 23 24 	jmp	0x4846	; 0x4846 <free>

00002ede <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2ee4:	88 81       	ld	r24, Y
    2ee6:	99 81       	ldd	r25, Y+1	; 0x01
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	11 f0       	breq	.+4      	; 0x2ef0 <_ZN6String10invalidateEv+0x12>
    2eec:	0e 94 23 24 	call	0x4846	; 0x4846 <free>
	buffer = NULL;
    2ef0:	19 82       	std	Y+1, r1	; 0x01
    2ef2:	18 82       	st	Y, r1
	capacity = len = 0;
    2ef4:	1d 82       	std	Y+5, r1	; 0x05
    2ef6:	1c 82       	std	Y+4, r1	; 0x04
    2ef8:	1b 82       	std	Y+3, r1	; 0x03
    2efa:	1a 82       	std	Y+2, r1	; 0x02
}
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	ec 01       	movw	r28, r24
    2f0c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2f0e:	6f 5f       	subi	r22, 0xFF	; 255
    2f10:	7f 4f       	sbci	r23, 0xFF	; 255
    2f12:	88 81       	ld	r24, Y
    2f14:	99 81       	ldd	r25, Y+1	; 0x01
    2f16:	0e 94 ac 24 	call	0x4958	; 0x4958 <realloc>
	if (newbuffer) {
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	31 f0       	breq	.+12     	; 0x2f2a <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2f1e:	99 83       	std	Y+1, r25	; 0x01
    2f20:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2f22:	1b 83       	std	Y+3, r17	; 0x03
    2f24:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	08 95       	ret

00002f36 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2f3c:	88 81       	ld	r24, Y
    2f3e:	99 81       	ldd	r25, Y+1	; 0x01
    2f40:	89 2b       	or	r24, r25
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <_ZN6String7reserveEj+0x18>
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	86 17       	cp	r24, r22
    2f4a:	97 07       	cpc	r25, r23
    2f4c:	58 f4       	brcc	.+22     	; 0x2f64 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    2f4e:	ce 01       	movw	r24, r28
    2f50:	d8 df       	rcall	.-80     	; 0x2f02 <_ZN6String12changeBufferEj>
    2f52:	88 23       	and	r24, r24
    2f54:	41 f0       	breq	.+16     	; 0x2f66 <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5a:	89 2b       	or	r24, r25
    2f5c:	19 f4       	brne	.+6      	; 0x2f64 <_ZN6String7reserveEj+0x2e>
    2f5e:	e8 81       	ld	r30, Y
    2f60:	f9 81       	ldd	r31, Y+1	; 0x01
    2f62:	10 82       	st	Z, r1
    2f64:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	08 95       	ret

00002f6c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2f6c:	ef 92       	push	r14
    2f6e:	ff 92       	push	r15
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	ec 01       	movw	r28, r24
    2f7a:	7b 01       	movw	r14, r22
    2f7c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2f7e:	ba 01       	movw	r22, r20
    2f80:	da df       	rcall	.-76     	; 0x2f36 <_ZN6String7reserveEj>
    2f82:	81 11       	cpse	r24, r1
    2f84:	03 c0       	rjmp	.+6      	; 0x2f8c <_ZN6String4copyEPKcj+0x20>
		invalidate();
    2f86:	ce 01       	movw	r24, r28
    2f88:	aa df       	rcall	.-172    	; 0x2ede <_ZN6String10invalidateEv>
		return *this;
    2f8a:	07 c0       	rjmp	.+14     	; 0x2f9a <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    2f8c:	1d 83       	std	Y+5, r17	; 0x05
    2f8e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2f90:	b7 01       	movw	r22, r14
    2f92:	88 81       	ld	r24, Y
    2f94:	99 81       	ldd	r25, Y+1	; 0x01
    2f96:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <strcpy>
	return *this;
}
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	08 95       	ret

00002faa <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2faa:	fc 01       	movw	r30, r24
    2fac:	11 82       	std	Z+1, r1	; 0x01
    2fae:	10 82       	st	Z, r1
	capacity = 0;
    2fb0:	13 82       	std	Z+3, r1	; 0x03
    2fb2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2fb4:	15 82       	std	Z+5, r1	; 0x05
    2fb6:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2fb8:	61 15       	cp	r22, r1
    2fba:	71 05       	cpc	r23, r1
    2fbc:	49 f0       	breq	.+18     	; 0x2fd0 <_ZN6StringC1EPKc+0x26>
    2fbe:	fb 01       	movw	r30, r22
    2fc0:	01 90       	ld	r0, Z+
    2fc2:	00 20       	and	r0, r0
    2fc4:	e9 f7       	brne	.-6      	; 0x2fc0 <_ZN6StringC1EPKc+0x16>
    2fc6:	31 97       	sbiw	r30, 0x01	; 1
    2fc8:	af 01       	movw	r20, r30
    2fca:	46 1b       	sub	r20, r22
    2fcc:	57 0b       	sbc	r21, r23
    2fce:	ce cf       	rjmp	.-100    	; 0x2f6c <_ZN6String4copyEPKcj>
    2fd0:	08 95       	ret

00002fd2 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	1f 92       	push	r1
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	69 83       	std	Y+1, r22	; 0x01
    2fde:	dc 01       	movw	r26, r24
    2fe0:	ed 91       	ld	r30, X+
    2fe2:	fc 91       	ld	r31, X
    2fe4:	02 80       	ldd	r0, Z+2	; 0x02
    2fe6:	f3 81       	ldd	r31, Z+3	; 0x03
    2fe8:	e0 2d       	mov	r30, r0
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	be 01       	movw	r22, r28
    2ff0:	6f 5f       	subi	r22, 0xFF	; 255
    2ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff4:	19 95       	eicall
    2ff6:	0f 90       	pop	r0
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	08 95       	ret

00002ffe <_ZN5SDLib4File5writeEPKhj>:
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	ec 01       	movw	r28, r24
    3004:	89 8d       	ldd	r24, Y+25	; 0x19
    3006:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	39 f4       	brne	.+14     	; 0x301a <_ZN5SDLib4File5writeEPKhj+0x1c>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9b 83       	std	Y+3, r25	; 0x03
    3012:	8a 83       	std	Y+2, r24	; 0x02
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0a c0       	rjmp	.+20     	; 0x302e <_ZN5SDLib4File5writeEPKhj+0x30>
    301a:	fc 01       	movw	r30, r24
    301c:	13 82       	std	Z+3, r1	; 0x03
    301e:	12 82       	std	Z+2, r1	; 0x02
    3020:	c7 d4       	rcall	.+2446   	; 0x39b0 <_ZN6SdFile5writeEPKvj>
    3022:	e9 8d       	ldd	r30, Y+25	; 0x19
    3024:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3026:	22 81       	ldd	r18, Z+2	; 0x02
    3028:	33 81       	ldd	r19, Z+3	; 0x03
    302a:	23 2b       	or	r18, r19
    302c:	79 f7       	brne	.-34     	; 0x300c <_ZN5SDLib4File5writeEPKhj+0xe>
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	08 95       	ret

00003034 <_ZN5SDLib4File5flushEv>:
    3034:	fc 01       	movw	r30, r24
    3036:	81 8d       	ldd	r24, Z+25	; 0x19
    3038:	92 8d       	ldd	r25, Z+26	; 0x1a
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	09 f0       	breq	.+2      	; 0x3040 <_ZN5SDLib4File5flushEv+0xc>
    303e:	73 c4       	rjmp	.+2278   	; 0x3926 <_ZN6SdFile4syncEv>
    3040:	08 95       	ret

00003042 <_ZN6SdFile4readEv>:
    3042:	cf 93       	push	r28
    3044:	df 93       	push	r29
    3046:	1f 92       	push	r1
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	be 01       	movw	r22, r28
    3052:	6f 5f       	subi	r22, 0xFF	; 255
    3054:	7f 4f       	sbci	r23, 0xFF	; 255
    3056:	cf d2       	rcall	.+1438   	; 0x35f6 <_ZN6SdFile4readEPvj>
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	19 f4       	brne	.+6      	; 0x3062 <_ZN6SdFile4readEv+0x20>
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <_ZN6SdFile4readEv+0x24>
    3062:	8f ef       	ldi	r24, 0xFF	; 255
    3064:	9f ef       	ldi	r25, 0xFF	; 255
    3066:	0f 90       	pop	r0
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	08 95       	ret

0000306e <_ZN5SDLib4File4readEv>:
    306e:	fc 01       	movw	r30, r24
    3070:	81 8d       	ldd	r24, Z+25	; 0x19
    3072:	92 8d       	ldd	r25, Z+26	; 0x1a
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	09 f0       	breq	.+2      	; 0x307a <_ZN5SDLib4File4readEv+0xc>
    3078:	e4 cf       	rjmp	.-56     	; 0x3042 <_ZN6SdFile4readEv>
    307a:	8f ef       	ldi	r24, 0xFF	; 255
    307c:	9f ef       	ldi	r25, 0xFF	; 255
    307e:	08 95       	ret

00003080 <_ZN5SDLib4File4peekEv>:
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	fc 01       	movw	r30, r24
    308a:	81 8d       	ldd	r24, Z+25	; 0x19
    308c:	92 8d       	ldd	r25, Z+26	; 0x1a
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	a9 f0       	breq	.+42     	; 0x30bc <_ZN5SDLib4File4peekEv+0x3c>
    3092:	ef 01       	movw	r28, r30
    3094:	d6 df       	rcall	.-84     	; 0x3042 <_ZN6SdFile4readEv>
    3096:	8c 01       	movw	r16, r24
    3098:	0f 3f       	cpi	r16, 0xFF	; 255
    309a:	8f ef       	ldi	r24, 0xFF	; 255
    309c:	18 07       	cpc	r17, r24
    309e:	89 f0       	breq	.+34     	; 0x30c2 <_ZN5SDLib4File4peekEv+0x42>
    30a0:	89 8d       	ldd	r24, Y+25	; 0x19
    30a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30a4:	fc 01       	movw	r30, r24
    30a6:	42 85       	ldd	r20, Z+10	; 0x0a
    30a8:	53 85       	ldd	r21, Z+11	; 0x0b
    30aa:	64 85       	ldd	r22, Z+12	; 0x0c
    30ac:	75 85       	ldd	r23, Z+13	; 0x0d
    30ae:	41 50       	subi	r20, 0x01	; 1
    30b0:	51 09       	sbc	r21, r1
    30b2:	61 09       	sbc	r22, r1
    30b4:	71 09       	sbc	r23, r1
    30b6:	a1 d3       	rcall	.+1858   	; 0x37fa <_ZN6SdFile7seekSetEm>
    30b8:	c8 01       	movw	r24, r16
    30ba:	05 c0       	rjmp	.+10     	; 0x30c6 <_ZN5SDLib4File4peekEv+0x46>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <_ZN5SDLib4File4peekEv+0x46>
    30c2:	8f ef       	ldi	r24, 0xFF	; 255
    30c4:	9f ef       	ldi	r25, 0xFF	; 255
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <_ZN5SDLib4FileC1Ev>:
    30d0:	fc 01       	movw	r30, r24
    30d2:	13 82       	std	Z+3, r1	; 0x03
    30d4:	12 82       	std	Z+2, r1	; 0x02
    30d6:	88 ee       	ldi	r24, 0xE8	; 232
    30d8:	93 e0       	ldi	r25, 0x03	; 3
    30da:	a0 e0       	ldi	r26, 0x00	; 0
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	84 83       	std	Z+4, r24	; 0x04
    30e0:	95 83       	std	Z+5, r25	; 0x05
    30e2:	a6 83       	std	Z+6, r26	; 0x06
    30e4:	b7 83       	std	Z+7, r27	; 0x07
    30e6:	86 e9       	ldi	r24, 0x96	; 150
    30e8:	94 e0       	ldi	r25, 0x04	; 4
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
    30ee:	12 8e       	std	Z+26, r1	; 0x1a
    30f0:	11 8e       	std	Z+25, r1	; 0x19
    30f2:	14 86       	std	Z+12, r1	; 0x0c
    30f4:	08 95       	ret

000030f6 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    30f6:	dc 01       	movw	r26, r24
    30f8:	59 96       	adiw	r26, 0x19	; 25
    30fa:	ed 91       	ld	r30, X+
    30fc:	fc 91       	ld	r31, X
    30fe:	5a 97       	sbiw	r26, 0x1a	; 26
    3100:	30 97       	sbiw	r30, 0x00	; 0
    3102:	29 f0       	breq	.+10     	; 0x310e <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    3104:	62 85       	ldd	r22, Z+10	; 0x0a
    3106:	73 85       	ldd	r23, Z+11	; 0x0b
    3108:	84 85       	ldd	r24, Z+12	; 0x0c
    310a:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    310c:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    310e:	6f ef       	ldi	r22, 0xFF	; 255
    3110:	7f ef       	ldi	r23, 0xFF	; 255
    3112:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    3114:	08 95       	ret

00003116 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    3116:	dc 01       	movw	r26, r24
    3118:	59 96       	adiw	r26, 0x19	; 25
    311a:	ed 91       	ld	r30, X+
    311c:	fc 91       	ld	r31, X
    311e:	5a 97       	sbiw	r26, 0x1a	; 26
    3120:	30 97       	sbiw	r30, 0x00	; 0
    3122:	29 f0       	breq	.+10     	; 0x312e <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    3124:	63 89       	ldd	r22, Z+19	; 0x13
    3126:	74 89       	ldd	r23, Z+20	; 0x14
    3128:	85 89       	ldd	r24, Z+21	; 0x15
    312a:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    312c:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	70 e0       	ldi	r23, 0x00	; 0
    3132:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    3134:	08 95       	ret

00003136 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    3136:	cf 92       	push	r12
    3138:	df 92       	push	r13
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
  if (! _file) return 0;
    3142:	fc 01       	movw	r30, r24
    3144:	21 8d       	ldd	r18, Z+25	; 0x19
    3146:	32 8d       	ldd	r19, Z+26	; 0x1a
    3148:	23 2b       	or	r18, r19
    314a:	c9 f0       	breq	.+50     	; 0x317e <_ZN5SDLib4File9availableEv+0x48>
    314c:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    314e:	e3 df       	rcall	.-58     	; 0x3116 <_ZN5SDLib4File4sizeEv>
    3150:	6b 01       	movw	r12, r22
    3152:	7c 01       	movw	r14, r24
    3154:	ce 01       	movw	r24, r28
    3156:	cf df       	rcall	.-98     	; 0x30f6 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    3158:	a7 01       	movw	r20, r14
    315a:	96 01       	movw	r18, r12
    315c:	26 1b       	sub	r18, r22
    315e:	37 0b       	sbc	r19, r23
    3160:	48 0b       	sbc	r20, r24
    3162:	59 0b       	sbc	r21, r25
    3164:	da 01       	movw	r26, r20
    3166:	c9 01       	movw	r24, r18
    3168:	81 15       	cp	r24, r1
    316a:	30 e8       	ldi	r19, 0x80	; 128
    316c:	93 07       	cpc	r25, r19
    316e:	a1 05       	cpc	r26, r1
    3170:	b1 05       	cpc	r27, r1
    3172:	38 f0       	brcs	.+14     	; 0x3182 <_ZN5SDLib4File9availableEv+0x4c>
    3174:	8f ef       	ldi	r24, 0xFF	; 255
    3176:	9f e7       	ldi	r25, 0x7F	; 127
    3178:	a0 e0       	ldi	r26, 0x00	; 0
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	df 90       	pop	r13
    318c:	cf 90       	pop	r12
    318e:	08 95       	ret

00003190 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    3190:	ef ec       	ldi	r30, 0xCF	; 207
    3192:	f6 e0       	ldi	r31, 0x06	; 6
    3194:	15 82       	std	Z+5, r1	; 0x05
    3196:	16 82       	std	Z+6, r1	; 0x06
    3198:	11 86       	std	Z+9, r1	; 0x09
    319a:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a0 e0       	ldi	r26, 0x00	; 0
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	84 87       	std	Z+12, r24	; 0x0c
    31a6:	95 87       	std	Z+13, r25	; 0x0d
    31a8:	a6 87       	std	Z+14, r26	; 0x0e
    31aa:	b7 87       	std	Z+15, r27	; 0x0f
    31ac:	13 a2       	std	Z+35, r1	; 0x23
    31ae:	15 a6       	std	Z+45, r1	; 0x2d
    31b0:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    31b2:	88 ea       	ldi	r24, 0xA8	; 168
    31b4:	94 e0       	ldi	r25, 0x04	; 4
    31b6:	93 a7       	std	Z+43, r25	; 0x2b
    31b8:	82 a7       	std	Z+42, r24	; 0x2a
    31ba:	17 a6       	std	Z+47, r1	; 0x2f
    31bc:	08 95       	ret

000031be <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    31be:	9f b7       	in	r25, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <_ZN8SPIClass13interruptModeE>
    31c6:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <_ZN8SPIClass13interruptSaveE>
    31ca:	21 30       	cpi	r18, 0x01	; 1
    31cc:	19 f4       	brne	.+6      	; 0x31d4 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    31ce:	8d bb       	out	0x1d, r24	; 29
    31d0:	9f bf       	out	0x3f, r25	; 63
    31d2:	08 95       	ret
    31d4:	8f bf       	out	0x3f, r24	; 63
    31d6:	08 95       	ret

000031d8 <_ZN8SPIClass8transferEh>:
    31d8:	8e bd       	out	0x2e, r24	; 46
    31da:	00 00       	nop
    31dc:	0d b4       	in	r0, 0x2d	; 45
    31de:	07 fe       	sbrs	r0, 7
    31e0:	fd cf       	rjmp	.-6      	; 0x31dc <_ZN8SPIClass8transferEh+0x4>
    31e2:	8e b5       	in	r24, 0x2e	; 46
    31e4:	08 95       	ret

000031e6 <_ZL6spiRecv>:
    31e6:	8f ef       	ldi	r24, 0xFF	; 255
    31e8:	f7 cf       	rjmp	.-18     	; 0x31d8 <_ZN8SPIClass8transferEh>

000031ea <_ZN7Sd2Card14chipSelectHighEv>:
    31ea:	61 e0       	ldi	r22, 0x01	; 1
    31ec:	fc 01       	movw	r30, r24
    31ee:	84 81       	ldd	r24, Z+4	; 0x04
    31f0:	1b de       	rcall	.-970    	; 0x2e28 <digitalWrite>
    31f2:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <_ZL20chip_select_asserted>
    31f6:	88 23       	and	r24, r24
    31f8:	31 f0       	breq	.+12     	; 0x3206 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    31fa:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <_ZL20chip_select_asserted>
    31fe:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_ZN8SPIClass13interruptModeE>
    3202:	81 11       	cpse	r24, r1
    3204:	dc cf       	rjmp	.-72     	; 0x31be <_ZN8SPIClass14endTransactionEv.part.3>
    3206:	08 95       	ret

00003208 <_ZN7Sd2Card13chipSelectLowEv>:
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	ec 01       	movw	r28, r24
    320e:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <_ZL20chip_select_asserted>
    3212:	81 11       	cpse	r24, r1
    3214:	09 c0       	rjmp	.+18     	; 0x3228 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <_ZL20chip_select_asserted>
    321c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <_ZL8settings>
    3220:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <_ZL8settings+0x1>
    3224:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN8SPIClass16beginTransactionE11SPISettings>
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	8c 81       	ldd	r24, Y+4	; 0x04
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	fb cd       	rjmp	.-1034   	; 0x2e28 <digitalWrite>

00003232 <_ZN7Sd2Card7readEndEv>:
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	ec 01       	movw	r28, r24
    3238:	8e 81       	ldd	r24, Y+6	; 0x06
    323a:	88 23       	and	r24, r24
    323c:	79 f0       	breq	.+30     	; 0x325c <_ZN7Sd2Card7readEndEv+0x2a>
    323e:	8f 81       	ldd	r24, Y+7	; 0x07
    3240:	98 85       	ldd	r25, Y+8	; 0x08
    3242:	9c 01       	movw	r18, r24
    3244:	2f 5f       	subi	r18, 0xFF	; 255
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	38 87       	std	Y+8, r19	; 0x08
    324a:	2f 83       	std	Y+7, r18	; 0x07
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	92 40       	sbci	r25, 0x02	; 2
    3250:	10 f4       	brcc	.+4      	; 0x3256 <_ZN7Sd2Card7readEndEv+0x24>
    3252:	c9 df       	rcall	.-110    	; 0x31e6 <_ZL6spiRecv>
    3254:	f4 cf       	rjmp	.-24     	; 0x323e <_ZN7Sd2Card7readEndEv+0xc>
    3256:	ce 01       	movw	r24, r28
    3258:	c8 df       	rcall	.-112    	; 0x31ea <_ZN7Sd2Card14chipSelectHighEv>
    325a:	1e 82       	std	Y+6, r1	; 0x06
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	08 95       	ret

00003262 <_ZN7Sd2Card11waitNotBusyEj>:
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	eb 01       	movw	r28, r22
    326c:	7e dc       	rcall	.-1796   	; 0x2b6a <millis>
    326e:	8b 01       	movw	r16, r22
    3270:	ba df       	rcall	.-140    	; 0x31e6 <_ZL6spiRecv>
    3272:	8f 3f       	cpi	r24, 0xFF	; 255
    3274:	41 f0       	breq	.+16     	; 0x3286 <_ZN7Sd2Card11waitNotBusyEj+0x24>
    3276:	79 dc       	rcall	.-1806   	; 0x2b6a <millis>
    3278:	60 1b       	sub	r22, r16
    327a:	71 0b       	sbc	r23, r17
    327c:	6c 17       	cp	r22, r28
    327e:	7d 07       	cpc	r23, r29
    3280:	b8 f3       	brcs	.-18     	; 0x3270 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <_ZN7Sd2Card11waitNotBusyEj+0x26>
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	08 95       	ret

00003292 <_ZN7Sd2Card11cardCommandEhm>:
    3292:	8f 92       	push	r8
    3294:	9f 92       	push	r9
    3296:	af 92       	push	r10
    3298:	bf 92       	push	r11
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	ec 01       	movw	r28, r24
    32a6:	f6 2e       	mov	r15, r22
    32a8:	49 01       	movw	r8, r18
    32aa:	5a 01       	movw	r10, r20
    32ac:	c2 df       	rcall	.-124    	; 0x3232 <_ZN7Sd2Card7readEndEv>
    32ae:	ce 01       	movw	r24, r28
    32b0:	ab df       	rcall	.-170    	; 0x3208 <_ZN7Sd2Card13chipSelectLowEv>
    32b2:	6c e2       	ldi	r22, 0x2C	; 44
    32b4:	71 e0       	ldi	r23, 0x01	; 1
    32b6:	ce 01       	movw	r24, r28
    32b8:	d4 df       	rcall	.-88     	; 0x3262 <_ZN7Sd2Card11waitNotBusyEj>
    32ba:	8f 2d       	mov	r24, r15
    32bc:	80 64       	ori	r24, 0x40	; 64
    32be:	8c df       	rcall	.-232    	; 0x31d8 <_ZN8SPIClass8transferEh>
    32c0:	08 e1       	ldi	r16, 0x18	; 24
    32c2:	10 e0       	ldi	r17, 0x00	; 0
    32c4:	d5 01       	movw	r26, r10
    32c6:	c4 01       	movw	r24, r8
    32c8:	00 2e       	mov	r0, r16
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <_ZN7Sd2Card11cardCommandEhm+0x42>
    32cc:	b6 95       	lsr	r27
    32ce:	a7 95       	ror	r26
    32d0:	97 95       	ror	r25
    32d2:	87 95       	ror	r24
    32d4:	0a 94       	dec	r0
    32d6:	d2 f7       	brpl	.-12     	; 0x32cc <_ZN7Sd2Card11cardCommandEhm+0x3a>
    32d8:	7f df       	rcall	.-258    	; 0x31d8 <_ZN8SPIClass8transferEh>
    32da:	08 50       	subi	r16, 0x08	; 8
    32dc:	11 09       	sbc	r17, r1
    32de:	08 3f       	cpi	r16, 0xF8	; 248
    32e0:	8f ef       	ldi	r24, 0xFF	; 255
    32e2:	18 07       	cpc	r17, r24
    32e4:	79 f7       	brne	.-34     	; 0x32c4 <_ZN7Sd2Card11cardCommandEhm+0x32>
    32e6:	ff 20       	and	r15, r15
    32e8:	29 f0       	breq	.+10     	; 0x32f4 <_ZN7Sd2Card11cardCommandEhm+0x62>
    32ea:	88 e0       	ldi	r24, 0x08	; 8
    32ec:	f8 12       	cpse	r15, r24
    32ee:	04 c0       	rjmp	.+8      	; 0x32f8 <_ZN7Sd2Card11cardCommandEhm+0x66>
    32f0:	87 e8       	ldi	r24, 0x87	; 135
    32f2:	03 c0       	rjmp	.+6      	; 0x32fa <_ZN7Sd2Card11cardCommandEhm+0x68>
    32f4:	85 e9       	ldi	r24, 0x95	; 149
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <_ZN7Sd2Card11cardCommandEhm+0x68>
    32f8:	8f ef       	ldi	r24, 0xFF	; 255
    32fa:	6e df       	rcall	.-292    	; 0x31d8 <_ZN8SPIClass8transferEh>
    32fc:	10 e0       	ldi	r17, 0x00	; 0
    32fe:	73 df       	rcall	.-282    	; 0x31e6 <_ZL6spiRecv>
    3300:	8a 87       	std	Y+10, r24	; 0x0a
    3302:	87 ff       	sbrs	r24, 7
    3304:	04 c0       	rjmp	.+8      	; 0x330e <_ZN7Sd2Card11cardCommandEhm+0x7c>
    3306:	1f 3f       	cpi	r17, 0xFF	; 255
    3308:	11 f0       	breq	.+4      	; 0x330e <_ZN7Sd2Card11cardCommandEhm+0x7c>
    330a:	1f 5f       	subi	r17, 0xFF	; 255
    330c:	f8 cf       	rjmp	.-16     	; 0x32fe <_ZN7Sd2Card11cardCommandEhm+0x6c>
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	bf 90       	pop	r11
    331a:	af 90       	pop	r10
    331c:	9f 90       	pop	r9
    331e:	8f 90       	pop	r8
    3320:	08 95       	ret

00003322 <_ZN7Sd2Card14waitStartBlockEv>:
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	ec 01       	movw	r28, r24
    332c:	1e dc       	rcall	.-1988   	; 0x2b6a <millis>
    332e:	8b 01       	movw	r16, r22
    3330:	5a df       	rcall	.-332    	; 0x31e6 <_ZL6spiRecv>
    3332:	8a 87       	std	Y+10, r24	; 0x0a
    3334:	8f 3f       	cpi	r24, 0xFF	; 255
    3336:	41 f4       	brne	.+16     	; 0x3348 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    3338:	18 dc       	rcall	.-2000   	; 0x2b6a <millis>
    333a:	60 1b       	sub	r22, r16
    333c:	71 0b       	sbc	r23, r17
    333e:	6d 32       	cpi	r22, 0x2D	; 45
    3340:	71 40       	sbci	r23, 0x01	; 1
    3342:	b0 f3       	brcs	.-20     	; 0x3330 <_ZN7Sd2Card14waitStartBlockEv+0xe>
    3344:	8f e0       	ldi	r24, 0x0F	; 15
    3346:	03 c0       	rjmp	.+6      	; 0x334e <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    3348:	8e 3f       	cpi	r24, 0xFE	; 254
    334a:	31 f0       	breq	.+12     	; 0x3358 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    334c:	8d e0       	ldi	r24, 0x0D	; 13
    334e:	8d 83       	std	Y+5, r24	; 0x05
    3350:	ce 01       	movw	r24, r28
    3352:	4b df       	rcall	.-362    	; 0x31ea <_ZN7Sd2Card14chipSelectHighEv>
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	01 c0       	rjmp	.+2      	; 0x335a <_ZN7Sd2Card14waitStartBlockEv+0x38>
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	08 95       	ret

00003364 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    3364:	cf 92       	push	r12
    3366:	df 92       	push	r13
    3368:	ef 92       	push	r14
    336a:	ff 92       	push	r15
    336c:	0f 93       	push	r16
    336e:	1f 93       	push	r17
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	ec 01       	movw	r28, r24
    3376:	69 01       	movw	r12, r18
    3378:	c8 01       	movw	r24, r16
    337a:	82 0f       	add	r24, r18
    337c:	93 1f       	adc	r25, r19
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	92 40       	sbci	r25, 0x02	; 2
    3382:	08 f0       	brcs	.+2      	; 0x3386 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    3384:	57 c0       	rjmp	.+174    	; 0x3434 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    3386:	8e 81       	ldd	r24, Y+6	; 0x06
    3388:	88 23       	and	r24, r24
    338a:	71 f0       	breq	.+28     	; 0x33a8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    338c:	88 81       	ld	r24, Y
    338e:	99 81       	ldd	r25, Y+1	; 0x01
    3390:	aa 81       	ldd	r26, Y+2	; 0x02
    3392:	bb 81       	ldd	r27, Y+3	; 0x03
    3394:	84 17       	cp	r24, r20
    3396:	95 07       	cpc	r25, r21
    3398:	a6 07       	cpc	r26, r22
    339a:	b7 07       	cpc	r27, r23
    339c:	29 f4       	brne	.+10     	; 0x33a8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    339e:	8f 81       	ldd	r24, Y+7	; 0x07
    33a0:	98 85       	ldd	r25, Y+8	; 0x08
    33a2:	c8 16       	cp	r12, r24
    33a4:	d9 06       	cpc	r13, r25
    33a6:	00 f5       	brcc	.+64     	; 0x33e8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    33a8:	48 83       	st	Y, r20
    33aa:	59 83       	std	Y+1, r21	; 0x01
    33ac:	6a 83       	std	Y+2, r22	; 0x02
    33ae:	7b 83       	std	Y+3, r23	; 0x03
    33b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    33b2:	83 30       	cpi	r24, 0x03	; 3
    33b4:	39 f0       	breq	.+14     	; 0x33c4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    33b6:	89 e0       	ldi	r24, 0x09	; 9
    33b8:	44 0f       	add	r20, r20
    33ba:	55 1f       	adc	r21, r21
    33bc:	66 1f       	adc	r22, r22
    33be:	77 1f       	adc	r23, r23
    33c0:	8a 95       	dec	r24
    33c2:	d1 f7       	brne	.-12     	; 0x33b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    33c4:	9a 01       	movw	r18, r20
    33c6:	ab 01       	movw	r20, r22
    33c8:	61 e1       	ldi	r22, 0x11	; 17
    33ca:	ce 01       	movw	r24, r28
    33cc:	62 df       	rcall	.-316    	; 0x3292 <_ZN7Sd2Card11cardCommandEhm>
    33ce:	88 23       	and	r24, r24
    33d0:	19 f0       	breq	.+6      	; 0x33d8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	2e c0       	rjmp	.+92     	; 0x3434 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    33d8:	ce 01       	movw	r24, r28
    33da:	a3 df       	rcall	.-186    	; 0x3322 <_ZN7Sd2Card14waitStartBlockEv>
    33dc:	88 23       	and	r24, r24
    33de:	51 f1       	breq	.+84     	; 0x3434 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    33e0:	18 86       	std	Y+8, r1	; 0x08
    33e2:	1f 82       	std	Y+7, r1	; 0x07
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	8e 83       	std	Y+6, r24	; 0x06
    33e8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ea:	98 85       	ldd	r25, Y+8	; 0x08
    33ec:	8c 15       	cp	r24, r12
    33ee:	9d 05       	cpc	r25, r13
    33f0:	38 f4       	brcc	.+14     	; 0x3400 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    33f2:	f9 de       	rcall	.-526    	; 0x31e6 <_ZL6spiRecv>
    33f4:	8f 81       	ldd	r24, Y+7	; 0x07
    33f6:	98 85       	ldd	r25, Y+8	; 0x08
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	98 87       	std	Y+8, r25	; 0x08
    33fc:	8f 83       	std	Y+7, r24	; 0x07
    33fe:	f4 cf       	rjmp	.-24     	; 0x33e8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    3400:	67 01       	movw	r12, r14
    3402:	e0 0e       	add	r14, r16
    3404:	f1 1e       	adc	r15, r17
    3406:	ce 14       	cp	r12, r14
    3408:	df 04       	cpc	r13, r15
    340a:	29 f0       	breq	.+10     	; 0x3416 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    340c:	ec de       	rcall	.-552    	; 0x31e6 <_ZL6spiRecv>
    340e:	f6 01       	movw	r30, r12
    3410:	81 93       	st	Z+, r24
    3412:	6f 01       	movw	r12, r30
    3414:	f8 cf       	rjmp	.-16     	; 0x3406 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    3416:	8f 81       	ldd	r24, Y+7	; 0x07
    3418:	98 85       	ldd	r25, Y+8	; 0x08
    341a:	08 0f       	add	r16, r24
    341c:	19 1f       	adc	r17, r25
    341e:	18 87       	std	Y+8, r17	; 0x08
    3420:	0f 83       	std	Y+7, r16	; 0x07
    3422:	89 85       	ldd	r24, Y+9	; 0x09
    3424:	88 23       	and	r24, r24
    3426:	19 f0       	breq	.+6      	; 0x342e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    3428:	01 15       	cp	r16, r1
    342a:	12 40       	sbci	r17, 0x02	; 2
    342c:	38 f0       	brcs	.+14     	; 0x343c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    342e:	ce 01       	movw	r24, r28
    3430:	00 df       	rcall	.-512    	; 0x3232 <_ZN7Sd2Card7readEndEv>
    3432:	04 c0       	rjmp	.+8      	; 0x343c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    3434:	ce 01       	movw	r24, r28
    3436:	d9 de       	rcall	.-590    	; 0x31ea <_ZN7Sd2Card14chipSelectHighEv>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	01 c0       	rjmp	.+2      	; 0x343e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	df 90       	pop	r13
    344c:	cf 90       	pop	r12
    344e:	08 95       	ret

00003450 <_ZN7Sd2Card8readDataEmjjPh>:
    3450:	ef 92       	push	r14
    3452:	ff 92       	push	r15
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	01 15       	cp	r16, r1
    345a:	11 05       	cpc	r17, r1
    345c:	11 f0       	breq	.+4      	; 0x3462 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    345e:	82 df       	rcall	.-252    	; 0x3364 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    3460:	01 c0       	rjmp	.+2      	; 0x3464 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	ff 90       	pop	r15
    346a:	ef 90       	pop	r14
    346c:	08 95       	ret

0000346e <_ZN7Sd2Card9readBlockEmPh>:
    346e:	ef 92       	push	r14
    3470:	ff 92       	push	r15
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	79 01       	movw	r14, r18
    3478:	00 e0       	ldi	r16, 0x00	; 0
    347a:	12 e0       	ldi	r17, 0x02	; 2
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	71 df       	rcall	.-286    	; 0x3364 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	08 95       	ret

0000348c <_ZN7Sd2Card9writeDataEhPKh>:
    348c:	ef 92       	push	r14
    348e:	ff 92       	push	r15
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	8c 01       	movw	r16, r24
    349a:	86 2f       	mov	r24, r22
    349c:	7a 01       	movw	r14, r20
    349e:	9c de       	rcall	.-712    	; 0x31d8 <_ZN8SPIClass8transferEh>
    34a0:	e7 01       	movw	r28, r14
    34a2:	8e ef       	ldi	r24, 0xFE	; 254
    34a4:	f8 1a       	sub	r15, r24
    34a6:	89 91       	ld	r24, Y+
    34a8:	97 de       	rcall	.-722    	; 0x31d8 <_ZN8SPIClass8transferEh>
    34aa:	ce 15       	cp	r28, r14
    34ac:	df 05       	cpc	r29, r15
    34ae:	d9 f7       	brne	.-10     	; 0x34a6 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    34b0:	8f ef       	ldi	r24, 0xFF	; 255
    34b2:	92 de       	rcall	.-732    	; 0x31d8 <_ZN8SPIClass8transferEh>
    34b4:	8f ef       	ldi	r24, 0xFF	; 255
    34b6:	90 de       	rcall	.-736    	; 0x31d8 <_ZN8SPIClass8transferEh>
    34b8:	96 de       	rcall	.-724    	; 0x31e6 <_ZL6spiRecv>
    34ba:	f8 01       	movw	r30, r16
    34bc:	82 87       	std	Z+10, r24	; 0x0a
    34be:	8f 71       	andi	r24, 0x1F	; 31
    34c0:	85 30       	cpi	r24, 0x05	; 5
    34c2:	31 f0       	breq	.+12     	; 0x34d0 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    34c4:	81 e1       	ldi	r24, 0x11	; 17
    34c6:	85 83       	std	Z+5, r24	; 0x05
    34c8:	c8 01       	movw	r24, r16
    34ca:	8f de       	rcall	.-738    	; 0x31ea <_ZN7Sd2Card14chipSelectHighEv>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	01 c0       	rjmp	.+2      	; 0x34d2 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	1f 91       	pop	r17
    34d8:	0f 91       	pop	r16
    34da:	ff 90       	pop	r15
    34dc:	ef 90       	pop	r14
    34de:	08 95       	ret

000034e0 <_ZN7Sd2Card10writeBlockEmPKh>:
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    34e8:	ec 01       	movw	r28, r24
    34ea:	89 01       	movw	r16, r18
    34ec:	41 15       	cp	r20, r1
    34ee:	51 05       	cpc	r21, r1
    34f0:	61 05       	cpc	r22, r1
    34f2:	71 05       	cpc	r23, r1
    34f4:	11 f4       	brne	.+4      	; 0x34fa <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    34f6:	82 e1       	ldi	r24, 0x12	; 18
    34f8:	2d c0       	rjmp	.+90     	; 0x3554 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    34fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    34fc:	83 30       	cpi	r24, 0x03	; 3
    34fe:	39 f0       	breq	.+14     	; 0x350e <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    3500:	89 e0       	ldi	r24, 0x09	; 9
    3502:	44 0f       	add	r20, r20
    3504:	55 1f       	adc	r21, r21
    3506:	66 1f       	adc	r22, r22
    3508:	77 1f       	adc	r23, r23
    350a:	8a 95       	dec	r24
    350c:	d1 f7       	brne	.-12     	; 0x3502 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    350e:	9a 01       	movw	r18, r20
    3510:	ab 01       	movw	r20, r22
    3512:	68 e1       	ldi	r22, 0x18	; 24
    3514:	ce 01       	movw	r24, r28
    3516:	bd de       	rcall	.-646    	; 0x3292 <_ZN7Sd2Card11cardCommandEhm>
    3518:	88 23       	and	r24, r24
    351a:	11 f0       	breq	.+4      	; 0x3520 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    351c:	84 e0       	ldi	r24, 0x04	; 4
    351e:	1a c0       	rjmp	.+52     	; 0x3554 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    3520:	a8 01       	movw	r20, r16
    3522:	6e ef       	ldi	r22, 0xFE	; 254
    3524:	ce 01       	movw	r24, r28
    3526:	b2 df       	rcall	.-156    	; 0x348c <_ZN7Sd2Card9writeDataEhPKh>
    3528:	88 23       	and	r24, r24
    352a:	a9 f0       	breq	.+42     	; 0x3556 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    352c:	68 e5       	ldi	r22, 0x58	; 88
    352e:	72 e0       	ldi	r23, 0x02	; 2
    3530:	ce 01       	movw	r24, r28
    3532:	97 de       	rcall	.-722    	; 0x3262 <_ZN7Sd2Card11waitNotBusyEj>
    3534:	81 11       	cpse	r24, r1
    3536:	02 c0       	rjmp	.+4      	; 0x353c <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    3538:	85 e1       	ldi	r24, 0x15	; 21
    353a:	0c c0       	rjmp	.+24     	; 0x3554 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	a9 01       	movw	r20, r18
    3542:	6d e0       	ldi	r22, 0x0D	; 13
    3544:	ce 01       	movw	r24, r28
    3546:	a5 de       	rcall	.-694    	; 0x3292 <_ZN7Sd2Card11cardCommandEhm>
    3548:	81 11       	cpse	r24, r1
    354a:	03 c0       	rjmp	.+6      	; 0x3552 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    354c:	4c de       	rcall	.-872    	; 0x31e6 <_ZL6spiRecv>
    354e:	88 23       	and	r24, r24
    3550:	31 f0       	breq	.+12     	; 0x355e <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    3552:	84 e1       	ldi	r24, 0x14	; 20
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	ce 01       	movw	r24, r28
    3558:	48 de       	rcall	.-880    	; 0x31ea <_ZN7Sd2Card14chipSelectHighEv>
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	03 c0       	rjmp	.+6      	; 0x3564 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    355e:	ce 01       	movw	r24, r28
    3560:	44 de       	rcall	.-888    	; 0x31ea <_ZN7Sd2Card14chipSelectHighEv>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	08 95       	ret

0000356e <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    356e:	e9 e1       	ldi	r30, 0x19	; 25
    3570:	f7 e0       	ldi	r31, 0x07	; 7
    3572:	80 e5       	ldi	r24, 0x50	; 80
    3574:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    3576:	11 82       	std	Z+1, r1	; 0x01
    3578:	08 95       	ret

0000357a <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	ec 01       	movw	r28, r24
    3580:	9c 01       	movw	r18, r24
    3582:	2a 5f       	subi	r18, 0xFA	; 250
    3584:	3f 4f       	sbci	r19, 0xFF	; 255
    3586:	41 e0       	ldi	r20, 0x01	; 1
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3592:	4c d5       	rcall	.+2712   	; 0x402c <_ZN8SdVolume15allocContiguousEmPm>
    3594:	88 23       	and	r24, r24
    3596:	a1 f0       	breq	.+40     	; 0x35c0 <_ZN6SdFile10addClusterEv+0x46>
    3598:	8f 89       	ldd	r24, Y+23	; 0x17
    359a:	98 8d       	ldd	r25, Y+24	; 0x18
    359c:	a9 8d       	ldd	r26, Y+25	; 0x19
    359e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    35a0:	89 2b       	or	r24, r25
    35a2:	8a 2b       	or	r24, r26
    35a4:	8b 2b       	or	r24, r27
    35a6:	59 f4       	brne	.+22     	; 0x35be <_ZN6SdFile10addClusterEv+0x44>
    35a8:	8e 81       	ldd	r24, Y+6	; 0x06
    35aa:	9f 81       	ldd	r25, Y+7	; 0x07
    35ac:	a8 85       	ldd	r26, Y+8	; 0x08
    35ae:	b9 85       	ldd	r27, Y+9	; 0x09
    35b0:	8f 8b       	std	Y+23, r24	; 0x17
    35b2:	98 8f       	std	Y+24, r25	; 0x18
    35b4:	a9 8f       	std	Y+25, r26	; 0x19
    35b6:	ba 8f       	std	Y+26, r27	; 0x1a
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	80 68       	ori	r24, 0x80	; 128
    35bc:	8c 83       	std	Y+4, r24	; 0x04
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	08 95       	ret

000035c6 <_ZN6SdFile13cacheDirEntryEh>:
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	ec 01       	movw	r28, r24
    35cc:	46 2f       	mov	r20, r22
    35ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    35d0:	7f 85       	ldd	r23, Y+15	; 0x0f
    35d2:	88 89       	ldd	r24, Y+16	; 0x10
    35d4:	99 89       	ldd	r25, Y+17	; 0x11
    35d6:	cf d3       	rcall	.+1950   	; 0x3d76 <_ZN8SdVolume13cacheRawBlockEmh>
    35d8:	88 23       	and	r24, r24
    35da:	41 f0       	breq	.+16     	; 0x35ec <_ZN6SdFile13cacheDirEntryEh+0x26>
    35dc:	8a 89       	ldd	r24, Y+18	; 0x12
    35de:	20 e2       	ldi	r18, 0x20	; 32
    35e0:	82 9f       	mul	r24, r18
    35e2:	c0 01       	movw	r24, r0
    35e4:	11 24       	eor	r1, r1
    35e6:	8c 5d       	subi	r24, 0xDC	; 220
    35e8:	98 4f       	sbci	r25, 0xF8	; 248
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	08 95       	ret

000035f6 <_ZN6SdFile4readEPvj>:
    35f6:	2f 92       	push	r2
    35f8:	3f 92       	push	r3
    35fa:	4f 92       	push	r4
    35fc:	5f 92       	push	r5
    35fe:	6f 92       	push	r6
    3600:	7f 92       	push	r7
    3602:	8f 92       	push	r8
    3604:	9f 92       	push	r9
    3606:	af 92       	push	r10
    3608:	bf 92       	push	r11
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	ec 01       	movw	r28, r24
    361c:	5b 01       	movw	r10, r22
    361e:	4a 01       	movw	r8, r20
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	81 11       	cpse	r24, r1
    3624:	03 c0       	rjmp	.+6      	; 0x362c <_ZN6SdFile4readEPvj+0x36>
    3626:	8f ef       	ldi	r24, 0xFF	; 255
    3628:	9f ef       	ldi	r25, 0xFF	; 255
    362a:	d4 c0       	rjmp	.+424    	; 0x37d4 <_ZN6SdFile4readEPvj+0x1de>
    362c:	8c 81       	ldd	r24, Y+4	; 0x04
    362e:	80 ff       	sbrs	r24, 0
    3630:	fa cf       	rjmp	.-12     	; 0x3626 <_ZN6SdFile4readEPvj+0x30>
    3632:	4b 88       	ldd	r4, Y+19	; 0x13
    3634:	5c 88       	ldd	r5, Y+20	; 0x14
    3636:	6d 88       	ldd	r6, Y+21	; 0x15
    3638:	7e 88       	ldd	r7, Y+22	; 0x16
    363a:	4a 85       	ldd	r20, Y+10	; 0x0a
    363c:	5b 85       	ldd	r21, Y+11	; 0x0b
    363e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3640:	7d 85       	ldd	r23, Y+13	; 0x0d
    3642:	c4 01       	movw	r24, r8
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	93 01       	movw	r18, r6
    364a:	82 01       	movw	r16, r4
    364c:	04 1b       	sub	r16, r20
    364e:	15 0b       	sbc	r17, r21
    3650:	26 0b       	sbc	r18, r22
    3652:	37 0b       	sbc	r19, r23
    3654:	08 17       	cp	r16, r24
    3656:	19 07       	cpc	r17, r25
    3658:	2a 07       	cpc	r18, r26
    365a:	3b 07       	cpc	r19, r27
    365c:	18 f4       	brcc	.+6      	; 0x3664 <_ZN6SdFile4readEPvj+0x6e>
    365e:	42 01       	movw	r8, r4
    3660:	84 1a       	sub	r8, r20
    3662:	95 0a       	sbc	r9, r21
    3664:	24 01       	movw	r4, r8
    3666:	1e 01       	movw	r2, r28
    3668:	26 e0       	ldi	r18, 0x06	; 6
    366a:	22 0e       	add	r2, r18
    366c:	31 1c       	adc	r3, r1
    366e:	41 14       	cp	r4, r1
    3670:	51 04       	cpc	r5, r1
    3672:	09 f4       	brne	.+2      	; 0x3676 <_ZN6SdFile4readEPvj+0x80>
    3674:	7d c0       	rjmp	.+250    	; 0x3770 <_ZN6SdFile4readEPvj+0x17a>
    3676:	4a 85       	ldd	r20, Y+10	; 0x0a
    3678:	5b 85       	ldd	r21, Y+11	; 0x0b
    367a:	6c 85       	ldd	r22, Y+12	; 0x0c
    367c:	7d 85       	ldd	r23, Y+13	; 0x0d
    367e:	6a 01       	movw	r12, r20
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	d8 22       	and	r13, r24
    3684:	ed 81       	ldd	r30, Y+5	; 0x05
    3686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    368a:	8a 01       	movw	r16, r20
    368c:	9b 01       	movw	r18, r22
    368e:	f9 e0       	ldi	r31, 0x09	; 9
    3690:	36 95       	lsr	r19
    3692:	27 95       	ror	r18
    3694:	17 95       	ror	r17
    3696:	07 95       	ror	r16
    3698:	fa 95       	dec	r31
    369a:	d1 f7       	brne	.-12     	; 0x3690 <_ZN6SdFile4readEPvj+0x9a>
    369c:	e2 30       	cpi	r30, 0x02	; 2
    369e:	61 f4       	brne	.+24     	; 0x36b8 <_ZN6SdFile4readEPvj+0xc2>
    36a0:	fc 01       	movw	r30, r24
    36a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    36a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    36a6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    36a8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	60 0f       	add	r22, r16
    36b0:	71 1f       	adc	r23, r17
    36b2:	82 1f       	adc	r24, r18
    36b4:	93 1f       	adc	r25, r19
    36b6:	3e c0       	rjmp	.+124    	; 0x3734 <_ZN6SdFile4readEPvj+0x13e>
    36b8:	fc 01       	movw	r30, r24
    36ba:	74 80       	ldd	r7, Z+4	; 0x04
    36bc:	7a 94       	dec	r7
    36be:	70 22       	and	r7, r16
    36c0:	c1 14       	cp	r12, r1
    36c2:	d1 04       	cpc	r13, r1
    36c4:	c1 f4       	brne	.+48     	; 0x36f6 <_ZN6SdFile4readEPvj+0x100>
    36c6:	71 10       	cpse	r7, r1
    36c8:	16 c0       	rjmp	.+44     	; 0x36f6 <_ZN6SdFile4readEPvj+0x100>
    36ca:	45 2b       	or	r20, r21
    36cc:	46 2b       	or	r20, r22
    36ce:	47 2b       	or	r20, r23
    36d0:	49 f4       	brne	.+18     	; 0x36e4 <_ZN6SdFile4readEPvj+0xee>
    36d2:	8f 89       	ldd	r24, Y+23	; 0x17
    36d4:	98 8d       	ldd	r25, Y+24	; 0x18
    36d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    36d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    36da:	8e 83       	std	Y+6, r24	; 0x06
    36dc:	9f 83       	std	Y+7, r25	; 0x07
    36de:	a8 87       	std	Y+8, r26	; 0x08
    36e0:	b9 87       	std	Y+9, r27	; 0x09
    36e2:	09 c0       	rjmp	.+18     	; 0x36f6 <_ZN6SdFile4readEPvj+0x100>
    36e4:	4e 81       	ldd	r20, Y+6	; 0x06
    36e6:	5f 81       	ldd	r21, Y+7	; 0x07
    36e8:	68 85       	ldd	r22, Y+8	; 0x08
    36ea:	79 85       	ldd	r23, Y+9	; 0x09
    36ec:	91 01       	movw	r18, r2
    36ee:	7c d3       	rcall	.+1784   	; 0x3de8 <_ZNK8SdVolume6fatGetEmPm>
    36f0:	88 23       	and	r24, r24
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <_ZN6SdFile4readEPvj+0x100>
    36f4:	98 cf       	rjmp	.-208    	; 0x3626 <_ZN6SdFile4readEPvj+0x30>
    36f6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    36f8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    36fa:	8e 81       	ldd	r24, Y+6	; 0x06
    36fc:	9f 81       	ldd	r25, Y+7	; 0x07
    36fe:	a8 85       	ldd	r26, Y+8	; 0x08
    3700:	b9 85       	ldd	r27, Y+9	; 0x09
    3702:	02 97       	sbiw	r24, 0x02	; 2
    3704:	a1 09       	sbc	r26, r1
    3706:	b1 09       	sbc	r27, r1
    3708:	05 84       	ldd	r0, Z+13	; 0x0d
    370a:	04 c0       	rjmp	.+8      	; 0x3714 <_ZN6SdFile4readEPvj+0x11e>
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	aa 1f       	adc	r26, r26
    3712:	bb 1f       	adc	r27, r27
    3714:	0a 94       	dec	r0
    3716:	d2 f7       	brpl	.-12     	; 0x370c <_ZN6SdFile4readEPvj+0x116>
    3718:	46 85       	ldd	r20, Z+14	; 0x0e
    371a:	57 85       	ldd	r21, Z+15	; 0x0f
    371c:	60 89       	ldd	r22, Z+16	; 0x10
    371e:	71 89       	ldd	r23, Z+17	; 0x11
    3720:	84 0f       	add	r24, r20
    3722:	95 1f       	adc	r25, r21
    3724:	a6 1f       	adc	r26, r22
    3726:	b7 1f       	adc	r27, r23
    3728:	bc 01       	movw	r22, r24
    372a:	cd 01       	movw	r24, r26
    372c:	67 0d       	add	r22, r7
    372e:	71 1d       	adc	r23, r1
    3730:	81 1d       	adc	r24, r1
    3732:	91 1d       	adc	r25, r1
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	32 e0       	ldi	r19, 0x02	; 2
    3738:	2c 19       	sub	r18, r12
    373a:	3d 09       	sbc	r19, r13
    373c:	32 01       	movw	r6, r4
    373e:	24 15       	cp	r18, r4
    3740:	35 05       	cpc	r19, r5
    3742:	08 f4       	brcc	.+2      	; 0x3746 <_ZN6SdFile4readEPvj+0x150>
    3744:	39 01       	movw	r6, r18
    3746:	2c 81       	ldd	r18, Y+4	; 0x04
    3748:	26 fd       	sbrc	r18, 6
    374a:	04 c0       	rjmp	.+8      	; 0x3754 <_ZN6SdFile4readEPvj+0x15e>
    374c:	61 14       	cp	r6, r1
    374e:	f2 e0       	ldi	r31, 0x02	; 2
    3750:	7f 06       	cpc	r7, r31
    3752:	71 f5       	brne	.+92     	; 0x37b0 <_ZN6SdFile4readEPvj+0x1ba>
    3754:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3758:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    375c:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3760:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3764:	60 17       	cp	r22, r16
    3766:	71 07       	cpc	r23, r17
    3768:	82 07       	cpc	r24, r18
    376a:	93 07       	cpc	r25, r19
    376c:	19 f4       	brne	.+6      	; 0x3774 <_ZN6SdFile4readEPvj+0x17e>
    376e:	20 c0       	rjmp	.+64     	; 0x37b0 <_ZN6SdFile4readEPvj+0x1ba>
    3770:	c4 01       	movw	r24, r8
    3772:	30 c0       	rjmp	.+96     	; 0x37d4 <_ZN6SdFile4readEPvj+0x1de>
    3774:	75 01       	movw	r14, r10
    3776:	83 01       	movw	r16, r6
    3778:	96 01       	movw	r18, r12
    377a:	ab 01       	movw	r20, r22
    377c:	bc 01       	movw	r22, r24
    377e:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume7sdCard_E>
    3782:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E+0x1>
    3786:	64 de       	rcall	.-824    	; 0x3450 <_ZN7Sd2Card8readDataEmjjPh>
    3788:	88 23       	and	r24, r24
    378a:	09 f4       	brne	.+2      	; 0x378e <_ZN6SdFile4readEPvj+0x198>
    378c:	4c cf       	rjmp	.-360    	; 0x3626 <_ZN6SdFile4readEPvj+0x30>
    378e:	a6 0c       	add	r10, r6
    3790:	b7 1c       	adc	r11, r7
    3792:	8a 85       	ldd	r24, Y+10	; 0x0a
    3794:	9b 85       	ldd	r25, Y+11	; 0x0b
    3796:	ac 85       	ldd	r26, Y+12	; 0x0c
    3798:	bd 85       	ldd	r27, Y+13	; 0x0d
    379a:	86 0d       	add	r24, r6
    379c:	97 1d       	adc	r25, r7
    379e:	a1 1d       	adc	r26, r1
    37a0:	b1 1d       	adc	r27, r1
    37a2:	8a 87       	std	Y+10, r24	; 0x0a
    37a4:	9b 87       	std	Y+11, r25	; 0x0b
    37a6:	ac 87       	std	Y+12, r26	; 0x0c
    37a8:	bd 87       	std	Y+13, r27	; 0x0d
    37aa:	46 18       	sub	r4, r6
    37ac:	57 08       	sbc	r5, r7
    37ae:	5f cf       	rjmp	.-322    	; 0x366e <_ZN6SdFile4readEPvj+0x78>
    37b0:	40 e0       	ldi	r20, 0x00	; 0
    37b2:	e1 d2       	rcall	.+1474   	; 0x3d76 <_ZN8SdVolume13cacheRawBlockEmh>
    37b4:	88 23       	and	r24, r24
    37b6:	09 f4       	brne	.+2      	; 0x37ba <_ZN6SdFile4readEPvj+0x1c4>
    37b8:	36 cf       	rjmp	.-404    	; 0x3626 <_ZN6SdFile4readEPvj+0x30>
    37ba:	f6 01       	movw	r30, r12
    37bc:	ec 5d       	subi	r30, 0xDC	; 220
    37be:	f8 4f       	sbci	r31, 0xF8	; 248
    37c0:	d5 01       	movw	r26, r10
    37c2:	cf 01       	movw	r24, r30
    37c4:	86 0d       	add	r24, r6
    37c6:	97 1d       	adc	r25, r7
    37c8:	8e 17       	cp	r24, r30
    37ca:	9f 07       	cpc	r25, r31
    37cc:	01 f3       	breq	.-64     	; 0x378e <_ZN6SdFile4readEPvj+0x198>
    37ce:	21 91       	ld	r18, Z+
    37d0:	2d 93       	st	X+, r18
    37d2:	fa cf       	rjmp	.-12     	; 0x37c8 <_ZN6SdFile4readEPvj+0x1d2>
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
    37e4:	bf 90       	pop	r11
    37e6:	af 90       	pop	r10
    37e8:	9f 90       	pop	r9
    37ea:	8f 90       	pop	r8
    37ec:	7f 90       	pop	r7
    37ee:	6f 90       	pop	r6
    37f0:	5f 90       	pop	r5
    37f2:	4f 90       	pop	r4
    37f4:	3f 90       	pop	r3
    37f6:	2f 90       	pop	r2
    37f8:	08 95       	ret

000037fa <_ZN6SdFile7seekSetEm>:
    37fa:	8f 92       	push	r8
    37fc:	9f 92       	push	r9
    37fe:	af 92       	push	r10
    3800:	bf 92       	push	r11
    3802:	cf 92       	push	r12
    3804:	df 92       	push	r13
    3806:	ef 92       	push	r14
    3808:	ff 92       	push	r15
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	ec 01       	movw	r28, r24
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	81 11       	cpse	r24, r1
    3818:	02 c0       	rjmp	.+4      	; 0x381e <_ZN6SdFile7seekSetEm+0x24>
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	77 c0       	rjmp	.+238    	; 0x390c <_ZN6SdFile7seekSetEm+0x112>
    381e:	0b 89       	ldd	r16, Y+19	; 0x13
    3820:	1c 89       	ldd	r17, Y+20	; 0x14
    3822:	2d 89       	ldd	r18, Y+21	; 0x15
    3824:	3e 89       	ldd	r19, Y+22	; 0x16
    3826:	04 17       	cp	r16, r20
    3828:	15 07       	cpc	r17, r21
    382a:	26 07       	cpc	r18, r22
    382c:	37 07       	cpc	r19, r23
    382e:	a8 f3       	brcs	.-22     	; 0x381a <_ZN6SdFile7seekSetEm+0x20>
    3830:	6a 01       	movw	r12, r20
    3832:	7b 01       	movw	r14, r22
    3834:	82 30       	cpi	r24, 0x02	; 2
    3836:	29 f4       	brne	.+10     	; 0x3842 <_ZN6SdFile7seekSetEm+0x48>
    3838:	ca 86       	std	Y+10, r12	; 0x0a
    383a:	db 86       	std	Y+11, r13	; 0x0b
    383c:	ec 86       	std	Y+12, r14	; 0x0c
    383e:	fd 86       	std	Y+13, r15	; 0x0d
    3840:	0d c0       	rjmp	.+26     	; 0x385c <_ZN6SdFile7seekSetEm+0x62>
    3842:	c1 14       	cp	r12, r1
    3844:	d1 04       	cpc	r13, r1
    3846:	e1 04       	cpc	r14, r1
    3848:	f1 04       	cpc	r15, r1
    384a:	51 f4       	brne	.+20     	; 0x3860 <_ZN6SdFile7seekSetEm+0x66>
    384c:	1e 82       	std	Y+6, r1	; 0x06
    384e:	1f 82       	std	Y+7, r1	; 0x07
    3850:	18 86       	std	Y+8, r1	; 0x08
    3852:	19 86       	std	Y+9, r1	; 0x09
    3854:	1a 86       	std	Y+10, r1	; 0x0a
    3856:	1b 86       	std	Y+11, r1	; 0x0b
    3858:	1c 86       	std	Y+12, r1	; 0x0c
    385a:	1d 86       	std	Y+13, r1	; 0x0d
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	56 c0       	rjmp	.+172    	; 0x390c <_ZN6SdFile7seekSetEm+0x112>
    3860:	8a 84       	ldd	r8, Y+10	; 0x0a
    3862:	9b 84       	ldd	r9, Y+11	; 0x0b
    3864:	ac 84       	ldd	r10, Y+12	; 0x0c
    3866:	bd 84       	ldd	r11, Y+13	; 0x0d
    3868:	eb 8d       	ldd	r30, Y+27	; 0x1b
    386a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    386c:	25 85       	ldd	r18, Z+13	; 0x0d
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	27 5f       	subi	r18, 0xF7	; 247
    3872:	3f 4f       	sbci	r19, 0xFF	; 255
    3874:	b5 01       	movw	r22, r10
    3876:	a4 01       	movw	r20, r8
    3878:	41 50       	subi	r20, 0x01	; 1
    387a:	51 09       	sbc	r21, r1
    387c:	61 09       	sbc	r22, r1
    387e:	71 09       	sbc	r23, r1
    3880:	02 2e       	mov	r0, r18
    3882:	04 c0       	rjmp	.+8      	; 0x388c <_ZN6SdFile7seekSetEm+0x92>
    3884:	76 95       	lsr	r23
    3886:	67 95       	ror	r22
    3888:	57 95       	ror	r21
    388a:	47 95       	ror	r20
    388c:	0a 94       	dec	r0
    388e:	d2 f7       	brpl	.-12     	; 0x3884 <_ZN6SdFile7seekSetEm+0x8a>
    3890:	d7 01       	movw	r26, r14
    3892:	c6 01       	movw	r24, r12
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	a1 09       	sbc	r26, r1
    3898:	b1 09       	sbc	r27, r1
    389a:	04 c0       	rjmp	.+8      	; 0x38a4 <_ZN6SdFile7seekSetEm+0xaa>
    389c:	b6 95       	lsr	r27
    389e:	a7 95       	ror	r26
    38a0:	97 95       	ror	r25
    38a2:	87 95       	ror	r24
    38a4:	2a 95       	dec	r18
    38a6:	d2 f7       	brpl	.-12     	; 0x389c <_ZN6SdFile7seekSetEm+0xa2>
    38a8:	84 17       	cp	r24, r20
    38aa:	95 07       	cpc	r25, r21
    38ac:	a6 07       	cpc	r26, r22
    38ae:	b7 07       	cpc	r27, r23
    38b0:	20 f0       	brcs	.+8      	; 0x38ba <_ZN6SdFile7seekSetEm+0xc0>
    38b2:	89 28       	or	r8, r9
    38b4:	8a 28       	or	r8, r10
    38b6:	8b 28       	or	r8, r11
    38b8:	71 f4       	brne	.+28     	; 0x38d6 <_ZN6SdFile7seekSetEm+0xdc>
    38ba:	4f 89       	ldd	r20, Y+23	; 0x17
    38bc:	58 8d       	ldd	r21, Y+24	; 0x18
    38be:	69 8d       	ldd	r22, Y+25	; 0x19
    38c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c2:	4e 83       	std	Y+6, r20	; 0x06
    38c4:	5f 83       	std	Y+7, r21	; 0x07
    38c6:	68 87       	std	Y+8, r22	; 0x08
    38c8:	79 87       	std	Y+9, r23	; 0x09
    38ca:	4c 01       	movw	r8, r24
    38cc:	5d 01       	movw	r10, r26
    38ce:	8e 01       	movw	r16, r28
    38d0:	0a 5f       	subi	r16, 0xFA	; 250
    38d2:	1f 4f       	sbci	r17, 0xFF	; 255
    38d4:	15 c0       	rjmp	.+42     	; 0x3900 <_ZN6SdFile7seekSetEm+0x106>
    38d6:	84 1b       	sub	r24, r20
    38d8:	95 0b       	sbc	r25, r21
    38da:	a6 0b       	sbc	r26, r22
    38dc:	b7 0b       	sbc	r27, r23
    38de:	f5 cf       	rjmp	.-22     	; 0x38ca <_ZN6SdFile7seekSetEm+0xd0>
    38e0:	4e 81       	ldd	r20, Y+6	; 0x06
    38e2:	5f 81       	ldd	r21, Y+7	; 0x07
    38e4:	68 85       	ldd	r22, Y+8	; 0x08
    38e6:	79 85       	ldd	r23, Y+9	; 0x09
    38e8:	98 01       	movw	r18, r16
    38ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ee:	7c d2       	rcall	.+1272   	; 0x3de8 <_ZNK8SdVolume6fatGetEmPm>
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	89 1a       	sub	r8, r25
    38f4:	91 08       	sbc	r9, r1
    38f6:	a1 08       	sbc	r10, r1
    38f8:	b1 08       	sbc	r11, r1
    38fa:	88 23       	and	r24, r24
    38fc:	09 f4       	brne	.+2      	; 0x3900 <_ZN6SdFile7seekSetEm+0x106>
    38fe:	8d cf       	rjmp	.-230    	; 0x381a <_ZN6SdFile7seekSetEm+0x20>
    3900:	81 14       	cp	r8, r1
    3902:	91 04       	cpc	r9, r1
    3904:	a1 04       	cpc	r10, r1
    3906:	b1 04       	cpc	r11, r1
    3908:	59 f7       	brne	.-42     	; 0x38e0 <_ZN6SdFile7seekSetEm+0xe6>
    390a:	96 cf       	rjmp	.-212    	; 0x3838 <_ZN6SdFile7seekSetEm+0x3e>
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	1f 91       	pop	r17
    3912:	0f 91       	pop	r16
    3914:	ff 90       	pop	r15
    3916:	ef 90       	pop	r14
    3918:	df 90       	pop	r13
    391a:	cf 90       	pop	r12
    391c:	bf 90       	pop	r11
    391e:	af 90       	pop	r10
    3920:	9f 90       	pop	r9
    3922:	8f 90       	pop	r8
    3924:	08 95       	ret

00003926 <_ZN6SdFile4syncEv>:
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	ec 01       	movw	r28, r24
    3930:	8d 81       	ldd	r24, Y+5	; 0x05
    3932:	88 23       	and	r24, r24
    3934:	b9 f1       	breq	.+110    	; 0x39a4 <_ZN6SdFile4syncEv+0x7e>
    3936:	8c 81       	ldd	r24, Y+4	; 0x04
    3938:	87 ff       	sbrs	r24, 7
    393a:	2f c0       	rjmp	.+94     	; 0x399a <_ZN6SdFile4syncEv+0x74>
    393c:	61 e0       	ldi	r22, 0x01	; 1
    393e:	ce 01       	movw	r24, r28
    3940:	42 de       	rcall	.-892    	; 0x35c6 <_ZN6SdFile13cacheDirEntryEh>
    3942:	8c 01       	movw	r16, r24
    3944:	89 2b       	or	r24, r25
    3946:	71 f1       	breq	.+92     	; 0x39a4 <_ZN6SdFile4syncEv+0x7e>
    3948:	8d 81       	ldd	r24, Y+5	; 0x05
    394a:	82 30       	cpi	r24, 0x02	; 2
    394c:	48 f4       	brcc	.+18     	; 0x3960 <_ZN6SdFile4syncEv+0x3a>
    394e:	8b 89       	ldd	r24, Y+19	; 0x13
    3950:	9c 89       	ldd	r25, Y+20	; 0x14
    3952:	ad 89       	ldd	r26, Y+21	; 0x15
    3954:	be 89       	ldd	r27, Y+22	; 0x16
    3956:	f8 01       	movw	r30, r16
    3958:	84 8f       	std	Z+28, r24	; 0x1c
    395a:	95 8f       	std	Z+29, r25	; 0x1d
    395c:	a6 8f       	std	Z+30, r26	; 0x1e
    395e:	b7 8f       	std	Z+31, r27	; 0x1f
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	a9 8d       	ldd	r26, Y+25	; 0x19
    3966:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3968:	f8 01       	movw	r30, r16
    396a:	93 8f       	std	Z+27, r25	; 0x1b
    396c:	82 8f       	std	Z+26, r24	; 0x1a
    396e:	b5 8b       	std	Z+21, r27	; 0x15
    3970:	a4 8b       	std	Z+20, r26	; 0x14
    3972:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <_ZN6SdFile9dateTime_E>
    3976:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <_ZN6SdFile9dateTime_E+0x1>
    397a:	30 97       	sbiw	r30, 0x00	; 0
    397c:	59 f0       	breq	.+22     	; 0x3994 <_ZN6SdFile4syncEv+0x6e>
    397e:	b8 01       	movw	r22, r16
    3980:	6a 5e       	subi	r22, 0xEA	; 234
    3982:	7f 4f       	sbci	r23, 0xFF	; 255
    3984:	c8 01       	movw	r24, r16
    3986:	48 96       	adiw	r24, 0x18	; 24
    3988:	19 95       	eicall
    398a:	f8 01       	movw	r30, r16
    398c:	80 8d       	ldd	r24, Z+24	; 0x18
    398e:	91 8d       	ldd	r25, Z+25	; 0x19
    3990:	93 8b       	std	Z+19, r25	; 0x13
    3992:	82 8b       	std	Z+18, r24	; 0x12
    3994:	8c 81       	ldd	r24, Y+4	; 0x04
    3996:	8f 77       	andi	r24, 0x7F	; 127
    3998:	8c 83       	std	Y+4, r24	; 0x04
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	b0 c1       	rjmp	.+864    	; 0x3d04 <_ZN8SdVolume10cacheFlushEv>
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	08 95       	ret

000039b0 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    39b0:	2f 92       	push	r2
    39b2:	3f 92       	push	r3
    39b4:	4f 92       	push	r4
    39b6:	5f 92       	push	r5
    39b8:	6f 92       	push	r6
    39ba:	7f 92       	push	r7
    39bc:	8f 92       	push	r8
    39be:	9f 92       	push	r9
    39c0:	af 92       	push	r10
    39c2:	bf 92       	push	r11
    39c4:	cf 92       	push	r12
    39c6:	df 92       	push	r13
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	00 d0       	rcall	.+0      	; 0x39d6 <_ZN6SdFile5writeEPKvj+0x26>
    39d6:	1f 92       	push	r1
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	8c 01       	movw	r16, r24
    39de:	6b 01       	movw	r12, r22
    39e0:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    39e2:	dc 01       	movw	r26, r24
    39e4:	15 96       	adiw	r26, 0x05	; 5
    39e6:	8c 91       	ld	r24, X
    39e8:	15 97       	sbiw	r26, 0x05	; 5
    39ea:	81 30       	cpi	r24, 0x01	; 1
    39ec:	c1 f4       	brne	.+48     	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>
    39ee:	14 96       	adiw	r26, 0x04	; 4
    39f0:	8c 91       	ld	r24, X
    39f2:	81 ff       	sbrs	r24, 1
    39f4:	14 c0       	rjmp	.+40     	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    39f6:	82 ff       	sbrs	r24, 2
    39f8:	1c c0       	rjmp	.+56     	; 0x3a32 <_ZN6SdFile5writeEPKvj+0x82>
    39fa:	f8 01       	movw	r30, r16
    39fc:	43 89       	ldd	r20, Z+19	; 0x13
    39fe:	54 89       	ldd	r21, Z+20	; 0x14
    3a00:	65 89       	ldd	r22, Z+21	; 0x15
    3a02:	76 89       	ldd	r23, Z+22	; 0x16
    3a04:	82 85       	ldd	r24, Z+10	; 0x0a
    3a06:	93 85       	ldd	r25, Z+11	; 0x0b
    3a08:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a0a:	b5 85       	ldd	r27, Z+13	; 0x0d
    3a0c:	84 17       	cp	r24, r20
    3a0e:	95 07       	cpc	r25, r21
    3a10:	a6 07       	cpc	r26, r22
    3a12:	b7 07       	cpc	r27, r23
    3a14:	71 f0       	breq	.+28     	; 0x3a32 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    3a16:	c8 01       	movw	r24, r16
    3a18:	f0 de       	rcall	.-544    	; 0x37fa <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    3a1a:	81 11       	cpse	r24, r1
    3a1c:	0a c0       	rjmp	.+20     	; 0x3a32 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	d8 01       	movw	r26, r16
    3a24:	13 96       	adiw	r26, 0x03	; 3
    3a26:	9c 93       	st	X, r25
    3a28:	8e 93       	st	-X, r24
    3a2a:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	42 c1       	rjmp	.+644    	; 0x3cb6 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3a32:	41 01       	movw	r8, r2
    3a34:	82 c0       	rjmp	.+260    	; 0x3b3a <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3a36:	5b 96       	adiw	r26, 0x1b	; 27
    3a38:	8d 91       	ld	r24, X+
    3a3a:	9c 91       	ld	r25, X
    3a3c:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3a3e:	fc 01       	movw	r30, r24
    3a40:	74 80       	ldd	r7, Z+4	; 0x04
    3a42:	2f ef       	ldi	r18, 0xFF	; 255
    3a44:	27 0d       	add	r18, r7
    3a46:	2a 01       	movw	r4, r20
    3a48:	3b 01       	movw	r6, r22
    3a4a:	39 e0       	ldi	r19, 0x09	; 9
    3a4c:	76 94       	lsr	r7
    3a4e:	67 94       	ror	r6
    3a50:	57 94       	ror	r5
    3a52:	47 94       	ror	r4
    3a54:	3a 95       	dec	r19
    3a56:	d1 f7       	brne	.-12     	; 0x3a4c <_ZN6SdFile5writeEPKvj+0x9c>
    3a58:	72 2e       	mov	r7, r18
    3a5a:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3a5c:	7a 01       	movw	r14, r20
    3a5e:	f1 e0       	ldi	r31, 0x01	; 1
    3a60:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    3a62:	77 20       	and	r7, r7
    3a64:	09 f4       	brne	.+2      	; 0x3a68 <_ZN6SdFile5writeEPKvj+0xb8>
    3a66:	75 c0       	rjmp	.+234    	; 0x3b52 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	92 e0       	ldi	r25, 0x02	; 2
    3a6c:	8e 19       	sub	r24, r14
    3a6e:	9f 09       	sbc	r25, r15
    3a70:	54 01       	movw	r10, r8
    3a72:	88 15       	cp	r24, r8
    3a74:	99 05       	cpc	r25, r9
    3a76:	08 f4       	brcc	.+2      	; 0x3a7a <_ZN6SdFile5writeEPKvj+0xca>
    3a78:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3a7a:	d8 01       	movw	r26, r16
    3a7c:	5b 96       	adiw	r26, 0x1b	; 27
    3a7e:	2d 91       	ld	r18, X+
    3a80:	3c 91       	ld	r19, X
    3a82:	5c 97       	sbiw	r26, 0x1c	; 28
    3a84:	16 96       	adiw	r26, 0x06	; 6
    3a86:	8d 91       	ld	r24, X+
    3a88:	9d 91       	ld	r25, X+
    3a8a:	0d 90       	ld	r0, X+
    3a8c:	bc 91       	ld	r27, X
    3a8e:	a0 2d       	mov	r26, r0
    3a90:	02 97       	sbiw	r24, 0x02	; 2
    3a92:	a1 09       	sbc	r26, r1
    3a94:	b1 09       	sbc	r27, r1
    3a96:	f9 01       	movw	r30, r18
    3a98:	05 84       	ldd	r0, Z+13	; 0x0d
    3a9a:	04 c0       	rjmp	.+8      	; 0x3aa4 <_ZN6SdFile5writeEPKvj+0xf4>
    3a9c:	88 0f       	add	r24, r24
    3a9e:	99 1f       	adc	r25, r25
    3aa0:	aa 1f       	adc	r26, r26
    3aa2:	bb 1f       	adc	r27, r27
    3aa4:	0a 94       	dec	r0
    3aa6:	d2 f7       	brpl	.-12     	; 0x3a9c <_ZN6SdFile5writeEPKvj+0xec>
    3aa8:	46 85       	ldd	r20, Z+14	; 0x0e
    3aaa:	57 85       	ldd	r21, Z+15	; 0x0f
    3aac:	60 89       	ldd	r22, Z+16	; 0x10
    3aae:	71 89       	ldd	r23, Z+17	; 0x11
    3ab0:	84 0f       	add	r24, r20
    3ab2:	95 1f       	adc	r25, r21
    3ab4:	a6 1f       	adc	r26, r22
    3ab6:	b7 1f       	adc	r27, r23
    3ab8:	9c 01       	movw	r18, r24
    3aba:	ad 01       	movw	r20, r26
    3abc:	27 0d       	add	r18, r7
    3abe:	31 1d       	adc	r19, r1
    3ac0:	41 1d       	adc	r20, r1
    3ac2:	51 1d       	adc	r21, r1
    3ac4:	29 01       	movw	r4, r18
    3ac6:	3a 01       	movw	r6, r20
    if (n == 512) {
    3ac8:	a1 14       	cp	r10, r1
    3aca:	32 e0       	ldi	r19, 0x02	; 2
    3acc:	b3 06       	cpc	r11, r19
    3ace:	09 f0       	breq	.+2      	; 0x3ad2 <_ZN6SdFile5writeEPKvj+0x122>
    3ad0:	85 c0       	rjmp	.+266    	; 0x3bdc <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3ad2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3ad6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3ada:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3ade:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3ae2:	48 16       	cp	r4, r24
    3ae4:	59 06       	cpc	r5, r25
    3ae6:	6a 06       	cpc	r6, r26
    3ae8:	7b 06       	cpc	r7, r27
    3aea:	59 f4       	brne	.+22     	; 0x3b02 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3aec:	8f ef       	ldi	r24, 0xFF	; 255
    3aee:	9f ef       	ldi	r25, 0xFF	; 255
    3af0:	dc 01       	movw	r26, r24
    3af2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3af6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3afa:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3afe:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3b02:	96 01       	movw	r18, r12
    3b04:	b3 01       	movw	r22, r6
    3b06:	a2 01       	movw	r20, r4
    3b08:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume7sdCard_E>
    3b0c:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E+0x1>
    3b10:	e7 dc       	rcall	.-1586   	; 0x34e0 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3b12:	88 23       	and	r24, r24
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <_ZN6SdFile5writeEPKvj+0x168>
    3b16:	83 cf       	rjmp	.-250    	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    3b18:	9e ef       	ldi	r25, 0xFE	; 254
    3b1a:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    3b1c:	8a 18       	sub	r8, r10
    3b1e:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    3b20:	f8 01       	movw	r30, r16
    3b22:	82 85       	ldd	r24, Z+10	; 0x0a
    3b24:	93 85       	ldd	r25, Z+11	; 0x0b
    3b26:	a4 85       	ldd	r26, Z+12	; 0x0c
    3b28:	b5 85       	ldd	r27, Z+13	; 0x0d
    3b2a:	8a 0d       	add	r24, r10
    3b2c:	9b 1d       	adc	r25, r11
    3b2e:	a1 1d       	adc	r26, r1
    3b30:	b1 1d       	adc	r27, r1
    3b32:	82 87       	std	Z+10, r24	; 0x0a
    3b34:	93 87       	std	Z+11, r25	; 0x0b
    3b36:	a4 87       	std	Z+12, r26	; 0x0c
    3b38:	b5 87       	std	Z+13, r27	; 0x0d
    3b3a:	d8 01       	movw	r26, r16
    3b3c:	1a 96       	adiw	r26, 0x0a	; 10
    3b3e:	4d 91       	ld	r20, X+
    3b40:	5d 91       	ld	r21, X+
    3b42:	6d 91       	ld	r22, X+
    3b44:	7c 91       	ld	r23, X
    3b46:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3b48:	81 14       	cp	r8, r1
    3b4a:	91 04       	cpc	r9, r1
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <_ZN6SdFile5writeEPKvj+0x1a0>
    3b4e:	73 cf       	rjmp	.-282    	; 0x3a36 <_ZN6SdFile5writeEPKvj+0x86>
    3b50:	83 c0       	rjmp	.+262    	; 0x3c58 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3b52:	e1 14       	cp	r14, r1
    3b54:	f1 04       	cpc	r15, r1
    3b56:	09 f0       	breq	.+2      	; 0x3b5a <_ZN6SdFile5writeEPKvj+0x1aa>
    3b58:	87 cf       	rjmp	.-242    	; 0x3a68 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    3b5a:	16 96       	adiw	r26, 0x06	; 6
    3b5c:	4d 91       	ld	r20, X+
    3b5e:	5d 91       	ld	r21, X+
    3b60:	6d 91       	ld	r22, X+
    3b62:	7c 91       	ld	r23, X
    3b64:	19 97       	sbiw	r26, 0x09	; 9
    3b66:	41 15       	cp	r20, r1
    3b68:	51 05       	cpc	r21, r1
    3b6a:	61 05       	cpc	r22, r1
    3b6c:	71 05       	cpc	r23, r1
    3b6e:	59 f4       	brne	.+22     	; 0x3b86 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    3b70:	57 96       	adiw	r26, 0x17	; 23
    3b72:	8d 91       	ld	r24, X+
    3b74:	9d 91       	ld	r25, X+
    3b76:	0d 90       	ld	r0, X+
    3b78:	bc 91       	ld	r27, X
    3b7a:	a0 2d       	mov	r26, r0
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	a1 05       	cpc	r26, r1
    3b80:	b1 05       	cpc	r27, r1
    3b82:	31 f5       	brne	.+76     	; 0x3bd0 <_ZN6SdFile5writeEPKvj+0x220>
    3b84:	20 c0       	rjmp	.+64     	; 0x3bc6 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3b86:	9e 01       	movw	r18, r28
    3b88:	2f 5f       	subi	r18, 0xFF	; 255
    3b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8c:	2d d1       	rcall	.+602    	; 0x3de8 <_ZNK8SdVolume6fatGetEmPm>
    3b8e:	88 23       	and	r24, r24
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <_ZN6SdFile5writeEPKvj+0x1e4>
    3b92:	4d cf       	rjmp	.-358    	; 0x3a2e <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	9a 81       	ldd	r25, Y+2	; 0x02
    3b98:	ab 81       	ldd	r26, Y+3	; 0x03
    3b9a:	bc 81       	ldd	r27, Y+4	; 0x04
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	23 8d       	ldd	r18, Z+27	; 0x1b
    3ba0:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3ba2:	f9 01       	movw	r30, r18
    3ba4:	27 89       	ldd	r18, Z+23	; 0x17
    3ba6:	20 31       	cpi	r18, 0x10	; 16
    3ba8:	29 f0       	breq	.+10     	; 0x3bb4 <_ZN6SdFile5writeEPKvj+0x204>
    3baa:	48 ef       	ldi	r20, 0xF8	; 248
    3bac:	5f ef       	ldi	r21, 0xFF	; 255
    3bae:	6f ef       	ldi	r22, 0xFF	; 255
    3bb0:	7f e0       	ldi	r23, 0x0F	; 15
    3bb2:	04 c0       	rjmp	.+8      	; 0x3bbc <_ZN6SdFile5writeEPKvj+0x20c>
    3bb4:	48 ef       	ldi	r20, 0xF8	; 248
    3bb6:	5f ef       	ldi	r21, 0xFF	; 255
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	84 17       	cp	r24, r20
    3bbe:	95 07       	cpc	r25, r21
    3bc0:	a6 07       	cpc	r26, r22
    3bc2:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3bc4:	28 f0       	brcs	.+10     	; 0x3bd0 <_ZN6SdFile5writeEPKvj+0x220>
    3bc6:	c8 01       	movw	r24, r16
    3bc8:	d8 dc       	rcall	.-1616   	; 0x357a <_ZN6SdFile10addClusterEv>
    3bca:	81 11       	cpse	r24, r1
    3bcc:	4d cf       	rjmp	.-358    	; 0x3a68 <_ZN6SdFile5writeEPKvj+0xb8>
    3bce:	27 cf       	rjmp	.-434    	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    3bd0:	f8 01       	movw	r30, r16
    3bd2:	86 83       	std	Z+6, r24	; 0x06
    3bd4:	97 83       	std	Z+7, r25	; 0x07
    3bd6:	a0 87       	std	Z+8, r26	; 0x08
    3bd8:	b1 87       	std	Z+9, r27	; 0x09
    3bda:	46 cf       	rjmp	.-372    	; 0x3a68 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3bdc:	e1 14       	cp	r14, r1
    3bde:	f1 04       	cpc	r15, r1
    3be0:	21 f5       	brne	.+72     	; 0x3c2a <_ZN6SdFile5writeEPKvj+0x27a>
    3be2:	d8 01       	movw	r26, r16
    3be4:	1a 96       	adiw	r26, 0x0a	; 10
    3be6:	4d 91       	ld	r20, X+
    3be8:	5d 91       	ld	r21, X+
    3bea:	6d 91       	ld	r22, X+
    3bec:	7c 91       	ld	r23, X
    3bee:	1d 97       	sbiw	r26, 0x0d	; 13
    3bf0:	53 96       	adiw	r26, 0x13	; 19
    3bf2:	8d 91       	ld	r24, X+
    3bf4:	9d 91       	ld	r25, X+
    3bf6:	0d 90       	ld	r0, X+
    3bf8:	bc 91       	ld	r27, X
    3bfa:	a0 2d       	mov	r26, r0
    3bfc:	48 17       	cp	r20, r24
    3bfe:	59 07       	cpc	r21, r25
    3c00:	6a 07       	cpc	r22, r26
    3c02:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3c04:	90 f0       	brcs	.+36     	; 0x3c2a <_ZN6SdFile5writeEPKvj+0x27a>
    3c06:	7e d0       	rcall	.+252    	; 0x3d04 <_ZN8SdVolume10cacheFlushEv>
    3c08:	88 23       	and	r24, r24
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <_ZN6SdFile5writeEPKvj+0x25e>
    3c0c:	08 cf       	rjmp	.-496    	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    3c0e:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3c12:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3c16:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3c1a:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3c1e:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
    3c22:	81 60       	ori	r24, 0x01	; 1
    3c24:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3c28:	07 c0       	rjmp	.+14     	; 0x3c38 <_ZN6SdFile5writeEPKvj+0x288>
    3c2a:	41 e0       	ldi	r20, 0x01	; 1
    3c2c:	c3 01       	movw	r24, r6
    3c2e:	b2 01       	movw	r22, r4
    3c30:	a2 d0       	rcall	.+324    	; 0x3d76 <_ZN8SdVolume13cacheRawBlockEmh>
    3c32:	88 23       	and	r24, r24
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <_ZN6SdFile5writeEPKvj+0x288>
    3c36:	f3 ce       	rjmp	.-538    	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>
    3c38:	d6 01       	movw	r26, r12
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	ec 5d       	subi	r30, 0xDC	; 220
    3c3e:	f8 4f       	sbci	r31, 0xF8	; 248
    3c40:	9f 01       	movw	r18, r30
    3c42:	2a 0d       	add	r18, r10
    3c44:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    3c46:	2e 17       	cp	r18, r30
    3c48:	3f 07       	cpc	r19, r31
    3c4a:	19 f0       	breq	.+6      	; 0x3c52 <_ZN6SdFile5writeEPKvj+0x2a2>
    3c4c:	8d 91       	ld	r24, X+
    3c4e:	81 93       	st	Z+, r24
    3c50:	fa cf       	rjmp	.-12     	; 0x3c46 <_ZN6SdFile5writeEPKvj+0x296>
    3c52:	ca 0c       	add	r12, r10
    3c54:	db 1c       	adc	r13, r11
    3c56:	62 cf       	rjmp	.-316    	; 0x3b1c <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3c58:	d8 01       	movw	r26, r16
    3c5a:	53 96       	adiw	r26, 0x13	; 19
    3c5c:	cd 90       	ld	r12, X+
    3c5e:	dd 90       	ld	r13, X+
    3c60:	ed 90       	ld	r14, X+
    3c62:	fc 90       	ld	r15, X
    3c64:	56 97       	sbiw	r26, 0x16	; 22
    3c66:	14 96       	adiw	r26, 0x04	; 4
    3c68:	8c 91       	ld	r24, X
    3c6a:	c4 16       	cp	r12, r20
    3c6c:	d5 06       	cpc	r13, r21
    3c6e:	e6 06       	cpc	r14, r22
    3c70:	f7 06       	cpc	r15, r23
    3c72:	40 f4       	brcc	.+16     	; 0x3c84 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3c74:	f8 01       	movw	r30, r16
    3c76:	43 8b       	std	Z+19, r20	; 0x13
    3c78:	54 8b       	std	Z+20, r21	; 0x14
    3c7a:	65 8b       	std	Z+21, r22	; 0x15
    3c7c:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    3c7e:	80 68       	ori	r24, 0x80	; 128
    3c80:	84 83       	std	Z+4, r24	; 0x04
    3c82:	0d c0       	rjmp	.+26     	; 0x3c9e <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    3c84:	20 91 1b 07 	lds	r18, 0x071B	; 0x80071b <_ZN6SdFile9dateTime_E>
    3c88:	30 91 1c 07 	lds	r19, 0x071C	; 0x80071c <_ZN6SdFile9dateTime_E+0x1>
    3c8c:	23 2b       	or	r18, r19
    3c8e:	39 f0       	breq	.+14     	; 0x3c9e <_ZN6SdFile5writeEPKvj+0x2ee>
    3c90:	21 14       	cp	r2, r1
    3c92:	31 04       	cpc	r3, r1
    3c94:	21 f0       	breq	.+8      	; 0x3c9e <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3c96:	80 68       	ori	r24, 0x80	; 128
    3c98:	d8 01       	movw	r26, r16
    3c9a:	14 96       	adiw	r26, 0x04	; 4
    3c9c:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    3c9e:	f8 01       	movw	r30, r16
    3ca0:	84 81       	ldd	r24, Z+4	; 0x04
    3ca2:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3ca4:	02 c0       	rjmp	.+4      	; 0x3caa <_ZN6SdFile5writeEPKvj+0x2fa>
    3ca6:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    3ca8:	06 c0       	rjmp	.+12     	; 0x3cb6 <_ZN6SdFile5writeEPKvj+0x306>
    3caa:	c8 01       	movw	r24, r16
    3cac:	3c de       	rcall	.-904    	; 0x3926 <_ZN6SdFile4syncEv>
    3cae:	88 23       	and	r24, r24
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <_ZN6SdFile5writeEPKvj+0x304>
    3cb2:	b5 ce       	rjmp	.-662    	; 0x3a1e <_ZN6SdFile5writeEPKvj+0x6e>
    3cb4:	f8 cf       	rjmp	.-16     	; 0x3ca6 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	df 90       	pop	r13
    3ccc:	cf 90       	pop	r12
    3cce:	bf 90       	pop	r11
    3cd0:	af 90       	pop	r10
    3cd2:	9f 90       	pop	r9
    3cd4:	8f 90       	pop	r8
    3cd6:	7f 90       	pop	r7
    3cd8:	6f 90       	pop	r6
    3cda:	5f 90       	pop	r5
    3cdc:	4f 90       	pop	r4
    3cde:	3f 90       	pop	r3
    3ce0:	2f 90       	pop	r2
    3ce2:	08 95       	ret

00003ce4 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	1f 92       	push	r1
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    3cf0:	41 e0       	ldi	r20, 0x01	; 1
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
    3cf4:	be 01       	movw	r22, r28
    3cf6:	6f 5f       	subi	r22, 0xFF	; 255
    3cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfa:	5a de       	rcall	.-844    	; 0x39b0 <_ZN6SdFile5writeEPKvj>
}
    3cfc:	0f 90       	pop	r0
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	08 95       	ret

00003d04 <_ZN8SdVolume10cacheFlushEv>:
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    3d04:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
    3d08:	88 23       	and	r24, r24
    3d0a:	99 f1       	breq	.+102    	; 0x3d72 <_ZN8SdVolume10cacheFlushEv+0x6e>
    3d0c:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3d10:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3d14:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3d18:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3d1c:	24 e2       	ldi	r18, 0x24	; 36
    3d1e:	37 e0       	ldi	r19, 0x07	; 7
    3d20:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume7sdCard_E>
    3d24:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E+0x1>
    3d28:	db db       	rcall	.-2122   	; 0x34e0 <_ZN7Sd2Card10writeBlockEmPKh>
    3d2a:	81 11       	cpse	r24, r1
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <_ZN8SdVolume10cacheFlushEv+0x2e>
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	08 95       	ret
    3d32:	40 91 1d 07 	lds	r20, 0x071D	; 0x80071d <_ZN8SdVolume17cacheMirrorBlock_E>
    3d36:	50 91 1e 07 	lds	r21, 0x071E	; 0x80071e <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3d3a:	60 91 1f 07 	lds	r22, 0x071F	; 0x80071f <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3d3e:	70 91 20 07 	lds	r23, 0x0720	; 0x800720 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3d42:	41 15       	cp	r20, r1
    3d44:	51 05       	cpc	r21, r1
    3d46:	61 05       	cpc	r22, r1
    3d48:	71 05       	cpc	r23, r1
    3d4a:	89 f0       	breq	.+34     	; 0x3d6e <_ZN8SdVolume10cacheFlushEv+0x6a>
    3d4c:	24 e2       	ldi	r18, 0x24	; 36
    3d4e:	37 e0       	ldi	r19, 0x07	; 7
    3d50:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume7sdCard_E>
    3d54:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E+0x1>
    3d58:	c3 db       	rcall	.-2170   	; 0x34e0 <_ZN7Sd2Card10writeBlockEmPKh>
    3d5a:	88 23       	and	r24, r24
    3d5c:	41 f3       	breq	.-48     	; 0x3d2e <_ZN8SdVolume10cacheFlushEv+0x2a>
    3d5e:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <_ZN8SdVolume17cacheMirrorBlock_E>
    3d62:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3d66:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3d6a:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3d6e:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	08 95       	ret

00003d76 <_ZN8SdVolume13cacheRawBlockEmh>:
    3d76:	cf 92       	push	r12
    3d78:	df 92       	push	r13
    3d7a:	ef 92       	push	r14
    3d7c:	ff 92       	push	r15
    3d7e:	cf 93       	push	r28
    3d80:	6b 01       	movw	r12, r22
    3d82:	7c 01       	movw	r14, r24
    3d84:	c4 2f       	mov	r28, r20
    3d86:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3d8a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3d8e:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3d92:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3d96:	8c 15       	cp	r24, r12
    3d98:	9d 05       	cpc	r25, r13
    3d9a:	ae 05       	cpc	r26, r14
    3d9c:	bf 05       	cpc	r27, r15
    3d9e:	c1 f0       	breq	.+48     	; 0x3dd0 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    3da0:	b1 df       	rcall	.-158    	; 0x3d04 <_ZN8SdVolume10cacheFlushEv>
    3da2:	81 11       	cpse	r24, r1
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	19 c0       	rjmp	.+50     	; 0x3ddc <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    3daa:	24 e2       	ldi	r18, 0x24	; 36
    3dac:	37 e0       	ldi	r19, 0x07	; 7
    3dae:	b7 01       	movw	r22, r14
    3db0:	a6 01       	movw	r20, r12
    3db2:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <_ZN8SdVolume7sdCard_E>
    3db6:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <_ZN8SdVolume7sdCard_E+0x1>
    3dba:	59 db       	rcall	.-2382   	; 0x346e <_ZN7Sd2Card9readBlockEmPh>
    3dbc:	88 23       	and	r24, r24
    3dbe:	99 f3       	breq	.-26     	; 0x3da6 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    3dc0:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3dc4:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3dc8:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3dcc:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3dd0:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
    3dd4:	c8 2b       	or	r28, r24
    3dd6:	c0 93 21 07 	sts	0x0721, r28	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	cf 91       	pop	r28
    3dde:	ff 90       	pop	r15
    3de0:	ef 90       	pop	r14
    3de2:	df 90       	pop	r13
    3de4:	cf 90       	pop	r12
    3de6:	08 95       	ret

00003de8 <_ZNK8SdVolume6fatGetEmPm>:
    3de8:	8f 92       	push	r8
    3dea:	9f 92       	push	r9
    3dec:	af 92       	push	r10
    3dee:	bf 92       	push	r11
    3df0:	cf 92       	push	r12
    3df2:	df 92       	push	r13
    3df4:	ef 92       	push	r14
    3df6:	ff 92       	push	r15
    3df8:	0f 93       	push	r16
    3dfa:	1f 93       	push	r17
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	fc 01       	movw	r30, r24
    3e02:	81 85       	ldd	r24, Z+9	; 0x09
    3e04:	92 85       	ldd	r25, Z+10	; 0x0a
    3e06:	a3 85       	ldd	r26, Z+11	; 0x0b
    3e08:	b4 85       	ldd	r27, Z+12	; 0x0c
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	a1 1d       	adc	r26, r1
    3e0e:	b1 1d       	adc	r27, r1
    3e10:	84 17       	cp	r24, r20
    3e12:	95 07       	cpc	r25, r21
    3e14:	a6 07       	cpc	r26, r22
    3e16:	b7 07       	cpc	r27, r23
    3e18:	10 f4       	brcc	.+4      	; 0x3e1e <_ZNK8SdVolume6fatGetEmPm+0x36>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	5a c0       	rjmp	.+180    	; 0x3ed2 <_ZNK8SdVolume6fatGetEmPm+0xea>
    3e1e:	83 88       	ldd	r8, Z+19	; 0x13
    3e20:	94 88       	ldd	r9, Z+20	; 0x14
    3e22:	a5 88       	ldd	r10, Z+21	; 0x15
    3e24:	b6 88       	ldd	r11, Z+22	; 0x16
    3e26:	87 89       	ldd	r24, Z+23	; 0x17
    3e28:	80 31       	cpi	r24, 0x10	; 16
    3e2a:	29 f4       	brne	.+10     	; 0x3e36 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    3e2c:	bb 27       	eor	r27, r27
    3e2e:	a7 2f       	mov	r26, r23
    3e30:	96 2f       	mov	r25, r22
    3e32:	85 2f       	mov	r24, r21
    3e34:	09 c0       	rjmp	.+18     	; 0x3e48 <_ZNK8SdVolume6fatGetEmPm+0x60>
    3e36:	db 01       	movw	r26, r22
    3e38:	ca 01       	movw	r24, r20
    3e3a:	c7 e0       	ldi	r28, 0x07	; 7
    3e3c:	b6 95       	lsr	r27
    3e3e:	a7 95       	ror	r26
    3e40:	97 95       	ror	r25
    3e42:	87 95       	ror	r24
    3e44:	ca 95       	dec	r28
    3e46:	d1 f7       	brne	.-12     	; 0x3e3c <_ZNK8SdVolume6fatGetEmPm+0x54>
    3e48:	e9 01       	movw	r28, r18
    3e4a:	6a 01       	movw	r12, r20
    3e4c:	7b 01       	movw	r14, r22
    3e4e:	8f 01       	movw	r16, r30
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	68 0d       	add	r22, r8
    3e56:	79 1d       	adc	r23, r9
    3e58:	8a 1d       	adc	r24, r10
    3e5a:	9b 1d       	adc	r25, r11
    3e5c:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3e60:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3e64:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3e68:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3e6c:	68 15       	cp	r22, r8
    3e6e:	79 05       	cpc	r23, r9
    3e70:	8a 05       	cpc	r24, r10
    3e72:	9b 05       	cpc	r25, r11
    3e74:	91 f4       	brne	.+36     	; 0x3e9a <_ZNK8SdVolume6fatGetEmPm+0xb2>
    3e76:	f8 01       	movw	r30, r16
    3e78:	87 89       	ldd	r24, Z+23	; 0x17
    3e7a:	80 31       	cpi	r24, 0x10	; 16
    3e7c:	99 f4       	brne	.+38     	; 0x3ea4 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    3e7e:	dd 24       	eor	r13, r13
    3e80:	ee 24       	eor	r14, r14
    3e82:	ff 24       	eor	r15, r15
    3e84:	c6 01       	movw	r24, r12
    3e86:	88 0f       	add	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	ec 5d       	subi	r30, 0xDC	; 220
    3e8e:	f8 4f       	sbci	r31, 0xF8	; 248
    3e90:	80 81       	ld	r24, Z
    3e92:	91 81       	ldd	r25, Z+1	; 0x01
    3e94:	a0 e0       	ldi	r26, 0x00	; 0
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	17 c0       	rjmp	.+46     	; 0x3ec8 <_ZNK8SdVolume6fatGetEmPm+0xe0>
    3e9a:	40 e0       	ldi	r20, 0x00	; 0
    3e9c:	6c df       	rcall	.-296    	; 0x3d76 <_ZN8SdVolume13cacheRawBlockEmh>
    3e9e:	81 11       	cpse	r24, r1
    3ea0:	ea cf       	rjmp	.-44     	; 0x3e76 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    3ea2:	bb cf       	rjmp	.-138    	; 0x3e1a <_ZNK8SdVolume6fatGetEmPm+0x32>
    3ea4:	e8 94       	clt
    3ea6:	c7 f8       	bld	r12, 7
    3ea8:	dd 24       	eor	r13, r13
    3eaa:	ee 24       	eor	r14, r14
    3eac:	ff 24       	eor	r15, r15
    3eae:	c6 01       	movw	r24, r12
    3eb0:	88 0f       	add	r24, r24
    3eb2:	99 1f       	adc	r25, r25
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	fc 01       	movw	r30, r24
    3eba:	ec 5d       	subi	r30, 0xDC	; 220
    3ebc:	f8 4f       	sbci	r31, 0xF8	; 248
    3ebe:	80 81       	ld	r24, Z
    3ec0:	91 81       	ldd	r25, Z+1	; 0x01
    3ec2:	a2 81       	ldd	r26, Z+2	; 0x02
    3ec4:	b3 81       	ldd	r27, Z+3	; 0x03
    3ec6:	bf 70       	andi	r27, 0x0F	; 15
    3ec8:	88 83       	st	Y, r24
    3eca:	99 83       	std	Y+1, r25	; 0x01
    3ecc:	aa 83       	std	Y+2, r26	; 0x02
    3ece:	bb 83       	std	Y+3, r27	; 0x03
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	1f 91       	pop	r17
    3ed8:	0f 91       	pop	r16
    3eda:	ff 90       	pop	r15
    3edc:	ef 90       	pop	r14
    3ede:	df 90       	pop	r13
    3ee0:	cf 90       	pop	r12
    3ee2:	bf 90       	pop	r11
    3ee4:	af 90       	pop	r10
    3ee6:	9f 90       	pop	r9
    3ee8:	8f 90       	pop	r8
    3eea:	08 95       	ret

00003eec <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3eec:	4f 92       	push	r4
    3eee:	5f 92       	push	r5
    3ef0:	6f 92       	push	r6
    3ef2:	7f 92       	push	r7
    3ef4:	8f 92       	push	r8
    3ef6:	9f 92       	push	r9
    3ef8:	af 92       	push	r10
    3efa:	bf 92       	push	r11
    3efc:	cf 92       	push	r12
    3efe:	df 92       	push	r13
    3f00:	ef 92       	push	r14
    3f02:	ff 92       	push	r15
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    3f0e:	42 30       	cpi	r20, 0x02	; 2
    3f10:	51 05       	cpc	r21, r1
    3f12:	61 05       	cpc	r22, r1
    3f14:	71 05       	cpc	r23, r1
    3f16:	10 f4       	brcc	.+4      	; 0x3f1c <_ZN8SdVolume6fatPutEmm+0x30>
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	77 c0       	rjmp	.+238    	; 0x400a <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3f1c:	89 85       	ldd	r24, Y+9	; 0x09
    3f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f20:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f22:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f24:	01 96       	adiw	r24, 0x01	; 1
    3f26:	a1 1d       	adc	r26, r1
    3f28:	b1 1d       	adc	r27, r1
    3f2a:	84 17       	cp	r24, r20
    3f2c:	95 07       	cpc	r25, r21
    3f2e:	a6 07       	cpc	r26, r22
    3f30:	b7 07       	cpc	r27, r23
    3f32:	90 f3       	brcs	.-28     	; 0x3f18 <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3f34:	cb 88       	ldd	r12, Y+19	; 0x13
    3f36:	dc 88       	ldd	r13, Y+20	; 0x14
    3f38:	ed 88       	ldd	r14, Y+21	; 0x15
    3f3a:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f3e:	80 31       	cpi	r24, 0x10	; 16
    3f40:	29 f4       	brne	.+10     	; 0x3f4c <_ZN8SdVolume6fatPutEmm+0x60>
    3f42:	bb 27       	eor	r27, r27
    3f44:	a7 2f       	mov	r26, r23
    3f46:	96 2f       	mov	r25, r22
    3f48:	85 2f       	mov	r24, r21
    3f4a:	09 c0       	rjmp	.+18     	; 0x3f5e <_ZN8SdVolume6fatPutEmm+0x72>
    3f4c:	db 01       	movw	r26, r22
    3f4e:	ca 01       	movw	r24, r20
    3f50:	e7 e0       	ldi	r30, 0x07	; 7
    3f52:	b6 95       	lsr	r27
    3f54:	a7 95       	ror	r26
    3f56:	97 95       	ror	r25
    3f58:	87 95       	ror	r24
    3f5a:	ea 95       	dec	r30
    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <_ZN8SdVolume6fatPutEmm+0x66>
    3f5e:	48 01       	movw	r8, r16
    3f60:	59 01       	movw	r10, r18
    3f62:	2a 01       	movw	r4, r20
    3f64:	3b 01       	movw	r6, r22
    3f66:	c8 0e       	add	r12, r24
    3f68:	d9 1e       	adc	r13, r25
    3f6a:	ea 1e       	adc	r14, r26
    3f6c:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    3f6e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    3f72:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3f76:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3f7a:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3f7e:	c8 16       	cp	r12, r24
    3f80:	d9 06       	cpc	r13, r25
    3f82:	ea 06       	cpc	r14, r26
    3f84:	fb 06       	cpc	r15, r27
    3f86:	81 f4       	brne	.+32     	; 0x3fa8 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    3f88:	8f 89       	ldd	r24, Y+23	; 0x17
    3f8a:	80 31       	cpi	r24, 0x10	; 16
    3f8c:	a1 f4       	brne	.+40     	; 0x3fb6 <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    3f8e:	b3 01       	movw	r22, r6
    3f90:	a2 01       	movw	r20, r4
    3f92:	55 27       	eor	r21, r21
    3f94:	66 27       	eor	r22, r22
    3f96:	77 27       	eor	r23, r23
    3f98:	44 0f       	add	r20, r20
    3f9a:	55 1f       	adc	r21, r21
    3f9c:	fa 01       	movw	r30, r20
    3f9e:	ec 5d       	subi	r30, 0xDC	; 220
    3fa0:	f8 4f       	sbci	r31, 0xF8	; 248
    3fa2:	91 82       	std	Z+1, r9	; 0x01
    3fa4:	80 82       	st	Z, r8
    3fa6:	18 c0       	rjmp	.+48     	; 0x3fd8 <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3fa8:	40 e0       	ldi	r20, 0x00	; 0
    3faa:	c7 01       	movw	r24, r14
    3fac:	b6 01       	movw	r22, r12
    3fae:	e3 de       	rcall	.-570    	; 0x3d76 <_ZN8SdVolume13cacheRawBlockEmh>
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	ea cf       	rjmp	.-44     	; 0x3f88 <_ZN8SdVolume6fatPutEmm+0x9c>
    3fb4:	b1 cf       	rjmp	.-158    	; 0x3f18 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3fb6:	b3 01       	movw	r22, r6
    3fb8:	a2 01       	movw	r20, r4
    3fba:	4f 77       	andi	r20, 0x7F	; 127
    3fbc:	55 27       	eor	r21, r21
    3fbe:	66 27       	eor	r22, r22
    3fc0:	77 27       	eor	r23, r23
    3fc2:	44 0f       	add	r20, r20
    3fc4:	55 1f       	adc	r21, r21
    3fc6:	44 0f       	add	r20, r20
    3fc8:	55 1f       	adc	r21, r21
    3fca:	fa 01       	movw	r30, r20
    3fcc:	ec 5d       	subi	r30, 0xDC	; 220
    3fce:	f8 4f       	sbci	r31, 0xF8	; 248
    3fd0:	80 82       	st	Z, r8
    3fd2:	91 82       	std	Z+1, r9	; 0x01
    3fd4:	a2 82       	std	Z+2, r10	; 0x02
    3fd6:	b3 82       	std	Z+3, r11	; 0x03
    3fd8:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
    3fdc:	81 60       	ori	r24, 0x01	; 1
    3fde:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    3fe2:	8a 89       	ldd	r24, Y+18	; 0x12
    3fe4:	82 30       	cpi	r24, 0x02	; 2
    3fe6:	80 f0       	brcs	.+32     	; 0x4008 <_ZN8SdVolume6fatPutEmm+0x11c>
    3fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fea:	9e 81       	ldd	r25, Y+6	; 0x06
    3fec:	af 81       	ldd	r26, Y+7	; 0x07
    3fee:	b8 85       	ldd	r27, Y+8	; 0x08
    3ff0:	c8 0e       	add	r12, r24
    3ff2:	d9 1e       	adc	r13, r25
    3ff4:	ea 1e       	adc	r14, r26
    3ff6:	fb 1e       	adc	r15, r27
    3ff8:	c0 92 1d 07 	sts	0x071D, r12	; 0x80071d <_ZN8SdVolume17cacheMirrorBlock_E>
    3ffc:	d0 92 1e 07 	sts	0x071E, r13	; 0x80071e <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    4000:	e0 92 1f 07 	sts	0x071F, r14	; 0x80071f <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    4004:	f0 92 20 07 	sts	0x0720, r15	; 0x800720 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    4008:	81 e0       	ldi	r24, 0x01	; 1
}
    400a:	df 91       	pop	r29
    400c:	cf 91       	pop	r28
    400e:	1f 91       	pop	r17
    4010:	0f 91       	pop	r16
    4012:	ff 90       	pop	r15
    4014:	ef 90       	pop	r14
    4016:	df 90       	pop	r13
    4018:	cf 90       	pop	r12
    401a:	bf 90       	pop	r11
    401c:	af 90       	pop	r10
    401e:	9f 90       	pop	r9
    4020:	8f 90       	pop	r8
    4022:	7f 90       	pop	r7
    4024:	6f 90       	pop	r6
    4026:	5f 90       	pop	r5
    4028:	4f 90       	pop	r4
    402a:	08 95       	ret

0000402c <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    402c:	2f 92       	push	r2
    402e:	3f 92       	push	r3
    4030:	4f 92       	push	r4
    4032:	5f 92       	push	r5
    4034:	6f 92       	push	r6
    4036:	7f 92       	push	r7
    4038:	9f 92       	push	r9
    403a:	af 92       	push	r10
    403c:	bf 92       	push	r11
    403e:	cf 92       	push	r12
    4040:	df 92       	push	r13
    4042:	ef 92       	push	r14
    4044:	ff 92       	push	r15
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	60 97       	sbiw	r28, 0x10	; 16
    4054:	0f b6       	in	r0, 0x3f	; 63
    4056:	f8 94       	cli
    4058:	de bf       	out	0x3e, r29	; 62
    405a:	0f be       	out	0x3f, r0	; 63
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	5c 01       	movw	r10, r24
    4060:	49 87       	std	Y+9, r20	; 0x09
    4062:	5a 87       	std	Y+10, r21	; 0x0a
    4064:	6b 87       	std	Y+11, r22	; 0x0b
    4066:	7c 87       	std	Y+12, r23	; 0x0c
    4068:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    406a:	d9 01       	movw	r26, r18
    406c:	cd 90       	ld	r12, X+
    406e:	dd 90       	ld	r13, X+
    4070:	ed 90       	ld	r14, X+
    4072:	fc 90       	ld	r15, X
    4074:	c1 14       	cp	r12, r1
    4076:	d1 04       	cpc	r13, r1
    4078:	e1 04       	cpc	r14, r1
    407a:	f1 04       	cpc	r15, r1
    407c:	31 f0       	breq	.+12     	; 0x408a <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    407e:	bf ef       	ldi	r27, 0xFF	; 255
    4080:	cb 1a       	sub	r12, r27
    4082:	db 0a       	sbc	r13, r27
    4084:	eb 0a       	sbc	r14, r27
    4086:	fb 0a       	sbc	r15, r27
    4088:	10 c0       	rjmp	.+32     	; 0x40aa <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    408a:	fc 01       	movw	r30, r24
    408c:	c0 80       	ld	r12, Z
    408e:	d1 80       	ldd	r13, Z+1	; 0x01
    4090:	e2 80       	ldd	r14, Z+2	; 0x02
    4092:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    4094:	99 24       	eor	r9, r9
    4096:	93 94       	inc	r9
    4098:	09 85       	ldd	r16, Y+9	; 0x09
    409a:	1a 85       	ldd	r17, Y+10	; 0x0a
    409c:	2b 85       	ldd	r18, Y+11	; 0x0b
    409e:	3c 85       	ldd	r19, Y+12	; 0x0c
    40a0:	01 30       	cpi	r16, 0x01	; 1
    40a2:	11 05       	cpc	r17, r1
    40a4:	21 05       	cpc	r18, r1
    40a6:	31 05       	cpc	r19, r1
    40a8:	09 f0       	breq	.+2      	; 0x40ac <_ZN8SdVolume15allocContiguousEmPm+0x80>
    40aa:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    40ac:	f5 01       	movw	r30, r10
    40ae:	81 85       	ldd	r24, Z+9	; 0x09
    40b0:	92 85       	ldd	r25, Z+10	; 0x0a
    40b2:	a3 85       	ldd	r26, Z+11	; 0x0b
    40b4:	b4 85       	ldd	r27, Z+12	; 0x0c
    40b6:	8c 01       	movw	r16, r24
    40b8:	9d 01       	movw	r18, r26
    40ba:	0f 5f       	subi	r16, 0xFF	; 255
    40bc:	1f 4f       	sbci	r17, 0xFF	; 255
    40be:	2f 4f       	sbci	r18, 0xFF	; 255
    40c0:	3f 4f       	sbci	r19, 0xFF	; 255
    40c2:	0d 87       	std	Y+13, r16	; 0x0d
    40c4:	1e 87       	std	Y+14, r17	; 0x0e
    40c6:	2f 87       	std	Y+15, r18	; 0x0f
    40c8:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    40ca:	26 01       	movw	r4, r12
    40cc:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    40ce:	1d 82       	std	Y+5, r1	; 0x05
    40d0:	1e 82       	std	Y+6, r1	; 0x06
    40d2:	1f 82       	std	Y+7, r1	; 0x07
    40d4:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    40d6:	f5 01       	movw	r30, r10
    40d8:	81 85       	ldd	r24, Z+9	; 0x09
    40da:	92 85       	ldd	r25, Z+10	; 0x0a
    40dc:	a3 85       	ldd	r26, Z+11	; 0x0b
    40de:	b4 85       	ldd	r27, Z+12	; 0x0c
    40e0:	0d 81       	ldd	r16, Y+5	; 0x05
    40e2:	1e 81       	ldd	r17, Y+6	; 0x06
    40e4:	2f 81       	ldd	r18, Y+7	; 0x07
    40e6:	38 85       	ldd	r19, Y+8	; 0x08
    40e8:	08 17       	cp	r16, r24
    40ea:	19 07       	cpc	r17, r25
    40ec:	2a 07       	cpc	r18, r26
    40ee:	3b 07       	cpc	r19, r27
    40f0:	08 f0       	brcs	.+2      	; 0x40f4 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    40f2:	54 c0       	rjmp	.+168    	; 0x419c <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    40f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    40f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    40f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    40fa:	58 89       	ldd	r21, Y+16	; 0x10
    40fc:	24 15       	cp	r18, r4
    40fe:	35 05       	cpc	r19, r5
    4100:	46 05       	cpc	r20, r6
    4102:	57 05       	cpc	r21, r7
    4104:	50 f4       	brcc	.+20     	; 0x411a <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    4106:	82 e0       	ldi	r24, 0x02	; 2
    4108:	48 2e       	mov	r4, r24
    410a:	51 2c       	mov	r5, r1
    410c:	61 2c       	mov	r6, r1
    410e:	71 2c       	mov	r7, r1
    4110:	92 e0       	ldi	r25, 0x02	; 2
    4112:	c9 2e       	mov	r12, r25
    4114:	d1 2c       	mov	r13, r1
    4116:	e1 2c       	mov	r14, r1
    4118:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    411a:	9e 01       	movw	r18, r28
    411c:	2f 5f       	subi	r18, 0xFF	; 255
    411e:	3f 4f       	sbci	r19, 0xFF	; 255
    4120:	b3 01       	movw	r22, r6
    4122:	a2 01       	movw	r20, r4
    4124:	c5 01       	movw	r24, r10
    4126:	60 de       	rcall	.-832    	; 0x3de8 <_ZNK8SdVolume6fatGetEmPm>
    4128:	88 23       	and	r24, r24
    412a:	c1 f1       	breq	.+112    	; 0x419c <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    412c:	49 81       	ldd	r20, Y+1	; 0x01
    412e:	5a 81       	ldd	r21, Y+2	; 0x02
    4130:	6b 81       	ldd	r22, Y+3	; 0x03
    4132:	7c 81       	ldd	r23, Y+4	; 0x04
    4134:	d3 01       	movw	r26, r6
    4136:	c2 01       	movw	r24, r4
    4138:	01 96       	adiw	r24, 0x01	; 1
    413a:	a1 1d       	adc	r26, r1
    413c:	b1 1d       	adc	r27, r1
    413e:	45 2b       	or	r20, r21
    4140:	46 2b       	or	r20, r22
    4142:	47 2b       	or	r20, r23
    4144:	19 f0       	breq	.+6      	; 0x414c <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    4146:	6c 01       	movw	r12, r24
    4148:	7d 01       	movw	r14, r26
    414a:	0f c0       	rjmp	.+30     	; 0x416a <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    414c:	ac 01       	movw	r20, r24
    414e:	bd 01       	movw	r22, r26
    4150:	4c 19       	sub	r20, r12
    4152:	5d 09       	sbc	r21, r13
    4154:	6e 09       	sbc	r22, r14
    4156:	7f 09       	sbc	r23, r15
    4158:	09 85       	ldd	r16, Y+9	; 0x09
    415a:	1a 85       	ldd	r17, Y+10	; 0x0a
    415c:	2b 85       	ldd	r18, Y+11	; 0x0b
    415e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4160:	04 17       	cp	r16, r20
    4162:	15 07       	cpc	r17, r21
    4164:	26 07       	cpc	r18, r22
    4166:	37 07       	cpc	r19, r23
    4168:	79 f0       	breq	.+30     	; 0x4188 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    416a:	2d 81       	ldd	r18, Y+5	; 0x05
    416c:	3e 81       	ldd	r19, Y+6	; 0x06
    416e:	4f 81       	ldd	r20, Y+7	; 0x07
    4170:	58 85       	ldd	r21, Y+8	; 0x08
    4172:	2f 5f       	subi	r18, 0xFF	; 255
    4174:	3f 4f       	sbci	r19, 0xFF	; 255
    4176:	4f 4f       	sbci	r20, 0xFF	; 255
    4178:	5f 4f       	sbci	r21, 0xFF	; 255
    417a:	2d 83       	std	Y+5, r18	; 0x05
    417c:	3e 83       	std	Y+6, r19	; 0x06
    417e:	4f 83       	std	Y+7, r20	; 0x07
    4180:	58 87       	std	Y+8, r21	; 0x08
    4182:	2c 01       	movw	r4, r24
    4184:	3d 01       	movw	r6, r26
    4186:	a7 cf       	rjmp	.-178    	; 0x40d6 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    4188:	0f ef       	ldi	r16, 0xFF	; 255
    418a:	1f ef       	ldi	r17, 0xFF	; 255
    418c:	2f ef       	ldi	r18, 0xFF	; 255
    418e:	3f e0       	ldi	r19, 0x0F	; 15
    4190:	b3 01       	movw	r22, r6
    4192:	a2 01       	movw	r20, r4
    4194:	c5 01       	movw	r24, r10
    4196:	aa de       	rcall	.-684    	; 0x3eec <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    4198:	81 11       	cpse	r24, r1
    419a:	17 c0       	rjmp	.+46     	; 0x41ca <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	3f c0       	rjmp	.+126    	; 0x421e <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    41a0:	d3 01       	movw	r26, r6
    41a2:	c2 01       	movw	r24, r4
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	a1 09       	sbc	r26, r1
    41a8:	b1 09       	sbc	r27, r1
    41aa:	8d 83       	std	Y+5, r24	; 0x05
    41ac:	9e 83       	std	Y+6, r25	; 0x06
    41ae:	af 83       	std	Y+7, r26	; 0x07
    41b0:	b8 87       	std	Y+8, r27	; 0x08
    41b2:	93 01       	movw	r18, r6
    41b4:	82 01       	movw	r16, r4
    41b6:	ac 01       	movw	r20, r24
    41b8:	bd 01       	movw	r22, r26
    41ba:	c5 01       	movw	r24, r10
    41bc:	97 de       	rcall	.-722    	; 0x3eec <_ZN8SdVolume6fatPutEmm>
    41be:	88 23       	and	r24, r24
    41c0:	69 f3       	breq	.-38     	; 0x419c <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    41c2:	4d 80       	ldd	r4, Y+5	; 0x05
    41c4:	5e 80       	ldd	r5, Y+6	; 0x06
    41c6:	6f 80       	ldd	r6, Y+7	; 0x07
    41c8:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    41ca:	c4 14       	cp	r12, r4
    41cc:	d5 04       	cpc	r13, r5
    41ce:	e6 04       	cpc	r14, r6
    41d0:	f7 04       	cpc	r15, r7
    41d2:	30 f3       	brcs	.-52     	; 0x41a0 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    41d4:	d1 01       	movw	r26, r2
    41d6:	4d 91       	ld	r20, X+
    41d8:	5d 91       	ld	r21, X+
    41da:	6d 91       	ld	r22, X+
    41dc:	7c 91       	ld	r23, X
    41de:	41 15       	cp	r20, r1
    41e0:	51 05       	cpc	r21, r1
    41e2:	61 05       	cpc	r22, r1
    41e4:	71 05       	cpc	r23, r1
    41e6:	99 f4       	brne	.+38     	; 0x420e <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    41e8:	f1 01       	movw	r30, r2
    41ea:	c0 82       	st	Z, r12
    41ec:	d1 82       	std	Z+1, r13	; 0x01
    41ee:	e2 82       	std	Z+2, r14	; 0x02
    41f0:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    41f2:	99 20       	and	r9, r9
    41f4:	99 f0       	breq	.+38     	; 0x421c <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    41f6:	ff ef       	ldi	r31, 0xFF	; 255
    41f8:	cf 1a       	sub	r12, r31
    41fa:	df 0a       	sbc	r13, r31
    41fc:	ef 0a       	sbc	r14, r31
    41fe:	ff 0a       	sbc	r15, r31
    4200:	d5 01       	movw	r26, r10
    4202:	cd 92       	st	X+, r12
    4204:	dd 92       	st	X+, r13
    4206:	ed 92       	st	X+, r14
    4208:	fc 92       	st	X, r15
    420a:	13 97       	sbiw	r26, 0x03	; 3
    420c:	07 c0       	rjmp	.+14     	; 0x421c <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    420e:	97 01       	movw	r18, r14
    4210:	86 01       	movw	r16, r12
    4212:	c5 01       	movw	r24, r10
    4214:	6b de       	rcall	.-810    	; 0x3eec <_ZN8SdVolume6fatPutEmm>
    4216:	81 11       	cpse	r24, r1
    4218:	e7 cf       	rjmp	.-50     	; 0x41e8 <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    421a:	c0 cf       	rjmp	.-128    	; 0x419c <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    421c:	81 e0       	ldi	r24, 0x01	; 1
}
    421e:	60 96       	adiw	r28, 0x10	; 16
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	1f 91       	pop	r17
    4230:	0f 91       	pop	r16
    4232:	ff 90       	pop	r15
    4234:	ef 90       	pop	r14
    4236:	df 90       	pop	r13
    4238:	cf 90       	pop	r12
    423a:	bf 90       	pop	r11
    423c:	af 90       	pop	r10
    423e:	9f 90       	pop	r9
    4240:	7f 90       	pop	r7
    4242:	6f 90       	pop	r6
    4244:	5f 90       	pop	r5
    4246:	4f 90       	pop	r4
    4248:	3f 90       	pop	r3
    424a:	2f 90       	pop	r2
    424c:	08 95       	ret

0000424e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    424e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4250:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4252:	f8 94       	cli
  if (!initialized) {
    4254:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <_ZN8SPIClass11initializedE>
    4258:	81 11       	cpse	r24, r1
    425a:	27 c0       	rjmp	.+78     	; 0x42aa <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    425c:	eb e4       	ldi	r30, 0x4B	; 75
    425e:	f2 e0       	ldi	r31, 0x02	; 2
    4260:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4262:	e5 e0       	ldi	r30, 0x05	; 5
    4264:	f2 e0       	ldi	r31, 0x02	; 2
    4266:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4268:	e8 2f       	mov	r30, r24
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	ee 0f       	add	r30, r30
    426e:	ff 1f       	adc	r31, r31
    4270:	e0 57       	subi	r30, 0x70	; 112
    4272:	fd 4f       	sbci	r31, 0xFD	; 253
    4274:	a5 91       	lpm	r26, Z+
    4276:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4278:	ec 91       	ld	r30, X
    427a:	e9 23       	and	r30, r25
    427c:	21 f4       	brne	.+8      	; 0x4286 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    427e:	61 e0       	ldi	r22, 0x01	; 1
    4280:	85 e3       	ldi	r24, 0x35	; 53
    4282:	0e 94 14 17 	call	0x2e28	; 0x2e28 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4286:	61 e0       	ldi	r22, 0x01	; 1
    4288:	85 e3       	ldi	r24, 0x35	; 53
    428a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    428e:	8c b5       	in	r24, 0x2c	; 44
    4290:	80 61       	ori	r24, 0x10	; 16
    4292:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4294:	8c b5       	in	r24, 0x2c	; 44
    4296:	80 64       	ori	r24, 0x40	; 64
    4298:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    429a:	61 e0       	ldi	r22, 0x01	; 1
    429c:	84 e3       	ldi	r24, 0x34	; 52
    429e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>
    pinMode(MOSI, OUTPUT);
    42a2:	61 e0       	ldi	r22, 0x01	; 1
    42a4:	83 e3       	ldi	r24, 0x33	; 51
    42a6:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <pinMode>
  }
  initialized++; // reference count
    42aa:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <_ZN8SPIClass11initializedE>
    42ae:	8f 5f       	subi	r24, 0xFF	; 255
    42b0:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    42b4:	cf bf       	out	0x3f, r28	; 63
}
    42b6:	cf 91       	pop	r28
    42b8:	08 95       	ret

000042ba <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    42ba:	08 95       	ret

000042bc <__cmpsf2>:
    42bc:	32 d0       	rcall	.+100    	; 0x4322 <__fp_cmp>
    42be:	08 f4       	brcc	.+2      	; 0x42c2 <__cmpsf2+0x6>
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	08 95       	ret

000042c4 <__fixunssfsi>:
    42c4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fp_splitA>
    42c8:	88 f0       	brcs	.+34     	; 0x42ec <__fixunssfsi+0x28>
    42ca:	9f 57       	subi	r25, 0x7F	; 127
    42cc:	98 f0       	brcs	.+38     	; 0x42f4 <__fixunssfsi+0x30>
    42ce:	b9 2f       	mov	r27, r25
    42d0:	99 27       	eor	r25, r25
    42d2:	b7 51       	subi	r27, 0x17	; 23
    42d4:	b0 f0       	brcs	.+44     	; 0x4302 <__fixunssfsi+0x3e>
    42d6:	e1 f0       	breq	.+56     	; 0x4310 <__fixunssfsi+0x4c>
    42d8:	66 0f       	add	r22, r22
    42da:	77 1f       	adc	r23, r23
    42dc:	88 1f       	adc	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	1a f0       	brmi	.+6      	; 0x42e8 <__fixunssfsi+0x24>
    42e2:	ba 95       	dec	r27
    42e4:	c9 f7       	brne	.-14     	; 0x42d8 <__fixunssfsi+0x14>
    42e6:	14 c0       	rjmp	.+40     	; 0x4310 <__fixunssfsi+0x4c>
    42e8:	b1 30       	cpi	r27, 0x01	; 1
    42ea:	91 f0       	breq	.+36     	; 0x4310 <__fixunssfsi+0x4c>
    42ec:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fp_zero>
    42f0:	b1 e0       	ldi	r27, 0x01	; 1
    42f2:	08 95       	ret
    42f4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_zero>
    42f8:	67 2f       	mov	r22, r23
    42fa:	78 2f       	mov	r23, r24
    42fc:	88 27       	eor	r24, r24
    42fe:	b8 5f       	subi	r27, 0xF8	; 248
    4300:	39 f0       	breq	.+14     	; 0x4310 <__fixunssfsi+0x4c>
    4302:	b9 3f       	cpi	r27, 0xF9	; 249
    4304:	cc f3       	brlt	.-14     	; 0x42f8 <__fixunssfsi+0x34>
    4306:	86 95       	lsr	r24
    4308:	77 95       	ror	r23
    430a:	67 95       	ror	r22
    430c:	b3 95       	inc	r27
    430e:	d9 f7       	brne	.-10     	; 0x4306 <__fixunssfsi+0x42>
    4310:	3e f4       	brtc	.+14     	; 0x4320 <__fixunssfsi+0x5c>
    4312:	90 95       	com	r25
    4314:	80 95       	com	r24
    4316:	70 95       	com	r23
    4318:	61 95       	neg	r22
    431a:	7f 4f       	sbci	r23, 0xFF	; 255
    431c:	8f 4f       	sbci	r24, 0xFF	; 255
    431e:	9f 4f       	sbci	r25, 0xFF	; 255
    4320:	08 95       	ret

00004322 <__fp_cmp>:
    4322:	99 0f       	add	r25, r25
    4324:	00 08       	sbc	r0, r0
    4326:	55 0f       	add	r21, r21
    4328:	aa 0b       	sbc	r26, r26
    432a:	e0 e8       	ldi	r30, 0x80	; 128
    432c:	fe ef       	ldi	r31, 0xFE	; 254
    432e:	16 16       	cp	r1, r22
    4330:	17 06       	cpc	r1, r23
    4332:	e8 07       	cpc	r30, r24
    4334:	f9 07       	cpc	r31, r25
    4336:	c0 f0       	brcs	.+48     	; 0x4368 <__fp_cmp+0x46>
    4338:	12 16       	cp	r1, r18
    433a:	13 06       	cpc	r1, r19
    433c:	e4 07       	cpc	r30, r20
    433e:	f5 07       	cpc	r31, r21
    4340:	98 f0       	brcs	.+38     	; 0x4368 <__fp_cmp+0x46>
    4342:	62 1b       	sub	r22, r18
    4344:	73 0b       	sbc	r23, r19
    4346:	84 0b       	sbc	r24, r20
    4348:	95 0b       	sbc	r25, r21
    434a:	39 f4       	brne	.+14     	; 0x435a <__fp_cmp+0x38>
    434c:	0a 26       	eor	r0, r26
    434e:	61 f0       	breq	.+24     	; 0x4368 <__fp_cmp+0x46>
    4350:	23 2b       	or	r18, r19
    4352:	24 2b       	or	r18, r20
    4354:	25 2b       	or	r18, r21
    4356:	21 f4       	brne	.+8      	; 0x4360 <__fp_cmp+0x3e>
    4358:	08 95       	ret
    435a:	0a 26       	eor	r0, r26
    435c:	09 f4       	brne	.+2      	; 0x4360 <__fp_cmp+0x3e>
    435e:	a1 40       	sbci	r26, 0x01	; 1
    4360:	a6 95       	lsr	r26
    4362:	8f ef       	ldi	r24, 0xFF	; 255
    4364:	81 1d       	adc	r24, r1
    4366:	81 1d       	adc	r24, r1
    4368:	08 95       	ret

0000436a <__gesf2>:
    436a:	db df       	rcall	.-74     	; 0x4322 <__fp_cmp>
    436c:	08 f4       	brcc	.+2      	; 0x4370 <__gesf2+0x6>
    436e:	8f ef       	ldi	r24, 0xFF	; 255
    4370:	08 95       	ret

00004372 <__unordsf2>:
    4372:	d7 df       	rcall	.-82     	; 0x4322 <__fp_cmp>
    4374:	88 0b       	sbc	r24, r24
    4376:	99 0b       	sbc	r25, r25
    4378:	08 95       	ret

0000437a <__mulsi3>:
    437a:	db 01       	movw	r26, r22
    437c:	8f 93       	push	r24
    437e:	9f 93       	push	r25
    4380:	44 d0       	rcall	.+136    	; 0x440a <__muluhisi3>
    4382:	bf 91       	pop	r27
    4384:	af 91       	pop	r26
    4386:	a2 9f       	mul	r26, r18
    4388:	80 0d       	add	r24, r0
    438a:	91 1d       	adc	r25, r1
    438c:	a3 9f       	mul	r26, r19
    438e:	90 0d       	add	r25, r0
    4390:	b2 9f       	mul	r27, r18
    4392:	90 0d       	add	r25, r0
    4394:	11 24       	eor	r1, r1
    4396:	08 95       	ret

00004398 <__udivmodsi4>:
    4398:	a1 e2       	ldi	r26, 0x21	; 33
    439a:	1a 2e       	mov	r1, r26
    439c:	aa 1b       	sub	r26, r26
    439e:	bb 1b       	sub	r27, r27
    43a0:	fd 01       	movw	r30, r26
    43a2:	0d c0       	rjmp	.+26     	; 0x43be <__udivmodsi4_ep>

000043a4 <__udivmodsi4_loop>:
    43a4:	aa 1f       	adc	r26, r26
    43a6:	bb 1f       	adc	r27, r27
    43a8:	ee 1f       	adc	r30, r30
    43aa:	ff 1f       	adc	r31, r31
    43ac:	a2 17       	cp	r26, r18
    43ae:	b3 07       	cpc	r27, r19
    43b0:	e4 07       	cpc	r30, r20
    43b2:	f5 07       	cpc	r31, r21
    43b4:	20 f0       	brcs	.+8      	; 0x43be <__udivmodsi4_ep>
    43b6:	a2 1b       	sub	r26, r18
    43b8:	b3 0b       	sbc	r27, r19
    43ba:	e4 0b       	sbc	r30, r20
    43bc:	f5 0b       	sbc	r31, r21

000043be <__udivmodsi4_ep>:
    43be:	66 1f       	adc	r22, r22
    43c0:	77 1f       	adc	r23, r23
    43c2:	88 1f       	adc	r24, r24
    43c4:	99 1f       	adc	r25, r25
    43c6:	1a 94       	dec	r1
    43c8:	69 f7       	brne	.-38     	; 0x43a4 <__udivmodsi4_loop>
    43ca:	60 95       	com	r22
    43cc:	70 95       	com	r23
    43ce:	80 95       	com	r24
    43d0:	90 95       	com	r25
    43d2:	9b 01       	movw	r18, r22
    43d4:	ac 01       	movw	r20, r24
    43d6:	bd 01       	movw	r22, r26
    43d8:	cf 01       	movw	r24, r30
    43da:	08 95       	ret

000043dc <__tablejump2__>:
    43dc:	ee 0f       	add	r30, r30
    43de:	ff 1f       	adc	r31, r31
    43e0:	88 1f       	adc	r24, r24
    43e2:	8b bf       	out	0x3b, r24	; 59
    43e4:	07 90       	elpm	r0, Z+
    43e6:	f6 91       	elpm	r31, Z
    43e8:	e0 2d       	mov	r30, r0
    43ea:	19 94       	eijmp

000043ec <__umulhisi3>:
    43ec:	a2 9f       	mul	r26, r18
    43ee:	b0 01       	movw	r22, r0
    43f0:	b3 9f       	mul	r27, r19
    43f2:	c0 01       	movw	r24, r0
    43f4:	a3 9f       	mul	r26, r19
    43f6:	70 0d       	add	r23, r0
    43f8:	81 1d       	adc	r24, r1
    43fa:	11 24       	eor	r1, r1
    43fc:	91 1d       	adc	r25, r1
    43fe:	b2 9f       	mul	r27, r18
    4400:	70 0d       	add	r23, r0
    4402:	81 1d       	adc	r24, r1
    4404:	11 24       	eor	r1, r1
    4406:	91 1d       	adc	r25, r1
    4408:	08 95       	ret

0000440a <__muluhisi3>:
    440a:	f0 df       	rcall	.-32     	; 0x43ec <__umulhisi3>
    440c:	a5 9f       	mul	r26, r21
    440e:	90 0d       	add	r25, r0
    4410:	b4 9f       	mul	r27, r20
    4412:	90 0d       	add	r25, r0
    4414:	a4 9f       	mul	r26, r20
    4416:	80 0d       	add	r24, r0
    4418:	91 1d       	adc	r25, r1
    441a:	11 24       	eor	r1, r1
    441c:	08 95       	ret

0000441e <__mulshisi3>:
    441e:	b7 ff       	sbrs	r27, 7
    4420:	f4 cf       	rjmp	.-24     	; 0x440a <__muluhisi3>

00004422 <__mulohisi3>:
    4422:	f3 df       	rcall	.-26     	; 0x440a <__muluhisi3>
    4424:	82 1b       	sub	r24, r18
    4426:	93 0b       	sbc	r25, r19
    4428:	08 95       	ret

0000442a <__muldi3>:
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	1f 93       	push	r17
    4430:	0f 93       	push	r16
    4432:	9a 9d       	mul	r25, r10
    4434:	f0 2d       	mov	r31, r0
    4436:	21 9f       	mul	r18, r17
    4438:	f0 0d       	add	r31, r0
    443a:	8b 9d       	mul	r24, r11
    443c:	f0 0d       	add	r31, r0
    443e:	8a 9d       	mul	r24, r10
    4440:	e0 2d       	mov	r30, r0
    4442:	f1 0d       	add	r31, r1
    4444:	03 9f       	mul	r16, r19
    4446:	f0 0d       	add	r31, r0
    4448:	02 9f       	mul	r16, r18
    444a:	e0 0d       	add	r30, r0
    444c:	f1 1d       	adc	r31, r1
    444e:	4e 9d       	mul	r20, r14
    4450:	e0 0d       	add	r30, r0
    4452:	f1 1d       	adc	r31, r1
    4454:	5e 9d       	mul	r21, r14
    4456:	f0 0d       	add	r31, r0
    4458:	4f 9d       	mul	r20, r15
    445a:	f0 0d       	add	r31, r0
    445c:	7f 93       	push	r23
    445e:	6f 93       	push	r22
    4460:	bf 92       	push	r11
    4462:	af 92       	push	r10
    4464:	5f 93       	push	r21
    4466:	4f 93       	push	r20
    4468:	d5 01       	movw	r26, r10
    446a:	c0 df       	rcall	.-128    	; 0x43ec <__umulhisi3>
    446c:	8b 01       	movw	r16, r22
    446e:	ac 01       	movw	r20, r24
    4470:	d7 01       	movw	r26, r14
    4472:	bc df       	rcall	.-136    	; 0x43ec <__umulhisi3>
    4474:	eb 01       	movw	r28, r22
    4476:	e8 0f       	add	r30, r24
    4478:	f9 1f       	adc	r31, r25
    447a:	d6 01       	movw	r26, r12
    447c:	1f d0       	rcall	.+62     	; 0x44bc <__muldi3_6>
    447e:	2f 91       	pop	r18
    4480:	3f 91       	pop	r19
    4482:	d6 01       	movw	r26, r12
    4484:	b3 df       	rcall	.-154    	; 0x43ec <__umulhisi3>
    4486:	c6 0f       	add	r28, r22
    4488:	d7 1f       	adc	r29, r23
    448a:	e8 1f       	adc	r30, r24
    448c:	f9 1f       	adc	r31, r25
    448e:	af 91       	pop	r26
    4490:	bf 91       	pop	r27
    4492:	14 d0       	rcall	.+40     	; 0x44bc <__muldi3_6>
    4494:	2f 91       	pop	r18
    4496:	3f 91       	pop	r19
    4498:	a9 df       	rcall	.-174    	; 0x43ec <__umulhisi3>
    449a:	c6 0f       	add	r28, r22
    449c:	d7 1f       	adc	r29, r23
    449e:	e8 1f       	adc	r30, r24
    44a0:	f9 1f       	adc	r31, r25
    44a2:	d6 01       	movw	r26, r12
    44a4:	a3 df       	rcall	.-186    	; 0x43ec <__umulhisi3>
    44a6:	e6 0f       	add	r30, r22
    44a8:	f7 1f       	adc	r31, r23
    44aa:	98 01       	movw	r18, r16
    44ac:	be 01       	movw	r22, r28
    44ae:	cf 01       	movw	r24, r30
    44b0:	11 24       	eor	r1, r1
    44b2:	0f 91       	pop	r16
    44b4:	1f 91       	pop	r17
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	08 95       	ret

000044bc <__muldi3_6>:
    44bc:	97 df       	rcall	.-210    	; 0x43ec <__umulhisi3>
    44be:	46 0f       	add	r20, r22
    44c0:	57 1f       	adc	r21, r23
    44c2:	c8 1f       	adc	r28, r24
    44c4:	d9 1f       	adc	r29, r25
    44c6:	08 f4       	brcc	.+2      	; 0x44ca <__muldi3_6+0xe>
    44c8:	31 96       	adiw	r30, 0x01	; 1
    44ca:	08 95       	ret

000044cc <__moddi3>:
    44cc:	68 94       	set
    44ce:	01 c0       	rjmp	.+2      	; 0x44d2 <__divdi3_moddi3>

000044d0 <__divdi3>:
    44d0:	e8 94       	clt

000044d2 <__divdi3_moddi3>:
    44d2:	f9 2f       	mov	r31, r25
    44d4:	f1 2b       	or	r31, r17
    44d6:	0a f0       	brmi	.+2      	; 0x44da <__divdi3_moddi3+0x8>
    44d8:	27 c0       	rjmp	.+78     	; 0x4528 <__udivdi3_umoddi3>
    44da:	a0 e0       	ldi	r26, 0x00	; 0
    44dc:	b0 e0       	ldi	r27, 0x00	; 0
    44de:	e2 e7       	ldi	r30, 0x72	; 114
    44e0:	f2 e2       	ldi	r31, 0x22	; 34
    44e2:	93 c0       	rjmp	.+294    	; 0x460a <__prologue_saves__+0xc>
    44e4:	09 2e       	mov	r0, r25
    44e6:	05 94       	asr	r0
    44e8:	1a f4       	brpl	.+6      	; 0x44f0 <__divdi3_moddi3+0x1e>
    44ea:	79 d0       	rcall	.+242    	; 0x45de <__negdi2>
    44ec:	11 23       	and	r17, r17
    44ee:	92 f4       	brpl	.+36     	; 0x4514 <__divdi3_moddi3+0x42>
    44f0:	f0 e8       	ldi	r31, 0x80	; 128
    44f2:	0f 26       	eor	r0, r31
    44f4:	ff ef       	ldi	r31, 0xFF	; 255
    44f6:	e0 94       	com	r14
    44f8:	f0 94       	com	r15
    44fa:	00 95       	com	r16
    44fc:	10 95       	com	r17
    44fe:	b0 94       	com	r11
    4500:	c0 94       	com	r12
    4502:	d0 94       	com	r13
    4504:	a1 94       	neg	r10
    4506:	bf 0a       	sbc	r11, r31
    4508:	cf 0a       	sbc	r12, r31
    450a:	df 0a       	sbc	r13, r31
    450c:	ef 0a       	sbc	r14, r31
    450e:	ff 0a       	sbc	r15, r31
    4510:	0f 0b       	sbc	r16, r31
    4512:	1f 0b       	sbc	r17, r31
    4514:	13 d0       	rcall	.+38     	; 0x453c <__udivmod64>
    4516:	07 fc       	sbrc	r0, 7
    4518:	62 d0       	rcall	.+196    	; 0x45de <__negdi2>
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	ec e0       	ldi	r30, 0x0C	; 12
    4520:	90 c0       	rjmp	.+288    	; 0x4642 <__epilogue_restores__+0xc>

00004522 <__umoddi3>:
    4522:	68 94       	set
    4524:	01 c0       	rjmp	.+2      	; 0x4528 <__udivdi3_umoddi3>

00004526 <__udivdi3>:
    4526:	e8 94       	clt

00004528 <__udivdi3_umoddi3>:
    4528:	8f 92       	push	r8
    452a:	9f 92       	push	r9
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	05 d0       	rcall	.+10     	; 0x453c <__udivmod64>
    4532:	df 91       	pop	r29
    4534:	cf 91       	pop	r28
    4536:	9f 90       	pop	r9
    4538:	8f 90       	pop	r8
    453a:	08 95       	ret

0000453c <__udivmod64>:
    453c:	88 24       	eor	r8, r8
    453e:	99 24       	eor	r9, r9
    4540:	f4 01       	movw	r30, r8
    4542:	e4 01       	movw	r28, r8
    4544:	b0 e4       	ldi	r27, 0x40	; 64
    4546:	9f 93       	push	r25
    4548:	aa 27       	eor	r26, r26
    454a:	9a 15       	cp	r25, r10
    454c:	8b 04       	cpc	r8, r11
    454e:	9c 04       	cpc	r9, r12
    4550:	ed 05       	cpc	r30, r13
    4552:	fe 05       	cpc	r31, r14
    4554:	cf 05       	cpc	r28, r15
    4556:	d0 07       	cpc	r29, r16
    4558:	a1 07       	cpc	r26, r17
    455a:	98 f4       	brcc	.+38     	; 0x4582 <__udivmod64+0x46>
    455c:	ad 2f       	mov	r26, r29
    455e:	dc 2f       	mov	r29, r28
    4560:	cf 2f       	mov	r28, r31
    4562:	fe 2f       	mov	r31, r30
    4564:	e9 2d       	mov	r30, r9
    4566:	98 2c       	mov	r9, r8
    4568:	89 2e       	mov	r8, r25
    456a:	98 2f       	mov	r25, r24
    456c:	87 2f       	mov	r24, r23
    456e:	76 2f       	mov	r23, r22
    4570:	65 2f       	mov	r22, r21
    4572:	54 2f       	mov	r21, r20
    4574:	43 2f       	mov	r20, r19
    4576:	32 2f       	mov	r19, r18
    4578:	22 27       	eor	r18, r18
    457a:	b8 50       	subi	r27, 0x08	; 8
    457c:	31 f7       	brne	.-52     	; 0x454a <__udivmod64+0xe>
    457e:	bf 91       	pop	r27
    4580:	27 c0       	rjmp	.+78     	; 0x45d0 <__udivmod64+0x94>
    4582:	1b 2e       	mov	r1, r27
    4584:	bf 91       	pop	r27
    4586:	bb 27       	eor	r27, r27
    4588:	22 0f       	add	r18, r18
    458a:	33 1f       	adc	r19, r19
    458c:	44 1f       	adc	r20, r20
    458e:	55 1f       	adc	r21, r21
    4590:	66 1f       	adc	r22, r22
    4592:	77 1f       	adc	r23, r23
    4594:	88 1f       	adc	r24, r24
    4596:	99 1f       	adc	r25, r25
    4598:	88 1c       	adc	r8, r8
    459a:	99 1c       	adc	r9, r9
    459c:	ee 1f       	adc	r30, r30
    459e:	ff 1f       	adc	r31, r31
    45a0:	cc 1f       	adc	r28, r28
    45a2:	dd 1f       	adc	r29, r29
    45a4:	aa 1f       	adc	r26, r26
    45a6:	bb 1f       	adc	r27, r27
    45a8:	8a 14       	cp	r8, r10
    45aa:	9b 04       	cpc	r9, r11
    45ac:	ec 05       	cpc	r30, r12
    45ae:	fd 05       	cpc	r31, r13
    45b0:	ce 05       	cpc	r28, r14
    45b2:	df 05       	cpc	r29, r15
    45b4:	a0 07       	cpc	r26, r16
    45b6:	b1 07       	cpc	r27, r17
    45b8:	48 f0       	brcs	.+18     	; 0x45cc <__udivmod64+0x90>
    45ba:	8a 18       	sub	r8, r10
    45bc:	9b 08       	sbc	r9, r11
    45be:	ec 09       	sbc	r30, r12
    45c0:	fd 09       	sbc	r31, r13
    45c2:	ce 09       	sbc	r28, r14
    45c4:	df 09       	sbc	r29, r15
    45c6:	a0 0b       	sbc	r26, r16
    45c8:	b1 0b       	sbc	r27, r17
    45ca:	21 60       	ori	r18, 0x01	; 1
    45cc:	1a 94       	dec	r1
    45ce:	e1 f6       	brne	.-72     	; 0x4588 <__udivmod64+0x4c>
    45d0:	2e f4       	brtc	.+10     	; 0x45dc <__udivmod64+0xa0>
    45d2:	94 01       	movw	r18, r8
    45d4:	af 01       	movw	r20, r30
    45d6:	be 01       	movw	r22, r28
    45d8:	cd 01       	movw	r24, r26
    45da:	00 0c       	add	r0, r0
    45dc:	08 95       	ret

000045de <__negdi2>:
    45de:	60 95       	com	r22
    45e0:	70 95       	com	r23
    45e2:	80 95       	com	r24
    45e4:	90 95       	com	r25
    45e6:	30 95       	com	r19
    45e8:	40 95       	com	r20
    45ea:	50 95       	com	r21
    45ec:	21 95       	neg	r18
    45ee:	3f 4f       	sbci	r19, 0xFF	; 255
    45f0:	4f 4f       	sbci	r20, 0xFF	; 255
    45f2:	5f 4f       	sbci	r21, 0xFF	; 255
    45f4:	6f 4f       	sbci	r22, 0xFF	; 255
    45f6:	7f 4f       	sbci	r23, 0xFF	; 255
    45f8:	8f 4f       	sbci	r24, 0xFF	; 255
    45fa:	9f 4f       	sbci	r25, 0xFF	; 255
    45fc:	08 95       	ret

000045fe <__prologue_saves__>:
    45fe:	2f 92       	push	r2
    4600:	3f 92       	push	r3
    4602:	4f 92       	push	r4
    4604:	5f 92       	push	r5
    4606:	6f 92       	push	r6
    4608:	7f 92       	push	r7
    460a:	8f 92       	push	r8
    460c:	9f 92       	push	r9
    460e:	af 92       	push	r10
    4610:	bf 92       	push	r11
    4612:	cf 92       	push	r12
    4614:	df 92       	push	r13
    4616:	ef 92       	push	r14
    4618:	ff 92       	push	r15
    461a:	0f 93       	push	r16
    461c:	1f 93       	push	r17
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
    4622:	cd b7       	in	r28, 0x3d	; 61
    4624:	de b7       	in	r29, 0x3e	; 62
    4626:	ca 1b       	sub	r28, r26
    4628:	db 0b       	sbc	r29, r27
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	de bf       	out	0x3e, r29	; 62
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	cd bf       	out	0x3d, r28	; 61
    4634:	19 94       	eijmp

00004636 <__epilogue_restores__>:
    4636:	2a 88       	ldd	r2, Y+18	; 0x12
    4638:	39 88       	ldd	r3, Y+17	; 0x11
    463a:	48 88       	ldd	r4, Y+16	; 0x10
    463c:	5f 84       	ldd	r5, Y+15	; 0x0f
    463e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4640:	7d 84       	ldd	r7, Y+13	; 0x0d
    4642:	8c 84       	ldd	r8, Y+12	; 0x0c
    4644:	9b 84       	ldd	r9, Y+11	; 0x0b
    4646:	aa 84       	ldd	r10, Y+10	; 0x0a
    4648:	b9 84       	ldd	r11, Y+9	; 0x09
    464a:	c8 84       	ldd	r12, Y+8	; 0x08
    464c:	df 80       	ldd	r13, Y+7	; 0x07
    464e:	ee 80       	ldd	r14, Y+6	; 0x06
    4650:	fd 80       	ldd	r15, Y+5	; 0x05
    4652:	0c 81       	ldd	r16, Y+4	; 0x04
    4654:	1b 81       	ldd	r17, Y+3	; 0x03
    4656:	aa 81       	ldd	r26, Y+2	; 0x02
    4658:	b9 81       	ldd	r27, Y+1	; 0x01
    465a:	ce 0f       	add	r28, r30
    465c:	d1 1d       	adc	r29, r1
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	f8 94       	cli
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	cd bf       	out	0x3d, r28	; 61
    4668:	ed 01       	movw	r28, r26
    466a:	08 95       	ret

0000466c <__ashldi3>:
    466c:	0f 93       	push	r16
    466e:	08 30       	cpi	r16, 0x08	; 8
    4670:	90 f0       	brcs	.+36     	; 0x4696 <__ashldi3+0x2a>
    4672:	98 2f       	mov	r25, r24
    4674:	87 2f       	mov	r24, r23
    4676:	76 2f       	mov	r23, r22
    4678:	65 2f       	mov	r22, r21
    467a:	54 2f       	mov	r21, r20
    467c:	43 2f       	mov	r20, r19
    467e:	32 2f       	mov	r19, r18
    4680:	22 27       	eor	r18, r18
    4682:	08 50       	subi	r16, 0x08	; 8
    4684:	f4 cf       	rjmp	.-24     	; 0x466e <__ashldi3+0x2>
    4686:	22 0f       	add	r18, r18
    4688:	33 1f       	adc	r19, r19
    468a:	44 1f       	adc	r20, r20
    468c:	55 1f       	adc	r21, r21
    468e:	66 1f       	adc	r22, r22
    4690:	77 1f       	adc	r23, r23
    4692:	88 1f       	adc	r24, r24
    4694:	99 1f       	adc	r25, r25
    4696:	0a 95       	dec	r16
    4698:	b2 f7       	brpl	.-20     	; 0x4686 <__ashldi3+0x1a>
    469a:	0f 91       	pop	r16
    469c:	08 95       	ret

0000469e <__ashrdi3>:
    469e:	97 fb       	bst	r25, 7
    46a0:	10 f8       	bld	r1, 0

000046a2 <__lshrdi3>:
    46a2:	16 94       	lsr	r1
    46a4:	00 08       	sbc	r0, r0
    46a6:	0f 93       	push	r16
    46a8:	08 30       	cpi	r16, 0x08	; 8
    46aa:	98 f0       	brcs	.+38     	; 0x46d2 <__lshrdi3+0x30>
    46ac:	08 50       	subi	r16, 0x08	; 8
    46ae:	23 2f       	mov	r18, r19
    46b0:	34 2f       	mov	r19, r20
    46b2:	45 2f       	mov	r20, r21
    46b4:	56 2f       	mov	r21, r22
    46b6:	67 2f       	mov	r22, r23
    46b8:	78 2f       	mov	r23, r24
    46ba:	89 2f       	mov	r24, r25
    46bc:	90 2d       	mov	r25, r0
    46be:	f4 cf       	rjmp	.-24     	; 0x46a8 <__lshrdi3+0x6>
    46c0:	05 94       	asr	r0
    46c2:	97 95       	ror	r25
    46c4:	87 95       	ror	r24
    46c6:	77 95       	ror	r23
    46c8:	67 95       	ror	r22
    46ca:	57 95       	ror	r21
    46cc:	47 95       	ror	r20
    46ce:	37 95       	ror	r19
    46d0:	27 95       	ror	r18
    46d2:	0a 95       	dec	r16
    46d4:	aa f7       	brpl	.-22     	; 0x46c0 <__lshrdi3+0x1e>
    46d6:	0f 91       	pop	r16
    46d8:	08 95       	ret

000046da <__adddi3>:
    46da:	2a 0d       	add	r18, r10
    46dc:	3b 1d       	adc	r19, r11
    46de:	4c 1d       	adc	r20, r12
    46e0:	5d 1d       	adc	r21, r13
    46e2:	6e 1d       	adc	r22, r14
    46e4:	7f 1d       	adc	r23, r15
    46e6:	80 1f       	adc	r24, r16
    46e8:	91 1f       	adc	r25, r17
    46ea:	08 95       	ret

000046ec <__subdi3>:
    46ec:	2a 19       	sub	r18, r10
    46ee:	3b 09       	sbc	r19, r11
    46f0:	4c 09       	sbc	r20, r12
    46f2:	5d 09       	sbc	r21, r13
    46f4:	6e 09       	sbc	r22, r14
    46f6:	7f 09       	sbc	r23, r15
    46f8:	80 0b       	sbc	r24, r16
    46fa:	91 0b       	sbc	r25, r17
    46fc:	08 95       	ret

000046fe <__cmpdi2_s8>:
    46fe:	00 24       	eor	r0, r0
    4700:	a7 fd       	sbrc	r26, 7
    4702:	00 94       	com	r0
    4704:	2a 17       	cp	r18, r26
    4706:	30 05       	cpc	r19, r0
    4708:	40 05       	cpc	r20, r0
    470a:	50 05       	cpc	r21, r0
    470c:	60 05       	cpc	r22, r0
    470e:	70 05       	cpc	r23, r0
    4710:	80 05       	cpc	r24, r0
    4712:	90 05       	cpc	r25, r0
    4714:	08 95       	ret

00004716 <malloc>:
    4716:	0f 93       	push	r16
    4718:	1f 93       	push	r17
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
    471e:	82 30       	cpi	r24, 0x02	; 2
    4720:	91 05       	cpc	r25, r1
    4722:	10 f4       	brcc	.+4      	; 0x4728 <malloc+0x12>
    4724:	82 e0       	ldi	r24, 0x02	; 2
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	e0 91 2a 09 	lds	r30, 0x092A	; 0x80092a <__flp>
    472c:	f0 91 2b 09 	lds	r31, 0x092B	; 0x80092b <__flp+0x1>
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	a0 e0       	ldi	r26, 0x00	; 0
    4736:	b0 e0       	ldi	r27, 0x00	; 0
    4738:	30 97       	sbiw	r30, 0x00	; 0
    473a:	19 f1       	breq	.+70     	; 0x4782 <malloc+0x6c>
    473c:	40 81       	ld	r20, Z
    473e:	51 81       	ldd	r21, Z+1	; 0x01
    4740:	02 81       	ldd	r16, Z+2	; 0x02
    4742:	13 81       	ldd	r17, Z+3	; 0x03
    4744:	48 17       	cp	r20, r24
    4746:	59 07       	cpc	r21, r25
    4748:	c8 f0       	brcs	.+50     	; 0x477c <malloc+0x66>
    474a:	84 17       	cp	r24, r20
    474c:	95 07       	cpc	r25, r21
    474e:	69 f4       	brne	.+26     	; 0x476a <malloc+0x54>
    4750:	10 97       	sbiw	r26, 0x00	; 0
    4752:	31 f0       	breq	.+12     	; 0x4760 <malloc+0x4a>
    4754:	12 96       	adiw	r26, 0x02	; 2
    4756:	0c 93       	st	X, r16
    4758:	12 97       	sbiw	r26, 0x02	; 2
    475a:	13 96       	adiw	r26, 0x03	; 3
    475c:	1c 93       	st	X, r17
    475e:	27 c0       	rjmp	.+78     	; 0x47ae <malloc+0x98>
    4760:	00 93 2a 09 	sts	0x092A, r16	; 0x80092a <__flp>
    4764:	10 93 2b 09 	sts	0x092B, r17	; 0x80092b <__flp+0x1>
    4768:	22 c0       	rjmp	.+68     	; 0x47ae <malloc+0x98>
    476a:	21 15       	cp	r18, r1
    476c:	31 05       	cpc	r19, r1
    476e:	19 f0       	breq	.+6      	; 0x4776 <malloc+0x60>
    4770:	42 17       	cp	r20, r18
    4772:	53 07       	cpc	r21, r19
    4774:	18 f4       	brcc	.+6      	; 0x477c <malloc+0x66>
    4776:	9a 01       	movw	r18, r20
    4778:	bd 01       	movw	r22, r26
    477a:	ef 01       	movw	r28, r30
    477c:	df 01       	movw	r26, r30
    477e:	f8 01       	movw	r30, r16
    4780:	db cf       	rjmp	.-74     	; 0x4738 <malloc+0x22>
    4782:	21 15       	cp	r18, r1
    4784:	31 05       	cpc	r19, r1
    4786:	f9 f0       	breq	.+62     	; 0x47c6 <malloc+0xb0>
    4788:	28 1b       	sub	r18, r24
    478a:	39 0b       	sbc	r19, r25
    478c:	24 30       	cpi	r18, 0x04	; 4
    478e:	31 05       	cpc	r19, r1
    4790:	80 f4       	brcc	.+32     	; 0x47b2 <malloc+0x9c>
    4792:	8a 81       	ldd	r24, Y+2	; 0x02
    4794:	9b 81       	ldd	r25, Y+3	; 0x03
    4796:	61 15       	cp	r22, r1
    4798:	71 05       	cpc	r23, r1
    479a:	21 f0       	breq	.+8      	; 0x47a4 <malloc+0x8e>
    479c:	fb 01       	movw	r30, r22
    479e:	93 83       	std	Z+3, r25	; 0x03
    47a0:	82 83       	std	Z+2, r24	; 0x02
    47a2:	04 c0       	rjmp	.+8      	; 0x47ac <malloc+0x96>
    47a4:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__flp+0x1>
    47a8:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__flp>
    47ac:	fe 01       	movw	r30, r28
    47ae:	32 96       	adiw	r30, 0x02	; 2
    47b0:	44 c0       	rjmp	.+136    	; 0x483a <malloc+0x124>
    47b2:	fe 01       	movw	r30, r28
    47b4:	e2 0f       	add	r30, r18
    47b6:	f3 1f       	adc	r31, r19
    47b8:	81 93       	st	Z+, r24
    47ba:	91 93       	st	Z+, r25
    47bc:	22 50       	subi	r18, 0x02	; 2
    47be:	31 09       	sbc	r19, r1
    47c0:	39 83       	std	Y+1, r19	; 0x01
    47c2:	28 83       	st	Y, r18
    47c4:	3a c0       	rjmp	.+116    	; 0x483a <malloc+0x124>
    47c6:	20 91 28 09 	lds	r18, 0x0928	; 0x800928 <__brkval>
    47ca:	30 91 29 09 	lds	r19, 0x0929	; 0x800929 <__brkval+0x1>
    47ce:	23 2b       	or	r18, r19
    47d0:	41 f4       	brne	.+16     	; 0x47e2 <malloc+0xcc>
    47d2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    47d6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    47da:	30 93 29 09 	sts	0x0929, r19	; 0x800929 <__brkval+0x1>
    47de:	20 93 28 09 	sts	0x0928, r18	; 0x800928 <__brkval>
    47e2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    47e6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    47ea:	21 15       	cp	r18, r1
    47ec:	31 05       	cpc	r19, r1
    47ee:	41 f4       	brne	.+16     	; 0x4800 <malloc+0xea>
    47f0:	2d b7       	in	r18, 0x3d	; 61
    47f2:	3e b7       	in	r19, 0x3e	; 62
    47f4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    47f8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    47fc:	24 1b       	sub	r18, r20
    47fe:	35 0b       	sbc	r19, r21
    4800:	e0 91 28 09 	lds	r30, 0x0928	; 0x800928 <__brkval>
    4804:	f0 91 29 09 	lds	r31, 0x0929	; 0x800929 <__brkval+0x1>
    4808:	e2 17       	cp	r30, r18
    480a:	f3 07       	cpc	r31, r19
    480c:	a0 f4       	brcc	.+40     	; 0x4836 <malloc+0x120>
    480e:	2e 1b       	sub	r18, r30
    4810:	3f 0b       	sbc	r19, r31
    4812:	28 17       	cp	r18, r24
    4814:	39 07       	cpc	r19, r25
    4816:	78 f0       	brcs	.+30     	; 0x4836 <malloc+0x120>
    4818:	ac 01       	movw	r20, r24
    481a:	4e 5f       	subi	r20, 0xFE	; 254
    481c:	5f 4f       	sbci	r21, 0xFF	; 255
    481e:	24 17       	cp	r18, r20
    4820:	35 07       	cpc	r19, r21
    4822:	48 f0       	brcs	.+18     	; 0x4836 <malloc+0x120>
    4824:	4e 0f       	add	r20, r30
    4826:	5f 1f       	adc	r21, r31
    4828:	50 93 29 09 	sts	0x0929, r21	; 0x800929 <__brkval+0x1>
    482c:	40 93 28 09 	sts	0x0928, r20	; 0x800928 <__brkval>
    4830:	81 93       	st	Z+, r24
    4832:	91 93       	st	Z+, r25
    4834:	02 c0       	rjmp	.+4      	; 0x483a <malloc+0x124>
    4836:	e0 e0       	ldi	r30, 0x00	; 0
    4838:	f0 e0       	ldi	r31, 0x00	; 0
    483a:	cf 01       	movw	r24, r30
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	1f 91       	pop	r17
    4842:	0f 91       	pop	r16
    4844:	08 95       	ret

00004846 <free>:
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	00 97       	sbiw	r24, 0x00	; 0
    484c:	09 f4       	brne	.+2      	; 0x4850 <free+0xa>
    484e:	81 c0       	rjmp	.+258    	; 0x4952 <free+0x10c>
    4850:	fc 01       	movw	r30, r24
    4852:	32 97       	sbiw	r30, 0x02	; 2
    4854:	13 82       	std	Z+3, r1	; 0x03
    4856:	12 82       	std	Z+2, r1	; 0x02
    4858:	a0 91 2a 09 	lds	r26, 0x092A	; 0x80092a <__flp>
    485c:	b0 91 2b 09 	lds	r27, 0x092B	; 0x80092b <__flp+0x1>
    4860:	10 97       	sbiw	r26, 0x00	; 0
    4862:	81 f4       	brne	.+32     	; 0x4884 <free+0x3e>
    4864:	20 81       	ld	r18, Z
    4866:	31 81       	ldd	r19, Z+1	; 0x01
    4868:	82 0f       	add	r24, r18
    486a:	93 1f       	adc	r25, r19
    486c:	20 91 28 09 	lds	r18, 0x0928	; 0x800928 <__brkval>
    4870:	30 91 29 09 	lds	r19, 0x0929	; 0x800929 <__brkval+0x1>
    4874:	28 17       	cp	r18, r24
    4876:	39 07       	cpc	r19, r25
    4878:	51 f5       	brne	.+84     	; 0x48ce <free+0x88>
    487a:	f0 93 29 09 	sts	0x0929, r31	; 0x800929 <__brkval+0x1>
    487e:	e0 93 28 09 	sts	0x0928, r30	; 0x800928 <__brkval>
    4882:	67 c0       	rjmp	.+206    	; 0x4952 <free+0x10c>
    4884:	ed 01       	movw	r28, r26
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	ce 17       	cp	r28, r30
    488c:	df 07       	cpc	r29, r31
    488e:	40 f4       	brcc	.+16     	; 0x48a0 <free+0x5a>
    4890:	4a 81       	ldd	r20, Y+2	; 0x02
    4892:	5b 81       	ldd	r21, Y+3	; 0x03
    4894:	9e 01       	movw	r18, r28
    4896:	41 15       	cp	r20, r1
    4898:	51 05       	cpc	r21, r1
    489a:	f1 f0       	breq	.+60     	; 0x48d8 <free+0x92>
    489c:	ea 01       	movw	r28, r20
    489e:	f5 cf       	rjmp	.-22     	; 0x488a <free+0x44>
    48a0:	d3 83       	std	Z+3, r29	; 0x03
    48a2:	c2 83       	std	Z+2, r28	; 0x02
    48a4:	40 81       	ld	r20, Z
    48a6:	51 81       	ldd	r21, Z+1	; 0x01
    48a8:	84 0f       	add	r24, r20
    48aa:	95 1f       	adc	r25, r21
    48ac:	c8 17       	cp	r28, r24
    48ae:	d9 07       	cpc	r29, r25
    48b0:	59 f4       	brne	.+22     	; 0x48c8 <free+0x82>
    48b2:	88 81       	ld	r24, Y
    48b4:	99 81       	ldd	r25, Y+1	; 0x01
    48b6:	84 0f       	add	r24, r20
    48b8:	95 1f       	adc	r25, r21
    48ba:	02 96       	adiw	r24, 0x02	; 2
    48bc:	91 83       	std	Z+1, r25	; 0x01
    48be:	80 83       	st	Z, r24
    48c0:	8a 81       	ldd	r24, Y+2	; 0x02
    48c2:	9b 81       	ldd	r25, Y+3	; 0x03
    48c4:	93 83       	std	Z+3, r25	; 0x03
    48c6:	82 83       	std	Z+2, r24	; 0x02
    48c8:	21 15       	cp	r18, r1
    48ca:	31 05       	cpc	r19, r1
    48cc:	29 f4       	brne	.+10     	; 0x48d8 <free+0x92>
    48ce:	f0 93 2b 09 	sts	0x092B, r31	; 0x80092b <__flp+0x1>
    48d2:	e0 93 2a 09 	sts	0x092A, r30	; 0x80092a <__flp>
    48d6:	3d c0       	rjmp	.+122    	; 0x4952 <free+0x10c>
    48d8:	e9 01       	movw	r28, r18
    48da:	fb 83       	std	Y+3, r31	; 0x03
    48dc:	ea 83       	std	Y+2, r30	; 0x02
    48de:	49 91       	ld	r20, Y+
    48e0:	59 91       	ld	r21, Y+
    48e2:	c4 0f       	add	r28, r20
    48e4:	d5 1f       	adc	r29, r21
    48e6:	ec 17       	cp	r30, r28
    48e8:	fd 07       	cpc	r31, r29
    48ea:	61 f4       	brne	.+24     	; 0x4904 <free+0xbe>
    48ec:	80 81       	ld	r24, Z
    48ee:	91 81       	ldd	r25, Z+1	; 0x01
    48f0:	84 0f       	add	r24, r20
    48f2:	95 1f       	adc	r25, r21
    48f4:	02 96       	adiw	r24, 0x02	; 2
    48f6:	e9 01       	movw	r28, r18
    48f8:	99 83       	std	Y+1, r25	; 0x01
    48fa:	88 83       	st	Y, r24
    48fc:	82 81       	ldd	r24, Z+2	; 0x02
    48fe:	93 81       	ldd	r25, Z+3	; 0x03
    4900:	9b 83       	std	Y+3, r25	; 0x03
    4902:	8a 83       	std	Y+2, r24	; 0x02
    4904:	e0 e0       	ldi	r30, 0x00	; 0
    4906:	f0 e0       	ldi	r31, 0x00	; 0
    4908:	12 96       	adiw	r26, 0x02	; 2
    490a:	8d 91       	ld	r24, X+
    490c:	9c 91       	ld	r25, X
    490e:	13 97       	sbiw	r26, 0x03	; 3
    4910:	00 97       	sbiw	r24, 0x00	; 0
    4912:	19 f0       	breq	.+6      	; 0x491a <free+0xd4>
    4914:	fd 01       	movw	r30, r26
    4916:	dc 01       	movw	r26, r24
    4918:	f7 cf       	rjmp	.-18     	; 0x4908 <free+0xc2>
    491a:	8d 91       	ld	r24, X+
    491c:	9c 91       	ld	r25, X
    491e:	11 97       	sbiw	r26, 0x01	; 1
    4920:	9d 01       	movw	r18, r26
    4922:	2e 5f       	subi	r18, 0xFE	; 254
    4924:	3f 4f       	sbci	r19, 0xFF	; 255
    4926:	82 0f       	add	r24, r18
    4928:	93 1f       	adc	r25, r19
    492a:	20 91 28 09 	lds	r18, 0x0928	; 0x800928 <__brkval>
    492e:	30 91 29 09 	lds	r19, 0x0929	; 0x800929 <__brkval+0x1>
    4932:	28 17       	cp	r18, r24
    4934:	39 07       	cpc	r19, r25
    4936:	69 f4       	brne	.+26     	; 0x4952 <free+0x10c>
    4938:	30 97       	sbiw	r30, 0x00	; 0
    493a:	29 f4       	brne	.+10     	; 0x4946 <free+0x100>
    493c:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__flp+0x1>
    4940:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__flp>
    4944:	02 c0       	rjmp	.+4      	; 0x494a <free+0x104>
    4946:	13 82       	std	Z+3, r1	; 0x03
    4948:	12 82       	std	Z+2, r1	; 0x02
    494a:	b0 93 29 09 	sts	0x0929, r27	; 0x800929 <__brkval+0x1>
    494e:	a0 93 28 09 	sts	0x0928, r26	; 0x800928 <__brkval>
    4952:	df 91       	pop	r29
    4954:	cf 91       	pop	r28
    4956:	08 95       	ret

00004958 <realloc>:
    4958:	6f 92       	push	r6
    495a:	7f 92       	push	r7
    495c:	8f 92       	push	r8
    495e:	9f 92       	push	r9
    4960:	af 92       	push	r10
    4962:	bf 92       	push	r11
    4964:	cf 92       	push	r12
    4966:	df 92       	push	r13
    4968:	ef 92       	push	r14
    496a:	ff 92       	push	r15
    496c:	0f 93       	push	r16
    496e:	1f 93       	push	r17
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	81 f4       	brne	.+32     	; 0x4998 <realloc+0x40>
    4978:	cb 01       	movw	r24, r22
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	ff 90       	pop	r15
    4984:	ef 90       	pop	r14
    4986:	df 90       	pop	r13
    4988:	cf 90       	pop	r12
    498a:	bf 90       	pop	r11
    498c:	af 90       	pop	r10
    498e:	9f 90       	pop	r9
    4990:	8f 90       	pop	r8
    4992:	7f 90       	pop	r7
    4994:	6f 90       	pop	r6
    4996:	bf ce       	rjmp	.-642    	; 0x4716 <malloc>
    4998:	fc 01       	movw	r30, r24
    499a:	e6 0f       	add	r30, r22
    499c:	f7 1f       	adc	r31, r23
    499e:	9c 01       	movw	r18, r24
    49a0:	22 50       	subi	r18, 0x02	; 2
    49a2:	31 09       	sbc	r19, r1
    49a4:	e2 17       	cp	r30, r18
    49a6:	f3 07       	cpc	r31, r19
    49a8:	08 f4       	brcc	.+2      	; 0x49ac <realloc+0x54>
    49aa:	a5 c0       	rjmp	.+330    	; 0x4af6 <realloc+0x19e>
    49ac:	ec 01       	movw	r28, r24
    49ae:	d9 01       	movw	r26, r18
    49b0:	0d 91       	ld	r16, X+
    49b2:	1c 91       	ld	r17, X
    49b4:	11 97       	sbiw	r26, 0x01	; 1
    49b6:	06 17       	cp	r16, r22
    49b8:	17 07       	cpc	r17, r23
    49ba:	a8 f0       	brcs	.+42     	; 0x49e6 <realloc+0x8e>
    49bc:	05 30       	cpi	r16, 0x05	; 5
    49be:	11 05       	cpc	r17, r1
    49c0:	08 f4       	brcc	.+2      	; 0x49c4 <realloc+0x6c>
    49c2:	97 c0       	rjmp	.+302    	; 0x4af2 <realloc+0x19a>
    49c4:	c8 01       	movw	r24, r16
    49c6:	04 97       	sbiw	r24, 0x04	; 4
    49c8:	86 17       	cp	r24, r22
    49ca:	97 07       	cpc	r25, r23
    49cc:	08 f4       	brcc	.+2      	; 0x49d0 <realloc+0x78>
    49ce:	91 c0       	rjmp	.+290    	; 0x4af2 <realloc+0x19a>
    49d0:	02 50       	subi	r16, 0x02	; 2
    49d2:	11 09       	sbc	r17, r1
    49d4:	06 1b       	sub	r16, r22
    49d6:	17 0b       	sbc	r17, r23
    49d8:	01 93       	st	Z+, r16
    49da:	11 93       	st	Z+, r17
    49dc:	6d 93       	st	X+, r22
    49de:	7c 93       	st	X, r23
    49e0:	cf 01       	movw	r24, r30
    49e2:	31 df       	rcall	.-414    	; 0x4846 <free>
    49e4:	86 c0       	rjmp	.+268    	; 0x4af2 <realloc+0x19a>
    49e6:	5b 01       	movw	r10, r22
    49e8:	a0 1a       	sub	r10, r16
    49ea:	b1 0a       	sbc	r11, r17
    49ec:	4c 01       	movw	r8, r24
    49ee:	80 0e       	add	r8, r16
    49f0:	91 1e       	adc	r9, r17
    49f2:	a0 91 2a 09 	lds	r26, 0x092A	; 0x80092a <__flp>
    49f6:	b0 91 2b 09 	lds	r27, 0x092B	; 0x80092b <__flp+0x1>
    49fa:	61 2c       	mov	r6, r1
    49fc:	71 2c       	mov	r7, r1
    49fe:	e1 2c       	mov	r14, r1
    4a00:	f1 2c       	mov	r15, r1
    4a02:	10 97       	sbiw	r26, 0x00	; 0
    4a04:	09 f4       	brne	.+2      	; 0x4a08 <realloc+0xb0>
    4a06:	46 c0       	rjmp	.+140    	; 0x4a94 <realloc+0x13c>
    4a08:	8d 91       	ld	r24, X+
    4a0a:	9c 91       	ld	r25, X
    4a0c:	11 97       	sbiw	r26, 0x01	; 1
    4a0e:	a8 15       	cp	r26, r8
    4a10:	b9 05       	cpc	r27, r9
    4a12:	b1 f5       	brne	.+108    	; 0x4a80 <realloc+0x128>
    4a14:	6c 01       	movw	r12, r24
    4a16:	42 e0       	ldi	r20, 0x02	; 2
    4a18:	c4 0e       	add	r12, r20
    4a1a:	d1 1c       	adc	r13, r1
    4a1c:	ca 14       	cp	r12, r10
    4a1e:	db 04       	cpc	r13, r11
    4a20:	78 f1       	brcs	.+94     	; 0x4a80 <realloc+0x128>
    4a22:	4c 01       	movw	r8, r24
    4a24:	8a 18       	sub	r8, r10
    4a26:	9b 08       	sbc	r9, r11
    4a28:	64 01       	movw	r12, r8
    4a2a:	42 e0       	ldi	r20, 0x02	; 2
    4a2c:	c4 0e       	add	r12, r20
    4a2e:	d1 1c       	adc	r13, r1
    4a30:	12 96       	adiw	r26, 0x02	; 2
    4a32:	bc 90       	ld	r11, X
    4a34:	12 97       	sbiw	r26, 0x02	; 2
    4a36:	13 96       	adiw	r26, 0x03	; 3
    4a38:	ac 91       	ld	r26, X
    4a3a:	b5 e0       	ldi	r27, 0x05	; 5
    4a3c:	cb 16       	cp	r12, r27
    4a3e:	d1 04       	cpc	r13, r1
    4a40:	40 f0       	brcs	.+16     	; 0x4a52 <realloc+0xfa>
    4a42:	b2 82       	std	Z+2, r11	; 0x02
    4a44:	a3 83       	std	Z+3, r26	; 0x03
    4a46:	91 82       	std	Z+1, r9	; 0x01
    4a48:	80 82       	st	Z, r8
    4a4a:	d9 01       	movw	r26, r18
    4a4c:	6d 93       	st	X+, r22
    4a4e:	7c 93       	st	X, r23
    4a50:	09 c0       	rjmp	.+18     	; 0x4a64 <realloc+0x10c>
    4a52:	0e 5f       	subi	r16, 0xFE	; 254
    4a54:	1f 4f       	sbci	r17, 0xFF	; 255
    4a56:	80 0f       	add	r24, r16
    4a58:	91 1f       	adc	r25, r17
    4a5a:	f9 01       	movw	r30, r18
    4a5c:	91 83       	std	Z+1, r25	; 0x01
    4a5e:	80 83       	st	Z, r24
    4a60:	eb 2d       	mov	r30, r11
    4a62:	fa 2f       	mov	r31, r26
    4a64:	e1 14       	cp	r14, r1
    4a66:	f1 04       	cpc	r15, r1
    4a68:	31 f0       	breq	.+12     	; 0x4a76 <realloc+0x11e>
    4a6a:	d7 01       	movw	r26, r14
    4a6c:	13 96       	adiw	r26, 0x03	; 3
    4a6e:	fc 93       	st	X, r31
    4a70:	ee 93       	st	-X, r30
    4a72:	12 97       	sbiw	r26, 0x02	; 2
    4a74:	3e c0       	rjmp	.+124    	; 0x4af2 <realloc+0x19a>
    4a76:	f0 93 2b 09 	sts	0x092B, r31	; 0x80092b <__flp+0x1>
    4a7a:	e0 93 2a 09 	sts	0x092A, r30	; 0x80092a <__flp>
    4a7e:	39 c0       	rjmp	.+114    	; 0x4af2 <realloc+0x19a>
    4a80:	68 16       	cp	r6, r24
    4a82:	79 06       	cpc	r7, r25
    4a84:	08 f4       	brcc	.+2      	; 0x4a88 <realloc+0x130>
    4a86:	3c 01       	movw	r6, r24
    4a88:	7d 01       	movw	r14, r26
    4a8a:	12 96       	adiw	r26, 0x02	; 2
    4a8c:	0d 90       	ld	r0, X+
    4a8e:	bc 91       	ld	r27, X
    4a90:	a0 2d       	mov	r26, r0
    4a92:	b7 cf       	rjmp	.-146    	; 0x4a02 <realloc+0xaa>
    4a94:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__brkval>
    4a98:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <__brkval+0x1>
    4a9c:	88 16       	cp	r8, r24
    4a9e:	99 06       	cpc	r9, r25
    4aa0:	e1 f4       	brne	.+56     	; 0x4ada <realloc+0x182>
    4aa2:	66 16       	cp	r6, r22
    4aa4:	77 06       	cpc	r7, r23
    4aa6:	c8 f4       	brcc	.+50     	; 0x4ada <realloc+0x182>
    4aa8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    4aac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	41 f4       	brne	.+16     	; 0x4ac4 <realloc+0x16c>
    4ab4:	8d b7       	in	r24, 0x3d	; 61
    4ab6:	9e b7       	in	r25, 0x3e	; 62
    4ab8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4abc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4ac0:	84 1b       	sub	r24, r20
    4ac2:	95 0b       	sbc	r25, r21
    4ac4:	e8 17       	cp	r30, r24
    4ac6:	f9 07       	cpc	r31, r25
    4ac8:	b0 f4       	brcc	.+44     	; 0x4af6 <realloc+0x19e>
    4aca:	f0 93 29 09 	sts	0x0929, r31	; 0x800929 <__brkval+0x1>
    4ace:	e0 93 28 09 	sts	0x0928, r30	; 0x800928 <__brkval>
    4ad2:	f9 01       	movw	r30, r18
    4ad4:	71 83       	std	Z+1, r23	; 0x01
    4ad6:	60 83       	st	Z, r22
    4ad8:	0c c0       	rjmp	.+24     	; 0x4af2 <realloc+0x19a>
    4ada:	cb 01       	movw	r24, r22
    4adc:	1c de       	rcall	.-968    	; 0x4716 <malloc>
    4ade:	7c 01       	movw	r14, r24
    4ae0:	00 97       	sbiw	r24, 0x00	; 0
    4ae2:	49 f0       	breq	.+18     	; 0x4af6 <realloc+0x19e>
    4ae4:	a8 01       	movw	r20, r16
    4ae6:	be 01       	movw	r22, r28
    4ae8:	17 d0       	rcall	.+46     	; 0x4b18 <memcpy>
    4aea:	ce 01       	movw	r24, r28
    4aec:	ac de       	rcall	.-680    	; 0x4846 <free>
    4aee:	c7 01       	movw	r24, r14
    4af0:	04 c0       	rjmp	.+8      	; 0x4afa <realloc+0x1a2>
    4af2:	ce 01       	movw	r24, r28
    4af4:	02 c0       	rjmp	.+4      	; 0x4afa <realloc+0x1a2>
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	df 91       	pop	r29
    4afc:	cf 91       	pop	r28
    4afe:	1f 91       	pop	r17
    4b00:	0f 91       	pop	r16
    4b02:	ff 90       	pop	r15
    4b04:	ef 90       	pop	r14
    4b06:	df 90       	pop	r13
    4b08:	cf 90       	pop	r12
    4b0a:	bf 90       	pop	r11
    4b0c:	af 90       	pop	r10
    4b0e:	9f 90       	pop	r9
    4b10:	8f 90       	pop	r8
    4b12:	7f 90       	pop	r7
    4b14:	6f 90       	pop	r6
    4b16:	08 95       	ret

00004b18 <memcpy>:
    4b18:	fb 01       	movw	r30, r22
    4b1a:	dc 01       	movw	r26, r24
    4b1c:	02 c0       	rjmp	.+4      	; 0x4b22 <memcpy+0xa>
    4b1e:	01 90       	ld	r0, Z+
    4b20:	0d 92       	st	X+, r0
    4b22:	41 50       	subi	r20, 0x01	; 1
    4b24:	50 40       	sbci	r21, 0x00	; 0
    4b26:	d8 f7       	brcc	.-10     	; 0x4b1e <memcpy+0x6>
    4b28:	08 95       	ret

00004b2a <strcpy>:
    4b2a:	fb 01       	movw	r30, r22
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	01 90       	ld	r0, Z+
    4b30:	0d 92       	st	X+, r0
    4b32:	00 20       	and	r0, r0
    4b34:	e1 f7       	brne	.-8      	; 0x4b2e <strcpy+0x4>
    4b36:	08 95       	ret

00004b38 <__do_global_dtors>:
    4b38:	11 e0       	ldi	r17, 0x01	; 1
    4b3a:	cc e5       	ldi	r28, 0x5C	; 92
    4b3c:	d1 e0       	ldi	r29, 0x01	; 1
    4b3e:	00 e0       	ldi	r16, 0x00	; 0
    4b40:	05 c0       	rjmp	.+10     	; 0x4b4c <__do_global_dtors+0x14>
    4b42:	80 2f       	mov	r24, r16
    4b44:	fe 01       	movw	r30, r28
    4b46:	4a dc       	rcall	.-1900   	; 0x43dc <__tablejump2__>
    4b48:	21 96       	adiw	r28, 0x01	; 1
    4b4a:	01 1d       	adc	r16, r1
    4b4c:	ce 35       	cpi	r28, 0x5E	; 94
    4b4e:	d1 07       	cpc	r29, r17
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	08 07       	cpc	r16, r24
    4b54:	b1 f7       	brne	.-20     	; 0x4b42 <__do_global_dtors+0xa>
    4b56:	f8 94       	cli

00004b58 <__stop_program>:
    4b58:	ff cf       	rjmp	.-2      	; 0x4b58 <__stop_program>
