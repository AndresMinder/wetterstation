
wetterstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003e0  00800200  000035f0  00003684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000383  008005e0  008005e0  00003a64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a70  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00025742  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005165  00000000  00000000  00029c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b19  00000000  00000000  0002edeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000298c  00000000  00000000  00035904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000587c  00000000  00000000  00038290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001025c  00000000  00000000  0003db0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c08  00000000  00000000  0004dd68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c c1       	rjmp	.+536    	; 0x21a <__dtors_end>
       2:	00 00       	nop
       4:	29 c5       	rjmp	.+2642   	; 0xa58 <__vector_1>
       6:	00 00       	nop
       8:	52 c5       	rjmp	.+2724   	; 0xaae <__vector_2>
       a:	00 00       	nop
       c:	7b c5       	rjmp	.+2806   	; 0xb04 <__vector_3>
       e:	00 00       	nop
      10:	a4 c5       	rjmp	.+2888   	; 0xb5a <__vector_4>
      12:	00 00       	nop
      14:	cd c5       	rjmp	.+2970   	; 0xbb0 <__vector_5>
      16:	00 00       	nop
      18:	f6 c5       	rjmp	.+3052   	; 0xc06 <__vector_6>
      1a:	00 00       	nop
      1c:	1f c6       	rjmp	.+3134   	; 0xc5c <__vector_7>
      1e:	00 00       	nop
      20:	48 c6       	rjmp	.+3216   	; 0xcb2 <__vector_8>
      22:	00 00       	nop
      24:	2a c1       	rjmp	.+596    	; 0x27a <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c1       	rjmp	.+592    	; 0x27a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c1       	rjmp	.+588    	; 0x27a <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c1       	rjmp	.+584    	; 0x27a <__bad_interrupt>
      32:	00 00       	nop
      34:	22 c1       	rjmp	.+580    	; 0x27a <__bad_interrupt>
      36:	00 00       	nop
      38:	20 c1       	rjmp	.+576    	; 0x27a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c1       	rjmp	.+572    	; 0x27a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c1       	rjmp	.+568    	; 0x27a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c1       	rjmp	.+564    	; 0x27a <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c1       	rjmp	.+560    	; 0x27a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	16 c1       	rjmp	.+556    	; 0x27a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c1       	rjmp	.+552    	; 0x27a <__bad_interrupt>
      52:	00 00       	nop
      54:	12 c1       	rjmp	.+548    	; 0x27a <__bad_interrupt>
      56:	00 00       	nop
      58:	10 c1       	rjmp	.+544    	; 0x27a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c6       	rjmp	.+3242   	; 0xd08 <__vector_23>
      5e:	00 00       	nop
      60:	0c c1       	rjmp	.+536    	; 0x27a <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c3       	rjmp	.+1790   	; 0x764 <__vector_25>
      66:	00 00       	nop
      68:	b3 c3       	rjmp	.+1894   	; 0x7d0 <__vector_26>
      6a:	00 00       	nop
      6c:	06 c1       	rjmp	.+524    	; 0x27a <__bad_interrupt>
      6e:	00 00       	nop
      70:	04 c1       	rjmp	.+520    	; 0x27a <__bad_interrupt>
      72:	00 00       	nop
      74:	02 c1       	rjmp	.+516    	; 0x27a <__bad_interrupt>
      76:	00 00       	nop
      78:	00 c1       	rjmp	.+512    	; 0x27a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fe c0       	rjmp	.+508    	; 0x27a <__bad_interrupt>
      7e:	00 00       	nop
      80:	fc c0       	rjmp	.+504    	; 0x27a <__bad_interrupt>
      82:	00 00       	nop
      84:	fa c0       	rjmp	.+500    	; 0x27a <__bad_interrupt>
      86:	00 00       	nop
      88:	f8 c0       	rjmp	.+496    	; 0x27a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 c0       	rjmp	.+492    	; 0x27a <__bad_interrupt>
      8e:	00 00       	nop
      90:	f4 c0       	rjmp	.+488    	; 0x27a <__bad_interrupt>
      92:	00 00       	nop
      94:	f2 c0       	rjmp	.+484    	; 0x27a <__bad_interrupt>
      96:	00 00       	nop
      98:	f0 c0       	rjmp	.+480    	; 0x27a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ee c0       	rjmp	.+476    	; 0x27a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ec c0       	rjmp	.+472    	; 0x27a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ea c0       	rjmp	.+468    	; 0x27a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e8 c0       	rjmp	.+464    	; 0x27a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e6 c0       	rjmp	.+460    	; 0x27a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e4 c0       	rjmp	.+456    	; 0x27a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e2 c0       	rjmp	.+452    	; 0x27a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e0 c0       	rjmp	.+448    	; 0x27a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	de c0       	rjmp	.+444    	; 0x27a <__bad_interrupt>
      be:	00 00       	nop
      c0:	dc c0       	rjmp	.+440    	; 0x27a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	da c0       	rjmp	.+436    	; 0x27a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d8 c0       	rjmp	.+432    	; 0x27a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d6 c0       	rjmp	.+428    	; 0x27a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d4 c0       	rjmp	.+424    	; 0x27a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d2 c0       	rjmp	.+420    	; 0x27a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d0 c0       	rjmp	.+416    	; 0x27a <__bad_interrupt>
      da:	00 00       	nop
      dc:	ce c0       	rjmp	.+412    	; 0x27a <__bad_interrupt>
      de:	00 00       	nop
      e0:	cc c0       	rjmp	.+408    	; 0x27a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	57 07       	cpc	r21, r23
      e6:	5a 07       	cpc	r21, r26
      e8:	49 07       	cpc	r20, r25
      ea:	4d 07       	cpc	r20, r29
      ec:	53 07       	cpc	r21, r19
      ee:	91 07       	cpc	r25, r17
      f0:	5e 07       	cpc	r21, r30
      f2:	62 07       	cpc	r22, r18
      f4:	68 07       	cpc	r22, r24
      f6:	6c 07       	cpc	r22, r28
      f8:	70 07       	cpc	r23, r16
      fa:	76 07       	cpc	r23, r22
      fc:	7a 07       	cpc	r23, r26
      fe:	7e 07       	cpc	r23, r30
     100:	91 07       	cpc	r25, r17
     102:	84 07       	cpc	r24, r20
     104:	88 07       	cpc	r24, r24
     106:	8c 07       	cpc	r24, r28

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	3e 01       	movw	r6, r28
     210:	19 02       	muls	r17, r25
     212:	1a 04       	cpc	r1, r10
     214:	5b 09       	sbc	r21, r11
     216:	a5 0c       	add	r10, r5

00000218 <__ctors_end>:
     218:	57 01       	movw	r10, r14

0000021a <__dtors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	d1 e2       	ldi	r29, 0x21	; 33
     222:	de bf       	out	0x3e, r29	; 62
     224:	cd bf       	out	0x3d, r28	; 61
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_copy_data>:
     22a:	15 e0       	ldi	r17, 0x05	; 5
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b2 e0       	ldi	r27, 0x02	; 2
     230:	e0 ef       	ldi	r30, 0xF0	; 240
     232:	f5 e3       	ldi	r31, 0x35	; 53
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0b bf       	out	0x3b, r16	; 59
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x14>
     23a:	07 90       	elpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	a0 3e       	cpi	r26, 0xE0	; 224
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0x10>

00000244 <__do_clear_bss>:
     244:	29 e0       	ldi	r18, 0x09	; 9
     246:	a0 ee       	ldi	r26, 0xE0	; 224
     248:	b5 e0       	ldi	r27, 0x05	; 5
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	a3 36       	cpi	r26, 0x63	; 99
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>

00000254 <__do_global_ctors>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	cc e0       	ldi	r28, 0x0C	; 12
     258:	d1 e0       	ldi	r29, 0x01	; 1
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	06 c0       	rjmp	.+12     	; 0x26a <__do_global_ctors+0x16>
     25e:	21 97       	sbiw	r28, 0x01	; 1
     260:	01 09       	sbc	r16, r1
     262:	80 2f       	mov	r24, r16
     264:	fe 01       	movw	r30, r28
     266:	0e 94 b5 18 	call	0x316a	; 0x316a <__tablejump2__>
     26a:	c7 30       	cpi	r28, 0x07	; 7
     26c:	d1 07       	cpc	r29, r17
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	08 07       	cpc	r16, r24
     272:	a9 f7       	brne	.-22     	; 0x25e <__do_global_ctors+0xa>
     274:	0d d3       	rcall	.+1562   	; 0x890 <main>
     276:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__do_global_dtors>

0000027a <__bad_interrupt>:
     27a:	c2 ce       	rjmp	.-636    	; 0x0 <__vectors>

0000027c <_GLOBAL__sub_I_command_help>:
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     27c:	6a e1       	ldi	r22, 0x1A	; 26
     27e:	72 e0       	ldi	r23, 0x02	; 2
     280:	88 ef       	ldi	r24, 0xF8	; 248
     282:	95 e0       	ldi	r25, 0x05	; 5
     284:	24 d7       	rcall	.+3656   	; 0x10ce <_ZN6StringC1EPKc>
String command_config = "config\r";
     286:	60 e2       	ldi	r22, 0x20	; 32
     288:	72 e0       	ldi	r23, 0x02	; 2
     28a:	82 ef       	ldi	r24, 0xF2	; 242
     28c:	95 e0       	ldi	r25, 0x05	; 5
     28e:	1f d7       	rcall	.+3646   	; 0x10ce <_ZN6StringC1EPKc>
String command_exit = "exit\r";
     290:	68 e2       	ldi	r22, 0x28	; 40
     292:	72 e0       	ldi	r23, 0x02	; 2
     294:	8c ee       	ldi	r24, 0xEC	; 236
     296:	95 e0       	ldi	r25, 0x05	; 5
     298:	1a d7       	rcall	.+3636   	; 0x10ce <_ZN6StringC1EPKc>
String command_show = "show\r";
     29a:	6e e2       	ldi	r22, 0x2E	; 46
     29c:	72 e0       	ldi	r23, 0x02	; 2
     29e:	86 ee       	ldi	r24, 0xE6	; 230
     2a0:	95 e0       	ldi	r25, 0x05	; 5
     2a2:	15 d7       	rcall	.+3626   	; 0x10ce <_ZN6StringC1EPKc>
String show_sdCardInfo = "sd card informations\r";
     2a4:	64 e3       	ldi	r22, 0x34	; 52
     2a6:	72 e0       	ldi	r23, 0x02	; 2
     2a8:	80 ee       	ldi	r24, 0xE0	; 224
     2aa:	95 e0       	ldi	r25, 0x05	; 5
     2ac:	10 c7       	rjmp	.+3616   	; 0x10ce <_ZN6StringC1EPKc>

000002ae <_GLOBAL__sub_D_command_help>:
     2ae:	80 ee       	ldi	r24, 0xE0	; 224
     2b0:	95 e0       	ldi	r25, 0x05	; 5
     2b2:	a2 d6       	rcall	.+3396   	; 0xff8 <_ZN6StringD1Ev>
#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
String command_show = "show\r";
     2b4:	86 ee       	ldi	r24, 0xE6	; 230
     2b6:	95 e0       	ldi	r25, 0x05	; 5
     2b8:	9f d6       	rcall	.+3390   	; 0xff8 <_ZN6StringD1Ev>

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
String command_exit = "exit\r";
     2ba:	8c ee       	ldi	r24, 0xEC	; 236
     2bc:	95 e0       	ldi	r25, 0x05	; 5
     2be:	9c d6       	rcall	.+3384   	; 0xff8 <_ZN6StringD1Ev>
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
String command_config = "config\r";
     2c0:	82 ef       	ldi	r24, 0xF2	; 242
     2c2:	95 e0       	ldi	r25, 0x05	; 5
     2c4:	99 d6       	rcall	.+3378   	; 0xff8 <_ZN6StringD1Ev>
#include "Anemometer.h"
#include "SDCard.h"

#define INDEX_CLI 100

String command_help = "help\r";
     2c6:	88 ef       	ldi	r24, 0xF8	; 248
     2c8:	95 e0       	ldi	r25, 0x05	; 5
     2ca:	96 c6       	rjmp	.+3372   	; 0xff8 <_ZN6StringD1Ev>

000002cc <_Z19getCardInformationsv>:
     2cc:	cf 92       	push	r12
	{
		SD.remove(filename);
	}
	else
	{
		Serial.println("File doesn't exist!");
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	45 e3       	ldi	r20, 0x35	; 53
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	89 e3       	ldi	r24, 0x39	; 57
     2da:	96 e0       	ldi	r25, 0x06	; 6
     2dc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7Sd2Card4initEhh>
     2e0:	81 11       	cpse	r24, r1
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <_Z19getCardInformationsv+0x1e>
     2e4:	66 e2       	ldi	r22, 0x26	; 38
     2e6:	74 e0       	ldi	r23, 0x04	; 4
     2e8:	2f c0       	rjmp	.+94     	; 0x348 <_Z19getCardInformationsv+0x7c>
     2ea:	69 e3       	ldi	r22, 0x39	; 57
     2ec:	74 e0       	ldi	r23, 0x04	; 4
     2ee:	80 e6       	ldi	r24, 0x60	; 96
     2f0:	96 e0       	ldi	r25, 0x06	; 6
     2f2:	17 d3       	rcall	.+1582   	; 0x922 <_ZN5Print5printEPKc>
     2f4:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <card+0xb>
     2f8:	82 30       	cpi	r24, 0x02	; 2
     2fa:	39 f0       	breq	.+14     	; 0x30a <_Z19getCardInformationsv+0x3e>
     2fc:	83 30       	cpi	r24, 0x03	; 3
     2fe:	41 f0       	breq	.+16     	; 0x310 <_Z19getCardInformationsv+0x44>
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	49 f4       	brne	.+18     	; 0x316 <_Z19getCardInformationsv+0x4a>
     304:	65 e4       	ldi	r22, 0x45	; 69
     306:	74 e0       	ldi	r23, 0x04	; 4
     308:	08 c0       	rjmp	.+16     	; 0x31a <_Z19getCardInformationsv+0x4e>
     30a:	69 e4       	ldi	r22, 0x49	; 73
     30c:	74 e0       	ldi	r23, 0x04	; 4
     30e:	05 c0       	rjmp	.+10     	; 0x31a <_Z19getCardInformationsv+0x4e>
     310:	6d e4       	ldi	r22, 0x4D	; 77
     312:	74 e0       	ldi	r23, 0x04	; 4
     314:	02 c0       	rjmp	.+4      	; 0x31a <_Z19getCardInformationsv+0x4e>
     316:	62 e5       	ldi	r22, 0x52	; 82
     318:	74 e0       	ldi	r23, 0x04	; 4
     31a:	80 e6       	ldi	r24, 0x60	; 96
     31c:	96 e0       	ldi	r25, 0x06	; 6
     31e:	0c d3       	rcall	.+1560   	; 0x938 <_ZN5Print7printlnEPKc>
     320:	41 e0       	ldi	r20, 0x01	; 1
     322:	69 e3       	ldi	r22, 0x39	; 57
     324:	76 e0       	ldi	r23, 0x06	; 6
     326:	8b e1       	ldi	r24, 0x1B	; 27
     328:	96 e0       	ldi	r25, 0x06	; 6
     32a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN8SdVolume4initEP7Sd2Cardh>
     32e:	81 11       	cpse	r24, r1
     330:	12 c0       	rjmp	.+36     	; 0x356 <_Z19getCardInformationsv+0x8a>
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	69 e3       	ldi	r22, 0x39	; 57
     336:	76 e0       	ldi	r23, 0x06	; 6
     338:	8b e1       	ldi	r24, 0x1B	; 27
     33a:	96 e0       	ldi	r25, 0x06	; 6
     33c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN8SdVolume4initEP7Sd2Cardh>
     340:	81 11       	cpse	r24, r1
     342:	09 c0       	rjmp	.+18     	; 0x356 <_Z19getCardInformationsv+0x8a>
     344:	6a e5       	ldi	r22, 0x5A	; 90
     346:	74 e0       	ldi	r23, 0x04	; 4
     348:	80 e6       	ldi	r24, 0x60	; 96
     34a:	96 e0       	ldi	r25, 0x06	; 6
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
     354:	f1 c2       	rjmp	.+1506   	; 0x938 <_ZN5Print7printlnEPKc>
     356:	64 ea       	ldi	r22, 0xA4	; 164
     358:	74 e0       	ldi	r23, 0x04	; 4
     35a:	80 e6       	ldi	r24, 0x60	; 96
     35c:	96 e0       	ldi	r25, 0x06	; 6
     35e:	e1 d2       	rcall	.+1474   	; 0x922 <_ZN5Print5printEPKc>
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 91 32 06 	lds	r22, 0x0632	; 0x800632 <volume+0x17>
     368:	80 e6       	ldi	r24, 0x60	; 96
     36a:	96 e0       	ldi	r25, 0x06	; 6
     36c:	4f d3       	rcall	.+1694   	; 0xa0c <_ZN5Print7printlnEhi>
     36e:	80 e6       	ldi	r24, 0x60	; 96
     370:	96 e0       	ldi	r25, 0x06	; 6
     372:	df d2       	rcall	.+1470   	; 0x932 <_ZN5Print7printlnEv>
     374:	a0 91 1f 06 	lds	r26, 0x061F	; 0x80061f <volume+0x4>
     378:	40 91 24 06 	lds	r20, 0x0624	; 0x800624 <volume+0x9>
     37c:	50 91 25 06 	lds	r21, 0x0625	; 0x800625 <volume+0xa>
     380:	60 91 26 06 	lds	r22, 0x0626	; 0x800626 <volume+0xb>
     384:	70 91 27 06 	lds	r23, 0x0627	; 0x800627 <volume+0xc>
     388:	9a 01       	movw	r18, r20
     38a:	ab 01       	movw	r20, r22
     38c:	89 e0       	ldi	r24, 0x09	; 9
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	44 1f       	adc	r20, r20
     394:	55 1f       	adc	r21, r21
     396:	8a 95       	dec	r24
     398:	d1 f7       	brne	.-12     	; 0x38e <_Z19getCardInformationsv+0xc2>
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	0e 94 bd 18 	call	0x317a	; 0x317a <__muluhisi3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
     3a4:	68 eb       	ldi	r22, 0xB8	; 184
     3a6:	74 e0       	ldi	r23, 0x04	; 4
     3a8:	80 e6       	ldi	r24, 0x60	; 96
     3aa:	96 e0       	ldi	r25, 0x06	; 6
     3ac:	ba d2       	rcall	.+1396   	; 0x922 <_ZN5Print5printEPKc>
     3ae:	2a e0       	ldi	r18, 0x0A	; 10
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	b7 01       	movw	r22, r14
     3b4:	a6 01       	movw	r20, r12
     3b6:	80 e6       	ldi	r24, 0x60	; 96
     3b8:	96 e0       	ldi	r25, 0x06	; 6
     3ba:	3d d3       	rcall	.+1658   	; 0xa36 <_ZN5Print7printlnEmi>
     3bc:	6e ec       	ldi	r22, 0xCE	; 206
     3be:	74 e0       	ldi	r23, 0x04	; 4
     3c0:	80 e6       	ldi	r24, 0x60	; 96
     3c2:	96 e0       	ldi	r25, 0x06	; 6
     3c4:	ae d2       	rcall	.+1372   	; 0x922 <_ZN5Print5printEPKc>
     3c6:	b7 01       	movw	r22, r14
     3c8:	a6 01       	movw	r20, r12
     3ca:	9a e0       	ldi	r25, 0x0A	; 10
     3cc:	76 95       	lsr	r23
     3ce:	67 95       	ror	r22
     3d0:	57 95       	ror	r21
     3d2:	47 95       	ror	r20
     3d4:	9a 95       	dec	r25
     3d6:	d1 f7       	brne	.-12     	; 0x3cc <_Z19getCardInformationsv+0x100>
     3d8:	2a e0       	ldi	r18, 0x0A	; 10
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	80 e6       	ldi	r24, 0x60	; 96
     3de:	96 e0       	ldi	r25, 0x06	; 6
     3e0:	2a d3       	rcall	.+1620   	; 0xa36 <_ZN5Print7printlnEmi>
     3e2:	65 ee       	ldi	r22, 0xE5	; 229
     3e4:	74 e0       	ldi	r23, 0x04	; 4
     3e6:	80 e6       	ldi	r24, 0x60	; 96
     3e8:	96 e0       	ldi	r25, 0x06	; 6
     3ea:	9b d2       	rcall	.+1334   	; 0x922 <_ZN5Print5printEPKc>
     3ec:	b7 01       	movw	r22, r14
     3ee:	a6 01       	movw	r20, r12
     3f0:	24 e1       	ldi	r18, 0x14	; 20
     3f2:	76 95       	lsr	r23
     3f4:	67 95       	ror	r22
     3f6:	57 95       	ror	r21
     3f8:	47 95       	ror	r20
     3fa:	2a 95       	dec	r18
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <_Z19getCardInformationsv+0x126>
     3fe:	2a e0       	ldi	r18, 0x0A	; 10
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	80 e6       	ldi	r24, 0x60	; 96
     404:	96 e0       	ldi	r25, 0x06	; 6
     406:	17 d3       	rcall	.+1582   	; 0xa36 <_ZN5Print7printlnEmi>
     408:	6c ef       	ldi	r22, 0xFC	; 252
     40a:	74 e0       	ldi	r23, 0x04	; 4
     40c:	80 e6       	ldi	r24, 0x60	; 96
     40e:	96 e0       	ldi	r25, 0x06	; 6
     410:	93 d2       	rcall	.+1318   	; 0x938 <_ZN5Print7printlnEPKc>
     412:	6b e1       	ldi	r22, 0x1B	; 27
     414:	76 e0       	ldi	r23, 0x06	; 6
     416:	8e ef       	ldi	r24, 0xFE	; 254
     418:	95 e0       	ldi	r25, 0x05	; 5
     41a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <_ZN6SdFile8openRootEP8SdVolume>
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	8e ef       	ldi	r24, 0xFE	; 254
     424:	95 e0       	ldi	r25, 0x05	; 5
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <_ZN6SdFile2lsEhh>

00000432 <_GLOBAL__sub_I_myFile>:

#include "SDCard.h"

const int chipSelect = 53;

File myFile;
     432:	85 e4       	ldi	r24, 0x45	; 69
     434:	96 e0       	ldi	r25, 0x06	; 6
     436:	df d6       	rcall	.+3518   	; 0x11f6 <_ZN5SDLib4FileC1Ev>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     438:	e9 e3       	ldi	r30, 0x39	; 57
     43a:	f6 e0       	ldi	r31, 0x06	; 6
     43c:	15 82       	std	Z+5, r1	; 0x05
     43e:	16 82       	std	Z+6, r1	; 0x06
     440:	11 86       	std	Z+9, r1	; 0x09
     442:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     444:	eb e1       	ldi	r30, 0x1B	; 27
     446:	f6 e0       	ldi	r31, 0x06	; 6
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	a0 e0       	ldi	r26, 0x00	; 0
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	80 83       	st	Z, r24
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	a2 83       	std	Z+2, r26	; 0x02
     456:	b3 83       	std	Z+3, r27	; 0x03
     458:	17 8a       	std	Z+23, r1	; 0x17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     45a:	ee ef       	ldi	r30, 0xFE	; 254
     45c:	f5 e0       	ldi	r31, 0x05	; 5
     45e:	13 82       	std	Z+3, r1	; 0x03
     460:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     462:	87 ed       	ldi	r24, 0xD7	; 215
     464:	95 e0       	ldi	r25, 0x05	; 5
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	80 83       	st	Z, r24
     46a:	15 82       	std	Z+5, r1	; 0x05
     46c:	08 95       	ret

0000046e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     46e:	26 e0       	ldi	r18, 0x06	; 6
     470:	40 e8       	ldi	r20, 0x80	; 128
     472:	55 e2       	ldi	r21, 0x25	; 37
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	80 e6       	ldi	r24, 0x60	; 96
     47a:	96 e0       	ldi	r25, 0x06	; 6
     47c:	0a d1       	rcall	.+532    	; 0x692 <_ZN14HardwareSerial5beginEmh>
#include "CLI.h"

void setup()
{
	Serial.begin(9600);
	getCardInformations();
     47e:	26 cf       	rjmp	.-436    	; 0x2cc <_Z19getCardInformationsv>

00000480 <loop>:
     480:	08 95       	ret

00000482 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     482:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     484:	91 8d       	ldd	r25, Z+25	; 0x19
     486:	22 8d       	ldd	r18, Z+26	; 0x1a
     488:	89 2f       	mov	r24, r25
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	80 5c       	subi	r24, 0xC0	; 192
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	82 1b       	sub	r24, r18
     492:	91 09       	sbc	r25, r1
}
     494:	8f 73       	andi	r24, 0x3F	; 63
     496:	99 27       	eor	r25, r25
     498:	08 95       	ret

0000049a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     49a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     49c:	91 8d       	ldd	r25, Z+25	; 0x19
     49e:	82 8d       	ldd	r24, Z+26	; 0x1a
     4a0:	98 17       	cp	r25, r24
     4a2:	31 f0       	breq	.+12     	; 0x4b0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     4a4:	82 8d       	ldd	r24, Z+26	; 0x1a
     4a6:	e8 0f       	add	r30, r24
     4a8:	f1 1d       	adc	r31, r1
     4aa:	85 8d       	ldd	r24, Z+29	; 0x1d
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     4b4:	08 95       	ret

000004b6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     4b6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     4b8:	91 8d       	ldd	r25, Z+25	; 0x19
     4ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     4bc:	98 17       	cp	r25, r24
     4be:	61 f0       	breq	.+24     	; 0x4d8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     4c0:	82 8d       	ldd	r24, Z+26	; 0x1a
     4c2:	df 01       	movw	r26, r30
     4c4:	a8 0f       	add	r26, r24
     4c6:	b1 1d       	adc	r27, r1
     4c8:	5d 96       	adiw	r26, 0x1d	; 29
     4ca:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     4cc:	92 8d       	ldd	r25, Z+26	; 0x1a
     4ce:	9f 5f       	subi	r25, 0xFF	; 255
     4d0:	9f 73       	andi	r25, 0x3F	; 63
     4d2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     4dc:	08 95       	ret

000004de <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     4de:	fc 01       	movw	r30, r24
     4e0:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     4e2:	44 8d       	ldd	r20, Z+28	; 0x1c
     4e4:	25 2f       	mov	r18, r21
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	84 2f       	mov	r24, r20
     4ea:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     4ec:	82 1b       	sub	r24, r18
     4ee:	93 0b       	sbc	r25, r19
     4f0:	54 17       	cp	r21, r20
     4f2:	10 f0       	brcs	.+4      	; 0x4f8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     4f4:	cf 96       	adiw	r24, 0x3f	; 63
     4f6:	08 95       	ret
  return tail - head - 1;
     4f8:	01 97       	sbiw	r24, 0x01	; 1
}
     4fa:	08 95       	ret

000004fc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4fc:	81 e1       	ldi	r24, 0x11	; 17
     4fe:	94 e0       	ldi	r25, 0x04	; 4
     500:	89 2b       	or	r24, r25
     502:	39 f0       	breq	.+14     	; 0x512 <_Z14serialEventRunv+0x16>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	19 f0       	breq	.+6      	; 0x512 <_Z14serialEventRunv+0x16>
     50c:	8a d1       	rcall	.+788    	; 0x822 <_Z17Serial0_availablev>
     50e:	81 11       	cpse	r24, r1
     510:	25 c0       	rjmp	.+74     	; 0x55c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	89 2b       	or	r24, r25
     518:	41 f0       	breq	.+16     	; 0x52a <_Z14serialEventRunv+0x2e>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	89 2b       	or	r24, r25
     520:	21 f0       	breq	.+8      	; 0x52a <_Z14serialEventRunv+0x2e>
     522:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     526:	81 11       	cpse	r24, r1
     528:	1c c0       	rjmp	.+56     	; 0x562 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	89 2b       	or	r24, r25
     530:	41 f0       	breq	.+16     	; 0x542 <_Z14serialEventRunv+0x46>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	89 2b       	or	r24, r25
     538:	21 f0       	breq	.+8      	; 0x542 <_Z14serialEventRunv+0x46>
     53a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     53e:	81 11       	cpse	r24, r1
     540:	13 c0       	rjmp	.+38     	; 0x568 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	89 2b       	or	r24, r25
     548:	a1 f0       	breq	.+40     	; 0x572 <_Z14serialEventRunv+0x76>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	89 2b       	or	r24, r25
     550:	81 f0       	breq	.+32     	; 0x572 <_Z14serialEventRunv+0x76>
     552:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     556:	81 11       	cpse	r24, r1
     558:	0a c0       	rjmp	.+20     	; 0x56e <_Z14serialEventRunv+0x72>
     55a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     55c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     560:	d8 cf       	rjmp	.-80     	; 0x512 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     562:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     566:	e1 cf       	rjmp	.-62     	; 0x52a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     568:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     56c:	ea cf       	rjmp	.-44     	; 0x542 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     56e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     572:	08 95       	ret

00000574 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     574:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     576:	84 8d       	ldd	r24, Z+28	; 0x1c
     578:	df 01       	movw	r26, r30
     57a:	a8 0f       	add	r26, r24
     57c:	b1 1d       	adc	r27, r1
     57e:	a3 5a       	subi	r26, 0xA3	; 163
     580:	bf 4f       	sbci	r27, 0xFF	; 255
     582:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     584:	84 8d       	ldd	r24, Z+28	; 0x1c
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	8f 73       	andi	r24, 0x3F	; 63
     58c:	99 27       	eor	r25, r25
     58e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     590:	a6 89       	ldd	r26, Z+22	; 0x16
     592:	b7 89       	ldd	r27, Z+23	; 0x17
     594:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     596:	a0 89       	ldd	r26, Z+16	; 0x10
     598:	b1 89       	ldd	r27, Z+17	; 0x11
     59a:	8c 91       	ld	r24, X
     59c:	83 70       	andi	r24, 0x03	; 3
     59e:	80 64       	ori	r24, 0x40	; 64
     5a0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5a2:	93 8d       	ldd	r25, Z+27	; 0x1b
     5a4:	84 8d       	ldd	r24, Z+28	; 0x1c
     5a6:	98 13       	cpse	r25, r24
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     5aa:	02 88       	ldd	r0, Z+18	; 0x12
     5ac:	f3 89       	ldd	r31, Z+19	; 0x13
     5ae:	e0 2d       	mov	r30, r0
     5b0:	80 81       	ld	r24, Z
     5b2:	8f 7d       	andi	r24, 0xDF	; 223
     5b4:	80 83       	st	Z, r24
     5b6:	08 95       	ret

000005b8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	ec 01       	movw	r28, r24
  _written = true;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ce:	98 13       	cpse	r25, r24
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <_ZN14HardwareSerial5writeEh+0x24>
     5d2:	e8 89       	ldd	r30, Y+16	; 0x10
     5d4:	f9 89       	ldd	r31, Y+17	; 0x11
     5d6:	80 81       	ld	r24, Z
     5d8:	85 fd       	sbrc	r24, 5
     5da:	25 c0       	rjmp	.+74     	; 0x626 <_ZN14HardwareSerial5writeEh+0x6e>
     5dc:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     5de:	0b 8d       	ldd	r16, Y+27	; 0x1b
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	0f 5f       	subi	r16, 0xFF	; 255
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
     5e6:	0f 73       	andi	r16, 0x3F	; 63
     5e8:	11 27       	eor	r17, r17
     5ea:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     5ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ee:	e8 12       	cpse	r14, r24
     5f0:	0b c0       	rjmp	.+22     	; 0x608 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	07 fc       	sbrc	r0, 7
     5f6:	fa cf       	rjmp	.-12     	; 0x5ec <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     5f8:	e8 89       	ldd	r30, Y+16	; 0x10
     5fa:	f9 89       	ldd	r31, Y+17	; 0x11
     5fc:	80 81       	ld	r24, Z
     5fe:	85 ff       	sbrs	r24, 5
     600:	f5 cf       	rjmp	.-22     	; 0x5ec <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     602:	ce 01       	movw	r24, r28
     604:	b7 df       	rcall	.-146    	; 0x574 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     606:	f2 cf       	rjmp	.-28     	; 0x5ec <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     608:	8b 8d       	ldd	r24, Y+27	; 0x1b
     60a:	fe 01       	movw	r30, r28
     60c:	e8 0f       	add	r30, r24
     60e:	f1 1d       	adc	r31, r1
     610:	e3 5a       	subi	r30, 0xA3	; 163
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     616:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     618:	f8 94       	cli
    _tx_buffer_head = i;
     61a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     61c:	ea 89       	ldd	r30, Y+18	; 0x12
     61e:	fb 89       	ldd	r31, Y+19	; 0x13
     620:	80 81       	ld	r24, Z
     622:	80 62       	ori	r24, 0x20	; 32
     624:	0a c0       	rjmp	.+20     	; 0x63a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     626:	9f b7       	in	r25, 0x3f	; 63
     628:	f8 94       	cli
      *_udr = c;
     62a:	ee 89       	ldd	r30, Y+22	; 0x16
     62c:	ff 89       	ldd	r31, Y+23	; 0x17
     62e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     630:	e8 89       	ldd	r30, Y+16	; 0x10
     632:	f9 89       	ldd	r31, Y+17	; 0x11
     634:	80 81       	ld	r24, Z
     636:	83 70       	andi	r24, 0x03	; 3
     638:	80 64       	ori	r24, 0x40	; 64
     63a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     63c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     656:	88 8d       	ldd	r24, Y+24	; 0x18
     658:	88 23       	and	r24, r24
     65a:	c1 f0       	breq	.+48     	; 0x68c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     65c:	ea 89       	ldd	r30, Y+18	; 0x12
     65e:	fb 89       	ldd	r31, Y+19	; 0x13
     660:	80 81       	ld	r24, Z
     662:	85 fd       	sbrc	r24, 5
     664:	05 c0       	rjmp	.+10     	; 0x670 <_ZN14HardwareSerial5flushEv+0x20>
     666:	a8 89       	ldd	r26, Y+16	; 0x10
     668:	b9 89       	ldd	r27, Y+17	; 0x11
     66a:	8c 91       	ld	r24, X
     66c:	86 fd       	sbrc	r24, 6
     66e:	0e c0       	rjmp	.+28     	; 0x68c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	07 fc       	sbrc	r0, 7
     674:	f5 cf       	rjmp	.-22     	; 0x660 <_ZN14HardwareSerial5flushEv+0x10>
     676:	80 81       	ld	r24, Z
     678:	85 ff       	sbrs	r24, 5
     67a:	f2 cf       	rjmp	.-28     	; 0x660 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     67c:	a8 89       	ldd	r26, Y+16	; 0x10
     67e:	b9 89       	ldd	r27, Y+17	; 0x11
     680:	8c 91       	ld	r24, X
     682:	85 ff       	sbrs	r24, 5
     684:	ed cf       	rjmp	.-38     	; 0x660 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     686:	ce 01       	movw	r24, r28
     688:	75 df       	rcall	.-278    	; 0x574 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     68a:	e8 cf       	rjmp	.-48     	; 0x65c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
     6a2:	6a 01       	movw	r12, r20
     6a4:	7b 01       	movw	r14, r22
     6a6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     6a8:	e8 89       	ldd	r30, Y+16	; 0x10
     6aa:	f9 89       	ldd	r31, Y+17	; 0x11
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6b0:	41 15       	cp	r20, r1
     6b2:	51 4e       	sbci	r21, 0xE1	; 225
     6b4:	61 05       	cpc	r22, r1
     6b6:	71 05       	cpc	r23, r1
     6b8:	b1 f0       	breq	.+44     	; 0x6e6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	79 e0       	ldi	r23, 0x09	; 9
     6be:	8d e3       	ldi	r24, 0x3D	; 61
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a7 01       	movw	r20, r14
     6c4:	96 01       	movw	r18, r12
     6c6:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodsi4>
     6ca:	da 01       	movw	r26, r20
     6cc:	c9 01       	movw	r24, r18
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	a1 09       	sbc	r26, r1
     6d2:	b1 09       	sbc	r27, r1
     6d4:	b6 95       	lsr	r27
     6d6:	a7 95       	ror	r26
     6d8:	97 95       	ror	r25
     6da:	87 95       	ror	r24
     6dc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6de:	21 15       	cp	r18, r1
     6e0:	80 e1       	ldi	r24, 0x10	; 16
     6e2:	38 07       	cpc	r19, r24
     6e4:	a8 f0       	brcs	.+42     	; 0x710 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     6e6:	e8 89       	ldd	r30, Y+16	; 0x10
     6e8:	f9 89       	ldd	r31, Y+17	; 0x11
     6ea:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     6ec:	60 e8       	ldi	r22, 0x80	; 128
     6ee:	74 e8       	ldi	r23, 0x84	; 132
     6f0:	8e e1       	ldi	r24, 0x1E	; 30
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a7 01       	movw	r20, r14
     6f6:	96 01       	movw	r18, r12
     6f8:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodsi4>
     6fc:	da 01       	movw	r26, r20
     6fe:	c9 01       	movw	r24, r18
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	a1 09       	sbc	r26, r1
     704:	b1 09       	sbc	r27, r1
     706:	b6 95       	lsr	r27
     708:	a7 95       	ror	r26
     70a:	97 95       	ror	r25
     70c:	87 95       	ror	r24
     70e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     710:	ec 85       	ldd	r30, Y+12	; 0x0c
     712:	fd 85       	ldd	r31, Y+13	; 0x0d
     714:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     716:	ee 85       	ldd	r30, Y+14	; 0x0e
     718:	ff 85       	ldd	r31, Y+15	; 0x0f
     71a:	20 83       	st	Z, r18

  _written = false;
     71c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     71e:	ec 89       	ldd	r30, Y+20	; 0x14
     720:	fd 89       	ldd	r31, Y+21	; 0x15
     722:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     724:	ea 89       	ldd	r30, Y+18	; 0x12
     726:	fb 89       	ldd	r31, Y+19	; 0x13
     728:	80 81       	ld	r24, Z
     72a:	80 61       	ori	r24, 0x10	; 16
     72c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     72e:	ea 89       	ldd	r30, Y+18	; 0x12
     730:	fb 89       	ldd	r31, Y+19	; 0x13
     732:	80 81       	ld	r24, Z
     734:	88 60       	ori	r24, 0x08	; 8
     736:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     738:	ea 89       	ldd	r30, Y+18	; 0x12
     73a:	fb 89       	ldd	r31, Y+19	; 0x13
     73c:	80 81       	ld	r24, Z
     73e:	80 68       	ori	r24, 0x80	; 128
     740:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     742:	ea 89       	ldd	r30, Y+18	; 0x12
     744:	fb 89       	ldd	r31, Y+19	; 0x13
     746:	80 81       	ld	r24, Z
     748:	8f 7d       	andi	r24, 0xDF	; 223
     74a:	80 83       	st	Z, r24
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	08 95       	ret

0000075c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	08 95       	ret

00000762 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     762:	08 95       	ret

00000764 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	0b b6       	in	r0, 0x3b	; 59
     770:	0f 92       	push	r0
     772:	2f 93       	push	r18
     774:	8f 93       	push	r24
     776:	9f 93       	push	r25
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     77c:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <Serial+0x10>
     780:	f0 91 71 06 	lds	r31, 0x0671	; 0x800671 <Serial+0x11>
     784:	80 81       	ld	r24, Z
     786:	e0 91 76 06 	lds	r30, 0x0676	; 0x800676 <Serial+0x16>
     78a:	f0 91 77 06 	lds	r31, 0x0677	; 0x800677 <Serial+0x17>
     78e:	82 fd       	sbrc	r24, 2
     790:	12 c0       	rjmp	.+36     	; 0x7b6 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     792:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     794:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <Serial+0x19>
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     79c:	20 91 7a 06 	lds	r18, 0x067A	; 0x80067a <Serial+0x1a>
     7a0:	82 17       	cp	r24, r18
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     7a4:	e0 91 79 06 	lds	r30, 0x0679	; 0x800679 <Serial+0x19>
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	e0 5a       	subi	r30, 0xA0	; 160
     7ac:	f9 4f       	sbci	r31, 0xF9	; 249
     7ae:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     7b0:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <Serial+0x19>
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     7b6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	2f 91       	pop	r18
     7c2:	0f 90       	pop	r0
     7c4:	0b be       	out	0x3b, r0	; 59
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	0b b6       	in	r0, 0x3b	; 59
     7dc:	0f 92       	push	r0
     7de:	2f 93       	push	r18
     7e0:	3f 93       	push	r19
     7e2:	4f 93       	push	r20
     7e4:	5f 93       	push	r21
     7e6:	6f 93       	push	r22
     7e8:	7f 93       	push	r23
     7ea:	8f 93       	push	r24
     7ec:	9f 93       	push	r25
     7ee:	af 93       	push	r26
     7f0:	bf 93       	push	r27
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     7f6:	80 e6       	ldi	r24, 0x60	; 96
     7f8:	96 e0       	ldi	r25, 0x06	; 6
     7fa:	bc de       	rcall	.-648    	; 0x574 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0b be       	out	0x3b, r0	; 59
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     822:	80 e6       	ldi	r24, 0x60	; 96
     824:	96 e0       	ldi	r25, 0x06	; 6
     826:	2d de       	rcall	.-934    	; 0x482 <_ZN14HardwareSerial9availableEv>
     828:	21 e0       	ldi	r18, 0x01	; 1
     82a:	89 2b       	or	r24, r25
     82c:	09 f4       	brne	.+2      	; 0x830 <_Z17Serial0_availablev+0xe>
     82e:	20 e0       	ldi	r18, 0x00	; 0
}
     830:	82 2f       	mov	r24, r18
     832:	08 95       	ret

00000834 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     834:	e0 e6       	ldi	r30, 0x60	; 96
     836:	f6 e0       	ldi	r31, 0x06	; 6
     838:	13 82       	std	Z+3, r1	; 0x03
     83a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     83c:	88 ee       	ldi	r24, 0xE8	; 232
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	a0 e0       	ldi	r26, 0x00	; 0
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	84 83       	std	Z+4, r24	; 0x04
     846:	95 83       	std	Z+5, r25	; 0x05
     848:	a6 83       	std	Z+6, r26	; 0x06
     84a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     84c:	84 ea       	ldi	r24, 0xA4	; 164
     84e:	95 e0       	ldi	r25, 0x05	; 5
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24
     854:	85 ec       	ldi	r24, 0xC5	; 197
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	95 87       	std	Z+13, r25	; 0x0d
     85a:	84 87       	std	Z+12, r24	; 0x0c
     85c:	84 ec       	ldi	r24, 0xC4	; 196
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	97 87       	std	Z+15, r25	; 0x0f
     862:	86 87       	std	Z+14, r24	; 0x0e
     864:	80 ec       	ldi	r24, 0xC0	; 192
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	91 8b       	std	Z+17, r25	; 0x11
     86a:	80 8b       	std	Z+16, r24	; 0x10
     86c:	81 ec       	ldi	r24, 0xC1	; 193
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	93 8b       	std	Z+19, r25	; 0x13
     872:	82 8b       	std	Z+18, r24	; 0x12
     874:	82 ec       	ldi	r24, 0xC2	; 194
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	95 8b       	std	Z+21, r25	; 0x15
     87a:	84 8b       	std	Z+20, r24	; 0x14
     87c:	86 ec       	ldi	r24, 0xC6	; 198
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	97 8b       	std	Z+23, r25	; 0x17
     882:	86 8b       	std	Z+22, r24	; 0x16
     884:	11 8e       	std	Z+25, r1	; 0x19
     886:	12 8e       	std	Z+26, r1	; 0x1a
     888:	13 8e       	std	Z+27, r1	; 0x1b
     88a:	14 8e       	std	Z+28, r1	; 0x1c
     88c:	08 95       	ret

0000088e <initVariant>:
     88e:	08 95       	ret

00000890 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     890:	91 d2       	rcall	.+1314   	; 0xdb4 <init>

	initVariant();
     892:	fd df       	rcall	.-6      	; 0x88e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     894:	ec dd       	rcall	.-1064   	; 0x46e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     896:	ce e7       	ldi	r28, 0x7E	; 126
     898:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     89a:	f2 dd       	rcall	.-1052   	; 0x480 <loop>
		if (serialEventRun) serialEventRun();
     89c:	20 97       	sbiw	r28, 0x00	; 0
     89e:	e9 f3       	breq	.-6      	; 0x89a <main+0xa>
     8a0:	2d de       	rcall	.-934    	; 0x4fc <_Z14serialEventRunv>
     8a2:	fb cf       	rjmp	.-10     	; 0x89a <main+0xa>

000008a4 <_ZN5Print5writeEPKhj>:
     8a4:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	6c 01       	movw	r12, r24
     8b6:	7a 01       	movw	r14, r20
     8b8:	8b 01       	movw	r16, r22
     8ba:	c0 e0       	ldi	r28, 0x00	; 0
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
     8be:	ce 15       	cp	r28, r14
     8c0:	df 05       	cpc	r29, r15
     8c2:	81 f0       	breq	.+32     	; 0x8e4 <_ZN5Print5writeEPKhj+0x40>
     8c4:	d8 01       	movw	r26, r16
     8c6:	6d 91       	ld	r22, X+
     8c8:	8d 01       	movw	r16, r26
     8ca:	d6 01       	movw	r26, r12
     8cc:	ed 91       	ld	r30, X+
     8ce:	fc 91       	ld	r31, X
     8d0:	01 90       	ld	r0, Z+
     8d2:	f0 81       	ld	r31, Z
     8d4:	e0 2d       	mov	r30, r0
     8d6:	c6 01       	movw	r24, r12
     8d8:	19 95       	eicall
     8da:	89 2b       	or	r24, r25
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <_ZN5Print5writeEPKhj+0x3e>
     8de:	21 96       	adiw	r28, 0x01	; 1
     8e0:	ee cf       	rjmp	.-36     	; 0x8be <_ZN5Print5writeEPKhj+0x1a>
     8e2:	7e 01       	movw	r14, r28
     8e4:	c7 01       	movw	r24, r14
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <_ZN5Print5writeEPKc>:
     8f8:	61 15       	cp	r22, r1
     8fa:	71 05       	cpc	r23, r1
     8fc:	79 f0       	breq	.+30     	; 0x91c <_ZN5Print5writeEPKc+0x24>
     8fe:	fb 01       	movw	r30, r22
     900:	01 90       	ld	r0, Z+
     902:	00 20       	and	r0, r0
     904:	e9 f7       	brne	.-6      	; 0x900 <_ZN5Print5writeEPKc+0x8>
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	af 01       	movw	r20, r30
     90a:	46 1b       	sub	r20, r22
     90c:	57 0b       	sbc	r21, r23
     90e:	dc 01       	movw	r26, r24
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	02 80       	ldd	r0, Z+2	; 0x02
     916:	f3 81       	ldd	r31, Z+3	; 0x03
     918:	e0 2d       	mov	r30, r0
     91a:	19 94       	eijmp
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret

00000922 <_ZN5Print5printEPKc>:
     922:	ea cf       	rjmp	.-44     	; 0x8f8 <_ZN5Print5writeEPKc>

00000924 <_ZN5Print5printEc>:
     924:	dc 01       	movw	r26, r24
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	01 90       	ld	r0, Z+
     92c:	f0 81       	ld	r31, Z
     92e:	e0 2d       	mov	r30, r0
     930:	19 94       	eijmp

00000932 <_ZN5Print7printlnEv>:
     932:	62 eb       	ldi	r22, 0xB2	; 178
     934:	75 e0       	ldi	r23, 0x05	; 5
     936:	e0 cf       	rjmp	.-64     	; 0x8f8 <_ZN5Print5writeEPKc>

00000938 <_ZN5Print7printlnEPKc>:
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	da df       	rcall	.-76     	; 0x8f8 <_ZN5Print5writeEPKc>
     944:	8c 01       	movw	r16, r24
     946:	ce 01       	movw	r24, r28
     948:	f4 df       	rcall	.-24     	; 0x932 <_ZN5Print7printlnEv>
     94a:	80 0f       	add	r24, r16
     94c:	91 1f       	adc	r25, r17
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <_ZN5Print11printNumberEmh>:
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	a1 97       	sbiw	r28, 0x21	; 33
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	7c 01       	movw	r14, r24
     97e:	fa 01       	movw	r30, r20
     980:	cb 01       	movw	r24, r22
     982:	19 a2       	std	Y+33, r1	; 0x21
     984:	22 30       	cpi	r18, 0x02	; 2
     986:	08 f4       	brcc	.+2      	; 0x98a <_ZN5Print11printNumberEmh+0x32>
     988:	2a e0       	ldi	r18, 0x0A	; 10
     98a:	8e 01       	movw	r16, r28
     98c:	0f 5d       	subi	r16, 0xDF	; 223
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	82 2e       	mov	r8, r18
     992:	91 2c       	mov	r9, r1
     994:	a1 2c       	mov	r10, r1
     996:	b1 2c       	mov	r11, r1
     998:	bf 01       	movw	r22, r30
     99a:	a5 01       	movw	r20, r10
     99c:	94 01       	movw	r18, r8
     99e:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodsi4>
     9a2:	f9 01       	movw	r30, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	01 50       	subi	r16, 0x01	; 1
     9a8:	11 09       	sbc	r17, r1
     9aa:	6a 30       	cpi	r22, 0x0A	; 10
     9ac:	10 f4       	brcc	.+4      	; 0x9b2 <_ZN5Print11printNumberEmh+0x5a>
     9ae:	60 5d       	subi	r22, 0xD0	; 208
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <_ZN5Print11printNumberEmh+0x5c>
     9b2:	69 5c       	subi	r22, 0xC9	; 201
     9b4:	d8 01       	movw	r26, r16
     9b6:	6c 93       	st	X, r22
     9b8:	23 2b       	or	r18, r19
     9ba:	24 2b       	or	r18, r20
     9bc:	25 2b       	or	r18, r21
     9be:	61 f7       	brne	.-40     	; 0x998 <_ZN5Print11printNumberEmh+0x40>
     9c0:	b8 01       	movw	r22, r16
     9c2:	c7 01       	movw	r24, r14
     9c4:	99 df       	rcall	.-206    	; 0x8f8 <_ZN5Print5writeEPKc>
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	08 95       	ret

000009e8 <_ZN5Print5printEmi>:
     9e8:	21 15       	cp	r18, r1
     9ea:	31 05       	cpc	r19, r1
     9ec:	41 f4       	brne	.+16     	; 0x9fe <_ZN5Print5printEmi+0x16>
     9ee:	dc 01       	movw	r26, r24
     9f0:	ed 91       	ld	r30, X+
     9f2:	fc 91       	ld	r31, X
     9f4:	01 90       	ld	r0, Z+
     9f6:	f0 81       	ld	r31, Z
     9f8:	e0 2d       	mov	r30, r0
     9fa:	64 2f       	mov	r22, r20
     9fc:	19 94       	eijmp
     9fe:	ac cf       	rjmp	.-168    	; 0x958 <_ZN5Print11printNumberEmh>

00000a00 <_ZN5Print5printEhi>:
     a00:	9a 01       	movw	r18, r20
     a02:	46 2f       	mov	r20, r22
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	ee cf       	rjmp	.-36     	; 0x9e8 <_ZN5Print5printEmi>

00000a0c <_ZN5Print7printlnEhi>:
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
     a16:	f4 df       	rcall	.-24     	; 0xa00 <_ZN5Print5printEhi>
     a18:	8c 01       	movw	r16, r24
     a1a:	ce 01       	movw	r24, r28
     a1c:	8a df       	rcall	.-236    	; 0x932 <_ZN5Print7printlnEv>
     a1e:	80 0f       	add	r24, r16
     a20:	91 1f       	adc	r25, r17
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <_ZN5Print5printEji>:
     a2c:	9a 01       	movw	r18, r20
     a2e:	ab 01       	movw	r20, r22
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	d9 cf       	rjmp	.-78     	; 0x9e8 <_ZN5Print5printEmi>

00000a36 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     a40:	d3 df       	rcall	.-90     	; 0x9e8 <_ZN5Print5printEmi>
     a42:	8c 01       	movw	r16, r24
  n += println();
     a44:	ce 01       	movw	r24, r28
     a46:	75 df       	rcall	.-278    	; 0x932 <_ZN5Print7printlnEv>
  return n;
}
     a48:	80 0f       	add	r24, r16
     a4a:	91 1f       	adc	r25, r17
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     a56:	08 95       	ret

00000a58 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	0b b6       	in	r0, 0x3b	; 59
     a64:	0f 92       	push	r0
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
     a7e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
     a82:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
     a86:	19 95       	eicall
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0b be       	out	0x3b, r0	; 59
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     aae:	1f 92       	push	r1
     ab0:	0f 92       	push	r0
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	0f 92       	push	r0
     ab6:	11 24       	eor	r1, r1
     ab8:	0b b6       	in	r0, 0x3b	; 59
     aba:	0f 92       	push	r0
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	4f 93       	push	r20
     ac2:	5f 93       	push	r21
     ac4:	6f 93       	push	r22
     ac6:	7f 93       	push	r23
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
     ad4:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
     ad8:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
     adc:	19 95       	eicall
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0b be       	out	0x3b, r0	; 59
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	0b b6       	in	r0, 0x3b	; 59
     b10:	0f 92       	push	r0
     b12:	2f 93       	push	r18
     b14:	3f 93       	push	r19
     b16:	4f 93       	push	r20
     b18:	5f 93       	push	r21
     b1a:	6f 93       	push	r22
     b1c:	7f 93       	push	r23
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	af 93       	push	r26
     b24:	bf 93       	push	r27
     b26:	ef 93       	push	r30
     b28:	ff 93       	push	r31
     b2a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
     b2e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
     b32:	19 95       	eicall
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	bf 91       	pop	r27
     b3a:	af 91       	pop	r26
     b3c:	9f 91       	pop	r25
     b3e:	8f 91       	pop	r24
     b40:	7f 91       	pop	r23
     b42:	6f 91       	pop	r22
     b44:	5f 91       	pop	r21
     b46:	4f 91       	pop	r20
     b48:	3f 91       	pop	r19
     b4a:	2f 91       	pop	r18
     b4c:	0f 90       	pop	r0
     b4e:	0b be       	out	0x3b, r0	; 59
     b50:	0f 90       	pop	r0
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	0f 90       	pop	r0
     b56:	1f 90       	pop	r1
     b58:	18 95       	reti

00000b5a <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     b5a:	1f 92       	push	r1
     b5c:	0f 92       	push	r0
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	0f 92       	push	r0
     b62:	11 24       	eor	r1, r1
     b64:	0b b6       	in	r0, 0x3b	; 59
     b66:	0f 92       	push	r0
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
     b84:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
     b88:	19 95       	eicall
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0b be       	out	0x3b, r0	; 59
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	0b b6       	in	r0, 0x3b	; 59
     bbc:	0f 92       	push	r0
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
     bd6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
     bda:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
     bde:	19 95       	eicall
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	0b b6       	in	r0, 0x3b	; 59
     c12:	0f 92       	push	r0
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
     c2c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
     c30:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
     c34:	19 95       	eicall
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	2f 93       	push	r18
     c6c:	3f 93       	push	r19
     c6e:	4f 93       	push	r20
     c70:	5f 93       	push	r21
     c72:	6f 93       	push	r22
     c74:	7f 93       	push	r23
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
     c7e:	ef 93       	push	r30
     c80:	ff 93       	push	r31
     c82:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
     c86:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
     c8a:	19 95       	eicall
     c8c:	ff 91       	pop	r31
     c8e:	ef 91       	pop	r30
     c90:	bf 91       	pop	r27
     c92:	af 91       	pop	r26
     c94:	9f 91       	pop	r25
     c96:	8f 91       	pop	r24
     c98:	7f 91       	pop	r23
     c9a:	6f 91       	pop	r22
     c9c:	5f 91       	pop	r21
     c9e:	4f 91       	pop	r20
     ca0:	3f 91       	pop	r19
     ca2:	2f 91       	pop	r18
     ca4:	0f 90       	pop	r0
     ca6:	0b be       	out	0x3b, r0	; 59
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	0b b6       	in	r0, 0x3b	; 59
     cbe:	0f 92       	push	r0
     cc0:	2f 93       	push	r18
     cc2:	3f 93       	push	r19
     cc4:	4f 93       	push	r20
     cc6:	5f 93       	push	r21
     cc8:	6f 93       	push	r22
     cca:	7f 93       	push	r23
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	af 93       	push	r26
     cd2:	bf 93       	push	r27
     cd4:	ef 93       	push	r30
     cd6:	ff 93       	push	r31
     cd8:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
     cdc:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
     ce0:	19 95       	eicall
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0b be       	out	0x3b, r0	; 59
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	0f 90       	pop	r0
     d04:	1f 90       	pop	r1
     d06:	18 95       	reti

00000d08 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <timer0_millis>
     d22:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <timer0_millis+0x1>
     d26:	a0 91 00 07 	lds	r26, 0x0700	; 0x800700 <timer0_millis+0x2>
     d2a:	b0 91 01 07 	lds	r27, 0x0701	; 0x800701 <timer0_millis+0x3>
     d2e:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <timer0_fract>
     d32:	23 e0       	ldi	r18, 0x03	; 3
     d34:	23 0f       	add	r18, r19
     d36:	2d 37       	cpi	r18, 0x7D	; 125
     d38:	20 f4       	brcc	.+8      	; 0xd42 <__vector_23+0x3a>
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	a1 1d       	adc	r26, r1
     d3e:	b1 1d       	adc	r27, r1
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <__vector_23+0x44>
     d42:	26 e8       	ldi	r18, 0x86	; 134
     d44:	23 0f       	add	r18, r19
     d46:	02 96       	adiw	r24, 0x02	; 2
     d48:	a1 1d       	adc	r26, r1
     d4a:	b1 1d       	adc	r27, r1
     d4c:	20 93 fd 06 	sts	0x06FD, r18	; 0x8006fd <timer0_fract>
     d50:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <timer0_millis>
     d54:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <timer0_millis+0x1>
     d58:	a0 93 00 07 	sts	0x0700, r26	; 0x800700 <timer0_millis+0x2>
     d5c:	b0 93 01 07 	sts	0x0701, r27	; 0x800701 <timer0_millis+0x3>
     d60:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <timer0_overflow_count>
     d64:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <timer0_overflow_count+0x1>
     d68:	a0 91 04 07 	lds	r26, 0x0704	; 0x800704 <timer0_overflow_count+0x2>
     d6c:	b0 91 05 07 	lds	r27, 0x0705	; 0x800705 <timer0_overflow_count+0x3>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <timer0_overflow_count>
     d7a:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <timer0_overflow_count+0x1>
     d7e:	a0 93 04 07 	sts	0x0704, r26	; 0x800704 <timer0_overflow_count+0x2>
     d82:	b0 93 05 07 	sts	0x0705, r27	; 0x800705 <timer0_overflow_count+0x3>
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <millis>:
     d9c:	2f b7       	in	r18, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	60 91 fe 06 	lds	r22, 0x06FE	; 0x8006fe <timer0_millis>
     da4:	70 91 ff 06 	lds	r23, 0x06FF	; 0x8006ff <timer0_millis+0x1>
     da8:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <timer0_millis+0x2>
     dac:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <timer0_millis+0x3>
     db0:	2f bf       	out	0x3f, r18	; 63
     db2:	08 95       	ret

00000db4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     db4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     db6:	84 b5       	in	r24, 0x24	; 36
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     dbc:	84 b5       	in	r24, 0x24	; 36
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     dc2:	85 b5       	in	r24, 0x25	; 37
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     dc8:	85 b5       	in	r24, 0x25	; 37
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     dce:	ee e6       	ldi	r30, 0x6E	; 110
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     dd8:	e1 e8       	ldi	r30, 0x81	; 129
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     dde:	80 81       	ld	r24, Z
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     de4:	80 81       	ld	r24, Z
     de6:	81 60       	ori	r24, 0x01	; 1
     de8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     dea:	e0 e8       	ldi	r30, 0x80	; 128
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     df4:	e1 eb       	ldi	r30, 0xB1	; 177
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	84 60       	ori	r24, 0x04	; 4
     dfc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     dfe:	e0 eb       	ldi	r30, 0xB0	; 176
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     e08:	e1 e9       	ldi	r30, 0x91	; 145
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	82 60       	ori	r24, 0x02	; 2
     e10:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     e12:	80 81       	ld	r24, Z
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     e18:	e0 e9       	ldi	r30, 0x90	; 144
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     e22:	e1 ea       	ldi	r30, 0xA1	; 161
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     e2c:	80 81       	ld	r24, Z
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     e32:	e0 ea       	ldi	r30, 0xA0	; 160
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	81 60       	ori	r24, 0x01	; 1
     e3a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     e3c:	e1 e2       	ldi	r30, 0x21	; 33
     e3e:	f1 e0       	ldi	r31, 0x01	; 1
     e40:	80 81       	ld	r24, Z
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     e46:	80 81       	ld	r24, Z
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     e4c:	e0 e2       	ldi	r30, 0x20	; 32
     e4e:	f1 e0       	ldi	r31, 0x01	; 1
     e50:	80 81       	ld	r24, Z
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e56:	ea e7       	ldi	r30, 0x7A	; 122
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	84 60       	ori	r24, 0x04	; 4
     e5e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e60:	80 81       	ld	r24, Z
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e66:	80 81       	ld	r24, Z
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e72:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     e76:	08 95       	ret

00000e78 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	e2 31       	cpi	r30, 0x12	; 18
     e80:	f1 05       	cpc	r31, r1
     e82:	08 f0       	brcs	.+2      	; 0xe86 <turnOffPWM+0xe>
     e84:	4e c0       	rjmp	.+156    	; 0xf22 <turnOffPWM+0xaa>
     e86:	88 27       	eor	r24, r24
     e88:	ee 58       	subi	r30, 0x8E	; 142
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     e92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     e96:	8f 77       	andi	r24, 0x7F	; 127
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     e9e:	8f 7d       	andi	r24, 0xDF	; 223
     ea0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     ea4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     ea6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	f9 cf       	rjmp	.-14     	; 0xea0 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     eae:	84 b5       	in	r24, 0x24	; 36
     eb0:	8f 77       	andi	r24, 0x7F	; 127
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     eb4:	84 b5       	in	r24, 0x24	; 36
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	84 bd       	out	0x24, r24	; 36
     eba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     ebc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     ec0:	8f 77       	andi	r24, 0x7F	; 127
     ec2:	03 c0       	rjmp	.+6      	; 0xeca <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ec4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     ec8:	8f 7d       	andi	r24, 0xDF	; 223
     eca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     ece:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     ed0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     ed4:	8f 77       	andi	r24, 0x7F	; 127
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     ed8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     edc:	8f 7d       	andi	r24, 0xDF	; 223
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     ee0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     eea:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     eec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ef0:	8f 77       	andi	r24, 0x7F	; 127
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     ef4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ef8:	8f 7d       	andi	r24, 0xDF	; 223
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     efc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     f06:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     f08:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f0c:	8f 77       	andi	r24, 0x7F	; 127
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     f10:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     f18:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f1c:	87 7f       	andi	r24, 0xF7	; 247
     f1e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f22:	08 95       	ret

00000f24 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	fc 01       	movw	r30, r24
     f2c:	e2 5b       	subi	r30, 0xB2	; 178
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f32:	fc 01       	movw	r30, r24
     f34:	ec 56       	subi	r30, 0x6C	; 108
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f3a:	88 23       	and	r24, r24
     f3c:	61 f1       	breq	.+88     	; 0xf96 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	fc 01       	movw	r30, r24
     f46:	ec 50       	subi	r30, 0x0C	; 12
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	c5 91       	lpm	r28, Z+
     f4c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f4e:	fc 01       	movw	r30, r24
     f50:	e6 52       	subi	r30, 0x26	; 38
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	a5 91       	lpm	r26, Z+
     f56:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f58:	61 11       	cpse	r22, r1
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f5c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f5e:	f8 94       	cli
		*reg &= ~bit;
     f60:	88 81       	ld	r24, Y
     f62:	20 95       	com	r18
     f64:	82 23       	and	r24, r18
     f66:	88 83       	st	Y, r24
		*out &= ~bit;
     f68:	ec 91       	ld	r30, X
     f6a:	2e 23       	and	r18, r30
     f6c:	0b c0       	rjmp	.+22     	; 0xf84 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f6e:	62 30       	cpi	r22, 0x02	; 2
     f70:	61 f4       	brne	.+24     	; 0xf8a <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f72:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f74:	f8 94       	cli
		*reg &= ~bit;
     f76:	88 81       	ld	r24, Y
     f78:	32 2f       	mov	r19, r18
     f7a:	30 95       	com	r19
     f7c:	83 23       	and	r24, r19
     f7e:	88 83       	st	Y, r24
		*out |= bit;
     f80:	ec 91       	ld	r30, X
     f82:	2e 2b       	or	r18, r30
     f84:	2c 93       	st	X, r18
		SREG = oldSREG;
     f86:	9f bf       	out	0x3f, r25	; 63
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f8a:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f8c:	f8 94       	cli
		*reg |= bit;
     f8e:	e8 81       	ld	r30, Y
     f90:	2e 2b       	or	r18, r30
     f92:	28 83       	st	Y, r18
		SREG = oldSREG;
     f94:	8f bf       	out	0x3f, r24	; 63
	}
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	f9 01       	movw	r30, r18
     fa8:	e8 5f       	subi	r30, 0xF8	; 248
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fae:	f9 01       	movw	r30, r18
     fb0:	e2 5b       	subi	r30, 0xB2	; 178
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     fb6:	f9 01       	movw	r30, r18
     fb8:	ec 56       	subi	r30, 0x6C	; 108
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     fbe:	cc 23       	and	r28, r28
     fc0:	b9 f0       	breq	.+46     	; 0xff0 <digitalWrite+0x54>
     fc2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fc4:	81 11       	cpse	r24, r1
     fc6:	58 df       	rcall	.-336    	; 0xe78 <turnOffPWM>

	out = portOutputRegister(port);
     fc8:	ec 2f       	mov	r30, r28
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	e6 52       	subi	r30, 0x26	; 38
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	a5 91       	lpm	r26, Z+
     fd6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fd8:	9f b7       	in	r25, 0x3f	; 63
	cli();
     fda:	f8 94       	cli

	if (val == LOW) {
     fdc:	11 11       	cpse	r17, r1
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <digitalWrite+0x4c>
		*out &= ~bit;
     fe0:	8c 91       	ld	r24, X
     fe2:	d0 95       	com	r29
     fe4:	d8 23       	and	r29, r24
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <digitalWrite+0x50>
	} else {
		*out |= bit;
     fe8:	ec 91       	ld	r30, X
     fea:	de 2b       	or	r29, r30
     fec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     fee:	9f bf       	out	0x3f, r25	; 63
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	08 95       	ret

00000ff8 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <free>

00001002 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    1008:	88 81       	ld	r24, Y
    100a:	99 81       	ldd	r25, Y+1	; 0x01
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	11 f0       	breq	.+4      	; 0x1014 <_ZN6String10invalidateEv+0x12>
    1010:	0e 94 6e 19 	call	0x32dc	; 0x32dc <free>
	buffer = NULL;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	18 82       	st	Y, r1
	capacity = len = 0;
    1018:	1d 82       	std	Y+5, r1	; 0x05
    101a:	1c 82       	std	Y+4, r1	; 0x04
    101c:	1b 82       	std	Y+3, r1	; 0x03
    101e:	1a 82       	std	Y+2, r1	; 0x02
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
    1030:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1032:	6f 5f       	subi	r22, 0xFF	; 255
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	88 81       	ld	r24, Y
    1038:	99 81       	ldd	r25, Y+1	; 0x01
    103a:	0e 94 f7 19 	call	0x33ee	; 0x33ee <realloc>
	if (newbuffer) {
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	31 f0       	breq	.+12     	; 0x104e <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    1042:	99 83       	std	Y+1, r25	; 0x01
    1044:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1046:	1b 83       	std	Y+3, r17	; 0x03
    1048:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    104e:	80 e0       	ldi	r24, 0x00	; 0
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    1060:	88 81       	ld	r24, Y
    1062:	99 81       	ldd	r25, Y+1	; 0x01
    1064:	89 2b       	or	r24, r25
    1066:	29 f0       	breq	.+10     	; 0x1072 <_ZN6String7reserveEj+0x18>
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	86 17       	cp	r24, r22
    106e:	97 07       	cpc	r25, r23
    1070:	58 f4       	brcc	.+22     	; 0x1088 <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    1072:	ce 01       	movw	r24, r28
    1074:	d8 df       	rcall	.-80     	; 0x1026 <_ZN6String12changeBufferEj>
    1076:	88 23       	and	r24, r24
    1078:	41 f0       	breq	.+16     	; 0x108a <_ZN6String7reserveEj+0x30>
		if (len == 0) buffer[0] = 0;
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	89 2b       	or	r24, r25
    1080:	19 f4       	brne	.+6      	; 0x1088 <_ZN6String7reserveEj+0x2e>
    1082:	e8 81       	ld	r30, Y
    1084:	f9 81       	ldd	r31, Y+1	; 0x01
    1086:	10 82       	st	Z, r1
    1088:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	7b 01       	movw	r14, r22
    10a0:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    10a2:	ba 01       	movw	r22, r20
    10a4:	da df       	rcall	.-76     	; 0x105a <_ZN6String7reserveEj>
    10a6:	81 11       	cpse	r24, r1
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <_ZN6String4copyEPKcj+0x20>
		invalidate();
    10aa:	ce 01       	movw	r24, r28
    10ac:	aa df       	rcall	.-172    	; 0x1002 <_ZN6String10invalidateEv>
		return *this;
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <_ZN6String4copyEPKcj+0x2e>
	}
	len = length;
    10b0:	1d 83       	std	Y+5, r17	; 0x05
    10b2:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    10b4:	b7 01       	movw	r22, r14
    10b6:	88 81       	ld	r24, Y
    10b8:	99 81       	ldd	r25, Y+1	; 0x01
    10ba:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcpy>
	return *this;
}
    10be:	ce 01       	movw	r24, r28
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    10ce:	fc 01       	movw	r30, r24
    10d0:	11 82       	std	Z+1, r1	; 0x01
    10d2:	10 82       	st	Z, r1
	capacity = 0;
    10d4:	13 82       	std	Z+3, r1	; 0x03
    10d6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    10d8:	15 82       	std	Z+5, r1	; 0x05
    10da:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    10dc:	61 15       	cp	r22, r1
    10de:	71 05       	cpc	r23, r1
    10e0:	49 f0       	breq	.+18     	; 0x10f4 <_ZN6StringC1EPKc+0x26>
    10e2:	fb 01       	movw	r30, r22
    10e4:	01 90       	ld	r0, Z+
    10e6:	00 20       	and	r0, r0
    10e8:	e9 f7       	brne	.-6      	; 0x10e4 <_ZN6StringC1EPKc+0x16>
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	af 01       	movw	r20, r30
    10ee:	46 1b       	sub	r20, r22
    10f0:	57 0b       	sbc	r21, r23
    10f2:	ce cf       	rjmp	.-100    	; 0x1090 <_ZN6String4copyEPKcj>
    10f4:	08 95       	ret

000010f6 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	1f 92       	push	r1
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	69 83       	std	Y+1, r22	; 0x01
    1102:	dc 01       	movw	r26, r24
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	02 80       	ldd	r0, Z+2	; 0x02
    110a:	f3 81       	ldd	r31, Z+3	; 0x03
    110c:	e0 2d       	mov	r30, r0
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	be 01       	movw	r22, r28
    1114:	6f 5f       	subi	r22, 0xFF	; 255
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	19 95       	eicall
    111a:	0f 90       	pop	r0
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <_ZN5SDLib4File5writeEPKhj>:
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
    1128:	89 8d       	ldd	r24, Y+25	; 0x19
    112a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	39 f4       	brne	.+14     	; 0x113e <_ZN5SDLib4File5writeEPKhj+0x1c>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0b c0       	rjmp	.+22     	; 0x1154 <_ZN5SDLib4File5writeEPKhj+0x32>
    113e:	fc 01       	movw	r30, r24
    1140:	13 82       	std	Z+3, r1	; 0x03
    1142:	12 82       	std	Z+2, r1	; 0x02
    1144:	0e 94 17 11 	call	0x222e	; 0x222e <_ZN6SdFile5writeEPKvj>
    1148:	e9 8d       	ldd	r30, Y+25	; 0x19
    114a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    114c:	22 81       	ldd	r18, Z+2	; 0x02
    114e:	33 81       	ldd	r19, Z+3	; 0x03
    1150:	23 2b       	or	r18, r19
    1152:	71 f7       	brne	.-36     	; 0x1130 <_ZN5SDLib4File5writeEPKhj+0xe>
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <_ZN5SDLib4File5flushEv>:
    115a:	fc 01       	movw	r30, r24
    115c:	81 8d       	ldd	r24, Z+25	; 0x19
    115e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	09 f0       	breq	.+2      	; 0x1166 <_ZN5SDLib4File5flushEv+0xc>
    1164:	c7 c6       	rjmp	.+3470   	; 0x1ef4 <_ZN6SdFile4syncEv>
    1166:	08 95       	ret

00001168 <_ZN6SdFile4readEv>:
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	1f 92       	push	r1
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	be 01       	movw	r22, r28
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	db d4       	rcall	.+2486   	; 0x1b34 <_ZN6SdFile4readEPvj>
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	19 f4       	brne	.+6      	; 0x1188 <_ZN6SdFile4readEv+0x20>
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <_ZN6SdFile4readEv+0x24>
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <_ZN5SDLib4File4readEv>:
    1194:	fc 01       	movw	r30, r24
    1196:	81 8d       	ldd	r24, Z+25	; 0x19
    1198:	92 8d       	ldd	r25, Z+26	; 0x1a
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	09 f0       	breq	.+2      	; 0x11a0 <_ZN5SDLib4File4readEv+0xc>
    119e:	e4 cf       	rjmp	.-56     	; 0x1168 <_ZN6SdFile4readEv>
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
    11a4:	08 95       	ret

000011a6 <_ZN5SDLib4File4peekEv>:
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	fc 01       	movw	r30, r24
    11b0:	81 8d       	ldd	r24, Z+25	; 0x19
    11b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	a9 f0       	breq	.+42     	; 0x11e2 <_ZN5SDLib4File4peekEv+0x3c>
    11b8:	ef 01       	movw	r28, r30
    11ba:	d6 df       	rcall	.-84     	; 0x1168 <_ZN6SdFile4readEv>
    11bc:	8c 01       	movw	r16, r24
    11be:	0f 3f       	cpi	r16, 0xFF	; 255
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	18 07       	cpc	r17, r24
    11c4:	89 f0       	breq	.+34     	; 0x11e8 <_ZN5SDLib4File4peekEv+0x42>
    11c6:	89 8d       	ldd	r24, Y+25	; 0x19
    11c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11ca:	fc 01       	movw	r30, r24
    11cc:	42 85       	ldd	r20, Z+10	; 0x0a
    11ce:	53 85       	ldd	r21, Z+11	; 0x0b
    11d0:	64 85       	ldd	r22, Z+12	; 0x0c
    11d2:	75 85       	ldd	r23, Z+13	; 0x0d
    11d4:	41 50       	subi	r20, 0x01	; 1
    11d6:	51 09       	sbc	r21, r1
    11d8:	61 09       	sbc	r22, r1
    11da:	71 09       	sbc	r23, r1
    11dc:	f5 d5       	rcall	.+3050   	; 0x1dc8 <_ZN6SdFile7seekSetEm>
    11de:	c8 01       	movw	r24, r16
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <_ZN5SDLib4File4peekEv+0x46>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <_ZN5SDLib4File4peekEv+0x46>
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <_ZN5SDLib4FileC1Ev>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	13 82       	std	Z+3, r1	; 0x03
    11fa:	12 82       	std	Z+2, r1	; 0x02
    11fc:	88 ee       	ldi	r24, 0xE8	; 232
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	a0 e0       	ldi	r26, 0x00	; 0
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	84 83       	std	Z+4, r24	; 0x04
    1206:	95 83       	std	Z+5, r25	; 0x05
    1208:	a6 83       	std	Z+6, r26	; 0x06
    120a:	b7 83       	std	Z+7, r27	; 0x07
    120c:	85 ec       	ldi	r24, 0xC5	; 197
    120e:	95 e0       	ldi	r25, 0x05	; 5
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	12 8e       	std	Z+26, r1	; 0x1a
    1216:	11 8e       	std	Z+25, r1	; 0x19
    1218:	14 86       	std	Z+12, r1	; 0x0c
    121a:	08 95       	ret

0000121c <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    121c:	dc 01       	movw	r26, r24
    121e:	59 96       	adiw	r26, 0x19	; 25
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	5a 97       	sbiw	r26, 0x1a	; 26
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	29 f0       	breq	.+10     	; 0x1234 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    122a:	62 85       	ldd	r22, Z+10	; 0x0a
    122c:	73 85       	ldd	r23, Z+11	; 0x0b
    122e:	84 85       	ldd	r24, Z+12	; 0x0c
    1230:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    1232:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1234:	6f ef       	ldi	r22, 0xFF	; 255
    1236:	7f ef       	ldi	r23, 0xFF	; 255
    1238:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    123a:	08 95       	ret

0000123c <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    123c:	dc 01       	movw	r26, r24
    123e:	59 96       	adiw	r26, 0x19	; 25
    1240:	ed 91       	ld	r30, X+
    1242:	fc 91       	ld	r31, X
    1244:	5a 97       	sbiw	r26, 0x1a	; 26
    1246:	30 97       	sbiw	r30, 0x00	; 0
    1248:	29 f0       	breq	.+10     	; 0x1254 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    124a:	63 89       	ldd	r22, Z+19	; 0x13
    124c:	74 89       	ldd	r23, Z+20	; 0x14
    124e:	85 89       	ldd	r24, Z+21	; 0x15
    1250:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    1252:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    125a:	08 95       	ret

0000125c <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
  if (! _file) return 0;
    1268:	fc 01       	movw	r30, r24
    126a:	21 8d       	ldd	r18, Z+25	; 0x19
    126c:	32 8d       	ldd	r19, Z+26	; 0x1a
    126e:	23 2b       	or	r18, r19
    1270:	c9 f0       	breq	.+50     	; 0x12a4 <_ZN5SDLib4File9availableEv+0x48>
    1272:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    1274:	e3 df       	rcall	.-58     	; 0x123c <_ZN5SDLib4File4sizeEv>
    1276:	6b 01       	movw	r12, r22
    1278:	7c 01       	movw	r14, r24
    127a:	ce 01       	movw	r24, r28
    127c:	cf df       	rcall	.-98     	; 0x121c <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    127e:	a7 01       	movw	r20, r14
    1280:	96 01       	movw	r18, r12
    1282:	26 1b       	sub	r18, r22
    1284:	37 0b       	sbc	r19, r23
    1286:	48 0b       	sbc	r20, r24
    1288:	59 0b       	sbc	r21, r25
    128a:	da 01       	movw	r26, r20
    128c:	c9 01       	movw	r24, r18
    128e:	81 15       	cp	r24, r1
    1290:	30 e8       	ldi	r19, 0x80	; 128
    1292:	93 07       	cpc	r25, r19
    1294:	a1 05       	cpc	r26, r1
    1296:	b1 05       	cpc	r27, r1
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <_ZN5SDLib4File9availableEv+0x4c>
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	9f e7       	ldi	r25, 0x7F	; 127
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	08 95       	ret

000012b6 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    12b6:	e6 e0       	ldi	r30, 0x06	; 6
    12b8:	f7 e0       	ldi	r31, 0x07	; 7
    12ba:	15 82       	std	Z+5, r1	; 0x05
    12bc:	16 82       	std	Z+6, r1	; 0x06
    12be:	11 86       	std	Z+9, r1	; 0x09
    12c0:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e0       	ldi	r26, 0x00	; 0
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	84 87       	std	Z+12, r24	; 0x0c
    12cc:	95 87       	std	Z+13, r25	; 0x0d
    12ce:	a6 87       	std	Z+14, r26	; 0x0e
    12d0:	b7 87       	std	Z+15, r27	; 0x0f
    12d2:	13 a2       	std	Z+35, r1	; 0x23
    12d4:	15 a6       	std	Z+45, r1	; 0x2d
    12d6:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    12d8:	87 ed       	ldi	r24, 0xD7	; 215
    12da:	95 e0       	ldi	r25, 0x05	; 5
    12dc:	93 a7       	std	Z+43, r25	; 0x2b
    12de:	82 a7       	std	Z+42, r24	; 0x2a
    12e0:	17 a6       	std	Z+47, r1	; 0x2f
    12e2:	08 95       	ret

000012e4 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    12e4:	9f b7       	in	r25, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	20 91 5d 09 	lds	r18, 0x095D	; 0x80095d <_ZN8SPIClass13interruptModeE>
    12ec:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <_ZN8SPIClass13interruptSaveE>
    12f0:	21 30       	cpi	r18, 0x01	; 1
    12f2:	19 f4       	brne	.+6      	; 0x12fa <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    12f4:	8d bb       	out	0x1d, r24	; 29
    12f6:	9f bf       	out	0x3f, r25	; 63
    12f8:	08 95       	ret
    12fa:	8f bf       	out	0x3f, r24	; 63
    12fc:	08 95       	ret

000012fe <_ZN11SPISettingsC1Emhh>:
    12fe:	0f 93       	push	r16
    1300:	fc 01       	movw	r30, r24
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	92 e1       	ldi	r25, 0x12	; 18
    1306:	aa e7       	ldi	r26, 0x7A	; 122
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	48 17       	cp	r20, r24
    130e:	59 07       	cpc	r21, r25
    1310:	6a 07       	cpc	r22, r26
    1312:	7b 07       	cpc	r23, r27
    1314:	40 f4       	brcc	.+16     	; 0x1326 <_ZN11SPISettingsC1Emhh+0x28>
    1316:	b6 95       	lsr	r27
    1318:	a7 95       	ror	r26
    131a:	97 95       	ror	r25
    131c:	87 95       	ror	r24
    131e:	3f 5f       	subi	r19, 0xFF	; 255
    1320:	36 30       	cpi	r19, 0x06	; 6
    1322:	a1 f7       	brne	.-24     	; 0x130c <_ZN11SPISettingsC1Emhh+0xe>
    1324:	37 e0       	ldi	r19, 0x07	; 7
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	93 27       	eor	r25, r19
    132a:	22 23       	and	r18, r18
    132c:	11 f0       	breq	.+4      	; 0x1332 <_ZN11SPISettingsC1Emhh+0x34>
    132e:	20 e5       	ldi	r18, 0x50	; 80
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <_ZN11SPISettingsC1Emhh+0x36>
    1332:	20 e7       	ldi	r18, 0x70	; 112
    1334:	0c 70       	andi	r16, 0x0C	; 12
    1336:	89 2f       	mov	r24, r25
    1338:	86 95       	lsr	r24
    133a:	08 2b       	or	r16, r24
    133c:	02 2b       	or	r16, r18
    133e:	00 83       	st	Z, r16
    1340:	91 70       	andi	r25, 0x01	; 1
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	0f 91       	pop	r16
    1346:	08 95       	ret

00001348 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1348:	20 91 5d 09 	lds	r18, 0x095D	; 0x80095d <_ZN8SPIClass13interruptModeE>
    134c:	22 23       	and	r18, r18
    134e:	99 f0       	breq	.+38     	; 0x1376 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1350:	4f b7       	in	r20, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	20 91 5d 09 	lds	r18, 0x095D	; 0x80095d <_ZN8SPIClass13interruptModeE>
    1358:	21 30       	cpi	r18, 0x01	; 1
    135a:	59 f4       	brne	.+22     	; 0x1372 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    135c:	2d b3       	in	r18, 0x1d	; 29
    135e:	20 93 5b 09 	sts	0x095B, r18	; 0x80095b <_ZN8SPIClass13interruptSaveE>
    1362:	3d b3       	in	r19, 0x1d	; 29
    1364:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <_ZN8SPIClass13interruptMaskE>
    1368:	20 95       	com	r18
    136a:	23 23       	and	r18, r19
    136c:	2d bb       	out	0x1d, r18	; 29
    136e:	4f bf       	out	0x3f, r20	; 63
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1372:	40 93 5b 09 	sts	0x095B, r20	; 0x80095b <_ZN8SPIClass13interruptSaveE>
    1376:	8c bd       	out	0x2c, r24	; 44
    1378:	9d bd       	out	0x2d, r25	; 45
    137a:	08 95       	ret

0000137c <_ZN8SPIClass8transferEh>:
    137c:	8e bd       	out	0x2e, r24	; 46
    137e:	00 00       	nop
    1380:	0d b4       	in	r0, 0x2d	; 45
    1382:	07 fe       	sbrs	r0, 7
    1384:	fd cf       	rjmp	.-6      	; 0x1380 <_ZN8SPIClass8transferEh+0x4>
    1386:	8e b5       	in	r24, 0x2e	; 46
    1388:	08 95       	ret

0000138a <_ZL6spiRecv>:
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	f7 cf       	rjmp	.-18     	; 0x137c <_ZN8SPIClass8transferEh>

0000138e <_ZN7Sd2Card14chipSelectHighEv>:
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	fc 01       	movw	r30, r24
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	03 de       	rcall	.-1018   	; 0xf9c <digitalWrite>
    1396:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZL20chip_select_asserted>
    139a:	88 23       	and	r24, r24
    139c:	31 f0       	breq	.+12     	; 0x13aa <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    139e:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <_ZL20chip_select_asserted>
    13a2:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <_ZN8SPIClass13interruptModeE>
    13a6:	81 11       	cpse	r24, r1
    13a8:	9d cf       	rjmp	.-198    	; 0x12e4 <_ZN8SPIClass14endTransactionEv.part.3>
    13aa:	08 95       	ret

000013ac <_ZN7Sd2Card13chipSelectLowEv>:
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	ec 01       	movw	r28, r24
    13b2:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZL20chip_select_asserted>
    13b6:	81 11       	cpse	r24, r1
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <_ZN7Sd2Card13chipSelectLowEv+0x1e>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <_ZL20chip_select_asserted>
    13c0:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <_ZL8settings>
    13c4:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <_ZL8settings+0x1>
    13c8:	bf df       	rcall	.-130    	; 0x1348 <_ZN8SPIClass16beginTransactionE11SPISettings>
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	e4 cd       	rjmp	.-1080   	; 0xf9c <digitalWrite>

000013d4 <_ZN7Sd2Card7readEndEv>:
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	88 23       	and	r24, r24
    13de:	79 f0       	breq	.+30     	; 0x13fe <_ZN7Sd2Card7readEndEv+0x2a>
    13e0:	8f 81       	ldd	r24, Y+7	; 0x07
    13e2:	98 85       	ldd	r25, Y+8	; 0x08
    13e4:	9c 01       	movw	r18, r24
    13e6:	2f 5f       	subi	r18, 0xFF	; 255
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	38 87       	std	Y+8, r19	; 0x08
    13ec:	2f 83       	std	Y+7, r18	; 0x07
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	92 40       	sbci	r25, 0x02	; 2
    13f2:	10 f4       	brcc	.+4      	; 0x13f8 <_ZN7Sd2Card7readEndEv+0x24>
    13f4:	ca df       	rcall	.-108    	; 0x138a <_ZL6spiRecv>
    13f6:	f4 cf       	rjmp	.-24     	; 0x13e0 <_ZN7Sd2Card7readEndEv+0xc>
    13f8:	ce 01       	movw	r24, r28
    13fa:	c9 df       	rcall	.-110    	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    13fc:	1e 82       	std	Y+6, r1	; 0x06
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <_ZN7Sd2Card10setSckRateEh>:
    1404:	0f 93       	push	r16
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	1f 92       	push	r1
    140c:	1f 92       	push	r1
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	67 30       	cpi	r22, 0x07	; 7
    1414:	28 f0       	brcs	.+10     	; 0x1420 <_ZN7Sd2Card10setSckRateEh+0x1c>
    1416:	26 e1       	ldi	r18, 0x16	; 22
    1418:	fc 01       	movw	r30, r24
    141a:	25 83       	std	Z+5, r18	; 0x05
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	46 c0       	rjmp	.+140    	; 0x14ac <_ZN7Sd2Card10setSckRateEh+0xa8>
    1420:	62 30       	cpi	r22, 0x02	; 2
    1422:	f9 f0       	breq	.+62     	; 0x1462 <_ZN7Sd2Card10setSckRateEh+0x5e>
    1424:	58 f4       	brcc	.+22     	; 0x143c <_ZN7Sd2Card10setSckRateEh+0x38>
    1426:	66 23       	and	r22, r22
    1428:	a9 f0       	breq	.+42     	; 0x1454 <_ZN7Sd2Card10setSckRateEh+0x50>
    142a:	61 30       	cpi	r22, 0x01	; 1
    142c:	79 f5       	brne	.+94     	; 0x148c <_ZN7Sd2Card10setSckRateEh+0x88>
    142e:	00 e0       	ldi	r16, 0x00	; 0
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	59 e0       	ldi	r21, 0x09	; 9
    1436:	6d e3       	ldi	r22, 0x3D	; 61
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	2e c0       	rjmp	.+92     	; 0x1498 <_ZN7Sd2Card10setSckRateEh+0x94>
    143c:	64 30       	cpi	r22, 0x04	; 4
    143e:	f9 f0       	breq	.+62     	; 0x147e <_ZN7Sd2Card10setSckRateEh+0x7a>
    1440:	b8 f0       	brcs	.+46     	; 0x1470 <_ZN7Sd2Card10setSckRateEh+0x6c>
    1442:	65 30       	cpi	r22, 0x05	; 5
    1444:	19 f5       	brne	.+70     	; 0x148c <_ZN7Sd2Card10setSckRateEh+0x88>
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	40 e9       	ldi	r20, 0x90	; 144
    144c:	50 ed       	ldi	r21, 0xD0	; 208
    144e:	63 e0       	ldi	r22, 0x03	; 3
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	22 c0       	rjmp	.+68     	; 0x1498 <_ZN7Sd2Card10setSckRateEh+0x94>
    1454:	00 e0       	ldi	r16, 0x00	; 0
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	40 e4       	ldi	r20, 0x40	; 64
    145a:	58 e7       	ldi	r21, 0x78	; 120
    145c:	6d e7       	ldi	r22, 0x7D	; 125
    145e:	71 e0       	ldi	r23, 0x01	; 1
    1460:	1b c0       	rjmp	.+54     	; 0x1498 <_ZN7Sd2Card10setSckRateEh+0x94>
    1462:	00 e0       	ldi	r16, 0x00	; 0
    1464:	21 e0       	ldi	r18, 0x01	; 1
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	54 e8       	ldi	r21, 0x84	; 132
    146a:	6e e1       	ldi	r22, 0x1E	; 30
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <_ZN7Sd2Card10setSckRateEh+0x94>
    1470:	00 e0       	ldi	r16, 0x00	; 0
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	40 e4       	ldi	r20, 0x40	; 64
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	6f e0       	ldi	r22, 0x0F	; 15
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <_ZN7Sd2Card10setSckRateEh+0x94>
    147e:	00 e0       	ldi	r16, 0x00	; 0
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 ea       	ldi	r21, 0xA1	; 161
    1486:	67 e0       	ldi	r22, 0x07	; 7
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <_ZN7Sd2Card10setSckRateEh+0x94>
    148c:	00 e0       	ldi	r16, 0x00	; 0
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	48 e4       	ldi	r20, 0x48	; 72
    1492:	58 ee       	ldi	r21, 0xE8	; 232
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	30 df       	rcall	.-416    	; 0x12fe <_ZN11SPISettingsC1Emhh>
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <_ZL8settings+0x1>
    14a6:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <_ZL8settings>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <_ZN7Sd2Card11waitNotBusyEj>:
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	eb 01       	movw	r28, r22
    14c2:	6c dc       	rcall	.-1832   	; 0xd9c <millis>
    14c4:	8b 01       	movw	r16, r22
    14c6:	61 df       	rcall	.-318    	; 0x138a <_ZL6spiRecv>
    14c8:	8f 3f       	cpi	r24, 0xFF	; 255
    14ca:	41 f0       	breq	.+16     	; 0x14dc <_ZN7Sd2Card11waitNotBusyEj+0x24>
    14cc:	67 dc       	rcall	.-1842   	; 0xd9c <millis>
    14ce:	60 1b       	sub	r22, r16
    14d0:	71 0b       	sbc	r23, r17
    14d2:	6c 17       	cp	r22, r28
    14d4:	7d 07       	cpc	r23, r29
    14d6:	b8 f3       	brcs	.-18     	; 0x14c6 <_ZN7Sd2Card11waitNotBusyEj+0xe>
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	01 c0       	rjmp	.+2      	; 0x14de <_ZN7Sd2Card11waitNotBusyEj+0x26>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	08 95       	ret

000014e8 <_ZN7Sd2Card11cardCommandEhm>:
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	ec 01       	movw	r28, r24
    14fc:	f6 2e       	mov	r15, r22
    14fe:	49 01       	movw	r8, r18
    1500:	5a 01       	movw	r10, r20
    1502:	68 df       	rcall	.-304    	; 0x13d4 <_ZN7Sd2Card7readEndEv>
    1504:	ce 01       	movw	r24, r28
    1506:	52 df       	rcall	.-348    	; 0x13ac <_ZN7Sd2Card13chipSelectLowEv>
    1508:	6c e2       	ldi	r22, 0x2C	; 44
    150a:	71 e0       	ldi	r23, 0x01	; 1
    150c:	ce 01       	movw	r24, r28
    150e:	d4 df       	rcall	.-88     	; 0x14b8 <_ZN7Sd2Card11waitNotBusyEj>
    1510:	8f 2d       	mov	r24, r15
    1512:	80 64       	ori	r24, 0x40	; 64
    1514:	33 df       	rcall	.-410    	; 0x137c <_ZN8SPIClass8transferEh>
    1516:	08 e1       	ldi	r16, 0x18	; 24
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	d5 01       	movw	r26, r10
    151c:	c4 01       	movw	r24, r8
    151e:	00 2e       	mov	r0, r16
    1520:	04 c0       	rjmp	.+8      	; 0x152a <_ZN7Sd2Card11cardCommandEhm+0x42>
    1522:	b6 95       	lsr	r27
    1524:	a7 95       	ror	r26
    1526:	97 95       	ror	r25
    1528:	87 95       	ror	r24
    152a:	0a 94       	dec	r0
    152c:	d2 f7       	brpl	.-12     	; 0x1522 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    152e:	26 df       	rcall	.-436    	; 0x137c <_ZN8SPIClass8transferEh>
    1530:	08 50       	subi	r16, 0x08	; 8
    1532:	11 09       	sbc	r17, r1
    1534:	08 3f       	cpi	r16, 0xF8	; 248
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	18 07       	cpc	r17, r24
    153a:	79 f7       	brne	.-34     	; 0x151a <_ZN7Sd2Card11cardCommandEhm+0x32>
    153c:	ff 20       	and	r15, r15
    153e:	29 f0       	breq	.+10     	; 0x154a <_ZN7Sd2Card11cardCommandEhm+0x62>
    1540:	88 e0       	ldi	r24, 0x08	; 8
    1542:	f8 12       	cpse	r15, r24
    1544:	04 c0       	rjmp	.+8      	; 0x154e <_ZN7Sd2Card11cardCommandEhm+0x66>
    1546:	87 e8       	ldi	r24, 0x87	; 135
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <_ZN7Sd2Card11cardCommandEhm+0x68>
    154a:	85 e9       	ldi	r24, 0x95	; 149
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <_ZN7Sd2Card11cardCommandEhm+0x68>
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	15 df       	rcall	.-470    	; 0x137c <_ZN8SPIClass8transferEh>
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	1a df       	rcall	.-460    	; 0x138a <_ZL6spiRecv>
    1556:	8a 87       	std	Y+10, r24	; 0x0a
    1558:	87 ff       	sbrs	r24, 7
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    155c:	1f 3f       	cpi	r17, 0xFF	; 255
    155e:	11 f0       	breq	.+4      	; 0x1564 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1560:	1f 5f       	subi	r17, 0xFF	; 255
    1562:	f8 cf       	rjmp	.-16     	; 0x1554 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	8f 90       	pop	r8
    1576:	08 95       	ret

00001578 <_ZN7Sd2Card4initEhh>:
    1578:	7f 92       	push	r7
    157a:	8f 92       	push	r8
    157c:	9f 92       	push	r9
    157e:	af 92       	push	r10
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	1f 92       	push	r1
    1594:	1f 92       	push	r1
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	7c 01       	movw	r14, r24
    159c:	76 2e       	mov	r7, r22
    159e:	fc 01       	movw	r30, r24
    15a0:	13 86       	std	Z+11, r1	; 0x0b
    15a2:	11 86       	std	Z+9, r1	; 0x09
    15a4:	16 82       	std	Z+6, r1	; 0x06
    15a6:	15 82       	std	Z+5, r1	; 0x05
    15a8:	44 83       	std	Z+4, r20	; 0x04
    15aa:	f8 db       	rcall	.-2064   	; 0xd9c <millis>
    15ac:	6b 01       	movw	r12, r22
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	f7 01       	movw	r30, r14
    15b2:	84 81       	ldd	r24, Z+4	; 0x04
    15b4:	b7 dc       	rcall	.-1682   	; 0xf24 <pinMode>
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	f7 01       	movw	r30, r14
    15ba:	84 81       	ldd	r24, Z+4	; 0x04
    15bc:	ef dc       	rcall	.-1570   	; 0xf9c <digitalWrite>
    15be:	0e 94 51 18 	call	0x30a2	; 0x30a2 <_ZN8SPIClass5beginEv>
    15c2:	00 e0       	ldi	r16, 0x00	; 0
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	40 e9       	ldi	r20, 0x90	; 144
    15c8:	50 ed       	ldi	r21, 0xD0	; 208
    15ca:	63 e0       	ldi	r22, 0x03	; 3
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	95 de       	rcall	.-726    	; 0x12fe <_ZN11SPISettingsC1Emhh>
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <_ZL8settings+0x1>
    15dc:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <_ZL8settings>
    15e0:	b3 de       	rcall	.-666    	; 0x1348 <_ZN8SPIClass16beginTransactionE11SPISettings>
    15e2:	1a e0       	ldi	r17, 0x0A	; 10
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	ca de       	rcall	.-620    	; 0x137c <_ZN8SPIClass8transferEh>
    15e8:	11 50       	subi	r17, 0x01	; 1
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <_ZN7Sd2Card4initEhh+0x6c>
    15ec:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <_ZN8SPIClass13interruptModeE>
    15f0:	81 11       	cpse	r24, r1
    15f2:	78 de       	rcall	.-784    	; 0x12e4 <_ZN8SPIClass14endTransactionEv.part.3>
    15f4:	c7 01       	movw	r24, r14
    15f6:	da de       	rcall	.-588    	; 0x13ac <_ZN7Sd2Card13chipSelectLowEv>
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	a9 01       	movw	r20, r18
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	c7 01       	movw	r24, r14
    1602:	72 df       	rcall	.-284    	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    1604:	08 2f       	mov	r16, r24
    1606:	f7 01       	movw	r30, r14
    1608:	82 87       	std	Z+10, r24	; 0x0a
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	41 f0       	breq	.+16     	; 0x161e <_ZN7Sd2Card4initEhh+0xa6>
    160e:	c6 db       	rcall	.-2164   	; 0xd9c <millis>
    1610:	6c 19       	sub	r22, r12
    1612:	7d 09       	sbc	r23, r13
    1614:	61 3d       	cpi	r22, 0xD1	; 209
    1616:	77 40       	sbci	r23, 0x07	; 7
    1618:	78 f3       	brcs	.-34     	; 0x15f8 <_ZN7Sd2Card4initEhh+0x80>
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	4a c0       	rjmp	.+148    	; 0x16b2 <_ZN7Sd2Card4initEhh+0x13a>
    161e:	2a ea       	ldi	r18, 0xAA	; 170
    1620:	31 e0       	ldi	r19, 0x01	; 1
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	68 e0       	ldi	r22, 0x08	; 8
    1628:	c7 01       	movw	r24, r14
    162a:	5e df       	rcall	.-324    	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    162c:	82 ff       	sbrs	r24, 2
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <_ZN7Sd2Card4initEhh+0xbe>
    1630:	f7 01       	movw	r30, r14
    1632:	03 87       	std	Z+11, r16	; 0x0b
    1634:	0d c0       	rjmp	.+26     	; 0x1650 <_ZN7Sd2Card4initEhh+0xd8>
    1636:	04 e0       	ldi	r16, 0x04	; 4
    1638:	a8 de       	rcall	.-688    	; 0x138a <_ZL6spiRecv>
    163a:	f7 01       	movw	r30, r14
    163c:	82 87       	std	Z+10, r24	; 0x0a
    163e:	01 50       	subi	r16, 0x01	; 1
    1640:	d9 f7       	brne	.-10     	; 0x1638 <_ZN7Sd2Card4initEhh+0xc0>
    1642:	8a 3a       	cpi	r24, 0xAA	; 170
    1644:	11 f0       	breq	.+4      	; 0x164a <_ZN7Sd2Card4initEhh+0xd2>
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	35 c0       	rjmp	.+106    	; 0x16b4 <_ZN7Sd2Card4initEhh+0x13c>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	f7 01       	movw	r30, r14
    164e:	83 87       	std	Z+11, r24	; 0x0b
    1650:	f7 01       	movw	r30, r14
    1652:	83 85       	ldd	r24, Z+11	; 0x0b
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	21 f0       	breq	.+8      	; 0x1660 <_ZN7Sd2Card4initEhh+0xe8>
    1658:	81 2c       	mov	r8, r1
    165a:	91 2c       	mov	r9, r1
    165c:	54 01       	movw	r10, r8
    165e:	05 c0       	rjmp	.+10     	; 0x166a <_ZN7Sd2Card4initEhh+0xf2>
    1660:	81 2c       	mov	r8, r1
    1662:	91 2c       	mov	r9, r1
    1664:	a1 2c       	mov	r10, r1
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	b8 2e       	mov	r11, r24
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	a9 01       	movw	r20, r18
    1670:	67 e3       	ldi	r22, 0x37	; 55
    1672:	c7 01       	movw	r24, r14
    1674:	39 df       	rcall	.-398    	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    1676:	a5 01       	movw	r20, r10
    1678:	94 01       	movw	r18, r8
    167a:	69 e2       	ldi	r22, 0x29	; 41
    167c:	c7 01       	movw	r24, r14
    167e:	34 df       	rcall	.-408    	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    1680:	f7 01       	movw	r30, r14
    1682:	82 87       	std	Z+10, r24	; 0x0a
    1684:	88 23       	and	r24, r24
    1686:	41 f0       	breq	.+16     	; 0x1698 <_ZN7Sd2Card4initEhh+0x120>
    1688:	89 db       	rcall	.-2286   	; 0xd9c <millis>
    168a:	6c 19       	sub	r22, r12
    168c:	7d 09       	sbc	r23, r13
    168e:	61 3d       	cpi	r22, 0xD1	; 209
    1690:	77 40       	sbci	r23, 0x07	; 7
    1692:	58 f3       	brcs	.-42     	; 0x166a <_ZN7Sd2Card4initEhh+0xf2>
    1694:	88 e0       	ldi	r24, 0x08	; 8
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <_ZN7Sd2Card4initEhh+0x13a>
    1698:	f7 01       	movw	r30, r14
    169a:	83 85       	ldd	r24, Z+11	; 0x0b
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	c1 f4       	brne	.+48     	; 0x16d0 <_ZN7Sd2Card4initEhh+0x158>
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	6a e3       	ldi	r22, 0x3A	; 58
    16a8:	c7 01       	movw	r24, r14
    16aa:	1e df       	rcall	.-452    	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    16ac:	88 23       	and	r24, r24
    16ae:	31 f0       	breq	.+12     	; 0x16bc <_ZN7Sd2Card4initEhh+0x144>
    16b0:	86 e0       	ldi	r24, 0x06	; 6
    16b2:	f7 01       	movw	r30, r14
    16b4:	85 83       	std	Z+5, r24	; 0x05
    16b6:	c7 01       	movw	r24, r14
    16b8:	6a de       	rcall	.-812    	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <_ZN7Sd2Card4initEhh+0x164>
    16bc:	66 de       	rcall	.-820    	; 0x138a <_ZL6spiRecv>
    16be:	80 7c       	andi	r24, 0xC0	; 192
    16c0:	80 3c       	cpi	r24, 0xC0	; 192
    16c2:	19 f4       	brne	.+6      	; 0x16ca <_ZN7Sd2Card4initEhh+0x152>
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	f7 01       	movw	r30, r14
    16c8:	83 87       	std	Z+11, r24	; 0x0b
    16ca:	5f de       	rcall	.-834    	; 0x138a <_ZL6spiRecv>
    16cc:	5e de       	rcall	.-836    	; 0x138a <_ZL6spiRecv>
    16ce:	5d de       	rcall	.-838    	; 0x138a <_ZL6spiRecv>
    16d0:	c7 01       	movw	r24, r14
    16d2:	5d de       	rcall	.-838    	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    16d4:	67 2d       	mov	r22, r7
    16d6:	c7 01       	movw	r24, r14
    16d8:	95 de       	rcall	.-726    	; 0x1404 <_ZN7Sd2Card10setSckRateEh>
    16da:	18 2f       	mov	r17, r24
    16dc:	81 2f       	mov	r24, r17
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	08 95       	ret

000016fe <_ZN7Sd2Card14waitStartBlockEv>:
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	ec 01       	movw	r28, r24
    1708:	49 db       	rcall	.-2414   	; 0xd9c <millis>
    170a:	8b 01       	movw	r16, r22
    170c:	3e de       	rcall	.-900    	; 0x138a <_ZL6spiRecv>
    170e:	8a 87       	std	Y+10, r24	; 0x0a
    1710:	8f 3f       	cpi	r24, 0xFF	; 255
    1712:	41 f4       	brne	.+16     	; 0x1724 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    1714:	43 db       	rcall	.-2426   	; 0xd9c <millis>
    1716:	60 1b       	sub	r22, r16
    1718:	71 0b       	sbc	r23, r17
    171a:	6d 32       	cpi	r22, 0x2D	; 45
    171c:	71 40       	sbci	r23, 0x01	; 1
    171e:	b0 f3       	brcs	.-20     	; 0x170c <_ZN7Sd2Card14waitStartBlockEv+0xe>
    1720:	8f e0       	ldi	r24, 0x0F	; 15
    1722:	03 c0       	rjmp	.+6      	; 0x172a <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1724:	8e 3f       	cpi	r24, 0xFE	; 254
    1726:	31 f0       	breq	.+12     	; 0x1734 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    1728:	8d e0       	ldi	r24, 0x0D	; 13
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	ce 01       	movw	r24, r28
    172e:	2f de       	rcall	.-930    	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <_ZN7Sd2Card14waitStartBlockEv+0x38>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	69 01       	movw	r12, r18
    1754:	c8 01       	movw	r24, r16
    1756:	82 0f       	add	r24, r18
    1758:	93 1f       	adc	r25, r19
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	92 40       	sbci	r25, 0x02	; 2
    175e:	08 f0       	brcs	.+2      	; 0x1762 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1760:	57 c0       	rjmp	.+174    	; 0x1810 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	88 23       	and	r24, r24
    1766:	71 f0       	breq	.+28     	; 0x1784 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1768:	88 81       	ld	r24, Y
    176a:	99 81       	ldd	r25, Y+1	; 0x01
    176c:	aa 81       	ldd	r26, Y+2	; 0x02
    176e:	bb 81       	ldd	r27, Y+3	; 0x03
    1770:	84 17       	cp	r24, r20
    1772:	95 07       	cpc	r25, r21
    1774:	a6 07       	cpc	r26, r22
    1776:	b7 07       	cpc	r27, r23
    1778:	29 f4       	brne	.+10     	; 0x1784 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    177a:	8f 81       	ldd	r24, Y+7	; 0x07
    177c:	98 85       	ldd	r25, Y+8	; 0x08
    177e:	c8 16       	cp	r12, r24
    1780:	d9 06       	cpc	r13, r25
    1782:	00 f5       	brcc	.+64     	; 0x17c4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    1784:	48 83       	st	Y, r20
    1786:	59 83       	std	Y+1, r21	; 0x01
    1788:	6a 83       	std	Y+2, r22	; 0x02
    178a:	7b 83       	std	Y+3, r23	; 0x03
    178c:	8b 85       	ldd	r24, Y+11	; 0x0b
    178e:	83 30       	cpi	r24, 0x03	; 3
    1790:	39 f0       	breq	.+14     	; 0x17a0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1792:	89 e0       	ldi	r24, 0x09	; 9
    1794:	44 0f       	add	r20, r20
    1796:	55 1f       	adc	r21, r21
    1798:	66 1f       	adc	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	8a 95       	dec	r24
    179e:	d1 f7       	brne	.-12     	; 0x1794 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    17a0:	9a 01       	movw	r18, r20
    17a2:	ab 01       	movw	r20, r22
    17a4:	61 e1       	ldi	r22, 0x11	; 17
    17a6:	ce 01       	movw	r24, r28
    17a8:	9f de       	rcall	.-706    	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    17aa:	88 23       	and	r24, r24
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	2e c0       	rjmp	.+92     	; 0x1810 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    17b4:	ce 01       	movw	r24, r28
    17b6:	a3 df       	rcall	.-186    	; 0x16fe <_ZN7Sd2Card14waitStartBlockEv>
    17b8:	88 23       	and	r24, r24
    17ba:	51 f1       	breq	.+84     	; 0x1810 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    17bc:	18 86       	std	Y+8, r1	; 0x08
    17be:	1f 82       	std	Y+7, r1	; 0x07
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	8e 83       	std	Y+6, r24	; 0x06
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	8c 15       	cp	r24, r12
    17ca:	9d 05       	cpc	r25, r13
    17cc:	38 f4       	brcc	.+14     	; 0x17dc <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    17ce:	dd dd       	rcall	.-1094   	; 0x138a <_ZL6spiRecv>
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	98 85       	ldd	r25, Y+8	; 0x08
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	98 87       	std	Y+8, r25	; 0x08
    17d8:	8f 83       	std	Y+7, r24	; 0x07
    17da:	f4 cf       	rjmp	.-24     	; 0x17c4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    17dc:	67 01       	movw	r12, r14
    17de:	e0 0e       	add	r14, r16
    17e0:	f1 1e       	adc	r15, r17
    17e2:	ce 14       	cp	r12, r14
    17e4:	df 04       	cpc	r13, r15
    17e6:	29 f0       	breq	.+10     	; 0x17f2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    17e8:	d0 dd       	rcall	.-1120   	; 0x138a <_ZL6spiRecv>
    17ea:	f6 01       	movw	r30, r12
    17ec:	81 93       	st	Z+, r24
    17ee:	6f 01       	movw	r12, r30
    17f0:	f8 cf       	rjmp	.-16     	; 0x17e2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    17f2:	8f 81       	ldd	r24, Y+7	; 0x07
    17f4:	98 85       	ldd	r25, Y+8	; 0x08
    17f6:	08 0f       	add	r16, r24
    17f8:	19 1f       	adc	r17, r25
    17fa:	18 87       	std	Y+8, r17	; 0x08
    17fc:	0f 83       	std	Y+7, r16	; 0x07
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	88 23       	and	r24, r24
    1802:	19 f0       	breq	.+6      	; 0x180a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    1804:	01 15       	cp	r16, r1
    1806:	12 40       	sbci	r17, 0x02	; 2
    1808:	38 f0       	brcs	.+14     	; 0x1818 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    180a:	ce 01       	movw	r24, r28
    180c:	e3 dd       	rcall	.-1082   	; 0x13d4 <_ZN7Sd2Card7readEndEv>
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    1810:	ce 01       	movw	r24, r28
    1812:	bd dd       	rcall	.-1158   	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	01 c0       	rjmp	.+2      	; 0x181a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	08 95       	ret

0000182c <_ZN7Sd2Card8readDataEmjjPh>:
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	01 15       	cp	r16, r1
    1836:	11 05       	cpc	r17, r1
    1838:	11 f0       	breq	.+4      	; 0x183e <_ZN7Sd2Card8readDataEmjjPh+0x12>
    183a:	82 df       	rcall	.-252    	; 0x1740 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	08 95       	ret

0000184a <_ZN7Sd2Card9readBlockEmPh>:
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	79 01       	movw	r14, r18
    1854:	00 e0       	ldi	r16, 0x00	; 0
    1856:	12 e0       	ldi	r17, 0x02	; 2
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	71 df       	rcall	.-286    	; 0x1740 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	08 95       	ret

00001868 <_ZN7Sd2Card9writeDataEhPKh>:
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	8c 01       	movw	r16, r24
    1876:	86 2f       	mov	r24, r22
    1878:	7a 01       	movw	r14, r20
    187a:	80 dd       	rcall	.-1280   	; 0x137c <_ZN8SPIClass8transferEh>
    187c:	e7 01       	movw	r28, r14
    187e:	8e ef       	ldi	r24, 0xFE	; 254
    1880:	f8 1a       	sub	r15, r24
    1882:	89 91       	ld	r24, Y+
    1884:	7b dd       	rcall	.-1290   	; 0x137c <_ZN8SPIClass8transferEh>
    1886:	ce 15       	cp	r28, r14
    1888:	df 05       	cpc	r29, r15
    188a:	d9 f7       	brne	.-10     	; 0x1882 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	76 dd       	rcall	.-1300   	; 0x137c <_ZN8SPIClass8transferEh>
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	74 dd       	rcall	.-1304   	; 0x137c <_ZN8SPIClass8transferEh>
    1894:	7a dd       	rcall	.-1292   	; 0x138a <_ZL6spiRecv>
    1896:	f8 01       	movw	r30, r16
    1898:	82 87       	std	Z+10, r24	; 0x0a
    189a:	8f 71       	andi	r24, 0x1F	; 31
    189c:	85 30       	cpi	r24, 0x05	; 5
    189e:	31 f0       	breq	.+12     	; 0x18ac <_ZN7Sd2Card9writeDataEhPKh+0x44>
    18a0:	81 e1       	ldi	r24, 0x11	; 17
    18a2:	85 83       	std	Z+5, r24	; 0x05
    18a4:	c8 01       	movw	r24, r16
    18a6:	73 dd       	rcall	.-1306   	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <_ZN7Sd2Card9writeDataEhPKh+0x46>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	08 95       	ret

000018bc <_ZN7Sd2Card10writeBlockEmPKh>:
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	ec 01       	movw	r28, r24
    18c6:	89 01       	movw	r16, r18
    18c8:	41 15       	cp	r20, r1
    18ca:	51 05       	cpc	r21, r1
    18cc:	61 05       	cpc	r22, r1
    18ce:	71 05       	cpc	r23, r1
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    18d2:	82 e1       	ldi	r24, 0x12	; 18
    18d4:	2d c0       	rjmp	.+90     	; 0x1930 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    18d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	39 f0       	breq	.+14     	; 0x18ea <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    18dc:	89 e0       	ldi	r24, 0x09	; 9
    18de:	44 0f       	add	r20, r20
    18e0:	55 1f       	adc	r21, r21
    18e2:	66 1f       	adc	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	8a 95       	dec	r24
    18e8:	d1 f7       	brne	.-12     	; 0x18de <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    18ea:	9a 01       	movw	r18, r20
    18ec:	ab 01       	movw	r20, r22
    18ee:	68 e1       	ldi	r22, 0x18	; 24
    18f0:	ce 01       	movw	r24, r28
    18f2:	fa dd       	rcall	.-1036   	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    18f4:	88 23       	and	r24, r24
    18f6:	11 f0       	breq	.+4      	; 0x18fc <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    18f8:	84 e0       	ldi	r24, 0x04	; 4
    18fa:	1a c0       	rjmp	.+52     	; 0x1930 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    18fc:	a8 01       	movw	r20, r16
    18fe:	6e ef       	ldi	r22, 0xFE	; 254
    1900:	ce 01       	movw	r24, r28
    1902:	b2 df       	rcall	.-156    	; 0x1868 <_ZN7Sd2Card9writeDataEhPKh>
    1904:	88 23       	and	r24, r24
    1906:	a9 f0       	breq	.+42     	; 0x1932 <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    1908:	68 e5       	ldi	r22, 0x58	; 88
    190a:	72 e0       	ldi	r23, 0x02	; 2
    190c:	ce 01       	movw	r24, r28
    190e:	d4 dd       	rcall	.-1112   	; 0x14b8 <_ZN7Sd2Card11waitNotBusyEj>
    1910:	81 11       	cpse	r24, r1
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    1914:	85 e1       	ldi	r24, 0x15	; 21
    1916:	0c c0       	rjmp	.+24     	; 0x1930 <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	6d e0       	ldi	r22, 0x0D	; 13
    1920:	ce 01       	movw	r24, r28
    1922:	e2 dd       	rcall	.-1084   	; 0x14e8 <_ZN7Sd2Card11cardCommandEhm>
    1924:	81 11       	cpse	r24, r1
    1926:	03 c0       	rjmp	.+6      	; 0x192e <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    1928:	30 dd       	rcall	.-1440   	; 0x138a <_ZL6spiRecv>
    192a:	88 23       	and	r24, r24
    192c:	31 f0       	breq	.+12     	; 0x193a <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    192e:	84 e1       	ldi	r24, 0x14	; 20
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	ce 01       	movw	r24, r28
    1934:	2c dd       	rcall	.-1448   	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    193a:	ce 01       	movw	r24, r28
    193c:	28 dd       	rcall	.-1456   	; 0x138e <_ZN7Sd2Card14chipSelectHighEv>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    194a:	e0 e5       	ldi	r30, 0x50	; 80
    194c:	f7 e0       	ldi	r31, 0x07	; 7
    194e:	80 e5       	ldi	r24, 0x50	; 80
    1950:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1952:	11 82       	std	Z+1, r1	; 0x01
    1954:	08 95       	ret

00001956 <_ZN6SdFile10addClusterEv>:
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ec 01       	movw	r28, r24
    195c:	9c 01       	movw	r18, r24
    195e:	2a 5f       	subi	r18, 0xFA	; 250
    1960:	3f 4f       	sbci	r19, 0xFF	; 255
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <_ZN8SdVolume15allocContiguousEmPm>
    1972:	88 23       	and	r24, r24
    1974:	a1 f0       	breq	.+40     	; 0x199e <_ZN6SdFile10addClusterEv+0x48>
    1976:	8f 89       	ldd	r24, Y+23	; 0x17
    1978:	98 8d       	ldd	r25, Y+24	; 0x18
    197a:	a9 8d       	ldd	r26, Y+25	; 0x19
    197c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    197e:	89 2b       	or	r24, r25
    1980:	8a 2b       	or	r24, r26
    1982:	8b 2b       	or	r24, r27
    1984:	59 f4       	brne	.+22     	; 0x199c <_ZN6SdFile10addClusterEv+0x46>
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	a8 85       	ldd	r26, Y+8	; 0x08
    198c:	b9 85       	ldd	r27, Y+9	; 0x09
    198e:	8f 8b       	std	Y+23, r24	; 0x17
    1990:	98 8f       	std	Y+24, r25	; 0x18
    1992:	a9 8f       	std	Y+25, r26	; 0x19
    1994:	ba 8f       	std	Y+26, r27	; 0x1a
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	80 68       	ori	r24, 0x80	; 128
    199a:	8c 83       	std	Y+4, r24	; 0x04
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <_ZN6SdFile13cacheDirEntryEh>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	ec 01       	movw	r28, r24
    19aa:	46 2f       	mov	r20, r22
    19ac:	6e 85       	ldd	r22, Y+14	; 0x0e
    19ae:	7f 85       	ldd	r23, Y+15	; 0x0f
    19b0:	88 89       	ldd	r24, Y+16	; 0x10
    19b2:	99 89       	ldd	r25, Y+17	; 0x11
    19b4:	39 d7       	rcall	.+3698   	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    19b6:	88 23       	and	r24, r24
    19b8:	41 f0       	breq	.+16     	; 0x19ca <_ZN6SdFile13cacheDirEntryEh+0x26>
    19ba:	8a 89       	ldd	r24, Y+18	; 0x12
    19bc:	20 e2       	ldi	r18, 0x20	; 32
    19be:	82 9f       	mul	r24, r18
    19c0:	c0 01       	movw	r24, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	85 5a       	subi	r24, 0xA5	; 165
    19c6:	98 4f       	sbci	r25, 0xF8	; 248
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <_ZN6SdFile13cacheDirEntryEh+0x2a>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <_ZN6SdFile8openRootEP8SdVolume>:
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	fc 01       	movw	r30, r24
    19de:	25 81       	ldd	r18, Z+5	; 0x05
    19e0:	22 23       	and	r18, r18
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	41 c0       	rjmp	.+130    	; 0x1a6a <_ZN6SdFile8openRootEP8SdVolume+0x96>
    19e8:	8b 01       	movw	r16, r22
    19ea:	ec 01       	movw	r28, r24
    19ec:	fb 01       	movw	r30, r22
    19ee:	87 89       	ldd	r24, Z+23	; 0x17
    19f0:	80 31       	cpi	r24, 0x10	; 16
    19f2:	b1 f4       	brne	.+44     	; 0x1a20 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	1f 8a       	std	Y+23, r1	; 0x17
    19fa:	18 8e       	std	Y+24, r1	; 0x18
    19fc:	19 8e       	std	Y+25, r1	; 0x19
    19fe:	1a 8e       	std	Y+26, r1	; 0x1a
    1a00:	80 8d       	ldd	r24, Z+24	; 0x18
    1a02:	91 8d       	ldd	r25, Z+25	; 0x19
    1a04:	a0 e0       	ldi	r26, 0x00	; 0
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	25 e0       	ldi	r18, 0x05	; 5
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	2a 95       	dec	r18
    1a14:	d1 f7       	brne	.-12     	; 0x1a0a <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1a16:	8b 8b       	std	Y+19, r24	; 0x13
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	ad 8b       	std	Y+21, r26	; 0x15
    1a1c:	be 8b       	std	Y+22, r27	; 0x16
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <_ZN6SdFile8openRootEP8SdVolume+0x74>
    1a20:	80 32       	cpi	r24, 0x20	; 32
    1a22:	01 f7       	brne	.-64     	; 0x19e4 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	fb 01       	movw	r30, r22
    1a2a:	42 8d       	ldd	r20, Z+26	; 0x1a
    1a2c:	53 8d       	ldd	r21, Z+27	; 0x1b
    1a2e:	64 8d       	ldd	r22, Z+28	; 0x1c
    1a30:	75 8d       	ldd	r23, Z+29	; 0x1d
    1a32:	4f 8b       	std	Y+23, r20	; 0x17
    1a34:	58 8f       	std	Y+24, r21	; 0x18
    1a36:	69 8f       	std	Y+25, r22	; 0x19
    1a38:	7a 8f       	std	Y+26, r23	; 0x1a
    1a3a:	9e 01       	movw	r18, r28
    1a3c:	2d 5e       	subi	r18, 0xED	; 237
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	c8 01       	movw	r24, r16
    1a42:	ae d7       	rcall	.+3932   	; 0x29a0 <_ZNK8SdVolume9chainSizeEmPm>
    1a44:	88 23       	and	r24, r24
    1a46:	71 f2       	breq	.-100    	; 0x19e4 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1a48:	1c 8f       	std	Y+28, r17	; 0x1c
    1a4a:	0b 8f       	std	Y+27, r16	; 0x1b
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	8c 83       	std	Y+4, r24	; 0x04
    1a50:	1e 82       	std	Y+6, r1	; 0x06
    1a52:	1f 82       	std	Y+7, r1	; 0x07
    1a54:	18 86       	std	Y+8, r1	; 0x08
    1a56:	19 86       	std	Y+9, r1	; 0x09
    1a58:	1a 86       	std	Y+10, r1	; 0x0a
    1a5a:	1b 86       	std	Y+11, r1	; 0x0b
    1a5c:	1c 86       	std	Y+12, r1	; 0x0c
    1a5e:	1d 86       	std	Y+13, r1	; 0x0d
    1a60:	1e 86       	std	Y+14, r1	; 0x0e
    1a62:	1f 86       	std	Y+15, r1	; 0x0f
    1a64:	18 8a       	std	Y+16, r1	; 0x10
    1a66:	19 8a       	std	Y+17, r1	; 0x11
    1a68:	1a 8a       	std	Y+18, r1	; 0x12
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <_ZN6SdFile14printTwoDigitsEh>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <_ZN6SdFile14printTwoDigitsEh+0x6>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	6a e0       	ldi	r22, 0x0A	; 10
    1a80:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodqi4>
    1a84:	80 5d       	subi	r24, 0xD0	; 208
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	90 5d       	subi	r25, 0xD0	; 208
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	1b 82       	std	Y+3, r1	; 0x03
    1a8e:	be 01       	movw	r22, r28
    1a90:	6f 5f       	subi	r22, 0xFF	; 255
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	80 e6       	ldi	r24, 0x60	; 96
    1a96:	96 e0       	ldi	r25, 0x06	; 6
    1a98:	0e 94 91 04 	call	0x922	; 0x922 <_ZN5Print5printEPKc>
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <_ZN6SdFile12printFatDateEj>:
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	bc 01       	movw	r22, r24
    1ab0:	67 2f       	mov	r22, r23
    1ab2:	77 27       	eor	r23, r23
    1ab4:	66 95       	lsr	r22
    1ab6:	64 54       	subi	r22, 0x44	; 68
    1ab8:	78 4f       	sbci	r23, 0xF8	; 248
    1aba:	4a e0       	ldi	r20, 0x0A	; 10
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	80 e6       	ldi	r24, 0x60	; 96
    1ac0:	96 e0       	ldi	r25, 0x06	; 6
    1ac2:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN5Print5printEji>
    1ac6:	6d e2       	ldi	r22, 0x2D	; 45
    1ac8:	80 e6       	ldi	r24, 0x60	; 96
    1aca:	96 e0       	ldi	r25, 0x06	; 6
    1acc:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	25 e0       	ldi	r18, 0x05	; 5
    1ad4:	96 95       	lsr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	2a 95       	dec	r18
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <_ZN6SdFile12printFatDateEj+0x2c>
    1adc:	8f 70       	andi	r24, 0x0F	; 15
    1ade:	ca df       	rcall	.-108    	; 0x1a74 <_ZN6SdFile14printTwoDigitsEh>
    1ae0:	6d e2       	ldi	r22, 0x2D	; 45
    1ae2:	80 e6       	ldi	r24, 0x60	; 96
    1ae4:	96 e0       	ldi	r25, 0x06	; 6
    1ae6:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
    1aea:	8c 2f       	mov	r24, r28
    1aec:	8f 71       	andi	r24, 0x1F	; 31
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	c0 cf       	rjmp	.-128    	; 0x1a74 <_ZN6SdFile14printTwoDigitsEh>

00001af4 <_ZN6SdFile12printFatTimeEj>:
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	ec 01       	movw	r28, r24
    1afa:	8d 2f       	mov	r24, r29
    1afc:	86 95       	lsr	r24
    1afe:	86 95       	lsr	r24
    1b00:	86 95       	lsr	r24
    1b02:	b8 df       	rcall	.-144    	; 0x1a74 <_ZN6SdFile14printTwoDigitsEh>
    1b04:	6a e3       	ldi	r22, 0x3A	; 58
    1b06:	80 e6       	ldi	r24, 0x60	; 96
    1b08:	96 e0       	ldi	r25, 0x06	; 6
    1b0a:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	25 e0       	ldi	r18, 0x05	; 5
    1b12:	96 95       	lsr	r25
    1b14:	87 95       	ror	r24
    1b16:	2a 95       	dec	r18
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <_ZN6SdFile12printFatTimeEj+0x1e>
    1b1a:	8f 73       	andi	r24, 0x3F	; 63
    1b1c:	ab df       	rcall	.-170    	; 0x1a74 <_ZN6SdFile14printTwoDigitsEh>
    1b1e:	6a e3       	ldi	r22, 0x3A	; 58
    1b20:	80 e6       	ldi	r24, 0x60	; 96
    1b22:	96 e0       	ldi	r25, 0x06	; 6
    1b24:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
    1b28:	8c 2f       	mov	r24, r28
    1b2a:	8f 71       	andi	r24, 0x1F	; 31
    1b2c:	88 0f       	add	r24, r24
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	a0 cf       	rjmp	.-192    	; 0x1a74 <_ZN6SdFile14printTwoDigitsEh>

00001b34 <_ZN6SdFile4readEPvj>:
    1b34:	2f 92       	push	r2
    1b36:	3f 92       	push	r3
    1b38:	4f 92       	push	r4
    1b3a:	5f 92       	push	r5
    1b3c:	6f 92       	push	r6
    1b3e:	7f 92       	push	r7
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	ec 01       	movw	r28, r24
    1b5a:	5b 01       	movw	r10, r22
    1b5c:	4a 01       	movw	r8, r20
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	81 11       	cpse	r24, r1
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <_ZN6SdFile4readEPvj+0x36>
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	9f ef       	ldi	r25, 0xFF	; 255
    1b68:	d4 c0       	rjmp	.+424    	; 0x1d12 <_ZN6SdFile4readEPvj+0x1de>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	80 ff       	sbrs	r24, 0
    1b6e:	fa cf       	rjmp	.-12     	; 0x1b64 <_ZN6SdFile4readEPvj+0x30>
    1b70:	4b 88       	ldd	r4, Y+19	; 0x13
    1b72:	5c 88       	ldd	r5, Y+20	; 0x14
    1b74:	6d 88       	ldd	r6, Y+21	; 0x15
    1b76:	7e 88       	ldd	r7, Y+22	; 0x16
    1b78:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b7a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1b7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b80:	c4 01       	movw	r24, r8
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	93 01       	movw	r18, r6
    1b88:	82 01       	movw	r16, r4
    1b8a:	04 1b       	sub	r16, r20
    1b8c:	15 0b       	sbc	r17, r21
    1b8e:	26 0b       	sbc	r18, r22
    1b90:	37 0b       	sbc	r19, r23
    1b92:	08 17       	cp	r16, r24
    1b94:	19 07       	cpc	r17, r25
    1b96:	2a 07       	cpc	r18, r26
    1b98:	3b 07       	cpc	r19, r27
    1b9a:	18 f4       	brcc	.+6      	; 0x1ba2 <_ZN6SdFile4readEPvj+0x6e>
    1b9c:	42 01       	movw	r8, r4
    1b9e:	84 1a       	sub	r8, r20
    1ba0:	95 0a       	sbc	r9, r21
    1ba2:	24 01       	movw	r4, r8
    1ba4:	1e 01       	movw	r2, r28
    1ba6:	26 e0       	ldi	r18, 0x06	; 6
    1ba8:	22 0e       	add	r2, r18
    1baa:	31 1c       	adc	r3, r1
    1bac:	41 14       	cp	r4, r1
    1bae:	51 04       	cpc	r5, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <_ZN6SdFile4readEPvj+0x80>
    1bb2:	7d c0       	rjmp	.+250    	; 0x1cae <_ZN6SdFile4readEPvj+0x17a>
    1bb4:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bb6:	5b 85       	ldd	r21, Y+11	; 0x0b
    1bb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bbc:	6a 01       	movw	r12, r20
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	d8 22       	and	r13, r24
    1bc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc8:	8a 01       	movw	r16, r20
    1bca:	9b 01       	movw	r18, r22
    1bcc:	f9 e0       	ldi	r31, 0x09	; 9
    1bce:	36 95       	lsr	r19
    1bd0:	27 95       	ror	r18
    1bd2:	17 95       	ror	r17
    1bd4:	07 95       	ror	r16
    1bd6:	fa 95       	dec	r31
    1bd8:	d1 f7       	brne	.-12     	; 0x1bce <_ZN6SdFile4readEPvj+0x9a>
    1bda:	e2 30       	cpi	r30, 0x02	; 2
    1bdc:	61 f4       	brne	.+24     	; 0x1bf6 <_ZN6SdFile4readEPvj+0xc2>
    1bde:	fc 01       	movw	r30, r24
    1be0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1be2:	93 8d       	ldd	r25, Z+27	; 0x1b
    1be4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1be6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	60 0f       	add	r22, r16
    1bee:	71 1f       	adc	r23, r17
    1bf0:	82 1f       	adc	r24, r18
    1bf2:	93 1f       	adc	r25, r19
    1bf4:	3e c0       	rjmp	.+124    	; 0x1c72 <_ZN6SdFile4readEPvj+0x13e>
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	74 80       	ldd	r7, Z+4	; 0x04
    1bfa:	7a 94       	dec	r7
    1bfc:	70 22       	and	r7, r16
    1bfe:	c1 14       	cp	r12, r1
    1c00:	d1 04       	cpc	r13, r1
    1c02:	c1 f4       	brne	.+48     	; 0x1c34 <_ZN6SdFile4readEPvj+0x100>
    1c04:	71 10       	cpse	r7, r1
    1c06:	16 c0       	rjmp	.+44     	; 0x1c34 <_ZN6SdFile4readEPvj+0x100>
    1c08:	45 2b       	or	r20, r21
    1c0a:	46 2b       	or	r20, r22
    1c0c:	47 2b       	or	r20, r23
    1c0e:	49 f4       	brne	.+18     	; 0x1c22 <_ZN6SdFile4readEPvj+0xee>
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c16:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c18:	8e 83       	std	Y+6, r24	; 0x06
    1c1a:	9f 83       	std	Y+7, r25	; 0x07
    1c1c:	a8 87       	std	Y+8, r26	; 0x08
    1c1e:	b9 87       	std	Y+9, r27	; 0x09
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <_ZN6SdFile4readEPvj+0x100>
    1c22:	4e 81       	ldd	r20, Y+6	; 0x06
    1c24:	5f 81       	ldd	r21, Y+7	; 0x07
    1c26:	68 85       	ldd	r22, Y+8	; 0x08
    1c28:	79 85       	ldd	r23, Y+9	; 0x09
    1c2a:	91 01       	movw	r18, r2
    1c2c:	37 d6       	rcall	.+3182   	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <_ZN6SdFile4readEPvj+0x100>
    1c32:	98 cf       	rjmp	.-208    	; 0x1b64 <_ZN6SdFile4readEPvj+0x30>
    1c34:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c36:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3c:	a8 85       	ldd	r26, Y+8	; 0x08
    1c3e:	b9 85       	ldd	r27, Y+9	; 0x09
    1c40:	02 97       	sbiw	r24, 0x02	; 2
    1c42:	a1 09       	sbc	r26, r1
    1c44:	b1 09       	sbc	r27, r1
    1c46:	05 84       	ldd	r0, Z+13	; 0x0d
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <_ZN6SdFile4readEPvj+0x11e>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	aa 1f       	adc	r26, r26
    1c50:	bb 1f       	adc	r27, r27
    1c52:	0a 94       	dec	r0
    1c54:	d2 f7       	brpl	.-12     	; 0x1c4a <_ZN6SdFile4readEPvj+0x116>
    1c56:	46 85       	ldd	r20, Z+14	; 0x0e
    1c58:	57 85       	ldd	r21, Z+15	; 0x0f
    1c5a:	60 89       	ldd	r22, Z+16	; 0x10
    1c5c:	71 89       	ldd	r23, Z+17	; 0x11
    1c5e:	84 0f       	add	r24, r20
    1c60:	95 1f       	adc	r25, r21
    1c62:	a6 1f       	adc	r26, r22
    1c64:	b7 1f       	adc	r27, r23
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	67 0d       	add	r22, r7
    1c6c:	71 1d       	adc	r23, r1
    1c6e:	81 1d       	adc	r24, r1
    1c70:	91 1d       	adc	r25, r1
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	32 e0       	ldi	r19, 0x02	; 2
    1c76:	2c 19       	sub	r18, r12
    1c78:	3d 09       	sbc	r19, r13
    1c7a:	32 01       	movw	r6, r4
    1c7c:	24 15       	cp	r18, r4
    1c7e:	35 05       	cpc	r19, r5
    1c80:	08 f4       	brcc	.+2      	; 0x1c84 <_ZN6SdFile4readEPvj+0x150>
    1c82:	39 01       	movw	r6, r18
    1c84:	2c 81       	ldd	r18, Y+4	; 0x04
    1c86:	26 fd       	sbrc	r18, 6
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <_ZN6SdFile4readEPvj+0x15e>
    1c8a:	61 14       	cp	r6, r1
    1c8c:	f2 e0       	ldi	r31, 0x02	; 2
    1c8e:	7f 06       	cpc	r7, r31
    1c90:	71 f5       	brne	.+92     	; 0x1cee <_ZN6SdFile4readEPvj+0x1ba>
    1c92:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    1c96:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1c9a:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1c9e:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1ca2:	60 17       	cp	r22, r16
    1ca4:	71 07       	cpc	r23, r17
    1ca6:	82 07       	cpc	r24, r18
    1ca8:	93 07       	cpc	r25, r19
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <_ZN6SdFile4readEPvj+0x17e>
    1cac:	20 c0       	rjmp	.+64     	; 0x1cee <_ZN6SdFile4readEPvj+0x1ba>
    1cae:	c4 01       	movw	r24, r8
    1cb0:	30 c0       	rjmp	.+96     	; 0x1d12 <_ZN6SdFile4readEPvj+0x1de>
    1cb2:	75 01       	movw	r14, r10
    1cb4:	83 01       	movw	r16, r6
    1cb6:	96 01       	movw	r18, r12
    1cb8:	ab 01       	movw	r20, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <_ZN8SdVolume7sdCard_E>
    1cc0:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <_ZN8SdVolume7sdCard_E+0x1>
    1cc4:	b3 dd       	rcall	.-1178   	; 0x182c <_ZN7Sd2Card8readDataEmjjPh>
    1cc6:	88 23       	and	r24, r24
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <_ZN6SdFile4readEPvj+0x198>
    1cca:	4c cf       	rjmp	.-360    	; 0x1b64 <_ZN6SdFile4readEPvj+0x30>
    1ccc:	a6 0c       	add	r10, r6
    1cce:	b7 1c       	adc	r11, r7
    1cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cd4:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cd6:	bd 85       	ldd	r27, Y+13	; 0x0d
    1cd8:	86 0d       	add	r24, r6
    1cda:	97 1d       	adc	r25, r7
    1cdc:	a1 1d       	adc	r26, r1
    1cde:	b1 1d       	adc	r27, r1
    1ce0:	8a 87       	std	Y+10, r24	; 0x0a
    1ce2:	9b 87       	std	Y+11, r25	; 0x0b
    1ce4:	ac 87       	std	Y+12, r26	; 0x0c
    1ce6:	bd 87       	std	Y+13, r27	; 0x0d
    1ce8:	46 18       	sub	r4, r6
    1cea:	57 08       	sbc	r5, r7
    1cec:	5f cf       	rjmp	.-322    	; 0x1bac <_ZN6SdFile4readEPvj+0x78>
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	9b d5       	rcall	.+2870   	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <_ZN6SdFile4readEPvj+0x1c4>
    1cf6:	36 cf       	rjmp	.-404    	; 0x1b64 <_ZN6SdFile4readEPvj+0x30>
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	e5 5a       	subi	r30, 0xA5	; 165
    1cfc:	f8 4f       	sbci	r31, 0xF8	; 248
    1cfe:	d5 01       	movw	r26, r10
    1d00:	cf 01       	movw	r24, r30
    1d02:	86 0d       	add	r24, r6
    1d04:	97 1d       	adc	r25, r7
    1d06:	8e 17       	cp	r24, r30
    1d08:	9f 07       	cpc	r25, r31
    1d0a:	01 f3       	breq	.-64     	; 0x1ccc <_ZN6SdFile4readEPvj+0x198>
    1d0c:	21 91       	ld	r18, Z+
    1d0e:	2d 93       	st	X+, r18
    1d10:	fa cf       	rjmp	.-12     	; 0x1d06 <_ZN6SdFile4readEPvj+0x1d2>
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	cf 90       	pop	r12
    1d22:	bf 90       	pop	r11
    1d24:	af 90       	pop	r10
    1d26:	9f 90       	pop	r9
    1d28:	8f 90       	pop	r8
    1d2a:	7f 90       	pop	r7
    1d2c:	6f 90       	pop	r6
    1d2e:	5f 90       	pop	r5
    1d30:	4f 90       	pop	r4
    1d32:	3f 90       	pop	r3
    1d34:	2f 90       	pop	r2
    1d36:	08 95       	ret

00001d38 <_ZN6SdFile12readDirCacheEv>:
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	1f 92       	push	r1
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	fc 01       	movw	r30, r24
    1d4a:	25 81       	ldd	r18, Z+5	; 0x05
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	18 f4       	brcc	.+6      	; 0x1d56 <_ZN6SdFile12readDirCacheEv+0x1e>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	32 c0       	rjmp	.+100    	; 0x1dba <_ZN6SdFile12readDirCacheEv+0x82>
    1d56:	8c 01       	movw	r16, r24
    1d58:	fc 01       	movw	r30, r24
    1d5a:	42 85       	ldd	r20, Z+10	; 0x0a
    1d5c:	53 85       	ldd	r21, Z+11	; 0x0b
    1d5e:	64 85       	ldd	r22, Z+12	; 0x0c
    1d60:	75 85       	ldd	r23, Z+13	; 0x0d
    1d62:	85 e0       	ldi	r24, 0x05	; 5
    1d64:	76 95       	lsr	r23
    1d66:	67 95       	ror	r22
    1d68:	57 95       	ror	r21
    1d6a:	47 95       	ror	r20
    1d6c:	8a 95       	dec	r24
    1d6e:	d1 f7       	brne	.-12     	; 0x1d64 <_ZN6SdFile12readDirCacheEv+0x2c>
    1d70:	f4 2f       	mov	r31, r20
    1d72:	ff 70       	andi	r31, 0x0F	; 15
    1d74:	ff 2e       	mov	r15, r31
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	be 01       	movw	r22, r28
    1d7c:	6f 5f       	subi	r22, 0xFF	; 255
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	c8 01       	movw	r24, r16
    1d82:	d8 de       	rcall	.-592    	; 0x1b34 <_ZN6SdFile4readEPvj>
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	19 f4       	brne	.+6      	; 0x1d8e <_ZN6SdFile12readDirCacheEv+0x56>
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <_ZN6SdFile12readDirCacheEv+0x5a>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	e9 f2       	breq	.-70     	; 0x1d50 <_ZN6SdFile12readDirCacheEv+0x18>
    1d96:	f8 01       	movw	r30, r16
    1d98:	82 85       	ldd	r24, Z+10	; 0x0a
    1d9a:	93 85       	ldd	r25, Z+11	; 0x0b
    1d9c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d9e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1da0:	4f 96       	adiw	r24, 0x1f	; 31
    1da2:	a1 1d       	adc	r26, r1
    1da4:	b1 1d       	adc	r27, r1
    1da6:	82 87       	std	Z+10, r24	; 0x0a
    1da8:	93 87       	std	Z+11, r25	; 0x0b
    1daa:	a4 87       	std	Z+12, r26	; 0x0c
    1dac:	b5 87       	std	Z+13, r27	; 0x0d
    1dae:	f0 e2       	ldi	r31, 0x20	; 32
    1db0:	ff 9e       	mul	r15, r31
    1db2:	c0 01       	movw	r24, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	85 5a       	subi	r24, 0xA5	; 165
    1db8:	98 4f       	sbci	r25, 0xF8	; 248
    1dba:	0f 90       	pop	r0
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	08 95       	ret

00001dc8 <_ZN6SdFile7seekSetEm>:
    1dc8:	8f 92       	push	r8
    1dca:	9f 92       	push	r9
    1dcc:	af 92       	push	r10
    1dce:	bf 92       	push	r11
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	ec 01       	movw	r28, r24
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	81 11       	cpse	r24, r1
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <_ZN6SdFile7seekSetEm+0x24>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	77 c0       	rjmp	.+238    	; 0x1eda <_ZN6SdFile7seekSetEm+0x112>
    1dec:	0b 89       	ldd	r16, Y+19	; 0x13
    1dee:	1c 89       	ldd	r17, Y+20	; 0x14
    1df0:	2d 89       	ldd	r18, Y+21	; 0x15
    1df2:	3e 89       	ldd	r19, Y+22	; 0x16
    1df4:	04 17       	cp	r16, r20
    1df6:	15 07       	cpc	r17, r21
    1df8:	26 07       	cpc	r18, r22
    1dfa:	37 07       	cpc	r19, r23
    1dfc:	a8 f3       	brcs	.-22     	; 0x1de8 <_ZN6SdFile7seekSetEm+0x20>
    1dfe:	6a 01       	movw	r12, r20
    1e00:	7b 01       	movw	r14, r22
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <_ZN6SdFile7seekSetEm+0x48>
    1e06:	ca 86       	std	Y+10, r12	; 0x0a
    1e08:	db 86       	std	Y+11, r13	; 0x0b
    1e0a:	ec 86       	std	Y+12, r14	; 0x0c
    1e0c:	fd 86       	std	Y+13, r15	; 0x0d
    1e0e:	0d c0       	rjmp	.+26     	; 0x1e2a <_ZN6SdFile7seekSetEm+0x62>
    1e10:	c1 14       	cp	r12, r1
    1e12:	d1 04       	cpc	r13, r1
    1e14:	e1 04       	cpc	r14, r1
    1e16:	f1 04       	cpc	r15, r1
    1e18:	51 f4       	brne	.+20     	; 0x1e2e <_ZN6SdFile7seekSetEm+0x66>
    1e1a:	1e 82       	std	Y+6, r1	; 0x06
    1e1c:	1f 82       	std	Y+7, r1	; 0x07
    1e1e:	18 86       	std	Y+8, r1	; 0x08
    1e20:	19 86       	std	Y+9, r1	; 0x09
    1e22:	1a 86       	std	Y+10, r1	; 0x0a
    1e24:	1b 86       	std	Y+11, r1	; 0x0b
    1e26:	1c 86       	std	Y+12, r1	; 0x0c
    1e28:	1d 86       	std	Y+13, r1	; 0x0d
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	56 c0       	rjmp	.+172    	; 0x1eda <_ZN6SdFile7seekSetEm+0x112>
    1e2e:	8a 84       	ldd	r8, Y+10	; 0x0a
    1e30:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e32:	ac 84       	ldd	r10, Y+12	; 0x0c
    1e34:	bd 84       	ldd	r11, Y+13	; 0x0d
    1e36:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e38:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1e3a:	25 85       	ldd	r18, Z+13	; 0x0d
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	27 5f       	subi	r18, 0xF7	; 247
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	b5 01       	movw	r22, r10
    1e44:	a4 01       	movw	r20, r8
    1e46:	41 50       	subi	r20, 0x01	; 1
    1e48:	51 09       	sbc	r21, r1
    1e4a:	61 09       	sbc	r22, r1
    1e4c:	71 09       	sbc	r23, r1
    1e4e:	02 2e       	mov	r0, r18
    1e50:	04 c0       	rjmp	.+8      	; 0x1e5a <_ZN6SdFile7seekSetEm+0x92>
    1e52:	76 95       	lsr	r23
    1e54:	67 95       	ror	r22
    1e56:	57 95       	ror	r21
    1e58:	47 95       	ror	r20
    1e5a:	0a 94       	dec	r0
    1e5c:	d2 f7       	brpl	.-12     	; 0x1e52 <_ZN6SdFile7seekSetEm+0x8a>
    1e5e:	d7 01       	movw	r26, r14
    1e60:	c6 01       	movw	r24, r12
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	a1 09       	sbc	r26, r1
    1e66:	b1 09       	sbc	r27, r1
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <_ZN6SdFile7seekSetEm+0xaa>
    1e6a:	b6 95       	lsr	r27
    1e6c:	a7 95       	ror	r26
    1e6e:	97 95       	ror	r25
    1e70:	87 95       	ror	r24
    1e72:	2a 95       	dec	r18
    1e74:	d2 f7       	brpl	.-12     	; 0x1e6a <_ZN6SdFile7seekSetEm+0xa2>
    1e76:	84 17       	cp	r24, r20
    1e78:	95 07       	cpc	r25, r21
    1e7a:	a6 07       	cpc	r26, r22
    1e7c:	b7 07       	cpc	r27, r23
    1e7e:	20 f0       	brcs	.+8      	; 0x1e88 <_ZN6SdFile7seekSetEm+0xc0>
    1e80:	89 28       	or	r8, r9
    1e82:	8a 28       	or	r8, r10
    1e84:	8b 28       	or	r8, r11
    1e86:	71 f4       	brne	.+28     	; 0x1ea4 <_ZN6SdFile7seekSetEm+0xdc>
    1e88:	4f 89       	ldd	r20, Y+23	; 0x17
    1e8a:	58 8d       	ldd	r21, Y+24	; 0x18
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	4e 83       	std	Y+6, r20	; 0x06
    1e92:	5f 83       	std	Y+7, r21	; 0x07
    1e94:	68 87       	std	Y+8, r22	; 0x08
    1e96:	79 87       	std	Y+9, r23	; 0x09
    1e98:	4c 01       	movw	r8, r24
    1e9a:	5d 01       	movw	r10, r26
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	0a 5f       	subi	r16, 0xFA	; 250
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	15 c0       	rjmp	.+42     	; 0x1ece <_ZN6SdFile7seekSetEm+0x106>
    1ea4:	84 1b       	sub	r24, r20
    1ea6:	95 0b       	sbc	r25, r21
    1ea8:	a6 0b       	sbc	r26, r22
    1eaa:	b7 0b       	sbc	r27, r23
    1eac:	f5 cf       	rjmp	.-22     	; 0x1e98 <_ZN6SdFile7seekSetEm+0xd0>
    1eae:	4e 81       	ldd	r20, Y+6	; 0x06
    1eb0:	5f 81       	ldd	r21, Y+7	; 0x07
    1eb2:	68 85       	ldd	r22, Y+8	; 0x08
    1eb4:	79 85       	ldd	r23, Y+9	; 0x09
    1eb6:	98 01       	movw	r18, r16
    1eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebc:	ef d4       	rcall	.+2526   	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	89 1a       	sub	r8, r25
    1ec2:	91 08       	sbc	r9, r1
    1ec4:	a1 08       	sbc	r10, r1
    1ec6:	b1 08       	sbc	r11, r1
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <_ZN6SdFile7seekSetEm+0x106>
    1ecc:	8d cf       	rjmp	.-230    	; 0x1de8 <_ZN6SdFile7seekSetEm+0x20>
    1ece:	81 14       	cp	r8, r1
    1ed0:	91 04       	cpc	r9, r1
    1ed2:	a1 04       	cpc	r10, r1
    1ed4:	b1 04       	cpc	r11, r1
    1ed6:	59 f7       	brne	.-42     	; 0x1eae <_ZN6SdFile7seekSetEm+0xe6>
    1ed8:	96 cf       	rjmp	.-212    	; 0x1e06 <_ZN6SdFile7seekSetEm+0x3e>
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	af 90       	pop	r10
    1eee:	9f 90       	pop	r9
    1ef0:	8f 90       	pop	r8
    1ef2:	08 95       	ret

00001ef4 <_ZN6SdFile4syncEv>:
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	88 23       	and	r24, r24
    1f02:	b9 f1       	breq	.+110    	; 0x1f72 <_ZN6SdFile4syncEv+0x7e>
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	87 ff       	sbrs	r24, 7
    1f08:	2f c0       	rjmp	.+94     	; 0x1f68 <_ZN6SdFile4syncEv+0x74>
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	4a dd       	rcall	.-1388   	; 0x19a4 <_ZN6SdFile13cacheDirEntryEh>
    1f10:	8c 01       	movw	r16, r24
    1f12:	89 2b       	or	r24, r25
    1f14:	71 f1       	breq	.+92     	; 0x1f72 <_ZN6SdFile4syncEv+0x7e>
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	82 30       	cpi	r24, 0x02	; 2
    1f1a:	48 f4       	brcc	.+18     	; 0x1f2e <_ZN6SdFile4syncEv+0x3a>
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	ad 89       	ldd	r26, Y+21	; 0x15
    1f22:	be 89       	ldd	r27, Y+22	; 0x16
    1f24:	f8 01       	movw	r30, r16
    1f26:	84 8f       	std	Z+28, r24	; 0x1c
    1f28:	95 8f       	std	Z+29, r25	; 0x1d
    1f2a:	a6 8f       	std	Z+30, r26	; 0x1e
    1f2c:	b7 8f       	std	Z+31, r27	; 0x1f
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f34:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f36:	f8 01       	movw	r30, r16
    1f38:	93 8f       	std	Z+27, r25	; 0x1b
    1f3a:	82 8f       	std	Z+26, r24	; 0x1a
    1f3c:	b5 8b       	std	Z+21, r27	; 0x15
    1f3e:	a4 8b       	std	Z+20, r26	; 0x14
    1f40:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <_ZN6SdFile9dateTime_E>
    1f44:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <_ZN6SdFile9dateTime_E+0x1>
    1f48:	30 97       	sbiw	r30, 0x00	; 0
    1f4a:	59 f0       	breq	.+22     	; 0x1f62 <_ZN6SdFile4syncEv+0x6e>
    1f4c:	b8 01       	movw	r22, r16
    1f4e:	6a 5e       	subi	r22, 0xEA	; 234
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	c8 01       	movw	r24, r16
    1f54:	48 96       	adiw	r24, 0x18	; 24
    1f56:	19 95       	eicall
    1f58:	f8 01       	movw	r30, r16
    1f5a:	80 8d       	ldd	r24, Z+24	; 0x18
    1f5c:	91 8d       	ldd	r25, Z+25	; 0x19
    1f5e:	93 8b       	std	Z+19, r25	; 0x13
    1f60:	82 8b       	std	Z+18, r24	; 0x12
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	8f 77       	andi	r24, 0x7F	; 127
    1f66:	8c 83       	std	Y+4, r24	; 0x04
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	22 c4       	rjmp	.+2116   	; 0x27b6 <_ZN8SdVolume10cacheFlushEv>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

00001f7e <_ZN6SdFile8truncateEm>:
    1f7e:	4f 92       	push	r4
    1f80:	5f 92       	push	r5
    1f82:	6f 92       	push	r6
    1f84:	7f 92       	push	r7
    1f86:	8f 92       	push	r8
    1f88:	9f 92       	push	r9
    1f8a:	af 92       	push	r10
    1f8c:	bf 92       	push	r11
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <_ZN6SdFile8truncateEm+0x1e>
    1f9c:	1f 92       	push	r1
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	85 81       	ldd	r24, Z+5	; 0x05
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	e1 f4       	brne	.+56     	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    1faa:	84 81       	ldd	r24, Z+4	; 0x04
    1fac:	81 ff       	sbrs	r24, 1
    1fae:	19 c0       	rjmp	.+50     	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    1fb0:	83 89       	ldd	r24, Z+19	; 0x13
    1fb2:	94 89       	ldd	r25, Z+20	; 0x14
    1fb4:	a5 89       	ldd	r26, Z+21	; 0x15
    1fb6:	b6 89       	ldd	r27, Z+22	; 0x16
    1fb8:	84 17       	cp	r24, r20
    1fba:	95 07       	cpc	r25, r21
    1fbc:	a6 07       	cpc	r26, r22
    1fbe:	b7 07       	cpc	r27, r23
    1fc0:	80 f0       	brcs	.+32     	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    1fc2:	89 2b       	or	r24, r25
    1fc4:	8a 2b       	or	r24, r26
    1fc6:	8b 2b       	or	r24, r27
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_ZN6SdFile8truncateEm+0x4e>
    1fca:	72 c0       	rjmp	.+228    	; 0x20b0 <_ZN6SdFile8truncateEm+0x132>
    1fcc:	4a 01       	movw	r8, r20
    1fce:	5b 01       	movw	r10, r22
    1fd0:	7f 01       	movw	r14, r30
    1fd2:	42 84       	ldd	r4, Z+10	; 0x0a
    1fd4:	53 84       	ldd	r5, Z+11	; 0x0b
    1fd6:	64 84       	ldd	r6, Z+12	; 0x0c
    1fd8:	75 84       	ldd	r7, Z+13	; 0x0d
    1fda:	cf 01       	movw	r24, r30
    1fdc:	f5 de       	rcall	.-534    	; 0x1dc8 <_ZN6SdFile7seekSetEm>
    1fde:	81 11       	cpse	r24, r1
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <_ZN6SdFile8truncateEm+0x68>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	66 c0       	rjmp	.+204    	; 0x20b2 <_ZN6SdFile8truncateEm+0x134>
    1fe6:	f7 01       	movw	r30, r14
    1fe8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fea:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fec:	81 14       	cp	r8, r1
    1fee:	91 04       	cpc	r9, r1
    1ff0:	a1 04       	cpc	r10, r1
    1ff2:	b1 04       	cpc	r11, r1
    1ff4:	69 f4       	brne	.+26     	; 0x2010 <_ZN6SdFile8truncateEm+0x92>
    1ff6:	47 89       	ldd	r20, Z+23	; 0x17
    1ff8:	50 8d       	ldd	r21, Z+24	; 0x18
    1ffa:	61 8d       	ldd	r22, Z+25	; 0x19
    1ffc:	72 8d       	ldd	r23, Z+26	; 0x1a
    1ffe:	e9 d6       	rcall	.+3538   	; 0x2dd2 <_ZN8SdVolume9freeChainEm>
    2000:	88 23       	and	r24, r24
    2002:	79 f3       	breq	.-34     	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    2004:	f7 01       	movw	r30, r14
    2006:	17 8a       	std	Z+23, r1	; 0x17
    2008:	10 8e       	std	Z+24, r1	; 0x18
    200a:	11 8e       	std	Z+25, r1	; 0x19
    200c:	12 8e       	std	Z+26, r1	; 0x1a
    200e:	37 c0       	rjmp	.+110    	; 0x207e <_ZN6SdFile8truncateEm+0x100>
    2010:	f7 01       	movw	r30, r14
    2012:	46 81       	ldd	r20, Z+6	; 0x06
    2014:	57 81       	ldd	r21, Z+7	; 0x07
    2016:	60 85       	ldd	r22, Z+8	; 0x08
    2018:	71 85       	ldd	r23, Z+9	; 0x09
    201a:	9e 01       	movw	r18, r28
    201c:	2f 5f       	subi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	3d d4       	rcall	.+2170   	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    2022:	88 23       	and	r24, r24
    2024:	f1 f2       	breq	.-68     	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    2026:	49 81       	ldd	r20, Y+1	; 0x01
    2028:	5a 81       	ldd	r21, Y+2	; 0x02
    202a:	6b 81       	ldd	r22, Y+3	; 0x03
    202c:	7c 81       	ldd	r23, Y+4	; 0x04
    202e:	f7 01       	movw	r30, r14
    2030:	83 8d       	ldd	r24, Z+27	; 0x1b
    2032:	94 8d       	ldd	r25, Z+28	; 0x1c
    2034:	fc 01       	movw	r30, r24
    2036:	27 89       	ldd	r18, Z+23	; 0x17
    2038:	20 31       	cpi	r18, 0x10	; 16
    203a:	29 f0       	breq	.+10     	; 0x2046 <_ZN6SdFile8truncateEm+0xc8>
    203c:	08 ef       	ldi	r16, 0xF8	; 248
    203e:	1f ef       	ldi	r17, 0xFF	; 255
    2040:	2f ef       	ldi	r18, 0xFF	; 255
    2042:	3f e0       	ldi	r19, 0x0F	; 15
    2044:	04 c0       	rjmp	.+8      	; 0x204e <_ZN6SdFile8truncateEm+0xd0>
    2046:	08 ef       	ldi	r16, 0xF8	; 248
    2048:	1f ef       	ldi	r17, 0xFF	; 255
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 17       	cp	r20, r16
    2050:	51 07       	cpc	r21, r17
    2052:	62 07       	cpc	r22, r18
    2054:	73 07       	cpc	r23, r19
    2056:	98 f4       	brcc	.+38     	; 0x207e <_ZN6SdFile8truncateEm+0x100>
    2058:	bc d6       	rcall	.+3448   	; 0x2dd2 <_ZN8SdVolume9freeChainEm>
    205a:	88 23       	and	r24, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <_ZN6SdFile8truncateEm+0xe2>
    205e:	c1 cf       	rjmp	.-126    	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    2060:	f7 01       	movw	r30, r14
    2062:	46 81       	ldd	r20, Z+6	; 0x06
    2064:	57 81       	ldd	r21, Z+7	; 0x07
    2066:	60 85       	ldd	r22, Z+8	; 0x08
    2068:	71 85       	ldd	r23, Z+9	; 0x09
    206a:	0f ef       	ldi	r16, 0xFF	; 255
    206c:	1f ef       	ldi	r17, 0xFF	; 255
    206e:	2f ef       	ldi	r18, 0xFF	; 255
    2070:	3f e0       	ldi	r19, 0x0F	; 15
    2072:	83 8d       	ldd	r24, Z+27	; 0x1b
    2074:	94 8d       	ldd	r25, Z+28	; 0x1c
    2076:	fc d4       	rcall	.+2552   	; 0x2a70 <_ZN8SdVolume6fatPutEmm>
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <_ZN6SdFile8truncateEm+0x100>
    207c:	b2 cf       	rjmp	.-156    	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    207e:	f7 01       	movw	r30, r14
    2080:	83 8a       	std	Z+19, r8	; 0x13
    2082:	94 8a       	std	Z+20, r9	; 0x14
    2084:	a5 8a       	std	Z+21, r10	; 0x15
    2086:	b6 8a       	std	Z+22, r11	; 0x16
    2088:	84 81       	ldd	r24, Z+4	; 0x04
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	84 83       	std	Z+4, r24	; 0x04
    208e:	c7 01       	movw	r24, r14
    2090:	31 df       	rcall	.-414    	; 0x1ef4 <_ZN6SdFile4syncEv>
    2092:	88 23       	and	r24, r24
    2094:	09 f4       	brne	.+2      	; 0x2098 <_ZN6SdFile8truncateEm+0x11a>
    2096:	a5 cf       	rjmp	.-182    	; 0x1fe2 <_ZN6SdFile8truncateEm+0x64>
    2098:	b5 01       	movw	r22, r10
    209a:	a4 01       	movw	r20, r8
    209c:	48 14       	cp	r4, r8
    209e:	59 04       	cpc	r5, r9
    20a0:	6a 04       	cpc	r6, r10
    20a2:	7b 04       	cpc	r7, r11
    20a4:	10 f4       	brcc	.+4      	; 0x20aa <_ZN6SdFile8truncateEm+0x12c>
    20a6:	b3 01       	movw	r22, r6
    20a8:	a2 01       	movw	r20, r4
    20aa:	c7 01       	movw	r24, r14
    20ac:	8d de       	rcall	.-742    	; 0x1dc8 <_ZN6SdFile7seekSetEm>
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <_ZN6SdFile8truncateEm+0x134>
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	bf 90       	pop	r11
    20c8:	af 90       	pop	r10
    20ca:	9f 90       	pop	r9
    20cc:	8f 90       	pop	r8
    20ce:	7f 90       	pop	r7
    20d0:	6f 90       	pop	r6
    20d2:	5f 90       	pop	r5
    20d4:	4f 90       	pop	r4
    20d6:	08 95       	ret

000020d8 <_ZN6SdFile15openCachedEntryEhh>:
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ec 01       	movw	r28, r24
    20e0:	80 e2       	ldi	r24, 0x20	; 32
    20e2:	68 9f       	mul	r22, r24
    20e4:	f0 01       	movw	r30, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	e5 5a       	subi	r30, 0xA5	; 165
    20ea:	f8 4f       	sbci	r31, 0xF8	; 248
    20ec:	93 85       	ldd	r25, Z+11	; 0x0b
    20ee:	91 71       	andi	r25, 0x11	; 17
    20f0:	29 f0       	breq	.+10     	; 0x20fc <_ZN6SdFile15openCachedEntryEhh+0x24>
    20f2:	84 2f       	mov	r24, r20
    20f4:	82 74       	andi	r24, 0x42	; 66
    20f6:	11 f0       	breq	.+4      	; 0x20fc <_ZN6SdFile15openCachedEntryEhh+0x24>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	50 c0       	rjmp	.+160    	; 0x219c <_ZN6SdFile15openCachedEntryEhh+0xc4>
    20fc:	14 2f       	mov	r17, r20
    20fe:	6a 8b       	std	Y+18, r22	; 0x12
    2100:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2104:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2108:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    210c:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2110:	8e 87       	std	Y+14, r24	; 0x0e
    2112:	9f 87       	std	Y+15, r25	; 0x0f
    2114:	a8 8b       	std	Y+16, r26	; 0x10
    2116:	b9 8b       	std	Y+17, r27	; 0x11
    2118:	44 89       	ldd	r20, Z+20	; 0x14
    211a:	55 89       	ldd	r21, Z+21	; 0x15
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	ba 01       	movw	r22, r20
    2122:	55 27       	eor	r21, r21
    2124:	44 27       	eor	r20, r20
    2126:	82 8d       	ldd	r24, Z+26	; 0x1a
    2128:	93 8d       	ldd	r25, Z+27	; 0x1b
    212a:	a0 e0       	ldi	r26, 0x00	; 0
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	48 2b       	or	r20, r24
    2130:	59 2b       	or	r21, r25
    2132:	6a 2b       	or	r22, r26
    2134:	7b 2b       	or	r23, r27
    2136:	4f 8b       	std	Y+23, r20	; 0x17
    2138:	58 8f       	std	Y+24, r21	; 0x18
    213a:	69 8f       	std	Y+25, r22	; 0x19
    213c:	7a 8f       	std	Y+26, r23	; 0x1a
    213e:	83 85       	ldd	r24, Z+11	; 0x0b
    2140:	88 71       	andi	r24, 0x18	; 24
    2142:	51 f4       	brne	.+20     	; 0x2158 <_ZN6SdFile15openCachedEntryEhh+0x80>
    2144:	84 8d       	ldd	r24, Z+28	; 0x1c
    2146:	95 8d       	ldd	r25, Z+29	; 0x1d
    2148:	a6 8d       	ldd	r26, Z+30	; 0x1e
    214a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    214c:	8b 8b       	std	Y+19, r24	; 0x13
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	ad 8b       	std	Y+21, r26	; 0x15
    2152:	be 8b       	std	Y+22, r27	; 0x16
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0b c0       	rjmp	.+22     	; 0x216e <_ZN6SdFile15openCachedEntryEhh+0x96>
    2158:	80 31       	cpi	r24, 0x10	; 16
    215a:	71 f6       	brne	.-100    	; 0x20f8 <_ZN6SdFile15openCachedEntryEhh+0x20>
    215c:	9e 01       	movw	r18, r28
    215e:	2d 5e       	subi	r18, 0xED	; 237
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	1c d4       	rcall	.+2104   	; 0x29a0 <_ZNK8SdVolume9chainSizeEmPm>
    2168:	88 23       	and	r24, r24
    216a:	31 f2       	breq	.-116    	; 0x20f8 <_ZN6SdFile15openCachedEntryEhh+0x20>
    216c:	84 e0       	ldi	r24, 0x04	; 4
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	81 2f       	mov	r24, r17
    2172:	8f 70       	andi	r24, 0x0F	; 15
    2174:	8c 83       	std	Y+4, r24	; 0x04
    2176:	1e 82       	std	Y+6, r1	; 0x06
    2178:	1f 82       	std	Y+7, r1	; 0x07
    217a:	18 86       	std	Y+8, r1	; 0x08
    217c:	19 86       	std	Y+9, r1	; 0x09
    217e:	1a 86       	std	Y+10, r1	; 0x0a
    2180:	1b 86       	std	Y+11, r1	; 0x0b
    2182:	1c 86       	std	Y+12, r1	; 0x0c
    2184:	1d 86       	std	Y+13, r1	; 0x0d
    2186:	16 ff       	sbrs	r17, 6
    2188:	08 c0       	rjmp	.+16     	; 0x219a <_ZN6SdFile15openCachedEntryEhh+0xc2>
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	ba 01       	movw	r22, r20
    2190:	ce 01       	movw	r24, r28
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	f2 ce       	rjmp	.-540    	; 0x1f7e <_ZN6SdFile8truncateEm>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	08 95       	ret

000021a4 <_ZN6SdFile4openEPS_jh>:
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	fc 01       	movw	r30, r24
    21b4:	35 81       	ldd	r19, Z+5	; 0x05
    21b6:	31 11       	cpse	r19, r1
    21b8:	31 c0       	rjmp	.+98     	; 0x221c <__stack+0x1d>
    21ba:	32 2f       	mov	r19, r18
    21bc:	30 73       	andi	r19, 0x30	; 48
    21be:	30 33       	cpi	r19, 0x30	; 48
    21c0:	69 f1       	breq	.+90     	; 0x221c <__stack+0x1d>
    21c2:	d2 2e       	mov	r13, r18
    21c4:	ea 01       	movw	r28, r20
    21c6:	7b 01       	movw	r14, r22
    21c8:	8c 01       	movw	r16, r24
    21ca:	fb 01       	movw	r30, r22
    21cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    21ce:	94 8d       	ldd	r25, Z+28	; 0x1c
    21d0:	f8 01       	movw	r30, r16
    21d2:	94 8f       	std	Z+28, r25	; 0x1c
    21d4:	83 8f       	std	Z+27, r24	; 0x1b
    21d6:	85 e0       	ldi	r24, 0x05	; 5
    21d8:	44 0f       	add	r20, r20
    21da:	55 1f       	adc	r21, r21
    21dc:	8a 95       	dec	r24
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <_ZN6SdFile4openEPS_jh+0x34>
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	c7 01       	movw	r24, r14
    21e6:	f0 dd       	rcall	.-1056   	; 0x1dc8 <_ZN6SdFile7seekSetEm>
    21e8:	88 23       	and	r24, r24
    21ea:	c1 f0       	breq	.+48     	; 0x221c <__stack+0x1d>
    21ec:	c7 01       	movw	r24, r14
    21ee:	a4 dd       	rcall	.-1208   	; 0x1d38 <_ZN6SdFile12readDirCacheEv>
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	a1 f0       	breq	.+40     	; 0x221c <__stack+0x1d>
    21f4:	fc 01       	movw	r30, r24
    21f6:	80 81       	ld	r24, Z
    21f8:	88 23       	and	r24, r24
    21fa:	81 f0       	breq	.+32     	; 0x221c <__stack+0x1d>
    21fc:	85 3e       	cpi	r24, 0xE5	; 229
    21fe:	71 f0       	breq	.+28     	; 0x221c <__stack+0x1d>
    2200:	8e 32       	cpi	r24, 0x2E	; 46
    2202:	61 f0       	breq	.+24     	; 0x221c <__stack+0x1d>
    2204:	6c 2f       	mov	r22, r28
    2206:	6f 70       	andi	r22, 0x0F	; 15
    2208:	4d 2d       	mov	r20, r13
    220a:	c8 01       	movw	r24, r16
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	5e cf       	rjmp	.-324    	; 0x20d8 <_ZN6SdFile15openCachedEntryEhh>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	ff 90       	pop	r15
    2228:	ef 90       	pop	r14
    222a:	df 90       	pop	r13
    222c:	08 95       	ret

0000222e <_ZN6SdFile5writeEPKvj>:
    222e:	2f 92       	push	r2
    2230:	3f 92       	push	r3
    2232:	4f 92       	push	r4
    2234:	5f 92       	push	r5
    2236:	6f 92       	push	r6
    2238:	7f 92       	push	r7
    223a:	8f 92       	push	r8
    223c:	9f 92       	push	r9
    223e:	af 92       	push	r10
    2240:	bf 92       	push	r11
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	00 d0       	rcall	.+0      	; 0x2254 <_ZN6SdFile5writeEPKvj+0x26>
    2254:	1f 92       	push	r1
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	8c 01       	movw	r16, r24
    225c:	6b 01       	movw	r12, r22
    225e:	1a 01       	movw	r2, r20
    2260:	dc 01       	movw	r26, r24
    2262:	15 96       	adiw	r26, 0x05	; 5
    2264:	8c 91       	ld	r24, X
    2266:	15 97       	sbiw	r26, 0x05	; 5
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	c1 f4       	brne	.+48     	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	8c 91       	ld	r24, X
    2270:	81 ff       	sbrs	r24, 1
    2272:	14 c0       	rjmp	.+40     	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    2274:	82 ff       	sbrs	r24, 2
    2276:	1c c0       	rjmp	.+56     	; 0x22b0 <_ZN6SdFile5writeEPKvj+0x82>
    2278:	f8 01       	movw	r30, r16
    227a:	43 89       	ldd	r20, Z+19	; 0x13
    227c:	54 89       	ldd	r21, Z+20	; 0x14
    227e:	65 89       	ldd	r22, Z+21	; 0x15
    2280:	76 89       	ldd	r23, Z+22	; 0x16
    2282:	82 85       	ldd	r24, Z+10	; 0x0a
    2284:	93 85       	ldd	r25, Z+11	; 0x0b
    2286:	a4 85       	ldd	r26, Z+12	; 0x0c
    2288:	b5 85       	ldd	r27, Z+13	; 0x0d
    228a:	84 17       	cp	r24, r20
    228c:	95 07       	cpc	r25, r21
    228e:	a6 07       	cpc	r26, r22
    2290:	b7 07       	cpc	r27, r23
    2292:	71 f0       	breq	.+28     	; 0x22b0 <_ZN6SdFile5writeEPKvj+0x82>
    2294:	c8 01       	movw	r24, r16
    2296:	98 dd       	rcall	.-1232   	; 0x1dc8 <_ZN6SdFile7seekSetEm>
    2298:	81 11       	cpse	r24, r1
    229a:	0a c0       	rjmp	.+20     	; 0x22b0 <_ZN6SdFile5writeEPKvj+0x82>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	d8 01       	movw	r26, r16
    22a2:	13 96       	adiw	r26, 0x03	; 3
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
    22a8:	12 97       	sbiw	r26, 0x02	; 2
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	42 c1       	rjmp	.+644    	; 0x2534 <_ZN6SdFile5writeEPKvj+0x306>
    22b0:	41 01       	movw	r8, r2
    22b2:	82 c0       	rjmp	.+260    	; 0x23b8 <_ZN6SdFile5writeEPKvj+0x18a>
    22b4:	5b 96       	adiw	r26, 0x1b	; 27
    22b6:	8d 91       	ld	r24, X+
    22b8:	9c 91       	ld	r25, X
    22ba:	5c 97       	sbiw	r26, 0x1c	; 28
    22bc:	fc 01       	movw	r30, r24
    22be:	74 80       	ldd	r7, Z+4	; 0x04
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	27 0d       	add	r18, r7
    22c4:	2a 01       	movw	r4, r20
    22c6:	3b 01       	movw	r6, r22
    22c8:	39 e0       	ldi	r19, 0x09	; 9
    22ca:	76 94       	lsr	r7
    22cc:	67 94       	ror	r6
    22ce:	57 94       	ror	r5
    22d0:	47 94       	ror	r4
    22d2:	3a 95       	dec	r19
    22d4:	d1 f7       	brne	.-12     	; 0x22ca <_ZN6SdFile5writeEPKvj+0x9c>
    22d6:	72 2e       	mov	r7, r18
    22d8:	74 20       	and	r7, r4
    22da:	7a 01       	movw	r14, r20
    22dc:	f1 e0       	ldi	r31, 0x01	; 1
    22de:	ff 22       	and	r15, r31
    22e0:	77 20       	and	r7, r7
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <_ZN6SdFile5writeEPKvj+0xb8>
    22e4:	75 c0       	rjmp	.+234    	; 0x23d0 <_ZN6SdFile5writeEPKvj+0x1a2>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	92 e0       	ldi	r25, 0x02	; 2
    22ea:	8e 19       	sub	r24, r14
    22ec:	9f 09       	sbc	r25, r15
    22ee:	54 01       	movw	r10, r8
    22f0:	88 15       	cp	r24, r8
    22f2:	99 05       	cpc	r25, r9
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <_ZN6SdFile5writeEPKvj+0xca>
    22f6:	5c 01       	movw	r10, r24
    22f8:	d8 01       	movw	r26, r16
    22fa:	5b 96       	adiw	r26, 0x1b	; 27
    22fc:	2d 91       	ld	r18, X+
    22fe:	3c 91       	ld	r19, X
    2300:	5c 97       	sbiw	r26, 0x1c	; 28
    2302:	16 96       	adiw	r26, 0x06	; 6
    2304:	8d 91       	ld	r24, X+
    2306:	9d 91       	ld	r25, X+
    2308:	0d 90       	ld	r0, X+
    230a:	bc 91       	ld	r27, X
    230c:	a0 2d       	mov	r26, r0
    230e:	02 97       	sbiw	r24, 0x02	; 2
    2310:	a1 09       	sbc	r26, r1
    2312:	b1 09       	sbc	r27, r1
    2314:	f9 01       	movw	r30, r18
    2316:	05 84       	ldd	r0, Z+13	; 0x0d
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <_ZN6SdFile5writeEPKvj+0xf4>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	aa 1f       	adc	r26, r26
    2320:	bb 1f       	adc	r27, r27
    2322:	0a 94       	dec	r0
    2324:	d2 f7       	brpl	.-12     	; 0x231a <_ZN6SdFile5writeEPKvj+0xec>
    2326:	46 85       	ldd	r20, Z+14	; 0x0e
    2328:	57 85       	ldd	r21, Z+15	; 0x0f
    232a:	60 89       	ldd	r22, Z+16	; 0x10
    232c:	71 89       	ldd	r23, Z+17	; 0x11
    232e:	84 0f       	add	r24, r20
    2330:	95 1f       	adc	r25, r21
    2332:	a6 1f       	adc	r26, r22
    2334:	b7 1f       	adc	r27, r23
    2336:	9c 01       	movw	r18, r24
    2338:	ad 01       	movw	r20, r26
    233a:	27 0d       	add	r18, r7
    233c:	31 1d       	adc	r19, r1
    233e:	41 1d       	adc	r20, r1
    2340:	51 1d       	adc	r21, r1
    2342:	29 01       	movw	r4, r18
    2344:	3a 01       	movw	r6, r20
    2346:	a1 14       	cp	r10, r1
    2348:	32 e0       	ldi	r19, 0x02	; 2
    234a:	b3 06       	cpc	r11, r19
    234c:	09 f0       	breq	.+2      	; 0x2350 <_ZN6SdFile5writeEPKvj+0x122>
    234e:	85 c0       	rjmp	.+266    	; 0x245a <_ZN6SdFile5writeEPKvj+0x22c>
    2350:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2354:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2358:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    235c:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2360:	48 16       	cp	r4, r24
    2362:	59 06       	cpc	r5, r25
    2364:	6a 06       	cpc	r6, r26
    2366:	7b 06       	cpc	r7, r27
    2368:	59 f4       	brne	.+22     	; 0x2380 <_ZN6SdFile5writeEPKvj+0x152>
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	9f ef       	ldi	r25, 0xFF	; 255
    236e:	dc 01       	movw	r26, r24
    2370:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2374:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2378:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    237c:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2380:	96 01       	movw	r18, r12
    2382:	b3 01       	movw	r22, r6
    2384:	a2 01       	movw	r20, r4
    2386:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <_ZN8SdVolume7sdCard_E>
    238a:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <_ZN8SdVolume7sdCard_E+0x1>
    238e:	96 da       	rcall	.-2772   	; 0x18bc <_ZN7Sd2Card10writeBlockEmPKh>
    2390:	88 23       	and	r24, r24
    2392:	09 f4       	brne	.+2      	; 0x2396 <_ZN6SdFile5writeEPKvj+0x168>
    2394:	83 cf       	rjmp	.-250    	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    2396:	9e ef       	ldi	r25, 0xFE	; 254
    2398:	d9 1a       	sub	r13, r25
    239a:	8a 18       	sub	r8, r10
    239c:	9b 08       	sbc	r9, r11
    239e:	f8 01       	movw	r30, r16
    23a0:	82 85       	ldd	r24, Z+10	; 0x0a
    23a2:	93 85       	ldd	r25, Z+11	; 0x0b
    23a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23a8:	8a 0d       	add	r24, r10
    23aa:	9b 1d       	adc	r25, r11
    23ac:	a1 1d       	adc	r26, r1
    23ae:	b1 1d       	adc	r27, r1
    23b0:	82 87       	std	Z+10, r24	; 0x0a
    23b2:	93 87       	std	Z+11, r25	; 0x0b
    23b4:	a4 87       	std	Z+12, r26	; 0x0c
    23b6:	b5 87       	std	Z+13, r27	; 0x0d
    23b8:	d8 01       	movw	r26, r16
    23ba:	1a 96       	adiw	r26, 0x0a	; 10
    23bc:	4d 91       	ld	r20, X+
    23be:	5d 91       	ld	r21, X+
    23c0:	6d 91       	ld	r22, X+
    23c2:	7c 91       	ld	r23, X
    23c4:	1d 97       	sbiw	r26, 0x0d	; 13
    23c6:	81 14       	cp	r8, r1
    23c8:	91 04       	cpc	r9, r1
    23ca:	09 f0       	breq	.+2      	; 0x23ce <_ZN6SdFile5writeEPKvj+0x1a0>
    23cc:	73 cf       	rjmp	.-282    	; 0x22b4 <_ZN6SdFile5writeEPKvj+0x86>
    23ce:	83 c0       	rjmp	.+262    	; 0x24d6 <_ZN6SdFile5writeEPKvj+0x2a8>
    23d0:	e1 14       	cp	r14, r1
    23d2:	f1 04       	cpc	r15, r1
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <_ZN6SdFile5writeEPKvj+0x1aa>
    23d6:	87 cf       	rjmp	.-242    	; 0x22e6 <_ZN6SdFile5writeEPKvj+0xb8>
    23d8:	16 96       	adiw	r26, 0x06	; 6
    23da:	4d 91       	ld	r20, X+
    23dc:	5d 91       	ld	r21, X+
    23de:	6d 91       	ld	r22, X+
    23e0:	7c 91       	ld	r23, X
    23e2:	19 97       	sbiw	r26, 0x09	; 9
    23e4:	41 15       	cp	r20, r1
    23e6:	51 05       	cpc	r21, r1
    23e8:	61 05       	cpc	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	59 f4       	brne	.+22     	; 0x2404 <_ZN6SdFile5writeEPKvj+0x1d6>
    23ee:	57 96       	adiw	r26, 0x17	; 23
    23f0:	8d 91       	ld	r24, X+
    23f2:	9d 91       	ld	r25, X+
    23f4:	0d 90       	ld	r0, X+
    23f6:	bc 91       	ld	r27, X
    23f8:	a0 2d       	mov	r26, r0
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	a1 05       	cpc	r26, r1
    23fe:	b1 05       	cpc	r27, r1
    2400:	31 f5       	brne	.+76     	; 0x244e <_ZN6SdFile5writeEPKvj+0x220>
    2402:	20 c0       	rjmp	.+64     	; 0x2444 <_ZN6SdFile5writeEPKvj+0x216>
    2404:	9e 01       	movw	r18, r28
    2406:	2f 5f       	subi	r18, 0xFF	; 255
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
    240a:	48 d2       	rcall	.+1168   	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    240c:	88 23       	and	r24, r24
    240e:	09 f4       	brne	.+2      	; 0x2412 <_ZN6SdFile5writeEPKvj+0x1e4>
    2410:	4d cf       	rjmp	.-358    	; 0x22ac <_ZN6SdFile5writeEPKvj+0x7e>
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	ab 81       	ldd	r26, Y+3	; 0x03
    2418:	bc 81       	ldd	r27, Y+4	; 0x04
    241a:	f8 01       	movw	r30, r16
    241c:	23 8d       	ldd	r18, Z+27	; 0x1b
    241e:	34 8d       	ldd	r19, Z+28	; 0x1c
    2420:	f9 01       	movw	r30, r18
    2422:	27 89       	ldd	r18, Z+23	; 0x17
    2424:	20 31       	cpi	r18, 0x10	; 16
    2426:	29 f0       	breq	.+10     	; 0x2432 <_ZN6SdFile5writeEPKvj+0x204>
    2428:	48 ef       	ldi	r20, 0xF8	; 248
    242a:	5f ef       	ldi	r21, 0xFF	; 255
    242c:	6f ef       	ldi	r22, 0xFF	; 255
    242e:	7f e0       	ldi	r23, 0x0F	; 15
    2430:	04 c0       	rjmp	.+8      	; 0x243a <_ZN6SdFile5writeEPKvj+0x20c>
    2432:	48 ef       	ldi	r20, 0xF8	; 248
    2434:	5f ef       	ldi	r21, 0xFF	; 255
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	84 17       	cp	r24, r20
    243c:	95 07       	cpc	r25, r21
    243e:	a6 07       	cpc	r26, r22
    2440:	b7 07       	cpc	r27, r23
    2442:	28 f0       	brcs	.+10     	; 0x244e <_ZN6SdFile5writeEPKvj+0x220>
    2444:	c8 01       	movw	r24, r16
    2446:	87 da       	rcall	.-2802   	; 0x1956 <_ZN6SdFile10addClusterEv>
    2448:	81 11       	cpse	r24, r1
    244a:	4d cf       	rjmp	.-358    	; 0x22e6 <_ZN6SdFile5writeEPKvj+0xb8>
    244c:	27 cf       	rjmp	.-434    	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    244e:	f8 01       	movw	r30, r16
    2450:	86 83       	std	Z+6, r24	; 0x06
    2452:	97 83       	std	Z+7, r25	; 0x07
    2454:	a0 87       	std	Z+8, r26	; 0x08
    2456:	b1 87       	std	Z+9, r27	; 0x09
    2458:	46 cf       	rjmp	.-372    	; 0x22e6 <_ZN6SdFile5writeEPKvj+0xb8>
    245a:	e1 14       	cp	r14, r1
    245c:	f1 04       	cpc	r15, r1
    245e:	21 f5       	brne	.+72     	; 0x24a8 <_ZN6SdFile5writeEPKvj+0x27a>
    2460:	d8 01       	movw	r26, r16
    2462:	1a 96       	adiw	r26, 0x0a	; 10
    2464:	4d 91       	ld	r20, X+
    2466:	5d 91       	ld	r21, X+
    2468:	6d 91       	ld	r22, X+
    246a:	7c 91       	ld	r23, X
    246c:	1d 97       	sbiw	r26, 0x0d	; 13
    246e:	53 96       	adiw	r26, 0x13	; 19
    2470:	8d 91       	ld	r24, X+
    2472:	9d 91       	ld	r25, X+
    2474:	0d 90       	ld	r0, X+
    2476:	bc 91       	ld	r27, X
    2478:	a0 2d       	mov	r26, r0
    247a:	48 17       	cp	r20, r24
    247c:	59 07       	cpc	r21, r25
    247e:	6a 07       	cpc	r22, r26
    2480:	7b 07       	cpc	r23, r27
    2482:	90 f0       	brcs	.+36     	; 0x24a8 <_ZN6SdFile5writeEPKvj+0x27a>
    2484:	98 d1       	rcall	.+816    	; 0x27b6 <_ZN8SdVolume10cacheFlushEv>
    2486:	88 23       	and	r24, r24
    2488:	09 f4       	brne	.+2      	; 0x248c <_ZN6SdFile5writeEPKvj+0x25e>
    248a:	08 cf       	rjmp	.-496    	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    248c:	40 92 16 02 	sts	0x0216, r4	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2490:	50 92 17 02 	sts	0x0217, r5	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2494:	60 92 18 02 	sts	0x0218, r6	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2498:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    249c:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    24a0:	81 60       	ori	r24, 0x01	; 1
    24a2:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <_ZN6SdFile5writeEPKvj+0x288>
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	c3 01       	movw	r24, r6
    24ac:	b2 01       	movw	r22, r4
    24ae:	bc d1       	rcall	.+888    	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    24b0:	88 23       	and	r24, r24
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <_ZN6SdFile5writeEPKvj+0x288>
    24b4:	f3 ce       	rjmp	.-538    	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    24b6:	d6 01       	movw	r26, r12
    24b8:	f7 01       	movw	r30, r14
    24ba:	e5 5a       	subi	r30, 0xA5	; 165
    24bc:	f8 4f       	sbci	r31, 0xF8	; 248
    24be:	9f 01       	movw	r18, r30
    24c0:	2a 0d       	add	r18, r10
    24c2:	3b 1d       	adc	r19, r11
    24c4:	2e 17       	cp	r18, r30
    24c6:	3f 07       	cpc	r19, r31
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <_ZN6SdFile5writeEPKvj+0x2a2>
    24ca:	8d 91       	ld	r24, X+
    24cc:	81 93       	st	Z+, r24
    24ce:	fa cf       	rjmp	.-12     	; 0x24c4 <_ZN6SdFile5writeEPKvj+0x296>
    24d0:	ca 0c       	add	r12, r10
    24d2:	db 1c       	adc	r13, r11
    24d4:	62 cf       	rjmp	.-316    	; 0x239a <_ZN6SdFile5writeEPKvj+0x16c>
    24d6:	d8 01       	movw	r26, r16
    24d8:	53 96       	adiw	r26, 0x13	; 19
    24da:	cd 90       	ld	r12, X+
    24dc:	dd 90       	ld	r13, X+
    24de:	ed 90       	ld	r14, X+
    24e0:	fc 90       	ld	r15, X
    24e2:	56 97       	sbiw	r26, 0x16	; 22
    24e4:	14 96       	adiw	r26, 0x04	; 4
    24e6:	8c 91       	ld	r24, X
    24e8:	c4 16       	cp	r12, r20
    24ea:	d5 06       	cpc	r13, r21
    24ec:	e6 06       	cpc	r14, r22
    24ee:	f7 06       	cpc	r15, r23
    24f0:	40 f4       	brcc	.+16     	; 0x2502 <_ZN6SdFile5writeEPKvj+0x2d4>
    24f2:	f8 01       	movw	r30, r16
    24f4:	43 8b       	std	Z+19, r20	; 0x13
    24f6:	54 8b       	std	Z+20, r21	; 0x14
    24f8:	65 8b       	std	Z+21, r22	; 0x15
    24fa:	76 8b       	std	Z+22, r23	; 0x16
    24fc:	80 68       	ori	r24, 0x80	; 128
    24fe:	84 83       	std	Z+4, r24	; 0x04
    2500:	0d c0       	rjmp	.+26     	; 0x251c <_ZN6SdFile5writeEPKvj+0x2ee>
    2502:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <_ZN6SdFile9dateTime_E>
    2506:	30 91 53 07 	lds	r19, 0x0753	; 0x800753 <_ZN6SdFile9dateTime_E+0x1>
    250a:	23 2b       	or	r18, r19
    250c:	39 f0       	breq	.+14     	; 0x251c <_ZN6SdFile5writeEPKvj+0x2ee>
    250e:	21 14       	cp	r2, r1
    2510:	31 04       	cpc	r3, r1
    2512:	21 f0       	breq	.+8      	; 0x251c <_ZN6SdFile5writeEPKvj+0x2ee>
    2514:	80 68       	ori	r24, 0x80	; 128
    2516:	d8 01       	movw	r26, r16
    2518:	14 96       	adiw	r26, 0x04	; 4
    251a:	8c 93       	st	X, r24
    251c:	f8 01       	movw	r30, r16
    251e:	84 81       	ldd	r24, Z+4	; 0x04
    2520:	83 fd       	sbrc	r24, 3
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <_ZN6SdFile5writeEPKvj+0x2fa>
    2524:	c1 01       	movw	r24, r2
    2526:	06 c0       	rjmp	.+12     	; 0x2534 <_ZN6SdFile5writeEPKvj+0x306>
    2528:	c8 01       	movw	r24, r16
    252a:	e4 dc       	rcall	.-1592   	; 0x1ef4 <_ZN6SdFile4syncEv>
    252c:	88 23       	and	r24, r24
    252e:	09 f4       	brne	.+2      	; 0x2532 <_ZN6SdFile5writeEPKvj+0x304>
    2530:	b5 ce       	rjmp	.-662    	; 0x229c <_ZN6SdFile5writeEPKvj+0x6e>
    2532:	f8 cf       	rjmp	.-16     	; 0x2524 <_ZN6SdFile5writeEPKvj+0x2f6>
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	df 90       	pop	r13
    254a:	cf 90       	pop	r12
    254c:	bf 90       	pop	r11
    254e:	af 90       	pop	r10
    2550:	9f 90       	pop	r9
    2552:	8f 90       	pop	r8
    2554:	7f 90       	pop	r7
    2556:	6f 90       	pop	r6
    2558:	5f 90       	pop	r5
    255a:	4f 90       	pop	r4
    255c:	3f 90       	pop	r3
    255e:	2f 90       	pop	r2
    2560:	08 95       	ret

00002562 <_ZN6SdFile5writeEh>:
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	1f 92       	push	r1
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	69 83       	std	Y+1, r22	; 0x01
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	be 01       	movw	r22, r28
    2574:	6f 5f       	subi	r22, 0xFF	; 255
    2576:	7f 4f       	sbci	r23, 0xFF	; 255
    2578:	5a de       	rcall	.-844    	; 0x222e <_ZN6SdFile5writeEPKvj>
    257a:	0f 90       	pop	r0
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <_ZN6SdFile12printDirNameERK14directoryEntryh>:
/** %Print the name field of a directory entry in 8.3 format to Serial.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
    2582:	df 92       	push	r13
    2584:	ef 92       	push	r14
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	7c 01       	movw	r14, r24
    2592:	d6 2e       	mov	r13, r22
    2594:	8c 01       	movw	r16, r24
  uint8_t w = 0;
  for (uint8_t i = 0; i < 11; i++) {
    2596:	d0 e0       	ldi	r29, 0x00	; 0
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
  uint8_t w = 0;
    2598:	c0 e0       	ldi	r28, 0x00	; 0
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    259a:	f8 01       	movw	r30, r16
    259c:	80 81       	ld	r24, Z
    259e:	80 32       	cpi	r24, 0x20	; 32
    25a0:	79 f0       	breq	.+30     	; 0x25c0 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x3e>
    if (i == 8) {
    25a2:	d8 30       	cpi	r29, 0x08	; 8
    25a4:	31 f4       	brne	.+12     	; 0x25b2 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x30>
      Serial.print('.');
    25a6:	6e e2       	ldi	r22, 0x2E	; 46
    25a8:	80 e6       	ldi	r24, 0x60	; 96
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
      w++;
    25b0:	cf 5f       	subi	r28, 0xFF	; 255
    }
    Serial.write(dir.name[i]);
    25b2:	f8 01       	movw	r30, r16
    25b4:	60 81       	ld	r22, Z
    25b6:	80 e6       	ldi	r24, 0x60	; 96
    25b8:	96 e0       	ldi	r25, 0x06	; 6
    25ba:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN14HardwareSerial5writeEh>
    w++;
    25be:	cf 5f       	subi	r28, 0xFF	; 255
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
  uint8_t w = 0;
  for (uint8_t i = 0; i < 11; i++) {
    25c0:	df 5f       	subi	r29, 0xFF	; 255
    25c2:	0f 5f       	subi	r16, 0xFF	; 255
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	db 30       	cpi	r29, 0x0B	; 11
    25c8:	41 f7       	brne	.-48     	; 0x259a <_ZN6SdFile12printDirNameERK14directoryEntryh+0x18>
      w++;
    }
    Serial.write(dir.name[i]);
    w++;
  }
  if (DIR_IS_SUBDIR(&dir)) {
    25ca:	f7 01       	movw	r30, r14
    25cc:	83 85       	ldd	r24, Z+11	; 0x0b
    25ce:	88 71       	andi	r24, 0x18	; 24
    25d0:	80 31       	cpi	r24, 0x10	; 16
    25d2:	31 f4       	brne	.+12     	; 0x25e0 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x5e>
    Serial.print('/');
    25d4:	6f e2       	ldi	r22, 0x2F	; 47
    25d6:	80 e6       	ldi	r24, 0x60	; 96
    25d8:	96 e0       	ldi	r25, 0x06	; 6
    25da:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
    w++;
    25de:	cf 5f       	subi	r28, 0xFF	; 255
  }
  while (w < width) {
    25e0:	cd 15       	cp	r28, r13
    25e2:	10 f4       	brcc	.+4      	; 0x25e8 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x66>
    Serial.print(' ');
    25e4:	60 e2       	ldi	r22, 0x20	; 32
    25e6:	f7 cf       	rjmp	.-18     	; 0x25d6 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x54>
    w++;
  }
}
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	08 95       	ret

000025f8 <_ZN6SdFile2lsEhh>:
 * LS_R - Recursive list of subdirectories.
 *
 * \param[in] indent Amount of space before file name. Used for recursive
 * list to indicate subdirectory level.
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
    25f8:	2f 92       	push	r2
    25fa:	3f 92       	push	r3
    25fc:	4f 92       	push	r4
    25fe:	5f 92       	push	r5
    2600:	6f 92       	push	r6
    2602:	7f 92       	push	r7
    2604:	8f 92       	push	r8
    2606:	9f 92       	push	r9
    2608:	af 92       	push	r10
    260a:	bf 92       	push	r11
    260c:	cf 92       	push	r12
    260e:	df 92       	push	r13
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	6f 97       	sbiw	r28, 0x1f	; 31
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	7c 01       	movw	r14, r24
    262e:	d6 2e       	mov	r13, r22
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    2630:	fc 01       	movw	r30, r24
    2632:	16 82       	std	Z+6, r1	; 0x06
    2634:	17 82       	std	Z+7, r1	; 0x07
    2636:	10 86       	std	Z+8, r1	; 0x08
    2638:	11 86       	std	Z+9, r1	; 0x09
    263a:	12 86       	std	Z+10, r1	; 0x0a
    263c:	13 86       	std	Z+11, r1	; 0x0b
    263e:	14 86       	std	Z+12, r1	; 0x0c
    2640:	15 86       	std	Z+13, r1	; 0x0d
    2642:	86 2f       	mov	r24, r22
    2644:	83 70       	andi	r24, 0x03	; 3
    2646:	19 f0       	breq	.+6      	; 0x264e <_ZN6SdFile2lsEhh+0x56>
    2648:	5e e0       	ldi	r21, 0x0E	; 14
    264a:	75 2e       	mov	r7, r21
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <_ZN6SdFile2lsEhh+0x58>
    264e:	71 2c       	mov	r7, r1

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    // print any indent spaces
    for (int8_t i = 0; i < indent; i++) Serial.print(' ');
    2650:	a4 2e       	mov	r10, r20
    2652:	b1 2c       	mov	r11, r1

    // print file name with possible blank fill
    printDirName(*p, flags & (LS_DATE | LS_SIZE) ? 14 : 0);

    // print modify date/time if requested
    if (flags & LS_DATE) {
    2654:	fd 2d       	mov	r31, r13
    2656:	f1 70       	andi	r31, 0x01	; 1
    2658:	fe 8f       	std	Y+30, r31	; 0x1e
      Serial.print(p->fileSize);
    }
    Serial.println();

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
    265a:	8d 2d       	mov	r24, r13
    265c:	84 70       	andi	r24, 0x04	; 4
    265e:	68 2e       	mov	r6, r24
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2660:	27 ed       	ldi	r18, 0xD7	; 215
    2662:	82 2e       	mov	r8, r18
    2664:	25 e0       	ldi	r18, 0x05	; 5
    2666:	92 2e       	mov	r9, r18
      uint16_t index = curPosition()/32 - 1;
      SdFile s;
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
    2668:	32 e0       	ldi	r19, 0x02	; 2
    266a:	c3 2e       	mov	r12, r19
    266c:	c4 0e       	add	r12, r20
       printFatDate(p->lastWriteDate);
       Serial.print(' ');
       printFatTime(p->lastWriteTime);
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
    266e:	ed 2d       	mov	r30, r13
    2670:	e2 70       	andi	r30, 0x02	; 2
    2672:	ef 8f       	std	Y+31, r30	; 0x1f
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
  dir_t* p;

  rewind();
  while ((p = readDirCache())) {
    2674:	c7 01       	movw	r24, r14
    2676:	60 db       	rcall	.-2368   	; 0x1d38 <_ZN6SdFile12readDirCacheEv>
    2678:	8c 01       	movw	r16, r24
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	09 f4       	brne	.+2      	; 0x2680 <_ZN6SdFile2lsEhh+0x88>
    267e:	82 c0       	rjmp	.+260    	; 0x2784 <_ZN6SdFile2lsEhh+0x18c>
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    2680:	fc 01       	movw	r30, r24
    2682:	80 81       	ld	r24, Z
    2684:	88 23       	and	r24, r24
    2686:	09 f4       	brne	.+2      	; 0x268a <_ZN6SdFile2lsEhh+0x92>
    2688:	7d c0       	rjmp	.+250    	; 0x2784 <_ZN6SdFile2lsEhh+0x18c>

    // skip deleted entry and entries for . and  ..
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    268a:	85 3e       	cpi	r24, 0xE5	; 229
    268c:	99 f3       	breq	.-26     	; 0x2674 <_ZN6SdFile2lsEhh+0x7c>
    268e:	8e 32       	cpi	r24, 0x2E	; 46
    2690:	89 f3       	breq	.-30     	; 0x2674 <_ZN6SdFile2lsEhh+0x7c>

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    2692:	83 85       	ldd	r24, Z+11	; 0x0b
    2694:	83 fd       	sbrc	r24, 3
    2696:	ee cf       	rjmp	.-36     	; 0x2674 <_ZN6SdFile2lsEhh+0x7c>
    2698:	31 2c       	mov	r3, r1

    // print any indent spaces
    for (int8_t i = 0; i < indent; i++) Serial.print(' ');
    269a:	83 2d       	mov	r24, r3
    269c:	03 2c       	mov	r0, r3
    269e:	00 0c       	add	r0, r0
    26a0:	99 0b       	sbc	r25, r25
    26a2:	8a 15       	cp	r24, r10
    26a4:	9b 05       	cpc	r25, r11
    26a6:	3c f4       	brge	.+14     	; 0x26b6 <_ZN6SdFile2lsEhh+0xbe>
    26a8:	60 e2       	ldi	r22, 0x20	; 32
    26aa:	80 e6       	ldi	r24, 0x60	; 96
    26ac:	96 e0       	ldi	r25, 0x06	; 6
    26ae:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
    26b2:	33 94       	inc	r3
    26b4:	f2 cf       	rjmp	.-28     	; 0x269a <_ZN6SdFile2lsEhh+0xa2>

    // print file name with possible blank fill
    printDirName(*p, flags & (LS_DATE | LS_SIZE) ? 14 : 0);
    26b6:	67 2d       	mov	r22, r7
    26b8:	c8 01       	movw	r24, r16
    26ba:	63 df       	rcall	.-314    	; 0x2582 <_ZN6SdFile12printDirNameERK14directoryEntryh>

    // print modify date/time if requested
    if (flags & LS_DATE) {
    26bc:	fe 8d       	ldd	r31, Y+30	; 0x1e
    26be:	ff 23       	and	r31, r31
    26c0:	69 f0       	breq	.+26     	; 0x26dc <_ZN6SdFile2lsEhh+0xe4>
       printFatDate(p->lastWriteDate);
    26c2:	f8 01       	movw	r30, r16
    26c4:	80 8d       	ldd	r24, Z+24	; 0x18
    26c6:	91 8d       	ldd	r25, Z+25	; 0x19
    26c8:	ef d9       	rcall	.-3106   	; 0x1aa8 <_ZN6SdFile12printFatDateEj>
       Serial.print(' ');
    26ca:	60 e2       	ldi	r22, 0x20	; 32
    26cc:	80 e6       	ldi	r24, 0x60	; 96
    26ce:	96 e0       	ldi	r25, 0x06	; 6
    26d0:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
       printFatTime(p->lastWriteTime);
    26d4:	f8 01       	movw	r30, r16
    26d6:	86 89       	ldd	r24, Z+22	; 0x16
    26d8:	97 89       	ldd	r25, Z+23	; 0x17
    26da:	0c da       	rcall	.-3048   	; 0x1af4 <_ZN6SdFile12printFatTimeEj>
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
    26dc:	f8 01       	movw	r30, r16
    26de:	83 85       	ldd	r24, Z+11	; 0x0b
    26e0:	88 71       	andi	r24, 0x18	; 24
    26e2:	80 31       	cpi	r24, 0x10	; 16
    26e4:	19 f0       	breq	.+6      	; 0x26ec <_ZN6SdFile2lsEhh+0xf4>
    26e6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26e8:	f1 11       	cpse	r31, r1
    26ea:	0e c0       	rjmp	.+28     	; 0x2708 <_ZN6SdFile2lsEhh+0x110>
      Serial.print(' ');
      Serial.print(p->fileSize);
    }
    Serial.println();
    26ec:	80 e6       	ldi	r24, 0x60	; 96
    26ee:	96 e0       	ldi	r25, 0x06	; 6
    26f0:	0e 94 99 04 	call	0x932	; 0x932 <_ZN5Print7printlnEv>

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
    26f4:	66 20       	and	r6, r6
    26f6:	09 f4       	brne	.+2      	; 0x26fa <_ZN6SdFile2lsEhh+0x102>
    26f8:	bd cf       	rjmp	.-134    	; 0x2674 <_ZN6SdFile2lsEhh+0x7c>
    26fa:	f8 01       	movw	r30, r16
    26fc:	83 85       	ldd	r24, Z+11	; 0x0b
    26fe:	88 71       	andi	r24, 0x18	; 24
    2700:	80 31       	cpi	r24, 0x10	; 16
    2702:	09 f0       	breq	.+2      	; 0x2706 <_ZN6SdFile2lsEhh+0x10e>
    2704:	b7 cf       	rjmp	.-146    	; 0x2674 <_ZN6SdFile2lsEhh+0x7c>
    2706:	11 c0       	rjmp	.+34     	; 0x272a <_ZN6SdFile2lsEhh+0x132>
       Serial.print(' ');
       printFatTime(p->lastWriteTime);
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
      Serial.print(' ');
    2708:	60 e2       	ldi	r22, 0x20	; 32
    270a:	80 e6       	ldi	r24, 0x60	; 96
    270c:	96 e0       	ldi	r25, 0x06	; 6
    270e:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5printEc>
      Serial.print(p->fileSize);
    2712:	f8 01       	movw	r30, r16
    2714:	44 8d       	ldd	r20, Z+28	; 0x1c
    2716:	55 8d       	ldd	r21, Z+29	; 0x1d
    2718:	66 8d       	ldd	r22, Z+30	; 0x1e
    271a:	77 8d       	ldd	r23, Z+31	; 0x1f
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	80 e6       	ldi	r24, 0x60	; 96
    2722:	96 e0       	ldi	r25, 0x06	; 6
    2724:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN5Print5printEmi>
    2728:	e1 cf       	rjmp	.-62     	; 0x26ec <_ZN6SdFile2lsEhh+0xf4>
    }
    Serial.println();

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
      uint16_t index = curPosition()/32 - 1;
    272a:	f7 01       	movw	r30, r14
    272c:	42 85       	ldd	r20, Z+10	; 0x0a
    272e:	53 85       	ldd	r21, Z+11	; 0x0b
    2730:	64 85       	ldd	r22, Z+12	; 0x0c
    2732:	75 85       	ldd	r23, Z+13	; 0x0d
    2734:	1a 01       	movw	r2, r20
    2736:	2b 01       	movw	r4, r22
    2738:	85 e0       	ldi	r24, 0x05	; 5
    273a:	56 94       	lsr	r5
    273c:	47 94       	ror	r4
    273e:	37 94       	ror	r3
    2740:	27 94       	ror	r2
    2742:	8a 95       	dec	r24
    2744:	d1 f7       	brne	.-12     	; 0x273a <_ZN6SdFile2lsEhh+0x142>
    2746:	1c 82       	std	Y+4, r1	; 0x04
    2748:	1b 82       	std	Y+3, r1	; 0x03
    274a:	9a 82       	std	Y+2, r9	; 0x02
    274c:	89 82       	std	Y+1, r8	; 0x01
    274e:	1e 82       	std	Y+6, r1	; 0x06
      SdFile s;
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
    2750:	a1 01       	movw	r20, r2
    2752:	41 50       	subi	r20, 0x01	; 1
    2754:	51 09       	sbc	r21, r1
    2756:	21 e0       	ldi	r18, 0x01	; 1
    2758:	b7 01       	movw	r22, r14
    275a:	ce 01       	movw	r24, r28
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	22 dd       	rcall	.-1468   	; 0x21a4 <_ZN6SdFile4openEPS_jh>
    2760:	88 23       	and	r24, r24
    2762:	29 f0       	breq	.+10     	; 0x276e <_ZN6SdFile2lsEhh+0x176>
    2764:	4c 2d       	mov	r20, r12
    2766:	6d 2d       	mov	r22, r13
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	45 df       	rcall	.-374    	; 0x25f8 <_ZN6SdFile2lsEhh>
    276e:	a1 01       	movw	r20, r2
      seekSet(32 * (index + 1));
    2770:	95 e0       	ldi	r25, 0x05	; 5
    2772:	44 0f       	add	r20, r20
    2774:	55 1f       	adc	r21, r21
    2776:	9a 95       	dec	r25
    2778:	e1 f7       	brne	.-8      	; 0x2772 <_ZN6SdFile2lsEhh+0x17a>
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	c7 01       	movw	r24, r14
    2780:	23 db       	rcall	.-2490   	; 0x1dc8 <_ZN6SdFile7seekSetEm>
    2782:	78 cf       	rjmp	.-272    	; 0x2674 <_ZN6SdFile2lsEhh+0x7c>
    2784:	6f 96       	adiw	r28, 0x1f	; 31
    }
  }
}
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
    27a0:	bf 90       	pop	r11
    27a2:	af 90       	pop	r10
    27a4:	9f 90       	pop	r9
    27a6:	8f 90       	pop	r8
    27a8:	7f 90       	pop	r7
    27aa:	6f 90       	pop	r6
    27ac:	5f 90       	pop	r5
    27ae:	4f 90       	pop	r4
    27b0:	3f 90       	pop	r3
    27b2:	2f 90       	pop	r2
    27b4:	08 95       	ret

000027b6 <_ZN8SdVolume10cacheFlushEv>:
    27b6:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
  cacheSetDirty();
  return true;
}
    27ba:	88 23       	and	r24, r24
    27bc:	99 f1       	breq	.+102    	; 0x2824 <_ZN8SdVolume10cacheFlushEv+0x6e>
    27be:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    27c2:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    27c6:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    27ca:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    27ce:	2b e5       	ldi	r18, 0x5B	; 91
    27d0:	37 e0       	ldi	r19, 0x07	; 7
    27d2:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <_ZN8SdVolume7sdCard_E>
    27d6:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <_ZN8SdVolume7sdCard_E+0x1>
    27da:	70 d8       	rcall	.-3872   	; 0x18bc <_ZN7Sd2Card10writeBlockEmPKh>
    27dc:	81 11       	cpse	r24, r1
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <_ZN8SdVolume10cacheFlushEv+0x2e>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	08 95       	ret
    27e4:	40 91 54 07 	lds	r20, 0x0754	; 0x800754 <_ZN8SdVolume17cacheMirrorBlock_E>
    27e8:	50 91 55 07 	lds	r21, 0x0755	; 0x800755 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    27ec:	60 91 56 07 	lds	r22, 0x0756	; 0x800756 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    27f0:	70 91 57 07 	lds	r23, 0x0757	; 0x800757 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    27f4:	41 15       	cp	r20, r1
    27f6:	51 05       	cpc	r21, r1
    27f8:	61 05       	cpc	r22, r1
    27fa:	71 05       	cpc	r23, r1
    27fc:	89 f0       	breq	.+34     	; 0x2820 <_ZN8SdVolume10cacheFlushEv+0x6a>
    27fe:	2b e5       	ldi	r18, 0x5B	; 91
    2800:	37 e0       	ldi	r19, 0x07	; 7
    2802:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <_ZN8SdVolume7sdCard_E>
    2806:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <_ZN8SdVolume7sdCard_E+0x1>
    280a:	58 d8       	rcall	.-3920   	; 0x18bc <_ZN7Sd2Card10writeBlockEmPKh>
    280c:	88 23       	and	r24, r24
    280e:	41 f3       	breq	.-48     	; 0x27e0 <_ZN8SdVolume10cacheFlushEv+0x2a>
    2810:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <_ZN8SdVolume17cacheMirrorBlock_E>
    2814:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2818:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    281c:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2820:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	08 95       	ret

00002828 <_ZN8SdVolume13cacheRawBlockEmh>:
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	cf 93       	push	r28
    2832:	6b 01       	movw	r12, r22
    2834:	7c 01       	movw	r14, r24
    2836:	c4 2f       	mov	r28, r20
    2838:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    283c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2840:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2844:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2848:	8c 15       	cp	r24, r12
    284a:	9d 05       	cpc	r25, r13
    284c:	ae 05       	cpc	r26, r14
    284e:	bf 05       	cpc	r27, r15
    2850:	c9 f0       	breq	.+50     	; 0x2884 <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    2852:	b1 df       	rcall	.-158    	; 0x27b6 <_ZN8SdVolume10cacheFlushEv>
    2854:	81 11       	cpse	r24, r1
    2856:	02 c0       	rjmp	.+4      	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	1a c0       	rjmp	.+52     	; 0x2890 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    285c:	2b e5       	ldi	r18, 0x5B	; 91
    285e:	37 e0       	ldi	r19, 0x07	; 7
    2860:	b7 01       	movw	r22, r14
    2862:	a6 01       	movw	r20, r12
    2864:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <_ZN8SdVolume7sdCard_E>
    2868:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <_ZN8SdVolume7sdCard_E+0x1>
    286c:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN7Sd2Card9readBlockEmPh>
    2870:	88 23       	and	r24, r24
    2872:	91 f3       	breq	.-28     	; 0x2858 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    2874:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2878:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    287c:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2880:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2884:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    2888:	c8 2b       	or	r28, r24
    288a:	c0 93 58 07 	sts	0x0758, r28	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	cf 91       	pop	r28
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	df 90       	pop	r13
    2898:	cf 90       	pop	r12
    289a:	08 95       	ret

0000289c <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    289c:	8f 92       	push	r8
    289e:	9f 92       	push	r9
    28a0:	af 92       	push	r10
    28a2:	bf 92       	push	r11
    28a4:	cf 92       	push	r12
    28a6:	df 92       	push	r13
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    28b6:	81 85       	ldd	r24, Z+9	; 0x09
    28b8:	92 85       	ldd	r25, Z+10	; 0x0a
    28ba:	a3 85       	ldd	r26, Z+11	; 0x0b
    28bc:	b4 85       	ldd	r27, Z+12	; 0x0c
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	a1 1d       	adc	r26, r1
    28c2:	b1 1d       	adc	r27, r1
    28c4:	84 17       	cp	r24, r20
    28c6:	95 07       	cpc	r25, r21
    28c8:	a6 07       	cpc	r26, r22
    28ca:	b7 07       	cpc	r27, r23
    28cc:	10 f4       	brcc	.+4      	; 0x28d2 <_ZNK8SdVolume6fatGetEmPm+0x36>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	5a c0       	rjmp	.+180    	; 0x2986 <_ZNK8SdVolume6fatGetEmPm+0xea>
  uint32_t lba = fatStartBlock_;
    28d2:	83 88       	ldd	r8, Z+19	; 0x13
    28d4:	94 88       	ldd	r9, Z+20	; 0x14
    28d6:	a5 88       	ldd	r10, Z+21	; 0x15
    28d8:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    28da:	87 89       	ldd	r24, Z+23	; 0x17
    28dc:	80 31       	cpi	r24, 0x10	; 16
    28de:	29 f4       	brne	.+10     	; 0x28ea <_ZNK8SdVolume6fatGetEmPm+0x4e>
    28e0:	bb 27       	eor	r27, r27
    28e2:	a7 2f       	mov	r26, r23
    28e4:	96 2f       	mov	r25, r22
    28e6:	85 2f       	mov	r24, r21
    28e8:	09 c0       	rjmp	.+18     	; 0x28fc <_ZNK8SdVolume6fatGetEmPm+0x60>
    28ea:	db 01       	movw	r26, r22
    28ec:	ca 01       	movw	r24, r20
    28ee:	c7 e0       	ldi	r28, 0x07	; 7
    28f0:	b6 95       	lsr	r27
    28f2:	a7 95       	ror	r26
    28f4:	97 95       	ror	r25
    28f6:	87 95       	ror	r24
    28f8:	ca 95       	dec	r28
    28fa:	d1 f7       	brne	.-12     	; 0x28f0 <_ZNK8SdVolume6fatGetEmPm+0x54>
    28fc:	e9 01       	movw	r28, r18
    28fe:	6a 01       	movw	r12, r20
    2900:	7b 01       	movw	r14, r22
    2902:	8f 01       	movw	r16, r30
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	68 0d       	add	r22, r8
    290a:	79 1d       	adc	r23, r9
    290c:	8a 1d       	adc	r24, r10
    290e:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2910:	80 90 16 02 	lds	r8, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2914:	90 90 17 02 	lds	r9, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2918:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    291c:	b0 90 19 02 	lds	r11, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2920:	68 15       	cp	r22, r8
    2922:	79 05       	cpc	r23, r9
    2924:	8a 05       	cpc	r24, r10
    2926:	9b 05       	cpc	r25, r11
    2928:	91 f4       	brne	.+36     	; 0x294e <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    292a:	f8 01       	movw	r30, r16
    292c:	87 89       	ldd	r24, Z+23	; 0x17
    292e:	80 31       	cpi	r24, 0x10	; 16
    2930:	99 f4       	brne	.+38     	; 0x2958 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2932:	dd 24       	eor	r13, r13
    2934:	ee 24       	eor	r14, r14
    2936:	ff 24       	eor	r15, r15
    2938:	c6 01       	movw	r24, r12
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	fc 01       	movw	r30, r24
    2940:	e5 5a       	subi	r30, 0xA5	; 165
    2942:	f8 4f       	sbci	r31, 0xF8	; 248
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	a0 e0       	ldi	r26, 0x00	; 0
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	17 c0       	rjmp	.+46     	; 0x297c <_ZNK8SdVolume6fatGetEmPm+0xe0>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	6b df       	rcall	.-298    	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    2952:	81 11       	cpse	r24, r1
    2954:	ea cf       	rjmp	.-44     	; 0x292a <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2956:	bb cf       	rjmp	.-138    	; 0x28ce <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2958:	e8 94       	clt
    295a:	c7 f8       	bld	r12, 7
    295c:	dd 24       	eor	r13, r13
    295e:	ee 24       	eor	r14, r14
    2960:	ff 24       	eor	r15, r15
    2962:	c6 01       	movw	r24, r12
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	fc 01       	movw	r30, r24
    296e:	e5 5a       	subi	r30, 0xA5	; 165
    2970:	f8 4f       	sbci	r31, 0xF8	; 248
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	a2 81       	ldd	r26, Z+2	; 0x02
    2978:	b3 81       	ldd	r27, Z+3	; 0x03
    297a:	bf 70       	andi	r27, 0x0F	; 15
    297c:	88 83       	st	Y, r24
    297e:	99 83       	std	Y+1, r25	; 0x01
    2980:	aa 83       	std	Y+2, r26	; 0x02
    2982:	bb 83       	std	Y+3, r27	; 0x03
    2984:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	df 90       	pop	r13
    2994:	cf 90       	pop	r12
    2996:	bf 90       	pop	r11
    2998:	af 90       	pop	r10
    299a:	9f 90       	pop	r9
    299c:	8f 90       	pop	r8
    299e:	08 95       	ret

000029a0 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    29a0:	4f 92       	push	r4
    29a2:	5f 92       	push	r5
    29a4:	6f 92       	push	r6
    29a6:	7f 92       	push	r7
    29a8:	af 92       	push	r10
    29aa:	bf 92       	push	r11
    29ac:	cf 92       	push	r12
    29ae:	df 92       	push	r13
    29b0:	ef 92       	push	r14
    29b2:	ff 92       	push	r15
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	00 d0       	rcall	.+0      	; 0x29be <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    29be:	1f 92       	push	r1
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	8c 01       	movw	r16, r24
    29c6:	49 83       	std	Y+1, r20	; 0x01
    29c8:	5a 83       	std	Y+2, r21	; 0x02
    29ca:	6b 83       	std	Y+3, r22	; 0x03
    29cc:	7c 83       	std	Y+4, r23	; 0x04
    29ce:	59 01       	movw	r10, r18
  uint32_t s = 0;
    29d0:	c1 2c       	mov	r12, r1
    29d2:	d1 2c       	mov	r13, r1
    29d4:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    29d6:	41 2c       	mov	r4, r1
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	58 2e       	mov	r5, r24
    29dc:	61 2c       	mov	r6, r1
    29de:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    29e0:	49 81       	ldd	r20, Y+1	; 0x01
    29e2:	5a 81       	ldd	r21, Y+2	; 0x02
    29e4:	6b 81       	ldd	r22, Y+3	; 0x03
    29e6:	7c 81       	ldd	r23, Y+4	; 0x04
    29e8:	9e 01       	movw	r18, r28
    29ea:	2f 5f       	subi	r18, 0xFF	; 255
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	c8 01       	movw	r24, r16
    29f0:	55 df       	rcall	.-342    	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    29f2:	88 23       	and	r24, r24
    29f4:	51 f1       	breq	.+84     	; 0x2a4a <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    s += 512UL << clusterSizeShift_;
    29f6:	d3 01       	movw	r26, r6
    29f8:	c2 01       	movw	r24, r4
    29fa:	f8 01       	movw	r30, r16
    29fc:	05 84       	ldd	r0, Z+13	; 0x0d
    29fe:	04 c0       	rjmp	.+8      	; 0x2a08 <_ZNK8SdVolume9chainSizeEmPm+0x68>
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	aa 1f       	adc	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	0a 94       	dec	r0
    2a0a:	d2 f7       	brpl	.-12     	; 0x2a00 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    2a0c:	c8 0e       	add	r12, r24
    2a0e:	d9 1e       	adc	r13, r25
    2a10:	ea 1e       	adc	r14, r26
    2a12:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2a14:	49 81       	ldd	r20, Y+1	; 0x01
    2a16:	5a 81       	ldd	r21, Y+2	; 0x02
    2a18:	6b 81       	ldd	r22, Y+3	; 0x03
    2a1a:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a1c:	87 89       	ldd	r24, Z+23	; 0x17
    2a1e:	80 31       	cpi	r24, 0x10	; 16
    2a20:	29 f0       	breq	.+10     	; 0x2a2c <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    2a22:	88 ef       	ldi	r24, 0xF8	; 248
    2a24:	9f ef       	ldi	r25, 0xFF	; 255
    2a26:	af ef       	ldi	r26, 0xFF	; 255
    2a28:	bf e0       	ldi	r27, 0x0F	; 15
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    2a2c:	88 ef       	ldi	r24, 0xF8	; 248
    2a2e:	9f ef       	ldi	r25, 0xFF	; 255
    2a30:	a0 e0       	ldi	r26, 0x00	; 0
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2a34:	48 17       	cp	r20, r24
    2a36:	59 07       	cpc	r21, r25
    2a38:	6a 07       	cpc	r22, r26
    2a3a:	7b 07       	cpc	r23, r27
    2a3c:	88 f2       	brcs	.-94     	; 0x29e0 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2a3e:	f5 01       	movw	r30, r10
    2a40:	c0 82       	st	Z, r12
    2a42:	d1 82       	std	Z+1, r13	; 0x01
    2a44:	e2 82       	std	Z+2, r14	; 0x02
    2a46:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	ff 90       	pop	r15
    2a5c:	ef 90       	pop	r14
    2a5e:	df 90       	pop	r13
    2a60:	cf 90       	pop	r12
    2a62:	bf 90       	pop	r11
    2a64:	af 90       	pop	r10
    2a66:	7f 90       	pop	r7
    2a68:	6f 90       	pop	r6
    2a6a:	5f 90       	pop	r5
    2a6c:	4f 90       	pop	r4
    2a6e:	08 95       	ret

00002a70 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2a70:	4f 92       	push	r4
    2a72:	5f 92       	push	r5
    2a74:	6f 92       	push	r6
    2a76:	7f 92       	push	r7
    2a78:	8f 92       	push	r8
    2a7a:	9f 92       	push	r9
    2a7c:	af 92       	push	r10
    2a7e:	bf 92       	push	r11
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2a92:	42 30       	cpi	r20, 0x02	; 2
    2a94:	51 05       	cpc	r21, r1
    2a96:	61 05       	cpc	r22, r1
    2a98:	71 05       	cpc	r23, r1
    2a9a:	10 f4       	brcc	.+4      	; 0x2aa0 <_ZN8SdVolume6fatPutEmm+0x30>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	77 c0       	rjmp	.+238    	; 0x2b8e <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2aa6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	a1 1d       	adc	r26, r1
    2aac:	b1 1d       	adc	r27, r1
    2aae:	84 17       	cp	r24, r20
    2ab0:	95 07       	cpc	r25, r21
    2ab2:	a6 07       	cpc	r26, r22
    2ab4:	b7 07       	cpc	r27, r23
    2ab6:	90 f3       	brcs	.-28     	; 0x2a9c <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2ab8:	cb 88       	ldd	r12, Y+19	; 0x13
    2aba:	dc 88       	ldd	r13, Y+20	; 0x14
    2abc:	ed 88       	ldd	r14, Y+21	; 0x15
    2abe:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	80 31       	cpi	r24, 0x10	; 16
    2ac4:	29 f4       	brne	.+10     	; 0x2ad0 <_ZN8SdVolume6fatPutEmm+0x60>
    2ac6:	bb 27       	eor	r27, r27
    2ac8:	a7 2f       	mov	r26, r23
    2aca:	96 2f       	mov	r25, r22
    2acc:	85 2f       	mov	r24, r21
    2ace:	09 c0       	rjmp	.+18     	; 0x2ae2 <_ZN8SdVolume6fatPutEmm+0x72>
    2ad0:	db 01       	movw	r26, r22
    2ad2:	ca 01       	movw	r24, r20
    2ad4:	e7 e0       	ldi	r30, 0x07	; 7
    2ad6:	b6 95       	lsr	r27
    2ad8:	a7 95       	ror	r26
    2ada:	97 95       	ror	r25
    2adc:	87 95       	ror	r24
    2ade:	ea 95       	dec	r30
    2ae0:	d1 f7       	brne	.-12     	; 0x2ad6 <_ZN8SdVolume6fatPutEmm+0x66>
    2ae2:	48 01       	movw	r8, r16
    2ae4:	59 01       	movw	r10, r18
    2ae6:	2a 01       	movw	r4, r20
    2ae8:	3b 01       	movw	r6, r22
    2aea:	c8 0e       	add	r12, r24
    2aec:	d9 1e       	adc	r13, r25
    2aee:	ea 1e       	adc	r14, r26
    2af0:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2af2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SdVolume17cacheBlockNumber_E>
    2af6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2afa:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2afe:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2b02:	c8 16       	cp	r12, r24
    2b04:	d9 06       	cpc	r13, r25
    2b06:	ea 06       	cpc	r14, r26
    2b08:	fb 06       	cpc	r15, r27
    2b0a:	81 f4       	brne	.+32     	; 0x2b2c <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	80 31       	cpi	r24, 0x10	; 16
    2b10:	a1 f4       	brne	.+40     	; 0x2b3a <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2b12:	b3 01       	movw	r22, r6
    2b14:	a2 01       	movw	r20, r4
    2b16:	55 27       	eor	r21, r21
    2b18:	66 27       	eor	r22, r22
    2b1a:	77 27       	eor	r23, r23
    2b1c:	44 0f       	add	r20, r20
    2b1e:	55 1f       	adc	r21, r21
    2b20:	fa 01       	movw	r30, r20
    2b22:	e5 5a       	subi	r30, 0xA5	; 165
    2b24:	f8 4f       	sbci	r31, 0xF8	; 248
    2b26:	91 82       	std	Z+1, r9	; 0x01
    2b28:	80 82       	st	Z, r8
    2b2a:	18 c0       	rjmp	.+48     	; 0x2b5c <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	c7 01       	movw	r24, r14
    2b30:	b6 01       	movw	r22, r12
    2b32:	7a de       	rcall	.-780    	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    2b34:	81 11       	cpse	r24, r1
    2b36:	ea cf       	rjmp	.-44     	; 0x2b0c <_ZN8SdVolume6fatPutEmm+0x9c>
    2b38:	b1 cf       	rjmp	.-158    	; 0x2a9c <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2b3a:	b3 01       	movw	r22, r6
    2b3c:	a2 01       	movw	r20, r4
    2b3e:	4f 77       	andi	r20, 0x7F	; 127
    2b40:	55 27       	eor	r21, r21
    2b42:	66 27       	eor	r22, r22
    2b44:	77 27       	eor	r23, r23
    2b46:	44 0f       	add	r20, r20
    2b48:	55 1f       	adc	r21, r21
    2b4a:	44 0f       	add	r20, r20
    2b4c:	55 1f       	adc	r21, r21
    2b4e:	fa 01       	movw	r30, r20
    2b50:	e5 5a       	subi	r30, 0xA5	; 165
    2b52:	f8 4f       	sbci	r31, 0xF8	; 248
    2b54:	80 82       	st	Z, r8
    2b56:	91 82       	std	Z+1, r9	; 0x01
    2b58:	a2 82       	std	Z+2, r10	; 0x02
    2b5a:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2b5c:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
    2b60:	81 60       	ori	r24, 0x01	; 1
    2b62:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2b66:	8a 89       	ldd	r24, Y+18	; 0x12
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	80 f0       	brcs	.+32     	; 0x2b8c <_ZN8SdVolume6fatPutEmm+0x11c>
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	af 81       	ldd	r26, Y+7	; 0x07
    2b72:	b8 85       	ldd	r27, Y+8	; 0x08
    2b74:	c8 0e       	add	r12, r24
    2b76:	d9 1e       	adc	r13, r25
    2b78:	ea 1e       	adc	r14, r26
    2b7a:	fb 1e       	adc	r15, r27
    2b7c:	c0 92 54 07 	sts	0x0754, r12	; 0x800754 <_ZN8SdVolume17cacheMirrorBlock_E>
    2b80:	d0 92 55 07 	sts	0x0755, r13	; 0x800755 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2b84:	e0 92 56 07 	sts	0x0756, r14	; 0x800756 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2b88:	f0 92 57 07 	sts	0x0757, r15	; 0x800757 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
}
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	ff 90       	pop	r15
    2b98:	ef 90       	pop	r14
    2b9a:	df 90       	pop	r13
    2b9c:	cf 90       	pop	r12
    2b9e:	bf 90       	pop	r11
    2ba0:	af 90       	pop	r10
    2ba2:	9f 90       	pop	r9
    2ba4:	8f 90       	pop	r8
    2ba6:	7f 90       	pop	r7
    2ba8:	6f 90       	pop	r6
    2baa:	5f 90       	pop	r5
    2bac:	4f 90       	pop	r4
    2bae:	08 95       	ret

00002bb0 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2bb0:	2f 92       	push	r2
    2bb2:	3f 92       	push	r3
    2bb4:	4f 92       	push	r4
    2bb6:	5f 92       	push	r5
    2bb8:	6f 92       	push	r6
    2bba:	7f 92       	push	r7
    2bbc:	9f 92       	push	r9
    2bbe:	af 92       	push	r10
    2bc0:	bf 92       	push	r11
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	60 97       	sbiw	r28, 0x10	; 16
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	5c 01       	movw	r10, r24
    2be4:	49 87       	std	Y+9, r20	; 0x09
    2be6:	5a 87       	std	Y+10, r21	; 0x0a
    2be8:	6b 87       	std	Y+11, r22	; 0x0b
    2bea:	7c 87       	std	Y+12, r23	; 0x0c
    2bec:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2bee:	d9 01       	movw	r26, r18
    2bf0:	cd 90       	ld	r12, X+
    2bf2:	dd 90       	ld	r13, X+
    2bf4:	ed 90       	ld	r14, X+
    2bf6:	fc 90       	ld	r15, X
    2bf8:	c1 14       	cp	r12, r1
    2bfa:	d1 04       	cpc	r13, r1
    2bfc:	e1 04       	cpc	r14, r1
    2bfe:	f1 04       	cpc	r15, r1
    2c00:	31 f0       	breq	.+12     	; 0x2c0e <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2c02:	bf ef       	ldi	r27, 0xFF	; 255
    2c04:	cb 1a       	sub	r12, r27
    2c06:	db 0a       	sbc	r13, r27
    2c08:	eb 0a       	sbc	r14, r27
    2c0a:	fb 0a       	sbc	r15, r27
    2c0c:	10 c0       	rjmp	.+32     	; 0x2c2e <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2c0e:	fc 01       	movw	r30, r24
    2c10:	c0 80       	ld	r12, Z
    2c12:	d1 80       	ldd	r13, Z+1	; 0x01
    2c14:	e2 80       	ldd	r14, Z+2	; 0x02
    2c16:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2c18:	99 24       	eor	r9, r9
    2c1a:	93 94       	inc	r9
    2c1c:	09 85       	ldd	r16, Y+9	; 0x09
    2c1e:	1a 85       	ldd	r17, Y+10	; 0x0a
    2c20:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c22:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c24:	01 30       	cpi	r16, 0x01	; 1
    2c26:	11 05       	cpc	r17, r1
    2c28:	21 05       	cpc	r18, r1
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    2c2e:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2c30:	f5 01       	movw	r30, r10
    2c32:	81 85       	ldd	r24, Z+9	; 0x09
    2c34:	92 85       	ldd	r25, Z+10	; 0x0a
    2c36:	a3 85       	ldd	r26, Z+11	; 0x0b
    2c38:	b4 85       	ldd	r27, Z+12	; 0x0c
    2c3a:	8c 01       	movw	r16, r24
    2c3c:	9d 01       	movw	r18, r26
    2c3e:	0f 5f       	subi	r16, 0xFF	; 255
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	2f 4f       	sbci	r18, 0xFF	; 255
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	0d 87       	std	Y+13, r16	; 0x0d
    2c48:	1e 87       	std	Y+14, r17	; 0x0e
    2c4a:	2f 87       	std	Y+15, r18	; 0x0f
    2c4c:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2c4e:	26 01       	movw	r4, r12
    2c50:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2c52:	1d 82       	std	Y+5, r1	; 0x05
    2c54:	1e 82       	std	Y+6, r1	; 0x06
    2c56:	1f 82       	std	Y+7, r1	; 0x07
    2c58:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2c5a:	f5 01       	movw	r30, r10
    2c5c:	81 85       	ldd	r24, Z+9	; 0x09
    2c5e:	92 85       	ldd	r25, Z+10	; 0x0a
    2c60:	a3 85       	ldd	r26, Z+11	; 0x0b
    2c62:	b4 85       	ldd	r27, Z+12	; 0x0c
    2c64:	0d 81       	ldd	r16, Y+5	; 0x05
    2c66:	1e 81       	ldd	r17, Y+6	; 0x06
    2c68:	2f 81       	ldd	r18, Y+7	; 0x07
    2c6a:	38 85       	ldd	r19, Y+8	; 0x08
    2c6c:	08 17       	cp	r16, r24
    2c6e:	19 07       	cpc	r17, r25
    2c70:	2a 07       	cpc	r18, r26
    2c72:	3b 07       	cpc	r19, r27
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2c76:	54 c0       	rjmp	.+168    	; 0x2d20 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2c78:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c7a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c7c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c7e:	58 89       	ldd	r21, Y+16	; 0x10
    2c80:	24 15       	cp	r18, r4
    2c82:	35 05       	cpc	r19, r5
    2c84:	46 05       	cpc	r20, r6
    2c86:	57 05       	cpc	r21, r7
    2c88:	50 f4       	brcc	.+20     	; 0x2c9e <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    2c8a:	82 e0       	ldi	r24, 0x02	; 2
    2c8c:	48 2e       	mov	r4, r24
    2c8e:	51 2c       	mov	r5, r1
    2c90:	61 2c       	mov	r6, r1
    2c92:	71 2c       	mov	r7, r1
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	c9 2e       	mov	r12, r25
    2c98:	d1 2c       	mov	r13, r1
    2c9a:	e1 2c       	mov	r14, r1
    2c9c:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2c9e:	9e 01       	movw	r18, r28
    2ca0:	2f 5f       	subi	r18, 0xFF	; 255
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	b3 01       	movw	r22, r6
    2ca6:	a2 01       	movw	r20, r4
    2ca8:	c5 01       	movw	r24, r10
    2caa:	f8 dd       	rcall	.-1040   	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    2cac:	88 23       	and	r24, r24
    2cae:	c1 f1       	breq	.+112    	; 0x2d20 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    2cb0:	49 81       	ldd	r20, Y+1	; 0x01
    2cb2:	5a 81       	ldd	r21, Y+2	; 0x02
    2cb4:	6b 81       	ldd	r22, Y+3	; 0x03
    2cb6:	7c 81       	ldd	r23, Y+4	; 0x04
    2cb8:	d3 01       	movw	r26, r6
    2cba:	c2 01       	movw	r24, r4
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	a1 1d       	adc	r26, r1
    2cc0:	b1 1d       	adc	r27, r1
    2cc2:	45 2b       	or	r20, r21
    2cc4:	46 2b       	or	r20, r22
    2cc6:	47 2b       	or	r20, r23
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2cca:	6c 01       	movw	r12, r24
    2ccc:	7d 01       	movw	r14, r26
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    2cd0:	ac 01       	movw	r20, r24
    2cd2:	bd 01       	movw	r22, r26
    2cd4:	4c 19       	sub	r20, r12
    2cd6:	5d 09       	sbc	r21, r13
    2cd8:	6e 09       	sbc	r22, r14
    2cda:	7f 09       	sbc	r23, r15
    2cdc:	09 85       	ldd	r16, Y+9	; 0x09
    2cde:	1a 85       	ldd	r17, Y+10	; 0x0a
    2ce0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ce2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ce4:	04 17       	cp	r16, r20
    2ce6:	15 07       	cpc	r17, r21
    2ce8:	26 07       	cpc	r18, r22
    2cea:	37 07       	cpc	r19, r23
    2cec:	79 f0       	breq	.+30     	; 0x2d0c <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2cee:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf0:	3e 81       	ldd	r19, Y+6	; 0x06
    2cf2:	4f 81       	ldd	r20, Y+7	; 0x07
    2cf4:	58 85       	ldd	r21, Y+8	; 0x08
    2cf6:	2f 5f       	subi	r18, 0xFF	; 255
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	4f 4f       	sbci	r20, 0xFF	; 255
    2cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfe:	2d 83       	std	Y+5, r18	; 0x05
    2d00:	3e 83       	std	Y+6, r19	; 0x06
    2d02:	4f 83       	std	Y+7, r20	; 0x07
    2d04:	58 87       	std	Y+8, r21	; 0x08
    2d06:	2c 01       	movw	r4, r24
    2d08:	3d 01       	movw	r6, r26
    2d0a:	a7 cf       	rjmp	.-178    	; 0x2c5a <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2d0c:	0f ef       	ldi	r16, 0xFF	; 255
    2d0e:	1f ef       	ldi	r17, 0xFF	; 255
    2d10:	2f ef       	ldi	r18, 0xFF	; 255
    2d12:	3f e0       	ldi	r19, 0x0F	; 15
    2d14:	b3 01       	movw	r22, r6
    2d16:	a2 01       	movw	r20, r4
    2d18:	c5 01       	movw	r24, r10
    2d1a:	aa de       	rcall	.-684    	; 0x2a70 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2d1c:	81 11       	cpse	r24, r1
    2d1e:	17 c0       	rjmp	.+46     	; 0x2d4e <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	3f c0       	rjmp	.+126    	; 0x2da2 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2d24:	d3 01       	movw	r26, r6
    2d26:	c2 01       	movw	r24, r4
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	a1 09       	sbc	r26, r1
    2d2c:	b1 09       	sbc	r27, r1
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	9e 83       	std	Y+6, r25	; 0x06
    2d32:	af 83       	std	Y+7, r26	; 0x07
    2d34:	b8 87       	std	Y+8, r27	; 0x08
    2d36:	93 01       	movw	r18, r6
    2d38:	82 01       	movw	r16, r4
    2d3a:	ac 01       	movw	r20, r24
    2d3c:	bd 01       	movw	r22, r26
    2d3e:	c5 01       	movw	r24, r10
    2d40:	97 de       	rcall	.-722    	; 0x2a70 <_ZN8SdVolume6fatPutEmm>
    2d42:	88 23       	and	r24, r24
    2d44:	69 f3       	breq	.-38     	; 0x2d20 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    2d46:	4d 80       	ldd	r4, Y+5	; 0x05
    2d48:	5e 80       	ldd	r5, Y+6	; 0x06
    2d4a:	6f 80       	ldd	r6, Y+7	; 0x07
    2d4c:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2d4e:	c4 14       	cp	r12, r4
    2d50:	d5 04       	cpc	r13, r5
    2d52:	e6 04       	cpc	r14, r6
    2d54:	f7 04       	cpc	r15, r7
    2d56:	30 f3       	brcs	.-52     	; 0x2d24 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2d58:	d1 01       	movw	r26, r2
    2d5a:	4d 91       	ld	r20, X+
    2d5c:	5d 91       	ld	r21, X+
    2d5e:	6d 91       	ld	r22, X+
    2d60:	7c 91       	ld	r23, X
    2d62:	41 15       	cp	r20, r1
    2d64:	51 05       	cpc	r21, r1
    2d66:	61 05       	cpc	r22, r1
    2d68:	71 05       	cpc	r23, r1
    2d6a:	99 f4       	brne	.+38     	; 0x2d92 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2d6c:	f1 01       	movw	r30, r2
    2d6e:	c0 82       	st	Z, r12
    2d70:	d1 82       	std	Z+1, r13	; 0x01
    2d72:	e2 82       	std	Z+2, r14	; 0x02
    2d74:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2d76:	99 20       	and	r9, r9
    2d78:	99 f0       	breq	.+38     	; 0x2da0 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    2d7a:	ff ef       	ldi	r31, 0xFF	; 255
    2d7c:	cf 1a       	sub	r12, r31
    2d7e:	df 0a       	sbc	r13, r31
    2d80:	ef 0a       	sbc	r14, r31
    2d82:	ff 0a       	sbc	r15, r31
    2d84:	d5 01       	movw	r26, r10
    2d86:	cd 92       	st	X+, r12
    2d88:	dd 92       	st	X+, r13
    2d8a:	ed 92       	st	X+, r14
    2d8c:	fc 92       	st	X, r15
    2d8e:	13 97       	sbiw	r26, 0x03	; 3
    2d90:	07 c0       	rjmp	.+14     	; 0x2da0 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2d92:	97 01       	movw	r18, r14
    2d94:	86 01       	movw	r16, r12
    2d96:	c5 01       	movw	r24, r10
    2d98:	6b de       	rcall	.-810    	; 0x2a70 <_ZN8SdVolume6fatPutEmm>
    2d9a:	81 11       	cpse	r24, r1
    2d9c:	e7 cf       	rjmp	.-50     	; 0x2d6c <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    2d9e:	c0 cf       	rjmp	.-128    	; 0x2d20 <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
}
    2da2:	60 96       	adiw	r28, 0x10	; 16
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	1f 91       	pop	r17
    2db4:	0f 91       	pop	r16
    2db6:	ff 90       	pop	r15
    2db8:	ef 90       	pop	r14
    2dba:	df 90       	pop	r13
    2dbc:	cf 90       	pop	r12
    2dbe:	bf 90       	pop	r11
    2dc0:	af 90       	pop	r10
    2dc2:	9f 90       	pop	r9
    2dc4:	7f 90       	pop	r7
    2dc6:	6f 90       	pop	r6
    2dc8:	5f 90       	pop	r5
    2dca:	4f 90       	pop	r4
    2dcc:	3f 90       	pop	r3
    2dce:	2f 90       	pop	r2
    2dd0:	08 95       	ret

00002dd2 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    2dd2:	af 92       	push	r10
    2dd4:	bf 92       	push	r11
    2dd6:	cf 92       	push	r12
    2dd8:	df 92       	push	r13
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <_ZN8SdVolume9freeChainEm+0x16>
    2de8:	1f 92       	push	r1
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	5c 01       	movw	r10, r24
    2df0:	6a 01       	movw	r12, r20
    2df2:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a0 e0       	ldi	r26, 0x00	; 0
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	f5 01       	movw	r30, r10
    2dfe:	80 83       	st	Z, r24
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	a2 83       	std	Z+2, r26	; 0x02
    2e04:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2e06:	9e 01       	movw	r18, r28
    2e08:	2f 5f       	subi	r18, 0xFF	; 255
    2e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0c:	b7 01       	movw	r22, r14
    2e0e:	a6 01       	movw	r20, r12
    2e10:	c5 01       	movw	r24, r10
    2e12:	44 dd       	rcall	.-1400   	; 0x289c <_ZNK8SdVolume6fatGetEmPm>
    2e14:	88 23       	and	r24, r24
    2e16:	09 f1       	breq	.+66     	; 0x2e5a <_ZN8SdVolume9freeChainEm+0x88>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2e18:	00 e0       	ldi	r16, 0x00	; 0
    2e1a:	10 e0       	ldi	r17, 0x00	; 0
    2e1c:	98 01       	movw	r18, r16
    2e1e:	b7 01       	movw	r22, r14
    2e20:	a6 01       	movw	r20, r12
    2e22:	c5 01       	movw	r24, r10
    2e24:	25 de       	rcall	.-950    	; 0x2a70 <_ZN8SdVolume6fatPutEmm>
    2e26:	88 23       	and	r24, r24
    2e28:	c1 f0       	breq	.+48     	; 0x2e5a <_ZN8SdVolume9freeChainEm+0x88>

    cluster = next;
    2e2a:	c9 80       	ldd	r12, Y+1	; 0x01
    2e2c:	da 80       	ldd	r13, Y+2	; 0x02
    2e2e:	eb 80       	ldd	r14, Y+3	; 0x03
    2e30:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2e32:	f5 01       	movw	r30, r10
    2e34:	87 89       	ldd	r24, Z+23	; 0x17
    2e36:	80 31       	cpi	r24, 0x10	; 16
    2e38:	29 f0       	breq	.+10     	; 0x2e44 <_ZN8SdVolume9freeChainEm+0x72>
    2e3a:	88 ef       	ldi	r24, 0xF8	; 248
    2e3c:	9f ef       	ldi	r25, 0xFF	; 255
    2e3e:	af ef       	ldi	r26, 0xFF	; 255
    2e40:	bf e0       	ldi	r27, 0x0F	; 15
    2e42:	04 c0       	rjmp	.+8      	; 0x2e4c <_ZN8SdVolume9freeChainEm+0x7a>
    2e44:	88 ef       	ldi	r24, 0xF8	; 248
    2e46:	9f ef       	ldi	r25, 0xFF	; 255
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    2e4c:	c8 16       	cp	r12, r24
    2e4e:	d9 06       	cpc	r13, r25
    2e50:	ea 06       	cpc	r14, r26
    2e52:	fb 06       	cpc	r15, r27
    2e54:	c0 f2       	brcs	.-80     	; 0x2e06 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <_ZN8SdVolume9freeChainEm+0x8a>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2e5a:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	cf 90       	pop	r12
    2e74:	bf 90       	pop	r11
    2e76:	af 90       	pop	r10
    2e78:	08 95       	ret

00002e7a <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    2e7a:	8f 92       	push	r8
    2e7c:	9f 92       	push	r9
    2e7e:	af 92       	push	r10
    2e80:	bf 92       	push	r11
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	ec 01       	movw	r28, r24
    2e94:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    2e96:	70 93 5a 07 	sts	0x075A, r23	; 0x80075a <_ZN8SdVolume7sdCard_E+0x1>
    2e9a:	60 93 59 07 	sts	0x0759, r22	; 0x800759 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2e9e:	44 23       	and	r20, r20
    2ea0:	61 f1       	breq	.+88     	; 0x2efa <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    2ea2:	45 30       	cpi	r20, 0x05	; 5
    2ea4:	10 f0       	brcs	.+4      	; 0x2eaa <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	ef c0       	rjmp	.+478    	; 0x3088 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	ba dc       	rcall	.-1676   	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    2eb4:	88 23       	and	r24, r24
    2eb6:	b9 f3       	breq	.-18     	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2eb8:	20 e1       	ldi	r18, 0x10	; 16
    2eba:	12 9f       	mul	r17, r18
    2ebc:	a0 01       	movw	r20, r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	45 5b       	subi	r20, 0xB5	; 181
    2ec2:	58 4f       	sbci	r21, 0xF8	; 248
    2ec4:	fa 01       	movw	r30, r20
    2ec6:	e2 54       	subi	r30, 0x42	; 66
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	80 81       	ld	r24, Z
    2ecc:	8f 77       	andi	r24, 0x7F	; 127
    2ece:	59 f7       	brne	.-42     	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    2ed0:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	a2 81       	ldd	r26, Z+2	; 0x02
    2ed8:	b3 81       	ldd	r27, Z+3	; 0x03
    2eda:	84 36       	cpi	r24, 0x64	; 100
    2edc:	91 05       	cpc	r25, r1
    2ede:	a1 05       	cpc	r26, r1
    2ee0:	b1 05       	cpc	r27, r1
    2ee2:	08 f3       	brcs	.-62     	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    2ee4:	34 97       	sbiw	r30, 0x04	; 4
    2ee6:	c0 80       	ld	r12, Z
    2ee8:	d1 80       	ldd	r13, Z+1	; 0x01
    2eea:	e2 80       	ldd	r14, Z+2	; 0x02
    2eec:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    2eee:	c1 14       	cp	r12, r1
    2ef0:	d1 04       	cpc	r13, r1
    2ef2:	e1 04       	cpc	r14, r1
    2ef4:	f1 04       	cpc	r15, r1
    2ef6:	21 f4       	brne	.+8      	; 0x2f00 <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    2ef8:	d6 cf       	rjmp	.-84     	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    2efa:	c1 2c       	mov	r12, r1
    2efc:	d1 2c       	mov	r13, r1
    2efe:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	c7 01       	movw	r24, r14
    2f04:	b6 01       	movw	r22, r12
    2f06:	90 dc       	rcall	.-1760   	; 0x2828 <_ZN8SdVolume13cacheRawBlockEmh>
    2f08:	88 23       	and	r24, r24
    2f0a:	69 f2       	breq	.-102    	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2f0c:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <_ZN8SdVolume12cacheBuffer_E+0xb>
    2f10:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <_ZN8SdVolume12cacheBuffer_E+0xc>
    2f14:	81 15       	cp	r24, r1
    2f16:	92 40       	sbci	r25, 0x02	; 2
    2f18:	31 f6       	brne	.-116    	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2f1a:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2f1e:	99 23       	and	r25, r25
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    2f22:	c1 cf       	rjmp	.-126    	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2f24:	20 91 69 07 	lds	r18, 0x0769	; 0x800769 <_ZN8SdVolume12cacheBuffer_E+0xe>
    2f28:	30 91 6a 07 	lds	r19, 0x076A	; 0x80076a <_ZN8SdVolume12cacheBuffer_E+0xf>
    2f2c:	23 2b       	or	r18, r19
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    2f30:	ba cf       	rjmp	.-140    	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    2f32:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    2f36:	88 23       	and	r24, r24
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    2f3a:	b5 cf       	rjmp	.-150    	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    2f3c:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    2f3e:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2f40:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f4a:	e2 2f       	mov	r30, r18
    2f4c:	ba 01       	movw	r22, r20
    2f4e:	02 2e       	mov	r0, r18
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    2f52:	66 0f       	add	r22, r22
    2f54:	77 1f       	adc	r23, r23
    2f56:	0a 94       	dec	r0
    2f58:	e2 f7       	brpl	.-8      	; 0x2f52 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    2f5a:	86 17       	cp	r24, r22
    2f5c:	97 07       	cpc	r25, r23
    2f5e:	31 f0       	breq	.+12     	; 0x2f6c <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    2f60:	31 e0       	ldi	r19, 0x01	; 1
    2f62:	32 0f       	add	r19, r18
    2f64:	3d 87       	std	Y+13, r19	; 0x0d
    2f66:	28 30       	cpi	r18, 0x08	; 8
    2f68:	78 f3       	brcs	.-34     	; 0x2f48 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    2f6a:	9d cf       	rjmp	.-198    	; 0x2ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    2f6c:	20 91 71 07 	lds	r18, 0x0771	; 0x800771 <_ZN8SdVolume12cacheBuffer_E+0x16>
    2f70:	30 91 72 07 	lds	r19, 0x0772	; 0x800772 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    2f74:	21 15       	cp	r18, r1
    2f76:	31 05       	cpc	r19, r1
    2f78:	19 f0       	breq	.+6      	; 0x2f80 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	08 c0       	rjmp	.+16     	; 0x2f90 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    2f80:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <_ZN8SdVolume12cacheBuffer_E+0x24>
    2f84:	30 91 80 07 	lds	r19, 0x0780	; 0x800780 <_ZN8SdVolume12cacheBuffer_E+0x25>
    2f88:	40 91 81 07 	lds	r20, 0x0781	; 0x800781 <_ZN8SdVolume12cacheBuffer_E+0x26>
    2f8c:	50 91 82 07 	lds	r21, 0x0782	; 0x800782 <_ZN8SdVolume12cacheBuffer_E+0x27>
    2f90:	2d 83       	std	Y+5, r18	; 0x05
    2f92:	3e 83       	std	Y+6, r19	; 0x06
    2f94:	4f 83       	std	Y+7, r20	; 0x07
    2f96:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    2f98:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <_ZN8SdVolume12cacheBuffer_E+0xe>
    2f9c:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <_ZN8SdVolume12cacheBuffer_E+0xf>
    2fa0:	46 01       	movw	r8, r12
    2fa2:	57 01       	movw	r10, r14
    2fa4:	88 0e       	add	r8, r24
    2fa6:	99 1e       	adc	r9, r25
    2fa8:	a1 1c       	adc	r10, r1
    2faa:	b1 1c       	adc	r11, r1
    2fac:	8b 8a       	std	Y+19, r8	; 0x13
    2fae:	9c 8a       	std	Y+20, r9	; 0x14
    2fb0:	ad 8a       	std	Y+21, r10	; 0x15
    2fb2:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    2fb4:	00 91 6c 07 	lds	r16, 0x076C	; 0x80076c <_ZN8SdVolume12cacheBuffer_E+0x11>
    2fb8:	10 91 6d 07 	lds	r17, 0x076D	; 0x80076d <_ZN8SdVolume12cacheBuffer_E+0x12>
    2fbc:	19 8f       	std	Y+25, r17	; 0x19
    2fbe:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2fc0:	a0 91 6b 07 	lds	r26, 0x076B	; 0x80076b <_ZN8SdVolume12cacheBuffer_E+0x10>
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	d9 d0       	rcall	.+434    	; 0x317a <__muluhisi3>
    2fc8:	86 0e       	add	r8, r22
    2fca:	97 1e       	adc	r9, r23
    2fcc:	a8 1e       	adc	r10, r24
    2fce:	b9 1e       	adc	r11, r25
    2fd0:	8a 8e       	std	Y+26, r8	; 0x1a
    2fd2:	9b 8e       	std	Y+27, r9	; 0x1b
    2fd4:	ac 8e       	std	Y+28, r10	; 0x1c
    2fd6:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    2fd8:	85 e0       	ldi	r24, 0x05	; 5
    2fda:	00 0f       	add	r16, r16
    2fdc:	11 1f       	adc	r17, r17
    2fde:	8a 95       	dec	r24
    2fe0:	e1 f7       	brne	.-8      	; 0x2fda <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    2fe2:	01 50       	subi	r16, 0x01	; 1
    2fe4:	1e 4f       	sbci	r17, 0xFE	; 254
    2fe6:	01 2f       	mov	r16, r17
    2fe8:	11 27       	eor	r17, r17
    2fea:	06 95       	lsr	r16
    2fec:	80 0e       	add	r8, r16
    2fee:	91 1e       	adc	r9, r17
    2ff0:	a1 1c       	adc	r10, r1
    2ff2:	b1 1c       	adc	r11, r1
    2ff4:	8e 86       	std	Y+14, r8	; 0x0e
    2ff6:	9f 86       	std	Y+15, r9	; 0x0f
    2ff8:	a8 8a       	std	Y+16, r10	; 0x10
    2ffa:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    2ffc:	20 91 6e 07 	lds	r18, 0x076E	; 0x80076e <_ZN8SdVolume12cacheBuffer_E+0x13>
    3000:	30 91 6f 07 	lds	r19, 0x076F	; 0x80076f <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    3004:	21 15       	cp	r18, r1
    3006:	31 05       	cpc	r19, r1
    3008:	21 f0       	breq	.+8      	; 0x3012 <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    300a:	a9 01       	movw	r20, r18
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	08 c0       	rjmp	.+16     	; 0x3022 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    3012:	40 91 7b 07 	lds	r20, 0x077B	; 0x80077b <_ZN8SdVolume12cacheBuffer_E+0x20>
    3016:	50 91 7c 07 	lds	r21, 0x077C	; 0x80077c <_ZN8SdVolume12cacheBuffer_E+0x21>
    301a:	60 91 7d 07 	lds	r22, 0x077D	; 0x80077d <_ZN8SdVolume12cacheBuffer_E+0x22>
    301e:	70 91 7e 07 	lds	r23, 0x077E	; 0x80077e <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3022:	d7 01       	movw	r26, r14
    3024:	c6 01       	movw	r24, r12
    3026:	88 19       	sub	r24, r8
    3028:	99 09       	sbc	r25, r9
    302a:	aa 09       	sbc	r26, r10
    302c:	bb 09       	sbc	r27, r11
    302e:	84 0f       	add	r24, r20
    3030:	95 1f       	adc	r25, r21
    3032:	a6 1f       	adc	r26, r22
    3034:	b7 1f       	adc	r27, r23
    3036:	04 c0       	rjmp	.+8      	; 0x3040 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    3038:	b6 95       	lsr	r27
    303a:	a7 95       	ror	r26
    303c:	97 95       	ror	r25
    303e:	87 95       	ror	r24
    3040:	ea 95       	dec	r30
    3042:	d2 f7       	brpl	.-12     	; 0x3038 <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    3044:	89 87       	std	Y+9, r24	; 0x09
    3046:	9a 87       	std	Y+10, r25	; 0x0a
    3048:	ab 87       	std	Y+11, r26	; 0x0b
    304a:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    304c:	85 3f       	cpi	r24, 0xF5	; 245
    304e:	2f e0       	ldi	r18, 0x0F	; 15
    3050:	92 07       	cpc	r25, r18
    3052:	a1 05       	cpc	r26, r1
    3054:	b1 05       	cpc	r27, r1
    3056:	10 f4       	brcc	.+4      	; 0x305c <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    3058:	8c e0       	ldi	r24, 0x0C	; 12
    305a:	14 c0       	rjmp	.+40     	; 0x3084 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    305c:	85 3f       	cpi	r24, 0xF5	; 245
    305e:	9f 4f       	sbci	r25, 0xFF	; 255
    3060:	a1 05       	cpc	r26, r1
    3062:	b1 05       	cpc	r27, r1
    3064:	10 f4       	brcc	.+4      	; 0x306a <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    3066:	80 e1       	ldi	r24, 0x10	; 16
    3068:	0d c0       	rjmp	.+26     	; 0x3084 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    306a:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    306e:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    3072:	a0 91 89 07 	lds	r26, 0x0789	; 0x800789 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    3076:	b0 91 8a 07 	lds	r27, 0x078A	; 0x80078a <_ZN8SdVolume12cacheBuffer_E+0x2f>
    307a:	8a 8f       	std	Y+26, r24	; 0x1a
    307c:	9b 8f       	std	Y+27, r25	; 0x1b
    307e:	ac 8f       	std	Y+28, r26	; 0x1c
    3080:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    3082:	80 e2       	ldi	r24, 0x20	; 32
    3084:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    3086:	81 e0       	ldi	r24, 0x01	; 1
}
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	08 95       	ret

000030a2 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    30a2:	cf 93       	push	r28
  uint8_t sreg = SREG;
    30a4:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    30a6:	f8 94       	cli
  if (!initialized) {
    30a8:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <_ZN8SPIClass11initializedE>
    30ac:	81 11       	cpse	r24, r1
    30ae:	27 c0       	rjmp	.+78     	; 0x30fe <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    30b0:	e9 ec       	ldi	r30, 0xC9	; 201
    30b2:	f1 e0       	ldi	r31, 0x01	; 1
    30b4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    30b6:	e3 e8       	ldi	r30, 0x83	; 131
    30b8:	f1 e0       	ldi	r31, 0x01	; 1
    30ba:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    30bc:	e8 2f       	mov	r30, r24
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	ee 0f       	add	r30, r30
    30c2:	ff 1f       	adc	r31, r31
    30c4:	ec 50       	subi	r30, 0x0C	; 12
    30c6:	fe 4f       	sbci	r31, 0xFE	; 254
    30c8:	a5 91       	lpm	r26, Z+
    30ca:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    30cc:	ec 91       	ld	r30, X
    30ce:	e9 23       	and	r30, r25
    30d0:	21 f4       	brne	.+8      	; 0x30da <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    30d2:	61 e0       	ldi	r22, 0x01	; 1
    30d4:	85 e3       	ldi	r24, 0x35	; 53
    30d6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    30da:	61 e0       	ldi	r22, 0x01	; 1
    30dc:	85 e3       	ldi	r24, 0x35	; 53
    30de:	0e 94 92 07 	call	0xf24	; 0xf24 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    30e2:	8c b5       	in	r24, 0x2c	; 44
    30e4:	80 61       	ori	r24, 0x10	; 16
    30e6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    30e8:	8c b5       	in	r24, 0x2c	; 44
    30ea:	80 64       	ori	r24, 0x40	; 64
    30ec:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    30ee:	61 e0       	ldi	r22, 0x01	; 1
    30f0:	84 e3       	ldi	r24, 0x34	; 52
    30f2:	0e 94 92 07 	call	0xf24	; 0xf24 <pinMode>
    pinMode(MOSI, OUTPUT);
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	83 e3       	ldi	r24, 0x33	; 51
    30fa:	0e 94 92 07 	call	0xf24	; 0xf24 <pinMode>
  }
  initialized++; // reference count
    30fe:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <_ZN8SPIClass11initializedE>
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3108:	cf bf       	out	0x3f, r28	; 63
}
    310a:	cf 91       	pop	r28
    310c:	08 95       	ret

0000310e <__udivmodqi4>:
    310e:	99 1b       	sub	r25, r25
    3110:	79 e0       	ldi	r23, 0x09	; 9
    3112:	04 c0       	rjmp	.+8      	; 0x311c <__udivmodqi4_ep>

00003114 <__udivmodqi4_loop>:
    3114:	99 1f       	adc	r25, r25
    3116:	96 17       	cp	r25, r22
    3118:	08 f0       	brcs	.+2      	; 0x311c <__udivmodqi4_ep>
    311a:	96 1b       	sub	r25, r22

0000311c <__udivmodqi4_ep>:
    311c:	88 1f       	adc	r24, r24
    311e:	7a 95       	dec	r23
    3120:	c9 f7       	brne	.-14     	; 0x3114 <__udivmodqi4_loop>
    3122:	80 95       	com	r24
    3124:	08 95       	ret

00003126 <__udivmodsi4>:
    3126:	a1 e2       	ldi	r26, 0x21	; 33
    3128:	1a 2e       	mov	r1, r26
    312a:	aa 1b       	sub	r26, r26
    312c:	bb 1b       	sub	r27, r27
    312e:	fd 01       	movw	r30, r26
    3130:	0d c0       	rjmp	.+26     	; 0x314c <__udivmodsi4_ep>

00003132 <__udivmodsi4_loop>:
    3132:	aa 1f       	adc	r26, r26
    3134:	bb 1f       	adc	r27, r27
    3136:	ee 1f       	adc	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	a2 17       	cp	r26, r18
    313c:	b3 07       	cpc	r27, r19
    313e:	e4 07       	cpc	r30, r20
    3140:	f5 07       	cpc	r31, r21
    3142:	20 f0       	brcs	.+8      	; 0x314c <__udivmodsi4_ep>
    3144:	a2 1b       	sub	r26, r18
    3146:	b3 0b       	sbc	r27, r19
    3148:	e4 0b       	sbc	r30, r20
    314a:	f5 0b       	sbc	r31, r21

0000314c <__udivmodsi4_ep>:
    314c:	66 1f       	adc	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	88 1f       	adc	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	1a 94       	dec	r1
    3156:	69 f7       	brne	.-38     	; 0x3132 <__udivmodsi4_loop>
    3158:	60 95       	com	r22
    315a:	70 95       	com	r23
    315c:	80 95       	com	r24
    315e:	90 95       	com	r25
    3160:	9b 01       	movw	r18, r22
    3162:	ac 01       	movw	r20, r24
    3164:	bd 01       	movw	r22, r26
    3166:	cf 01       	movw	r24, r30
    3168:	08 95       	ret

0000316a <__tablejump2__>:
    316a:	ee 0f       	add	r30, r30
    316c:	ff 1f       	adc	r31, r31
    316e:	88 1f       	adc	r24, r24
    3170:	8b bf       	out	0x3b, r24	; 59
    3172:	07 90       	elpm	r0, Z+
    3174:	f6 91       	elpm	r31, Z
    3176:	e0 2d       	mov	r30, r0
    3178:	19 94       	eijmp

0000317a <__muluhisi3>:
    317a:	09 d0       	rcall	.+18     	; 0x318e <__umulhisi3>
    317c:	a5 9f       	mul	r26, r21
    317e:	90 0d       	add	r25, r0
    3180:	b4 9f       	mul	r27, r20
    3182:	90 0d       	add	r25, r0
    3184:	a4 9f       	mul	r26, r20
    3186:	80 0d       	add	r24, r0
    3188:	91 1d       	adc	r25, r1
    318a:	11 24       	eor	r1, r1
    318c:	08 95       	ret

0000318e <__umulhisi3>:
    318e:	a2 9f       	mul	r26, r18
    3190:	b0 01       	movw	r22, r0
    3192:	b3 9f       	mul	r27, r19
    3194:	c0 01       	movw	r24, r0
    3196:	a3 9f       	mul	r26, r19
    3198:	70 0d       	add	r23, r0
    319a:	81 1d       	adc	r24, r1
    319c:	11 24       	eor	r1, r1
    319e:	91 1d       	adc	r25, r1
    31a0:	b2 9f       	mul	r27, r18
    31a2:	70 0d       	add	r23, r0
    31a4:	81 1d       	adc	r24, r1
    31a6:	11 24       	eor	r1, r1
    31a8:	91 1d       	adc	r25, r1
    31aa:	08 95       	ret

000031ac <malloc>:
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	82 30       	cpi	r24, 0x02	; 2
    31b6:	91 05       	cpc	r25, r1
    31b8:	10 f4       	brcc	.+4      	; 0x31be <malloc+0x12>
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	e0 91 61 09 	lds	r30, 0x0961	; 0x800961 <__flp>
    31c2:	f0 91 62 09 	lds	r31, 0x0962	; 0x800962 <__flp+0x1>
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	30 97       	sbiw	r30, 0x00	; 0
    31d0:	19 f1       	breq	.+70     	; 0x3218 <malloc+0x6c>
    31d2:	40 81       	ld	r20, Z
    31d4:	51 81       	ldd	r21, Z+1	; 0x01
    31d6:	02 81       	ldd	r16, Z+2	; 0x02
    31d8:	13 81       	ldd	r17, Z+3	; 0x03
    31da:	48 17       	cp	r20, r24
    31dc:	59 07       	cpc	r21, r25
    31de:	c8 f0       	brcs	.+50     	; 0x3212 <malloc+0x66>
    31e0:	84 17       	cp	r24, r20
    31e2:	95 07       	cpc	r25, r21
    31e4:	69 f4       	brne	.+26     	; 0x3200 <malloc+0x54>
    31e6:	10 97       	sbiw	r26, 0x00	; 0
    31e8:	31 f0       	breq	.+12     	; 0x31f6 <malloc+0x4a>
    31ea:	12 96       	adiw	r26, 0x02	; 2
    31ec:	0c 93       	st	X, r16
    31ee:	12 97       	sbiw	r26, 0x02	; 2
    31f0:	13 96       	adiw	r26, 0x03	; 3
    31f2:	1c 93       	st	X, r17
    31f4:	27 c0       	rjmp	.+78     	; 0x3244 <malloc+0x98>
    31f6:	00 93 61 09 	sts	0x0961, r16	; 0x800961 <__flp>
    31fa:	10 93 62 09 	sts	0x0962, r17	; 0x800962 <__flp+0x1>
    31fe:	22 c0       	rjmp	.+68     	; 0x3244 <malloc+0x98>
    3200:	21 15       	cp	r18, r1
    3202:	31 05       	cpc	r19, r1
    3204:	19 f0       	breq	.+6      	; 0x320c <malloc+0x60>
    3206:	42 17       	cp	r20, r18
    3208:	53 07       	cpc	r21, r19
    320a:	18 f4       	brcc	.+6      	; 0x3212 <malloc+0x66>
    320c:	9a 01       	movw	r18, r20
    320e:	bd 01       	movw	r22, r26
    3210:	ef 01       	movw	r28, r30
    3212:	df 01       	movw	r26, r30
    3214:	f8 01       	movw	r30, r16
    3216:	db cf       	rjmp	.-74     	; 0x31ce <malloc+0x22>
    3218:	21 15       	cp	r18, r1
    321a:	31 05       	cpc	r19, r1
    321c:	f9 f0       	breq	.+62     	; 0x325c <malloc+0xb0>
    321e:	28 1b       	sub	r18, r24
    3220:	39 0b       	sbc	r19, r25
    3222:	24 30       	cpi	r18, 0x04	; 4
    3224:	31 05       	cpc	r19, r1
    3226:	80 f4       	brcc	.+32     	; 0x3248 <malloc+0x9c>
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	61 15       	cp	r22, r1
    322e:	71 05       	cpc	r23, r1
    3230:	21 f0       	breq	.+8      	; 0x323a <malloc+0x8e>
    3232:	fb 01       	movw	r30, r22
    3234:	93 83       	std	Z+3, r25	; 0x03
    3236:	82 83       	std	Z+2, r24	; 0x02
    3238:	04 c0       	rjmp	.+8      	; 0x3242 <malloc+0x96>
    323a:	90 93 62 09 	sts	0x0962, r25	; 0x800962 <__flp+0x1>
    323e:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <__flp>
    3242:	fe 01       	movw	r30, r28
    3244:	32 96       	adiw	r30, 0x02	; 2
    3246:	44 c0       	rjmp	.+136    	; 0x32d0 <malloc+0x124>
    3248:	fe 01       	movw	r30, r28
    324a:	e2 0f       	add	r30, r18
    324c:	f3 1f       	adc	r31, r19
    324e:	81 93       	st	Z+, r24
    3250:	91 93       	st	Z+, r25
    3252:	22 50       	subi	r18, 0x02	; 2
    3254:	31 09       	sbc	r19, r1
    3256:	39 83       	std	Y+1, r19	; 0x01
    3258:	28 83       	st	Y, r18
    325a:	3a c0       	rjmp	.+116    	; 0x32d0 <malloc+0x124>
    325c:	20 91 5f 09 	lds	r18, 0x095F	; 0x80095f <__brkval>
    3260:	30 91 60 09 	lds	r19, 0x0960	; 0x800960 <__brkval+0x1>
    3264:	23 2b       	or	r18, r19
    3266:	41 f4       	brne	.+16     	; 0x3278 <malloc+0xcc>
    3268:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    326c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3270:	30 93 60 09 	sts	0x0960, r19	; 0x800960 <__brkval+0x1>
    3274:	20 93 5f 09 	sts	0x095F, r18	; 0x80095f <__brkval>
    3278:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    327c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3280:	21 15       	cp	r18, r1
    3282:	31 05       	cpc	r19, r1
    3284:	41 f4       	brne	.+16     	; 0x3296 <malloc+0xea>
    3286:	2d b7       	in	r18, 0x3d	; 61
    3288:	3e b7       	in	r19, 0x3e	; 62
    328a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    328e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3292:	24 1b       	sub	r18, r20
    3294:	35 0b       	sbc	r19, r21
    3296:	e0 91 5f 09 	lds	r30, 0x095F	; 0x80095f <__brkval>
    329a:	f0 91 60 09 	lds	r31, 0x0960	; 0x800960 <__brkval+0x1>
    329e:	e2 17       	cp	r30, r18
    32a0:	f3 07       	cpc	r31, r19
    32a2:	a0 f4       	brcc	.+40     	; 0x32cc <malloc+0x120>
    32a4:	2e 1b       	sub	r18, r30
    32a6:	3f 0b       	sbc	r19, r31
    32a8:	28 17       	cp	r18, r24
    32aa:	39 07       	cpc	r19, r25
    32ac:	78 f0       	brcs	.+30     	; 0x32cc <malloc+0x120>
    32ae:	ac 01       	movw	r20, r24
    32b0:	4e 5f       	subi	r20, 0xFE	; 254
    32b2:	5f 4f       	sbci	r21, 0xFF	; 255
    32b4:	24 17       	cp	r18, r20
    32b6:	35 07       	cpc	r19, r21
    32b8:	48 f0       	brcs	.+18     	; 0x32cc <malloc+0x120>
    32ba:	4e 0f       	add	r20, r30
    32bc:	5f 1f       	adc	r21, r31
    32be:	50 93 60 09 	sts	0x0960, r21	; 0x800960 <__brkval+0x1>
    32c2:	40 93 5f 09 	sts	0x095F, r20	; 0x80095f <__brkval>
    32c6:	81 93       	st	Z+, r24
    32c8:	91 93       	st	Z+, r25
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <malloc+0x124>
    32cc:	e0 e0       	ldi	r30, 0x00	; 0
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	cf 01       	movw	r24, r30
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	08 95       	ret

000032dc <free>:
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <free+0xa>
    32e4:	81 c0       	rjmp	.+258    	; 0x33e8 <free+0x10c>
    32e6:	fc 01       	movw	r30, r24
    32e8:	32 97       	sbiw	r30, 0x02	; 2
    32ea:	13 82       	std	Z+3, r1	; 0x03
    32ec:	12 82       	std	Z+2, r1	; 0x02
    32ee:	a0 91 61 09 	lds	r26, 0x0961	; 0x800961 <__flp>
    32f2:	b0 91 62 09 	lds	r27, 0x0962	; 0x800962 <__flp+0x1>
    32f6:	10 97       	sbiw	r26, 0x00	; 0
    32f8:	81 f4       	brne	.+32     	; 0x331a <free+0x3e>
    32fa:	20 81       	ld	r18, Z
    32fc:	31 81       	ldd	r19, Z+1	; 0x01
    32fe:	82 0f       	add	r24, r18
    3300:	93 1f       	adc	r25, r19
    3302:	20 91 5f 09 	lds	r18, 0x095F	; 0x80095f <__brkval>
    3306:	30 91 60 09 	lds	r19, 0x0960	; 0x800960 <__brkval+0x1>
    330a:	28 17       	cp	r18, r24
    330c:	39 07       	cpc	r19, r25
    330e:	51 f5       	brne	.+84     	; 0x3364 <free+0x88>
    3310:	f0 93 60 09 	sts	0x0960, r31	; 0x800960 <__brkval+0x1>
    3314:	e0 93 5f 09 	sts	0x095F, r30	; 0x80095f <__brkval>
    3318:	67 c0       	rjmp	.+206    	; 0x33e8 <free+0x10c>
    331a:	ed 01       	movw	r28, r26
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	ce 17       	cp	r28, r30
    3322:	df 07       	cpc	r29, r31
    3324:	40 f4       	brcc	.+16     	; 0x3336 <free+0x5a>
    3326:	4a 81       	ldd	r20, Y+2	; 0x02
    3328:	5b 81       	ldd	r21, Y+3	; 0x03
    332a:	9e 01       	movw	r18, r28
    332c:	41 15       	cp	r20, r1
    332e:	51 05       	cpc	r21, r1
    3330:	f1 f0       	breq	.+60     	; 0x336e <free+0x92>
    3332:	ea 01       	movw	r28, r20
    3334:	f5 cf       	rjmp	.-22     	; 0x3320 <free+0x44>
    3336:	d3 83       	std	Z+3, r29	; 0x03
    3338:	c2 83       	std	Z+2, r28	; 0x02
    333a:	40 81       	ld	r20, Z
    333c:	51 81       	ldd	r21, Z+1	; 0x01
    333e:	84 0f       	add	r24, r20
    3340:	95 1f       	adc	r25, r21
    3342:	c8 17       	cp	r28, r24
    3344:	d9 07       	cpc	r29, r25
    3346:	59 f4       	brne	.+22     	; 0x335e <free+0x82>
    3348:	88 81       	ld	r24, Y
    334a:	99 81       	ldd	r25, Y+1	; 0x01
    334c:	84 0f       	add	r24, r20
    334e:	95 1f       	adc	r25, r21
    3350:	02 96       	adiw	r24, 0x02	; 2
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	80 83       	st	Z, r24
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	93 83       	std	Z+3, r25	; 0x03
    335c:	82 83       	std	Z+2, r24	; 0x02
    335e:	21 15       	cp	r18, r1
    3360:	31 05       	cpc	r19, r1
    3362:	29 f4       	brne	.+10     	; 0x336e <free+0x92>
    3364:	f0 93 62 09 	sts	0x0962, r31	; 0x800962 <__flp+0x1>
    3368:	e0 93 61 09 	sts	0x0961, r30	; 0x800961 <__flp>
    336c:	3d c0       	rjmp	.+122    	; 0x33e8 <free+0x10c>
    336e:	e9 01       	movw	r28, r18
    3370:	fb 83       	std	Y+3, r31	; 0x03
    3372:	ea 83       	std	Y+2, r30	; 0x02
    3374:	49 91       	ld	r20, Y+
    3376:	59 91       	ld	r21, Y+
    3378:	c4 0f       	add	r28, r20
    337a:	d5 1f       	adc	r29, r21
    337c:	ec 17       	cp	r30, r28
    337e:	fd 07       	cpc	r31, r29
    3380:	61 f4       	brne	.+24     	; 0x339a <free+0xbe>
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	84 0f       	add	r24, r20
    3388:	95 1f       	adc	r25, r21
    338a:	02 96       	adiw	r24, 0x02	; 2
    338c:	e9 01       	movw	r28, r18
    338e:	99 83       	std	Y+1, r25	; 0x01
    3390:	88 83       	st	Y, r24
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	9b 83       	std	Y+3, r25	; 0x03
    3398:	8a 83       	std	Y+2, r24	; 0x02
    339a:	e0 e0       	ldi	r30, 0x00	; 0
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	12 96       	adiw	r26, 0x02	; 2
    33a0:	8d 91       	ld	r24, X+
    33a2:	9c 91       	ld	r25, X
    33a4:	13 97       	sbiw	r26, 0x03	; 3
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	19 f0       	breq	.+6      	; 0x33b0 <free+0xd4>
    33aa:	fd 01       	movw	r30, r26
    33ac:	dc 01       	movw	r26, r24
    33ae:	f7 cf       	rjmp	.-18     	; 0x339e <free+0xc2>
    33b0:	8d 91       	ld	r24, X+
    33b2:	9c 91       	ld	r25, X
    33b4:	11 97       	sbiw	r26, 0x01	; 1
    33b6:	9d 01       	movw	r18, r26
    33b8:	2e 5f       	subi	r18, 0xFE	; 254
    33ba:	3f 4f       	sbci	r19, 0xFF	; 255
    33bc:	82 0f       	add	r24, r18
    33be:	93 1f       	adc	r25, r19
    33c0:	20 91 5f 09 	lds	r18, 0x095F	; 0x80095f <__brkval>
    33c4:	30 91 60 09 	lds	r19, 0x0960	; 0x800960 <__brkval+0x1>
    33c8:	28 17       	cp	r18, r24
    33ca:	39 07       	cpc	r19, r25
    33cc:	69 f4       	brne	.+26     	; 0x33e8 <free+0x10c>
    33ce:	30 97       	sbiw	r30, 0x00	; 0
    33d0:	29 f4       	brne	.+10     	; 0x33dc <free+0x100>
    33d2:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <__flp+0x1>
    33d6:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <__flp>
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <free+0x104>
    33dc:	13 82       	std	Z+3, r1	; 0x03
    33de:	12 82       	std	Z+2, r1	; 0x02
    33e0:	b0 93 60 09 	sts	0x0960, r27	; 0x800960 <__brkval+0x1>
    33e4:	a0 93 5f 09 	sts	0x095F, r26	; 0x80095f <__brkval>
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	08 95       	ret

000033ee <realloc>:
    33ee:	6f 92       	push	r6
    33f0:	7f 92       	push	r7
    33f2:	8f 92       	push	r8
    33f4:	9f 92       	push	r9
    33f6:	af 92       	push	r10
    33f8:	bf 92       	push	r11
    33fa:	cf 92       	push	r12
    33fc:	df 92       	push	r13
    33fe:	ef 92       	push	r14
    3400:	ff 92       	push	r15
    3402:	0f 93       	push	r16
    3404:	1f 93       	push	r17
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	81 f4       	brne	.+32     	; 0x342e <realloc+0x40>
    340e:	cb 01       	movw	r24, r22
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	df 90       	pop	r13
    341e:	cf 90       	pop	r12
    3420:	bf 90       	pop	r11
    3422:	af 90       	pop	r10
    3424:	9f 90       	pop	r9
    3426:	8f 90       	pop	r8
    3428:	7f 90       	pop	r7
    342a:	6f 90       	pop	r6
    342c:	bf ce       	rjmp	.-642    	; 0x31ac <malloc>
    342e:	fc 01       	movw	r30, r24
    3430:	e6 0f       	add	r30, r22
    3432:	f7 1f       	adc	r31, r23
    3434:	9c 01       	movw	r18, r24
    3436:	22 50       	subi	r18, 0x02	; 2
    3438:	31 09       	sbc	r19, r1
    343a:	e2 17       	cp	r30, r18
    343c:	f3 07       	cpc	r31, r19
    343e:	08 f4       	brcc	.+2      	; 0x3442 <realloc+0x54>
    3440:	a5 c0       	rjmp	.+330    	; 0x358c <realloc+0x19e>
    3442:	ec 01       	movw	r28, r24
    3444:	d9 01       	movw	r26, r18
    3446:	0d 91       	ld	r16, X+
    3448:	1c 91       	ld	r17, X
    344a:	11 97       	sbiw	r26, 0x01	; 1
    344c:	06 17       	cp	r16, r22
    344e:	17 07       	cpc	r17, r23
    3450:	a8 f0       	brcs	.+42     	; 0x347c <realloc+0x8e>
    3452:	05 30       	cpi	r16, 0x05	; 5
    3454:	11 05       	cpc	r17, r1
    3456:	08 f4       	brcc	.+2      	; 0x345a <realloc+0x6c>
    3458:	97 c0       	rjmp	.+302    	; 0x3588 <realloc+0x19a>
    345a:	c8 01       	movw	r24, r16
    345c:	04 97       	sbiw	r24, 0x04	; 4
    345e:	86 17       	cp	r24, r22
    3460:	97 07       	cpc	r25, r23
    3462:	08 f4       	brcc	.+2      	; 0x3466 <realloc+0x78>
    3464:	91 c0       	rjmp	.+290    	; 0x3588 <realloc+0x19a>
    3466:	02 50       	subi	r16, 0x02	; 2
    3468:	11 09       	sbc	r17, r1
    346a:	06 1b       	sub	r16, r22
    346c:	17 0b       	sbc	r17, r23
    346e:	01 93       	st	Z+, r16
    3470:	11 93       	st	Z+, r17
    3472:	6d 93       	st	X+, r22
    3474:	7c 93       	st	X, r23
    3476:	cf 01       	movw	r24, r30
    3478:	31 df       	rcall	.-414    	; 0x32dc <free>
    347a:	86 c0       	rjmp	.+268    	; 0x3588 <realloc+0x19a>
    347c:	5b 01       	movw	r10, r22
    347e:	a0 1a       	sub	r10, r16
    3480:	b1 0a       	sbc	r11, r17
    3482:	4c 01       	movw	r8, r24
    3484:	80 0e       	add	r8, r16
    3486:	91 1e       	adc	r9, r17
    3488:	a0 91 61 09 	lds	r26, 0x0961	; 0x800961 <__flp>
    348c:	b0 91 62 09 	lds	r27, 0x0962	; 0x800962 <__flp+0x1>
    3490:	61 2c       	mov	r6, r1
    3492:	71 2c       	mov	r7, r1
    3494:	e1 2c       	mov	r14, r1
    3496:	f1 2c       	mov	r15, r1
    3498:	10 97       	sbiw	r26, 0x00	; 0
    349a:	09 f4       	brne	.+2      	; 0x349e <realloc+0xb0>
    349c:	46 c0       	rjmp	.+140    	; 0x352a <realloc+0x13c>
    349e:	8d 91       	ld	r24, X+
    34a0:	9c 91       	ld	r25, X
    34a2:	11 97       	sbiw	r26, 0x01	; 1
    34a4:	a8 15       	cp	r26, r8
    34a6:	b9 05       	cpc	r27, r9
    34a8:	b1 f5       	brne	.+108    	; 0x3516 <realloc+0x128>
    34aa:	6c 01       	movw	r12, r24
    34ac:	42 e0       	ldi	r20, 0x02	; 2
    34ae:	c4 0e       	add	r12, r20
    34b0:	d1 1c       	adc	r13, r1
    34b2:	ca 14       	cp	r12, r10
    34b4:	db 04       	cpc	r13, r11
    34b6:	78 f1       	brcs	.+94     	; 0x3516 <realloc+0x128>
    34b8:	4c 01       	movw	r8, r24
    34ba:	8a 18       	sub	r8, r10
    34bc:	9b 08       	sbc	r9, r11
    34be:	64 01       	movw	r12, r8
    34c0:	42 e0       	ldi	r20, 0x02	; 2
    34c2:	c4 0e       	add	r12, r20
    34c4:	d1 1c       	adc	r13, r1
    34c6:	12 96       	adiw	r26, 0x02	; 2
    34c8:	bc 90       	ld	r11, X
    34ca:	12 97       	sbiw	r26, 0x02	; 2
    34cc:	13 96       	adiw	r26, 0x03	; 3
    34ce:	ac 91       	ld	r26, X
    34d0:	b5 e0       	ldi	r27, 0x05	; 5
    34d2:	cb 16       	cp	r12, r27
    34d4:	d1 04       	cpc	r13, r1
    34d6:	40 f0       	brcs	.+16     	; 0x34e8 <realloc+0xfa>
    34d8:	b2 82       	std	Z+2, r11	; 0x02
    34da:	a3 83       	std	Z+3, r26	; 0x03
    34dc:	91 82       	std	Z+1, r9	; 0x01
    34de:	80 82       	st	Z, r8
    34e0:	d9 01       	movw	r26, r18
    34e2:	6d 93       	st	X+, r22
    34e4:	7c 93       	st	X, r23
    34e6:	09 c0       	rjmp	.+18     	; 0x34fa <realloc+0x10c>
    34e8:	0e 5f       	subi	r16, 0xFE	; 254
    34ea:	1f 4f       	sbci	r17, 0xFF	; 255
    34ec:	80 0f       	add	r24, r16
    34ee:	91 1f       	adc	r25, r17
    34f0:	f9 01       	movw	r30, r18
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	80 83       	st	Z, r24
    34f6:	eb 2d       	mov	r30, r11
    34f8:	fa 2f       	mov	r31, r26
    34fa:	e1 14       	cp	r14, r1
    34fc:	f1 04       	cpc	r15, r1
    34fe:	31 f0       	breq	.+12     	; 0x350c <realloc+0x11e>
    3500:	d7 01       	movw	r26, r14
    3502:	13 96       	adiw	r26, 0x03	; 3
    3504:	fc 93       	st	X, r31
    3506:	ee 93       	st	-X, r30
    3508:	12 97       	sbiw	r26, 0x02	; 2
    350a:	3e c0       	rjmp	.+124    	; 0x3588 <realloc+0x19a>
    350c:	f0 93 62 09 	sts	0x0962, r31	; 0x800962 <__flp+0x1>
    3510:	e0 93 61 09 	sts	0x0961, r30	; 0x800961 <__flp>
    3514:	39 c0       	rjmp	.+114    	; 0x3588 <realloc+0x19a>
    3516:	68 16       	cp	r6, r24
    3518:	79 06       	cpc	r7, r25
    351a:	08 f4       	brcc	.+2      	; 0x351e <realloc+0x130>
    351c:	3c 01       	movw	r6, r24
    351e:	7d 01       	movw	r14, r26
    3520:	12 96       	adiw	r26, 0x02	; 2
    3522:	0d 90       	ld	r0, X+
    3524:	bc 91       	ld	r27, X
    3526:	a0 2d       	mov	r26, r0
    3528:	b7 cf       	rjmp	.-146    	; 0x3498 <realloc+0xaa>
    352a:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <__brkval>
    352e:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <__brkval+0x1>
    3532:	88 16       	cp	r8, r24
    3534:	99 06       	cpc	r9, r25
    3536:	e1 f4       	brne	.+56     	; 0x3570 <realloc+0x182>
    3538:	66 16       	cp	r6, r22
    353a:	77 06       	cpc	r7, r23
    353c:	c8 f4       	brcc	.+50     	; 0x3570 <realloc+0x182>
    353e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3542:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	41 f4       	brne	.+16     	; 0x355a <realloc+0x16c>
    354a:	8d b7       	in	r24, 0x3d	; 61
    354c:	9e b7       	in	r25, 0x3e	; 62
    354e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3552:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3556:	84 1b       	sub	r24, r20
    3558:	95 0b       	sbc	r25, r21
    355a:	e8 17       	cp	r30, r24
    355c:	f9 07       	cpc	r31, r25
    355e:	b0 f4       	brcc	.+44     	; 0x358c <realloc+0x19e>
    3560:	f0 93 60 09 	sts	0x0960, r31	; 0x800960 <__brkval+0x1>
    3564:	e0 93 5f 09 	sts	0x095F, r30	; 0x80095f <__brkval>
    3568:	f9 01       	movw	r30, r18
    356a:	71 83       	std	Z+1, r23	; 0x01
    356c:	60 83       	st	Z, r22
    356e:	0c c0       	rjmp	.+24     	; 0x3588 <realloc+0x19a>
    3570:	cb 01       	movw	r24, r22
    3572:	1c de       	rcall	.-968    	; 0x31ac <malloc>
    3574:	7c 01       	movw	r14, r24
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	49 f0       	breq	.+18     	; 0x358c <realloc+0x19e>
    357a:	a8 01       	movw	r20, r16
    357c:	be 01       	movw	r22, r28
    357e:	17 d0       	rcall	.+46     	; 0x35ae <memcpy>
    3580:	ce 01       	movw	r24, r28
    3582:	ac de       	rcall	.-680    	; 0x32dc <free>
    3584:	c7 01       	movw	r24, r14
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <realloc+0x1a2>
    3588:	ce 01       	movw	r24, r28
    358a:	02 c0       	rjmp	.+4      	; 0x3590 <realloc+0x1a2>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	1f 91       	pop	r17
    3596:	0f 91       	pop	r16
    3598:	ff 90       	pop	r15
    359a:	ef 90       	pop	r14
    359c:	df 90       	pop	r13
    359e:	cf 90       	pop	r12
    35a0:	bf 90       	pop	r11
    35a2:	af 90       	pop	r10
    35a4:	9f 90       	pop	r9
    35a6:	8f 90       	pop	r8
    35a8:	7f 90       	pop	r7
    35aa:	6f 90       	pop	r6
    35ac:	08 95       	ret

000035ae <memcpy>:
    35ae:	fb 01       	movw	r30, r22
    35b0:	dc 01       	movw	r26, r24
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <memcpy+0xa>
    35b4:	01 90       	ld	r0, Z+
    35b6:	0d 92       	st	X+, r0
    35b8:	41 50       	subi	r20, 0x01	; 1
    35ba:	50 40       	sbci	r21, 0x00	; 0
    35bc:	d8 f7       	brcc	.-10     	; 0x35b4 <memcpy+0x6>
    35be:	08 95       	ret

000035c0 <strcpy>:
    35c0:	fb 01       	movw	r30, r22
    35c2:	dc 01       	movw	r26, r24
    35c4:	01 90       	ld	r0, Z+
    35c6:	0d 92       	st	X+, r0
    35c8:	00 20       	and	r0, r0
    35ca:	e1 f7       	brne	.-8      	; 0x35c4 <strcpy+0x4>
    35cc:	08 95       	ret

000035ce <__do_global_dtors>:
    35ce:	11 e0       	ldi	r17, 0x01	; 1
    35d0:	cc e0       	ldi	r28, 0x0C	; 12
    35d2:	d1 e0       	ldi	r29, 0x01	; 1
    35d4:	00 e0       	ldi	r16, 0x00	; 0
    35d6:	05 c0       	rjmp	.+10     	; 0x35e2 <__do_global_dtors+0x14>
    35d8:	80 2f       	mov	r24, r16
    35da:	fe 01       	movw	r30, r28
    35dc:	c6 dd       	rcall	.-1140   	; 0x316a <__tablejump2__>
    35de:	21 96       	adiw	r28, 0x01	; 1
    35e0:	01 1d       	adc	r16, r1
    35e2:	cd 30       	cpi	r28, 0x0D	; 13
    35e4:	d1 07       	cpc	r29, r17
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	08 07       	cpc	r16, r24
    35ea:	b1 f7       	brne	.-20     	; 0x35d8 <__do_global_dtors+0xa>
    35ec:	f8 94       	cli

000035ee <__stop_program>:
    35ee:	ff cf       	rjmp	.-2      	; 0x35ee <__stop_program>
